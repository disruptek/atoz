
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5, base64,
  httpcore, sigv4

## auto-generated via openapi macro
## title: AWS IoT
## version: 2015-05-28
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS IoT</fullname> <p>AWS IoT provides secure, bi-directional communication between Internet-connected devices (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud. You can discover your custom IoT-Data endpoint to communicate with, configure rules for data processing and integration with other services, organize resources associated with each device (Registry), configure logging, and create and manage policies and credentials to authenticate devices.</p> <p>For more information about how AWS IoT works, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html">Developer Guide</a>.</p> <p>For information about how to use the credentials provider for AWS IoT, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html">Authorizing Direct Calls to AWS Services</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iot/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                          header: JsonNode = nil; formData: JsonNode = nil;
                          body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                  path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_21625435 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_21625435](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_21625435): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "iot.ap-northeast-1.amazonaws.com", "ap-southeast-1": "iot.ap-southeast-1.amazonaws.com",
                           "us-west-2": "iot.us-west-2.amazonaws.com",
                           "eu-west-2": "iot.eu-west-2.amazonaws.com", "ap-northeast-3": "iot.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "iot.eu-central-1.amazonaws.com",
                           "us-east-2": "iot.us-east-2.amazonaws.com",
                           "us-east-1": "iot.us-east-1.amazonaws.com", "cn-northwest-1": "iot.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "iot.ap-south-1.amazonaws.com",
                           "eu-north-1": "iot.eu-north-1.amazonaws.com", "ap-northeast-2": "iot.ap-northeast-2.amazonaws.com",
                           "us-west-1": "iot.us-west-1.amazonaws.com",
                           "us-gov-east-1": "iot.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "iot.eu-west-3.amazonaws.com",
                           "cn-north-1": "iot.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "iot.sa-east-1.amazonaws.com",
                           "eu-west-1": "iot.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "iot.us-gov-west-1.amazonaws.com", "ap-southeast-2": "iot.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "iot.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "iot.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "iot.ap-southeast-1.amazonaws.com",
      "us-west-2": "iot.us-west-2.amazonaws.com",
      "eu-west-2": "iot.eu-west-2.amazonaws.com",
      "ap-northeast-3": "iot.ap-northeast-3.amazonaws.com",
      "eu-central-1": "iot.eu-central-1.amazonaws.com",
      "us-east-2": "iot.us-east-2.amazonaws.com",
      "us-east-1": "iot.us-east-1.amazonaws.com",
      "cn-northwest-1": "iot.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "iot.ap-south-1.amazonaws.com",
      "eu-north-1": "iot.eu-north-1.amazonaws.com",
      "ap-northeast-2": "iot.ap-northeast-2.amazonaws.com",
      "us-west-1": "iot.us-west-1.amazonaws.com",
      "us-gov-east-1": "iot.us-gov-east-1.amazonaws.com",
      "eu-west-3": "iot.eu-west-3.amazonaws.com",
      "cn-north-1": "iot.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "iot.sa-east-1.amazonaws.com",
      "eu-west-1": "iot.eu-west-1.amazonaws.com",
      "us-gov-west-1": "iot.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "iot.ap-southeast-2.amazonaws.com",
      "ca-central-1": "iot.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "iot"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body: string = ""): Recallable {.
    base.}
type
  Call_AcceptCertificateTransfer_21625779 = ref object of OpenApiRestCall_21625435
proc url_AcceptCertificateTransfer_21625781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accept-certificate-transfer/"),
               (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AcceptCertificateTransfer_21625780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `certificateId` field"
  var valid_21625895 = path.getOrDefault("certificateId")
  valid_21625895 = validateParameter(valid_21625895, JString, required = true,
                                   default = nil)
  if valid_21625895 != nil:
    section.add "certificateId", valid_21625895
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
  ##              : Specifies whether the certificate is active.
  section = newJObject()
  var valid_21625896 = query.getOrDefault("setAsActive")
  valid_21625896 = validateParameter(valid_21625896, JBool, required = false,
                                   default = nil)
  if valid_21625896 != nil:
    section.add "setAsActive", valid_21625896
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21625897 = header.getOrDefault("X-Amz-Date")
  valid_21625897 = validateParameter(valid_21625897, JString, required = false,
                                   default = nil)
  if valid_21625897 != nil:
    section.add "X-Amz-Date", valid_21625897
  var valid_21625898 = header.getOrDefault("X-Amz-Security-Token")
  valid_21625898 = validateParameter(valid_21625898, JString, required = false,
                                   default = nil)
  if valid_21625898 != nil:
    section.add "X-Amz-Security-Token", valid_21625898
  var valid_21625899 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21625899 = validateParameter(valid_21625899, JString, required = false,
                                   default = nil)
  if valid_21625899 != nil:
    section.add "X-Amz-Content-Sha256", valid_21625899
  var valid_21625900 = header.getOrDefault("X-Amz-Algorithm")
  valid_21625900 = validateParameter(valid_21625900, JString, required = false,
                                   default = nil)
  if valid_21625900 != nil:
    section.add "X-Amz-Algorithm", valid_21625900
  var valid_21625901 = header.getOrDefault("X-Amz-Signature")
  valid_21625901 = validateParameter(valid_21625901, JString, required = false,
                                   default = nil)
  if valid_21625901 != nil:
    section.add "X-Amz-Signature", valid_21625901
  var valid_21625902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21625902 = validateParameter(valid_21625902, JString, required = false,
                                   default = nil)
  if valid_21625902 != nil:
    section.add "X-Amz-SignedHeaders", valid_21625902
  var valid_21625903 = header.getOrDefault("X-Amz-Credential")
  valid_21625903 = validateParameter(valid_21625903, JString, required = false,
                                   default = nil)
  if valid_21625903 != nil:
    section.add "X-Amz-Credential", valid_21625903
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21625928: Call_AcceptCertificateTransfer_21625779;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>
  ## 
  let valid = call_21625928.validator(path, query, header, formData, body, _)
  let scheme = call_21625928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21625928.makeUrl(scheme.get, call_21625928.host, call_21625928.base,
                               call_21625928.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21625928, uri, valid, _)

proc call*(call_21625991: Call_AcceptCertificateTransfer_21625779;
          certificateId: string; setAsActive: bool = false): Recallable =
  ## acceptCertificateTransfer
  ## <p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>
  ##   certificateId: string (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  ##   setAsActive: bool
  ##              : Specifies whether the certificate is active.
  var path_21625993 = newJObject()
  var query_21625995 = newJObject()
  add(path_21625993, "certificateId", newJString(certificateId))
  add(query_21625995, "setAsActive", newJBool(setAsActive))
  result = call_21625991.call(path_21625993, query_21625995, nil, nil, nil)

var acceptCertificateTransfer* = Call_AcceptCertificateTransfer_21625779(
    name: "acceptCertificateTransfer", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/accept-certificate-transfer/{certificateId}",
    validator: validate_AcceptCertificateTransfer_21625780, base: "/",
    makeUrl: url_AcceptCertificateTransfer_21625781,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AddThingToBillingGroup_21626033 = ref object of OpenApiRestCall_21625435
proc url_AddThingToBillingGroup_21626035(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_AddThingToBillingGroup_21626034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds a thing to a billing group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626036 = header.getOrDefault("X-Amz-Date")
  valid_21626036 = validateParameter(valid_21626036, JString, required = false,
                                   default = nil)
  if valid_21626036 != nil:
    section.add "X-Amz-Date", valid_21626036
  var valid_21626037 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626037 = validateParameter(valid_21626037, JString, required = false,
                                   default = nil)
  if valid_21626037 != nil:
    section.add "X-Amz-Security-Token", valid_21626037
  var valid_21626038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626038 = validateParameter(valid_21626038, JString, required = false,
                                   default = nil)
  if valid_21626038 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626038
  var valid_21626039 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626039 = validateParameter(valid_21626039, JString, required = false,
                                   default = nil)
  if valid_21626039 != nil:
    section.add "X-Amz-Algorithm", valid_21626039
  var valid_21626040 = header.getOrDefault("X-Amz-Signature")
  valid_21626040 = validateParameter(valid_21626040, JString, required = false,
                                   default = nil)
  if valid_21626040 != nil:
    section.add "X-Amz-Signature", valid_21626040
  var valid_21626041 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626041 = validateParameter(valid_21626041, JString, required = false,
                                   default = nil)
  if valid_21626041 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626041
  var valid_21626042 = header.getOrDefault("X-Amz-Credential")
  valid_21626042 = validateParameter(valid_21626042, JString, required = false,
                                   default = nil)
  if valid_21626042 != nil:
    section.add "X-Amz-Credential", valid_21626042
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626044: Call_AddThingToBillingGroup_21626033;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a thing to a billing group.
  ## 
  let valid = call_21626044.validator(path, query, header, formData, body, _)
  let scheme = call_21626044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626044.makeUrl(scheme.get, call_21626044.host, call_21626044.base,
                               call_21626044.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626044, uri, valid, _)

proc call*(call_21626045: Call_AddThingToBillingGroup_21626033; body: JsonNode): Recallable =
  ## addThingToBillingGroup
  ## Adds a thing to a billing group.
  ##   body: JObject (required)
  var body_21626046 = newJObject()
  if body != nil:
    body_21626046 = body
  result = call_21626045.call(nil, nil, nil, nil, body_21626046)

var addThingToBillingGroup* = Call_AddThingToBillingGroup_21626033(
    name: "addThingToBillingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/billing-groups/addThingToBillingGroup",
    validator: validate_AddThingToBillingGroup_21626034, base: "/",
    makeUrl: url_AddThingToBillingGroup_21626035,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AddThingToThingGroup_21626047 = ref object of OpenApiRestCall_21625435
proc url_AddThingToThingGroup_21626049(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_AddThingToThingGroup_21626048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds a thing to a thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626050 = header.getOrDefault("X-Amz-Date")
  valid_21626050 = validateParameter(valid_21626050, JString, required = false,
                                   default = nil)
  if valid_21626050 != nil:
    section.add "X-Amz-Date", valid_21626050
  var valid_21626051 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626051 = validateParameter(valid_21626051, JString, required = false,
                                   default = nil)
  if valid_21626051 != nil:
    section.add "X-Amz-Security-Token", valid_21626051
  var valid_21626052 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626052 = validateParameter(valid_21626052, JString, required = false,
                                   default = nil)
  if valid_21626052 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626052
  var valid_21626053 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626053 = validateParameter(valid_21626053, JString, required = false,
                                   default = nil)
  if valid_21626053 != nil:
    section.add "X-Amz-Algorithm", valid_21626053
  var valid_21626054 = header.getOrDefault("X-Amz-Signature")
  valid_21626054 = validateParameter(valid_21626054, JString, required = false,
                                   default = nil)
  if valid_21626054 != nil:
    section.add "X-Amz-Signature", valid_21626054
  var valid_21626055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626055 = validateParameter(valid_21626055, JString, required = false,
                                   default = nil)
  if valid_21626055 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626055
  var valid_21626056 = header.getOrDefault("X-Amz-Credential")
  valid_21626056 = validateParameter(valid_21626056, JString, required = false,
                                   default = nil)
  if valid_21626056 != nil:
    section.add "X-Amz-Credential", valid_21626056
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626058: Call_AddThingToThingGroup_21626047; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a thing to a thing group.
  ## 
  let valid = call_21626058.validator(path, query, header, formData, body, _)
  let scheme = call_21626058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626058.makeUrl(scheme.get, call_21626058.host, call_21626058.base,
                               call_21626058.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626058, uri, valid, _)

proc call*(call_21626059: Call_AddThingToThingGroup_21626047; body: JsonNode): Recallable =
  ## addThingToThingGroup
  ## Adds a thing to a thing group.
  ##   body: JObject (required)
  var body_21626060 = newJObject()
  if body != nil:
    body_21626060 = body
  result = call_21626059.call(nil, nil, nil, nil, body_21626060)

var addThingToThingGroup* = Call_AddThingToThingGroup_21626047(
    name: "addThingToThingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/thing-groups/addThingToThingGroup",
    validator: validate_AddThingToThingGroup_21626048, base: "/",
    makeUrl: url_AddThingToThingGroup_21626049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AssociateTargetsWithJob_21626061 = ref object of OpenApiRestCall_21625435
proc url_AssociateTargetsWithJob_21626063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId"),
               (kind: ConstantSegment, value: "/targets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AssociateTargetsWithJob_21626062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21626064 = path.getOrDefault("jobId")
  valid_21626064 = validateParameter(valid_21626064, JString, required = true,
                                   default = nil)
  if valid_21626064 != nil:
    section.add "jobId", valid_21626064
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626065 = header.getOrDefault("X-Amz-Date")
  valid_21626065 = validateParameter(valid_21626065, JString, required = false,
                                   default = nil)
  if valid_21626065 != nil:
    section.add "X-Amz-Date", valid_21626065
  var valid_21626066 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626066 = validateParameter(valid_21626066, JString, required = false,
                                   default = nil)
  if valid_21626066 != nil:
    section.add "X-Amz-Security-Token", valid_21626066
  var valid_21626067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626067 = validateParameter(valid_21626067, JString, required = false,
                                   default = nil)
  if valid_21626067 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626067
  var valid_21626068 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626068 = validateParameter(valid_21626068, JString, required = false,
                                   default = nil)
  if valid_21626068 != nil:
    section.add "X-Amz-Algorithm", valid_21626068
  var valid_21626069 = header.getOrDefault("X-Amz-Signature")
  valid_21626069 = validateParameter(valid_21626069, JString, required = false,
                                   default = nil)
  if valid_21626069 != nil:
    section.add "X-Amz-Signature", valid_21626069
  var valid_21626070 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626070 = validateParameter(valid_21626070, JString, required = false,
                                   default = nil)
  if valid_21626070 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626070
  var valid_21626071 = header.getOrDefault("X-Amz-Credential")
  valid_21626071 = validateParameter(valid_21626071, JString, required = false,
                                   default = nil)
  if valid_21626071 != nil:
    section.add "X-Amz-Credential", valid_21626071
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626073: Call_AssociateTargetsWithJob_21626061;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>
  ## 
  let valid = call_21626073.validator(path, query, header, formData, body, _)
  let scheme = call_21626073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626073.makeUrl(scheme.get, call_21626073.host, call_21626073.base,
                               call_21626073.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626073, uri, valid, _)

proc call*(call_21626074: Call_AssociateTargetsWithJob_21626061; jobId: string;
          body: JsonNode): Recallable =
  ## associateTargetsWithJob
  ## <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>
  ##   jobId: string (required)
  ##        : The unique identifier you assigned to this job when it was created.
  ##   body: JObject (required)
  var path_21626075 = newJObject()
  var body_21626076 = newJObject()
  add(path_21626075, "jobId", newJString(jobId))
  if body != nil:
    body_21626076 = body
  result = call_21626074.call(path_21626075, nil, nil, nil, body_21626076)

var associateTargetsWithJob* = Call_AssociateTargetsWithJob_21626061(
    name: "associateTargetsWithJob", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/jobs/{jobId}/targets",
    validator: validate_AssociateTargetsWithJob_21626062, base: "/",
    makeUrl: url_AssociateTargetsWithJob_21626063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachPolicy_21626077 = ref object of OpenApiRestCall_21625435
proc url_AttachPolicy_21626079(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/target-policies/"),
               (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachPolicy_21626078(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Attaches a policy to the specified target.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The name of the policy to attach.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626080 = path.getOrDefault("policyName")
  valid_21626080 = validateParameter(valid_21626080, JString, required = true,
                                   default = nil)
  if valid_21626080 != nil:
    section.add "policyName", valid_21626080
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626081 = header.getOrDefault("X-Amz-Date")
  valid_21626081 = validateParameter(valid_21626081, JString, required = false,
                                   default = nil)
  if valid_21626081 != nil:
    section.add "X-Amz-Date", valid_21626081
  var valid_21626082 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626082 = validateParameter(valid_21626082, JString, required = false,
                                   default = nil)
  if valid_21626082 != nil:
    section.add "X-Amz-Security-Token", valid_21626082
  var valid_21626083 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626083 = validateParameter(valid_21626083, JString, required = false,
                                   default = nil)
  if valid_21626083 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626083
  var valid_21626084 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626084 = validateParameter(valid_21626084, JString, required = false,
                                   default = nil)
  if valid_21626084 != nil:
    section.add "X-Amz-Algorithm", valid_21626084
  var valid_21626085 = header.getOrDefault("X-Amz-Signature")
  valid_21626085 = validateParameter(valid_21626085, JString, required = false,
                                   default = nil)
  if valid_21626085 != nil:
    section.add "X-Amz-Signature", valid_21626085
  var valid_21626086 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626086 = validateParameter(valid_21626086, JString, required = false,
                                   default = nil)
  if valid_21626086 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626086
  var valid_21626087 = header.getOrDefault("X-Amz-Credential")
  valid_21626087 = validateParameter(valid_21626087, JString, required = false,
                                   default = nil)
  if valid_21626087 != nil:
    section.add "X-Amz-Credential", valid_21626087
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626089: Call_AttachPolicy_21626077; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Attaches a policy to the specified target.
  ## 
  let valid = call_21626089.validator(path, query, header, formData, body, _)
  let scheme = call_21626089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626089.makeUrl(scheme.get, call_21626089.host, call_21626089.base,
                               call_21626089.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626089, uri, valid, _)

proc call*(call_21626090: Call_AttachPolicy_21626077; policyName: string;
          body: JsonNode): Recallable =
  ## attachPolicy
  ## Attaches a policy to the specified target.
  ##   policyName: string (required)
  ##             : The name of the policy to attach.
  ##   body: JObject (required)
  var path_21626091 = newJObject()
  var body_21626092 = newJObject()
  add(path_21626091, "policyName", newJString(policyName))
  if body != nil:
    body_21626092 = body
  result = call_21626090.call(path_21626091, nil, nil, nil, body_21626092)

var attachPolicy* = Call_AttachPolicy_21626077(name: "attachPolicy",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/target-policies/{policyName}", validator: validate_AttachPolicy_21626078,
    base: "/", makeUrl: url_AttachPolicy_21626079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachPolicy_21626093 = ref object of OpenApiRestCall_21625435
proc url_DetachPolicy_21626095(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/target-policies/"),
               (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachPolicy_21626094(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Detaches a policy from the specified target.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The policy to detach.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626096 = path.getOrDefault("policyName")
  valid_21626096 = validateParameter(valid_21626096, JString, required = true,
                                   default = nil)
  if valid_21626096 != nil:
    section.add "policyName", valid_21626096
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626097 = header.getOrDefault("X-Amz-Date")
  valid_21626097 = validateParameter(valid_21626097, JString, required = false,
                                   default = nil)
  if valid_21626097 != nil:
    section.add "X-Amz-Date", valid_21626097
  var valid_21626098 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626098 = validateParameter(valid_21626098, JString, required = false,
                                   default = nil)
  if valid_21626098 != nil:
    section.add "X-Amz-Security-Token", valid_21626098
  var valid_21626099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626099 = validateParameter(valid_21626099, JString, required = false,
                                   default = nil)
  if valid_21626099 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626099
  var valid_21626100 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626100 = validateParameter(valid_21626100, JString, required = false,
                                   default = nil)
  if valid_21626100 != nil:
    section.add "X-Amz-Algorithm", valid_21626100
  var valid_21626101 = header.getOrDefault("X-Amz-Signature")
  valid_21626101 = validateParameter(valid_21626101, JString, required = false,
                                   default = nil)
  if valid_21626101 != nil:
    section.add "X-Amz-Signature", valid_21626101
  var valid_21626102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626102 = validateParameter(valid_21626102, JString, required = false,
                                   default = nil)
  if valid_21626102 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626102
  var valid_21626103 = header.getOrDefault("X-Amz-Credential")
  valid_21626103 = validateParameter(valid_21626103, JString, required = false,
                                   default = nil)
  if valid_21626103 != nil:
    section.add "X-Amz-Credential", valid_21626103
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626105: Call_DetachPolicy_21626093; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Detaches a policy from the specified target.
  ## 
  let valid = call_21626105.validator(path, query, header, formData, body, _)
  let scheme = call_21626105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626105.makeUrl(scheme.get, call_21626105.host, call_21626105.base,
                               call_21626105.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626105, uri, valid, _)

proc call*(call_21626106: Call_DetachPolicy_21626093; policyName: string;
          body: JsonNode): Recallable =
  ## detachPolicy
  ## Detaches a policy from the specified target.
  ##   policyName: string (required)
  ##             : The policy to detach.
  ##   body: JObject (required)
  var path_21626107 = newJObject()
  var body_21626108 = newJObject()
  add(path_21626107, "policyName", newJString(policyName))
  if body != nil:
    body_21626108 = body
  result = call_21626106.call(path_21626107, nil, nil, nil, body_21626108)

var detachPolicy* = Call_DetachPolicy_21626093(name: "detachPolicy",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/target-policies/{policyName}", validator: validate_DetachPolicy_21626094,
    base: "/", makeUrl: url_DetachPolicy_21626095,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachPrincipalPolicy_21626109 = ref object of OpenApiRestCall_21625435
proc url_AttachPrincipalPolicy_21626111(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/principal-policies/"),
               (kind: VariableSegment, value: "policyName"),
               (kind: ConstantSegment, value: "#x-amzn-iot-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachPrincipalPolicy_21626110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The policy name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626112 = path.getOrDefault("policyName")
  valid_21626112 = validateParameter(valid_21626112, JString, required = true,
                                   default = nil)
  if valid_21626112 != nil:
    section.add "policyName", valid_21626112
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amzn-iot-principal: JString (required)
  ##                       : The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626113 = header.getOrDefault("X-Amz-Date")
  valid_21626113 = validateParameter(valid_21626113, JString, required = false,
                                   default = nil)
  if valid_21626113 != nil:
    section.add "X-Amz-Date", valid_21626113
  var valid_21626114 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626114 = validateParameter(valid_21626114, JString, required = false,
                                   default = nil)
  if valid_21626114 != nil:
    section.add "X-Amz-Security-Token", valid_21626114
  var valid_21626115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626115 = validateParameter(valid_21626115, JString, required = false,
                                   default = nil)
  if valid_21626115 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626115
  var valid_21626116 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626116 = validateParameter(valid_21626116, JString, required = false,
                                   default = nil)
  if valid_21626116 != nil:
    section.add "X-Amz-Algorithm", valid_21626116
  var valid_21626117 = header.getOrDefault("X-Amz-Signature")
  valid_21626117 = validateParameter(valid_21626117, JString, required = false,
                                   default = nil)
  if valid_21626117 != nil:
    section.add "X-Amz-Signature", valid_21626117
  var valid_21626118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626118 = validateParameter(valid_21626118, JString, required = false,
                                   default = nil)
  if valid_21626118 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626118
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-principal` field"
  var valid_21626119 = header.getOrDefault("x-amzn-iot-principal")
  valid_21626119 = validateParameter(valid_21626119, JString, required = true,
                                   default = nil)
  if valid_21626119 != nil:
    section.add "x-amzn-iot-principal", valid_21626119
  var valid_21626120 = header.getOrDefault("X-Amz-Credential")
  valid_21626120 = validateParameter(valid_21626120, JString, required = false,
                                   default = nil)
  if valid_21626120 != nil:
    section.add "X-Amz-Credential", valid_21626120
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626121: Call_AttachPrincipalPolicy_21626109;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
  ## 
  let valid = call_21626121.validator(path, query, header, formData, body, _)
  let scheme = call_21626121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626121.makeUrl(scheme.get, call_21626121.host, call_21626121.base,
                               call_21626121.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626121, uri, valid, _)

proc call*(call_21626122: Call_AttachPrincipalPolicy_21626109; policyName: string): Recallable =
  ## attachPrincipalPolicy
  ## <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
  ##   policyName: string (required)
  ##             : The policy name.
  var path_21626123 = newJObject()
  add(path_21626123, "policyName", newJString(policyName))
  result = call_21626122.call(path_21626123, nil, nil, nil, nil)

var attachPrincipalPolicy* = Call_AttachPrincipalPolicy_21626109(
    name: "attachPrincipalPolicy", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/principal-policies/{policyName}#x-amzn-iot-principal",
    validator: validate_AttachPrincipalPolicy_21626110, base: "/",
    makeUrl: url_AttachPrincipalPolicy_21626111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachPrincipalPolicy_21626124 = ref object of OpenApiRestCall_21625435
proc url_DetachPrincipalPolicy_21626126(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/principal-policies/"),
               (kind: VariableSegment, value: "policyName"),
               (kind: ConstantSegment, value: "#x-amzn-iot-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachPrincipalPolicy_21626125(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The name of the policy to detach.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626127 = path.getOrDefault("policyName")
  valid_21626127 = validateParameter(valid_21626127, JString, required = true,
                                   default = nil)
  if valid_21626127 != nil:
    section.add "policyName", valid_21626127
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amzn-iot-principal: JString (required)
  ##                       : <p>The principal.</p> <p>If the principal is a certificate, specify the certificate ARN. If the principal is an Amazon Cognito identity, specify the identity ID.</p>
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626128 = header.getOrDefault("X-Amz-Date")
  valid_21626128 = validateParameter(valid_21626128, JString, required = false,
                                   default = nil)
  if valid_21626128 != nil:
    section.add "X-Amz-Date", valid_21626128
  var valid_21626129 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626129 = validateParameter(valid_21626129, JString, required = false,
                                   default = nil)
  if valid_21626129 != nil:
    section.add "X-Amz-Security-Token", valid_21626129
  var valid_21626130 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626130 = validateParameter(valid_21626130, JString, required = false,
                                   default = nil)
  if valid_21626130 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626130
  var valid_21626131 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626131 = validateParameter(valid_21626131, JString, required = false,
                                   default = nil)
  if valid_21626131 != nil:
    section.add "X-Amz-Algorithm", valid_21626131
  var valid_21626132 = header.getOrDefault("X-Amz-Signature")
  valid_21626132 = validateParameter(valid_21626132, JString, required = false,
                                   default = nil)
  if valid_21626132 != nil:
    section.add "X-Amz-Signature", valid_21626132
  var valid_21626133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626133 = validateParameter(valid_21626133, JString, required = false,
                                   default = nil)
  if valid_21626133 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626133
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-principal` field"
  var valid_21626134 = header.getOrDefault("x-amzn-iot-principal")
  valid_21626134 = validateParameter(valid_21626134, JString, required = true,
                                   default = nil)
  if valid_21626134 != nil:
    section.add "x-amzn-iot-principal", valid_21626134
  var valid_21626135 = header.getOrDefault("X-Amz-Credential")
  valid_21626135 = validateParameter(valid_21626135, JString, required = false,
                                   default = nil)
  if valid_21626135 != nil:
    section.add "X-Amz-Credential", valid_21626135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626136: Call_DetachPrincipalPolicy_21626124;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
  ## 
  let valid = call_21626136.validator(path, query, header, formData, body, _)
  let scheme = call_21626136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626136.makeUrl(scheme.get, call_21626136.host, call_21626136.base,
                               call_21626136.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626136, uri, valid, _)

proc call*(call_21626137: Call_DetachPrincipalPolicy_21626124; policyName: string): Recallable =
  ## detachPrincipalPolicy
  ## <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
  ##   policyName: string (required)
  ##             : The name of the policy to detach.
  var path_21626138 = newJObject()
  add(path_21626138, "policyName", newJString(policyName))
  result = call_21626137.call(path_21626138, nil, nil, nil, nil)

var detachPrincipalPolicy* = Call_DetachPrincipalPolicy_21626124(
    name: "detachPrincipalPolicy", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/principal-policies/{policyName}#x-amzn-iot-principal",
    validator: validate_DetachPrincipalPolicy_21626125, base: "/",
    makeUrl: url_DetachPrincipalPolicy_21626126,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachSecurityProfile_21626139 = ref object of OpenApiRestCall_21625435
proc url_AttachSecurityProfile_21626141(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
        "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
               (kind: VariableSegment, value: "securityProfileName"), (
        kind: ConstantSegment, value: "/targets#securityProfileTargetArn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachSecurityProfile_21626140(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
  ##                      : The security profile that is attached.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_21626142 = path.getOrDefault("securityProfileName")
  valid_21626142 = validateParameter(valid_21626142, JString, required = true,
                                   default = nil)
  if valid_21626142 != nil:
    section.add "securityProfileName", valid_21626142
  result.add "path", section
  ## parameters in `query` object:
  ##   securityProfileTargetArn: JString (required)
  ##                           : The ARN of the target (thing group) to which the security profile is attached.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `securityProfileTargetArn` field"
  var valid_21626143 = query.getOrDefault("securityProfileTargetArn")
  valid_21626143 = validateParameter(valid_21626143, JString, required = true,
                                   default = nil)
  if valid_21626143 != nil:
    section.add "securityProfileTargetArn", valid_21626143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626144 = header.getOrDefault("X-Amz-Date")
  valid_21626144 = validateParameter(valid_21626144, JString, required = false,
                                   default = nil)
  if valid_21626144 != nil:
    section.add "X-Amz-Date", valid_21626144
  var valid_21626145 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626145 = validateParameter(valid_21626145, JString, required = false,
                                   default = nil)
  if valid_21626145 != nil:
    section.add "X-Amz-Security-Token", valid_21626145
  var valid_21626146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626146 = validateParameter(valid_21626146, JString, required = false,
                                   default = nil)
  if valid_21626146 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626146
  var valid_21626147 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626147 = validateParameter(valid_21626147, JString, required = false,
                                   default = nil)
  if valid_21626147 != nil:
    section.add "X-Amz-Algorithm", valid_21626147
  var valid_21626148 = header.getOrDefault("X-Amz-Signature")
  valid_21626148 = validateParameter(valid_21626148, JString, required = false,
                                   default = nil)
  if valid_21626148 != nil:
    section.add "X-Amz-Signature", valid_21626148
  var valid_21626149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626149 = validateParameter(valid_21626149, JString, required = false,
                                   default = nil)
  if valid_21626149 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626149
  var valid_21626150 = header.getOrDefault("X-Amz-Credential")
  valid_21626150 = validateParameter(valid_21626150, JString, required = false,
                                   default = nil)
  if valid_21626150 != nil:
    section.add "X-Amz-Credential", valid_21626150
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626151: Call_AttachSecurityProfile_21626139;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.
  ## 
  let valid = call_21626151.validator(path, query, header, formData, body, _)
  let scheme = call_21626151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626151.makeUrl(scheme.get, call_21626151.host, call_21626151.base,
                               call_21626151.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626151, uri, valid, _)

proc call*(call_21626152: Call_AttachSecurityProfile_21626139;
          securityProfileTargetArn: string; securityProfileName: string): Recallable =
  ## attachSecurityProfile
  ## Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.
  ##   securityProfileTargetArn: string (required)
  ##                           : The ARN of the target (thing group) to which the security profile is attached.
  ##   securityProfileName: string (required)
  ##                      : The security profile that is attached.
  var path_21626153 = newJObject()
  var query_21626154 = newJObject()
  add(query_21626154, "securityProfileTargetArn",
      newJString(securityProfileTargetArn))
  add(path_21626153, "securityProfileName", newJString(securityProfileName))
  result = call_21626152.call(path_21626153, query_21626154, nil, nil, nil)

var attachSecurityProfile* = Call_AttachSecurityProfile_21626139(
    name: "attachSecurityProfile", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}/targets#securityProfileTargetArn",
    validator: validate_AttachSecurityProfile_21626140, base: "/",
    makeUrl: url_AttachSecurityProfile_21626141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachSecurityProfile_21626155 = ref object of OpenApiRestCall_21625435
proc url_DetachSecurityProfile_21626157(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
        "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
               (kind: VariableSegment, value: "securityProfileName"), (
        kind: ConstantSegment, value: "/targets#securityProfileTargetArn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachSecurityProfile_21626156(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Disassociates a Device Defender security profile from a thing group or from this account.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
  ##                      : The security profile that is detached.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_21626158 = path.getOrDefault("securityProfileName")
  valid_21626158 = validateParameter(valid_21626158, JString, required = true,
                                   default = nil)
  if valid_21626158 != nil:
    section.add "securityProfileName", valid_21626158
  result.add "path", section
  ## parameters in `query` object:
  ##   securityProfileTargetArn: JString (required)
  ##                           : The ARN of the thing group from which the security profile is detached.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `securityProfileTargetArn` field"
  var valid_21626159 = query.getOrDefault("securityProfileTargetArn")
  valid_21626159 = validateParameter(valid_21626159, JString, required = true,
                                   default = nil)
  if valid_21626159 != nil:
    section.add "securityProfileTargetArn", valid_21626159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626160 = header.getOrDefault("X-Amz-Date")
  valid_21626160 = validateParameter(valid_21626160, JString, required = false,
                                   default = nil)
  if valid_21626160 != nil:
    section.add "X-Amz-Date", valid_21626160
  var valid_21626161 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626161 = validateParameter(valid_21626161, JString, required = false,
                                   default = nil)
  if valid_21626161 != nil:
    section.add "X-Amz-Security-Token", valid_21626161
  var valid_21626162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626162 = validateParameter(valid_21626162, JString, required = false,
                                   default = nil)
  if valid_21626162 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626162
  var valid_21626163 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626163 = validateParameter(valid_21626163, JString, required = false,
                                   default = nil)
  if valid_21626163 != nil:
    section.add "X-Amz-Algorithm", valid_21626163
  var valid_21626164 = header.getOrDefault("X-Amz-Signature")
  valid_21626164 = validateParameter(valid_21626164, JString, required = false,
                                   default = nil)
  if valid_21626164 != nil:
    section.add "X-Amz-Signature", valid_21626164
  var valid_21626165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626165 = validateParameter(valid_21626165, JString, required = false,
                                   default = nil)
  if valid_21626165 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626165
  var valid_21626166 = header.getOrDefault("X-Amz-Credential")
  valid_21626166 = validateParameter(valid_21626166, JString, required = false,
                                   default = nil)
  if valid_21626166 != nil:
    section.add "X-Amz-Credential", valid_21626166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626167: Call_DetachSecurityProfile_21626155;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates a Device Defender security profile from a thing group or from this account.
  ## 
  let valid = call_21626167.validator(path, query, header, formData, body, _)
  let scheme = call_21626167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626167.makeUrl(scheme.get, call_21626167.host, call_21626167.base,
                               call_21626167.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626167, uri, valid, _)

proc call*(call_21626168: Call_DetachSecurityProfile_21626155;
          securityProfileTargetArn: string; securityProfileName: string): Recallable =
  ## detachSecurityProfile
  ## Disassociates a Device Defender security profile from a thing group or from this account.
  ##   securityProfileTargetArn: string (required)
  ##                           : The ARN of the thing group from which the security profile is detached.
  ##   securityProfileName: string (required)
  ##                      : The security profile that is detached.
  var path_21626169 = newJObject()
  var query_21626170 = newJObject()
  add(query_21626170, "securityProfileTargetArn",
      newJString(securityProfileTargetArn))
  add(path_21626169, "securityProfileName", newJString(securityProfileName))
  result = call_21626168.call(path_21626169, query_21626170, nil, nil, nil)

var detachSecurityProfile* = Call_DetachSecurityProfile_21626155(
    name: "detachSecurityProfile", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}/targets#securityProfileTargetArn",
    validator: validate_DetachSecurityProfile_21626156, base: "/",
    makeUrl: url_DetachSecurityProfile_21626157,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachThingPrincipal_21626171 = ref object of OpenApiRestCall_21625435
proc url_AttachThingPrincipal_21626173(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/principals#x-amzn-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachThingPrincipal_21626172(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21626174 = path.getOrDefault("thingName")
  valid_21626174 = validateParameter(valid_21626174, JString, required = true,
                                   default = nil)
  if valid_21626174 != nil:
    section.add "thingName", valid_21626174
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   x-amzn-principal: JString (required)
  ##                   : The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626175 = header.getOrDefault("X-Amz-Date")
  valid_21626175 = validateParameter(valid_21626175, JString, required = false,
                                   default = nil)
  if valid_21626175 != nil:
    section.add "X-Amz-Date", valid_21626175
  var valid_21626176 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626176 = validateParameter(valid_21626176, JString, required = false,
                                   default = nil)
  if valid_21626176 != nil:
    section.add "X-Amz-Security-Token", valid_21626176
  var valid_21626177 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626177 = validateParameter(valid_21626177, JString, required = false,
                                   default = nil)
  if valid_21626177 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626177
  var valid_21626178 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626178 = validateParameter(valid_21626178, JString, required = false,
                                   default = nil)
  if valid_21626178 != nil:
    section.add "X-Amz-Algorithm", valid_21626178
  assert header != nil,
        "header argument is necessary due to required `x-amzn-principal` field"
  var valid_21626179 = header.getOrDefault("x-amzn-principal")
  valid_21626179 = validateParameter(valid_21626179, JString, required = true,
                                   default = nil)
  if valid_21626179 != nil:
    section.add "x-amzn-principal", valid_21626179
  var valid_21626180 = header.getOrDefault("X-Amz-Signature")
  valid_21626180 = validateParameter(valid_21626180, JString, required = false,
                                   default = nil)
  if valid_21626180 != nil:
    section.add "X-Amz-Signature", valid_21626180
  var valid_21626181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626181 = validateParameter(valid_21626181, JString, required = false,
                                   default = nil)
  if valid_21626181 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626181
  var valid_21626182 = header.getOrDefault("X-Amz-Credential")
  valid_21626182 = validateParameter(valid_21626182, JString, required = false,
                                   default = nil)
  if valid_21626182 != nil:
    section.add "X-Amz-Credential", valid_21626182
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626183: Call_AttachThingPrincipal_21626171; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ## 
  let valid = call_21626183.validator(path, query, header, formData, body, _)
  let scheme = call_21626183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626183.makeUrl(scheme.get, call_21626183.host, call_21626183.base,
                               call_21626183.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626183, uri, valid, _)

proc call*(call_21626184: Call_AttachThingPrincipal_21626171; thingName: string): Recallable =
  ## attachThingPrincipal
  ## Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ##   thingName: string (required)
  ##            : The name of the thing.
  var path_21626185 = newJObject()
  add(path_21626185, "thingName", newJString(thingName))
  result = call_21626184.call(path_21626185, nil, nil, nil, nil)

var attachThingPrincipal* = Call_AttachThingPrincipal_21626171(
    name: "attachThingPrincipal", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/things/{thingName}/principals#x-amzn-principal",
    validator: validate_AttachThingPrincipal_21626172, base: "/",
    makeUrl: url_AttachThingPrincipal_21626173,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachThingPrincipal_21626186 = ref object of OpenApiRestCall_21625435
proc url_DetachThingPrincipal_21626188(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/principals#x-amzn-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachThingPrincipal_21626187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21626189 = path.getOrDefault("thingName")
  valid_21626189 = validateParameter(valid_21626189, JString, required = true,
                                   default = nil)
  if valid_21626189 != nil:
    section.add "thingName", valid_21626189
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   x-amzn-principal: JString (required)
  ##                   : If the principal is a certificate, this value must be ARN of the certificate. If the principal is an Amazon Cognito identity, this value must be the ID of the Amazon Cognito identity.
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626190 = header.getOrDefault("X-Amz-Date")
  valid_21626190 = validateParameter(valid_21626190, JString, required = false,
                                   default = nil)
  if valid_21626190 != nil:
    section.add "X-Amz-Date", valid_21626190
  var valid_21626191 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626191 = validateParameter(valid_21626191, JString, required = false,
                                   default = nil)
  if valid_21626191 != nil:
    section.add "X-Amz-Security-Token", valid_21626191
  var valid_21626192 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626192 = validateParameter(valid_21626192, JString, required = false,
                                   default = nil)
  if valid_21626192 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626192
  var valid_21626193 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626193 = validateParameter(valid_21626193, JString, required = false,
                                   default = nil)
  if valid_21626193 != nil:
    section.add "X-Amz-Algorithm", valid_21626193
  assert header != nil,
        "header argument is necessary due to required `x-amzn-principal` field"
  var valid_21626194 = header.getOrDefault("x-amzn-principal")
  valid_21626194 = validateParameter(valid_21626194, JString, required = true,
                                   default = nil)
  if valid_21626194 != nil:
    section.add "x-amzn-principal", valid_21626194
  var valid_21626195 = header.getOrDefault("X-Amz-Signature")
  valid_21626195 = validateParameter(valid_21626195, JString, required = false,
                                   default = nil)
  if valid_21626195 != nil:
    section.add "X-Amz-Signature", valid_21626195
  var valid_21626196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626196 = validateParameter(valid_21626196, JString, required = false,
                                   default = nil)
  if valid_21626196 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626196
  var valid_21626197 = header.getOrDefault("X-Amz-Credential")
  valid_21626197 = validateParameter(valid_21626197, JString, required = false,
                                   default = nil)
  if valid_21626197 != nil:
    section.add "X-Amz-Credential", valid_21626197
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626198: Call_DetachThingPrincipal_21626186; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
  ## 
  let valid = call_21626198.validator(path, query, header, formData, body, _)
  let scheme = call_21626198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626198.makeUrl(scheme.get, call_21626198.host, call_21626198.base,
                               call_21626198.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626198, uri, valid, _)

proc call*(call_21626199: Call_DetachThingPrincipal_21626186; thingName: string): Recallable =
  ## detachThingPrincipal
  ## <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
  ##   thingName: string (required)
  ##            : The name of the thing.
  var path_21626200 = newJObject()
  add(path_21626200, "thingName", newJString(thingName))
  result = call_21626199.call(path_21626200, nil, nil, nil, nil)

var detachThingPrincipal* = Call_DetachThingPrincipal_21626186(
    name: "detachThingPrincipal", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/things/{thingName}/principals#x-amzn-principal",
    validator: validate_DetachThingPrincipal_21626187, base: "/",
    makeUrl: url_DetachThingPrincipal_21626188,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelAuditMitigationActionsTask_21626201 = ref object of OpenApiRestCall_21625435
proc url_CancelAuditMitigationActionsTask_21626203(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/mitigationactions/tasks/"),
               (kind: VariableSegment, value: "taskId"),
               (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelAuditMitigationActionsTask_21626202(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : The unique identifier for the task that you want to cancel. 
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21626204 = path.getOrDefault("taskId")
  valid_21626204 = validateParameter(valid_21626204, JString, required = true,
                                   default = nil)
  if valid_21626204 != nil:
    section.add "taskId", valid_21626204
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626205 = header.getOrDefault("X-Amz-Date")
  valid_21626205 = validateParameter(valid_21626205, JString, required = false,
                                   default = nil)
  if valid_21626205 != nil:
    section.add "X-Amz-Date", valid_21626205
  var valid_21626206 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626206 = validateParameter(valid_21626206, JString, required = false,
                                   default = nil)
  if valid_21626206 != nil:
    section.add "X-Amz-Security-Token", valid_21626206
  var valid_21626207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626207 = validateParameter(valid_21626207, JString, required = false,
                                   default = nil)
  if valid_21626207 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626207
  var valid_21626208 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626208 = validateParameter(valid_21626208, JString, required = false,
                                   default = nil)
  if valid_21626208 != nil:
    section.add "X-Amz-Algorithm", valid_21626208
  var valid_21626209 = header.getOrDefault("X-Amz-Signature")
  valid_21626209 = validateParameter(valid_21626209, JString, required = false,
                                   default = nil)
  if valid_21626209 != nil:
    section.add "X-Amz-Signature", valid_21626209
  var valid_21626210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626210 = validateParameter(valid_21626210, JString, required = false,
                                   default = nil)
  if valid_21626210 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626210
  var valid_21626211 = header.getOrDefault("X-Amz-Credential")
  valid_21626211 = validateParameter(valid_21626211, JString, required = false,
                                   default = nil)
  if valid_21626211 != nil:
    section.add "X-Amz-Credential", valid_21626211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626212: Call_CancelAuditMitigationActionsTask_21626201;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.
  ## 
  let valid = call_21626212.validator(path, query, header, formData, body, _)
  let scheme = call_21626212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626212.makeUrl(scheme.get, call_21626212.host, call_21626212.base,
                               call_21626212.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626212, uri, valid, _)

proc call*(call_21626213: Call_CancelAuditMitigationActionsTask_21626201;
          taskId: string): Recallable =
  ## cancelAuditMitigationActionsTask
  ## Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.
  ##   taskId: string (required)
  ##         : The unique identifier for the task that you want to cancel. 
  var path_21626214 = newJObject()
  add(path_21626214, "taskId", newJString(taskId))
  result = call_21626213.call(path_21626214, nil, nil, nil, nil)

var cancelAuditMitigationActionsTask* = Call_CancelAuditMitigationActionsTask_21626201(
    name: "cancelAuditMitigationActionsTask", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/audit/mitigationactions/tasks/{taskId}/cancel",
    validator: validate_CancelAuditMitigationActionsTask_21626202, base: "/",
    makeUrl: url_CancelAuditMitigationActionsTask_21626203,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelAuditTask_21626215 = ref object of OpenApiRestCall_21625435
proc url_CancelAuditTask_21626217(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/tasks/"),
               (kind: VariableSegment, value: "taskId"),
               (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelAuditTask_21626216(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an "InvalidRequestException" occurs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : The ID of the audit you want to cancel. You can only cancel an audit that is "IN_PROGRESS".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21626218 = path.getOrDefault("taskId")
  valid_21626218 = validateParameter(valid_21626218, JString, required = true,
                                   default = nil)
  if valid_21626218 != nil:
    section.add "taskId", valid_21626218
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626219 = header.getOrDefault("X-Amz-Date")
  valid_21626219 = validateParameter(valid_21626219, JString, required = false,
                                   default = nil)
  if valid_21626219 != nil:
    section.add "X-Amz-Date", valid_21626219
  var valid_21626220 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626220 = validateParameter(valid_21626220, JString, required = false,
                                   default = nil)
  if valid_21626220 != nil:
    section.add "X-Amz-Security-Token", valid_21626220
  var valid_21626221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626221 = validateParameter(valid_21626221, JString, required = false,
                                   default = nil)
  if valid_21626221 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626221
  var valid_21626222 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626222 = validateParameter(valid_21626222, JString, required = false,
                                   default = nil)
  if valid_21626222 != nil:
    section.add "X-Amz-Algorithm", valid_21626222
  var valid_21626223 = header.getOrDefault("X-Amz-Signature")
  valid_21626223 = validateParameter(valid_21626223, JString, required = false,
                                   default = nil)
  if valid_21626223 != nil:
    section.add "X-Amz-Signature", valid_21626223
  var valid_21626224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626224 = validateParameter(valid_21626224, JString, required = false,
                                   default = nil)
  if valid_21626224 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626224
  var valid_21626225 = header.getOrDefault("X-Amz-Credential")
  valid_21626225 = validateParameter(valid_21626225, JString, required = false,
                                   default = nil)
  if valid_21626225 != nil:
    section.add "X-Amz-Credential", valid_21626225
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626226: Call_CancelAuditTask_21626215; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an "InvalidRequestException" occurs.
  ## 
  let valid = call_21626226.validator(path, query, header, formData, body, _)
  let scheme = call_21626226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626226.makeUrl(scheme.get, call_21626226.host, call_21626226.base,
                               call_21626226.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626226, uri, valid, _)

proc call*(call_21626227: Call_CancelAuditTask_21626215; taskId: string): Recallable =
  ## cancelAuditTask
  ## Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an "InvalidRequestException" occurs.
  ##   taskId: string (required)
  ##         : The ID of the audit you want to cancel. You can only cancel an audit that is "IN_PROGRESS".
  var path_21626228 = newJObject()
  add(path_21626228, "taskId", newJString(taskId))
  result = call_21626227.call(path_21626228, nil, nil, nil, nil)

var cancelAuditTask* = Call_CancelAuditTask_21626215(name: "cancelAuditTask",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/audit/tasks/{taskId}/cancel", validator: validate_CancelAuditTask_21626216,
    base: "/", makeUrl: url_CancelAuditTask_21626217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelCertificateTransfer_21626229 = ref object of OpenApiRestCall_21625435
proc url_CancelCertificateTransfer_21626231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cancel-certificate-transfer/"),
               (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelCertificateTransfer_21626230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `certificateId` field"
  var valid_21626232 = path.getOrDefault("certificateId")
  valid_21626232 = validateParameter(valid_21626232, JString, required = true,
                                   default = nil)
  if valid_21626232 != nil:
    section.add "certificateId", valid_21626232
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626233 = header.getOrDefault("X-Amz-Date")
  valid_21626233 = validateParameter(valid_21626233, JString, required = false,
                                   default = nil)
  if valid_21626233 != nil:
    section.add "X-Amz-Date", valid_21626233
  var valid_21626234 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626234 = validateParameter(valid_21626234, JString, required = false,
                                   default = nil)
  if valid_21626234 != nil:
    section.add "X-Amz-Security-Token", valid_21626234
  var valid_21626235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626235 = validateParameter(valid_21626235, JString, required = false,
                                   default = nil)
  if valid_21626235 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626235
  var valid_21626236 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626236 = validateParameter(valid_21626236, JString, required = false,
                                   default = nil)
  if valid_21626236 != nil:
    section.add "X-Amz-Algorithm", valid_21626236
  var valid_21626237 = header.getOrDefault("X-Amz-Signature")
  valid_21626237 = validateParameter(valid_21626237, JString, required = false,
                                   default = nil)
  if valid_21626237 != nil:
    section.add "X-Amz-Signature", valid_21626237
  var valid_21626238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626238 = validateParameter(valid_21626238, JString, required = false,
                                   default = nil)
  if valid_21626238 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626238
  var valid_21626239 = header.getOrDefault("X-Amz-Credential")
  valid_21626239 = validateParameter(valid_21626239, JString, required = false,
                                   default = nil)
  if valid_21626239 != nil:
    section.add "X-Amz-Credential", valid_21626239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626240: Call_CancelCertificateTransfer_21626229;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>
  ## 
  let valid = call_21626240.validator(path, query, header, formData, body, _)
  let scheme = call_21626240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626240.makeUrl(scheme.get, call_21626240.host, call_21626240.base,
                               call_21626240.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626240, uri, valid, _)

proc call*(call_21626241: Call_CancelCertificateTransfer_21626229;
          certificateId: string): Recallable =
  ## cancelCertificateTransfer
  ## <p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>
  ##   certificateId: string (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  var path_21626242 = newJObject()
  add(path_21626242, "certificateId", newJString(certificateId))
  result = call_21626241.call(path_21626242, nil, nil, nil, nil)

var cancelCertificateTransfer* = Call_CancelCertificateTransfer_21626229(
    name: "cancelCertificateTransfer", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/cancel-certificate-transfer/{certificateId}",
    validator: validate_CancelCertificateTransfer_21626230, base: "/",
    makeUrl: url_CancelCertificateTransfer_21626231,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelJob_21626243 = ref object of OpenApiRestCall_21625435
proc url_CancelJob_21626245(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId"),
               (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelJob_21626244(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels a job.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21626246 = path.getOrDefault("jobId")
  valid_21626246 = validateParameter(valid_21626246, JString, required = true,
                                   default = nil)
  if valid_21626246 != nil:
    section.add "jobId", valid_21626246
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
  ##        : <p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is <code>false</code>.</p> <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.</p>
  section = newJObject()
  var valid_21626247 = query.getOrDefault("force")
  valid_21626247 = validateParameter(valid_21626247, JBool, required = false,
                                   default = nil)
  if valid_21626247 != nil:
    section.add "force", valid_21626247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626248 = header.getOrDefault("X-Amz-Date")
  valid_21626248 = validateParameter(valid_21626248, JString, required = false,
                                   default = nil)
  if valid_21626248 != nil:
    section.add "X-Amz-Date", valid_21626248
  var valid_21626249 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626249 = validateParameter(valid_21626249, JString, required = false,
                                   default = nil)
  if valid_21626249 != nil:
    section.add "X-Amz-Security-Token", valid_21626249
  var valid_21626250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626250 = validateParameter(valid_21626250, JString, required = false,
                                   default = nil)
  if valid_21626250 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626250
  var valid_21626251 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626251 = validateParameter(valid_21626251, JString, required = false,
                                   default = nil)
  if valid_21626251 != nil:
    section.add "X-Amz-Algorithm", valid_21626251
  var valid_21626252 = header.getOrDefault("X-Amz-Signature")
  valid_21626252 = validateParameter(valid_21626252, JString, required = false,
                                   default = nil)
  if valid_21626252 != nil:
    section.add "X-Amz-Signature", valid_21626252
  var valid_21626253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626253 = validateParameter(valid_21626253, JString, required = false,
                                   default = nil)
  if valid_21626253 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626253
  var valid_21626254 = header.getOrDefault("X-Amz-Credential")
  valid_21626254 = validateParameter(valid_21626254, JString, required = false,
                                   default = nil)
  if valid_21626254 != nil:
    section.add "X-Amz-Credential", valid_21626254
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626256: Call_CancelJob_21626243; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a job.
  ## 
  let valid = call_21626256.validator(path, query, header, formData, body, _)
  let scheme = call_21626256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626256.makeUrl(scheme.get, call_21626256.host, call_21626256.base,
                               call_21626256.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626256, uri, valid, _)

proc call*(call_21626257: Call_CancelJob_21626243; jobId: string; body: JsonNode;
          force: bool = false): Recallable =
  ## cancelJob
  ## Cancels a job.
  ##   force: bool
  ##        : <p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is <code>false</code>.</p> <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.</p>
  ##   jobId: string (required)
  ##        : The unique identifier you assigned to this job when it was created.
  ##   body: JObject (required)
  var path_21626258 = newJObject()
  var query_21626259 = newJObject()
  var body_21626260 = newJObject()
  add(query_21626259, "force", newJBool(force))
  add(path_21626258, "jobId", newJString(jobId))
  if body != nil:
    body_21626260 = body
  result = call_21626257.call(path_21626258, query_21626259, nil, nil, body_21626260)

var cancelJob* = Call_CancelJob_21626243(name: "cancelJob", meth: HttpMethod.HttpPut,
                                      host: "iot.amazonaws.com",
                                      route: "/jobs/{jobId}/cancel",
                                      validator: validate_CancelJob_21626244,
                                      base: "/", makeUrl: url_CancelJob_21626245,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelJobExecution_21626261 = ref object of OpenApiRestCall_21625435
proc url_CancelJobExecution_21626263(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId"),
               (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelJobExecution_21626262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels the execution of a job for a given thing.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing whose execution of the job will be canceled.
  ##   jobId: JString (required)
  ##        : The ID of the job to be canceled.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21626264 = path.getOrDefault("thingName")
  valid_21626264 = validateParameter(valid_21626264, JString, required = true,
                                   default = nil)
  if valid_21626264 != nil:
    section.add "thingName", valid_21626264
  var valid_21626265 = path.getOrDefault("jobId")
  valid_21626265 = validateParameter(valid_21626265, JString, required = true,
                                   default = nil)
  if valid_21626265 != nil:
    section.add "jobId", valid_21626265
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
  ##        : <p>(Optional) If <code>true</code> the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code> will be thrown. The default is <code>false</code>.</p> <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p>
  section = newJObject()
  var valid_21626266 = query.getOrDefault("force")
  valid_21626266 = validateParameter(valid_21626266, JBool, required = false,
                                   default = nil)
  if valid_21626266 != nil:
    section.add "force", valid_21626266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626267 = header.getOrDefault("X-Amz-Date")
  valid_21626267 = validateParameter(valid_21626267, JString, required = false,
                                   default = nil)
  if valid_21626267 != nil:
    section.add "X-Amz-Date", valid_21626267
  var valid_21626268 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626268 = validateParameter(valid_21626268, JString, required = false,
                                   default = nil)
  if valid_21626268 != nil:
    section.add "X-Amz-Security-Token", valid_21626268
  var valid_21626269 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626269 = validateParameter(valid_21626269, JString, required = false,
                                   default = nil)
  if valid_21626269 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626269
  var valid_21626270 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626270 = validateParameter(valid_21626270, JString, required = false,
                                   default = nil)
  if valid_21626270 != nil:
    section.add "X-Amz-Algorithm", valid_21626270
  var valid_21626271 = header.getOrDefault("X-Amz-Signature")
  valid_21626271 = validateParameter(valid_21626271, JString, required = false,
                                   default = nil)
  if valid_21626271 != nil:
    section.add "X-Amz-Signature", valid_21626271
  var valid_21626272 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626272 = validateParameter(valid_21626272, JString, required = false,
                                   default = nil)
  if valid_21626272 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626272
  var valid_21626273 = header.getOrDefault("X-Amz-Credential")
  valid_21626273 = validateParameter(valid_21626273, JString, required = false,
                                   default = nil)
  if valid_21626273 != nil:
    section.add "X-Amz-Credential", valid_21626273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626275: Call_CancelJobExecution_21626261; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels the execution of a job for a given thing.
  ## 
  let valid = call_21626275.validator(path, query, header, formData, body, _)
  let scheme = call_21626275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626275.makeUrl(scheme.get, call_21626275.host, call_21626275.base,
                               call_21626275.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626275, uri, valid, _)

proc call*(call_21626276: Call_CancelJobExecution_21626261; thingName: string;
          jobId: string; body: JsonNode; force: bool = false): Recallable =
  ## cancelJobExecution
  ## Cancels the execution of a job for a given thing.
  ##   force: bool
  ##        : <p>(Optional) If <code>true</code> the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code> will be thrown. The default is <code>false</code>.</p> <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p>
  ##   thingName: string (required)
  ##            : The name of the thing whose execution of the job will be canceled.
  ##   jobId: string (required)
  ##        : The ID of the job to be canceled.
  ##   body: JObject (required)
  var path_21626277 = newJObject()
  var query_21626278 = newJObject()
  var body_21626279 = newJObject()
  add(query_21626278, "force", newJBool(force))
  add(path_21626277, "thingName", newJString(thingName))
  add(path_21626277, "jobId", newJString(jobId))
  if body != nil:
    body_21626279 = body
  result = call_21626276.call(path_21626277, query_21626278, nil, nil, body_21626279)

var cancelJobExecution* = Call_CancelJobExecution_21626261(
    name: "cancelJobExecution", meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/things/{thingName}/jobs/{jobId}/cancel",
    validator: validate_CancelJobExecution_21626262, base: "/",
    makeUrl: url_CancelJobExecution_21626263, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetDefaultAuthorizer_21626292 = ref object of OpenApiRestCall_21625435
proc url_SetDefaultAuthorizer_21626294(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetDefaultAuthorizer_21626293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626295 = header.getOrDefault("X-Amz-Date")
  valid_21626295 = validateParameter(valid_21626295, JString, required = false,
                                   default = nil)
  if valid_21626295 != nil:
    section.add "X-Amz-Date", valid_21626295
  var valid_21626296 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626296 = validateParameter(valid_21626296, JString, required = false,
                                   default = nil)
  if valid_21626296 != nil:
    section.add "X-Amz-Security-Token", valid_21626296
  var valid_21626297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626297 = validateParameter(valid_21626297, JString, required = false,
                                   default = nil)
  if valid_21626297 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626297
  var valid_21626298 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626298 = validateParameter(valid_21626298, JString, required = false,
                                   default = nil)
  if valid_21626298 != nil:
    section.add "X-Amz-Algorithm", valid_21626298
  var valid_21626299 = header.getOrDefault("X-Amz-Signature")
  valid_21626299 = validateParameter(valid_21626299, JString, required = false,
                                   default = nil)
  if valid_21626299 != nil:
    section.add "X-Amz-Signature", valid_21626299
  var valid_21626300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626300 = validateParameter(valid_21626300, JString, required = false,
                                   default = nil)
  if valid_21626300 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626300
  var valid_21626301 = header.getOrDefault("X-Amz-Credential")
  valid_21626301 = validateParameter(valid_21626301, JString, required = false,
                                   default = nil)
  if valid_21626301 != nil:
    section.add "X-Amz-Credential", valid_21626301
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626303: Call_SetDefaultAuthorizer_21626292; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.
  ## 
  let valid = call_21626303.validator(path, query, header, formData, body, _)
  let scheme = call_21626303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626303.makeUrl(scheme.get, call_21626303.host, call_21626303.base,
                               call_21626303.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626303, uri, valid, _)

proc call*(call_21626304: Call_SetDefaultAuthorizer_21626292; body: JsonNode): Recallable =
  ## setDefaultAuthorizer
  ## Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.
  ##   body: JObject (required)
  var body_21626305 = newJObject()
  if body != nil:
    body_21626305 = body
  result = call_21626304.call(nil, nil, nil, nil, body_21626305)

var setDefaultAuthorizer* = Call_SetDefaultAuthorizer_21626292(
    name: "setDefaultAuthorizer", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/default-authorizer",
    validator: validate_SetDefaultAuthorizer_21626293, base: "/",
    makeUrl: url_SetDefaultAuthorizer_21626294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeDefaultAuthorizer_21626280 = ref object of OpenApiRestCall_21625435
proc url_DescribeDefaultAuthorizer_21626282(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeDefaultAuthorizer_21626281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes the default authorizer.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626283 = header.getOrDefault("X-Amz-Date")
  valid_21626283 = validateParameter(valid_21626283, JString, required = false,
                                   default = nil)
  if valid_21626283 != nil:
    section.add "X-Amz-Date", valid_21626283
  var valid_21626284 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626284 = validateParameter(valid_21626284, JString, required = false,
                                   default = nil)
  if valid_21626284 != nil:
    section.add "X-Amz-Security-Token", valid_21626284
  var valid_21626285 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626285 = validateParameter(valid_21626285, JString, required = false,
                                   default = nil)
  if valid_21626285 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626285
  var valid_21626286 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626286 = validateParameter(valid_21626286, JString, required = false,
                                   default = nil)
  if valid_21626286 != nil:
    section.add "X-Amz-Algorithm", valid_21626286
  var valid_21626287 = header.getOrDefault("X-Amz-Signature")
  valid_21626287 = validateParameter(valid_21626287, JString, required = false,
                                   default = nil)
  if valid_21626287 != nil:
    section.add "X-Amz-Signature", valid_21626287
  var valid_21626288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626288 = validateParameter(valid_21626288, JString, required = false,
                                   default = nil)
  if valid_21626288 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626288
  var valid_21626289 = header.getOrDefault("X-Amz-Credential")
  valid_21626289 = validateParameter(valid_21626289, JString, required = false,
                                   default = nil)
  if valid_21626289 != nil:
    section.add "X-Amz-Credential", valid_21626289
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626290: Call_DescribeDefaultAuthorizer_21626280;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes the default authorizer.
  ## 
  let valid = call_21626290.validator(path, query, header, formData, body, _)
  let scheme = call_21626290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626290.makeUrl(scheme.get, call_21626290.host, call_21626290.base,
                               call_21626290.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626290, uri, valid, _)

proc call*(call_21626291: Call_DescribeDefaultAuthorizer_21626280): Recallable =
  ## describeDefaultAuthorizer
  ## Describes the default authorizer.
  result = call_21626291.call(nil, nil, nil, nil, nil)

var describeDefaultAuthorizer* = Call_DescribeDefaultAuthorizer_21626280(
    name: "describeDefaultAuthorizer", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/default-authorizer",
    validator: validate_DescribeDefaultAuthorizer_21626281, base: "/",
    makeUrl: url_DescribeDefaultAuthorizer_21626282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ClearDefaultAuthorizer_21626306 = ref object of OpenApiRestCall_21625435
proc url_ClearDefaultAuthorizer_21626308(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ClearDefaultAuthorizer_21626307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Clears the default authorizer.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626309 = header.getOrDefault("X-Amz-Date")
  valid_21626309 = validateParameter(valid_21626309, JString, required = false,
                                   default = nil)
  if valid_21626309 != nil:
    section.add "X-Amz-Date", valid_21626309
  var valid_21626310 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626310 = validateParameter(valid_21626310, JString, required = false,
                                   default = nil)
  if valid_21626310 != nil:
    section.add "X-Amz-Security-Token", valid_21626310
  var valid_21626311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626311 = validateParameter(valid_21626311, JString, required = false,
                                   default = nil)
  if valid_21626311 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626311
  var valid_21626312 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626312 = validateParameter(valid_21626312, JString, required = false,
                                   default = nil)
  if valid_21626312 != nil:
    section.add "X-Amz-Algorithm", valid_21626312
  var valid_21626313 = header.getOrDefault("X-Amz-Signature")
  valid_21626313 = validateParameter(valid_21626313, JString, required = false,
                                   default = nil)
  if valid_21626313 != nil:
    section.add "X-Amz-Signature", valid_21626313
  var valid_21626314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626314 = validateParameter(valid_21626314, JString, required = false,
                                   default = nil)
  if valid_21626314 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626314
  var valid_21626315 = header.getOrDefault("X-Amz-Credential")
  valid_21626315 = validateParameter(valid_21626315, JString, required = false,
                                   default = nil)
  if valid_21626315 != nil:
    section.add "X-Amz-Credential", valid_21626315
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626316: Call_ClearDefaultAuthorizer_21626306;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Clears the default authorizer.
  ## 
  let valid = call_21626316.validator(path, query, header, formData, body, _)
  let scheme = call_21626316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626316.makeUrl(scheme.get, call_21626316.host, call_21626316.base,
                               call_21626316.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626316, uri, valid, _)

proc call*(call_21626317: Call_ClearDefaultAuthorizer_21626306): Recallable =
  ## clearDefaultAuthorizer
  ## Clears the default authorizer.
  result = call_21626317.call(nil, nil, nil, nil, nil)

var clearDefaultAuthorizer* = Call_ClearDefaultAuthorizer_21626306(
    name: "clearDefaultAuthorizer", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/default-authorizer",
    validator: validate_ClearDefaultAuthorizer_21626307, base: "/",
    makeUrl: url_ClearDefaultAuthorizer_21626308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ConfirmTopicRuleDestination_21626318 = ref object of OpenApiRestCall_21625435
proc url_ConfirmTopicRuleDestination_21626320(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "confirmationToken" in path,
        "`confirmationToken` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/confirmdestination/"),
               (kind: VariableSegment, value: "confirmationToken")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ConfirmTopicRuleDestination_21626319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Confirms a topic rule destination. When you create a rule requiring a destination, AWS IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   confirmationToken: JString (required)
  ##                    : The token used to confirm ownership or access to the topic rule confirmation URL.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `confirmationToken` field"
  var valid_21626321 = path.getOrDefault("confirmationToken")
  valid_21626321 = validateParameter(valid_21626321, JString, required = true,
                                   default = nil)
  if valid_21626321 != nil:
    section.add "confirmationToken", valid_21626321
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626322 = header.getOrDefault("X-Amz-Date")
  valid_21626322 = validateParameter(valid_21626322, JString, required = false,
                                   default = nil)
  if valid_21626322 != nil:
    section.add "X-Amz-Date", valid_21626322
  var valid_21626323 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626323 = validateParameter(valid_21626323, JString, required = false,
                                   default = nil)
  if valid_21626323 != nil:
    section.add "X-Amz-Security-Token", valid_21626323
  var valid_21626324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626324 = validateParameter(valid_21626324, JString, required = false,
                                   default = nil)
  if valid_21626324 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626324
  var valid_21626325 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626325 = validateParameter(valid_21626325, JString, required = false,
                                   default = nil)
  if valid_21626325 != nil:
    section.add "X-Amz-Algorithm", valid_21626325
  var valid_21626326 = header.getOrDefault("X-Amz-Signature")
  valid_21626326 = validateParameter(valid_21626326, JString, required = false,
                                   default = nil)
  if valid_21626326 != nil:
    section.add "X-Amz-Signature", valid_21626326
  var valid_21626327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626327 = validateParameter(valid_21626327, JString, required = false,
                                   default = nil)
  if valid_21626327 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626327
  var valid_21626328 = header.getOrDefault("X-Amz-Credential")
  valid_21626328 = validateParameter(valid_21626328, JString, required = false,
                                   default = nil)
  if valid_21626328 != nil:
    section.add "X-Amz-Credential", valid_21626328
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626329: Call_ConfirmTopicRuleDestination_21626318;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Confirms a topic rule destination. When you create a rule requiring a destination, AWS IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.
  ## 
  let valid = call_21626329.validator(path, query, header, formData, body, _)
  let scheme = call_21626329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626329.makeUrl(scheme.get, call_21626329.host, call_21626329.base,
                               call_21626329.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626329, uri, valid, _)

proc call*(call_21626330: Call_ConfirmTopicRuleDestination_21626318;
          confirmationToken: string): Recallable =
  ## confirmTopicRuleDestination
  ## Confirms a topic rule destination. When you create a rule requiring a destination, AWS IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.
  ##   confirmationToken: string (required)
  ##                    : The token used to confirm ownership or access to the topic rule confirmation URL.
  var path_21626331 = newJObject()
  add(path_21626331, "confirmationToken", newJString(confirmationToken))
  result = call_21626330.call(path_21626331, nil, nil, nil, nil)

var confirmTopicRuleDestination* = Call_ConfirmTopicRuleDestination_21626318(
    name: "confirmTopicRuleDestination", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/confirmdestination/{confirmationToken}",
    validator: validate_ConfirmTopicRuleDestination_21626319, base: "/",
    makeUrl: url_ConfirmTopicRuleDestination_21626320,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAuthorizer_21626346 = ref object of OpenApiRestCall_21625435
proc url_UpdateAuthorizer_21626348(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path, "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
               (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateAuthorizer_21626347(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates an authorizer.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
  ##                 : The authorizer name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `authorizerName` field"
  var valid_21626349 = path.getOrDefault("authorizerName")
  valid_21626349 = validateParameter(valid_21626349, JString, required = true,
                                   default = nil)
  if valid_21626349 != nil:
    section.add "authorizerName", valid_21626349
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626350 = header.getOrDefault("X-Amz-Date")
  valid_21626350 = validateParameter(valid_21626350, JString, required = false,
                                   default = nil)
  if valid_21626350 != nil:
    section.add "X-Amz-Date", valid_21626350
  var valid_21626351 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626351 = validateParameter(valid_21626351, JString, required = false,
                                   default = nil)
  if valid_21626351 != nil:
    section.add "X-Amz-Security-Token", valid_21626351
  var valid_21626352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626352 = validateParameter(valid_21626352, JString, required = false,
                                   default = nil)
  if valid_21626352 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626352
  var valid_21626353 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626353 = validateParameter(valid_21626353, JString, required = false,
                                   default = nil)
  if valid_21626353 != nil:
    section.add "X-Amz-Algorithm", valid_21626353
  var valid_21626354 = header.getOrDefault("X-Amz-Signature")
  valid_21626354 = validateParameter(valid_21626354, JString, required = false,
                                   default = nil)
  if valid_21626354 != nil:
    section.add "X-Amz-Signature", valid_21626354
  var valid_21626355 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626355 = validateParameter(valid_21626355, JString, required = false,
                                   default = nil)
  if valid_21626355 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626355
  var valid_21626356 = header.getOrDefault("X-Amz-Credential")
  valid_21626356 = validateParameter(valid_21626356, JString, required = false,
                                   default = nil)
  if valid_21626356 != nil:
    section.add "X-Amz-Credential", valid_21626356
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626358: Call_UpdateAuthorizer_21626346; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates an authorizer.
  ## 
  let valid = call_21626358.validator(path, query, header, formData, body, _)
  let scheme = call_21626358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626358.makeUrl(scheme.get, call_21626358.host, call_21626358.base,
                               call_21626358.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626358, uri, valid, _)

proc call*(call_21626359: Call_UpdateAuthorizer_21626346; authorizerName: string;
          body: JsonNode): Recallable =
  ## updateAuthorizer
  ## Updates an authorizer.
  ##   authorizerName: string (required)
  ##                 : The authorizer name.
  ##   body: JObject (required)
  var path_21626360 = newJObject()
  var body_21626361 = newJObject()
  add(path_21626360, "authorizerName", newJString(authorizerName))
  if body != nil:
    body_21626361 = body
  result = call_21626359.call(path_21626360, nil, nil, nil, body_21626361)

var updateAuthorizer* = Call_UpdateAuthorizer_21626346(name: "updateAuthorizer",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/authorizer/{authorizerName}", validator: validate_UpdateAuthorizer_21626347,
    base: "/", makeUrl: url_UpdateAuthorizer_21626348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateAuthorizer_21626362 = ref object of OpenApiRestCall_21625435
proc url_CreateAuthorizer_21626364(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path, "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
               (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateAuthorizer_21626363(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an authorizer.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
  ##                 : The authorizer name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `authorizerName` field"
  var valid_21626365 = path.getOrDefault("authorizerName")
  valid_21626365 = validateParameter(valid_21626365, JString, required = true,
                                   default = nil)
  if valid_21626365 != nil:
    section.add "authorizerName", valid_21626365
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626366 = header.getOrDefault("X-Amz-Date")
  valid_21626366 = validateParameter(valid_21626366, JString, required = false,
                                   default = nil)
  if valid_21626366 != nil:
    section.add "X-Amz-Date", valid_21626366
  var valid_21626367 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626367 = validateParameter(valid_21626367, JString, required = false,
                                   default = nil)
  if valid_21626367 != nil:
    section.add "X-Amz-Security-Token", valid_21626367
  var valid_21626368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626368 = validateParameter(valid_21626368, JString, required = false,
                                   default = nil)
  if valid_21626368 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626368
  var valid_21626369 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626369 = validateParameter(valid_21626369, JString, required = false,
                                   default = nil)
  if valid_21626369 != nil:
    section.add "X-Amz-Algorithm", valid_21626369
  var valid_21626370 = header.getOrDefault("X-Amz-Signature")
  valid_21626370 = validateParameter(valid_21626370, JString, required = false,
                                   default = nil)
  if valid_21626370 != nil:
    section.add "X-Amz-Signature", valid_21626370
  var valid_21626371 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626371 = validateParameter(valid_21626371, JString, required = false,
                                   default = nil)
  if valid_21626371 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626371
  var valid_21626372 = header.getOrDefault("X-Amz-Credential")
  valid_21626372 = validateParameter(valid_21626372, JString, required = false,
                                   default = nil)
  if valid_21626372 != nil:
    section.add "X-Amz-Credential", valid_21626372
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626374: Call_CreateAuthorizer_21626362; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an authorizer.
  ## 
  let valid = call_21626374.validator(path, query, header, formData, body, _)
  let scheme = call_21626374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626374.makeUrl(scheme.get, call_21626374.host, call_21626374.base,
                               call_21626374.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626374, uri, valid, _)

proc call*(call_21626375: Call_CreateAuthorizer_21626362; authorizerName: string;
          body: JsonNode): Recallable =
  ## createAuthorizer
  ## Creates an authorizer.
  ##   authorizerName: string (required)
  ##                 : The authorizer name.
  ##   body: JObject (required)
  var path_21626376 = newJObject()
  var body_21626377 = newJObject()
  add(path_21626376, "authorizerName", newJString(authorizerName))
  if body != nil:
    body_21626377 = body
  result = call_21626375.call(path_21626376, nil, nil, nil, body_21626377)

var createAuthorizer* = Call_CreateAuthorizer_21626362(name: "createAuthorizer",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/authorizer/{authorizerName}", validator: validate_CreateAuthorizer_21626363,
    base: "/", makeUrl: url_CreateAuthorizer_21626364,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuthorizer_21626332 = ref object of OpenApiRestCall_21625435
proc url_DescribeAuthorizer_21626334(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path, "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
               (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuthorizer_21626333(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes an authorizer.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
  ##                 : The name of the authorizer to describe.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `authorizerName` field"
  var valid_21626335 = path.getOrDefault("authorizerName")
  valid_21626335 = validateParameter(valid_21626335, JString, required = true,
                                   default = nil)
  if valid_21626335 != nil:
    section.add "authorizerName", valid_21626335
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626336 = header.getOrDefault("X-Amz-Date")
  valid_21626336 = validateParameter(valid_21626336, JString, required = false,
                                   default = nil)
  if valid_21626336 != nil:
    section.add "X-Amz-Date", valid_21626336
  var valid_21626337 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626337 = validateParameter(valid_21626337, JString, required = false,
                                   default = nil)
  if valid_21626337 != nil:
    section.add "X-Amz-Security-Token", valid_21626337
  var valid_21626338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626338 = validateParameter(valid_21626338, JString, required = false,
                                   default = nil)
  if valid_21626338 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626338
  var valid_21626339 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626339 = validateParameter(valid_21626339, JString, required = false,
                                   default = nil)
  if valid_21626339 != nil:
    section.add "X-Amz-Algorithm", valid_21626339
  var valid_21626340 = header.getOrDefault("X-Amz-Signature")
  valid_21626340 = validateParameter(valid_21626340, JString, required = false,
                                   default = nil)
  if valid_21626340 != nil:
    section.add "X-Amz-Signature", valid_21626340
  var valid_21626341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626341 = validateParameter(valid_21626341, JString, required = false,
                                   default = nil)
  if valid_21626341 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626341
  var valid_21626342 = header.getOrDefault("X-Amz-Credential")
  valid_21626342 = validateParameter(valid_21626342, JString, required = false,
                                   default = nil)
  if valid_21626342 != nil:
    section.add "X-Amz-Credential", valid_21626342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626343: Call_DescribeAuthorizer_21626332; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes an authorizer.
  ## 
  let valid = call_21626343.validator(path, query, header, formData, body, _)
  let scheme = call_21626343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626343.makeUrl(scheme.get, call_21626343.host, call_21626343.base,
                               call_21626343.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626343, uri, valid, _)

proc call*(call_21626344: Call_DescribeAuthorizer_21626332; authorizerName: string): Recallable =
  ## describeAuthorizer
  ## Describes an authorizer.
  ##   authorizerName: string (required)
  ##                 : The name of the authorizer to describe.
  var path_21626345 = newJObject()
  add(path_21626345, "authorizerName", newJString(authorizerName))
  result = call_21626344.call(path_21626345, nil, nil, nil, nil)

var describeAuthorizer* = Call_DescribeAuthorizer_21626332(
    name: "describeAuthorizer", meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/authorizer/{authorizerName}", validator: validate_DescribeAuthorizer_21626333,
    base: "/", makeUrl: url_DescribeAuthorizer_21626334,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteAuthorizer_21626378 = ref object of OpenApiRestCall_21625435
proc url_DeleteAuthorizer_21626380(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path, "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
               (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteAuthorizer_21626379(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an authorizer.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
  ##                 : The name of the authorizer to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `authorizerName` field"
  var valid_21626381 = path.getOrDefault("authorizerName")
  valid_21626381 = validateParameter(valid_21626381, JString, required = true,
                                   default = nil)
  if valid_21626381 != nil:
    section.add "authorizerName", valid_21626381
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626382 = header.getOrDefault("X-Amz-Date")
  valid_21626382 = validateParameter(valid_21626382, JString, required = false,
                                   default = nil)
  if valid_21626382 != nil:
    section.add "X-Amz-Date", valid_21626382
  var valid_21626383 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626383 = validateParameter(valid_21626383, JString, required = false,
                                   default = nil)
  if valid_21626383 != nil:
    section.add "X-Amz-Security-Token", valid_21626383
  var valid_21626384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626384 = validateParameter(valid_21626384, JString, required = false,
                                   default = nil)
  if valid_21626384 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626384
  var valid_21626385 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626385 = validateParameter(valid_21626385, JString, required = false,
                                   default = nil)
  if valid_21626385 != nil:
    section.add "X-Amz-Algorithm", valid_21626385
  var valid_21626386 = header.getOrDefault("X-Amz-Signature")
  valid_21626386 = validateParameter(valid_21626386, JString, required = false,
                                   default = nil)
  if valid_21626386 != nil:
    section.add "X-Amz-Signature", valid_21626386
  var valid_21626387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626387 = validateParameter(valid_21626387, JString, required = false,
                                   default = nil)
  if valid_21626387 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626387
  var valid_21626388 = header.getOrDefault("X-Amz-Credential")
  valid_21626388 = validateParameter(valid_21626388, JString, required = false,
                                   default = nil)
  if valid_21626388 != nil:
    section.add "X-Amz-Credential", valid_21626388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626389: Call_DeleteAuthorizer_21626378; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an authorizer.
  ## 
  let valid = call_21626389.validator(path, query, header, formData, body, _)
  let scheme = call_21626389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626389.makeUrl(scheme.get, call_21626389.host, call_21626389.base,
                               call_21626389.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626389, uri, valid, _)

proc call*(call_21626390: Call_DeleteAuthorizer_21626378; authorizerName: string): Recallable =
  ## deleteAuthorizer
  ## Deletes an authorizer.
  ##   authorizerName: string (required)
  ##                 : The name of the authorizer to delete.
  var path_21626391 = newJObject()
  add(path_21626391, "authorizerName", newJString(authorizerName))
  result = call_21626390.call(path_21626391, nil, nil, nil, nil)

var deleteAuthorizer* = Call_DeleteAuthorizer_21626378(name: "deleteAuthorizer",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/authorizer/{authorizerName}", validator: validate_DeleteAuthorizer_21626379,
    base: "/", makeUrl: url_DeleteAuthorizer_21626380,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBillingGroup_21626406 = ref object of OpenApiRestCall_21625435
proc url_CreateBillingGroup_21626408(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
        "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
               (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateBillingGroup_21626407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a billing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
  ##                   : The name you wish to give to the billing group.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `billingGroupName` field"
  var valid_21626409 = path.getOrDefault("billingGroupName")
  valid_21626409 = validateParameter(valid_21626409, JString, required = true,
                                   default = nil)
  if valid_21626409 != nil:
    section.add "billingGroupName", valid_21626409
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626410 = header.getOrDefault("X-Amz-Date")
  valid_21626410 = validateParameter(valid_21626410, JString, required = false,
                                   default = nil)
  if valid_21626410 != nil:
    section.add "X-Amz-Date", valid_21626410
  var valid_21626411 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626411 = validateParameter(valid_21626411, JString, required = false,
                                   default = nil)
  if valid_21626411 != nil:
    section.add "X-Amz-Security-Token", valid_21626411
  var valid_21626412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626412 = validateParameter(valid_21626412, JString, required = false,
                                   default = nil)
  if valid_21626412 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626412
  var valid_21626413 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626413 = validateParameter(valid_21626413, JString, required = false,
                                   default = nil)
  if valid_21626413 != nil:
    section.add "X-Amz-Algorithm", valid_21626413
  var valid_21626414 = header.getOrDefault("X-Amz-Signature")
  valid_21626414 = validateParameter(valid_21626414, JString, required = false,
                                   default = nil)
  if valid_21626414 != nil:
    section.add "X-Amz-Signature", valid_21626414
  var valid_21626415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626415 = validateParameter(valid_21626415, JString, required = false,
                                   default = nil)
  if valid_21626415 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626415
  var valid_21626416 = header.getOrDefault("X-Amz-Credential")
  valid_21626416 = validateParameter(valid_21626416, JString, required = false,
                                   default = nil)
  if valid_21626416 != nil:
    section.add "X-Amz-Credential", valid_21626416
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626418: Call_CreateBillingGroup_21626406; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a billing group.
  ## 
  let valid = call_21626418.validator(path, query, header, formData, body, _)
  let scheme = call_21626418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626418.makeUrl(scheme.get, call_21626418.host, call_21626418.base,
                               call_21626418.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626418, uri, valid, _)

proc call*(call_21626419: Call_CreateBillingGroup_21626406;
          billingGroupName: string; body: JsonNode): Recallable =
  ## createBillingGroup
  ## Creates a billing group.
  ##   billingGroupName: string (required)
  ##                   : The name you wish to give to the billing group.
  ##   body: JObject (required)
  var path_21626420 = newJObject()
  var body_21626421 = newJObject()
  add(path_21626420, "billingGroupName", newJString(billingGroupName))
  if body != nil:
    body_21626421 = body
  result = call_21626419.call(path_21626420, nil, nil, nil, body_21626421)

var createBillingGroup* = Call_CreateBillingGroup_21626406(
    name: "createBillingGroup", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_CreateBillingGroup_21626407, base: "/",
    makeUrl: url_CreateBillingGroup_21626408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeBillingGroup_21626392 = ref object of OpenApiRestCall_21625435
proc url_DescribeBillingGroup_21626394(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
        "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
               (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeBillingGroup_21626393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns information about a billing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
  ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `billingGroupName` field"
  var valid_21626395 = path.getOrDefault("billingGroupName")
  valid_21626395 = validateParameter(valid_21626395, JString, required = true,
                                   default = nil)
  if valid_21626395 != nil:
    section.add "billingGroupName", valid_21626395
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626396 = header.getOrDefault("X-Amz-Date")
  valid_21626396 = validateParameter(valid_21626396, JString, required = false,
                                   default = nil)
  if valid_21626396 != nil:
    section.add "X-Amz-Date", valid_21626396
  var valid_21626397 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626397 = validateParameter(valid_21626397, JString, required = false,
                                   default = nil)
  if valid_21626397 != nil:
    section.add "X-Amz-Security-Token", valid_21626397
  var valid_21626398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626398 = validateParameter(valid_21626398, JString, required = false,
                                   default = nil)
  if valid_21626398 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626398
  var valid_21626399 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626399 = validateParameter(valid_21626399, JString, required = false,
                                   default = nil)
  if valid_21626399 != nil:
    section.add "X-Amz-Algorithm", valid_21626399
  var valid_21626400 = header.getOrDefault("X-Amz-Signature")
  valid_21626400 = validateParameter(valid_21626400, JString, required = false,
                                   default = nil)
  if valid_21626400 != nil:
    section.add "X-Amz-Signature", valid_21626400
  var valid_21626401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626401 = validateParameter(valid_21626401, JString, required = false,
                                   default = nil)
  if valid_21626401 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626401
  var valid_21626402 = header.getOrDefault("X-Amz-Credential")
  valid_21626402 = validateParameter(valid_21626402, JString, required = false,
                                   default = nil)
  if valid_21626402 != nil:
    section.add "X-Amz-Credential", valid_21626402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626403: Call_DescribeBillingGroup_21626392; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a billing group.
  ## 
  let valid = call_21626403.validator(path, query, header, formData, body, _)
  let scheme = call_21626403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626403.makeUrl(scheme.get, call_21626403.host, call_21626403.base,
                               call_21626403.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626403, uri, valid, _)

proc call*(call_21626404: Call_DescribeBillingGroup_21626392;
          billingGroupName: string): Recallable =
  ## describeBillingGroup
  ## Returns information about a billing group.
  ##   billingGroupName: string (required)
  ##                   : The name of the billing group.
  var path_21626405 = newJObject()
  add(path_21626405, "billingGroupName", newJString(billingGroupName))
  result = call_21626404.call(path_21626405, nil, nil, nil, nil)

var describeBillingGroup* = Call_DescribeBillingGroup_21626392(
    name: "describeBillingGroup", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_DescribeBillingGroup_21626393, base: "/",
    makeUrl: url_DescribeBillingGroup_21626394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBillingGroup_21626438 = ref object of OpenApiRestCall_21625435
proc url_UpdateBillingGroup_21626440(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
        "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
               (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateBillingGroup_21626439(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates information about the billing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
  ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `billingGroupName` field"
  var valid_21626441 = path.getOrDefault("billingGroupName")
  valid_21626441 = validateParameter(valid_21626441, JString, required = true,
                                   default = nil)
  if valid_21626441 != nil:
    section.add "billingGroupName", valid_21626441
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626442 = header.getOrDefault("X-Amz-Date")
  valid_21626442 = validateParameter(valid_21626442, JString, required = false,
                                   default = nil)
  if valid_21626442 != nil:
    section.add "X-Amz-Date", valid_21626442
  var valid_21626443 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626443 = validateParameter(valid_21626443, JString, required = false,
                                   default = nil)
  if valid_21626443 != nil:
    section.add "X-Amz-Security-Token", valid_21626443
  var valid_21626444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626444 = validateParameter(valid_21626444, JString, required = false,
                                   default = nil)
  if valid_21626444 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626444
  var valid_21626445 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626445 = validateParameter(valid_21626445, JString, required = false,
                                   default = nil)
  if valid_21626445 != nil:
    section.add "X-Amz-Algorithm", valid_21626445
  var valid_21626446 = header.getOrDefault("X-Amz-Signature")
  valid_21626446 = validateParameter(valid_21626446, JString, required = false,
                                   default = nil)
  if valid_21626446 != nil:
    section.add "X-Amz-Signature", valid_21626446
  var valid_21626447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626447 = validateParameter(valid_21626447, JString, required = false,
                                   default = nil)
  if valid_21626447 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626447
  var valid_21626448 = header.getOrDefault("X-Amz-Credential")
  valid_21626448 = validateParameter(valid_21626448, JString, required = false,
                                   default = nil)
  if valid_21626448 != nil:
    section.add "X-Amz-Credential", valid_21626448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626450: Call_UpdateBillingGroup_21626438; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates information about the billing group.
  ## 
  let valid = call_21626450.validator(path, query, header, formData, body, _)
  let scheme = call_21626450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626450.makeUrl(scheme.get, call_21626450.host, call_21626450.base,
                               call_21626450.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626450, uri, valid, _)

proc call*(call_21626451: Call_UpdateBillingGroup_21626438;
          billingGroupName: string; body: JsonNode): Recallable =
  ## updateBillingGroup
  ## Updates information about the billing group.
  ##   billingGroupName: string (required)
  ##                   : The name of the billing group.
  ##   body: JObject (required)
  var path_21626452 = newJObject()
  var body_21626453 = newJObject()
  add(path_21626452, "billingGroupName", newJString(billingGroupName))
  if body != nil:
    body_21626453 = body
  result = call_21626451.call(path_21626452, nil, nil, nil, body_21626453)

var updateBillingGroup* = Call_UpdateBillingGroup_21626438(
    name: "updateBillingGroup", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_UpdateBillingGroup_21626439, base: "/",
    makeUrl: url_UpdateBillingGroup_21626440, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBillingGroup_21626422 = ref object of OpenApiRestCall_21625435
proc url_DeleteBillingGroup_21626424(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
        "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
               (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteBillingGroup_21626423(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the billing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
  ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `billingGroupName` field"
  var valid_21626425 = path.getOrDefault("billingGroupName")
  valid_21626425 = validateParameter(valid_21626425, JString, required = true,
                                   default = nil)
  if valid_21626425 != nil:
    section.add "billingGroupName", valid_21626425
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
  ##                  : The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>DeleteBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.
  section = newJObject()
  var valid_21626426 = query.getOrDefault("expectedVersion")
  valid_21626426 = validateParameter(valid_21626426, JInt, required = false,
                                   default = nil)
  if valid_21626426 != nil:
    section.add "expectedVersion", valid_21626426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626427 = header.getOrDefault("X-Amz-Date")
  valid_21626427 = validateParameter(valid_21626427, JString, required = false,
                                   default = nil)
  if valid_21626427 != nil:
    section.add "X-Amz-Date", valid_21626427
  var valid_21626428 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626428 = validateParameter(valid_21626428, JString, required = false,
                                   default = nil)
  if valid_21626428 != nil:
    section.add "X-Amz-Security-Token", valid_21626428
  var valid_21626429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626429 = validateParameter(valid_21626429, JString, required = false,
                                   default = nil)
  if valid_21626429 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626429
  var valid_21626430 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626430 = validateParameter(valid_21626430, JString, required = false,
                                   default = nil)
  if valid_21626430 != nil:
    section.add "X-Amz-Algorithm", valid_21626430
  var valid_21626431 = header.getOrDefault("X-Amz-Signature")
  valid_21626431 = validateParameter(valid_21626431, JString, required = false,
                                   default = nil)
  if valid_21626431 != nil:
    section.add "X-Amz-Signature", valid_21626431
  var valid_21626432 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626432 = validateParameter(valid_21626432, JString, required = false,
                                   default = nil)
  if valid_21626432 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626432
  var valid_21626433 = header.getOrDefault("X-Amz-Credential")
  valid_21626433 = validateParameter(valid_21626433, JString, required = false,
                                   default = nil)
  if valid_21626433 != nil:
    section.add "X-Amz-Credential", valid_21626433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626434: Call_DeleteBillingGroup_21626422; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the billing group.
  ## 
  let valid = call_21626434.validator(path, query, header, formData, body, _)
  let scheme = call_21626434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626434.makeUrl(scheme.get, call_21626434.host, call_21626434.base,
                               call_21626434.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626434, uri, valid, _)

proc call*(call_21626435: Call_DeleteBillingGroup_21626422;
          billingGroupName: string; expectedVersion: int = 0): Recallable =
  ## deleteBillingGroup
  ## Deletes the billing group.
  ##   expectedVersion: int
  ##                  : The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>DeleteBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.
  ##   billingGroupName: string (required)
  ##                   : The name of the billing group.
  var path_21626436 = newJObject()
  var query_21626437 = newJObject()
  add(query_21626437, "expectedVersion", newJInt(expectedVersion))
  add(path_21626436, "billingGroupName", newJString(billingGroupName))
  result = call_21626435.call(path_21626436, query_21626437, nil, nil, nil)

var deleteBillingGroup* = Call_DeleteBillingGroup_21626422(
    name: "deleteBillingGroup", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_DeleteBillingGroup_21626423, base: "/",
    makeUrl: url_DeleteBillingGroup_21626424, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateCertificateFromCsr_21626470 = ref object of OpenApiRestCall_21625435
proc url_CreateCertificateFromCsr_21626472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateCertificateFromCsr_21626471(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
  ##              : Specifies whether the certificate is active.
  section = newJObject()
  var valid_21626473 = query.getOrDefault("setAsActive")
  valid_21626473 = validateParameter(valid_21626473, JBool, required = false,
                                   default = nil)
  if valid_21626473 != nil:
    section.add "setAsActive", valid_21626473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626474 = header.getOrDefault("X-Amz-Date")
  valid_21626474 = validateParameter(valid_21626474, JString, required = false,
                                   default = nil)
  if valid_21626474 != nil:
    section.add "X-Amz-Date", valid_21626474
  var valid_21626475 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626475 = validateParameter(valid_21626475, JString, required = false,
                                   default = nil)
  if valid_21626475 != nil:
    section.add "X-Amz-Security-Token", valid_21626475
  var valid_21626476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626476 = validateParameter(valid_21626476, JString, required = false,
                                   default = nil)
  if valid_21626476 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626476
  var valid_21626477 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626477 = validateParameter(valid_21626477, JString, required = false,
                                   default = nil)
  if valid_21626477 != nil:
    section.add "X-Amz-Algorithm", valid_21626477
  var valid_21626478 = header.getOrDefault("X-Amz-Signature")
  valid_21626478 = validateParameter(valid_21626478, JString, required = false,
                                   default = nil)
  if valid_21626478 != nil:
    section.add "X-Amz-Signature", valid_21626478
  var valid_21626479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626479 = validateParameter(valid_21626479, JString, required = false,
                                   default = nil)
  if valid_21626479 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626479
  var valid_21626480 = header.getOrDefault("X-Amz-Credential")
  valid_21626480 = validateParameter(valid_21626480, JString, required = false,
                                   default = nil)
  if valid_21626480 != nil:
    section.add "X-Amz-Credential", valid_21626480
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626482: Call_CreateCertificateFromCsr_21626470;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
  ## 
  let valid = call_21626482.validator(path, query, header, formData, body, _)
  let scheme = call_21626482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626482.makeUrl(scheme.get, call_21626482.host, call_21626482.base,
                               call_21626482.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626482, uri, valid, _)

proc call*(call_21626483: Call_CreateCertificateFromCsr_21626470; body: JsonNode;
          setAsActive: bool = false): Recallable =
  ## createCertificateFromCsr
  ## <p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
  ##   setAsActive: bool
  ##              : Specifies whether the certificate is active.
  ##   body: JObject (required)
  var query_21626484 = newJObject()
  var body_21626485 = newJObject()
  add(query_21626484, "setAsActive", newJBool(setAsActive))
  if body != nil:
    body_21626485 = body
  result = call_21626483.call(nil, query_21626484, nil, nil, body_21626485)

var createCertificateFromCsr* = Call_CreateCertificateFromCsr_21626470(
    name: "createCertificateFromCsr", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/certificates",
    validator: validate_CreateCertificateFromCsr_21626471, base: "/",
    makeUrl: url_CreateCertificateFromCsr_21626472,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListCertificates_21626454 = ref object of OpenApiRestCall_21625435
proc url_ListCertificates_21626456(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListCertificates_21626455(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  ##   isAscendingOrder: JBool
  ##                   : Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
  section = newJObject()
  var valid_21626457 = query.getOrDefault("marker")
  valid_21626457 = validateParameter(valid_21626457, JString, required = false,
                                   default = nil)
  if valid_21626457 != nil:
    section.add "marker", valid_21626457
  var valid_21626458 = query.getOrDefault("pageSize")
  valid_21626458 = validateParameter(valid_21626458, JInt, required = false,
                                   default = nil)
  if valid_21626458 != nil:
    section.add "pageSize", valid_21626458
  var valid_21626459 = query.getOrDefault("isAscendingOrder")
  valid_21626459 = validateParameter(valid_21626459, JBool, required = false,
                                   default = nil)
  if valid_21626459 != nil:
    section.add "isAscendingOrder", valid_21626459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626460 = header.getOrDefault("X-Amz-Date")
  valid_21626460 = validateParameter(valid_21626460, JString, required = false,
                                   default = nil)
  if valid_21626460 != nil:
    section.add "X-Amz-Date", valid_21626460
  var valid_21626461 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626461 = validateParameter(valid_21626461, JString, required = false,
                                   default = nil)
  if valid_21626461 != nil:
    section.add "X-Amz-Security-Token", valid_21626461
  var valid_21626462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626462 = validateParameter(valid_21626462, JString, required = false,
                                   default = nil)
  if valid_21626462 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626462
  var valid_21626463 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626463 = validateParameter(valid_21626463, JString, required = false,
                                   default = nil)
  if valid_21626463 != nil:
    section.add "X-Amz-Algorithm", valid_21626463
  var valid_21626464 = header.getOrDefault("X-Amz-Signature")
  valid_21626464 = validateParameter(valid_21626464, JString, required = false,
                                   default = nil)
  if valid_21626464 != nil:
    section.add "X-Amz-Signature", valid_21626464
  var valid_21626465 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626465 = validateParameter(valid_21626465, JString, required = false,
                                   default = nil)
  if valid_21626465 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626465
  var valid_21626466 = header.getOrDefault("X-Amz-Credential")
  valid_21626466 = validateParameter(valid_21626466, JString, required = false,
                                   default = nil)
  if valid_21626466 != nil:
    section.add "X-Amz-Credential", valid_21626466
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626467: Call_ListCertificates_21626454; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ## 
  let valid = call_21626467.validator(path, query, header, formData, body, _)
  let scheme = call_21626467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626467.makeUrl(scheme.get, call_21626467.host, call_21626467.base,
                               call_21626467.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626467, uri, valid, _)

proc call*(call_21626468: Call_ListCertificates_21626454; marker: string = "";
          pageSize: int = 0; isAscendingOrder: bool = false): Recallable =
  ## listCertificates
  ## <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  ##   isAscendingOrder: bool
  ##                   : Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
  var query_21626469 = newJObject()
  add(query_21626469, "marker", newJString(marker))
  add(query_21626469, "pageSize", newJInt(pageSize))
  add(query_21626469, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21626468.call(nil, query_21626469, nil, nil, nil)

var listCertificates* = Call_ListCertificates_21626454(name: "listCertificates",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/certificates",
    validator: validate_ListCertificates_21626455, base: "/",
    makeUrl: url_ListCertificates_21626456, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDomainConfiguration_21626500 = ref object of OpenApiRestCall_21625435
proc url_UpdateDomainConfiguration_21626502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
        "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
               (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDomainConfiguration_21626501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
  ##                          : The name of the domain configuration to be updated.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_21626503 = path.getOrDefault("domainConfigurationName")
  valid_21626503 = validateParameter(valid_21626503, JString, required = true,
                                   default = nil)
  if valid_21626503 != nil:
    section.add "domainConfigurationName", valid_21626503
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626504 = header.getOrDefault("X-Amz-Date")
  valid_21626504 = validateParameter(valid_21626504, JString, required = false,
                                   default = nil)
  if valid_21626504 != nil:
    section.add "X-Amz-Date", valid_21626504
  var valid_21626505 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626505 = validateParameter(valid_21626505, JString, required = false,
                                   default = nil)
  if valid_21626505 != nil:
    section.add "X-Amz-Security-Token", valid_21626505
  var valid_21626506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626506 = validateParameter(valid_21626506, JString, required = false,
                                   default = nil)
  if valid_21626506 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626506
  var valid_21626507 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626507 = validateParameter(valid_21626507, JString, required = false,
                                   default = nil)
  if valid_21626507 != nil:
    section.add "X-Amz-Algorithm", valid_21626507
  var valid_21626508 = header.getOrDefault("X-Amz-Signature")
  valid_21626508 = validateParameter(valid_21626508, JString, required = false,
                                   default = nil)
  if valid_21626508 != nil:
    section.add "X-Amz-Signature", valid_21626508
  var valid_21626509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626509 = validateParameter(valid_21626509, JString, required = false,
                                   default = nil)
  if valid_21626509 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626509
  var valid_21626510 = header.getOrDefault("X-Amz-Credential")
  valid_21626510 = validateParameter(valid_21626510, JString, required = false,
                                   default = nil)
  if valid_21626510 != nil:
    section.add "X-Amz-Credential", valid_21626510
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626512: Call_UpdateDomainConfiguration_21626500;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  let valid = call_21626512.validator(path, query, header, formData, body, _)
  let scheme = call_21626512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626512.makeUrl(scheme.get, call_21626512.host, call_21626512.base,
                               call_21626512.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626512, uri, valid, _)

proc call*(call_21626513: Call_UpdateDomainConfiguration_21626500;
          domainConfigurationName: string; body: JsonNode): Recallable =
  ## updateDomainConfiguration
  ## <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   domainConfigurationName: string (required)
  ##                          : The name of the domain configuration to be updated.
  ##   body: JObject (required)
  var path_21626514 = newJObject()
  var body_21626515 = newJObject()
  add(path_21626514, "domainConfigurationName",
      newJString(domainConfigurationName))
  if body != nil:
    body_21626515 = body
  result = call_21626513.call(path_21626514, nil, nil, nil, body_21626515)

var updateDomainConfiguration* = Call_UpdateDomainConfiguration_21626500(
    name: "updateDomainConfiguration", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_UpdateDomainConfiguration_21626501, base: "/",
    makeUrl: url_UpdateDomainConfiguration_21626502,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDomainConfiguration_21626516 = ref object of OpenApiRestCall_21625435
proc url_CreateDomainConfiguration_21626518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
        "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
               (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateDomainConfiguration_21626517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
  ##                          : The name of the domain configuration. This value must be unique to a region.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_21626519 = path.getOrDefault("domainConfigurationName")
  valid_21626519 = validateParameter(valid_21626519, JString, required = true,
                                   default = nil)
  if valid_21626519 != nil:
    section.add "domainConfigurationName", valid_21626519
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626520 = header.getOrDefault("X-Amz-Date")
  valid_21626520 = validateParameter(valid_21626520, JString, required = false,
                                   default = nil)
  if valid_21626520 != nil:
    section.add "X-Amz-Date", valid_21626520
  var valid_21626521 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626521 = validateParameter(valid_21626521, JString, required = false,
                                   default = nil)
  if valid_21626521 != nil:
    section.add "X-Amz-Security-Token", valid_21626521
  var valid_21626522 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626522 = validateParameter(valid_21626522, JString, required = false,
                                   default = nil)
  if valid_21626522 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626522
  var valid_21626523 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626523 = validateParameter(valid_21626523, JString, required = false,
                                   default = nil)
  if valid_21626523 != nil:
    section.add "X-Amz-Algorithm", valid_21626523
  var valid_21626524 = header.getOrDefault("X-Amz-Signature")
  valid_21626524 = validateParameter(valid_21626524, JString, required = false,
                                   default = nil)
  if valid_21626524 != nil:
    section.add "X-Amz-Signature", valid_21626524
  var valid_21626525 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626525 = validateParameter(valid_21626525, JString, required = false,
                                   default = nil)
  if valid_21626525 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626525
  var valid_21626526 = header.getOrDefault("X-Amz-Credential")
  valid_21626526 = validateParameter(valid_21626526, JString, required = false,
                                   default = nil)
  if valid_21626526 != nil:
    section.add "X-Amz-Credential", valid_21626526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626528: Call_CreateDomainConfiguration_21626516;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  let valid = call_21626528.validator(path, query, header, formData, body, _)
  let scheme = call_21626528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626528.makeUrl(scheme.get, call_21626528.host, call_21626528.base,
                               call_21626528.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626528, uri, valid, _)

proc call*(call_21626529: Call_CreateDomainConfiguration_21626516;
          domainConfigurationName: string; body: JsonNode): Recallable =
  ## createDomainConfiguration
  ## <p>Creates a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   domainConfigurationName: string (required)
  ##                          : The name of the domain configuration. This value must be unique to a region.
  ##   body: JObject (required)
  var path_21626530 = newJObject()
  var body_21626531 = newJObject()
  add(path_21626530, "domainConfigurationName",
      newJString(domainConfigurationName))
  if body != nil:
    body_21626531 = body
  result = call_21626529.call(path_21626530, nil, nil, nil, body_21626531)

var createDomainConfiguration* = Call_CreateDomainConfiguration_21626516(
    name: "createDomainConfiguration", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_CreateDomainConfiguration_21626517, base: "/",
    makeUrl: url_CreateDomainConfiguration_21626518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeDomainConfiguration_21626486 = ref object of OpenApiRestCall_21625435
proc url_DescribeDomainConfiguration_21626488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
        "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
               (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeDomainConfiguration_21626487(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Gets summary information about a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
  ##                          : The name of the domain configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_21626489 = path.getOrDefault("domainConfigurationName")
  valid_21626489 = validateParameter(valid_21626489, JString, required = true,
                                   default = nil)
  if valid_21626489 != nil:
    section.add "domainConfigurationName", valid_21626489
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626490 = header.getOrDefault("X-Amz-Date")
  valid_21626490 = validateParameter(valid_21626490, JString, required = false,
                                   default = nil)
  if valid_21626490 != nil:
    section.add "X-Amz-Date", valid_21626490
  var valid_21626491 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626491 = validateParameter(valid_21626491, JString, required = false,
                                   default = nil)
  if valid_21626491 != nil:
    section.add "X-Amz-Security-Token", valid_21626491
  var valid_21626492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626492 = validateParameter(valid_21626492, JString, required = false,
                                   default = nil)
  if valid_21626492 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626492
  var valid_21626493 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626493 = validateParameter(valid_21626493, JString, required = false,
                                   default = nil)
  if valid_21626493 != nil:
    section.add "X-Amz-Algorithm", valid_21626493
  var valid_21626494 = header.getOrDefault("X-Amz-Signature")
  valid_21626494 = validateParameter(valid_21626494, JString, required = false,
                                   default = nil)
  if valid_21626494 != nil:
    section.add "X-Amz-Signature", valid_21626494
  var valid_21626495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626495 = validateParameter(valid_21626495, JString, required = false,
                                   default = nil)
  if valid_21626495 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626495
  var valid_21626496 = header.getOrDefault("X-Amz-Credential")
  valid_21626496 = validateParameter(valid_21626496, JString, required = false,
                                   default = nil)
  if valid_21626496 != nil:
    section.add "X-Amz-Credential", valid_21626496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626497: Call_DescribeDomainConfiguration_21626486;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets summary information about a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  let valid = call_21626497.validator(path, query, header, formData, body, _)
  let scheme = call_21626497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626497.makeUrl(scheme.get, call_21626497.host, call_21626497.base,
                               call_21626497.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626497, uri, valid, _)

proc call*(call_21626498: Call_DescribeDomainConfiguration_21626486;
          domainConfigurationName: string): Recallable =
  ## describeDomainConfiguration
  ## <p>Gets summary information about a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   domainConfigurationName: string (required)
  ##                          : The name of the domain configuration.
  var path_21626499 = newJObject()
  add(path_21626499, "domainConfigurationName",
      newJString(domainConfigurationName))
  result = call_21626498.call(path_21626499, nil, nil, nil, nil)

var describeDomainConfiguration* = Call_DescribeDomainConfiguration_21626486(
    name: "describeDomainConfiguration", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_DescribeDomainConfiguration_21626487, base: "/",
    makeUrl: url_DescribeDomainConfiguration_21626488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDomainConfiguration_21626532 = ref object of OpenApiRestCall_21625435
proc url_DeleteDomainConfiguration_21626534(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
        "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
               (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDomainConfiguration_21626533(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
  ##                          : The name of the domain configuration to be deleted.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_21626535 = path.getOrDefault("domainConfigurationName")
  valid_21626535 = validateParameter(valid_21626535, JString, required = true,
                                   default = nil)
  if valid_21626535 != nil:
    section.add "domainConfigurationName", valid_21626535
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626536 = header.getOrDefault("X-Amz-Date")
  valid_21626536 = validateParameter(valid_21626536, JString, required = false,
                                   default = nil)
  if valid_21626536 != nil:
    section.add "X-Amz-Date", valid_21626536
  var valid_21626537 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626537 = validateParameter(valid_21626537, JString, required = false,
                                   default = nil)
  if valid_21626537 != nil:
    section.add "X-Amz-Security-Token", valid_21626537
  var valid_21626538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626538 = validateParameter(valid_21626538, JString, required = false,
                                   default = nil)
  if valid_21626538 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626538
  var valid_21626539 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626539 = validateParameter(valid_21626539, JString, required = false,
                                   default = nil)
  if valid_21626539 != nil:
    section.add "X-Amz-Algorithm", valid_21626539
  var valid_21626540 = header.getOrDefault("X-Amz-Signature")
  valid_21626540 = validateParameter(valid_21626540, JString, required = false,
                                   default = nil)
  if valid_21626540 != nil:
    section.add "X-Amz-Signature", valid_21626540
  var valid_21626541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626541 = validateParameter(valid_21626541, JString, required = false,
                                   default = nil)
  if valid_21626541 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626541
  var valid_21626542 = header.getOrDefault("X-Amz-Credential")
  valid_21626542 = validateParameter(valid_21626542, JString, required = false,
                                   default = nil)
  if valid_21626542 != nil:
    section.add "X-Amz-Credential", valid_21626542
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626543: Call_DeleteDomainConfiguration_21626532;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  let valid = call_21626543.validator(path, query, header, formData, body, _)
  let scheme = call_21626543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626543.makeUrl(scheme.get, call_21626543.host, call_21626543.base,
                               call_21626543.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626543, uri, valid, _)

proc call*(call_21626544: Call_DeleteDomainConfiguration_21626532;
          domainConfigurationName: string): Recallable =
  ## deleteDomainConfiguration
  ## <p>Deletes the specified domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   domainConfigurationName: string (required)
  ##                          : The name of the domain configuration to be deleted.
  var path_21626545 = newJObject()
  add(path_21626545, "domainConfigurationName",
      newJString(domainConfigurationName))
  result = call_21626544.call(path_21626545, nil, nil, nil, nil)

var deleteDomainConfiguration* = Call_DeleteDomainConfiguration_21626532(
    name: "deleteDomainConfiguration", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_DeleteDomainConfiguration_21626533, base: "/",
    makeUrl: url_DeleteDomainConfiguration_21626534,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDynamicThingGroup_21626546 = ref object of OpenApiRestCall_21625435
proc url_CreateDynamicThingGroup_21626548(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/dynamic-thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateDynamicThingGroup_21626547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a dynamic thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The dynamic thing group name to create.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21626549 = path.getOrDefault("thingGroupName")
  valid_21626549 = validateParameter(valid_21626549, JString, required = true,
                                   default = nil)
  if valid_21626549 != nil:
    section.add "thingGroupName", valid_21626549
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626550 = header.getOrDefault("X-Amz-Date")
  valid_21626550 = validateParameter(valid_21626550, JString, required = false,
                                   default = nil)
  if valid_21626550 != nil:
    section.add "X-Amz-Date", valid_21626550
  var valid_21626551 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626551 = validateParameter(valid_21626551, JString, required = false,
                                   default = nil)
  if valid_21626551 != nil:
    section.add "X-Amz-Security-Token", valid_21626551
  var valid_21626552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626552 = validateParameter(valid_21626552, JString, required = false,
                                   default = nil)
  if valid_21626552 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626552
  var valid_21626553 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626553 = validateParameter(valid_21626553, JString, required = false,
                                   default = nil)
  if valid_21626553 != nil:
    section.add "X-Amz-Algorithm", valid_21626553
  var valid_21626554 = header.getOrDefault("X-Amz-Signature")
  valid_21626554 = validateParameter(valid_21626554, JString, required = false,
                                   default = nil)
  if valid_21626554 != nil:
    section.add "X-Amz-Signature", valid_21626554
  var valid_21626555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626555 = validateParameter(valid_21626555, JString, required = false,
                                   default = nil)
  if valid_21626555 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626555
  var valid_21626556 = header.getOrDefault("X-Amz-Credential")
  valid_21626556 = validateParameter(valid_21626556, JString, required = false,
                                   default = nil)
  if valid_21626556 != nil:
    section.add "X-Amz-Credential", valid_21626556
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626558: Call_CreateDynamicThingGroup_21626546;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a dynamic thing group.
  ## 
  let valid = call_21626558.validator(path, query, header, formData, body, _)
  let scheme = call_21626558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626558.makeUrl(scheme.get, call_21626558.host, call_21626558.base,
                               call_21626558.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626558, uri, valid, _)

proc call*(call_21626559: Call_CreateDynamicThingGroup_21626546; body: JsonNode;
          thingGroupName: string): Recallable =
  ## createDynamicThingGroup
  ## Creates a dynamic thing group.
  ##   body: JObject (required)
  ##   thingGroupName: string (required)
  ##                 : The dynamic thing group name to create.
  var path_21626560 = newJObject()
  var body_21626561 = newJObject()
  if body != nil:
    body_21626561 = body
  add(path_21626560, "thingGroupName", newJString(thingGroupName))
  result = call_21626559.call(path_21626560, nil, nil, nil, body_21626561)

var createDynamicThingGroup* = Call_CreateDynamicThingGroup_21626546(
    name: "createDynamicThingGroup", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/dynamic-thing-groups/{thingGroupName}",
    validator: validate_CreateDynamicThingGroup_21626547, base: "/",
    makeUrl: url_CreateDynamicThingGroup_21626548,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDynamicThingGroup_21626578 = ref object of OpenApiRestCall_21625435
proc url_UpdateDynamicThingGroup_21626580(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/dynamic-thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDynamicThingGroup_21626579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a dynamic thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The name of the dynamic thing group to update.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21626581 = path.getOrDefault("thingGroupName")
  valid_21626581 = validateParameter(valid_21626581, JString, required = true,
                                   default = nil)
  if valid_21626581 != nil:
    section.add "thingGroupName", valid_21626581
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626582 = header.getOrDefault("X-Amz-Date")
  valid_21626582 = validateParameter(valid_21626582, JString, required = false,
                                   default = nil)
  if valid_21626582 != nil:
    section.add "X-Amz-Date", valid_21626582
  var valid_21626583 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626583 = validateParameter(valid_21626583, JString, required = false,
                                   default = nil)
  if valid_21626583 != nil:
    section.add "X-Amz-Security-Token", valid_21626583
  var valid_21626584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626584 = validateParameter(valid_21626584, JString, required = false,
                                   default = nil)
  if valid_21626584 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626584
  var valid_21626585 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626585 = validateParameter(valid_21626585, JString, required = false,
                                   default = nil)
  if valid_21626585 != nil:
    section.add "X-Amz-Algorithm", valid_21626585
  var valid_21626586 = header.getOrDefault("X-Amz-Signature")
  valid_21626586 = validateParameter(valid_21626586, JString, required = false,
                                   default = nil)
  if valid_21626586 != nil:
    section.add "X-Amz-Signature", valid_21626586
  var valid_21626587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626587 = validateParameter(valid_21626587, JString, required = false,
                                   default = nil)
  if valid_21626587 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626587
  var valid_21626588 = header.getOrDefault("X-Amz-Credential")
  valid_21626588 = validateParameter(valid_21626588, JString, required = false,
                                   default = nil)
  if valid_21626588 != nil:
    section.add "X-Amz-Credential", valid_21626588
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626590: Call_UpdateDynamicThingGroup_21626578;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a dynamic thing group.
  ## 
  let valid = call_21626590.validator(path, query, header, formData, body, _)
  let scheme = call_21626590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626590.makeUrl(scheme.get, call_21626590.host, call_21626590.base,
                               call_21626590.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626590, uri, valid, _)

proc call*(call_21626591: Call_UpdateDynamicThingGroup_21626578; body: JsonNode;
          thingGroupName: string): Recallable =
  ## updateDynamicThingGroup
  ## Updates a dynamic thing group.
  ##   body: JObject (required)
  ##   thingGroupName: string (required)
  ##                 : The name of the dynamic thing group to update.
  var path_21626592 = newJObject()
  var body_21626593 = newJObject()
  if body != nil:
    body_21626593 = body
  add(path_21626592, "thingGroupName", newJString(thingGroupName))
  result = call_21626591.call(path_21626592, nil, nil, nil, body_21626593)

var updateDynamicThingGroup* = Call_UpdateDynamicThingGroup_21626578(
    name: "updateDynamicThingGroup", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/dynamic-thing-groups/{thingGroupName}",
    validator: validate_UpdateDynamicThingGroup_21626579, base: "/",
    makeUrl: url_UpdateDynamicThingGroup_21626580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDynamicThingGroup_21626562 = ref object of OpenApiRestCall_21625435
proc url_DeleteDynamicThingGroup_21626564(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/dynamic-thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDynamicThingGroup_21626563(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a dynamic thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The name of the dynamic thing group to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21626565 = path.getOrDefault("thingGroupName")
  valid_21626565 = validateParameter(valid_21626565, JString, required = true,
                                   default = nil)
  if valid_21626565 != nil:
    section.add "thingGroupName", valid_21626565
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
  ##                  : The expected version of the dynamic thing group to delete.
  section = newJObject()
  var valid_21626566 = query.getOrDefault("expectedVersion")
  valid_21626566 = validateParameter(valid_21626566, JInt, required = false,
                                   default = nil)
  if valid_21626566 != nil:
    section.add "expectedVersion", valid_21626566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626567 = header.getOrDefault("X-Amz-Date")
  valid_21626567 = validateParameter(valid_21626567, JString, required = false,
                                   default = nil)
  if valid_21626567 != nil:
    section.add "X-Amz-Date", valid_21626567
  var valid_21626568 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626568 = validateParameter(valid_21626568, JString, required = false,
                                   default = nil)
  if valid_21626568 != nil:
    section.add "X-Amz-Security-Token", valid_21626568
  var valid_21626569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626569 = validateParameter(valid_21626569, JString, required = false,
                                   default = nil)
  if valid_21626569 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626569
  var valid_21626570 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626570 = validateParameter(valid_21626570, JString, required = false,
                                   default = nil)
  if valid_21626570 != nil:
    section.add "X-Amz-Algorithm", valid_21626570
  var valid_21626571 = header.getOrDefault("X-Amz-Signature")
  valid_21626571 = validateParameter(valid_21626571, JString, required = false,
                                   default = nil)
  if valid_21626571 != nil:
    section.add "X-Amz-Signature", valid_21626571
  var valid_21626572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626572 = validateParameter(valid_21626572, JString, required = false,
                                   default = nil)
  if valid_21626572 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626572
  var valid_21626573 = header.getOrDefault("X-Amz-Credential")
  valid_21626573 = validateParameter(valid_21626573, JString, required = false,
                                   default = nil)
  if valid_21626573 != nil:
    section.add "X-Amz-Credential", valid_21626573
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626574: Call_DeleteDynamicThingGroup_21626562;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a dynamic thing group.
  ## 
  let valid = call_21626574.validator(path, query, header, formData, body, _)
  let scheme = call_21626574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626574.makeUrl(scheme.get, call_21626574.host, call_21626574.base,
                               call_21626574.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626574, uri, valid, _)

proc call*(call_21626575: Call_DeleteDynamicThingGroup_21626562;
          thingGroupName: string; expectedVersion: int = 0): Recallable =
  ## deleteDynamicThingGroup
  ## Deletes a dynamic thing group.
  ##   expectedVersion: int
  ##                  : The expected version of the dynamic thing group to delete.
  ##   thingGroupName: string (required)
  ##                 : The name of the dynamic thing group to delete.
  var path_21626576 = newJObject()
  var query_21626577 = newJObject()
  add(query_21626577, "expectedVersion", newJInt(expectedVersion))
  add(path_21626576, "thingGroupName", newJString(thingGroupName))
  result = call_21626575.call(path_21626576, query_21626577, nil, nil, nil)

var deleteDynamicThingGroup* = Call_DeleteDynamicThingGroup_21626562(
    name: "deleteDynamicThingGroup", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/dynamic-thing-groups/{thingGroupName}",
    validator: validate_DeleteDynamicThingGroup_21626563, base: "/",
    makeUrl: url_DeleteDynamicThingGroup_21626564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateJob_21626608 = ref object of OpenApiRestCall_21625435
proc url_CreateJob_21626610(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateJob_21626609(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a job.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21626611 = path.getOrDefault("jobId")
  valid_21626611 = validateParameter(valid_21626611, JString, required = true,
                                   default = nil)
  if valid_21626611 != nil:
    section.add "jobId", valid_21626611
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626612 = header.getOrDefault("X-Amz-Date")
  valid_21626612 = validateParameter(valid_21626612, JString, required = false,
                                   default = nil)
  if valid_21626612 != nil:
    section.add "X-Amz-Date", valid_21626612
  var valid_21626613 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626613 = validateParameter(valid_21626613, JString, required = false,
                                   default = nil)
  if valid_21626613 != nil:
    section.add "X-Amz-Security-Token", valid_21626613
  var valid_21626614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626614 = validateParameter(valid_21626614, JString, required = false,
                                   default = nil)
  if valid_21626614 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626614
  var valid_21626615 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626615 = validateParameter(valid_21626615, JString, required = false,
                                   default = nil)
  if valid_21626615 != nil:
    section.add "X-Amz-Algorithm", valid_21626615
  var valid_21626616 = header.getOrDefault("X-Amz-Signature")
  valid_21626616 = validateParameter(valid_21626616, JString, required = false,
                                   default = nil)
  if valid_21626616 != nil:
    section.add "X-Amz-Signature", valid_21626616
  var valid_21626617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626617 = validateParameter(valid_21626617, JString, required = false,
                                   default = nil)
  if valid_21626617 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626617
  var valid_21626618 = header.getOrDefault("X-Amz-Credential")
  valid_21626618 = validateParameter(valid_21626618, JString, required = false,
                                   default = nil)
  if valid_21626618 != nil:
    section.add "X-Amz-Credential", valid_21626618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626620: Call_CreateJob_21626608; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a job.
  ## 
  let valid = call_21626620.validator(path, query, header, formData, body, _)
  let scheme = call_21626620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626620.makeUrl(scheme.get, call_21626620.host, call_21626620.base,
                               call_21626620.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626620, uri, valid, _)

proc call*(call_21626621: Call_CreateJob_21626608; jobId: string; body: JsonNode): Recallable =
  ## createJob
  ## Creates a job.
  ##   jobId: string (required)
  ##        : A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.
  ##   body: JObject (required)
  var path_21626622 = newJObject()
  var body_21626623 = newJObject()
  add(path_21626622, "jobId", newJString(jobId))
  if body != nil:
    body_21626623 = body
  result = call_21626621.call(path_21626622, nil, nil, nil, body_21626623)

var createJob* = Call_CreateJob_21626608(name: "createJob", meth: HttpMethod.HttpPut,
                                      host: "iot.amazonaws.com",
                                      route: "/jobs/{jobId}",
                                      validator: validate_CreateJob_21626609,
                                      base: "/", makeUrl: url_CreateJob_21626610,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeJob_21626594 = ref object of OpenApiRestCall_21625435
proc url_DescribeJob_21626596(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeJob_21626595(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a job.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21626597 = path.getOrDefault("jobId")
  valid_21626597 = validateParameter(valid_21626597, JString, required = true,
                                   default = nil)
  if valid_21626597 != nil:
    section.add "jobId", valid_21626597
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626598 = header.getOrDefault("X-Amz-Date")
  valid_21626598 = validateParameter(valid_21626598, JString, required = false,
                                   default = nil)
  if valid_21626598 != nil:
    section.add "X-Amz-Date", valid_21626598
  var valid_21626599 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626599 = validateParameter(valid_21626599, JString, required = false,
                                   default = nil)
  if valid_21626599 != nil:
    section.add "X-Amz-Security-Token", valid_21626599
  var valid_21626600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626600 = validateParameter(valid_21626600, JString, required = false,
                                   default = nil)
  if valid_21626600 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626600
  var valid_21626601 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626601 = validateParameter(valid_21626601, JString, required = false,
                                   default = nil)
  if valid_21626601 != nil:
    section.add "X-Amz-Algorithm", valid_21626601
  var valid_21626602 = header.getOrDefault("X-Amz-Signature")
  valid_21626602 = validateParameter(valid_21626602, JString, required = false,
                                   default = nil)
  if valid_21626602 != nil:
    section.add "X-Amz-Signature", valid_21626602
  var valid_21626603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626603 = validateParameter(valid_21626603, JString, required = false,
                                   default = nil)
  if valid_21626603 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626603
  var valid_21626604 = header.getOrDefault("X-Amz-Credential")
  valid_21626604 = validateParameter(valid_21626604, JString, required = false,
                                   default = nil)
  if valid_21626604 != nil:
    section.add "X-Amz-Credential", valid_21626604
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626605: Call_DescribeJob_21626594; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a job.
  ## 
  let valid = call_21626605.validator(path, query, header, formData, body, _)
  let scheme = call_21626605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626605.makeUrl(scheme.get, call_21626605.host, call_21626605.base,
                               call_21626605.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626605, uri, valid, _)

proc call*(call_21626606: Call_DescribeJob_21626594; jobId: string): Recallable =
  ## describeJob
  ## Describes a job.
  ##   jobId: string (required)
  ##        : The unique identifier you assigned to this job when it was created.
  var path_21626607 = newJObject()
  add(path_21626607, "jobId", newJString(jobId))
  result = call_21626606.call(path_21626607, nil, nil, nil, nil)

var describeJob* = Call_DescribeJob_21626594(name: "describeJob",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/jobs/{jobId}",
    validator: validate_DescribeJob_21626595, base: "/", makeUrl: url_DescribeJob_21626596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateJob_21626640 = ref object of OpenApiRestCall_21625435
proc url_UpdateJob_21626642(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateJob_21626641(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates supported fields of the specified job.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : The ID of the job to be updated.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21626643 = path.getOrDefault("jobId")
  valid_21626643 = validateParameter(valid_21626643, JString, required = true,
                                   default = nil)
  if valid_21626643 != nil:
    section.add "jobId", valid_21626643
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626644 = header.getOrDefault("X-Amz-Date")
  valid_21626644 = validateParameter(valid_21626644, JString, required = false,
                                   default = nil)
  if valid_21626644 != nil:
    section.add "X-Amz-Date", valid_21626644
  var valid_21626645 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626645 = validateParameter(valid_21626645, JString, required = false,
                                   default = nil)
  if valid_21626645 != nil:
    section.add "X-Amz-Security-Token", valid_21626645
  var valid_21626646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626646 = validateParameter(valid_21626646, JString, required = false,
                                   default = nil)
  if valid_21626646 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626646
  var valid_21626647 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626647 = validateParameter(valid_21626647, JString, required = false,
                                   default = nil)
  if valid_21626647 != nil:
    section.add "X-Amz-Algorithm", valid_21626647
  var valid_21626648 = header.getOrDefault("X-Amz-Signature")
  valid_21626648 = validateParameter(valid_21626648, JString, required = false,
                                   default = nil)
  if valid_21626648 != nil:
    section.add "X-Amz-Signature", valid_21626648
  var valid_21626649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626649 = validateParameter(valid_21626649, JString, required = false,
                                   default = nil)
  if valid_21626649 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626649
  var valid_21626650 = header.getOrDefault("X-Amz-Credential")
  valid_21626650 = validateParameter(valid_21626650, JString, required = false,
                                   default = nil)
  if valid_21626650 != nil:
    section.add "X-Amz-Credential", valid_21626650
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626652: Call_UpdateJob_21626640; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates supported fields of the specified job.
  ## 
  let valid = call_21626652.validator(path, query, header, formData, body, _)
  let scheme = call_21626652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626652.makeUrl(scheme.get, call_21626652.host, call_21626652.base,
                               call_21626652.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626652, uri, valid, _)

proc call*(call_21626653: Call_UpdateJob_21626640; jobId: string; body: JsonNode): Recallable =
  ## updateJob
  ## Updates supported fields of the specified job.
  ##   jobId: string (required)
  ##        : The ID of the job to be updated.
  ##   body: JObject (required)
  var path_21626654 = newJObject()
  var body_21626655 = newJObject()
  add(path_21626654, "jobId", newJString(jobId))
  if body != nil:
    body_21626655 = body
  result = call_21626653.call(path_21626654, nil, nil, nil, body_21626655)

var updateJob* = Call_UpdateJob_21626640(name: "updateJob",
                                      meth: HttpMethod.HttpPatch,
                                      host: "iot.amazonaws.com",
                                      route: "/jobs/{jobId}",
                                      validator: validate_UpdateJob_21626641,
                                      base: "/", makeUrl: url_UpdateJob_21626642,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteJob_21626624 = ref object of OpenApiRestCall_21625435
proc url_DeleteJob_21626626(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteJob_21626625(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : <p>The ID of the job to be deleted.</p> <p>After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.</p>
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21626627 = path.getOrDefault("jobId")
  valid_21626627 = validateParameter(valid_21626627, JString, required = true,
                                   default = nil)
  if valid_21626627 != nil:
    section.add "jobId", valid_21626627
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
  ##        : <p>(Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state.</p> </note>
  section = newJObject()
  var valid_21626628 = query.getOrDefault("force")
  valid_21626628 = validateParameter(valid_21626628, JBool, required = false,
                                   default = nil)
  if valid_21626628 != nil:
    section.add "force", valid_21626628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626629 = header.getOrDefault("X-Amz-Date")
  valid_21626629 = validateParameter(valid_21626629, JString, required = false,
                                   default = nil)
  if valid_21626629 != nil:
    section.add "X-Amz-Date", valid_21626629
  var valid_21626630 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626630 = validateParameter(valid_21626630, JString, required = false,
                                   default = nil)
  if valid_21626630 != nil:
    section.add "X-Amz-Security-Token", valid_21626630
  var valid_21626631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626631 = validateParameter(valid_21626631, JString, required = false,
                                   default = nil)
  if valid_21626631 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626631
  var valid_21626632 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626632 = validateParameter(valid_21626632, JString, required = false,
                                   default = nil)
  if valid_21626632 != nil:
    section.add "X-Amz-Algorithm", valid_21626632
  var valid_21626633 = header.getOrDefault("X-Amz-Signature")
  valid_21626633 = validateParameter(valid_21626633, JString, required = false,
                                   default = nil)
  if valid_21626633 != nil:
    section.add "X-Amz-Signature", valid_21626633
  var valid_21626634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626634 = validateParameter(valid_21626634, JString, required = false,
                                   default = nil)
  if valid_21626634 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626634
  var valid_21626635 = header.getOrDefault("X-Amz-Credential")
  valid_21626635 = validateParameter(valid_21626635, JString, required = false,
                                   default = nil)
  if valid_21626635 != nil:
    section.add "X-Amz-Credential", valid_21626635
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626636: Call_DeleteJob_21626624; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p>
  ## 
  let valid = call_21626636.validator(path, query, header, formData, body, _)
  let scheme = call_21626636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626636.makeUrl(scheme.get, call_21626636.host, call_21626636.base,
                               call_21626636.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626636, uri, valid, _)

proc call*(call_21626637: Call_DeleteJob_21626624; jobId: string; force: bool = false): Recallable =
  ## deleteJob
  ## <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p>
  ##   force: bool
  ##        : <p>(Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state.</p> </note>
  ##   jobId: string (required)
  ##        : <p>The ID of the job to be deleted.</p> <p>After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.</p>
  var path_21626638 = newJObject()
  var query_21626639 = newJObject()
  add(query_21626639, "force", newJBool(force))
  add(path_21626638, "jobId", newJString(jobId))
  result = call_21626637.call(path_21626638, query_21626639, nil, nil, nil)

var deleteJob* = Call_DeleteJob_21626624(name: "deleteJob",
                                      meth: HttpMethod.HttpDelete,
                                      host: "iot.amazonaws.com",
                                      route: "/jobs/{jobId}",
                                      validator: validate_DeleteJob_21626625,
                                      base: "/", makeUrl: url_DeleteJob_21626626,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateKeysAndCertificate_21626656 = ref object of OpenApiRestCall_21625435
proc url_CreateKeysAndCertificate_21626658(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateKeysAndCertificate_21626657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
  ##              : Specifies whether the certificate is active.
  section = newJObject()
  var valid_21626659 = query.getOrDefault("setAsActive")
  valid_21626659 = validateParameter(valid_21626659, JBool, required = false,
                                   default = nil)
  if valid_21626659 != nil:
    section.add "setAsActive", valid_21626659
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626660 = header.getOrDefault("X-Amz-Date")
  valid_21626660 = validateParameter(valid_21626660, JString, required = false,
                                   default = nil)
  if valid_21626660 != nil:
    section.add "X-Amz-Date", valid_21626660
  var valid_21626661 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626661 = validateParameter(valid_21626661, JString, required = false,
                                   default = nil)
  if valid_21626661 != nil:
    section.add "X-Amz-Security-Token", valid_21626661
  var valid_21626662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626662 = validateParameter(valid_21626662, JString, required = false,
                                   default = nil)
  if valid_21626662 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626662
  var valid_21626663 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626663 = validateParameter(valid_21626663, JString, required = false,
                                   default = nil)
  if valid_21626663 != nil:
    section.add "X-Amz-Algorithm", valid_21626663
  var valid_21626664 = header.getOrDefault("X-Amz-Signature")
  valid_21626664 = validateParameter(valid_21626664, JString, required = false,
                                   default = nil)
  if valid_21626664 != nil:
    section.add "X-Amz-Signature", valid_21626664
  var valid_21626665 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626665 = validateParameter(valid_21626665, JString, required = false,
                                   default = nil)
  if valid_21626665 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626665
  var valid_21626666 = header.getOrDefault("X-Amz-Credential")
  valid_21626666 = validateParameter(valid_21626666, JString, required = false,
                                   default = nil)
  if valid_21626666 != nil:
    section.add "X-Amz-Credential", valid_21626666
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626667: Call_CreateKeysAndCertificate_21626656;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
  ## 
  let valid = call_21626667.validator(path, query, header, formData, body, _)
  let scheme = call_21626667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626667.makeUrl(scheme.get, call_21626667.host, call_21626667.base,
                               call_21626667.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626667, uri, valid, _)

proc call*(call_21626668: Call_CreateKeysAndCertificate_21626656;
          setAsActive: bool = false): Recallable =
  ## createKeysAndCertificate
  ## <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
  ##   setAsActive: bool
  ##              : Specifies whether the certificate is active.
  var query_21626669 = newJObject()
  add(query_21626669, "setAsActive", newJBool(setAsActive))
  result = call_21626668.call(nil, query_21626669, nil, nil, nil)

var createKeysAndCertificate* = Call_CreateKeysAndCertificate_21626656(
    name: "createKeysAndCertificate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/keys-and-certificate",
    validator: validate_CreateKeysAndCertificate_21626657, base: "/",
    makeUrl: url_CreateKeysAndCertificate_21626658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateMitigationAction_21626684 = ref object of OpenApiRestCall_21625435
proc url_CreateMitigationAction_21626686(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
               (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateMitigationAction_21626685(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
  ##             : A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `actionName` field"
  var valid_21626687 = path.getOrDefault("actionName")
  valid_21626687 = validateParameter(valid_21626687, JString, required = true,
                                   default = nil)
  if valid_21626687 != nil:
    section.add "actionName", valid_21626687
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626688 = header.getOrDefault("X-Amz-Date")
  valid_21626688 = validateParameter(valid_21626688, JString, required = false,
                                   default = nil)
  if valid_21626688 != nil:
    section.add "X-Amz-Date", valid_21626688
  var valid_21626689 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626689 = validateParameter(valid_21626689, JString, required = false,
                                   default = nil)
  if valid_21626689 != nil:
    section.add "X-Amz-Security-Token", valid_21626689
  var valid_21626690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626690 = validateParameter(valid_21626690, JString, required = false,
                                   default = nil)
  if valid_21626690 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626690
  var valid_21626691 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626691 = validateParameter(valid_21626691, JString, required = false,
                                   default = nil)
  if valid_21626691 != nil:
    section.add "X-Amz-Algorithm", valid_21626691
  var valid_21626692 = header.getOrDefault("X-Amz-Signature")
  valid_21626692 = validateParameter(valid_21626692, JString, required = false,
                                   default = nil)
  if valid_21626692 != nil:
    section.add "X-Amz-Signature", valid_21626692
  var valid_21626693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626693 = validateParameter(valid_21626693, JString, required = false,
                                   default = nil)
  if valid_21626693 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626693
  var valid_21626694 = header.getOrDefault("X-Amz-Credential")
  valid_21626694 = validateParameter(valid_21626694, JString, required = false,
                                   default = nil)
  if valid_21626694 != nil:
    section.add "X-Amz-Credential", valid_21626694
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626696: Call_CreateMitigationAction_21626684;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.
  ## 
  let valid = call_21626696.validator(path, query, header, formData, body, _)
  let scheme = call_21626696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626696.makeUrl(scheme.get, call_21626696.host, call_21626696.base,
                               call_21626696.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626696, uri, valid, _)

proc call*(call_21626697: Call_CreateMitigationAction_21626684; actionName: string;
          body: JsonNode): Recallable =
  ## createMitigationAction
  ## Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.
  ##   actionName: string (required)
  ##             : A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).
  ##   body: JObject (required)
  var path_21626698 = newJObject()
  var body_21626699 = newJObject()
  add(path_21626698, "actionName", newJString(actionName))
  if body != nil:
    body_21626699 = body
  result = call_21626697.call(path_21626698, nil, nil, nil, body_21626699)

var createMitigationAction* = Call_CreateMitigationAction_21626684(
    name: "createMitigationAction", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_CreateMitigationAction_21626685, base: "/",
    makeUrl: url_CreateMitigationAction_21626686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeMitigationAction_21626670 = ref object of OpenApiRestCall_21625435
proc url_DescribeMitigationAction_21626672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
               (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeMitigationAction_21626671(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a mitigation action.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
  ##             : The friendly name that uniquely identifies the mitigation action.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `actionName` field"
  var valid_21626673 = path.getOrDefault("actionName")
  valid_21626673 = validateParameter(valid_21626673, JString, required = true,
                                   default = nil)
  if valid_21626673 != nil:
    section.add "actionName", valid_21626673
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626674 = header.getOrDefault("X-Amz-Date")
  valid_21626674 = validateParameter(valid_21626674, JString, required = false,
                                   default = nil)
  if valid_21626674 != nil:
    section.add "X-Amz-Date", valid_21626674
  var valid_21626675 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626675 = validateParameter(valid_21626675, JString, required = false,
                                   default = nil)
  if valid_21626675 != nil:
    section.add "X-Amz-Security-Token", valid_21626675
  var valid_21626676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626676 = validateParameter(valid_21626676, JString, required = false,
                                   default = nil)
  if valid_21626676 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626676
  var valid_21626677 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626677 = validateParameter(valid_21626677, JString, required = false,
                                   default = nil)
  if valid_21626677 != nil:
    section.add "X-Amz-Algorithm", valid_21626677
  var valid_21626678 = header.getOrDefault("X-Amz-Signature")
  valid_21626678 = validateParameter(valid_21626678, JString, required = false,
                                   default = nil)
  if valid_21626678 != nil:
    section.add "X-Amz-Signature", valid_21626678
  var valid_21626679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626679 = validateParameter(valid_21626679, JString, required = false,
                                   default = nil)
  if valid_21626679 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626679
  var valid_21626680 = header.getOrDefault("X-Amz-Credential")
  valid_21626680 = validateParameter(valid_21626680, JString, required = false,
                                   default = nil)
  if valid_21626680 != nil:
    section.add "X-Amz-Credential", valid_21626680
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626681: Call_DescribeMitigationAction_21626670;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a mitigation action.
  ## 
  let valid = call_21626681.validator(path, query, header, formData, body, _)
  let scheme = call_21626681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626681.makeUrl(scheme.get, call_21626681.host, call_21626681.base,
                               call_21626681.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626681, uri, valid, _)

proc call*(call_21626682: Call_DescribeMitigationAction_21626670;
          actionName: string): Recallable =
  ## describeMitigationAction
  ## Gets information about a mitigation action.
  ##   actionName: string (required)
  ##             : The friendly name that uniquely identifies the mitigation action.
  var path_21626683 = newJObject()
  add(path_21626683, "actionName", newJString(actionName))
  result = call_21626682.call(path_21626683, nil, nil, nil, nil)

var describeMitigationAction* = Call_DescribeMitigationAction_21626670(
    name: "describeMitigationAction", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_DescribeMitigationAction_21626671, base: "/",
    makeUrl: url_DescribeMitigationAction_21626672,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateMitigationAction_21626714 = ref object of OpenApiRestCall_21625435
proc url_UpdateMitigationAction_21626716(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
               (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateMitigationAction_21626715(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the definition for the specified mitigation action.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
  ##             : The friendly name for the mitigation action. You can't change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and re-create the mitigation action with the new name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `actionName` field"
  var valid_21626717 = path.getOrDefault("actionName")
  valid_21626717 = validateParameter(valid_21626717, JString, required = true,
                                   default = nil)
  if valid_21626717 != nil:
    section.add "actionName", valid_21626717
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626718 = header.getOrDefault("X-Amz-Date")
  valid_21626718 = validateParameter(valid_21626718, JString, required = false,
                                   default = nil)
  if valid_21626718 != nil:
    section.add "X-Amz-Date", valid_21626718
  var valid_21626719 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626719 = validateParameter(valid_21626719, JString, required = false,
                                   default = nil)
  if valid_21626719 != nil:
    section.add "X-Amz-Security-Token", valid_21626719
  var valid_21626720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626720 = validateParameter(valid_21626720, JString, required = false,
                                   default = nil)
  if valid_21626720 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626720
  var valid_21626721 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626721 = validateParameter(valid_21626721, JString, required = false,
                                   default = nil)
  if valid_21626721 != nil:
    section.add "X-Amz-Algorithm", valid_21626721
  var valid_21626722 = header.getOrDefault("X-Amz-Signature")
  valid_21626722 = validateParameter(valid_21626722, JString, required = false,
                                   default = nil)
  if valid_21626722 != nil:
    section.add "X-Amz-Signature", valid_21626722
  var valid_21626723 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626723 = validateParameter(valid_21626723, JString, required = false,
                                   default = nil)
  if valid_21626723 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626723
  var valid_21626724 = header.getOrDefault("X-Amz-Credential")
  valid_21626724 = validateParameter(valid_21626724, JString, required = false,
                                   default = nil)
  if valid_21626724 != nil:
    section.add "X-Amz-Credential", valid_21626724
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626726: Call_UpdateMitigationAction_21626714;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the definition for the specified mitigation action.
  ## 
  let valid = call_21626726.validator(path, query, header, formData, body, _)
  let scheme = call_21626726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626726.makeUrl(scheme.get, call_21626726.host, call_21626726.base,
                               call_21626726.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626726, uri, valid, _)

proc call*(call_21626727: Call_UpdateMitigationAction_21626714; actionName: string;
          body: JsonNode): Recallable =
  ## updateMitigationAction
  ## Updates the definition for the specified mitigation action.
  ##   actionName: string (required)
  ##             : The friendly name for the mitigation action. You can't change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and re-create the mitigation action with the new name.
  ##   body: JObject (required)
  var path_21626728 = newJObject()
  var body_21626729 = newJObject()
  add(path_21626728, "actionName", newJString(actionName))
  if body != nil:
    body_21626729 = body
  result = call_21626727.call(path_21626728, nil, nil, nil, body_21626729)

var updateMitigationAction* = Call_UpdateMitigationAction_21626714(
    name: "updateMitigationAction", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_UpdateMitigationAction_21626715, base: "/",
    makeUrl: url_UpdateMitigationAction_21626716,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteMitigationAction_21626700 = ref object of OpenApiRestCall_21625435
proc url_DeleteMitigationAction_21626702(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
               (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteMitigationAction_21626701(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a defined mitigation action from your AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
  ##             : The name of the mitigation action that you want to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `actionName` field"
  var valid_21626703 = path.getOrDefault("actionName")
  valid_21626703 = validateParameter(valid_21626703, JString, required = true,
                                   default = nil)
  if valid_21626703 != nil:
    section.add "actionName", valid_21626703
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626704 = header.getOrDefault("X-Amz-Date")
  valid_21626704 = validateParameter(valid_21626704, JString, required = false,
                                   default = nil)
  if valid_21626704 != nil:
    section.add "X-Amz-Date", valid_21626704
  var valid_21626705 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626705 = validateParameter(valid_21626705, JString, required = false,
                                   default = nil)
  if valid_21626705 != nil:
    section.add "X-Amz-Security-Token", valid_21626705
  var valid_21626706 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626706 = validateParameter(valid_21626706, JString, required = false,
                                   default = nil)
  if valid_21626706 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626706
  var valid_21626707 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626707 = validateParameter(valid_21626707, JString, required = false,
                                   default = nil)
  if valid_21626707 != nil:
    section.add "X-Amz-Algorithm", valid_21626707
  var valid_21626708 = header.getOrDefault("X-Amz-Signature")
  valid_21626708 = validateParameter(valid_21626708, JString, required = false,
                                   default = nil)
  if valid_21626708 != nil:
    section.add "X-Amz-Signature", valid_21626708
  var valid_21626709 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626709 = validateParameter(valid_21626709, JString, required = false,
                                   default = nil)
  if valid_21626709 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626709
  var valid_21626710 = header.getOrDefault("X-Amz-Credential")
  valid_21626710 = validateParameter(valid_21626710, JString, required = false,
                                   default = nil)
  if valid_21626710 != nil:
    section.add "X-Amz-Credential", valid_21626710
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626711: Call_DeleteMitigationAction_21626700;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a defined mitigation action from your AWS account.
  ## 
  let valid = call_21626711.validator(path, query, header, formData, body, _)
  let scheme = call_21626711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626711.makeUrl(scheme.get, call_21626711.host, call_21626711.base,
                               call_21626711.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626711, uri, valid, _)

proc call*(call_21626712: Call_DeleteMitigationAction_21626700; actionName: string): Recallable =
  ## deleteMitigationAction
  ## Deletes a defined mitigation action from your AWS account.
  ##   actionName: string (required)
  ##             : The name of the mitigation action that you want to delete.
  var path_21626713 = newJObject()
  add(path_21626713, "actionName", newJString(actionName))
  result = call_21626712.call(path_21626713, nil, nil, nil, nil)

var deleteMitigationAction* = Call_DeleteMitigationAction_21626700(
    name: "deleteMitigationAction", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_DeleteMitigationAction_21626701, base: "/",
    makeUrl: url_DeleteMitigationAction_21626702,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateOTAUpdate_21626744 = ref object of OpenApiRestCall_21625435
proc url_CreateOTAUpdate_21626746(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "otaUpdateId" in path, "`otaUpdateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/otaUpdates/"),
               (kind: VariableSegment, value: "otaUpdateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateOTAUpdate_21626745(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an AWS IoT OTAUpdate on a target group of things or groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   otaUpdateId: JString (required)
  ##              : The ID of the OTA update to be created.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `otaUpdateId` field"
  var valid_21626747 = path.getOrDefault("otaUpdateId")
  valid_21626747 = validateParameter(valid_21626747, JString, required = true,
                                   default = nil)
  if valid_21626747 != nil:
    section.add "otaUpdateId", valid_21626747
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626748 = header.getOrDefault("X-Amz-Date")
  valid_21626748 = validateParameter(valid_21626748, JString, required = false,
                                   default = nil)
  if valid_21626748 != nil:
    section.add "X-Amz-Date", valid_21626748
  var valid_21626749 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626749 = validateParameter(valid_21626749, JString, required = false,
                                   default = nil)
  if valid_21626749 != nil:
    section.add "X-Amz-Security-Token", valid_21626749
  var valid_21626750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626750 = validateParameter(valid_21626750, JString, required = false,
                                   default = nil)
  if valid_21626750 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626750
  var valid_21626751 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626751 = validateParameter(valid_21626751, JString, required = false,
                                   default = nil)
  if valid_21626751 != nil:
    section.add "X-Amz-Algorithm", valid_21626751
  var valid_21626752 = header.getOrDefault("X-Amz-Signature")
  valid_21626752 = validateParameter(valid_21626752, JString, required = false,
                                   default = nil)
  if valid_21626752 != nil:
    section.add "X-Amz-Signature", valid_21626752
  var valid_21626753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626753 = validateParameter(valid_21626753, JString, required = false,
                                   default = nil)
  if valid_21626753 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626753
  var valid_21626754 = header.getOrDefault("X-Amz-Credential")
  valid_21626754 = validateParameter(valid_21626754, JString, required = false,
                                   default = nil)
  if valid_21626754 != nil:
    section.add "X-Amz-Credential", valid_21626754
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626756: Call_CreateOTAUpdate_21626744; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an AWS IoT OTAUpdate on a target group of things or groups.
  ## 
  let valid = call_21626756.validator(path, query, header, formData, body, _)
  let scheme = call_21626756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626756.makeUrl(scheme.get, call_21626756.host, call_21626756.base,
                               call_21626756.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626756, uri, valid, _)

proc call*(call_21626757: Call_CreateOTAUpdate_21626744; otaUpdateId: string;
          body: JsonNode): Recallable =
  ## createOTAUpdate
  ## Creates an AWS IoT OTAUpdate on a target group of things or groups.
  ##   otaUpdateId: string (required)
  ##              : The ID of the OTA update to be created.
  ##   body: JObject (required)
  var path_21626758 = newJObject()
  var body_21626759 = newJObject()
  add(path_21626758, "otaUpdateId", newJString(otaUpdateId))
  if body != nil:
    body_21626759 = body
  result = call_21626757.call(path_21626758, nil, nil, nil, body_21626759)

var createOTAUpdate* = Call_CreateOTAUpdate_21626744(name: "createOTAUpdate",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/otaUpdates/{otaUpdateId}", validator: validate_CreateOTAUpdate_21626745,
    base: "/", makeUrl: url_CreateOTAUpdate_21626746,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetOTAUpdate_21626730 = ref object of OpenApiRestCall_21625435
proc url_GetOTAUpdate_21626732(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "otaUpdateId" in path, "`otaUpdateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/otaUpdates/"),
               (kind: VariableSegment, value: "otaUpdateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetOTAUpdate_21626731(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Gets an OTA update.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   otaUpdateId: JString (required)
  ##              : The OTA update ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `otaUpdateId` field"
  var valid_21626733 = path.getOrDefault("otaUpdateId")
  valid_21626733 = validateParameter(valid_21626733, JString, required = true,
                                   default = nil)
  if valid_21626733 != nil:
    section.add "otaUpdateId", valid_21626733
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626734 = header.getOrDefault("X-Amz-Date")
  valid_21626734 = validateParameter(valid_21626734, JString, required = false,
                                   default = nil)
  if valid_21626734 != nil:
    section.add "X-Amz-Date", valid_21626734
  var valid_21626735 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626735 = validateParameter(valid_21626735, JString, required = false,
                                   default = nil)
  if valid_21626735 != nil:
    section.add "X-Amz-Security-Token", valid_21626735
  var valid_21626736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626736 = validateParameter(valid_21626736, JString, required = false,
                                   default = nil)
  if valid_21626736 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626736
  var valid_21626737 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626737 = validateParameter(valid_21626737, JString, required = false,
                                   default = nil)
  if valid_21626737 != nil:
    section.add "X-Amz-Algorithm", valid_21626737
  var valid_21626738 = header.getOrDefault("X-Amz-Signature")
  valid_21626738 = validateParameter(valid_21626738, JString, required = false,
                                   default = nil)
  if valid_21626738 != nil:
    section.add "X-Amz-Signature", valid_21626738
  var valid_21626739 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626739 = validateParameter(valid_21626739, JString, required = false,
                                   default = nil)
  if valid_21626739 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626739
  var valid_21626740 = header.getOrDefault("X-Amz-Credential")
  valid_21626740 = validateParameter(valid_21626740, JString, required = false,
                                   default = nil)
  if valid_21626740 != nil:
    section.add "X-Amz-Credential", valid_21626740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626741: Call_GetOTAUpdate_21626730; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets an OTA update.
  ## 
  let valid = call_21626741.validator(path, query, header, formData, body, _)
  let scheme = call_21626741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626741.makeUrl(scheme.get, call_21626741.host, call_21626741.base,
                               call_21626741.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626741, uri, valid, _)

proc call*(call_21626742: Call_GetOTAUpdate_21626730; otaUpdateId: string): Recallable =
  ## getOTAUpdate
  ## Gets an OTA update.
  ##   otaUpdateId: string (required)
  ##              : The OTA update ID.
  var path_21626743 = newJObject()
  add(path_21626743, "otaUpdateId", newJString(otaUpdateId))
  result = call_21626742.call(path_21626743, nil, nil, nil, nil)

var getOTAUpdate* = Call_GetOTAUpdate_21626730(name: "getOTAUpdate",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/otaUpdates/{otaUpdateId}", validator: validate_GetOTAUpdate_21626731,
    base: "/", makeUrl: url_GetOTAUpdate_21626732,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteOTAUpdate_21626760 = ref object of OpenApiRestCall_21625435
proc url_DeleteOTAUpdate_21626762(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "otaUpdateId" in path, "`otaUpdateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/otaUpdates/"),
               (kind: VariableSegment, value: "otaUpdateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteOTAUpdate_21626761(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Delete an OTA update.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   otaUpdateId: JString (required)
  ##              : The OTA update ID to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `otaUpdateId` field"
  var valid_21626763 = path.getOrDefault("otaUpdateId")
  valid_21626763 = validateParameter(valid_21626763, JString, required = true,
                                   default = nil)
  if valid_21626763 != nil:
    section.add "otaUpdateId", valid_21626763
  result.add "path", section
  ## parameters in `query` object:
  ##   deleteStream: JBool
  ##               : Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.
  ##   forceDeleteAWSJob: JBool
  ##                    : Specifies if the AWS Job associated with the OTA update should be deleted with the OTA update is deleted.
  section = newJObject()
  var valid_21626764 = query.getOrDefault("deleteStream")
  valid_21626764 = validateParameter(valid_21626764, JBool, required = false,
                                   default = nil)
  if valid_21626764 != nil:
    section.add "deleteStream", valid_21626764
  var valid_21626765 = query.getOrDefault("forceDeleteAWSJob")
  valid_21626765 = validateParameter(valid_21626765, JBool, required = false,
                                   default = nil)
  if valid_21626765 != nil:
    section.add "forceDeleteAWSJob", valid_21626765
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626766 = header.getOrDefault("X-Amz-Date")
  valid_21626766 = validateParameter(valid_21626766, JString, required = false,
                                   default = nil)
  if valid_21626766 != nil:
    section.add "X-Amz-Date", valid_21626766
  var valid_21626767 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626767 = validateParameter(valid_21626767, JString, required = false,
                                   default = nil)
  if valid_21626767 != nil:
    section.add "X-Amz-Security-Token", valid_21626767
  var valid_21626768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626768 = validateParameter(valid_21626768, JString, required = false,
                                   default = nil)
  if valid_21626768 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626768
  var valid_21626769 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626769 = validateParameter(valid_21626769, JString, required = false,
                                   default = nil)
  if valid_21626769 != nil:
    section.add "X-Amz-Algorithm", valid_21626769
  var valid_21626770 = header.getOrDefault("X-Amz-Signature")
  valid_21626770 = validateParameter(valid_21626770, JString, required = false,
                                   default = nil)
  if valid_21626770 != nil:
    section.add "X-Amz-Signature", valid_21626770
  var valid_21626771 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626771 = validateParameter(valid_21626771, JString, required = false,
                                   default = nil)
  if valid_21626771 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626771
  var valid_21626772 = header.getOrDefault("X-Amz-Credential")
  valid_21626772 = validateParameter(valid_21626772, JString, required = false,
                                   default = nil)
  if valid_21626772 != nil:
    section.add "X-Amz-Credential", valid_21626772
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626773: Call_DeleteOTAUpdate_21626760; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Delete an OTA update.
  ## 
  let valid = call_21626773.validator(path, query, header, formData, body, _)
  let scheme = call_21626773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626773.makeUrl(scheme.get, call_21626773.host, call_21626773.base,
                               call_21626773.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626773, uri, valid, _)

proc call*(call_21626774: Call_DeleteOTAUpdate_21626760; otaUpdateId: string;
          deleteStream: bool = false; forceDeleteAWSJob: bool = false): Recallable =
  ## deleteOTAUpdate
  ## Delete an OTA update.
  ##   deleteStream: bool
  ##               : Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.
  ##   otaUpdateId: string (required)
  ##              : The OTA update ID to delete.
  ##   forceDeleteAWSJob: bool
  ##                    : Specifies if the AWS Job associated with the OTA update should be deleted with the OTA update is deleted.
  var path_21626775 = newJObject()
  var query_21626776 = newJObject()
  add(query_21626776, "deleteStream", newJBool(deleteStream))
  add(path_21626775, "otaUpdateId", newJString(otaUpdateId))
  add(query_21626776, "forceDeleteAWSJob", newJBool(forceDeleteAWSJob))
  result = call_21626774.call(path_21626775, query_21626776, nil, nil, nil)

var deleteOTAUpdate* = Call_DeleteOTAUpdate_21626760(name: "deleteOTAUpdate",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/otaUpdates/{otaUpdateId}", validator: validate_DeleteOTAUpdate_21626761,
    base: "/", makeUrl: url_DeleteOTAUpdate_21626762,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreatePolicy_21626791 = ref object of OpenApiRestCall_21625435
proc url_CreatePolicy_21626793(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreatePolicy_21626792(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The policy name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626794 = path.getOrDefault("policyName")
  valid_21626794 = validateParameter(valid_21626794, JString, required = true,
                                   default = nil)
  if valid_21626794 != nil:
    section.add "policyName", valid_21626794
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626795 = header.getOrDefault("X-Amz-Date")
  valid_21626795 = validateParameter(valid_21626795, JString, required = false,
                                   default = nil)
  if valid_21626795 != nil:
    section.add "X-Amz-Date", valid_21626795
  var valid_21626796 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626796 = validateParameter(valid_21626796, JString, required = false,
                                   default = nil)
  if valid_21626796 != nil:
    section.add "X-Amz-Security-Token", valid_21626796
  var valid_21626797 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626797 = validateParameter(valid_21626797, JString, required = false,
                                   default = nil)
  if valid_21626797 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626797
  var valid_21626798 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626798 = validateParameter(valid_21626798, JString, required = false,
                                   default = nil)
  if valid_21626798 != nil:
    section.add "X-Amz-Algorithm", valid_21626798
  var valid_21626799 = header.getOrDefault("X-Amz-Signature")
  valid_21626799 = validateParameter(valid_21626799, JString, required = false,
                                   default = nil)
  if valid_21626799 != nil:
    section.add "X-Amz-Signature", valid_21626799
  var valid_21626800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626800 = validateParameter(valid_21626800, JString, required = false,
                                   default = nil)
  if valid_21626800 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626800
  var valid_21626801 = header.getOrDefault("X-Amz-Credential")
  valid_21626801 = validateParameter(valid_21626801, JString, required = false,
                                   default = nil)
  if valid_21626801 != nil:
    section.add "X-Amz-Credential", valid_21626801
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626803: Call_CreatePolicy_21626791; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>
  ## 
  let valid = call_21626803.validator(path, query, header, formData, body, _)
  let scheme = call_21626803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626803.makeUrl(scheme.get, call_21626803.host, call_21626803.base,
                               call_21626803.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626803, uri, valid, _)

proc call*(call_21626804: Call_CreatePolicy_21626791; policyName: string;
          body: JsonNode): Recallable =
  ## createPolicy
  ## <p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>
  ##   policyName: string (required)
  ##             : The policy name.
  ##   body: JObject (required)
  var path_21626805 = newJObject()
  var body_21626806 = newJObject()
  add(path_21626805, "policyName", newJString(policyName))
  if body != nil:
    body_21626806 = body
  result = call_21626804.call(path_21626805, nil, nil, nil, body_21626806)

var createPolicy* = Call_CreatePolicy_21626791(name: "createPolicy",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/policies/{policyName}", validator: validate_CreatePolicy_21626792,
    base: "/", makeUrl: url_CreatePolicy_21626793,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPolicy_21626777 = ref object of OpenApiRestCall_21625435
proc url_GetPolicy_21626779(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetPolicy_21626778(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified policy with the policy document of the default version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The name of the policy.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626780 = path.getOrDefault("policyName")
  valid_21626780 = validateParameter(valid_21626780, JString, required = true,
                                   default = nil)
  if valid_21626780 != nil:
    section.add "policyName", valid_21626780
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626781 = header.getOrDefault("X-Amz-Date")
  valid_21626781 = validateParameter(valid_21626781, JString, required = false,
                                   default = nil)
  if valid_21626781 != nil:
    section.add "X-Amz-Date", valid_21626781
  var valid_21626782 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626782 = validateParameter(valid_21626782, JString, required = false,
                                   default = nil)
  if valid_21626782 != nil:
    section.add "X-Amz-Security-Token", valid_21626782
  var valid_21626783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626783 = validateParameter(valid_21626783, JString, required = false,
                                   default = nil)
  if valid_21626783 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626783
  var valid_21626784 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626784 = validateParameter(valid_21626784, JString, required = false,
                                   default = nil)
  if valid_21626784 != nil:
    section.add "X-Amz-Algorithm", valid_21626784
  var valid_21626785 = header.getOrDefault("X-Amz-Signature")
  valid_21626785 = validateParameter(valid_21626785, JString, required = false,
                                   default = nil)
  if valid_21626785 != nil:
    section.add "X-Amz-Signature", valid_21626785
  var valid_21626786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626786 = validateParameter(valid_21626786, JString, required = false,
                                   default = nil)
  if valid_21626786 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626786
  var valid_21626787 = header.getOrDefault("X-Amz-Credential")
  valid_21626787 = validateParameter(valid_21626787, JString, required = false,
                                   default = nil)
  if valid_21626787 != nil:
    section.add "X-Amz-Credential", valid_21626787
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626788: Call_GetPolicy_21626777; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified policy with the policy document of the default version.
  ## 
  let valid = call_21626788.validator(path, query, header, formData, body, _)
  let scheme = call_21626788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626788.makeUrl(scheme.get, call_21626788.host, call_21626788.base,
                               call_21626788.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626788, uri, valid, _)

proc call*(call_21626789: Call_GetPolicy_21626777; policyName: string): Recallable =
  ## getPolicy
  ## Gets information about the specified policy with the policy document of the default version.
  ##   policyName: string (required)
  ##             : The name of the policy.
  var path_21626790 = newJObject()
  add(path_21626790, "policyName", newJString(policyName))
  result = call_21626789.call(path_21626790, nil, nil, nil, nil)

var getPolicy* = Call_GetPolicy_21626777(name: "getPolicy", meth: HttpMethod.HttpGet,
                                      host: "iot.amazonaws.com",
                                      route: "/policies/{policyName}",
                                      validator: validate_GetPolicy_21626778,
                                      base: "/", makeUrl: url_GetPolicy_21626779,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeletePolicy_21626807 = ref object of OpenApiRestCall_21625435
proc url_DeletePolicy_21626809(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeletePolicy_21626808(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The name of the policy to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626810 = path.getOrDefault("policyName")
  valid_21626810 = validateParameter(valid_21626810, JString, required = true,
                                   default = nil)
  if valid_21626810 != nil:
    section.add "policyName", valid_21626810
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626811 = header.getOrDefault("X-Amz-Date")
  valid_21626811 = validateParameter(valid_21626811, JString, required = false,
                                   default = nil)
  if valid_21626811 != nil:
    section.add "X-Amz-Date", valid_21626811
  var valid_21626812 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626812 = validateParameter(valid_21626812, JString, required = false,
                                   default = nil)
  if valid_21626812 != nil:
    section.add "X-Amz-Security-Token", valid_21626812
  var valid_21626813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626813 = validateParameter(valid_21626813, JString, required = false,
                                   default = nil)
  if valid_21626813 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626813
  var valid_21626814 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626814 = validateParameter(valid_21626814, JString, required = false,
                                   default = nil)
  if valid_21626814 != nil:
    section.add "X-Amz-Algorithm", valid_21626814
  var valid_21626815 = header.getOrDefault("X-Amz-Signature")
  valid_21626815 = validateParameter(valid_21626815, JString, required = false,
                                   default = nil)
  if valid_21626815 != nil:
    section.add "X-Amz-Signature", valid_21626815
  var valid_21626816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626816 = validateParameter(valid_21626816, JString, required = false,
                                   default = nil)
  if valid_21626816 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626816
  var valid_21626817 = header.getOrDefault("X-Amz-Credential")
  valid_21626817 = validateParameter(valid_21626817, JString, required = false,
                                   default = nil)
  if valid_21626817 != nil:
    section.add "X-Amz-Credential", valid_21626817
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626818: Call_DeletePolicy_21626807; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>
  ## 
  let valid = call_21626818.validator(path, query, header, formData, body, _)
  let scheme = call_21626818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626818.makeUrl(scheme.get, call_21626818.host, call_21626818.base,
                               call_21626818.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626818, uri, valid, _)

proc call*(call_21626819: Call_DeletePolicy_21626807; policyName: string): Recallable =
  ## deletePolicy
  ## <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>
  ##   policyName: string (required)
  ##             : The name of the policy to delete.
  var path_21626820 = newJObject()
  add(path_21626820, "policyName", newJString(policyName))
  result = call_21626819.call(path_21626820, nil, nil, nil, nil)

var deletePolicy* = Call_DeletePolicy_21626807(name: "deletePolicy",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/policies/{policyName}", validator: validate_DeletePolicy_21626808,
    base: "/", makeUrl: url_DeletePolicy_21626809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreatePolicyVersion_21626835 = ref object of OpenApiRestCall_21625435
proc url_CreatePolicyVersion_21626837(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName"),
               (kind: ConstantSegment, value: "/version")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreatePolicyVersion_21626836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The policy name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626838 = path.getOrDefault("policyName")
  valid_21626838 = validateParameter(valid_21626838, JString, required = true,
                                   default = nil)
  if valid_21626838 != nil:
    section.add "policyName", valid_21626838
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsDefault: JBool
  ##               : Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).
  section = newJObject()
  var valid_21626839 = query.getOrDefault("setAsDefault")
  valid_21626839 = validateParameter(valid_21626839, JBool, required = false,
                                   default = nil)
  if valid_21626839 != nil:
    section.add "setAsDefault", valid_21626839
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626840 = header.getOrDefault("X-Amz-Date")
  valid_21626840 = validateParameter(valid_21626840, JString, required = false,
                                   default = nil)
  if valid_21626840 != nil:
    section.add "X-Amz-Date", valid_21626840
  var valid_21626841 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626841 = validateParameter(valid_21626841, JString, required = false,
                                   default = nil)
  if valid_21626841 != nil:
    section.add "X-Amz-Security-Token", valid_21626841
  var valid_21626842 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626842 = validateParameter(valid_21626842, JString, required = false,
                                   default = nil)
  if valid_21626842 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626842
  var valid_21626843 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626843 = validateParameter(valid_21626843, JString, required = false,
                                   default = nil)
  if valid_21626843 != nil:
    section.add "X-Amz-Algorithm", valid_21626843
  var valid_21626844 = header.getOrDefault("X-Amz-Signature")
  valid_21626844 = validateParameter(valid_21626844, JString, required = false,
                                   default = nil)
  if valid_21626844 != nil:
    section.add "X-Amz-Signature", valid_21626844
  var valid_21626845 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626845 = validateParameter(valid_21626845, JString, required = false,
                                   default = nil)
  if valid_21626845 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626845
  var valid_21626846 = header.getOrDefault("X-Amz-Credential")
  valid_21626846 = validateParameter(valid_21626846, JString, required = false,
                                   default = nil)
  if valid_21626846 != nil:
    section.add "X-Amz-Credential", valid_21626846
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626848: Call_CreatePolicyVersion_21626835; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>
  ## 
  let valid = call_21626848.validator(path, query, header, formData, body, _)
  let scheme = call_21626848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626848.makeUrl(scheme.get, call_21626848.host, call_21626848.base,
                               call_21626848.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626848, uri, valid, _)

proc call*(call_21626849: Call_CreatePolicyVersion_21626835; policyName: string;
          body: JsonNode; setAsDefault: bool = false): Recallable =
  ## createPolicyVersion
  ## <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>
  ##   setAsDefault: bool
  ##               : Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).
  ##   policyName: string (required)
  ##             : The policy name.
  ##   body: JObject (required)
  var path_21626850 = newJObject()
  var query_21626851 = newJObject()
  var body_21626852 = newJObject()
  add(query_21626851, "setAsDefault", newJBool(setAsDefault))
  add(path_21626850, "policyName", newJString(policyName))
  if body != nil:
    body_21626852 = body
  result = call_21626849.call(path_21626850, query_21626851, nil, nil, body_21626852)

var createPolicyVersion* = Call_CreatePolicyVersion_21626835(
    name: "createPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/policies/{policyName}/version",
    validator: validate_CreatePolicyVersion_21626836, base: "/",
    makeUrl: url_CreatePolicyVersion_21626837,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPolicyVersions_21626821 = ref object of OpenApiRestCall_21625435
proc url_ListPolicyVersions_21626823(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName"),
               (kind: ConstantSegment, value: "/version")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListPolicyVersions_21626822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the versions of the specified policy and identifies the default version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The policy name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21626824 = path.getOrDefault("policyName")
  valid_21626824 = validateParameter(valid_21626824, JString, required = true,
                                   default = nil)
  if valid_21626824 != nil:
    section.add "policyName", valid_21626824
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626825 = header.getOrDefault("X-Amz-Date")
  valid_21626825 = validateParameter(valid_21626825, JString, required = false,
                                   default = nil)
  if valid_21626825 != nil:
    section.add "X-Amz-Date", valid_21626825
  var valid_21626826 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626826 = validateParameter(valid_21626826, JString, required = false,
                                   default = nil)
  if valid_21626826 != nil:
    section.add "X-Amz-Security-Token", valid_21626826
  var valid_21626827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626827 = validateParameter(valid_21626827, JString, required = false,
                                   default = nil)
  if valid_21626827 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626827
  var valid_21626828 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626828 = validateParameter(valid_21626828, JString, required = false,
                                   default = nil)
  if valid_21626828 != nil:
    section.add "X-Amz-Algorithm", valid_21626828
  var valid_21626829 = header.getOrDefault("X-Amz-Signature")
  valid_21626829 = validateParameter(valid_21626829, JString, required = false,
                                   default = nil)
  if valid_21626829 != nil:
    section.add "X-Amz-Signature", valid_21626829
  var valid_21626830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626830 = validateParameter(valid_21626830, JString, required = false,
                                   default = nil)
  if valid_21626830 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626830
  var valid_21626831 = header.getOrDefault("X-Amz-Credential")
  valid_21626831 = validateParameter(valid_21626831, JString, required = false,
                                   default = nil)
  if valid_21626831 != nil:
    section.add "X-Amz-Credential", valid_21626831
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626832: Call_ListPolicyVersions_21626821; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the versions of the specified policy and identifies the default version.
  ## 
  let valid = call_21626832.validator(path, query, header, formData, body, _)
  let scheme = call_21626832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626832.makeUrl(scheme.get, call_21626832.host, call_21626832.base,
                               call_21626832.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626832, uri, valid, _)

proc call*(call_21626833: Call_ListPolicyVersions_21626821; policyName: string): Recallable =
  ## listPolicyVersions
  ## Lists the versions of the specified policy and identifies the default version.
  ##   policyName: string (required)
  ##             : The policy name.
  var path_21626834 = newJObject()
  add(path_21626834, "policyName", newJString(policyName))
  result = call_21626833.call(path_21626834, nil, nil, nil, nil)

var listPolicyVersions* = Call_ListPolicyVersions_21626821(
    name: "listPolicyVersions", meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/policies/{policyName}/version",
    validator: validate_ListPolicyVersions_21626822, base: "/",
    makeUrl: url_ListPolicyVersions_21626823, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateProvisioningClaim_21626853 = ref object of OpenApiRestCall_21625435
proc url_CreateProvisioningClaim_21626855(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName"),
               (kind: ConstantSegment, value: "/provisioning-claim")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateProvisioningClaim_21626854(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a provisioning claim.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
  ##               : The name of the provisioning template to use.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `templateName` field"
  var valid_21626856 = path.getOrDefault("templateName")
  valid_21626856 = validateParameter(valid_21626856, JString, required = true,
                                   default = nil)
  if valid_21626856 != nil:
    section.add "templateName", valid_21626856
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626857 = header.getOrDefault("X-Amz-Date")
  valid_21626857 = validateParameter(valid_21626857, JString, required = false,
                                   default = nil)
  if valid_21626857 != nil:
    section.add "X-Amz-Date", valid_21626857
  var valid_21626858 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626858 = validateParameter(valid_21626858, JString, required = false,
                                   default = nil)
  if valid_21626858 != nil:
    section.add "X-Amz-Security-Token", valid_21626858
  var valid_21626859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626859 = validateParameter(valid_21626859, JString, required = false,
                                   default = nil)
  if valid_21626859 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626859
  var valid_21626860 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626860 = validateParameter(valid_21626860, JString, required = false,
                                   default = nil)
  if valid_21626860 != nil:
    section.add "X-Amz-Algorithm", valid_21626860
  var valid_21626861 = header.getOrDefault("X-Amz-Signature")
  valid_21626861 = validateParameter(valid_21626861, JString, required = false,
                                   default = nil)
  if valid_21626861 != nil:
    section.add "X-Amz-Signature", valid_21626861
  var valid_21626862 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626862 = validateParameter(valid_21626862, JString, required = false,
                                   default = nil)
  if valid_21626862 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626862
  var valid_21626863 = header.getOrDefault("X-Amz-Credential")
  valid_21626863 = validateParameter(valid_21626863, JString, required = false,
                                   default = nil)
  if valid_21626863 != nil:
    section.add "X-Amz-Credential", valid_21626863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626864: Call_CreateProvisioningClaim_21626853;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a provisioning claim.
  ## 
  let valid = call_21626864.validator(path, query, header, formData, body, _)
  let scheme = call_21626864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626864.makeUrl(scheme.get, call_21626864.host, call_21626864.base,
                               call_21626864.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626864, uri, valid, _)

proc call*(call_21626865: Call_CreateProvisioningClaim_21626853;
          templateName: string): Recallable =
  ## createProvisioningClaim
  ## Creates a provisioning claim.
  ##   templateName: string (required)
  ##               : The name of the provisioning template to use.
  var path_21626866 = newJObject()
  add(path_21626866, "templateName", newJString(templateName))
  result = call_21626865.call(path_21626866, nil, nil, nil, nil)

var createProvisioningClaim* = Call_CreateProvisioningClaim_21626853(
    name: "createProvisioningClaim", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/provisioning-claim",
    validator: validate_CreateProvisioningClaim_21626854, base: "/",
    makeUrl: url_CreateProvisioningClaim_21626855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateProvisioningTemplate_21626882 = ref object of OpenApiRestCall_21625435
proc url_CreateProvisioningTemplate_21626884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateProvisioningTemplate_21626883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a fleet provisioning template.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626885 = header.getOrDefault("X-Amz-Date")
  valid_21626885 = validateParameter(valid_21626885, JString, required = false,
                                   default = nil)
  if valid_21626885 != nil:
    section.add "X-Amz-Date", valid_21626885
  var valid_21626886 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626886 = validateParameter(valid_21626886, JString, required = false,
                                   default = nil)
  if valid_21626886 != nil:
    section.add "X-Amz-Security-Token", valid_21626886
  var valid_21626887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626887 = validateParameter(valid_21626887, JString, required = false,
                                   default = nil)
  if valid_21626887 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626887
  var valid_21626888 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626888 = validateParameter(valid_21626888, JString, required = false,
                                   default = nil)
  if valid_21626888 != nil:
    section.add "X-Amz-Algorithm", valid_21626888
  var valid_21626889 = header.getOrDefault("X-Amz-Signature")
  valid_21626889 = validateParameter(valid_21626889, JString, required = false,
                                   default = nil)
  if valid_21626889 != nil:
    section.add "X-Amz-Signature", valid_21626889
  var valid_21626890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626890 = validateParameter(valid_21626890, JString, required = false,
                                   default = nil)
  if valid_21626890 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626890
  var valid_21626891 = header.getOrDefault("X-Amz-Credential")
  valid_21626891 = validateParameter(valid_21626891, JString, required = false,
                                   default = nil)
  if valid_21626891 != nil:
    section.add "X-Amz-Credential", valid_21626891
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626893: Call_CreateProvisioningTemplate_21626882;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a fleet provisioning template.
  ## 
  let valid = call_21626893.validator(path, query, header, formData, body, _)
  let scheme = call_21626893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626893.makeUrl(scheme.get, call_21626893.host, call_21626893.base,
                               call_21626893.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626893, uri, valid, _)

proc call*(call_21626894: Call_CreateProvisioningTemplate_21626882; body: JsonNode): Recallable =
  ## createProvisioningTemplate
  ## Creates a fleet provisioning template.
  ##   body: JObject (required)
  var body_21626895 = newJObject()
  if body != nil:
    body_21626895 = body
  result = call_21626894.call(nil, nil, nil, nil, body_21626895)

var createProvisioningTemplate* = Call_CreateProvisioningTemplate_21626882(
    name: "createProvisioningTemplate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/provisioning-templates",
    validator: validate_CreateProvisioningTemplate_21626883, base: "/",
    makeUrl: url_CreateProvisioningTemplate_21626884,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListProvisioningTemplates_21626867 = ref object of OpenApiRestCall_21625435
proc url_ListProvisioningTemplates_21626869(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListProvisioningTemplates_21626868(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the fleet provisioning templates in your AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : A token to retrieve the next set of results.
  section = newJObject()
  var valid_21626870 = query.getOrDefault("maxResults")
  valid_21626870 = validateParameter(valid_21626870, JInt, required = false,
                                   default = nil)
  if valid_21626870 != nil:
    section.add "maxResults", valid_21626870
  var valid_21626871 = query.getOrDefault("nextToken")
  valid_21626871 = validateParameter(valid_21626871, JString, required = false,
                                   default = nil)
  if valid_21626871 != nil:
    section.add "nextToken", valid_21626871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626872 = header.getOrDefault("X-Amz-Date")
  valid_21626872 = validateParameter(valid_21626872, JString, required = false,
                                   default = nil)
  if valid_21626872 != nil:
    section.add "X-Amz-Date", valid_21626872
  var valid_21626873 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626873 = validateParameter(valid_21626873, JString, required = false,
                                   default = nil)
  if valid_21626873 != nil:
    section.add "X-Amz-Security-Token", valid_21626873
  var valid_21626874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626874 = validateParameter(valid_21626874, JString, required = false,
                                   default = nil)
  if valid_21626874 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626874
  var valid_21626875 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626875 = validateParameter(valid_21626875, JString, required = false,
                                   default = nil)
  if valid_21626875 != nil:
    section.add "X-Amz-Algorithm", valid_21626875
  var valid_21626876 = header.getOrDefault("X-Amz-Signature")
  valid_21626876 = validateParameter(valid_21626876, JString, required = false,
                                   default = nil)
  if valid_21626876 != nil:
    section.add "X-Amz-Signature", valid_21626876
  var valid_21626877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626877 = validateParameter(valid_21626877, JString, required = false,
                                   default = nil)
  if valid_21626877 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626877
  var valid_21626878 = header.getOrDefault("X-Amz-Credential")
  valid_21626878 = validateParameter(valid_21626878, JString, required = false,
                                   default = nil)
  if valid_21626878 != nil:
    section.add "X-Amz-Credential", valid_21626878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626879: Call_ListProvisioningTemplates_21626867;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the fleet provisioning templates in your AWS account.
  ## 
  let valid = call_21626879.validator(path, query, header, formData, body, _)
  let scheme = call_21626879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626879.makeUrl(scheme.get, call_21626879.host, call_21626879.base,
                               call_21626879.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626879, uri, valid, _)

proc call*(call_21626880: Call_ListProvisioningTemplates_21626867;
          maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listProvisioningTemplates
  ## Lists the fleet provisioning templates in your AWS account.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : A token to retrieve the next set of results.
  var query_21626881 = newJObject()
  add(query_21626881, "maxResults", newJInt(maxResults))
  add(query_21626881, "nextToken", newJString(nextToken))
  result = call_21626880.call(nil, query_21626881, nil, nil, nil)

var listProvisioningTemplates* = Call_ListProvisioningTemplates_21626867(
    name: "listProvisioningTemplates", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/provisioning-templates",
    validator: validate_ListProvisioningTemplates_21626868, base: "/",
    makeUrl: url_ListProvisioningTemplates_21626869,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateProvisioningTemplateVersion_21626913 = ref object of OpenApiRestCall_21625435
proc url_CreateProvisioningTemplateVersion_21626915(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName"),
               (kind: ConstantSegment, value: "/versions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateProvisioningTemplateVersion_21626914(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Creates a new version of a fleet provisioning template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
  ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `templateName` field"
  var valid_21626916 = path.getOrDefault("templateName")
  valid_21626916 = validateParameter(valid_21626916, JString, required = true,
                                   default = nil)
  if valid_21626916 != nil:
    section.add "templateName", valid_21626916
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsDefault: JBool
  ##               : Sets a fleet provision template version as the default version.
  section = newJObject()
  var valid_21626917 = query.getOrDefault("setAsDefault")
  valid_21626917 = validateParameter(valid_21626917, JBool, required = false,
                                   default = nil)
  if valid_21626917 != nil:
    section.add "setAsDefault", valid_21626917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626918 = header.getOrDefault("X-Amz-Date")
  valid_21626918 = validateParameter(valid_21626918, JString, required = false,
                                   default = nil)
  if valid_21626918 != nil:
    section.add "X-Amz-Date", valid_21626918
  var valid_21626919 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626919 = validateParameter(valid_21626919, JString, required = false,
                                   default = nil)
  if valid_21626919 != nil:
    section.add "X-Amz-Security-Token", valid_21626919
  var valid_21626920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626920 = validateParameter(valid_21626920, JString, required = false,
                                   default = nil)
  if valid_21626920 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626920
  var valid_21626921 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626921 = validateParameter(valid_21626921, JString, required = false,
                                   default = nil)
  if valid_21626921 != nil:
    section.add "X-Amz-Algorithm", valid_21626921
  var valid_21626922 = header.getOrDefault("X-Amz-Signature")
  valid_21626922 = validateParameter(valid_21626922, JString, required = false,
                                   default = nil)
  if valid_21626922 != nil:
    section.add "X-Amz-Signature", valid_21626922
  var valid_21626923 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626923 = validateParameter(valid_21626923, JString, required = false,
                                   default = nil)
  if valid_21626923 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626923
  var valid_21626924 = header.getOrDefault("X-Amz-Credential")
  valid_21626924 = validateParameter(valid_21626924, JString, required = false,
                                   default = nil)
  if valid_21626924 != nil:
    section.add "X-Amz-Credential", valid_21626924
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626926: Call_CreateProvisioningTemplateVersion_21626913;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new version of a fleet provisioning template.
  ## 
  let valid = call_21626926.validator(path, query, header, formData, body, _)
  let scheme = call_21626926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626926.makeUrl(scheme.get, call_21626926.host, call_21626926.base,
                               call_21626926.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626926, uri, valid, _)

proc call*(call_21626927: Call_CreateProvisioningTemplateVersion_21626913;
          templateName: string; body: JsonNode; setAsDefault: bool = false): Recallable =
  ## createProvisioningTemplateVersion
  ## Creates a new version of a fleet provisioning template.
  ##   templateName: string (required)
  ##               : The name of the fleet provisioning template.
  ##   setAsDefault: bool
  ##               : Sets a fleet provision template version as the default version.
  ##   body: JObject (required)
  var path_21626928 = newJObject()
  var query_21626929 = newJObject()
  var body_21626930 = newJObject()
  add(path_21626928, "templateName", newJString(templateName))
  add(query_21626929, "setAsDefault", newJBool(setAsDefault))
  if body != nil:
    body_21626930 = body
  result = call_21626927.call(path_21626928, query_21626929, nil, nil, body_21626930)

var createProvisioningTemplateVersion* = Call_CreateProvisioningTemplateVersion_21626913(
    name: "createProvisioningTemplateVersion", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions",
    validator: validate_CreateProvisioningTemplateVersion_21626914, base: "/",
    makeUrl: url_CreateProvisioningTemplateVersion_21626915,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListProvisioningTemplateVersions_21626896 = ref object of OpenApiRestCall_21625435
proc url_ListProvisioningTemplateVersions_21626898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName"),
               (kind: ConstantSegment, value: "/versions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListProvisioningTemplateVersions_21626897(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## A list of fleet provisioning template versions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
  ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `templateName` field"
  var valid_21626899 = path.getOrDefault("templateName")
  valid_21626899 = validateParameter(valid_21626899, JString, required = true,
                                   default = nil)
  if valid_21626899 != nil:
    section.add "templateName", valid_21626899
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : A token to retrieve the next set of results.
  section = newJObject()
  var valid_21626900 = query.getOrDefault("maxResults")
  valid_21626900 = validateParameter(valid_21626900, JInt, required = false,
                                   default = nil)
  if valid_21626900 != nil:
    section.add "maxResults", valid_21626900
  var valid_21626901 = query.getOrDefault("nextToken")
  valid_21626901 = validateParameter(valid_21626901, JString, required = false,
                                   default = nil)
  if valid_21626901 != nil:
    section.add "nextToken", valid_21626901
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626902 = header.getOrDefault("X-Amz-Date")
  valid_21626902 = validateParameter(valid_21626902, JString, required = false,
                                   default = nil)
  if valid_21626902 != nil:
    section.add "X-Amz-Date", valid_21626902
  var valid_21626903 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626903 = validateParameter(valid_21626903, JString, required = false,
                                   default = nil)
  if valid_21626903 != nil:
    section.add "X-Amz-Security-Token", valid_21626903
  var valid_21626904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626904 = validateParameter(valid_21626904, JString, required = false,
                                   default = nil)
  if valid_21626904 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626904
  var valid_21626905 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626905 = validateParameter(valid_21626905, JString, required = false,
                                   default = nil)
  if valid_21626905 != nil:
    section.add "X-Amz-Algorithm", valid_21626905
  var valid_21626906 = header.getOrDefault("X-Amz-Signature")
  valid_21626906 = validateParameter(valid_21626906, JString, required = false,
                                   default = nil)
  if valid_21626906 != nil:
    section.add "X-Amz-Signature", valid_21626906
  var valid_21626907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626907 = validateParameter(valid_21626907, JString, required = false,
                                   default = nil)
  if valid_21626907 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626907
  var valid_21626908 = header.getOrDefault("X-Amz-Credential")
  valid_21626908 = validateParameter(valid_21626908, JString, required = false,
                                   default = nil)
  if valid_21626908 != nil:
    section.add "X-Amz-Credential", valid_21626908
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626909: Call_ListProvisioningTemplateVersions_21626896;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## A list of fleet provisioning template versions.
  ## 
  let valid = call_21626909.validator(path, query, header, formData, body, _)
  let scheme = call_21626909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626909.makeUrl(scheme.get, call_21626909.host, call_21626909.base,
                               call_21626909.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626909, uri, valid, _)

proc call*(call_21626910: Call_ListProvisioningTemplateVersions_21626896;
          templateName: string; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listProvisioningTemplateVersions
  ## A list of fleet provisioning template versions.
  ##   templateName: string (required)
  ##               : The name of the fleet provisioning template.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : A token to retrieve the next set of results.
  var path_21626911 = newJObject()
  var query_21626912 = newJObject()
  add(path_21626911, "templateName", newJString(templateName))
  add(query_21626912, "maxResults", newJInt(maxResults))
  add(query_21626912, "nextToken", newJString(nextToken))
  result = call_21626910.call(path_21626911, query_21626912, nil, nil, nil)

var listProvisioningTemplateVersions* = Call_ListProvisioningTemplateVersions_21626896(
    name: "listProvisioningTemplateVersions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions",
    validator: validate_ListProvisioningTemplateVersions_21626897, base: "/",
    makeUrl: url_ListProvisioningTemplateVersions_21626898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRoleAlias_21626945 = ref object of OpenApiRestCall_21625435
proc url_UpdateRoleAlias_21626947(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
               (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateRoleAlias_21626946(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a role alias.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
  ##            : The role alias to update.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `roleAlias` field"
  var valid_21626948 = path.getOrDefault("roleAlias")
  valid_21626948 = validateParameter(valid_21626948, JString, required = true,
                                   default = nil)
  if valid_21626948 != nil:
    section.add "roleAlias", valid_21626948
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626949 = header.getOrDefault("X-Amz-Date")
  valid_21626949 = validateParameter(valid_21626949, JString, required = false,
                                   default = nil)
  if valid_21626949 != nil:
    section.add "X-Amz-Date", valid_21626949
  var valid_21626950 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626950 = validateParameter(valid_21626950, JString, required = false,
                                   default = nil)
  if valid_21626950 != nil:
    section.add "X-Amz-Security-Token", valid_21626950
  var valid_21626951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626951 = validateParameter(valid_21626951, JString, required = false,
                                   default = nil)
  if valid_21626951 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626951
  var valid_21626952 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626952 = validateParameter(valid_21626952, JString, required = false,
                                   default = nil)
  if valid_21626952 != nil:
    section.add "X-Amz-Algorithm", valid_21626952
  var valid_21626953 = header.getOrDefault("X-Amz-Signature")
  valid_21626953 = validateParameter(valid_21626953, JString, required = false,
                                   default = nil)
  if valid_21626953 != nil:
    section.add "X-Amz-Signature", valid_21626953
  var valid_21626954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626954 = validateParameter(valid_21626954, JString, required = false,
                                   default = nil)
  if valid_21626954 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626954
  var valid_21626955 = header.getOrDefault("X-Amz-Credential")
  valid_21626955 = validateParameter(valid_21626955, JString, required = false,
                                   default = nil)
  if valid_21626955 != nil:
    section.add "X-Amz-Credential", valid_21626955
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626957: Call_UpdateRoleAlias_21626945; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a role alias.
  ## 
  let valid = call_21626957.validator(path, query, header, formData, body, _)
  let scheme = call_21626957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626957.makeUrl(scheme.get, call_21626957.host, call_21626957.base,
                               call_21626957.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626957, uri, valid, _)

proc call*(call_21626958: Call_UpdateRoleAlias_21626945; body: JsonNode;
          roleAlias: string): Recallable =
  ## updateRoleAlias
  ## Updates a role alias.
  ##   body: JObject (required)
  ##   roleAlias: string (required)
  ##            : The role alias to update.
  var path_21626959 = newJObject()
  var body_21626960 = newJObject()
  if body != nil:
    body_21626960 = body
  add(path_21626959, "roleAlias", newJString(roleAlias))
  result = call_21626958.call(path_21626959, nil, nil, nil, body_21626960)

var updateRoleAlias* = Call_UpdateRoleAlias_21626945(name: "updateRoleAlias",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/role-aliases/{roleAlias}", validator: validate_UpdateRoleAlias_21626946,
    base: "/", makeUrl: url_UpdateRoleAlias_21626947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRoleAlias_21626961 = ref object of OpenApiRestCall_21625435
proc url_CreateRoleAlias_21626963(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
               (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateRoleAlias_21626962(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a role alias.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
  ##            : The role alias that points to a role ARN. This allows you to change the role without having to update the device.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `roleAlias` field"
  var valid_21626964 = path.getOrDefault("roleAlias")
  valid_21626964 = validateParameter(valid_21626964, JString, required = true,
                                   default = nil)
  if valid_21626964 != nil:
    section.add "roleAlias", valid_21626964
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626965 = header.getOrDefault("X-Amz-Date")
  valid_21626965 = validateParameter(valid_21626965, JString, required = false,
                                   default = nil)
  if valid_21626965 != nil:
    section.add "X-Amz-Date", valid_21626965
  var valid_21626966 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626966 = validateParameter(valid_21626966, JString, required = false,
                                   default = nil)
  if valid_21626966 != nil:
    section.add "X-Amz-Security-Token", valid_21626966
  var valid_21626967 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626967 = validateParameter(valid_21626967, JString, required = false,
                                   default = nil)
  if valid_21626967 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626967
  var valid_21626968 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626968 = validateParameter(valid_21626968, JString, required = false,
                                   default = nil)
  if valid_21626968 != nil:
    section.add "X-Amz-Algorithm", valid_21626968
  var valid_21626969 = header.getOrDefault("X-Amz-Signature")
  valid_21626969 = validateParameter(valid_21626969, JString, required = false,
                                   default = nil)
  if valid_21626969 != nil:
    section.add "X-Amz-Signature", valid_21626969
  var valid_21626970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626970 = validateParameter(valid_21626970, JString, required = false,
                                   default = nil)
  if valid_21626970 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626970
  var valid_21626971 = header.getOrDefault("X-Amz-Credential")
  valid_21626971 = validateParameter(valid_21626971, JString, required = false,
                                   default = nil)
  if valid_21626971 != nil:
    section.add "X-Amz-Credential", valid_21626971
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21626973: Call_CreateRoleAlias_21626961; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a role alias.
  ## 
  let valid = call_21626973.validator(path, query, header, formData, body, _)
  let scheme = call_21626973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626973.makeUrl(scheme.get, call_21626973.host, call_21626973.base,
                               call_21626973.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626973, uri, valid, _)

proc call*(call_21626974: Call_CreateRoleAlias_21626961; body: JsonNode;
          roleAlias: string): Recallable =
  ## createRoleAlias
  ## Creates a role alias.
  ##   body: JObject (required)
  ##   roleAlias: string (required)
  ##            : The role alias that points to a role ARN. This allows you to change the role without having to update the device.
  var path_21626975 = newJObject()
  var body_21626976 = newJObject()
  if body != nil:
    body_21626976 = body
  add(path_21626975, "roleAlias", newJString(roleAlias))
  result = call_21626974.call(path_21626975, nil, nil, nil, body_21626976)

var createRoleAlias* = Call_CreateRoleAlias_21626961(name: "createRoleAlias",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/role-aliases/{roleAlias}", validator: validate_CreateRoleAlias_21626962,
    base: "/", makeUrl: url_CreateRoleAlias_21626963,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeRoleAlias_21626931 = ref object of OpenApiRestCall_21625435
proc url_DescribeRoleAlias_21626933(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
               (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeRoleAlias_21626932(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a role alias.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
  ##            : The role alias to describe.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `roleAlias` field"
  var valid_21626934 = path.getOrDefault("roleAlias")
  valid_21626934 = validateParameter(valid_21626934, JString, required = true,
                                   default = nil)
  if valid_21626934 != nil:
    section.add "roleAlias", valid_21626934
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626935 = header.getOrDefault("X-Amz-Date")
  valid_21626935 = validateParameter(valid_21626935, JString, required = false,
                                   default = nil)
  if valid_21626935 != nil:
    section.add "X-Amz-Date", valid_21626935
  var valid_21626936 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626936 = validateParameter(valid_21626936, JString, required = false,
                                   default = nil)
  if valid_21626936 != nil:
    section.add "X-Amz-Security-Token", valid_21626936
  var valid_21626937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626937 = validateParameter(valid_21626937, JString, required = false,
                                   default = nil)
  if valid_21626937 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626937
  var valid_21626938 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626938 = validateParameter(valid_21626938, JString, required = false,
                                   default = nil)
  if valid_21626938 != nil:
    section.add "X-Amz-Algorithm", valid_21626938
  var valid_21626939 = header.getOrDefault("X-Amz-Signature")
  valid_21626939 = validateParameter(valid_21626939, JString, required = false,
                                   default = nil)
  if valid_21626939 != nil:
    section.add "X-Amz-Signature", valid_21626939
  var valid_21626940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626940 = validateParameter(valid_21626940, JString, required = false,
                                   default = nil)
  if valid_21626940 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626940
  var valid_21626941 = header.getOrDefault("X-Amz-Credential")
  valid_21626941 = validateParameter(valid_21626941, JString, required = false,
                                   default = nil)
  if valid_21626941 != nil:
    section.add "X-Amz-Credential", valid_21626941
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626942: Call_DescribeRoleAlias_21626931; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a role alias.
  ## 
  let valid = call_21626942.validator(path, query, header, formData, body, _)
  let scheme = call_21626942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626942.makeUrl(scheme.get, call_21626942.host, call_21626942.base,
                               call_21626942.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626942, uri, valid, _)

proc call*(call_21626943: Call_DescribeRoleAlias_21626931; roleAlias: string): Recallable =
  ## describeRoleAlias
  ## Describes a role alias.
  ##   roleAlias: string (required)
  ##            : The role alias to describe.
  var path_21626944 = newJObject()
  add(path_21626944, "roleAlias", newJString(roleAlias))
  result = call_21626943.call(path_21626944, nil, nil, nil, nil)

var describeRoleAlias* = Call_DescribeRoleAlias_21626931(name: "describeRoleAlias",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/role-aliases/{roleAlias}", validator: validate_DescribeRoleAlias_21626932,
    base: "/", makeUrl: url_DescribeRoleAlias_21626933,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRoleAlias_21626977 = ref object of OpenApiRestCall_21625435
proc url_DeleteRoleAlias_21626979(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
               (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteRoleAlias_21626978(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a role alias
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
  ##            : The role alias to delete.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `roleAlias` field"
  var valid_21626980 = path.getOrDefault("roleAlias")
  valid_21626980 = validateParameter(valid_21626980, JString, required = true,
                                   default = nil)
  if valid_21626980 != nil:
    section.add "roleAlias", valid_21626980
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626981 = header.getOrDefault("X-Amz-Date")
  valid_21626981 = validateParameter(valid_21626981, JString, required = false,
                                   default = nil)
  if valid_21626981 != nil:
    section.add "X-Amz-Date", valid_21626981
  var valid_21626982 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626982 = validateParameter(valid_21626982, JString, required = false,
                                   default = nil)
  if valid_21626982 != nil:
    section.add "X-Amz-Security-Token", valid_21626982
  var valid_21626983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626983 = validateParameter(valid_21626983, JString, required = false,
                                   default = nil)
  if valid_21626983 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626983
  var valid_21626984 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626984 = validateParameter(valid_21626984, JString, required = false,
                                   default = nil)
  if valid_21626984 != nil:
    section.add "X-Amz-Algorithm", valid_21626984
  var valid_21626985 = header.getOrDefault("X-Amz-Signature")
  valid_21626985 = validateParameter(valid_21626985, JString, required = false,
                                   default = nil)
  if valid_21626985 != nil:
    section.add "X-Amz-Signature", valid_21626985
  var valid_21626986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626986 = validateParameter(valid_21626986, JString, required = false,
                                   default = nil)
  if valid_21626986 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626986
  var valid_21626987 = header.getOrDefault("X-Amz-Credential")
  valid_21626987 = validateParameter(valid_21626987, JString, required = false,
                                   default = nil)
  if valid_21626987 != nil:
    section.add "X-Amz-Credential", valid_21626987
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626988: Call_DeleteRoleAlias_21626977; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a role alias
  ## 
  let valid = call_21626988.validator(path, query, header, formData, body, _)
  let scheme = call_21626988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626988.makeUrl(scheme.get, call_21626988.host, call_21626988.base,
                               call_21626988.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626988, uri, valid, _)

proc call*(call_21626989: Call_DeleteRoleAlias_21626977; roleAlias: string): Recallable =
  ## deleteRoleAlias
  ## Deletes a role alias
  ##   roleAlias: string (required)
  ##            : The role alias to delete.
  var path_21626990 = newJObject()
  add(path_21626990, "roleAlias", newJString(roleAlias))
  result = call_21626989.call(path_21626990, nil, nil, nil, nil)

var deleteRoleAlias* = Call_DeleteRoleAlias_21626977(name: "deleteRoleAlias",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/role-aliases/{roleAlias}", validator: validate_DeleteRoleAlias_21626978,
    base: "/", makeUrl: url_DeleteRoleAlias_21626979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateScheduledAudit_21627005 = ref object of OpenApiRestCall_21625435
proc url_CreateScheduledAudit_21627007(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
        "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
               (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateScheduledAudit_21627006(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a scheduled audit that is run at a specified time interval.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
  ##                     : The name you want to give to the scheduled audit. (Max. 128 chars)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `scheduledAuditName` field"
  var valid_21627008 = path.getOrDefault("scheduledAuditName")
  valid_21627008 = validateParameter(valid_21627008, JString, required = true,
                                   default = nil)
  if valid_21627008 != nil:
    section.add "scheduledAuditName", valid_21627008
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627009 = header.getOrDefault("X-Amz-Date")
  valid_21627009 = validateParameter(valid_21627009, JString, required = false,
                                   default = nil)
  if valid_21627009 != nil:
    section.add "X-Amz-Date", valid_21627009
  var valid_21627010 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627010 = validateParameter(valid_21627010, JString, required = false,
                                   default = nil)
  if valid_21627010 != nil:
    section.add "X-Amz-Security-Token", valid_21627010
  var valid_21627011 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627011 = validateParameter(valid_21627011, JString, required = false,
                                   default = nil)
  if valid_21627011 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627011
  var valid_21627012 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627012 = validateParameter(valid_21627012, JString, required = false,
                                   default = nil)
  if valid_21627012 != nil:
    section.add "X-Amz-Algorithm", valid_21627012
  var valid_21627013 = header.getOrDefault("X-Amz-Signature")
  valid_21627013 = validateParameter(valid_21627013, JString, required = false,
                                   default = nil)
  if valid_21627013 != nil:
    section.add "X-Amz-Signature", valid_21627013
  var valid_21627014 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627014 = validateParameter(valid_21627014, JString, required = false,
                                   default = nil)
  if valid_21627014 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627014
  var valid_21627015 = header.getOrDefault("X-Amz-Credential")
  valid_21627015 = validateParameter(valid_21627015, JString, required = false,
                                   default = nil)
  if valid_21627015 != nil:
    section.add "X-Amz-Credential", valid_21627015
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627017: Call_CreateScheduledAudit_21627005; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a scheduled audit that is run at a specified time interval.
  ## 
  let valid = call_21627017.validator(path, query, header, formData, body, _)
  let scheme = call_21627017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627017.makeUrl(scheme.get, call_21627017.host, call_21627017.base,
                               call_21627017.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627017, uri, valid, _)

proc call*(call_21627018: Call_CreateScheduledAudit_21627005;
          scheduledAuditName: string; body: JsonNode): Recallable =
  ## createScheduledAudit
  ## Creates a scheduled audit that is run at a specified time interval.
  ##   scheduledAuditName: string (required)
  ##                     : The name you want to give to the scheduled audit. (Max. 128 chars)
  ##   body: JObject (required)
  var path_21627019 = newJObject()
  var body_21627020 = newJObject()
  add(path_21627019, "scheduledAuditName", newJString(scheduledAuditName))
  if body != nil:
    body_21627020 = body
  result = call_21627018.call(path_21627019, nil, nil, nil, body_21627020)

var createScheduledAudit* = Call_CreateScheduledAudit_21627005(
    name: "createScheduledAudit", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_CreateScheduledAudit_21627006, base: "/",
    makeUrl: url_CreateScheduledAudit_21627007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeScheduledAudit_21626991 = ref object of OpenApiRestCall_21625435
proc url_DescribeScheduledAudit_21626993(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
        "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
               (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeScheduledAudit_21626992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a scheduled audit.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
  ##                     : The name of the scheduled audit whose information you want to get.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `scheduledAuditName` field"
  var valid_21626994 = path.getOrDefault("scheduledAuditName")
  valid_21626994 = validateParameter(valid_21626994, JString, required = true,
                                   default = nil)
  if valid_21626994 != nil:
    section.add "scheduledAuditName", valid_21626994
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626995 = header.getOrDefault("X-Amz-Date")
  valid_21626995 = validateParameter(valid_21626995, JString, required = false,
                                   default = nil)
  if valid_21626995 != nil:
    section.add "X-Amz-Date", valid_21626995
  var valid_21626996 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626996 = validateParameter(valid_21626996, JString, required = false,
                                   default = nil)
  if valid_21626996 != nil:
    section.add "X-Amz-Security-Token", valid_21626996
  var valid_21626997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626997 = validateParameter(valid_21626997, JString, required = false,
                                   default = nil)
  if valid_21626997 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626997
  var valid_21626998 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626998 = validateParameter(valid_21626998, JString, required = false,
                                   default = nil)
  if valid_21626998 != nil:
    section.add "X-Amz-Algorithm", valid_21626998
  var valid_21626999 = header.getOrDefault("X-Amz-Signature")
  valid_21626999 = validateParameter(valid_21626999, JString, required = false,
                                   default = nil)
  if valid_21626999 != nil:
    section.add "X-Amz-Signature", valid_21626999
  var valid_21627000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627000 = validateParameter(valid_21627000, JString, required = false,
                                   default = nil)
  if valid_21627000 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627000
  var valid_21627001 = header.getOrDefault("X-Amz-Credential")
  valid_21627001 = validateParameter(valid_21627001, JString, required = false,
                                   default = nil)
  if valid_21627001 != nil:
    section.add "X-Amz-Credential", valid_21627001
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627002: Call_DescribeScheduledAudit_21626991;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a scheduled audit.
  ## 
  let valid = call_21627002.validator(path, query, header, formData, body, _)
  let scheme = call_21627002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627002.makeUrl(scheme.get, call_21627002.host, call_21627002.base,
                               call_21627002.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627002, uri, valid, _)

proc call*(call_21627003: Call_DescribeScheduledAudit_21626991;
          scheduledAuditName: string): Recallable =
  ## describeScheduledAudit
  ## Gets information about a scheduled audit.
  ##   scheduledAuditName: string (required)
  ##                     : The name of the scheduled audit whose information you want to get.
  var path_21627004 = newJObject()
  add(path_21627004, "scheduledAuditName", newJString(scheduledAuditName))
  result = call_21627003.call(path_21627004, nil, nil, nil, nil)

var describeScheduledAudit* = Call_DescribeScheduledAudit_21626991(
    name: "describeScheduledAudit", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_DescribeScheduledAudit_21626992, base: "/",
    makeUrl: url_DescribeScheduledAudit_21626993,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateScheduledAudit_21627035 = ref object of OpenApiRestCall_21625435
proc url_UpdateScheduledAudit_21627037(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
        "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
               (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateScheduledAudit_21627036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a scheduled audit, including which checks are performed and how often the audit takes place.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
  ##                     : The name of the scheduled audit. (Max. 128 chars)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `scheduledAuditName` field"
  var valid_21627038 = path.getOrDefault("scheduledAuditName")
  valid_21627038 = validateParameter(valid_21627038, JString, required = true,
                                   default = nil)
  if valid_21627038 != nil:
    section.add "scheduledAuditName", valid_21627038
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627039 = header.getOrDefault("X-Amz-Date")
  valid_21627039 = validateParameter(valid_21627039, JString, required = false,
                                   default = nil)
  if valid_21627039 != nil:
    section.add "X-Amz-Date", valid_21627039
  var valid_21627040 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627040 = validateParameter(valid_21627040, JString, required = false,
                                   default = nil)
  if valid_21627040 != nil:
    section.add "X-Amz-Security-Token", valid_21627040
  var valid_21627041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627041 = validateParameter(valid_21627041, JString, required = false,
                                   default = nil)
  if valid_21627041 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627041
  var valid_21627042 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627042 = validateParameter(valid_21627042, JString, required = false,
                                   default = nil)
  if valid_21627042 != nil:
    section.add "X-Amz-Algorithm", valid_21627042
  var valid_21627043 = header.getOrDefault("X-Amz-Signature")
  valid_21627043 = validateParameter(valid_21627043, JString, required = false,
                                   default = nil)
  if valid_21627043 != nil:
    section.add "X-Amz-Signature", valid_21627043
  var valid_21627044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627044 = validateParameter(valid_21627044, JString, required = false,
                                   default = nil)
  if valid_21627044 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627044
  var valid_21627045 = header.getOrDefault("X-Amz-Credential")
  valid_21627045 = validateParameter(valid_21627045, JString, required = false,
                                   default = nil)
  if valid_21627045 != nil:
    section.add "X-Amz-Credential", valid_21627045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627047: Call_UpdateScheduledAudit_21627035; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a scheduled audit, including which checks are performed and how often the audit takes place.
  ## 
  let valid = call_21627047.validator(path, query, header, formData, body, _)
  let scheme = call_21627047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627047.makeUrl(scheme.get, call_21627047.host, call_21627047.base,
                               call_21627047.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627047, uri, valid, _)

proc call*(call_21627048: Call_UpdateScheduledAudit_21627035;
          scheduledAuditName: string; body: JsonNode): Recallable =
  ## updateScheduledAudit
  ## Updates a scheduled audit, including which checks are performed and how often the audit takes place.
  ##   scheduledAuditName: string (required)
  ##                     : The name of the scheduled audit. (Max. 128 chars)
  ##   body: JObject (required)
  var path_21627049 = newJObject()
  var body_21627050 = newJObject()
  add(path_21627049, "scheduledAuditName", newJString(scheduledAuditName))
  if body != nil:
    body_21627050 = body
  result = call_21627048.call(path_21627049, nil, nil, nil, body_21627050)

var updateScheduledAudit* = Call_UpdateScheduledAudit_21627035(
    name: "updateScheduledAudit", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_UpdateScheduledAudit_21627036, base: "/",
    makeUrl: url_UpdateScheduledAudit_21627037,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteScheduledAudit_21627021 = ref object of OpenApiRestCall_21625435
proc url_DeleteScheduledAudit_21627023(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
        "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
               (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteScheduledAudit_21627022(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a scheduled audit.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
  ##                     : The name of the scheduled audit you want to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `scheduledAuditName` field"
  var valid_21627024 = path.getOrDefault("scheduledAuditName")
  valid_21627024 = validateParameter(valid_21627024, JString, required = true,
                                   default = nil)
  if valid_21627024 != nil:
    section.add "scheduledAuditName", valid_21627024
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627025 = header.getOrDefault("X-Amz-Date")
  valid_21627025 = validateParameter(valid_21627025, JString, required = false,
                                   default = nil)
  if valid_21627025 != nil:
    section.add "X-Amz-Date", valid_21627025
  var valid_21627026 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627026 = validateParameter(valid_21627026, JString, required = false,
                                   default = nil)
  if valid_21627026 != nil:
    section.add "X-Amz-Security-Token", valid_21627026
  var valid_21627027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627027 = validateParameter(valid_21627027, JString, required = false,
                                   default = nil)
  if valid_21627027 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627027
  var valid_21627028 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627028 = validateParameter(valid_21627028, JString, required = false,
                                   default = nil)
  if valid_21627028 != nil:
    section.add "X-Amz-Algorithm", valid_21627028
  var valid_21627029 = header.getOrDefault("X-Amz-Signature")
  valid_21627029 = validateParameter(valid_21627029, JString, required = false,
                                   default = nil)
  if valid_21627029 != nil:
    section.add "X-Amz-Signature", valid_21627029
  var valid_21627030 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627030 = validateParameter(valid_21627030, JString, required = false,
                                   default = nil)
  if valid_21627030 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627030
  var valid_21627031 = header.getOrDefault("X-Amz-Credential")
  valid_21627031 = validateParameter(valid_21627031, JString, required = false,
                                   default = nil)
  if valid_21627031 != nil:
    section.add "X-Amz-Credential", valid_21627031
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627032: Call_DeleteScheduledAudit_21627021; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a scheduled audit.
  ## 
  let valid = call_21627032.validator(path, query, header, formData, body, _)
  let scheme = call_21627032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627032.makeUrl(scheme.get, call_21627032.host, call_21627032.base,
                               call_21627032.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627032, uri, valid, _)

proc call*(call_21627033: Call_DeleteScheduledAudit_21627021;
          scheduledAuditName: string): Recallable =
  ## deleteScheduledAudit
  ## Deletes a scheduled audit.
  ##   scheduledAuditName: string (required)
  ##                     : The name of the scheduled audit you want to delete.
  var path_21627034 = newJObject()
  add(path_21627034, "scheduledAuditName", newJString(scheduledAuditName))
  result = call_21627033.call(path_21627034, nil, nil, nil, nil)

var deleteScheduledAudit* = Call_DeleteScheduledAudit_21627021(
    name: "deleteScheduledAudit", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_DeleteScheduledAudit_21627022, base: "/",
    makeUrl: url_DeleteScheduledAudit_21627023,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateSecurityProfile_21627065 = ref object of OpenApiRestCall_21625435
proc url_CreateSecurityProfile_21627067(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
        "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
               (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateSecurityProfile_21627066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a Device Defender security profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
  ##                      : The name you are giving to the security profile.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_21627068 = path.getOrDefault("securityProfileName")
  valid_21627068 = validateParameter(valid_21627068, JString, required = true,
                                   default = nil)
  if valid_21627068 != nil:
    section.add "securityProfileName", valid_21627068
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627069 = header.getOrDefault("X-Amz-Date")
  valid_21627069 = validateParameter(valid_21627069, JString, required = false,
                                   default = nil)
  if valid_21627069 != nil:
    section.add "X-Amz-Date", valid_21627069
  var valid_21627070 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627070 = validateParameter(valid_21627070, JString, required = false,
                                   default = nil)
  if valid_21627070 != nil:
    section.add "X-Amz-Security-Token", valid_21627070
  var valid_21627071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627071 = validateParameter(valid_21627071, JString, required = false,
                                   default = nil)
  if valid_21627071 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627071
  var valid_21627072 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627072 = validateParameter(valid_21627072, JString, required = false,
                                   default = nil)
  if valid_21627072 != nil:
    section.add "X-Amz-Algorithm", valid_21627072
  var valid_21627073 = header.getOrDefault("X-Amz-Signature")
  valid_21627073 = validateParameter(valid_21627073, JString, required = false,
                                   default = nil)
  if valid_21627073 != nil:
    section.add "X-Amz-Signature", valid_21627073
  var valid_21627074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627074 = validateParameter(valid_21627074, JString, required = false,
                                   default = nil)
  if valid_21627074 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627074
  var valid_21627075 = header.getOrDefault("X-Amz-Credential")
  valid_21627075 = validateParameter(valid_21627075, JString, required = false,
                                   default = nil)
  if valid_21627075 != nil:
    section.add "X-Amz-Credential", valid_21627075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627077: Call_CreateSecurityProfile_21627065;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a Device Defender security profile.
  ## 
  let valid = call_21627077.validator(path, query, header, formData, body, _)
  let scheme = call_21627077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627077.makeUrl(scheme.get, call_21627077.host, call_21627077.base,
                               call_21627077.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627077, uri, valid, _)

proc call*(call_21627078: Call_CreateSecurityProfile_21627065; body: JsonNode;
          securityProfileName: string): Recallable =
  ## createSecurityProfile
  ## Creates a Device Defender security profile.
  ##   body: JObject (required)
  ##   securityProfileName: string (required)
  ##                      : The name you are giving to the security profile.
  var path_21627079 = newJObject()
  var body_21627080 = newJObject()
  if body != nil:
    body_21627080 = body
  add(path_21627079, "securityProfileName", newJString(securityProfileName))
  result = call_21627078.call(path_21627079, nil, nil, nil, body_21627080)

var createSecurityProfile* = Call_CreateSecurityProfile_21627065(
    name: "createSecurityProfile", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}",
    validator: validate_CreateSecurityProfile_21627066, base: "/",
    makeUrl: url_CreateSecurityProfile_21627067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeSecurityProfile_21627051 = ref object of OpenApiRestCall_21625435
proc url_DescribeSecurityProfile_21627053(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
        "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
               (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeSecurityProfile_21627052(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a Device Defender security profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
  ##                      : The name of the security profile whose information you want to get.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_21627054 = path.getOrDefault("securityProfileName")
  valid_21627054 = validateParameter(valid_21627054, JString, required = true,
                                   default = nil)
  if valid_21627054 != nil:
    section.add "securityProfileName", valid_21627054
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627055 = header.getOrDefault("X-Amz-Date")
  valid_21627055 = validateParameter(valid_21627055, JString, required = false,
                                   default = nil)
  if valid_21627055 != nil:
    section.add "X-Amz-Date", valid_21627055
  var valid_21627056 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627056 = validateParameter(valid_21627056, JString, required = false,
                                   default = nil)
  if valid_21627056 != nil:
    section.add "X-Amz-Security-Token", valid_21627056
  var valid_21627057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627057 = validateParameter(valid_21627057, JString, required = false,
                                   default = nil)
  if valid_21627057 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627057
  var valid_21627058 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627058 = validateParameter(valid_21627058, JString, required = false,
                                   default = nil)
  if valid_21627058 != nil:
    section.add "X-Amz-Algorithm", valid_21627058
  var valid_21627059 = header.getOrDefault("X-Amz-Signature")
  valid_21627059 = validateParameter(valid_21627059, JString, required = false,
                                   default = nil)
  if valid_21627059 != nil:
    section.add "X-Amz-Signature", valid_21627059
  var valid_21627060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627060 = validateParameter(valid_21627060, JString, required = false,
                                   default = nil)
  if valid_21627060 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627060
  var valid_21627061 = header.getOrDefault("X-Amz-Credential")
  valid_21627061 = validateParameter(valid_21627061, JString, required = false,
                                   default = nil)
  if valid_21627061 != nil:
    section.add "X-Amz-Credential", valid_21627061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627062: Call_DescribeSecurityProfile_21627051;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a Device Defender security profile.
  ## 
  let valid = call_21627062.validator(path, query, header, formData, body, _)
  let scheme = call_21627062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627062.makeUrl(scheme.get, call_21627062.host, call_21627062.base,
                               call_21627062.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627062, uri, valid, _)

proc call*(call_21627063: Call_DescribeSecurityProfile_21627051;
          securityProfileName: string): Recallable =
  ## describeSecurityProfile
  ## Gets information about a Device Defender security profile.
  ##   securityProfileName: string (required)
  ##                      : The name of the security profile whose information you want to get.
  var path_21627064 = newJObject()
  add(path_21627064, "securityProfileName", newJString(securityProfileName))
  result = call_21627063.call(path_21627064, nil, nil, nil, nil)

var describeSecurityProfile* = Call_DescribeSecurityProfile_21627051(
    name: "describeSecurityProfile", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}",
    validator: validate_DescribeSecurityProfile_21627052, base: "/",
    makeUrl: url_DescribeSecurityProfile_21627053,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateSecurityProfile_21627097 = ref object of OpenApiRestCall_21625435
proc url_UpdateSecurityProfile_21627099(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
        "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
               (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateSecurityProfile_21627098(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a Device Defender security profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
  ##                      : The name of the security profile you want to update.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_21627100 = path.getOrDefault("securityProfileName")
  valid_21627100 = validateParameter(valid_21627100, JString, required = true,
                                   default = nil)
  if valid_21627100 != nil:
    section.add "securityProfileName", valid_21627100
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
  ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  section = newJObject()
  var valid_21627101 = query.getOrDefault("expectedVersion")
  valid_21627101 = validateParameter(valid_21627101, JInt, required = false,
                                   default = nil)
  if valid_21627101 != nil:
    section.add "expectedVersion", valid_21627101
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627102 = header.getOrDefault("X-Amz-Date")
  valid_21627102 = validateParameter(valid_21627102, JString, required = false,
                                   default = nil)
  if valid_21627102 != nil:
    section.add "X-Amz-Date", valid_21627102
  var valid_21627103 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627103 = validateParameter(valid_21627103, JString, required = false,
                                   default = nil)
  if valid_21627103 != nil:
    section.add "X-Amz-Security-Token", valid_21627103
  var valid_21627104 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627104 = validateParameter(valid_21627104, JString, required = false,
                                   default = nil)
  if valid_21627104 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627104
  var valid_21627105 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627105 = validateParameter(valid_21627105, JString, required = false,
                                   default = nil)
  if valid_21627105 != nil:
    section.add "X-Amz-Algorithm", valid_21627105
  var valid_21627106 = header.getOrDefault("X-Amz-Signature")
  valid_21627106 = validateParameter(valid_21627106, JString, required = false,
                                   default = nil)
  if valid_21627106 != nil:
    section.add "X-Amz-Signature", valid_21627106
  var valid_21627107 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627107 = validateParameter(valid_21627107, JString, required = false,
                                   default = nil)
  if valid_21627107 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627107
  var valid_21627108 = header.getOrDefault("X-Amz-Credential")
  valid_21627108 = validateParameter(valid_21627108, JString, required = false,
                                   default = nil)
  if valid_21627108 != nil:
    section.add "X-Amz-Credential", valid_21627108
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627110: Call_UpdateSecurityProfile_21627097;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a Device Defender security profile.
  ## 
  let valid = call_21627110.validator(path, query, header, formData, body, _)
  let scheme = call_21627110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627110.makeUrl(scheme.get, call_21627110.host, call_21627110.base,
                               call_21627110.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627110, uri, valid, _)

proc call*(call_21627111: Call_UpdateSecurityProfile_21627097; body: JsonNode;
          securityProfileName: string; expectedVersion: int = 0): Recallable =
  ## updateSecurityProfile
  ## Updates a Device Defender security profile.
  ##   expectedVersion: int
  ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  ##   body: JObject (required)
  ##   securityProfileName: string (required)
  ##                      : The name of the security profile you want to update.
  var path_21627112 = newJObject()
  var query_21627113 = newJObject()
  var body_21627114 = newJObject()
  add(query_21627113, "expectedVersion", newJInt(expectedVersion))
  if body != nil:
    body_21627114 = body
  add(path_21627112, "securityProfileName", newJString(securityProfileName))
  result = call_21627111.call(path_21627112, query_21627113, nil, nil, body_21627114)

var updateSecurityProfile* = Call_UpdateSecurityProfile_21627097(
    name: "updateSecurityProfile", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}",
    validator: validate_UpdateSecurityProfile_21627098, base: "/",
    makeUrl: url_UpdateSecurityProfile_21627099,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteSecurityProfile_21627081 = ref object of OpenApiRestCall_21625435
proc url_DeleteSecurityProfile_21627083(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
        "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
               (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteSecurityProfile_21627082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a Device Defender security profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
  ##                      : The name of the security profile to be deleted.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_21627084 = path.getOrDefault("securityProfileName")
  valid_21627084 = validateParameter(valid_21627084, JString, required = true,
                                   default = nil)
  if valid_21627084 != nil:
    section.add "securityProfileName", valid_21627084
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
  ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  section = newJObject()
  var valid_21627085 = query.getOrDefault("expectedVersion")
  valid_21627085 = validateParameter(valid_21627085, JInt, required = false,
                                   default = nil)
  if valid_21627085 != nil:
    section.add "expectedVersion", valid_21627085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627086 = header.getOrDefault("X-Amz-Date")
  valid_21627086 = validateParameter(valid_21627086, JString, required = false,
                                   default = nil)
  if valid_21627086 != nil:
    section.add "X-Amz-Date", valid_21627086
  var valid_21627087 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627087 = validateParameter(valid_21627087, JString, required = false,
                                   default = nil)
  if valid_21627087 != nil:
    section.add "X-Amz-Security-Token", valid_21627087
  var valid_21627088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627088 = validateParameter(valid_21627088, JString, required = false,
                                   default = nil)
  if valid_21627088 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627088
  var valid_21627089 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627089 = validateParameter(valid_21627089, JString, required = false,
                                   default = nil)
  if valid_21627089 != nil:
    section.add "X-Amz-Algorithm", valid_21627089
  var valid_21627090 = header.getOrDefault("X-Amz-Signature")
  valid_21627090 = validateParameter(valid_21627090, JString, required = false,
                                   default = nil)
  if valid_21627090 != nil:
    section.add "X-Amz-Signature", valid_21627090
  var valid_21627091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627091 = validateParameter(valid_21627091, JString, required = false,
                                   default = nil)
  if valid_21627091 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627091
  var valid_21627092 = header.getOrDefault("X-Amz-Credential")
  valid_21627092 = validateParameter(valid_21627092, JString, required = false,
                                   default = nil)
  if valid_21627092 != nil:
    section.add "X-Amz-Credential", valid_21627092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627093: Call_DeleteSecurityProfile_21627081;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a Device Defender security profile.
  ## 
  let valid = call_21627093.validator(path, query, header, formData, body, _)
  let scheme = call_21627093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627093.makeUrl(scheme.get, call_21627093.host, call_21627093.base,
                               call_21627093.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627093, uri, valid, _)

proc call*(call_21627094: Call_DeleteSecurityProfile_21627081;
          securityProfileName: string; expectedVersion: int = 0): Recallable =
  ## deleteSecurityProfile
  ## Deletes a Device Defender security profile.
  ##   expectedVersion: int
  ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  ##   securityProfileName: string (required)
  ##                      : The name of the security profile to be deleted.
  var path_21627095 = newJObject()
  var query_21627096 = newJObject()
  add(query_21627096, "expectedVersion", newJInt(expectedVersion))
  add(path_21627095, "securityProfileName", newJString(securityProfileName))
  result = call_21627094.call(path_21627095, query_21627096, nil, nil, nil)

var deleteSecurityProfile* = Call_DeleteSecurityProfile_21627081(
    name: "deleteSecurityProfile", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}",
    validator: validate_DeleteSecurityProfile_21627082, base: "/",
    makeUrl: url_DeleteSecurityProfile_21627083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateStream_21627129 = ref object of OpenApiRestCall_21625435
proc url_UpdateStream_21627131(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
               (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateStream_21627130(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Updates an existing stream. The stream version will be incremented by one.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
  ##           : The stream ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `streamId` field"
  var valid_21627132 = path.getOrDefault("streamId")
  valid_21627132 = validateParameter(valid_21627132, JString, required = true,
                                   default = nil)
  if valid_21627132 != nil:
    section.add "streamId", valid_21627132
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627133 = header.getOrDefault("X-Amz-Date")
  valid_21627133 = validateParameter(valid_21627133, JString, required = false,
                                   default = nil)
  if valid_21627133 != nil:
    section.add "X-Amz-Date", valid_21627133
  var valid_21627134 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627134 = validateParameter(valid_21627134, JString, required = false,
                                   default = nil)
  if valid_21627134 != nil:
    section.add "X-Amz-Security-Token", valid_21627134
  var valid_21627135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627135 = validateParameter(valid_21627135, JString, required = false,
                                   default = nil)
  if valid_21627135 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627135
  var valid_21627136 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627136 = validateParameter(valid_21627136, JString, required = false,
                                   default = nil)
  if valid_21627136 != nil:
    section.add "X-Amz-Algorithm", valid_21627136
  var valid_21627137 = header.getOrDefault("X-Amz-Signature")
  valid_21627137 = validateParameter(valid_21627137, JString, required = false,
                                   default = nil)
  if valid_21627137 != nil:
    section.add "X-Amz-Signature", valid_21627137
  var valid_21627138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627138 = validateParameter(valid_21627138, JString, required = false,
                                   default = nil)
  if valid_21627138 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627138
  var valid_21627139 = header.getOrDefault("X-Amz-Credential")
  valid_21627139 = validateParameter(valid_21627139, JString, required = false,
                                   default = nil)
  if valid_21627139 != nil:
    section.add "X-Amz-Credential", valid_21627139
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627141: Call_UpdateStream_21627129; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates an existing stream. The stream version will be incremented by one.
  ## 
  let valid = call_21627141.validator(path, query, header, formData, body, _)
  let scheme = call_21627141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627141.makeUrl(scheme.get, call_21627141.host, call_21627141.base,
                               call_21627141.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627141, uri, valid, _)

proc call*(call_21627142: Call_UpdateStream_21627129; body: JsonNode;
          streamId: string): Recallable =
  ## updateStream
  ## Updates an existing stream. The stream version will be incremented by one.
  ##   body: JObject (required)
  ##   streamId: string (required)
  ##           : The stream ID.
  var path_21627143 = newJObject()
  var body_21627144 = newJObject()
  if body != nil:
    body_21627144 = body
  add(path_21627143, "streamId", newJString(streamId))
  result = call_21627142.call(path_21627143, nil, nil, nil, body_21627144)

var updateStream* = Call_UpdateStream_21627129(name: "updateStream",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_UpdateStream_21627130,
    base: "/", makeUrl: url_UpdateStream_21627131,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateStream_21627145 = ref object of OpenApiRestCall_21625435
proc url_CreateStream_21627147(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
               (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateStream_21627146(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
  ##           : The stream ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `streamId` field"
  var valid_21627148 = path.getOrDefault("streamId")
  valid_21627148 = validateParameter(valid_21627148, JString, required = true,
                                   default = nil)
  if valid_21627148 != nil:
    section.add "streamId", valid_21627148
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627149 = header.getOrDefault("X-Amz-Date")
  valid_21627149 = validateParameter(valid_21627149, JString, required = false,
                                   default = nil)
  if valid_21627149 != nil:
    section.add "X-Amz-Date", valid_21627149
  var valid_21627150 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627150 = validateParameter(valid_21627150, JString, required = false,
                                   default = nil)
  if valid_21627150 != nil:
    section.add "X-Amz-Security-Token", valid_21627150
  var valid_21627151 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627151 = validateParameter(valid_21627151, JString, required = false,
                                   default = nil)
  if valid_21627151 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627151
  var valid_21627152 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627152 = validateParameter(valid_21627152, JString, required = false,
                                   default = nil)
  if valid_21627152 != nil:
    section.add "X-Amz-Algorithm", valid_21627152
  var valid_21627153 = header.getOrDefault("X-Amz-Signature")
  valid_21627153 = validateParameter(valid_21627153, JString, required = false,
                                   default = nil)
  if valid_21627153 != nil:
    section.add "X-Amz-Signature", valid_21627153
  var valid_21627154 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627154 = validateParameter(valid_21627154, JString, required = false,
                                   default = nil)
  if valid_21627154 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627154
  var valid_21627155 = header.getOrDefault("X-Amz-Credential")
  valid_21627155 = validateParameter(valid_21627155, JString, required = false,
                                   default = nil)
  if valid_21627155 != nil:
    section.add "X-Amz-Credential", valid_21627155
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627157: Call_CreateStream_21627145; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.
  ## 
  let valid = call_21627157.validator(path, query, header, formData, body, _)
  let scheme = call_21627157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627157.makeUrl(scheme.get, call_21627157.host, call_21627157.base,
                               call_21627157.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627157, uri, valid, _)

proc call*(call_21627158: Call_CreateStream_21627145; body: JsonNode;
          streamId: string): Recallable =
  ## createStream
  ## Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.
  ##   body: JObject (required)
  ##   streamId: string (required)
  ##           : The stream ID.
  var path_21627159 = newJObject()
  var body_21627160 = newJObject()
  if body != nil:
    body_21627160 = body
  add(path_21627159, "streamId", newJString(streamId))
  result = call_21627158.call(path_21627159, nil, nil, nil, body_21627160)

var createStream* = Call_CreateStream_21627145(name: "createStream",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_CreateStream_21627146,
    base: "/", makeUrl: url_CreateStream_21627147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeStream_21627115 = ref object of OpenApiRestCall_21625435
proc url_DescribeStream_21627117(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
               (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeStream_21627116(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a stream.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
  ##           : The stream ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `streamId` field"
  var valid_21627118 = path.getOrDefault("streamId")
  valid_21627118 = validateParameter(valid_21627118, JString, required = true,
                                   default = nil)
  if valid_21627118 != nil:
    section.add "streamId", valid_21627118
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627119 = header.getOrDefault("X-Amz-Date")
  valid_21627119 = validateParameter(valid_21627119, JString, required = false,
                                   default = nil)
  if valid_21627119 != nil:
    section.add "X-Amz-Date", valid_21627119
  var valid_21627120 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627120 = validateParameter(valid_21627120, JString, required = false,
                                   default = nil)
  if valid_21627120 != nil:
    section.add "X-Amz-Security-Token", valid_21627120
  var valid_21627121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627121 = validateParameter(valid_21627121, JString, required = false,
                                   default = nil)
  if valid_21627121 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627121
  var valid_21627122 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627122 = validateParameter(valid_21627122, JString, required = false,
                                   default = nil)
  if valid_21627122 != nil:
    section.add "X-Amz-Algorithm", valid_21627122
  var valid_21627123 = header.getOrDefault("X-Amz-Signature")
  valid_21627123 = validateParameter(valid_21627123, JString, required = false,
                                   default = nil)
  if valid_21627123 != nil:
    section.add "X-Amz-Signature", valid_21627123
  var valid_21627124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627124 = validateParameter(valid_21627124, JString, required = false,
                                   default = nil)
  if valid_21627124 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627124
  var valid_21627125 = header.getOrDefault("X-Amz-Credential")
  valid_21627125 = validateParameter(valid_21627125, JString, required = false,
                                   default = nil)
  if valid_21627125 != nil:
    section.add "X-Amz-Credential", valid_21627125
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627126: Call_DescribeStream_21627115; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a stream.
  ## 
  let valid = call_21627126.validator(path, query, header, formData, body, _)
  let scheme = call_21627126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627126.makeUrl(scheme.get, call_21627126.host, call_21627126.base,
                               call_21627126.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627126, uri, valid, _)

proc call*(call_21627127: Call_DescribeStream_21627115; streamId: string): Recallable =
  ## describeStream
  ## Gets information about a stream.
  ##   streamId: string (required)
  ##           : The stream ID.
  var path_21627128 = newJObject()
  add(path_21627128, "streamId", newJString(streamId))
  result = call_21627127.call(path_21627128, nil, nil, nil, nil)

var describeStream* = Call_DescribeStream_21627115(name: "describeStream",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_DescribeStream_21627116,
    base: "/", makeUrl: url_DescribeStream_21627117,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteStream_21627161 = ref object of OpenApiRestCall_21625435
proc url_DeleteStream_21627163(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
               (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteStream_21627162(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a stream.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
  ##           : The stream ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `streamId` field"
  var valid_21627164 = path.getOrDefault("streamId")
  valid_21627164 = validateParameter(valid_21627164, JString, required = true,
                                   default = nil)
  if valid_21627164 != nil:
    section.add "streamId", valid_21627164
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627165 = header.getOrDefault("X-Amz-Date")
  valid_21627165 = validateParameter(valid_21627165, JString, required = false,
                                   default = nil)
  if valid_21627165 != nil:
    section.add "X-Amz-Date", valid_21627165
  var valid_21627166 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627166 = validateParameter(valid_21627166, JString, required = false,
                                   default = nil)
  if valid_21627166 != nil:
    section.add "X-Amz-Security-Token", valid_21627166
  var valid_21627167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627167 = validateParameter(valid_21627167, JString, required = false,
                                   default = nil)
  if valid_21627167 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627167
  var valid_21627168 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627168 = validateParameter(valid_21627168, JString, required = false,
                                   default = nil)
  if valid_21627168 != nil:
    section.add "X-Amz-Algorithm", valid_21627168
  var valid_21627169 = header.getOrDefault("X-Amz-Signature")
  valid_21627169 = validateParameter(valid_21627169, JString, required = false,
                                   default = nil)
  if valid_21627169 != nil:
    section.add "X-Amz-Signature", valid_21627169
  var valid_21627170 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627170 = validateParameter(valid_21627170, JString, required = false,
                                   default = nil)
  if valid_21627170 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627170
  var valid_21627171 = header.getOrDefault("X-Amz-Credential")
  valid_21627171 = validateParameter(valid_21627171, JString, required = false,
                                   default = nil)
  if valid_21627171 != nil:
    section.add "X-Amz-Credential", valid_21627171
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627172: Call_DeleteStream_21627161; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a stream.
  ## 
  let valid = call_21627172.validator(path, query, header, formData, body, _)
  let scheme = call_21627172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627172.makeUrl(scheme.get, call_21627172.host, call_21627172.base,
                               call_21627172.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627172, uri, valid, _)

proc call*(call_21627173: Call_DeleteStream_21627161; streamId: string): Recallable =
  ## deleteStream
  ## Deletes a stream.
  ##   streamId: string (required)
  ##           : The stream ID.
  var path_21627174 = newJObject()
  add(path_21627174, "streamId", newJString(streamId))
  result = call_21627173.call(path_21627174, nil, nil, nil, nil)

var deleteStream* = Call_DeleteStream_21627161(name: "deleteStream",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_DeleteStream_21627162,
    base: "/", makeUrl: url_DeleteStream_21627163,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateThing_21627189 = ref object of OpenApiRestCall_21625435
proc url_CreateThing_21627191(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateThing_21627190(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing to create.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21627192 = path.getOrDefault("thingName")
  valid_21627192 = validateParameter(valid_21627192, JString, required = true,
                                   default = nil)
  if valid_21627192 != nil:
    section.add "thingName", valid_21627192
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627193 = header.getOrDefault("X-Amz-Date")
  valid_21627193 = validateParameter(valid_21627193, JString, required = false,
                                   default = nil)
  if valid_21627193 != nil:
    section.add "X-Amz-Date", valid_21627193
  var valid_21627194 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627194 = validateParameter(valid_21627194, JString, required = false,
                                   default = nil)
  if valid_21627194 != nil:
    section.add "X-Amz-Security-Token", valid_21627194
  var valid_21627195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627195 = validateParameter(valid_21627195, JString, required = false,
                                   default = nil)
  if valid_21627195 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627195
  var valid_21627196 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627196 = validateParameter(valid_21627196, JString, required = false,
                                   default = nil)
  if valid_21627196 != nil:
    section.add "X-Amz-Algorithm", valid_21627196
  var valid_21627197 = header.getOrDefault("X-Amz-Signature")
  valid_21627197 = validateParameter(valid_21627197, JString, required = false,
                                   default = nil)
  if valid_21627197 != nil:
    section.add "X-Amz-Signature", valid_21627197
  var valid_21627198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627198 = validateParameter(valid_21627198, JString, required = false,
                                   default = nil)
  if valid_21627198 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627198
  var valid_21627199 = header.getOrDefault("X-Amz-Credential")
  valid_21627199 = validateParameter(valid_21627199, JString, required = false,
                                   default = nil)
  if valid_21627199 != nil:
    section.add "X-Amz-Credential", valid_21627199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627201: Call_CreateThing_21627189; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ## 
  let valid = call_21627201.validator(path, query, header, formData, body, _)
  let scheme = call_21627201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627201.makeUrl(scheme.get, call_21627201.host, call_21627201.base,
                               call_21627201.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627201, uri, valid, _)

proc call*(call_21627202: Call_CreateThing_21627189; thingName: string;
          body: JsonNode): Recallable =
  ## createThing
  ## <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ##   thingName: string (required)
  ##            : The name of the thing to create.
  ##   body: JObject (required)
  var path_21627203 = newJObject()
  var body_21627204 = newJObject()
  add(path_21627203, "thingName", newJString(thingName))
  if body != nil:
    body_21627204 = body
  result = call_21627202.call(path_21627203, nil, nil, nil, body_21627204)

var createThing* = Call_CreateThing_21627189(name: "createThing",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_CreateThing_21627190,
    base: "/", makeUrl: url_CreateThing_21627191,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThing_21627175 = ref object of OpenApiRestCall_21625435
proc url_DescribeThing_21627177(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThing_21627176(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Gets information about the specified thing.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21627178 = path.getOrDefault("thingName")
  valid_21627178 = validateParameter(valid_21627178, JString, required = true,
                                   default = nil)
  if valid_21627178 != nil:
    section.add "thingName", valid_21627178
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627179 = header.getOrDefault("X-Amz-Date")
  valid_21627179 = validateParameter(valid_21627179, JString, required = false,
                                   default = nil)
  if valid_21627179 != nil:
    section.add "X-Amz-Date", valid_21627179
  var valid_21627180 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627180 = validateParameter(valid_21627180, JString, required = false,
                                   default = nil)
  if valid_21627180 != nil:
    section.add "X-Amz-Security-Token", valid_21627180
  var valid_21627181 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627181 = validateParameter(valid_21627181, JString, required = false,
                                   default = nil)
  if valid_21627181 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627181
  var valid_21627182 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627182 = validateParameter(valid_21627182, JString, required = false,
                                   default = nil)
  if valid_21627182 != nil:
    section.add "X-Amz-Algorithm", valid_21627182
  var valid_21627183 = header.getOrDefault("X-Amz-Signature")
  valid_21627183 = validateParameter(valid_21627183, JString, required = false,
                                   default = nil)
  if valid_21627183 != nil:
    section.add "X-Amz-Signature", valid_21627183
  var valid_21627184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627184 = validateParameter(valid_21627184, JString, required = false,
                                   default = nil)
  if valid_21627184 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627184
  var valid_21627185 = header.getOrDefault("X-Amz-Credential")
  valid_21627185 = validateParameter(valid_21627185, JString, required = false,
                                   default = nil)
  if valid_21627185 != nil:
    section.add "X-Amz-Credential", valid_21627185
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627186: Call_DescribeThing_21627175; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified thing.
  ## 
  let valid = call_21627186.validator(path, query, header, formData, body, _)
  let scheme = call_21627186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627186.makeUrl(scheme.get, call_21627186.host, call_21627186.base,
                               call_21627186.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627186, uri, valid, _)

proc call*(call_21627187: Call_DescribeThing_21627175; thingName: string): Recallable =
  ## describeThing
  ## Gets information about the specified thing.
  ##   thingName: string (required)
  ##            : The name of the thing.
  var path_21627188 = newJObject()
  add(path_21627188, "thingName", newJString(thingName))
  result = call_21627187.call(path_21627188, nil, nil, nil, nil)

var describeThing* = Call_DescribeThing_21627175(name: "describeThing",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_DescribeThing_21627176,
    base: "/", makeUrl: url_DescribeThing_21627177,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateThing_21627221 = ref object of OpenApiRestCall_21625435
proc url_UpdateThing_21627223(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateThing_21627222(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the data for a thing.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing to update.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21627224 = path.getOrDefault("thingName")
  valid_21627224 = validateParameter(valid_21627224, JString, required = true,
                                   default = nil)
  if valid_21627224 != nil:
    section.add "thingName", valid_21627224
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627225 = header.getOrDefault("X-Amz-Date")
  valid_21627225 = validateParameter(valid_21627225, JString, required = false,
                                   default = nil)
  if valid_21627225 != nil:
    section.add "X-Amz-Date", valid_21627225
  var valid_21627226 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627226 = validateParameter(valid_21627226, JString, required = false,
                                   default = nil)
  if valid_21627226 != nil:
    section.add "X-Amz-Security-Token", valid_21627226
  var valid_21627227 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627227 = validateParameter(valid_21627227, JString, required = false,
                                   default = nil)
  if valid_21627227 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627227
  var valid_21627228 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627228 = validateParameter(valid_21627228, JString, required = false,
                                   default = nil)
  if valid_21627228 != nil:
    section.add "X-Amz-Algorithm", valid_21627228
  var valid_21627229 = header.getOrDefault("X-Amz-Signature")
  valid_21627229 = validateParameter(valid_21627229, JString, required = false,
                                   default = nil)
  if valid_21627229 != nil:
    section.add "X-Amz-Signature", valid_21627229
  var valid_21627230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627230 = validateParameter(valid_21627230, JString, required = false,
                                   default = nil)
  if valid_21627230 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627230
  var valid_21627231 = header.getOrDefault("X-Amz-Credential")
  valid_21627231 = validateParameter(valid_21627231, JString, required = false,
                                   default = nil)
  if valid_21627231 != nil:
    section.add "X-Amz-Credential", valid_21627231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627233: Call_UpdateThing_21627221; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the data for a thing.
  ## 
  let valid = call_21627233.validator(path, query, header, formData, body, _)
  let scheme = call_21627233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627233.makeUrl(scheme.get, call_21627233.host, call_21627233.base,
                               call_21627233.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627233, uri, valid, _)

proc call*(call_21627234: Call_UpdateThing_21627221; thingName: string;
          body: JsonNode): Recallable =
  ## updateThing
  ## Updates the data for a thing.
  ##   thingName: string (required)
  ##            : The name of the thing to update.
  ##   body: JObject (required)
  var path_21627235 = newJObject()
  var body_21627236 = newJObject()
  add(path_21627235, "thingName", newJString(thingName))
  if body != nil:
    body_21627236 = body
  result = call_21627234.call(path_21627235, nil, nil, nil, body_21627236)

var updateThing* = Call_UpdateThing_21627221(name: "updateThing",
    meth: HttpMethod.HttpPatch, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_UpdateThing_21627222,
    base: "/", makeUrl: url_UpdateThing_21627223,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteThing_21627205 = ref object of OpenApiRestCall_21625435
proc url_DeleteThing_21627207(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteThing_21627206(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing to delete.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21627208 = path.getOrDefault("thingName")
  valid_21627208 = validateParameter(valid_21627208, JString, required = true,
                                   default = nil)
  if valid_21627208 != nil:
    section.add "thingName", valid_21627208
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
  ##                  : The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>DeleteThing</code> request is rejected with a <code>VersionConflictException</code>.
  section = newJObject()
  var valid_21627209 = query.getOrDefault("expectedVersion")
  valid_21627209 = validateParameter(valid_21627209, JInt, required = false,
                                   default = nil)
  if valid_21627209 != nil:
    section.add "expectedVersion", valid_21627209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627210 = header.getOrDefault("X-Amz-Date")
  valid_21627210 = validateParameter(valid_21627210, JString, required = false,
                                   default = nil)
  if valid_21627210 != nil:
    section.add "X-Amz-Date", valid_21627210
  var valid_21627211 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627211 = validateParameter(valid_21627211, JString, required = false,
                                   default = nil)
  if valid_21627211 != nil:
    section.add "X-Amz-Security-Token", valid_21627211
  var valid_21627212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627212 = validateParameter(valid_21627212, JString, required = false,
                                   default = nil)
  if valid_21627212 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627212
  var valid_21627213 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627213 = validateParameter(valid_21627213, JString, required = false,
                                   default = nil)
  if valid_21627213 != nil:
    section.add "X-Amz-Algorithm", valid_21627213
  var valid_21627214 = header.getOrDefault("X-Amz-Signature")
  valid_21627214 = validateParameter(valid_21627214, JString, required = false,
                                   default = nil)
  if valid_21627214 != nil:
    section.add "X-Amz-Signature", valid_21627214
  var valid_21627215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627215 = validateParameter(valid_21627215, JString, required = false,
                                   default = nil)
  if valid_21627215 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627215
  var valid_21627216 = header.getOrDefault("X-Amz-Credential")
  valid_21627216 = validateParameter(valid_21627216, JString, required = false,
                                   default = nil)
  if valid_21627216 != nil:
    section.add "X-Amz-Credential", valid_21627216
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627217: Call_DeleteThing_21627205; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.
  ## 
  let valid = call_21627217.validator(path, query, header, formData, body, _)
  let scheme = call_21627217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627217.makeUrl(scheme.get, call_21627217.host, call_21627217.base,
                               call_21627217.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627217, uri, valid, _)

proc call*(call_21627218: Call_DeleteThing_21627205; thingName: string;
          expectedVersion: int = 0): Recallable =
  ## deleteThing
  ## Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.
  ##   expectedVersion: int
  ##                  : The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>DeleteThing</code> request is rejected with a <code>VersionConflictException</code>.
  ##   thingName: string (required)
  ##            : The name of the thing to delete.
  var path_21627219 = newJObject()
  var query_21627220 = newJObject()
  add(query_21627220, "expectedVersion", newJInt(expectedVersion))
  add(path_21627219, "thingName", newJString(thingName))
  result = call_21627218.call(path_21627219, query_21627220, nil, nil, nil)

var deleteThing* = Call_DeleteThing_21627205(name: "deleteThing",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_DeleteThing_21627206,
    base: "/", makeUrl: url_DeleteThing_21627207,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateThingGroup_21627251 = ref object of OpenApiRestCall_21625435
proc url_CreateThingGroup_21627253(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateThingGroup_21627252(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The thing group name to create.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21627254 = path.getOrDefault("thingGroupName")
  valid_21627254 = validateParameter(valid_21627254, JString, required = true,
                                   default = nil)
  if valid_21627254 != nil:
    section.add "thingGroupName", valid_21627254
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627255 = header.getOrDefault("X-Amz-Date")
  valid_21627255 = validateParameter(valid_21627255, JString, required = false,
                                   default = nil)
  if valid_21627255 != nil:
    section.add "X-Amz-Date", valid_21627255
  var valid_21627256 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627256 = validateParameter(valid_21627256, JString, required = false,
                                   default = nil)
  if valid_21627256 != nil:
    section.add "X-Amz-Security-Token", valid_21627256
  var valid_21627257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627257 = validateParameter(valid_21627257, JString, required = false,
                                   default = nil)
  if valid_21627257 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627257
  var valid_21627258 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627258 = validateParameter(valid_21627258, JString, required = false,
                                   default = nil)
  if valid_21627258 != nil:
    section.add "X-Amz-Algorithm", valid_21627258
  var valid_21627259 = header.getOrDefault("X-Amz-Signature")
  valid_21627259 = validateParameter(valid_21627259, JString, required = false,
                                   default = nil)
  if valid_21627259 != nil:
    section.add "X-Amz-Signature", valid_21627259
  var valid_21627260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627260 = validateParameter(valid_21627260, JString, required = false,
                                   default = nil)
  if valid_21627260 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627260
  var valid_21627261 = header.getOrDefault("X-Amz-Credential")
  valid_21627261 = validateParameter(valid_21627261, JString, required = false,
                                   default = nil)
  if valid_21627261 != nil:
    section.add "X-Amz-Credential", valid_21627261
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627263: Call_CreateThingGroup_21627251; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ## 
  let valid = call_21627263.validator(path, query, header, formData, body, _)
  let scheme = call_21627263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627263.makeUrl(scheme.get, call_21627263.host, call_21627263.base,
                               call_21627263.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627263, uri, valid, _)

proc call*(call_21627264: Call_CreateThingGroup_21627251; body: JsonNode;
          thingGroupName: string): Recallable =
  ## createThingGroup
  ## <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ##   body: JObject (required)
  ##   thingGroupName: string (required)
  ##                 : The thing group name to create.
  var path_21627265 = newJObject()
  var body_21627266 = newJObject()
  if body != nil:
    body_21627266 = body
  add(path_21627265, "thingGroupName", newJString(thingGroupName))
  result = call_21627264.call(path_21627265, nil, nil, nil, body_21627266)

var createThingGroup* = Call_CreateThingGroup_21627251(name: "createThingGroup",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/thing-groups/{thingGroupName}", validator: validate_CreateThingGroup_21627252,
    base: "/", makeUrl: url_CreateThingGroup_21627253,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThingGroup_21627237 = ref object of OpenApiRestCall_21625435
proc url_DescribeThingGroup_21627239(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThingGroup_21627238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describe a thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The name of the thing group.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21627240 = path.getOrDefault("thingGroupName")
  valid_21627240 = validateParameter(valid_21627240, JString, required = true,
                                   default = nil)
  if valid_21627240 != nil:
    section.add "thingGroupName", valid_21627240
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627241 = header.getOrDefault("X-Amz-Date")
  valid_21627241 = validateParameter(valid_21627241, JString, required = false,
                                   default = nil)
  if valid_21627241 != nil:
    section.add "X-Amz-Date", valid_21627241
  var valid_21627242 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627242 = validateParameter(valid_21627242, JString, required = false,
                                   default = nil)
  if valid_21627242 != nil:
    section.add "X-Amz-Security-Token", valid_21627242
  var valid_21627243 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627243 = validateParameter(valid_21627243, JString, required = false,
                                   default = nil)
  if valid_21627243 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627243
  var valid_21627244 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627244 = validateParameter(valid_21627244, JString, required = false,
                                   default = nil)
  if valid_21627244 != nil:
    section.add "X-Amz-Algorithm", valid_21627244
  var valid_21627245 = header.getOrDefault("X-Amz-Signature")
  valid_21627245 = validateParameter(valid_21627245, JString, required = false,
                                   default = nil)
  if valid_21627245 != nil:
    section.add "X-Amz-Signature", valid_21627245
  var valid_21627246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627246 = validateParameter(valid_21627246, JString, required = false,
                                   default = nil)
  if valid_21627246 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627246
  var valid_21627247 = header.getOrDefault("X-Amz-Credential")
  valid_21627247 = validateParameter(valid_21627247, JString, required = false,
                                   default = nil)
  if valid_21627247 != nil:
    section.add "X-Amz-Credential", valid_21627247
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627248: Call_DescribeThingGroup_21627237; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Describe a thing group.
  ## 
  let valid = call_21627248.validator(path, query, header, formData, body, _)
  let scheme = call_21627248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627248.makeUrl(scheme.get, call_21627248.host, call_21627248.base,
                               call_21627248.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627248, uri, valid, _)

proc call*(call_21627249: Call_DescribeThingGroup_21627237; thingGroupName: string): Recallable =
  ## describeThingGroup
  ## Describe a thing group.
  ##   thingGroupName: string (required)
  ##                 : The name of the thing group.
  var path_21627250 = newJObject()
  add(path_21627250, "thingGroupName", newJString(thingGroupName))
  result = call_21627249.call(path_21627250, nil, nil, nil, nil)

var describeThingGroup* = Call_DescribeThingGroup_21627237(
    name: "describeThingGroup", meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/thing-groups/{thingGroupName}",
    validator: validate_DescribeThingGroup_21627238, base: "/",
    makeUrl: url_DescribeThingGroup_21627239, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateThingGroup_21627283 = ref object of OpenApiRestCall_21625435
proc url_UpdateThingGroup_21627285(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateThingGroup_21627284(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Update a thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The thing group to update.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21627286 = path.getOrDefault("thingGroupName")
  valid_21627286 = validateParameter(valid_21627286, JString, required = true,
                                   default = nil)
  if valid_21627286 != nil:
    section.add "thingGroupName", valid_21627286
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627287 = header.getOrDefault("X-Amz-Date")
  valid_21627287 = validateParameter(valid_21627287, JString, required = false,
                                   default = nil)
  if valid_21627287 != nil:
    section.add "X-Amz-Date", valid_21627287
  var valid_21627288 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627288 = validateParameter(valid_21627288, JString, required = false,
                                   default = nil)
  if valid_21627288 != nil:
    section.add "X-Amz-Security-Token", valid_21627288
  var valid_21627289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627289 = validateParameter(valid_21627289, JString, required = false,
                                   default = nil)
  if valid_21627289 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627289
  var valid_21627290 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627290 = validateParameter(valid_21627290, JString, required = false,
                                   default = nil)
  if valid_21627290 != nil:
    section.add "X-Amz-Algorithm", valid_21627290
  var valid_21627291 = header.getOrDefault("X-Amz-Signature")
  valid_21627291 = validateParameter(valid_21627291, JString, required = false,
                                   default = nil)
  if valid_21627291 != nil:
    section.add "X-Amz-Signature", valid_21627291
  var valid_21627292 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627292 = validateParameter(valid_21627292, JString, required = false,
                                   default = nil)
  if valid_21627292 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627292
  var valid_21627293 = header.getOrDefault("X-Amz-Credential")
  valid_21627293 = validateParameter(valid_21627293, JString, required = false,
                                   default = nil)
  if valid_21627293 != nil:
    section.add "X-Amz-Credential", valid_21627293
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627295: Call_UpdateThingGroup_21627283; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Update a thing group.
  ## 
  let valid = call_21627295.validator(path, query, header, formData, body, _)
  let scheme = call_21627295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627295.makeUrl(scheme.get, call_21627295.host, call_21627295.base,
                               call_21627295.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627295, uri, valid, _)

proc call*(call_21627296: Call_UpdateThingGroup_21627283; body: JsonNode;
          thingGroupName: string): Recallable =
  ## updateThingGroup
  ## Update a thing group.
  ##   body: JObject (required)
  ##   thingGroupName: string (required)
  ##                 : The thing group to update.
  var path_21627297 = newJObject()
  var body_21627298 = newJObject()
  if body != nil:
    body_21627298 = body
  add(path_21627297, "thingGroupName", newJString(thingGroupName))
  result = call_21627296.call(path_21627297, nil, nil, nil, body_21627298)

var updateThingGroup* = Call_UpdateThingGroup_21627283(name: "updateThingGroup",
    meth: HttpMethod.HttpPatch, host: "iot.amazonaws.com",
    route: "/thing-groups/{thingGroupName}", validator: validate_UpdateThingGroup_21627284,
    base: "/", makeUrl: url_UpdateThingGroup_21627285,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteThingGroup_21627267 = ref object of OpenApiRestCall_21625435
proc url_DeleteThingGroup_21627269(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteThingGroup_21627268(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The name of the thing group to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21627270 = path.getOrDefault("thingGroupName")
  valid_21627270 = validateParameter(valid_21627270, JString, required = true,
                                   default = nil)
  if valid_21627270 != nil:
    section.add "thingGroupName", valid_21627270
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
  ##                  : The expected version of the thing group to delete.
  section = newJObject()
  var valid_21627271 = query.getOrDefault("expectedVersion")
  valid_21627271 = validateParameter(valid_21627271, JInt, required = false,
                                   default = nil)
  if valid_21627271 != nil:
    section.add "expectedVersion", valid_21627271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627272 = header.getOrDefault("X-Amz-Date")
  valid_21627272 = validateParameter(valid_21627272, JString, required = false,
                                   default = nil)
  if valid_21627272 != nil:
    section.add "X-Amz-Date", valid_21627272
  var valid_21627273 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627273 = validateParameter(valid_21627273, JString, required = false,
                                   default = nil)
  if valid_21627273 != nil:
    section.add "X-Amz-Security-Token", valid_21627273
  var valid_21627274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627274 = validateParameter(valid_21627274, JString, required = false,
                                   default = nil)
  if valid_21627274 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627274
  var valid_21627275 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627275 = validateParameter(valid_21627275, JString, required = false,
                                   default = nil)
  if valid_21627275 != nil:
    section.add "X-Amz-Algorithm", valid_21627275
  var valid_21627276 = header.getOrDefault("X-Amz-Signature")
  valid_21627276 = validateParameter(valid_21627276, JString, required = false,
                                   default = nil)
  if valid_21627276 != nil:
    section.add "X-Amz-Signature", valid_21627276
  var valid_21627277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627277 = validateParameter(valid_21627277, JString, required = false,
                                   default = nil)
  if valid_21627277 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627277
  var valid_21627278 = header.getOrDefault("X-Amz-Credential")
  valid_21627278 = validateParameter(valid_21627278, JString, required = false,
                                   default = nil)
  if valid_21627278 != nil:
    section.add "X-Amz-Credential", valid_21627278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627279: Call_DeleteThingGroup_21627267; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a thing group.
  ## 
  let valid = call_21627279.validator(path, query, header, formData, body, _)
  let scheme = call_21627279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627279.makeUrl(scheme.get, call_21627279.host, call_21627279.base,
                               call_21627279.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627279, uri, valid, _)

proc call*(call_21627280: Call_DeleteThingGroup_21627267; thingGroupName: string;
          expectedVersion: int = 0): Recallable =
  ## deleteThingGroup
  ## Deletes a thing group.
  ##   expectedVersion: int
  ##                  : The expected version of the thing group to delete.
  ##   thingGroupName: string (required)
  ##                 : The name of the thing group to delete.
  var path_21627281 = newJObject()
  var query_21627282 = newJObject()
  add(query_21627282, "expectedVersion", newJInt(expectedVersion))
  add(path_21627281, "thingGroupName", newJString(thingGroupName))
  result = call_21627280.call(path_21627281, query_21627282, nil, nil, nil)

var deleteThingGroup* = Call_DeleteThingGroup_21627267(name: "deleteThingGroup",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/thing-groups/{thingGroupName}", validator: validate_DeleteThingGroup_21627268,
    base: "/", makeUrl: url_DeleteThingGroup_21627269,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateThingType_21627313 = ref object of OpenApiRestCall_21625435
proc url_CreateThingType_21627315(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
               (kind: VariableSegment, value: "thingTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateThingType_21627314(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new thing type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
  ##                : The name of the thing type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingTypeName` field"
  var valid_21627316 = path.getOrDefault("thingTypeName")
  valid_21627316 = validateParameter(valid_21627316, JString, required = true,
                                   default = nil)
  if valid_21627316 != nil:
    section.add "thingTypeName", valid_21627316
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627317 = header.getOrDefault("X-Amz-Date")
  valid_21627317 = validateParameter(valid_21627317, JString, required = false,
                                   default = nil)
  if valid_21627317 != nil:
    section.add "X-Amz-Date", valid_21627317
  var valid_21627318 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627318 = validateParameter(valid_21627318, JString, required = false,
                                   default = nil)
  if valid_21627318 != nil:
    section.add "X-Amz-Security-Token", valid_21627318
  var valid_21627319 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627319 = validateParameter(valid_21627319, JString, required = false,
                                   default = nil)
  if valid_21627319 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627319
  var valid_21627320 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627320 = validateParameter(valid_21627320, JString, required = false,
                                   default = nil)
  if valid_21627320 != nil:
    section.add "X-Amz-Algorithm", valid_21627320
  var valid_21627321 = header.getOrDefault("X-Amz-Signature")
  valid_21627321 = validateParameter(valid_21627321, JString, required = false,
                                   default = nil)
  if valid_21627321 != nil:
    section.add "X-Amz-Signature", valid_21627321
  var valid_21627322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627322 = validateParameter(valid_21627322, JString, required = false,
                                   default = nil)
  if valid_21627322 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627322
  var valid_21627323 = header.getOrDefault("X-Amz-Credential")
  valid_21627323 = validateParameter(valid_21627323, JString, required = false,
                                   default = nil)
  if valid_21627323 != nil:
    section.add "X-Amz-Credential", valid_21627323
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627325: Call_CreateThingType_21627313; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new thing type.
  ## 
  let valid = call_21627325.validator(path, query, header, formData, body, _)
  let scheme = call_21627325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627325.makeUrl(scheme.get, call_21627325.host, call_21627325.base,
                               call_21627325.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627325, uri, valid, _)

proc call*(call_21627326: Call_CreateThingType_21627313; body: JsonNode;
          thingTypeName: string): Recallable =
  ## createThingType
  ## Creates a new thing type.
  ##   body: JObject (required)
  ##   thingTypeName: string (required)
  ##                : The name of the thing type.
  var path_21627327 = newJObject()
  var body_21627328 = newJObject()
  if body != nil:
    body_21627328 = body
  add(path_21627327, "thingTypeName", newJString(thingTypeName))
  result = call_21627326.call(path_21627327, nil, nil, nil, body_21627328)

var createThingType* = Call_CreateThingType_21627313(name: "createThingType",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/thing-types/{thingTypeName}", validator: validate_CreateThingType_21627314,
    base: "/", makeUrl: url_CreateThingType_21627315,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThingType_21627299 = ref object of OpenApiRestCall_21625435
proc url_DescribeThingType_21627301(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
               (kind: VariableSegment, value: "thingTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThingType_21627300(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified thing type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
  ##                : The name of the thing type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingTypeName` field"
  var valid_21627302 = path.getOrDefault("thingTypeName")
  valid_21627302 = validateParameter(valid_21627302, JString, required = true,
                                   default = nil)
  if valid_21627302 != nil:
    section.add "thingTypeName", valid_21627302
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627303 = header.getOrDefault("X-Amz-Date")
  valid_21627303 = validateParameter(valid_21627303, JString, required = false,
                                   default = nil)
  if valid_21627303 != nil:
    section.add "X-Amz-Date", valid_21627303
  var valid_21627304 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627304 = validateParameter(valid_21627304, JString, required = false,
                                   default = nil)
  if valid_21627304 != nil:
    section.add "X-Amz-Security-Token", valid_21627304
  var valid_21627305 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627305 = validateParameter(valid_21627305, JString, required = false,
                                   default = nil)
  if valid_21627305 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627305
  var valid_21627306 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627306 = validateParameter(valid_21627306, JString, required = false,
                                   default = nil)
  if valid_21627306 != nil:
    section.add "X-Amz-Algorithm", valid_21627306
  var valid_21627307 = header.getOrDefault("X-Amz-Signature")
  valid_21627307 = validateParameter(valid_21627307, JString, required = false,
                                   default = nil)
  if valid_21627307 != nil:
    section.add "X-Amz-Signature", valid_21627307
  var valid_21627308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627308 = validateParameter(valid_21627308, JString, required = false,
                                   default = nil)
  if valid_21627308 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627308
  var valid_21627309 = header.getOrDefault("X-Amz-Credential")
  valid_21627309 = validateParameter(valid_21627309, JString, required = false,
                                   default = nil)
  if valid_21627309 != nil:
    section.add "X-Amz-Credential", valid_21627309
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627310: Call_DescribeThingType_21627299; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified thing type.
  ## 
  let valid = call_21627310.validator(path, query, header, formData, body, _)
  let scheme = call_21627310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627310.makeUrl(scheme.get, call_21627310.host, call_21627310.base,
                               call_21627310.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627310, uri, valid, _)

proc call*(call_21627311: Call_DescribeThingType_21627299; thingTypeName: string): Recallable =
  ## describeThingType
  ## Gets information about the specified thing type.
  ##   thingTypeName: string (required)
  ##                : The name of the thing type.
  var path_21627312 = newJObject()
  add(path_21627312, "thingTypeName", newJString(thingTypeName))
  result = call_21627311.call(path_21627312, nil, nil, nil, nil)

var describeThingType* = Call_DescribeThingType_21627299(name: "describeThingType",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/thing-types/{thingTypeName}", validator: validate_DescribeThingType_21627300,
    base: "/", makeUrl: url_DescribeThingType_21627301,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteThingType_21627329 = ref object of OpenApiRestCall_21625435
proc url_DeleteThingType_21627331(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
               (kind: VariableSegment, value: "thingTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteThingType_21627330(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
  ##                : The name of the thing type.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingTypeName` field"
  var valid_21627332 = path.getOrDefault("thingTypeName")
  valid_21627332 = validateParameter(valid_21627332, JString, required = true,
                                   default = nil)
  if valid_21627332 != nil:
    section.add "thingTypeName", valid_21627332
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627333 = header.getOrDefault("X-Amz-Date")
  valid_21627333 = validateParameter(valid_21627333, JString, required = false,
                                   default = nil)
  if valid_21627333 != nil:
    section.add "X-Amz-Date", valid_21627333
  var valid_21627334 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627334 = validateParameter(valid_21627334, JString, required = false,
                                   default = nil)
  if valid_21627334 != nil:
    section.add "X-Amz-Security-Token", valid_21627334
  var valid_21627335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627335 = validateParameter(valid_21627335, JString, required = false,
                                   default = nil)
  if valid_21627335 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627335
  var valid_21627336 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627336 = validateParameter(valid_21627336, JString, required = false,
                                   default = nil)
  if valid_21627336 != nil:
    section.add "X-Amz-Algorithm", valid_21627336
  var valid_21627337 = header.getOrDefault("X-Amz-Signature")
  valid_21627337 = validateParameter(valid_21627337, JString, required = false,
                                   default = nil)
  if valid_21627337 != nil:
    section.add "X-Amz-Signature", valid_21627337
  var valid_21627338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627338 = validateParameter(valid_21627338, JString, required = false,
                                   default = nil)
  if valid_21627338 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627338
  var valid_21627339 = header.getOrDefault("X-Amz-Credential")
  valid_21627339 = validateParameter(valid_21627339, JString, required = false,
                                   default = nil)
  if valid_21627339 != nil:
    section.add "X-Amz-Credential", valid_21627339
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627340: Call_DeleteThingType_21627329; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.
  ## 
  let valid = call_21627340.validator(path, query, header, formData, body, _)
  let scheme = call_21627340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627340.makeUrl(scheme.get, call_21627340.host, call_21627340.base,
                               call_21627340.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627340, uri, valid, _)

proc call*(call_21627341: Call_DeleteThingType_21627329; thingTypeName: string): Recallable =
  ## deleteThingType
  ## Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.
  ##   thingTypeName: string (required)
  ##                : The name of the thing type.
  var path_21627342 = newJObject()
  add(path_21627342, "thingTypeName", newJString(thingTypeName))
  result = call_21627341.call(path_21627342, nil, nil, nil, nil)

var deleteThingType* = Call_DeleteThingType_21627329(name: "deleteThingType",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/thing-types/{thingTypeName}", validator: validate_DeleteThingType_21627330,
    base: "/", makeUrl: url_DeleteThingType_21627331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateTopicRule_21627357 = ref object of OpenApiRestCall_21625435
proc url_CreateTopicRule_21627359(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateTopicRule_21627358(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
  ##           : The name of the rule.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `ruleName` field"
  var valid_21627360 = path.getOrDefault("ruleName")
  valid_21627360 = validateParameter(valid_21627360, JString, required = true,
                                   default = nil)
  if valid_21627360 != nil:
    section.add "ruleName", valid_21627360
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amz-tagging: JString
  ##                : <p>Metadata which can be used to manage the topic rule.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: --tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627361 = header.getOrDefault("X-Amz-Date")
  valid_21627361 = validateParameter(valid_21627361, JString, required = false,
                                   default = nil)
  if valid_21627361 != nil:
    section.add "X-Amz-Date", valid_21627361
  var valid_21627362 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627362 = validateParameter(valid_21627362, JString, required = false,
                                   default = nil)
  if valid_21627362 != nil:
    section.add "X-Amz-Security-Token", valid_21627362
  var valid_21627363 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627363 = validateParameter(valid_21627363, JString, required = false,
                                   default = nil)
  if valid_21627363 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627363
  var valid_21627364 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627364 = validateParameter(valid_21627364, JString, required = false,
                                   default = nil)
  if valid_21627364 != nil:
    section.add "X-Amz-Algorithm", valid_21627364
  var valid_21627365 = header.getOrDefault("X-Amz-Signature")
  valid_21627365 = validateParameter(valid_21627365, JString, required = false,
                                   default = nil)
  if valid_21627365 != nil:
    section.add "X-Amz-Signature", valid_21627365
  var valid_21627366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627366 = validateParameter(valid_21627366, JString, required = false,
                                   default = nil)
  if valid_21627366 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627366
  var valid_21627367 = header.getOrDefault("x-amz-tagging")
  valid_21627367 = validateParameter(valid_21627367, JString, required = false,
                                   default = nil)
  if valid_21627367 != nil:
    section.add "x-amz-tagging", valid_21627367
  var valid_21627368 = header.getOrDefault("X-Amz-Credential")
  valid_21627368 = validateParameter(valid_21627368, JString, required = false,
                                   default = nil)
  if valid_21627368 != nil:
    section.add "X-Amz-Credential", valid_21627368
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627370: Call_CreateTopicRule_21627357; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ## 
  let valid = call_21627370.validator(path, query, header, formData, body, _)
  let scheme = call_21627370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627370.makeUrl(scheme.get, call_21627370.host, call_21627370.base,
                               call_21627370.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627370, uri, valid, _)

proc call*(call_21627371: Call_CreateTopicRule_21627357; ruleName: string;
          body: JsonNode): Recallable =
  ## createTopicRule
  ## Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ##   ruleName: string (required)
  ##           : The name of the rule.
  ##   body: JObject (required)
  var path_21627372 = newJObject()
  var body_21627373 = newJObject()
  add(path_21627372, "ruleName", newJString(ruleName))
  if body != nil:
    body_21627373 = body
  result = call_21627371.call(path_21627372, nil, nil, nil, body_21627373)

var createTopicRule* = Call_CreateTopicRule_21627357(name: "createTopicRule",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}", validator: validate_CreateTopicRule_21627358,
    base: "/", makeUrl: url_CreateTopicRule_21627359,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTopicRule_21627343 = ref object of OpenApiRestCall_21625435
proc url_GetTopicRule_21627345(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetTopicRule_21627344(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Gets information about the rule.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
  ##           : The name of the rule.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `ruleName` field"
  var valid_21627346 = path.getOrDefault("ruleName")
  valid_21627346 = validateParameter(valid_21627346, JString, required = true,
                                   default = nil)
  if valid_21627346 != nil:
    section.add "ruleName", valid_21627346
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627347 = header.getOrDefault("X-Amz-Date")
  valid_21627347 = validateParameter(valid_21627347, JString, required = false,
                                   default = nil)
  if valid_21627347 != nil:
    section.add "X-Amz-Date", valid_21627347
  var valid_21627348 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627348 = validateParameter(valid_21627348, JString, required = false,
                                   default = nil)
  if valid_21627348 != nil:
    section.add "X-Amz-Security-Token", valid_21627348
  var valid_21627349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627349 = validateParameter(valid_21627349, JString, required = false,
                                   default = nil)
  if valid_21627349 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627349
  var valid_21627350 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627350 = validateParameter(valid_21627350, JString, required = false,
                                   default = nil)
  if valid_21627350 != nil:
    section.add "X-Amz-Algorithm", valid_21627350
  var valid_21627351 = header.getOrDefault("X-Amz-Signature")
  valid_21627351 = validateParameter(valid_21627351, JString, required = false,
                                   default = nil)
  if valid_21627351 != nil:
    section.add "X-Amz-Signature", valid_21627351
  var valid_21627352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627352 = validateParameter(valid_21627352, JString, required = false,
                                   default = nil)
  if valid_21627352 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627352
  var valid_21627353 = header.getOrDefault("X-Amz-Credential")
  valid_21627353 = validateParameter(valid_21627353, JString, required = false,
                                   default = nil)
  if valid_21627353 != nil:
    section.add "X-Amz-Credential", valid_21627353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627354: Call_GetTopicRule_21627343; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the rule.
  ## 
  let valid = call_21627354.validator(path, query, header, formData, body, _)
  let scheme = call_21627354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627354.makeUrl(scheme.get, call_21627354.host, call_21627354.base,
                               call_21627354.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627354, uri, valid, _)

proc call*(call_21627355: Call_GetTopicRule_21627343; ruleName: string): Recallable =
  ## getTopicRule
  ## Gets information about the rule.
  ##   ruleName: string (required)
  ##           : The name of the rule.
  var path_21627356 = newJObject()
  add(path_21627356, "ruleName", newJString(ruleName))
  result = call_21627355.call(path_21627356, nil, nil, nil, nil)

var getTopicRule* = Call_GetTopicRule_21627343(name: "getTopicRule",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/rules/{ruleName}",
    validator: validate_GetTopicRule_21627344, base: "/", makeUrl: url_GetTopicRule_21627345,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReplaceTopicRule_21627388 = ref object of OpenApiRestCall_21625435
proc url_ReplaceTopicRule_21627390(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ReplaceTopicRule_21627389(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
  ##           : The name of the rule.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `ruleName` field"
  var valid_21627391 = path.getOrDefault("ruleName")
  valid_21627391 = validateParameter(valid_21627391, JString, required = true,
                                   default = nil)
  if valid_21627391 != nil:
    section.add "ruleName", valid_21627391
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627392 = header.getOrDefault("X-Amz-Date")
  valid_21627392 = validateParameter(valid_21627392, JString, required = false,
                                   default = nil)
  if valid_21627392 != nil:
    section.add "X-Amz-Date", valid_21627392
  var valid_21627393 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627393 = validateParameter(valid_21627393, JString, required = false,
                                   default = nil)
  if valid_21627393 != nil:
    section.add "X-Amz-Security-Token", valid_21627393
  var valid_21627394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627394 = validateParameter(valid_21627394, JString, required = false,
                                   default = nil)
  if valid_21627394 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627394
  var valid_21627395 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627395 = validateParameter(valid_21627395, JString, required = false,
                                   default = nil)
  if valid_21627395 != nil:
    section.add "X-Amz-Algorithm", valid_21627395
  var valid_21627396 = header.getOrDefault("X-Amz-Signature")
  valid_21627396 = validateParameter(valid_21627396, JString, required = false,
                                   default = nil)
  if valid_21627396 != nil:
    section.add "X-Amz-Signature", valid_21627396
  var valid_21627397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627397 = validateParameter(valid_21627397, JString, required = false,
                                   default = nil)
  if valid_21627397 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627397
  var valid_21627398 = header.getOrDefault("X-Amz-Credential")
  valid_21627398 = validateParameter(valid_21627398, JString, required = false,
                                   default = nil)
  if valid_21627398 != nil:
    section.add "X-Amz-Credential", valid_21627398
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627400: Call_ReplaceTopicRule_21627388; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ## 
  let valid = call_21627400.validator(path, query, header, formData, body, _)
  let scheme = call_21627400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627400.makeUrl(scheme.get, call_21627400.host, call_21627400.base,
                               call_21627400.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627400, uri, valid, _)

proc call*(call_21627401: Call_ReplaceTopicRule_21627388; ruleName: string;
          body: JsonNode): Recallable =
  ## replaceTopicRule
  ## Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ##   ruleName: string (required)
  ##           : The name of the rule.
  ##   body: JObject (required)
  var path_21627402 = newJObject()
  var body_21627403 = newJObject()
  add(path_21627402, "ruleName", newJString(ruleName))
  if body != nil:
    body_21627403 = body
  result = call_21627401.call(path_21627402, nil, nil, nil, body_21627403)

var replaceTopicRule* = Call_ReplaceTopicRule_21627388(name: "replaceTopicRule",
    meth: HttpMethod.HttpPatch, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}", validator: validate_ReplaceTopicRule_21627389,
    base: "/", makeUrl: url_ReplaceTopicRule_21627390,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteTopicRule_21627374 = ref object of OpenApiRestCall_21625435
proc url_DeleteTopicRule_21627376(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteTopicRule_21627375(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the rule.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
  ##           : The name of the rule.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `ruleName` field"
  var valid_21627377 = path.getOrDefault("ruleName")
  valid_21627377 = validateParameter(valid_21627377, JString, required = true,
                                   default = nil)
  if valid_21627377 != nil:
    section.add "ruleName", valid_21627377
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627378 = header.getOrDefault("X-Amz-Date")
  valid_21627378 = validateParameter(valid_21627378, JString, required = false,
                                   default = nil)
  if valid_21627378 != nil:
    section.add "X-Amz-Date", valid_21627378
  var valid_21627379 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627379 = validateParameter(valid_21627379, JString, required = false,
                                   default = nil)
  if valid_21627379 != nil:
    section.add "X-Amz-Security-Token", valid_21627379
  var valid_21627380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627380 = validateParameter(valid_21627380, JString, required = false,
                                   default = nil)
  if valid_21627380 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627380
  var valid_21627381 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627381 = validateParameter(valid_21627381, JString, required = false,
                                   default = nil)
  if valid_21627381 != nil:
    section.add "X-Amz-Algorithm", valid_21627381
  var valid_21627382 = header.getOrDefault("X-Amz-Signature")
  valid_21627382 = validateParameter(valid_21627382, JString, required = false,
                                   default = nil)
  if valid_21627382 != nil:
    section.add "X-Amz-Signature", valid_21627382
  var valid_21627383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627383 = validateParameter(valid_21627383, JString, required = false,
                                   default = nil)
  if valid_21627383 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627383
  var valid_21627384 = header.getOrDefault("X-Amz-Credential")
  valid_21627384 = validateParameter(valid_21627384, JString, required = false,
                                   default = nil)
  if valid_21627384 != nil:
    section.add "X-Amz-Credential", valid_21627384
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627385: Call_DeleteTopicRule_21627374; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the rule.
  ## 
  let valid = call_21627385.validator(path, query, header, formData, body, _)
  let scheme = call_21627385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627385.makeUrl(scheme.get, call_21627385.host, call_21627385.base,
                               call_21627385.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627385, uri, valid, _)

proc call*(call_21627386: Call_DeleteTopicRule_21627374; ruleName: string): Recallable =
  ## deleteTopicRule
  ## Deletes the rule.
  ##   ruleName: string (required)
  ##           : The name of the rule.
  var path_21627387 = newJObject()
  add(path_21627387, "ruleName", newJString(ruleName))
  result = call_21627386.call(path_21627387, nil, nil, nil, nil)

var deleteTopicRule* = Call_DeleteTopicRule_21627374(name: "deleteTopicRule",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}", validator: validate_DeleteTopicRule_21627375,
    base: "/", makeUrl: url_DeleteTopicRule_21627376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateTopicRuleDestination_21627419 = ref object of OpenApiRestCall_21625435
proc url_CreateTopicRuleDestination_21627421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateTopicRuleDestination_21627420(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a topic rule destination. The destination must be confirmed prior to use.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627422 = header.getOrDefault("X-Amz-Date")
  valid_21627422 = validateParameter(valid_21627422, JString, required = false,
                                   default = nil)
  if valid_21627422 != nil:
    section.add "X-Amz-Date", valid_21627422
  var valid_21627423 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627423 = validateParameter(valid_21627423, JString, required = false,
                                   default = nil)
  if valid_21627423 != nil:
    section.add "X-Amz-Security-Token", valid_21627423
  var valid_21627424 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627424 = validateParameter(valid_21627424, JString, required = false,
                                   default = nil)
  if valid_21627424 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627424
  var valid_21627425 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627425 = validateParameter(valid_21627425, JString, required = false,
                                   default = nil)
  if valid_21627425 != nil:
    section.add "X-Amz-Algorithm", valid_21627425
  var valid_21627426 = header.getOrDefault("X-Amz-Signature")
  valid_21627426 = validateParameter(valid_21627426, JString, required = false,
                                   default = nil)
  if valid_21627426 != nil:
    section.add "X-Amz-Signature", valid_21627426
  var valid_21627427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627427 = validateParameter(valid_21627427, JString, required = false,
                                   default = nil)
  if valid_21627427 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627427
  var valid_21627428 = header.getOrDefault("X-Amz-Credential")
  valid_21627428 = validateParameter(valid_21627428, JString, required = false,
                                   default = nil)
  if valid_21627428 != nil:
    section.add "X-Amz-Credential", valid_21627428
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627430: Call_CreateTopicRuleDestination_21627419;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a topic rule destination. The destination must be confirmed prior to use.
  ## 
  let valid = call_21627430.validator(path, query, header, formData, body, _)
  let scheme = call_21627430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627430.makeUrl(scheme.get, call_21627430.host, call_21627430.base,
                               call_21627430.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627430, uri, valid, _)

proc call*(call_21627431: Call_CreateTopicRuleDestination_21627419; body: JsonNode): Recallable =
  ## createTopicRuleDestination
  ## Creates a topic rule destination. The destination must be confirmed prior to use.
  ##   body: JObject (required)
  var body_21627432 = newJObject()
  if body != nil:
    body_21627432 = body
  result = call_21627431.call(nil, nil, nil, nil, body_21627432)

var createTopicRuleDestination* = Call_CreateTopicRuleDestination_21627419(
    name: "createTopicRuleDestination", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/destinations",
    validator: validate_CreateTopicRuleDestination_21627420, base: "/",
    makeUrl: url_CreateTopicRuleDestination_21627421,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTopicRuleDestinations_21627404 = ref object of OpenApiRestCall_21625435
proc url_ListTopicRuleDestinations_21627406(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListTopicRuleDestinations_21627405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists all the topic rule destinations in your AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  section = newJObject()
  var valid_21627407 = query.getOrDefault("maxResults")
  valid_21627407 = validateParameter(valid_21627407, JInt, required = false,
                                   default = nil)
  if valid_21627407 != nil:
    section.add "maxResults", valid_21627407
  var valid_21627408 = query.getOrDefault("nextToken")
  valid_21627408 = validateParameter(valid_21627408, JString, required = false,
                                   default = nil)
  if valid_21627408 != nil:
    section.add "nextToken", valid_21627408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627409 = header.getOrDefault("X-Amz-Date")
  valid_21627409 = validateParameter(valid_21627409, JString, required = false,
                                   default = nil)
  if valid_21627409 != nil:
    section.add "X-Amz-Date", valid_21627409
  var valid_21627410 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627410 = validateParameter(valid_21627410, JString, required = false,
                                   default = nil)
  if valid_21627410 != nil:
    section.add "X-Amz-Security-Token", valid_21627410
  var valid_21627411 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627411 = validateParameter(valid_21627411, JString, required = false,
                                   default = nil)
  if valid_21627411 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627411
  var valid_21627412 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627412 = validateParameter(valid_21627412, JString, required = false,
                                   default = nil)
  if valid_21627412 != nil:
    section.add "X-Amz-Algorithm", valid_21627412
  var valid_21627413 = header.getOrDefault("X-Amz-Signature")
  valid_21627413 = validateParameter(valid_21627413, JString, required = false,
                                   default = nil)
  if valid_21627413 != nil:
    section.add "X-Amz-Signature", valid_21627413
  var valid_21627414 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627414 = validateParameter(valid_21627414, JString, required = false,
                                   default = nil)
  if valid_21627414 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627414
  var valid_21627415 = header.getOrDefault("X-Amz-Credential")
  valid_21627415 = validateParameter(valid_21627415, JString, required = false,
                                   default = nil)
  if valid_21627415 != nil:
    section.add "X-Amz-Credential", valid_21627415
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627416: Call_ListTopicRuleDestinations_21627404;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all the topic rule destinations in your AWS account.
  ## 
  let valid = call_21627416.validator(path, query, header, formData, body, _)
  let scheme = call_21627416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627416.makeUrl(scheme.get, call_21627416.host, call_21627416.base,
                               call_21627416.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627416, uri, valid, _)

proc call*(call_21627417: Call_ListTopicRuleDestinations_21627404;
          maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listTopicRuleDestinations
  ## Lists all the topic rule destinations in your AWS account.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  var query_21627418 = newJObject()
  add(query_21627418, "maxResults", newJInt(maxResults))
  add(query_21627418, "nextToken", newJString(nextToken))
  result = call_21627417.call(nil, query_21627418, nil, nil, nil)

var listTopicRuleDestinations* = Call_ListTopicRuleDestinations_21627404(
    name: "listTopicRuleDestinations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/destinations",
    validator: validate_ListTopicRuleDestinations_21627405, base: "/",
    makeUrl: url_ListTopicRuleDestinations_21627406,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateTopicRuleDestination_21627433 = ref object of OpenApiRestCall_21625435
proc url_UpdateTopicRuleDestination_21627435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateTopicRuleDestination_21627434(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627436 = header.getOrDefault("X-Amz-Date")
  valid_21627436 = validateParameter(valid_21627436, JString, required = false,
                                   default = nil)
  if valid_21627436 != nil:
    section.add "X-Amz-Date", valid_21627436
  var valid_21627437 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627437 = validateParameter(valid_21627437, JString, required = false,
                                   default = nil)
  if valid_21627437 != nil:
    section.add "X-Amz-Security-Token", valid_21627437
  var valid_21627438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627438 = validateParameter(valid_21627438, JString, required = false,
                                   default = nil)
  if valid_21627438 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627438
  var valid_21627439 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627439 = validateParameter(valid_21627439, JString, required = false,
                                   default = nil)
  if valid_21627439 != nil:
    section.add "X-Amz-Algorithm", valid_21627439
  var valid_21627440 = header.getOrDefault("X-Amz-Signature")
  valid_21627440 = validateParameter(valid_21627440, JString, required = false,
                                   default = nil)
  if valid_21627440 != nil:
    section.add "X-Amz-Signature", valid_21627440
  var valid_21627441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627441 = validateParameter(valid_21627441, JString, required = false,
                                   default = nil)
  if valid_21627441 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627441
  var valid_21627442 = header.getOrDefault("X-Amz-Credential")
  valid_21627442 = validateParameter(valid_21627442, JString, required = false,
                                   default = nil)
  if valid_21627442 != nil:
    section.add "X-Amz-Credential", valid_21627442
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627444: Call_UpdateTopicRuleDestination_21627433;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination.
  ## 
  let valid = call_21627444.validator(path, query, header, formData, body, _)
  let scheme = call_21627444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627444.makeUrl(scheme.get, call_21627444.host, call_21627444.base,
                               call_21627444.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627444, uri, valid, _)

proc call*(call_21627445: Call_UpdateTopicRuleDestination_21627433; body: JsonNode): Recallable =
  ## updateTopicRuleDestination
  ## Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination.
  ##   body: JObject (required)
  var body_21627446 = newJObject()
  if body != nil:
    body_21627446 = body
  result = call_21627445.call(nil, nil, nil, nil, body_21627446)

var updateTopicRuleDestination* = Call_UpdateTopicRuleDestination_21627433(
    name: "updateTopicRuleDestination", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/destinations",
    validator: validate_UpdateTopicRuleDestination_21627434, base: "/",
    makeUrl: url_UpdateTopicRuleDestination_21627435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAccountAuditConfiguration_21627447 = ref object of OpenApiRestCall_21625435
proc url_DescribeAccountAuditConfiguration_21627449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeAccountAuditConfiguration_21627448(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627450 = header.getOrDefault("X-Amz-Date")
  valid_21627450 = validateParameter(valid_21627450, JString, required = false,
                                   default = nil)
  if valid_21627450 != nil:
    section.add "X-Amz-Date", valid_21627450
  var valid_21627451 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627451 = validateParameter(valid_21627451, JString, required = false,
                                   default = nil)
  if valid_21627451 != nil:
    section.add "X-Amz-Security-Token", valid_21627451
  var valid_21627452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627452 = validateParameter(valid_21627452, JString, required = false,
                                   default = nil)
  if valid_21627452 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627452
  var valid_21627453 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627453 = validateParameter(valid_21627453, JString, required = false,
                                   default = nil)
  if valid_21627453 != nil:
    section.add "X-Amz-Algorithm", valid_21627453
  var valid_21627454 = header.getOrDefault("X-Amz-Signature")
  valid_21627454 = validateParameter(valid_21627454, JString, required = false,
                                   default = nil)
  if valid_21627454 != nil:
    section.add "X-Amz-Signature", valid_21627454
  var valid_21627455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627455 = validateParameter(valid_21627455, JString, required = false,
                                   default = nil)
  if valid_21627455 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627455
  var valid_21627456 = header.getOrDefault("X-Amz-Credential")
  valid_21627456 = validateParameter(valid_21627456, JString, required = false,
                                   default = nil)
  if valid_21627456 != nil:
    section.add "X-Amz-Credential", valid_21627456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627457: Call_DescribeAccountAuditConfiguration_21627447;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  ## 
  let valid = call_21627457.validator(path, query, header, formData, body, _)
  let scheme = call_21627457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627457.makeUrl(scheme.get, call_21627457.host, call_21627457.base,
                               call_21627457.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627457, uri, valid, _)

proc call*(call_21627458: Call_DescribeAccountAuditConfiguration_21627447): Recallable =
  ## describeAccountAuditConfiguration
  ## Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  result = call_21627458.call(nil, nil, nil, nil, nil)

var describeAccountAuditConfiguration* = Call_DescribeAccountAuditConfiguration_21627447(
    name: "describeAccountAuditConfiguration", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/configuration",
    validator: validate_DescribeAccountAuditConfiguration_21627448, base: "/",
    makeUrl: url_DescribeAccountAuditConfiguration_21627449,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAccountAuditConfiguration_21627473 = ref object of OpenApiRestCall_21625435
proc url_UpdateAccountAuditConfiguration_21627475(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateAccountAuditConfiguration_21627474(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627476 = header.getOrDefault("X-Amz-Date")
  valid_21627476 = validateParameter(valid_21627476, JString, required = false,
                                   default = nil)
  if valid_21627476 != nil:
    section.add "X-Amz-Date", valid_21627476
  var valid_21627477 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627477 = validateParameter(valid_21627477, JString, required = false,
                                   default = nil)
  if valid_21627477 != nil:
    section.add "X-Amz-Security-Token", valid_21627477
  var valid_21627478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627478 = validateParameter(valid_21627478, JString, required = false,
                                   default = nil)
  if valid_21627478 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627478
  var valid_21627479 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627479 = validateParameter(valid_21627479, JString, required = false,
                                   default = nil)
  if valid_21627479 != nil:
    section.add "X-Amz-Algorithm", valid_21627479
  var valid_21627480 = header.getOrDefault("X-Amz-Signature")
  valid_21627480 = validateParameter(valid_21627480, JString, required = false,
                                   default = nil)
  if valid_21627480 != nil:
    section.add "X-Amz-Signature", valid_21627480
  var valid_21627481 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627481 = validateParameter(valid_21627481, JString, required = false,
                                   default = nil)
  if valid_21627481 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627481
  var valid_21627482 = header.getOrDefault("X-Amz-Credential")
  valid_21627482 = validateParameter(valid_21627482, JString, required = false,
                                   default = nil)
  if valid_21627482 != nil:
    section.add "X-Amz-Credential", valid_21627482
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627484: Call_UpdateAccountAuditConfiguration_21627473;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  ## 
  let valid = call_21627484.validator(path, query, header, formData, body, _)
  let scheme = call_21627484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627484.makeUrl(scheme.get, call_21627484.host, call_21627484.base,
                               call_21627484.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627484, uri, valid, _)

proc call*(call_21627485: Call_UpdateAccountAuditConfiguration_21627473;
          body: JsonNode): Recallable =
  ## updateAccountAuditConfiguration
  ## Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  ##   body: JObject (required)
  var body_21627486 = newJObject()
  if body != nil:
    body_21627486 = body
  result = call_21627485.call(nil, nil, nil, nil, body_21627486)

var updateAccountAuditConfiguration* = Call_UpdateAccountAuditConfiguration_21627473(
    name: "updateAccountAuditConfiguration", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/audit/configuration",
    validator: validate_UpdateAccountAuditConfiguration_21627474, base: "/",
    makeUrl: url_UpdateAccountAuditConfiguration_21627475,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteAccountAuditConfiguration_21627459 = ref object of OpenApiRestCall_21625435
proc url_DeleteAccountAuditConfiguration_21627461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DeleteAccountAuditConfiguration_21627460(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   deleteScheduledAudits: JBool
  ##                        : If true, all scheduled audits are deleted.
  section = newJObject()
  var valid_21627462 = query.getOrDefault("deleteScheduledAudits")
  valid_21627462 = validateParameter(valid_21627462, JBool, required = false,
                                   default = nil)
  if valid_21627462 != nil:
    section.add "deleteScheduledAudits", valid_21627462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627463 = header.getOrDefault("X-Amz-Date")
  valid_21627463 = validateParameter(valid_21627463, JString, required = false,
                                   default = nil)
  if valid_21627463 != nil:
    section.add "X-Amz-Date", valid_21627463
  var valid_21627464 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627464 = validateParameter(valid_21627464, JString, required = false,
                                   default = nil)
  if valid_21627464 != nil:
    section.add "X-Amz-Security-Token", valid_21627464
  var valid_21627465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627465 = validateParameter(valid_21627465, JString, required = false,
                                   default = nil)
  if valid_21627465 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627465
  var valid_21627466 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627466 = validateParameter(valid_21627466, JString, required = false,
                                   default = nil)
  if valid_21627466 != nil:
    section.add "X-Amz-Algorithm", valid_21627466
  var valid_21627467 = header.getOrDefault("X-Amz-Signature")
  valid_21627467 = validateParameter(valid_21627467, JString, required = false,
                                   default = nil)
  if valid_21627467 != nil:
    section.add "X-Amz-Signature", valid_21627467
  var valid_21627468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627468 = validateParameter(valid_21627468, JString, required = false,
                                   default = nil)
  if valid_21627468 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627468
  var valid_21627469 = header.getOrDefault("X-Amz-Credential")
  valid_21627469 = validateParameter(valid_21627469, JString, required = false,
                                   default = nil)
  if valid_21627469 != nil:
    section.add "X-Amz-Credential", valid_21627469
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627470: Call_DeleteAccountAuditConfiguration_21627459;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. 
  ## 
  let valid = call_21627470.validator(path, query, header, formData, body, _)
  let scheme = call_21627470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627470.makeUrl(scheme.get, call_21627470.host, call_21627470.base,
                               call_21627470.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627470, uri, valid, _)

proc call*(call_21627471: Call_DeleteAccountAuditConfiguration_21627459;
          deleteScheduledAudits: bool = false): Recallable =
  ## deleteAccountAuditConfiguration
  ## Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. 
  ##   deleteScheduledAudits: bool
  ##                        : If true, all scheduled audits are deleted.
  var query_21627472 = newJObject()
  add(query_21627472, "deleteScheduledAudits", newJBool(deleteScheduledAudits))
  result = call_21627471.call(nil, query_21627472, nil, nil, nil)

var deleteAccountAuditConfiguration* = Call_DeleteAccountAuditConfiguration_21627459(
    name: "deleteAccountAuditConfiguration", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/audit/configuration",
    validator: validate_DeleteAccountAuditConfiguration_21627460, base: "/",
    makeUrl: url_DeleteAccountAuditConfiguration_21627461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateCACertificate_21627501 = ref object of OpenApiRestCall_21625435
proc url_UpdateCACertificate_21627503(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path, "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cacertificate/"),
               (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateCACertificate_21627502(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a registered CA certificate.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
  ##                  : The CA certificate identifier.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `caCertificateId` field"
  var valid_21627504 = path.getOrDefault("caCertificateId")
  valid_21627504 = validateParameter(valid_21627504, JString, required = true,
                                   default = nil)
  if valid_21627504 != nil:
    section.add "caCertificateId", valid_21627504
  result.add "path", section
  ## parameters in `query` object:
  ##   newStatus: JString
  ##            : <p>The updated status of the CA certificate.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
  ##   newAutoRegistrationStatus: JString
  ##                            : The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".
  section = newJObject()
  var valid_21627519 = query.getOrDefault("newStatus")
  valid_21627519 = validateParameter(valid_21627519, JString, required = false,
                                   default = newJString("ACTIVE"))
  if valid_21627519 != nil:
    section.add "newStatus", valid_21627519
  var valid_21627520 = query.getOrDefault("newAutoRegistrationStatus")
  valid_21627520 = validateParameter(valid_21627520, JString, required = false,
                                   default = newJString("ENABLE"))
  if valid_21627520 != nil:
    section.add "newAutoRegistrationStatus", valid_21627520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627521 = header.getOrDefault("X-Amz-Date")
  valid_21627521 = validateParameter(valid_21627521, JString, required = false,
                                   default = nil)
  if valid_21627521 != nil:
    section.add "X-Amz-Date", valid_21627521
  var valid_21627522 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627522 = validateParameter(valid_21627522, JString, required = false,
                                   default = nil)
  if valid_21627522 != nil:
    section.add "X-Amz-Security-Token", valid_21627522
  var valid_21627523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627523 = validateParameter(valid_21627523, JString, required = false,
                                   default = nil)
  if valid_21627523 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627523
  var valid_21627524 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627524 = validateParameter(valid_21627524, JString, required = false,
                                   default = nil)
  if valid_21627524 != nil:
    section.add "X-Amz-Algorithm", valid_21627524
  var valid_21627525 = header.getOrDefault("X-Amz-Signature")
  valid_21627525 = validateParameter(valid_21627525, JString, required = false,
                                   default = nil)
  if valid_21627525 != nil:
    section.add "X-Amz-Signature", valid_21627525
  var valid_21627526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627526 = validateParameter(valid_21627526, JString, required = false,
                                   default = nil)
  if valid_21627526 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627526
  var valid_21627527 = header.getOrDefault("X-Amz-Credential")
  valid_21627527 = validateParameter(valid_21627527, JString, required = false,
                                   default = nil)
  if valid_21627527 != nil:
    section.add "X-Amz-Credential", valid_21627527
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627529: Call_UpdateCACertificate_21627501; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a registered CA certificate.
  ## 
  let valid = call_21627529.validator(path, query, header, formData, body, _)
  let scheme = call_21627529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627529.makeUrl(scheme.get, call_21627529.host, call_21627529.base,
                               call_21627529.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627529, uri, valid, _)

proc call*(call_21627530: Call_UpdateCACertificate_21627501;
          caCertificateId: string; body: JsonNode; newStatus: string = "ACTIVE";
          newAutoRegistrationStatus: string = "ENABLE"): Recallable =
  ## updateCACertificate
  ## Updates a registered CA certificate.
  ##   caCertificateId: string (required)
  ##                  : The CA certificate identifier.
  ##   body: JObject (required)
  ##   newStatus: string
  ##            : <p>The updated status of the CA certificate.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
  ##   newAutoRegistrationStatus: string
  ##                            : The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".
  var path_21627531 = newJObject()
  var query_21627532 = newJObject()
  var body_21627533 = newJObject()
  add(path_21627531, "caCertificateId", newJString(caCertificateId))
  if body != nil:
    body_21627533 = body
  add(query_21627532, "newStatus", newJString(newStatus))
  add(query_21627532, "newAutoRegistrationStatus",
      newJString(newAutoRegistrationStatus))
  result = call_21627530.call(path_21627531, query_21627532, nil, nil, body_21627533)

var updateCACertificate* = Call_UpdateCACertificate_21627501(
    name: "updateCACertificate", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/cacertificate/{caCertificateId}",
    validator: validate_UpdateCACertificate_21627502, base: "/",
    makeUrl: url_UpdateCACertificate_21627503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeCACertificate_21627487 = ref object of OpenApiRestCall_21625435
proc url_DescribeCACertificate_21627489(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path, "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cacertificate/"),
               (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeCACertificate_21627488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a registered CA certificate.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
  ##                  : The CA certificate identifier.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `caCertificateId` field"
  var valid_21627490 = path.getOrDefault("caCertificateId")
  valid_21627490 = validateParameter(valid_21627490, JString, required = true,
                                   default = nil)
  if valid_21627490 != nil:
    section.add "caCertificateId", valid_21627490
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627491 = header.getOrDefault("X-Amz-Date")
  valid_21627491 = validateParameter(valid_21627491, JString, required = false,
                                   default = nil)
  if valid_21627491 != nil:
    section.add "X-Amz-Date", valid_21627491
  var valid_21627492 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627492 = validateParameter(valid_21627492, JString, required = false,
                                   default = nil)
  if valid_21627492 != nil:
    section.add "X-Amz-Security-Token", valid_21627492
  var valid_21627493 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627493 = validateParameter(valid_21627493, JString, required = false,
                                   default = nil)
  if valid_21627493 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627493
  var valid_21627494 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627494 = validateParameter(valid_21627494, JString, required = false,
                                   default = nil)
  if valid_21627494 != nil:
    section.add "X-Amz-Algorithm", valid_21627494
  var valid_21627495 = header.getOrDefault("X-Amz-Signature")
  valid_21627495 = validateParameter(valid_21627495, JString, required = false,
                                   default = nil)
  if valid_21627495 != nil:
    section.add "X-Amz-Signature", valid_21627495
  var valid_21627496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627496 = validateParameter(valid_21627496, JString, required = false,
                                   default = nil)
  if valid_21627496 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627496
  var valid_21627497 = header.getOrDefault("X-Amz-Credential")
  valid_21627497 = validateParameter(valid_21627497, JString, required = false,
                                   default = nil)
  if valid_21627497 != nil:
    section.add "X-Amz-Credential", valid_21627497
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627498: Call_DescribeCACertificate_21627487;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a registered CA certificate.
  ## 
  let valid = call_21627498.validator(path, query, header, formData, body, _)
  let scheme = call_21627498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627498.makeUrl(scheme.get, call_21627498.host, call_21627498.base,
                               call_21627498.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627498, uri, valid, _)

proc call*(call_21627499: Call_DescribeCACertificate_21627487;
          caCertificateId: string): Recallable =
  ## describeCACertificate
  ## Describes a registered CA certificate.
  ##   caCertificateId: string (required)
  ##                  : The CA certificate identifier.
  var path_21627500 = newJObject()
  add(path_21627500, "caCertificateId", newJString(caCertificateId))
  result = call_21627499.call(path_21627500, nil, nil, nil, nil)

var describeCACertificate* = Call_DescribeCACertificate_21627487(
    name: "describeCACertificate", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/cacertificate/{caCertificateId}",
    validator: validate_DescribeCACertificate_21627488, base: "/",
    makeUrl: url_DescribeCACertificate_21627489,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteCACertificate_21627535 = ref object of OpenApiRestCall_21625435
proc url_DeleteCACertificate_21627537(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path, "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cacertificate/"),
               (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteCACertificate_21627536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a registered CA certificate.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
  ##                  : The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `caCertificateId` field"
  var valid_21627538 = path.getOrDefault("caCertificateId")
  valid_21627538 = validateParameter(valid_21627538, JString, required = true,
                                   default = nil)
  if valid_21627538 != nil:
    section.add "caCertificateId", valid_21627538
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627539 = header.getOrDefault("X-Amz-Date")
  valid_21627539 = validateParameter(valid_21627539, JString, required = false,
                                   default = nil)
  if valid_21627539 != nil:
    section.add "X-Amz-Date", valid_21627539
  var valid_21627540 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627540 = validateParameter(valid_21627540, JString, required = false,
                                   default = nil)
  if valid_21627540 != nil:
    section.add "X-Amz-Security-Token", valid_21627540
  var valid_21627541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627541 = validateParameter(valid_21627541, JString, required = false,
                                   default = nil)
  if valid_21627541 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627541
  var valid_21627542 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627542 = validateParameter(valid_21627542, JString, required = false,
                                   default = nil)
  if valid_21627542 != nil:
    section.add "X-Amz-Algorithm", valid_21627542
  var valid_21627543 = header.getOrDefault("X-Amz-Signature")
  valid_21627543 = validateParameter(valid_21627543, JString, required = false,
                                   default = nil)
  if valid_21627543 != nil:
    section.add "X-Amz-Signature", valid_21627543
  var valid_21627544 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627544 = validateParameter(valid_21627544, JString, required = false,
                                   default = nil)
  if valid_21627544 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627544
  var valid_21627545 = header.getOrDefault("X-Amz-Credential")
  valid_21627545 = validateParameter(valid_21627545, JString, required = false,
                                   default = nil)
  if valid_21627545 != nil:
    section.add "X-Amz-Credential", valid_21627545
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627546: Call_DeleteCACertificate_21627535; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a registered CA certificate.
  ## 
  let valid = call_21627546.validator(path, query, header, formData, body, _)
  let scheme = call_21627546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627546.makeUrl(scheme.get, call_21627546.host, call_21627546.base,
                               call_21627546.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627546, uri, valid, _)

proc call*(call_21627547: Call_DeleteCACertificate_21627535;
          caCertificateId: string): Recallable =
  ## deleteCACertificate
  ## Deletes a registered CA certificate.
  ##   caCertificateId: string (required)
  ##                  : The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)
  var path_21627548 = newJObject()
  add(path_21627548, "caCertificateId", newJString(caCertificateId))
  result = call_21627547.call(path_21627548, nil, nil, nil, nil)

var deleteCACertificate* = Call_DeleteCACertificate_21627535(
    name: "deleteCACertificate", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/cacertificate/{caCertificateId}",
    validator: validate_DeleteCACertificate_21627536, base: "/",
    makeUrl: url_DeleteCACertificate_21627537,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeCertificate_21627549 = ref object of OpenApiRestCall_21625435
proc url_DescribeCertificate_21627551(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeCertificate_21627550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified certificate.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `certificateId` field"
  var valid_21627552 = path.getOrDefault("certificateId")
  valid_21627552 = validateParameter(valid_21627552, JString, required = true,
                                   default = nil)
  if valid_21627552 != nil:
    section.add "certificateId", valid_21627552
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627553 = header.getOrDefault("X-Amz-Date")
  valid_21627553 = validateParameter(valid_21627553, JString, required = false,
                                   default = nil)
  if valid_21627553 != nil:
    section.add "X-Amz-Date", valid_21627553
  var valid_21627554 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627554 = validateParameter(valid_21627554, JString, required = false,
                                   default = nil)
  if valid_21627554 != nil:
    section.add "X-Amz-Security-Token", valid_21627554
  var valid_21627555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627555 = validateParameter(valid_21627555, JString, required = false,
                                   default = nil)
  if valid_21627555 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627555
  var valid_21627556 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627556 = validateParameter(valid_21627556, JString, required = false,
                                   default = nil)
  if valid_21627556 != nil:
    section.add "X-Amz-Algorithm", valid_21627556
  var valid_21627557 = header.getOrDefault("X-Amz-Signature")
  valid_21627557 = validateParameter(valid_21627557, JString, required = false,
                                   default = nil)
  if valid_21627557 != nil:
    section.add "X-Amz-Signature", valid_21627557
  var valid_21627558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627558 = validateParameter(valid_21627558, JString, required = false,
                                   default = nil)
  if valid_21627558 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627558
  var valid_21627559 = header.getOrDefault("X-Amz-Credential")
  valid_21627559 = validateParameter(valid_21627559, JString, required = false,
                                   default = nil)
  if valid_21627559 != nil:
    section.add "X-Amz-Credential", valid_21627559
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627560: Call_DescribeCertificate_21627549; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified certificate.
  ## 
  let valid = call_21627560.validator(path, query, header, formData, body, _)
  let scheme = call_21627560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627560.makeUrl(scheme.get, call_21627560.host, call_21627560.base,
                               call_21627560.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627560, uri, valid, _)

proc call*(call_21627561: Call_DescribeCertificate_21627549; certificateId: string): Recallable =
  ## describeCertificate
  ## Gets information about the specified certificate.
  ##   certificateId: string (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  var path_21627562 = newJObject()
  add(path_21627562, "certificateId", newJString(certificateId))
  result = call_21627561.call(path_21627562, nil, nil, nil, nil)

var describeCertificate* = Call_DescribeCertificate_21627549(
    name: "describeCertificate", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/certificates/{certificateId}",
    validator: validate_DescribeCertificate_21627550, base: "/",
    makeUrl: url_DescribeCertificate_21627551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteCertificate_21627563 = ref object of OpenApiRestCall_21625435
proc url_DeleteCertificate_21627565(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteCertificate_21627564(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `certificateId` field"
  var valid_21627566 = path.getOrDefault("certificateId")
  valid_21627566 = validateParameter(valid_21627566, JString, required = true,
                                   default = nil)
  if valid_21627566 != nil:
    section.add "certificateId", valid_21627566
  result.add "path", section
  ## parameters in `query` object:
  ##   forceDelete: JBool
  ##              : Forces the deletion of a certificate if it is inactive and is not attached to an IoT thing.
  section = newJObject()
  var valid_21627567 = query.getOrDefault("forceDelete")
  valid_21627567 = validateParameter(valid_21627567, JBool, required = false,
                                   default = nil)
  if valid_21627567 != nil:
    section.add "forceDelete", valid_21627567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627568 = header.getOrDefault("X-Amz-Date")
  valid_21627568 = validateParameter(valid_21627568, JString, required = false,
                                   default = nil)
  if valid_21627568 != nil:
    section.add "X-Amz-Date", valid_21627568
  var valid_21627569 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627569 = validateParameter(valid_21627569, JString, required = false,
                                   default = nil)
  if valid_21627569 != nil:
    section.add "X-Amz-Security-Token", valid_21627569
  var valid_21627570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627570 = validateParameter(valid_21627570, JString, required = false,
                                   default = nil)
  if valid_21627570 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627570
  var valid_21627571 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627571 = validateParameter(valid_21627571, JString, required = false,
                                   default = nil)
  if valid_21627571 != nil:
    section.add "X-Amz-Algorithm", valid_21627571
  var valid_21627572 = header.getOrDefault("X-Amz-Signature")
  valid_21627572 = validateParameter(valid_21627572, JString, required = false,
                                   default = nil)
  if valid_21627572 != nil:
    section.add "X-Amz-Signature", valid_21627572
  var valid_21627573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627573 = validateParameter(valid_21627573, JString, required = false,
                                   default = nil)
  if valid_21627573 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627573
  var valid_21627574 = header.getOrDefault("X-Amz-Credential")
  valid_21627574 = validateParameter(valid_21627574, JString, required = false,
                                   default = nil)
  if valid_21627574 != nil:
    section.add "X-Amz-Credential", valid_21627574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627575: Call_DeleteCertificate_21627563; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>
  ## 
  let valid = call_21627575.validator(path, query, header, formData, body, _)
  let scheme = call_21627575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627575.makeUrl(scheme.get, call_21627575.host, call_21627575.base,
                               call_21627575.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627575, uri, valid, _)

proc call*(call_21627576: Call_DeleteCertificate_21627563; certificateId: string;
          forceDelete: bool = false): Recallable =
  ## deleteCertificate
  ## <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>
  ##   forceDelete: bool
  ##              : Forces the deletion of a certificate if it is inactive and is not attached to an IoT thing.
  ##   certificateId: string (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  var path_21627577 = newJObject()
  var query_21627578 = newJObject()
  add(query_21627578, "forceDelete", newJBool(forceDelete))
  add(path_21627577, "certificateId", newJString(certificateId))
  result = call_21627576.call(path_21627577, query_21627578, nil, nil, nil)

var deleteCertificate* = Call_DeleteCertificate_21627563(name: "deleteCertificate",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/certificates/{certificateId}", validator: validate_DeleteCertificate_21627564,
    base: "/", makeUrl: url_DeleteCertificate_21627565,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteJobExecution_21627579 = ref object of OpenApiRestCall_21625435
proc url_DeleteJobExecution_21627581(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  assert "jobId" in path, "`jobId` is a required path parameter"
  assert "executionNumber" in path, "`executionNumber` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId"),
               (kind: ConstantSegment, value: "/executionNumber/"),
               (kind: VariableSegment, value: "executionNumber")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteJobExecution_21627580(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a job execution.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing whose job execution will be deleted.
  ##   jobId: JString (required)
  ##        : The ID of the job whose execution on a particular device will be deleted.
  ##   executionNumber: JInt (required)
  ##                  : <p>The ID of the job execution to be deleted. The <code>executionNumber</code> refers to the execution of a particular job on a particular device.</p> <p>Note that once a job execution is deleted, the <code>executionNumber</code> may be reused by IoT, so be sure you get and use the correct value here.</p>
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21627582 = path.getOrDefault("thingName")
  valid_21627582 = validateParameter(valid_21627582, JString, required = true,
                                   default = nil)
  if valid_21627582 != nil:
    section.add "thingName", valid_21627582
  var valid_21627583 = path.getOrDefault("jobId")
  valid_21627583 = validateParameter(valid_21627583, JString, required = true,
                                   default = nil)
  if valid_21627583 != nil:
    section.add "jobId", valid_21627583
  var valid_21627584 = path.getOrDefault("executionNumber")
  valid_21627584 = validateParameter(valid_21627584, JInt, required = true,
                                   default = nil)
  if valid_21627584 != nil:
    section.add "executionNumber", valid_21627584
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
  ##        : <p>(Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p> </note>
  section = newJObject()
  var valid_21627585 = query.getOrDefault("force")
  valid_21627585 = validateParameter(valid_21627585, JBool, required = false,
                                   default = nil)
  if valid_21627585 != nil:
    section.add "force", valid_21627585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627586 = header.getOrDefault("X-Amz-Date")
  valid_21627586 = validateParameter(valid_21627586, JString, required = false,
                                   default = nil)
  if valid_21627586 != nil:
    section.add "X-Amz-Date", valid_21627586
  var valid_21627587 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627587 = validateParameter(valid_21627587, JString, required = false,
                                   default = nil)
  if valid_21627587 != nil:
    section.add "X-Amz-Security-Token", valid_21627587
  var valid_21627588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627588 = validateParameter(valid_21627588, JString, required = false,
                                   default = nil)
  if valid_21627588 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627588
  var valid_21627589 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627589 = validateParameter(valid_21627589, JString, required = false,
                                   default = nil)
  if valid_21627589 != nil:
    section.add "X-Amz-Algorithm", valid_21627589
  var valid_21627590 = header.getOrDefault("X-Amz-Signature")
  valid_21627590 = validateParameter(valid_21627590, JString, required = false,
                                   default = nil)
  if valid_21627590 != nil:
    section.add "X-Amz-Signature", valid_21627590
  var valid_21627591 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627591 = validateParameter(valid_21627591, JString, required = false,
                                   default = nil)
  if valid_21627591 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627591
  var valid_21627592 = header.getOrDefault("X-Amz-Credential")
  valid_21627592 = validateParameter(valid_21627592, JString, required = false,
                                   default = nil)
  if valid_21627592 != nil:
    section.add "X-Amz-Credential", valid_21627592
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627593: Call_DeleteJobExecution_21627579; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a job execution.
  ## 
  let valid = call_21627593.validator(path, query, header, formData, body, _)
  let scheme = call_21627593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627593.makeUrl(scheme.get, call_21627593.host, call_21627593.base,
                               call_21627593.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627593, uri, valid, _)

proc call*(call_21627594: Call_DeleteJobExecution_21627579; thingName: string;
          jobId: string; executionNumber: int; force: bool = false): Recallable =
  ## deleteJobExecution
  ## Deletes a job execution.
  ##   force: bool
  ##        : <p>(Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p> </note>
  ##   thingName: string (required)
  ##            : The name of the thing whose job execution will be deleted.
  ##   jobId: string (required)
  ##        : The ID of the job whose execution on a particular device will be deleted.
  ##   executionNumber: int (required)
  ##                  : <p>The ID of the job execution to be deleted. The <code>executionNumber</code> refers to the execution of a particular job on a particular device.</p> <p>Note that once a job execution is deleted, the <code>executionNumber</code> may be reused by IoT, so be sure you get and use the correct value here.</p>
  var path_21627595 = newJObject()
  var query_21627596 = newJObject()
  add(query_21627596, "force", newJBool(force))
  add(path_21627595, "thingName", newJString(thingName))
  add(path_21627595, "jobId", newJString(jobId))
  add(path_21627595, "executionNumber", newJInt(executionNumber))
  result = call_21627594.call(path_21627595, query_21627596, nil, nil, nil)

var deleteJobExecution* = Call_DeleteJobExecution_21627579(
    name: "deleteJobExecution", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}",
    validator: validate_DeleteJobExecution_21627580, base: "/",
    makeUrl: url_DeleteJobExecution_21627581, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPolicyVersion_21627597 = ref object of OpenApiRestCall_21625435
proc url_GetPolicyVersion_21627599(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  assert "policyVersionId" in path, "`policyVersionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName"),
               (kind: ConstantSegment, value: "/version/"),
               (kind: VariableSegment, value: "policyVersionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetPolicyVersion_21627598(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified policy version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The name of the policy.
  ##   policyVersionId: JString (required)
  ##                  : The policy version ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21627600 = path.getOrDefault("policyName")
  valid_21627600 = validateParameter(valid_21627600, JString, required = true,
                                   default = nil)
  if valid_21627600 != nil:
    section.add "policyName", valid_21627600
  var valid_21627601 = path.getOrDefault("policyVersionId")
  valid_21627601 = validateParameter(valid_21627601, JString, required = true,
                                   default = nil)
  if valid_21627601 != nil:
    section.add "policyVersionId", valid_21627601
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627602 = header.getOrDefault("X-Amz-Date")
  valid_21627602 = validateParameter(valid_21627602, JString, required = false,
                                   default = nil)
  if valid_21627602 != nil:
    section.add "X-Amz-Date", valid_21627602
  var valid_21627603 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627603 = validateParameter(valid_21627603, JString, required = false,
                                   default = nil)
  if valid_21627603 != nil:
    section.add "X-Amz-Security-Token", valid_21627603
  var valid_21627604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627604 = validateParameter(valid_21627604, JString, required = false,
                                   default = nil)
  if valid_21627604 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627604
  var valid_21627605 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627605 = validateParameter(valid_21627605, JString, required = false,
                                   default = nil)
  if valid_21627605 != nil:
    section.add "X-Amz-Algorithm", valid_21627605
  var valid_21627606 = header.getOrDefault("X-Amz-Signature")
  valid_21627606 = validateParameter(valid_21627606, JString, required = false,
                                   default = nil)
  if valid_21627606 != nil:
    section.add "X-Amz-Signature", valid_21627606
  var valid_21627607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627607 = validateParameter(valid_21627607, JString, required = false,
                                   default = nil)
  if valid_21627607 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627607
  var valid_21627608 = header.getOrDefault("X-Amz-Credential")
  valid_21627608 = validateParameter(valid_21627608, JString, required = false,
                                   default = nil)
  if valid_21627608 != nil:
    section.add "X-Amz-Credential", valid_21627608
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627609: Call_GetPolicyVersion_21627597; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified policy version.
  ## 
  let valid = call_21627609.validator(path, query, header, formData, body, _)
  let scheme = call_21627609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627609.makeUrl(scheme.get, call_21627609.host, call_21627609.base,
                               call_21627609.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627609, uri, valid, _)

proc call*(call_21627610: Call_GetPolicyVersion_21627597; policyName: string;
          policyVersionId: string): Recallable =
  ## getPolicyVersion
  ## Gets information about the specified policy version.
  ##   policyName: string (required)
  ##             : The name of the policy.
  ##   policyVersionId: string (required)
  ##                  : The policy version ID.
  var path_21627611 = newJObject()
  add(path_21627611, "policyName", newJString(policyName))
  add(path_21627611, "policyVersionId", newJString(policyVersionId))
  result = call_21627610.call(path_21627611, nil, nil, nil, nil)

var getPolicyVersion* = Call_GetPolicyVersion_21627597(name: "getPolicyVersion",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/policies/{policyName}/version/{policyVersionId}",
    validator: validate_GetPolicyVersion_21627598, base: "/",
    makeUrl: url_GetPolicyVersion_21627599, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetDefaultPolicyVersion_21627627 = ref object of OpenApiRestCall_21625435
proc url_SetDefaultPolicyVersion_21627629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  assert "policyVersionId" in path, "`policyVersionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName"),
               (kind: ConstantSegment, value: "/version/"),
               (kind: VariableSegment, value: "policyVersionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_SetDefaultPolicyVersion_21627628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The policy name.
  ##   policyVersionId: JString (required)
  ##                  : The policy version ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21627630 = path.getOrDefault("policyName")
  valid_21627630 = validateParameter(valid_21627630, JString, required = true,
                                   default = nil)
  if valid_21627630 != nil:
    section.add "policyName", valid_21627630
  var valid_21627631 = path.getOrDefault("policyVersionId")
  valid_21627631 = validateParameter(valid_21627631, JString, required = true,
                                   default = nil)
  if valid_21627631 != nil:
    section.add "policyVersionId", valid_21627631
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627632 = header.getOrDefault("X-Amz-Date")
  valid_21627632 = validateParameter(valid_21627632, JString, required = false,
                                   default = nil)
  if valid_21627632 != nil:
    section.add "X-Amz-Date", valid_21627632
  var valid_21627633 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627633 = validateParameter(valid_21627633, JString, required = false,
                                   default = nil)
  if valid_21627633 != nil:
    section.add "X-Amz-Security-Token", valid_21627633
  var valid_21627634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627634 = validateParameter(valid_21627634, JString, required = false,
                                   default = nil)
  if valid_21627634 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627634
  var valid_21627635 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627635 = validateParameter(valid_21627635, JString, required = false,
                                   default = nil)
  if valid_21627635 != nil:
    section.add "X-Amz-Algorithm", valid_21627635
  var valid_21627636 = header.getOrDefault("X-Amz-Signature")
  valid_21627636 = validateParameter(valid_21627636, JString, required = false,
                                   default = nil)
  if valid_21627636 != nil:
    section.add "X-Amz-Signature", valid_21627636
  var valid_21627637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627637 = validateParameter(valid_21627637, JString, required = false,
                                   default = nil)
  if valid_21627637 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627637
  var valid_21627638 = header.getOrDefault("X-Amz-Credential")
  valid_21627638 = validateParameter(valid_21627638, JString, required = false,
                                   default = nil)
  if valid_21627638 != nil:
    section.add "X-Amz-Credential", valid_21627638
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627639: Call_SetDefaultPolicyVersion_21627627;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.
  ## 
  let valid = call_21627639.validator(path, query, header, formData, body, _)
  let scheme = call_21627639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627639.makeUrl(scheme.get, call_21627639.host, call_21627639.base,
                               call_21627639.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627639, uri, valid, _)

proc call*(call_21627640: Call_SetDefaultPolicyVersion_21627627;
          policyName: string; policyVersionId: string): Recallable =
  ## setDefaultPolicyVersion
  ## Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.
  ##   policyName: string (required)
  ##             : The policy name.
  ##   policyVersionId: string (required)
  ##                  : The policy version ID.
  var path_21627641 = newJObject()
  add(path_21627641, "policyName", newJString(policyName))
  add(path_21627641, "policyVersionId", newJString(policyVersionId))
  result = call_21627640.call(path_21627641, nil, nil, nil, nil)

var setDefaultPolicyVersion* = Call_SetDefaultPolicyVersion_21627627(
    name: "setDefaultPolicyVersion", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/policies/{policyName}/version/{policyVersionId}",
    validator: validate_SetDefaultPolicyVersion_21627628, base: "/",
    makeUrl: url_SetDefaultPolicyVersion_21627629,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeletePolicyVersion_21627612 = ref object of OpenApiRestCall_21625435
proc url_DeletePolicyVersion_21627614(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  assert "policyVersionId" in path, "`policyVersionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
               (kind: VariableSegment, value: "policyName"),
               (kind: ConstantSegment, value: "/version/"),
               (kind: VariableSegment, value: "policyVersionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeletePolicyVersion_21627613(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The name of the policy.
  ##   policyVersionId: JString (required)
  ##                  : The policy version ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21627615 = path.getOrDefault("policyName")
  valid_21627615 = validateParameter(valid_21627615, JString, required = true,
                                   default = nil)
  if valid_21627615 != nil:
    section.add "policyName", valid_21627615
  var valid_21627616 = path.getOrDefault("policyVersionId")
  valid_21627616 = validateParameter(valid_21627616, JString, required = true,
                                   default = nil)
  if valid_21627616 != nil:
    section.add "policyVersionId", valid_21627616
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627617 = header.getOrDefault("X-Amz-Date")
  valid_21627617 = validateParameter(valid_21627617, JString, required = false,
                                   default = nil)
  if valid_21627617 != nil:
    section.add "X-Amz-Date", valid_21627617
  var valid_21627618 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627618 = validateParameter(valid_21627618, JString, required = false,
                                   default = nil)
  if valid_21627618 != nil:
    section.add "X-Amz-Security-Token", valid_21627618
  var valid_21627619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627619 = validateParameter(valid_21627619, JString, required = false,
                                   default = nil)
  if valid_21627619 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627619
  var valid_21627620 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627620 = validateParameter(valid_21627620, JString, required = false,
                                   default = nil)
  if valid_21627620 != nil:
    section.add "X-Amz-Algorithm", valid_21627620
  var valid_21627621 = header.getOrDefault("X-Amz-Signature")
  valid_21627621 = validateParameter(valid_21627621, JString, required = false,
                                   default = nil)
  if valid_21627621 != nil:
    section.add "X-Amz-Signature", valid_21627621
  var valid_21627622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627622 = validateParameter(valid_21627622, JString, required = false,
                                   default = nil)
  if valid_21627622 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627622
  var valid_21627623 = header.getOrDefault("X-Amz-Credential")
  valid_21627623 = validateParameter(valid_21627623, JString, required = false,
                                   default = nil)
  if valid_21627623 != nil:
    section.add "X-Amz-Credential", valid_21627623
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627624: Call_DeletePolicyVersion_21627612; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.
  ## 
  let valid = call_21627624.validator(path, query, header, formData, body, _)
  let scheme = call_21627624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627624.makeUrl(scheme.get, call_21627624.host, call_21627624.base,
                               call_21627624.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627624, uri, valid, _)

proc call*(call_21627625: Call_DeletePolicyVersion_21627612; policyName: string;
          policyVersionId: string): Recallable =
  ## deletePolicyVersion
  ## Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.
  ##   policyName: string (required)
  ##             : The name of the policy.
  ##   policyVersionId: string (required)
  ##                  : The policy version ID.
  var path_21627626 = newJObject()
  add(path_21627626, "policyName", newJString(policyName))
  add(path_21627626, "policyVersionId", newJString(policyVersionId))
  result = call_21627625.call(path_21627626, nil, nil, nil, nil)

var deletePolicyVersion* = Call_DeletePolicyVersion_21627612(
    name: "deletePolicyVersion", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/policies/{policyName}/version/{policyVersionId}",
    validator: validate_DeletePolicyVersion_21627613, base: "/",
    makeUrl: url_DeletePolicyVersion_21627614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeProvisioningTemplate_21627642 = ref object of OpenApiRestCall_21625435
proc url_DescribeProvisioningTemplate_21627644(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeProvisioningTemplate_21627643(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about a fleet provisioning template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
  ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `templateName` field"
  var valid_21627645 = path.getOrDefault("templateName")
  valid_21627645 = validateParameter(valid_21627645, JString, required = true,
                                   default = nil)
  if valid_21627645 != nil:
    section.add "templateName", valid_21627645
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627646 = header.getOrDefault("X-Amz-Date")
  valid_21627646 = validateParameter(valid_21627646, JString, required = false,
                                   default = nil)
  if valid_21627646 != nil:
    section.add "X-Amz-Date", valid_21627646
  var valid_21627647 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627647 = validateParameter(valid_21627647, JString, required = false,
                                   default = nil)
  if valid_21627647 != nil:
    section.add "X-Amz-Security-Token", valid_21627647
  var valid_21627648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627648 = validateParameter(valid_21627648, JString, required = false,
                                   default = nil)
  if valid_21627648 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627648
  var valid_21627649 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627649 = validateParameter(valid_21627649, JString, required = false,
                                   default = nil)
  if valid_21627649 != nil:
    section.add "X-Amz-Algorithm", valid_21627649
  var valid_21627650 = header.getOrDefault("X-Amz-Signature")
  valid_21627650 = validateParameter(valid_21627650, JString, required = false,
                                   default = nil)
  if valid_21627650 != nil:
    section.add "X-Amz-Signature", valid_21627650
  var valid_21627651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627651 = validateParameter(valid_21627651, JString, required = false,
                                   default = nil)
  if valid_21627651 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627651
  var valid_21627652 = header.getOrDefault("X-Amz-Credential")
  valid_21627652 = validateParameter(valid_21627652, JString, required = false,
                                   default = nil)
  if valid_21627652 != nil:
    section.add "X-Amz-Credential", valid_21627652
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627653: Call_DescribeProvisioningTemplate_21627642;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a fleet provisioning template.
  ## 
  let valid = call_21627653.validator(path, query, header, formData, body, _)
  let scheme = call_21627653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627653.makeUrl(scheme.get, call_21627653.host, call_21627653.base,
                               call_21627653.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627653, uri, valid, _)

proc call*(call_21627654: Call_DescribeProvisioningTemplate_21627642;
          templateName: string): Recallable =
  ## describeProvisioningTemplate
  ## Returns information about a fleet provisioning template.
  ##   templateName: string (required)
  ##               : The name of the fleet provisioning template.
  var path_21627655 = newJObject()
  add(path_21627655, "templateName", newJString(templateName))
  result = call_21627654.call(path_21627655, nil, nil, nil, nil)

var describeProvisioningTemplate* = Call_DescribeProvisioningTemplate_21627642(
    name: "describeProvisioningTemplate", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/provisioning-templates/{templateName}",
    validator: validate_DescribeProvisioningTemplate_21627643, base: "/",
    makeUrl: url_DescribeProvisioningTemplate_21627644,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateProvisioningTemplate_21627670 = ref object of OpenApiRestCall_21625435
proc url_UpdateProvisioningTemplate_21627672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateProvisioningTemplate_21627671(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a fleet provisioning template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
  ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `templateName` field"
  var valid_21627673 = path.getOrDefault("templateName")
  valid_21627673 = validateParameter(valid_21627673, JString, required = true,
                                   default = nil)
  if valid_21627673 != nil:
    section.add "templateName", valid_21627673
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627674 = header.getOrDefault("X-Amz-Date")
  valid_21627674 = validateParameter(valid_21627674, JString, required = false,
                                   default = nil)
  if valid_21627674 != nil:
    section.add "X-Amz-Date", valid_21627674
  var valid_21627675 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627675 = validateParameter(valid_21627675, JString, required = false,
                                   default = nil)
  if valid_21627675 != nil:
    section.add "X-Amz-Security-Token", valid_21627675
  var valid_21627676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627676 = validateParameter(valid_21627676, JString, required = false,
                                   default = nil)
  if valid_21627676 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627676
  var valid_21627677 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627677 = validateParameter(valid_21627677, JString, required = false,
                                   default = nil)
  if valid_21627677 != nil:
    section.add "X-Amz-Algorithm", valid_21627677
  var valid_21627678 = header.getOrDefault("X-Amz-Signature")
  valid_21627678 = validateParameter(valid_21627678, JString, required = false,
                                   default = nil)
  if valid_21627678 != nil:
    section.add "X-Amz-Signature", valid_21627678
  var valid_21627679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627679 = validateParameter(valid_21627679, JString, required = false,
                                   default = nil)
  if valid_21627679 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627679
  var valid_21627680 = header.getOrDefault("X-Amz-Credential")
  valid_21627680 = validateParameter(valid_21627680, JString, required = false,
                                   default = nil)
  if valid_21627680 != nil:
    section.add "X-Amz-Credential", valid_21627680
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627682: Call_UpdateProvisioningTemplate_21627670;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a fleet provisioning template.
  ## 
  let valid = call_21627682.validator(path, query, header, formData, body, _)
  let scheme = call_21627682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627682.makeUrl(scheme.get, call_21627682.host, call_21627682.base,
                               call_21627682.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627682, uri, valid, _)

proc call*(call_21627683: Call_UpdateProvisioningTemplate_21627670;
          templateName: string; body: JsonNode): Recallable =
  ## updateProvisioningTemplate
  ## Updates a fleet provisioning template.
  ##   templateName: string (required)
  ##               : The name of the fleet provisioning template.
  ##   body: JObject (required)
  var path_21627684 = newJObject()
  var body_21627685 = newJObject()
  add(path_21627684, "templateName", newJString(templateName))
  if body != nil:
    body_21627685 = body
  result = call_21627683.call(path_21627684, nil, nil, nil, body_21627685)

var updateProvisioningTemplate* = Call_UpdateProvisioningTemplate_21627670(
    name: "updateProvisioningTemplate", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/provisioning-templates/{templateName}",
    validator: validate_UpdateProvisioningTemplate_21627671, base: "/",
    makeUrl: url_UpdateProvisioningTemplate_21627672,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProvisioningTemplate_21627656 = ref object of OpenApiRestCall_21625435
proc url_DeleteProvisioningTemplate_21627658(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteProvisioningTemplate_21627657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a fleet provisioning template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
  ##               : The name of the fleet provision template to delete.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `templateName` field"
  var valid_21627659 = path.getOrDefault("templateName")
  valid_21627659 = validateParameter(valid_21627659, JString, required = true,
                                   default = nil)
  if valid_21627659 != nil:
    section.add "templateName", valid_21627659
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627660 = header.getOrDefault("X-Amz-Date")
  valid_21627660 = validateParameter(valid_21627660, JString, required = false,
                                   default = nil)
  if valid_21627660 != nil:
    section.add "X-Amz-Date", valid_21627660
  var valid_21627661 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627661 = validateParameter(valid_21627661, JString, required = false,
                                   default = nil)
  if valid_21627661 != nil:
    section.add "X-Amz-Security-Token", valid_21627661
  var valid_21627662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627662 = validateParameter(valid_21627662, JString, required = false,
                                   default = nil)
  if valid_21627662 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627662
  var valid_21627663 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627663 = validateParameter(valid_21627663, JString, required = false,
                                   default = nil)
  if valid_21627663 != nil:
    section.add "X-Amz-Algorithm", valid_21627663
  var valid_21627664 = header.getOrDefault("X-Amz-Signature")
  valid_21627664 = validateParameter(valid_21627664, JString, required = false,
                                   default = nil)
  if valid_21627664 != nil:
    section.add "X-Amz-Signature", valid_21627664
  var valid_21627665 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627665 = validateParameter(valid_21627665, JString, required = false,
                                   default = nil)
  if valid_21627665 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627665
  var valid_21627666 = header.getOrDefault("X-Amz-Credential")
  valid_21627666 = validateParameter(valid_21627666, JString, required = false,
                                   default = nil)
  if valid_21627666 != nil:
    section.add "X-Amz-Credential", valid_21627666
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627667: Call_DeleteProvisioningTemplate_21627656;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a fleet provisioning template.
  ## 
  let valid = call_21627667.validator(path, query, header, formData, body, _)
  let scheme = call_21627667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627667.makeUrl(scheme.get, call_21627667.host, call_21627667.base,
                               call_21627667.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627667, uri, valid, _)

proc call*(call_21627668: Call_DeleteProvisioningTemplate_21627656;
          templateName: string): Recallable =
  ## deleteProvisioningTemplate
  ## Deletes a fleet provisioning template.
  ##   templateName: string (required)
  ##               : The name of the fleet provision template to delete.
  var path_21627669 = newJObject()
  add(path_21627669, "templateName", newJString(templateName))
  result = call_21627668.call(path_21627669, nil, nil, nil, nil)

var deleteProvisioningTemplate* = Call_DeleteProvisioningTemplate_21627656(
    name: "deleteProvisioningTemplate", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/provisioning-templates/{templateName}",
    validator: validate_DeleteProvisioningTemplate_21627657, base: "/",
    makeUrl: url_DeleteProvisioningTemplate_21627658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeProvisioningTemplateVersion_21627686 = ref object of OpenApiRestCall_21625435
proc url_DescribeProvisioningTemplateVersion_21627688(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  assert "versionId" in path, "`versionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName"),
               (kind: ConstantSegment, value: "/versions/"),
               (kind: VariableSegment, value: "versionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeProvisioningTemplateVersion_21627687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about a fleet provisioning template version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   versionId: JInt (required)
  ##            : The fleet provisioning template version ID.
  ##   templateName: JString (required)
  ##               : The template name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `versionId` field"
  var valid_21627689 = path.getOrDefault("versionId")
  valid_21627689 = validateParameter(valid_21627689, JInt, required = true,
                                   default = nil)
  if valid_21627689 != nil:
    section.add "versionId", valid_21627689
  var valid_21627690 = path.getOrDefault("templateName")
  valid_21627690 = validateParameter(valid_21627690, JString, required = true,
                                   default = nil)
  if valid_21627690 != nil:
    section.add "templateName", valid_21627690
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627691 = header.getOrDefault("X-Amz-Date")
  valid_21627691 = validateParameter(valid_21627691, JString, required = false,
                                   default = nil)
  if valid_21627691 != nil:
    section.add "X-Amz-Date", valid_21627691
  var valid_21627692 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627692 = validateParameter(valid_21627692, JString, required = false,
                                   default = nil)
  if valid_21627692 != nil:
    section.add "X-Amz-Security-Token", valid_21627692
  var valid_21627693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627693 = validateParameter(valid_21627693, JString, required = false,
                                   default = nil)
  if valid_21627693 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627693
  var valid_21627694 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627694 = validateParameter(valid_21627694, JString, required = false,
                                   default = nil)
  if valid_21627694 != nil:
    section.add "X-Amz-Algorithm", valid_21627694
  var valid_21627695 = header.getOrDefault("X-Amz-Signature")
  valid_21627695 = validateParameter(valid_21627695, JString, required = false,
                                   default = nil)
  if valid_21627695 != nil:
    section.add "X-Amz-Signature", valid_21627695
  var valid_21627696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627696 = validateParameter(valid_21627696, JString, required = false,
                                   default = nil)
  if valid_21627696 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627696
  var valid_21627697 = header.getOrDefault("X-Amz-Credential")
  valid_21627697 = validateParameter(valid_21627697, JString, required = false,
                                   default = nil)
  if valid_21627697 != nil:
    section.add "X-Amz-Credential", valid_21627697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627698: Call_DescribeProvisioningTemplateVersion_21627686;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a fleet provisioning template version.
  ## 
  let valid = call_21627698.validator(path, query, header, formData, body, _)
  let scheme = call_21627698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627698.makeUrl(scheme.get, call_21627698.host, call_21627698.base,
                               call_21627698.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627698, uri, valid, _)

proc call*(call_21627699: Call_DescribeProvisioningTemplateVersion_21627686;
          versionId: int; templateName: string): Recallable =
  ## describeProvisioningTemplateVersion
  ## Returns information about a fleet provisioning template version.
  ##   versionId: int (required)
  ##            : The fleet provisioning template version ID.
  ##   templateName: string (required)
  ##               : The template name.
  var path_21627700 = newJObject()
  add(path_21627700, "versionId", newJInt(versionId))
  add(path_21627700, "templateName", newJString(templateName))
  result = call_21627699.call(path_21627700, nil, nil, nil, nil)

var describeProvisioningTemplateVersion* = Call_DescribeProvisioningTemplateVersion_21627686(
    name: "describeProvisioningTemplateVersion", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions/{versionId}",
    validator: validate_DescribeProvisioningTemplateVersion_21627687, base: "/",
    makeUrl: url_DescribeProvisioningTemplateVersion_21627688,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProvisioningTemplateVersion_21627701 = ref object of OpenApiRestCall_21625435
proc url_DeleteProvisioningTemplateVersion_21627703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  assert "versionId" in path, "`versionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
               (kind: VariableSegment, value: "templateName"),
               (kind: ConstantSegment, value: "/versions/"),
               (kind: VariableSegment, value: "versionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteProvisioningTemplateVersion_21627702(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a fleet provisioning template version.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   versionId: JInt (required)
  ##            : The fleet provisioning template version ID to delete.
  ##   templateName: JString (required)
  ##               : The name of the fleet provisioning template version to delete.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `versionId` field"
  var valid_21627704 = path.getOrDefault("versionId")
  valid_21627704 = validateParameter(valid_21627704, JInt, required = true,
                                   default = nil)
  if valid_21627704 != nil:
    section.add "versionId", valid_21627704
  var valid_21627705 = path.getOrDefault("templateName")
  valid_21627705 = validateParameter(valid_21627705, JString, required = true,
                                   default = nil)
  if valid_21627705 != nil:
    section.add "templateName", valid_21627705
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627706 = header.getOrDefault("X-Amz-Date")
  valid_21627706 = validateParameter(valid_21627706, JString, required = false,
                                   default = nil)
  if valid_21627706 != nil:
    section.add "X-Amz-Date", valid_21627706
  var valid_21627707 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627707 = validateParameter(valid_21627707, JString, required = false,
                                   default = nil)
  if valid_21627707 != nil:
    section.add "X-Amz-Security-Token", valid_21627707
  var valid_21627708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627708 = validateParameter(valid_21627708, JString, required = false,
                                   default = nil)
  if valid_21627708 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627708
  var valid_21627709 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627709 = validateParameter(valid_21627709, JString, required = false,
                                   default = nil)
  if valid_21627709 != nil:
    section.add "X-Amz-Algorithm", valid_21627709
  var valid_21627710 = header.getOrDefault("X-Amz-Signature")
  valid_21627710 = validateParameter(valid_21627710, JString, required = false,
                                   default = nil)
  if valid_21627710 != nil:
    section.add "X-Amz-Signature", valid_21627710
  var valid_21627711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627711 = validateParameter(valid_21627711, JString, required = false,
                                   default = nil)
  if valid_21627711 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627711
  var valid_21627712 = header.getOrDefault("X-Amz-Credential")
  valid_21627712 = validateParameter(valid_21627712, JString, required = false,
                                   default = nil)
  if valid_21627712 != nil:
    section.add "X-Amz-Credential", valid_21627712
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627713: Call_DeleteProvisioningTemplateVersion_21627701;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a fleet provisioning template version.
  ## 
  let valid = call_21627713.validator(path, query, header, formData, body, _)
  let scheme = call_21627713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627713.makeUrl(scheme.get, call_21627713.host, call_21627713.base,
                               call_21627713.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627713, uri, valid, _)

proc call*(call_21627714: Call_DeleteProvisioningTemplateVersion_21627701;
          versionId: int; templateName: string): Recallable =
  ## deleteProvisioningTemplateVersion
  ## Deletes a fleet provisioning template version.
  ##   versionId: int (required)
  ##            : The fleet provisioning template version ID to delete.
  ##   templateName: string (required)
  ##               : The name of the fleet provisioning template version to delete.
  var path_21627715 = newJObject()
  add(path_21627715, "versionId", newJInt(versionId))
  add(path_21627715, "templateName", newJString(templateName))
  result = call_21627714.call(path_21627715, nil, nil, nil, nil)

var deleteProvisioningTemplateVersion* = Call_DeleteProvisioningTemplateVersion_21627701(
    name: "deleteProvisioningTemplateVersion", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions/{versionId}",
    validator: validate_DeleteProvisioningTemplateVersion_21627702, base: "/",
    makeUrl: url_DeleteProvisioningTemplateVersion_21627703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegistrationCode_21627716 = ref object of OpenApiRestCall_21625435
proc url_GetRegistrationCode_21627718(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegistrationCode_21627717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a registration code used to register a CA certificate with AWS IoT.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627719 = header.getOrDefault("X-Amz-Date")
  valid_21627719 = validateParameter(valid_21627719, JString, required = false,
                                   default = nil)
  if valid_21627719 != nil:
    section.add "X-Amz-Date", valid_21627719
  var valid_21627720 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627720 = validateParameter(valid_21627720, JString, required = false,
                                   default = nil)
  if valid_21627720 != nil:
    section.add "X-Amz-Security-Token", valid_21627720
  var valid_21627721 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627721 = validateParameter(valid_21627721, JString, required = false,
                                   default = nil)
  if valid_21627721 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627721
  var valid_21627722 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627722 = validateParameter(valid_21627722, JString, required = false,
                                   default = nil)
  if valid_21627722 != nil:
    section.add "X-Amz-Algorithm", valid_21627722
  var valid_21627723 = header.getOrDefault("X-Amz-Signature")
  valid_21627723 = validateParameter(valid_21627723, JString, required = false,
                                   default = nil)
  if valid_21627723 != nil:
    section.add "X-Amz-Signature", valid_21627723
  var valid_21627724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627724 = validateParameter(valid_21627724, JString, required = false,
                                   default = nil)
  if valid_21627724 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627724
  var valid_21627725 = header.getOrDefault("X-Amz-Credential")
  valid_21627725 = validateParameter(valid_21627725, JString, required = false,
                                   default = nil)
  if valid_21627725 != nil:
    section.add "X-Amz-Credential", valid_21627725
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627726: Call_GetRegistrationCode_21627716; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a registration code used to register a CA certificate with AWS IoT.
  ## 
  let valid = call_21627726.validator(path, query, header, formData, body, _)
  let scheme = call_21627726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627726.makeUrl(scheme.get, call_21627726.host, call_21627726.base,
                               call_21627726.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627726, uri, valid, _)

proc call*(call_21627727: Call_GetRegistrationCode_21627716): Recallable =
  ## getRegistrationCode
  ## Gets a registration code used to register a CA certificate with AWS IoT.
  result = call_21627727.call(nil, nil, nil, nil, nil)

var getRegistrationCode* = Call_GetRegistrationCode_21627716(
    name: "getRegistrationCode", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/registrationcode",
    validator: validate_GetRegistrationCode_21627717, base: "/",
    makeUrl: url_GetRegistrationCode_21627718,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRegistrationCode_21627728 = ref object of OpenApiRestCall_21625435
proc url_DeleteRegistrationCode_21627730(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DeleteRegistrationCode_21627729(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a CA certificate registration code.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627731 = header.getOrDefault("X-Amz-Date")
  valid_21627731 = validateParameter(valid_21627731, JString, required = false,
                                   default = nil)
  if valid_21627731 != nil:
    section.add "X-Amz-Date", valid_21627731
  var valid_21627732 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627732 = validateParameter(valid_21627732, JString, required = false,
                                   default = nil)
  if valid_21627732 != nil:
    section.add "X-Amz-Security-Token", valid_21627732
  var valid_21627733 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627733 = validateParameter(valid_21627733, JString, required = false,
                                   default = nil)
  if valid_21627733 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627733
  var valid_21627734 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627734 = validateParameter(valid_21627734, JString, required = false,
                                   default = nil)
  if valid_21627734 != nil:
    section.add "X-Amz-Algorithm", valid_21627734
  var valid_21627735 = header.getOrDefault("X-Amz-Signature")
  valid_21627735 = validateParameter(valid_21627735, JString, required = false,
                                   default = nil)
  if valid_21627735 != nil:
    section.add "X-Amz-Signature", valid_21627735
  var valid_21627736 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627736 = validateParameter(valid_21627736, JString, required = false,
                                   default = nil)
  if valid_21627736 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627736
  var valid_21627737 = header.getOrDefault("X-Amz-Credential")
  valid_21627737 = validateParameter(valid_21627737, JString, required = false,
                                   default = nil)
  if valid_21627737 != nil:
    section.add "X-Amz-Credential", valid_21627737
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627738: Call_DeleteRegistrationCode_21627728;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a CA certificate registration code.
  ## 
  let valid = call_21627738.validator(path, query, header, formData, body, _)
  let scheme = call_21627738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627738.makeUrl(scheme.get, call_21627738.host, call_21627738.base,
                               call_21627738.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627738, uri, valid, _)

proc call*(call_21627739: Call_DeleteRegistrationCode_21627728): Recallable =
  ## deleteRegistrationCode
  ## Deletes a CA certificate registration code.
  result = call_21627739.call(nil, nil, nil, nil, nil)

var deleteRegistrationCode* = Call_DeleteRegistrationCode_21627728(
    name: "deleteRegistrationCode", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/registrationcode",
    validator: validate_DeleteRegistrationCode_21627729, base: "/",
    makeUrl: url_DeleteRegistrationCode_21627730,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTopicRuleDestination_21627740 = ref object of OpenApiRestCall_21625435
proc url_GetTopicRuleDestination_21627742(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "arn" in path, "`arn` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/destinations/"),
               (kind: VariableSegment, value: "arn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetTopicRuleDestination_21627741(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a topic rule destination.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   arn: JString (required)
  ##      : The ARN of the topic rule destination.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `arn` field"
  var valid_21627743 = path.getOrDefault("arn")
  valid_21627743 = validateParameter(valid_21627743, JString, required = true,
                                   default = nil)
  if valid_21627743 != nil:
    section.add "arn", valid_21627743
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627744 = header.getOrDefault("X-Amz-Date")
  valid_21627744 = validateParameter(valid_21627744, JString, required = false,
                                   default = nil)
  if valid_21627744 != nil:
    section.add "X-Amz-Date", valid_21627744
  var valid_21627745 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627745 = validateParameter(valid_21627745, JString, required = false,
                                   default = nil)
  if valid_21627745 != nil:
    section.add "X-Amz-Security-Token", valid_21627745
  var valid_21627746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627746 = validateParameter(valid_21627746, JString, required = false,
                                   default = nil)
  if valid_21627746 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627746
  var valid_21627747 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627747 = validateParameter(valid_21627747, JString, required = false,
                                   default = nil)
  if valid_21627747 != nil:
    section.add "X-Amz-Algorithm", valid_21627747
  var valid_21627748 = header.getOrDefault("X-Amz-Signature")
  valid_21627748 = validateParameter(valid_21627748, JString, required = false,
                                   default = nil)
  if valid_21627748 != nil:
    section.add "X-Amz-Signature", valid_21627748
  var valid_21627749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627749 = validateParameter(valid_21627749, JString, required = false,
                                   default = nil)
  if valid_21627749 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627749
  var valid_21627750 = header.getOrDefault("X-Amz-Credential")
  valid_21627750 = validateParameter(valid_21627750, JString, required = false,
                                   default = nil)
  if valid_21627750 != nil:
    section.add "X-Amz-Credential", valid_21627750
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627751: Call_GetTopicRuleDestination_21627740;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a topic rule destination.
  ## 
  let valid = call_21627751.validator(path, query, header, formData, body, _)
  let scheme = call_21627751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627751.makeUrl(scheme.get, call_21627751.host, call_21627751.base,
                               call_21627751.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627751, uri, valid, _)

proc call*(call_21627752: Call_GetTopicRuleDestination_21627740; arn: string): Recallable =
  ## getTopicRuleDestination
  ## Gets information about a topic rule destination.
  ##   arn: string (required)
  ##      : The ARN of the topic rule destination.
  var path_21627753 = newJObject()
  add(path_21627753, "arn", newJString(arn))
  result = call_21627752.call(path_21627753, nil, nil, nil, nil)

var getTopicRuleDestination* = Call_GetTopicRuleDestination_21627740(
    name: "getTopicRuleDestination", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/destinations/{arn}",
    validator: validate_GetTopicRuleDestination_21627741, base: "/",
    makeUrl: url_GetTopicRuleDestination_21627742,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteTopicRuleDestination_21627754 = ref object of OpenApiRestCall_21625435
proc url_DeleteTopicRuleDestination_21627756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "arn" in path, "`arn` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/destinations/"),
               (kind: VariableSegment, value: "arn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteTopicRuleDestination_21627755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a topic rule destination.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   arn: JString (required)
  ##      : The ARN of the topic rule destination to delete.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `arn` field"
  var valid_21627757 = path.getOrDefault("arn")
  valid_21627757 = validateParameter(valid_21627757, JString, required = true,
                                   default = nil)
  if valid_21627757 != nil:
    section.add "arn", valid_21627757
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627758 = header.getOrDefault("X-Amz-Date")
  valid_21627758 = validateParameter(valid_21627758, JString, required = false,
                                   default = nil)
  if valid_21627758 != nil:
    section.add "X-Amz-Date", valid_21627758
  var valid_21627759 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627759 = validateParameter(valid_21627759, JString, required = false,
                                   default = nil)
  if valid_21627759 != nil:
    section.add "X-Amz-Security-Token", valid_21627759
  var valid_21627760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627760 = validateParameter(valid_21627760, JString, required = false,
                                   default = nil)
  if valid_21627760 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627760
  var valid_21627761 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627761 = validateParameter(valid_21627761, JString, required = false,
                                   default = nil)
  if valid_21627761 != nil:
    section.add "X-Amz-Algorithm", valid_21627761
  var valid_21627762 = header.getOrDefault("X-Amz-Signature")
  valid_21627762 = validateParameter(valid_21627762, JString, required = false,
                                   default = nil)
  if valid_21627762 != nil:
    section.add "X-Amz-Signature", valid_21627762
  var valid_21627763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627763 = validateParameter(valid_21627763, JString, required = false,
                                   default = nil)
  if valid_21627763 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627763
  var valid_21627764 = header.getOrDefault("X-Amz-Credential")
  valid_21627764 = validateParameter(valid_21627764, JString, required = false,
                                   default = nil)
  if valid_21627764 != nil:
    section.add "X-Amz-Credential", valid_21627764
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627765: Call_DeleteTopicRuleDestination_21627754;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a topic rule destination.
  ## 
  let valid = call_21627765.validator(path, query, header, formData, body, _)
  let scheme = call_21627765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627765.makeUrl(scheme.get, call_21627765.host, call_21627765.base,
                               call_21627765.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627765, uri, valid, _)

proc call*(call_21627766: Call_DeleteTopicRuleDestination_21627754; arn: string): Recallable =
  ## deleteTopicRuleDestination
  ## Deletes a topic rule destination.
  ##   arn: string (required)
  ##      : The ARN of the topic rule destination to delete.
  var path_21627767 = newJObject()
  add(path_21627767, "arn", newJString(arn))
  result = call_21627766.call(path_21627767, nil, nil, nil, nil)

var deleteTopicRuleDestination* = Call_DeleteTopicRuleDestination_21627754(
    name: "deleteTopicRuleDestination", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/destinations/{arn}",
    validator: validate_DeleteTopicRuleDestination_21627755, base: "/",
    makeUrl: url_DeleteTopicRuleDestination_21627756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteV2LoggingLevel_21627768 = ref object of OpenApiRestCall_21625435
proc url_DeleteV2LoggingLevel_21627770(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DeleteV2LoggingLevel_21627769(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a logging level.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   targetType: JString (required)
  ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   targetName: JString (required)
  ##             : The name of the resource for which you are configuring logging.
  section = newJObject()
  var valid_21627771 = query.getOrDefault("targetType")
  valid_21627771 = validateParameter(valid_21627771, JString, required = true,
                                   default = newJString("DEFAULT"))
  if valid_21627771 != nil:
    section.add "targetType", valid_21627771
  var valid_21627772 = query.getOrDefault("targetName")
  valid_21627772 = validateParameter(valid_21627772, JString, required = true,
                                   default = nil)
  if valid_21627772 != nil:
    section.add "targetName", valid_21627772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627773 = header.getOrDefault("X-Amz-Date")
  valid_21627773 = validateParameter(valid_21627773, JString, required = false,
                                   default = nil)
  if valid_21627773 != nil:
    section.add "X-Amz-Date", valid_21627773
  var valid_21627774 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627774 = validateParameter(valid_21627774, JString, required = false,
                                   default = nil)
  if valid_21627774 != nil:
    section.add "X-Amz-Security-Token", valid_21627774
  var valid_21627775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627775 = validateParameter(valid_21627775, JString, required = false,
                                   default = nil)
  if valid_21627775 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627775
  var valid_21627776 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627776 = validateParameter(valid_21627776, JString, required = false,
                                   default = nil)
  if valid_21627776 != nil:
    section.add "X-Amz-Algorithm", valid_21627776
  var valid_21627777 = header.getOrDefault("X-Amz-Signature")
  valid_21627777 = validateParameter(valid_21627777, JString, required = false,
                                   default = nil)
  if valid_21627777 != nil:
    section.add "X-Amz-Signature", valid_21627777
  var valid_21627778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627778 = validateParameter(valid_21627778, JString, required = false,
                                   default = nil)
  if valid_21627778 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627778
  var valid_21627779 = header.getOrDefault("X-Amz-Credential")
  valid_21627779 = validateParameter(valid_21627779, JString, required = false,
                                   default = nil)
  if valid_21627779 != nil:
    section.add "X-Amz-Credential", valid_21627779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627780: Call_DeleteV2LoggingLevel_21627768; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a logging level.
  ## 
  let valid = call_21627780.validator(path, query, header, formData, body, _)
  let scheme = call_21627780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627780.makeUrl(scheme.get, call_21627780.host, call_21627780.base,
                               call_21627780.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627780, uri, valid, _)

proc call*(call_21627781: Call_DeleteV2LoggingLevel_21627768; targetName: string;
          targetType: string = "DEFAULT"): Recallable =
  ## deleteV2LoggingLevel
  ## Deletes a logging level.
  ##   targetType: string (required)
  ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   targetName: string (required)
  ##             : The name of the resource for which you are configuring logging.
  var query_21627782 = newJObject()
  add(query_21627782, "targetType", newJString(targetType))
  add(query_21627782, "targetName", newJString(targetName))
  result = call_21627781.call(nil, query_21627782, nil, nil, nil)

var deleteV2LoggingLevel* = Call_DeleteV2LoggingLevel_21627768(
    name: "deleteV2LoggingLevel", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/v2LoggingLevel#targetType&targetName",
    validator: validate_DeleteV2LoggingLevel_21627769, base: "/",
    makeUrl: url_DeleteV2LoggingLevel_21627770,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeprecateThingType_21627783 = ref object of OpenApiRestCall_21625435
proc url_DeprecateThingType_21627785(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
               (kind: VariableSegment, value: "thingTypeName"),
               (kind: ConstantSegment, value: "/deprecate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeprecateThingType_21627784(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deprecates a thing type. You can not associate new things with deprecated thing type.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
  ##                : The name of the thing type to deprecate.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingTypeName` field"
  var valid_21627786 = path.getOrDefault("thingTypeName")
  valid_21627786 = validateParameter(valid_21627786, JString, required = true,
                                   default = nil)
  if valid_21627786 != nil:
    section.add "thingTypeName", valid_21627786
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627787 = header.getOrDefault("X-Amz-Date")
  valid_21627787 = validateParameter(valid_21627787, JString, required = false,
                                   default = nil)
  if valid_21627787 != nil:
    section.add "X-Amz-Date", valid_21627787
  var valid_21627788 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627788 = validateParameter(valid_21627788, JString, required = false,
                                   default = nil)
  if valid_21627788 != nil:
    section.add "X-Amz-Security-Token", valid_21627788
  var valid_21627789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627789 = validateParameter(valid_21627789, JString, required = false,
                                   default = nil)
  if valid_21627789 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627789
  var valid_21627790 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627790 = validateParameter(valid_21627790, JString, required = false,
                                   default = nil)
  if valid_21627790 != nil:
    section.add "X-Amz-Algorithm", valid_21627790
  var valid_21627791 = header.getOrDefault("X-Amz-Signature")
  valid_21627791 = validateParameter(valid_21627791, JString, required = false,
                                   default = nil)
  if valid_21627791 != nil:
    section.add "X-Amz-Signature", valid_21627791
  var valid_21627792 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627792 = validateParameter(valid_21627792, JString, required = false,
                                   default = nil)
  if valid_21627792 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627792
  var valid_21627793 = header.getOrDefault("X-Amz-Credential")
  valid_21627793 = validateParameter(valid_21627793, JString, required = false,
                                   default = nil)
  if valid_21627793 != nil:
    section.add "X-Amz-Credential", valid_21627793
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627795: Call_DeprecateThingType_21627783; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecates a thing type. You can not associate new things with deprecated thing type.
  ## 
  let valid = call_21627795.validator(path, query, header, formData, body, _)
  let scheme = call_21627795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627795.makeUrl(scheme.get, call_21627795.host, call_21627795.base,
                               call_21627795.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627795, uri, valid, _)

proc call*(call_21627796: Call_DeprecateThingType_21627783; body: JsonNode;
          thingTypeName: string): Recallable =
  ## deprecateThingType
  ## Deprecates a thing type. You can not associate new things with deprecated thing type.
  ##   body: JObject (required)
  ##   thingTypeName: string (required)
  ##                : The name of the thing type to deprecate.
  var path_21627797 = newJObject()
  var body_21627798 = newJObject()
  if body != nil:
    body_21627798 = body
  add(path_21627797, "thingTypeName", newJString(thingTypeName))
  result = call_21627796.call(path_21627797, nil, nil, nil, body_21627798)

var deprecateThingType* = Call_DeprecateThingType_21627783(
    name: "deprecateThingType", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/thing-types/{thingTypeName}/deprecate",
    validator: validate_DeprecateThingType_21627784, base: "/",
    makeUrl: url_DeprecateThingType_21627785, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuditFinding_21627799 = ref object of OpenApiRestCall_21625435
proc url_DescribeAuditFinding_21627801(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "findingId" in path, "`findingId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/findings/"),
               (kind: VariableSegment, value: "findingId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuditFinding_21627800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   findingId: JString (required)
  ##            : A unique identifier for a single audit finding. You can use this identifier to apply mitigation actions to the finding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `findingId` field"
  var valid_21627802 = path.getOrDefault("findingId")
  valid_21627802 = validateParameter(valid_21627802, JString, required = true,
                                   default = nil)
  if valid_21627802 != nil:
    section.add "findingId", valid_21627802
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627803 = header.getOrDefault("X-Amz-Date")
  valid_21627803 = validateParameter(valid_21627803, JString, required = false,
                                   default = nil)
  if valid_21627803 != nil:
    section.add "X-Amz-Date", valid_21627803
  var valid_21627804 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627804 = validateParameter(valid_21627804, JString, required = false,
                                   default = nil)
  if valid_21627804 != nil:
    section.add "X-Amz-Security-Token", valid_21627804
  var valid_21627805 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627805 = validateParameter(valid_21627805, JString, required = false,
                                   default = nil)
  if valid_21627805 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627805
  var valid_21627806 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627806 = validateParameter(valid_21627806, JString, required = false,
                                   default = nil)
  if valid_21627806 != nil:
    section.add "X-Amz-Algorithm", valid_21627806
  var valid_21627807 = header.getOrDefault("X-Amz-Signature")
  valid_21627807 = validateParameter(valid_21627807, JString, required = false,
                                   default = nil)
  if valid_21627807 != nil:
    section.add "X-Amz-Signature", valid_21627807
  var valid_21627808 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627808 = validateParameter(valid_21627808, JString, required = false,
                                   default = nil)
  if valid_21627808 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627808
  var valid_21627809 = header.getOrDefault("X-Amz-Credential")
  valid_21627809 = validateParameter(valid_21627809, JString, required = false,
                                   default = nil)
  if valid_21627809 != nil:
    section.add "X-Amz-Credential", valid_21627809
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627810: Call_DescribeAuditFinding_21627799; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.
  ## 
  let valid = call_21627810.validator(path, query, header, formData, body, _)
  let scheme = call_21627810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627810.makeUrl(scheme.get, call_21627810.host, call_21627810.base,
                               call_21627810.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627810, uri, valid, _)

proc call*(call_21627811: Call_DescribeAuditFinding_21627799; findingId: string): Recallable =
  ## describeAuditFinding
  ## Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.
  ##   findingId: string (required)
  ##            : A unique identifier for a single audit finding. You can use this identifier to apply mitigation actions to the finding.
  var path_21627812 = newJObject()
  add(path_21627812, "findingId", newJString(findingId))
  result = call_21627811.call(path_21627812, nil, nil, nil, nil)

var describeAuditFinding* = Call_DescribeAuditFinding_21627799(
    name: "describeAuditFinding", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/findings/{findingId}",
    validator: validate_DescribeAuditFinding_21627800, base: "/",
    makeUrl: url_DescribeAuditFinding_21627801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartAuditMitigationActionsTask_21627827 = ref object of OpenApiRestCall_21625435
proc url_StartAuditMitigationActionsTask_21627829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/mitigationactions/tasks/"),
               (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_StartAuditMitigationActionsTask_21627828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Starts a task that applies a set of mitigation actions to the specified target.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21627830 = path.getOrDefault("taskId")
  valid_21627830 = validateParameter(valid_21627830, JString, required = true,
                                   default = nil)
  if valid_21627830 != nil:
    section.add "taskId", valid_21627830
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627831 = header.getOrDefault("X-Amz-Date")
  valid_21627831 = validateParameter(valid_21627831, JString, required = false,
                                   default = nil)
  if valid_21627831 != nil:
    section.add "X-Amz-Date", valid_21627831
  var valid_21627832 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627832 = validateParameter(valid_21627832, JString, required = false,
                                   default = nil)
  if valid_21627832 != nil:
    section.add "X-Amz-Security-Token", valid_21627832
  var valid_21627833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627833 = validateParameter(valid_21627833, JString, required = false,
                                   default = nil)
  if valid_21627833 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627833
  var valid_21627834 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627834 = validateParameter(valid_21627834, JString, required = false,
                                   default = nil)
  if valid_21627834 != nil:
    section.add "X-Amz-Algorithm", valid_21627834
  var valid_21627835 = header.getOrDefault("X-Amz-Signature")
  valid_21627835 = validateParameter(valid_21627835, JString, required = false,
                                   default = nil)
  if valid_21627835 != nil:
    section.add "X-Amz-Signature", valid_21627835
  var valid_21627836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627836 = validateParameter(valid_21627836, JString, required = false,
                                   default = nil)
  if valid_21627836 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627836
  var valid_21627837 = header.getOrDefault("X-Amz-Credential")
  valid_21627837 = validateParameter(valid_21627837, JString, required = false,
                                   default = nil)
  if valid_21627837 != nil:
    section.add "X-Amz-Credential", valid_21627837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627839: Call_StartAuditMitigationActionsTask_21627827;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts a task that applies a set of mitigation actions to the specified target.
  ## 
  let valid = call_21627839.validator(path, query, header, formData, body, _)
  let scheme = call_21627839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627839.makeUrl(scheme.get, call_21627839.host, call_21627839.base,
                               call_21627839.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627839, uri, valid, _)

proc call*(call_21627840: Call_StartAuditMitigationActionsTask_21627827;
          body: JsonNode; taskId: string): Recallable =
  ## startAuditMitigationActionsTask
  ## Starts a task that applies a set of mitigation actions to the specified target.
  ##   body: JObject (required)
  ##   taskId: string (required)
  ##         : A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.
  var path_21627841 = newJObject()
  var body_21627842 = newJObject()
  if body != nil:
    body_21627842 = body
  add(path_21627841, "taskId", newJString(taskId))
  result = call_21627840.call(path_21627841, nil, nil, nil, body_21627842)

var startAuditMitigationActionsTask* = Call_StartAuditMitigationActionsTask_21627827(
    name: "startAuditMitigationActionsTask", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/audit/mitigationactions/tasks/{taskId}",
    validator: validate_StartAuditMitigationActionsTask_21627828, base: "/",
    makeUrl: url_StartAuditMitigationActionsTask_21627829,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuditMitigationActionsTask_21627813 = ref object of OpenApiRestCall_21625435
proc url_DescribeAuditMitigationActionsTask_21627815(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/mitigationactions/tasks/"),
               (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuditMitigationActionsTask_21627814(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : The unique identifier for the audit mitigation task.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21627816 = path.getOrDefault("taskId")
  valid_21627816 = validateParameter(valid_21627816, JString, required = true,
                                   default = nil)
  if valid_21627816 != nil:
    section.add "taskId", valid_21627816
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627817 = header.getOrDefault("X-Amz-Date")
  valid_21627817 = validateParameter(valid_21627817, JString, required = false,
                                   default = nil)
  if valid_21627817 != nil:
    section.add "X-Amz-Date", valid_21627817
  var valid_21627818 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627818 = validateParameter(valid_21627818, JString, required = false,
                                   default = nil)
  if valid_21627818 != nil:
    section.add "X-Amz-Security-Token", valid_21627818
  var valid_21627819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627819 = validateParameter(valid_21627819, JString, required = false,
                                   default = nil)
  if valid_21627819 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627819
  var valid_21627820 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627820 = validateParameter(valid_21627820, JString, required = false,
                                   default = nil)
  if valid_21627820 != nil:
    section.add "X-Amz-Algorithm", valid_21627820
  var valid_21627821 = header.getOrDefault("X-Amz-Signature")
  valid_21627821 = validateParameter(valid_21627821, JString, required = false,
                                   default = nil)
  if valid_21627821 != nil:
    section.add "X-Amz-Signature", valid_21627821
  var valid_21627822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627822 = validateParameter(valid_21627822, JString, required = false,
                                   default = nil)
  if valid_21627822 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627822
  var valid_21627823 = header.getOrDefault("X-Amz-Credential")
  valid_21627823 = validateParameter(valid_21627823, JString, required = false,
                                   default = nil)
  if valid_21627823 != nil:
    section.add "X-Amz-Credential", valid_21627823
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627824: Call_DescribeAuditMitigationActionsTask_21627813;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
  ## 
  let valid = call_21627824.validator(path, query, header, formData, body, _)
  let scheme = call_21627824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627824.makeUrl(scheme.get, call_21627824.host, call_21627824.base,
                               call_21627824.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627824, uri, valid, _)

proc call*(call_21627825: Call_DescribeAuditMitigationActionsTask_21627813;
          taskId: string): Recallable =
  ## describeAuditMitigationActionsTask
  ## Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
  ##   taskId: string (required)
  ##         : The unique identifier for the audit mitigation task.
  var path_21627826 = newJObject()
  add(path_21627826, "taskId", newJString(taskId))
  result = call_21627825.call(path_21627826, nil, nil, nil, nil)

var describeAuditMitigationActionsTask* = Call_DescribeAuditMitigationActionsTask_21627813(
    name: "describeAuditMitigationActionsTask", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/mitigationactions/tasks/{taskId}",
    validator: validate_DescribeAuditMitigationActionsTask_21627814, base: "/",
    makeUrl: url_DescribeAuditMitigationActionsTask_21627815,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuditTask_21627843 = ref object of OpenApiRestCall_21625435
proc url_DescribeAuditTask_21627845(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/tasks/"),
               (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuditTask_21627844(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a Device Defender audit.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : The ID of the audit whose information you want to get.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21627846 = path.getOrDefault("taskId")
  valid_21627846 = validateParameter(valid_21627846, JString, required = true,
                                   default = nil)
  if valid_21627846 != nil:
    section.add "taskId", valid_21627846
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627847 = header.getOrDefault("X-Amz-Date")
  valid_21627847 = validateParameter(valid_21627847, JString, required = false,
                                   default = nil)
  if valid_21627847 != nil:
    section.add "X-Amz-Date", valid_21627847
  var valid_21627848 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627848 = validateParameter(valid_21627848, JString, required = false,
                                   default = nil)
  if valid_21627848 != nil:
    section.add "X-Amz-Security-Token", valid_21627848
  var valid_21627849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627849 = validateParameter(valid_21627849, JString, required = false,
                                   default = nil)
  if valid_21627849 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627849
  var valid_21627850 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627850 = validateParameter(valid_21627850, JString, required = false,
                                   default = nil)
  if valid_21627850 != nil:
    section.add "X-Amz-Algorithm", valid_21627850
  var valid_21627851 = header.getOrDefault("X-Amz-Signature")
  valid_21627851 = validateParameter(valid_21627851, JString, required = false,
                                   default = nil)
  if valid_21627851 != nil:
    section.add "X-Amz-Signature", valid_21627851
  var valid_21627852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627852 = validateParameter(valid_21627852, JString, required = false,
                                   default = nil)
  if valid_21627852 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627852
  var valid_21627853 = header.getOrDefault("X-Amz-Credential")
  valid_21627853 = validateParameter(valid_21627853, JString, required = false,
                                   default = nil)
  if valid_21627853 != nil:
    section.add "X-Amz-Credential", valid_21627853
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627854: Call_DescribeAuditTask_21627843; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a Device Defender audit.
  ## 
  let valid = call_21627854.validator(path, query, header, formData, body, _)
  let scheme = call_21627854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627854.makeUrl(scheme.get, call_21627854.host, call_21627854.base,
                               call_21627854.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627854, uri, valid, _)

proc call*(call_21627855: Call_DescribeAuditTask_21627843; taskId: string): Recallable =
  ## describeAuditTask
  ## Gets information about a Device Defender audit.
  ##   taskId: string (required)
  ##         : The ID of the audit whose information you want to get.
  var path_21627856 = newJObject()
  add(path_21627856, "taskId", newJString(taskId))
  result = call_21627855.call(path_21627856, nil, nil, nil, nil)

var describeAuditTask* = Call_DescribeAuditTask_21627843(name: "describeAuditTask",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/audit/tasks/{taskId}", validator: validate_DescribeAuditTask_21627844,
    base: "/", makeUrl: url_DescribeAuditTask_21627845,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeEndpoint_21627857 = ref object of OpenApiRestCall_21625435
proc url_DescribeEndpoint_21627859(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeEndpoint_21627858(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a unique endpoint specific to the AWS account making the call.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   endpointType: JString
  ##               : <p>The endpoint type. Valid endpoint types include:</p> <ul> <li> <p> <code>iot:Data</code> - Returns a VeriSign signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Data-ATS</code> - Returns an ATS signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:CredentialProvider</code> - Returns an AWS IoT credentials provider API endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Jobs</code> - Returns an AWS IoT device management Jobs API endpoint.</p> </li> </ul>
  section = newJObject()
  var valid_21627860 = query.getOrDefault("endpointType")
  valid_21627860 = validateParameter(valid_21627860, JString, required = false,
                                   default = nil)
  if valid_21627860 != nil:
    section.add "endpointType", valid_21627860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627861 = header.getOrDefault("X-Amz-Date")
  valid_21627861 = validateParameter(valid_21627861, JString, required = false,
                                   default = nil)
  if valid_21627861 != nil:
    section.add "X-Amz-Date", valid_21627861
  var valid_21627862 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627862 = validateParameter(valid_21627862, JString, required = false,
                                   default = nil)
  if valid_21627862 != nil:
    section.add "X-Amz-Security-Token", valid_21627862
  var valid_21627863 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627863 = validateParameter(valid_21627863, JString, required = false,
                                   default = nil)
  if valid_21627863 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627863
  var valid_21627864 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627864 = validateParameter(valid_21627864, JString, required = false,
                                   default = nil)
  if valid_21627864 != nil:
    section.add "X-Amz-Algorithm", valid_21627864
  var valid_21627865 = header.getOrDefault("X-Amz-Signature")
  valid_21627865 = validateParameter(valid_21627865, JString, required = false,
                                   default = nil)
  if valid_21627865 != nil:
    section.add "X-Amz-Signature", valid_21627865
  var valid_21627866 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627866 = validateParameter(valid_21627866, JString, required = false,
                                   default = nil)
  if valid_21627866 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627866
  var valid_21627867 = header.getOrDefault("X-Amz-Credential")
  valid_21627867 = validateParameter(valid_21627867, JString, required = false,
                                   default = nil)
  if valid_21627867 != nil:
    section.add "X-Amz-Credential", valid_21627867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627868: Call_DescribeEndpoint_21627857; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a unique endpoint specific to the AWS account making the call.
  ## 
  let valid = call_21627868.validator(path, query, header, formData, body, _)
  let scheme = call_21627868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627868.makeUrl(scheme.get, call_21627868.host, call_21627868.base,
                               call_21627868.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627868, uri, valid, _)

proc call*(call_21627869: Call_DescribeEndpoint_21627857; endpointType: string = ""): Recallable =
  ## describeEndpoint
  ## Returns a unique endpoint specific to the AWS account making the call.
  ##   endpointType: string
  ##               : <p>The endpoint type. Valid endpoint types include:</p> <ul> <li> <p> <code>iot:Data</code> - Returns a VeriSign signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Data-ATS</code> - Returns an ATS signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:CredentialProvider</code> - Returns an AWS IoT credentials provider API endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Jobs</code> - Returns an AWS IoT device management Jobs API endpoint.</p> </li> </ul>
  var query_21627870 = newJObject()
  add(query_21627870, "endpointType", newJString(endpointType))
  result = call_21627869.call(nil, query_21627870, nil, nil, nil)

var describeEndpoint* = Call_DescribeEndpoint_21627857(name: "describeEndpoint",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/endpoint",
    validator: validate_DescribeEndpoint_21627858, base: "/",
    makeUrl: url_DescribeEndpoint_21627859, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeEventConfigurations_21627871 = ref object of OpenApiRestCall_21625435
proc url_DescribeEventConfigurations_21627873(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeEventConfigurations_21627872(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes event configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627874 = header.getOrDefault("X-Amz-Date")
  valid_21627874 = validateParameter(valid_21627874, JString, required = false,
                                   default = nil)
  if valid_21627874 != nil:
    section.add "X-Amz-Date", valid_21627874
  var valid_21627875 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627875 = validateParameter(valid_21627875, JString, required = false,
                                   default = nil)
  if valid_21627875 != nil:
    section.add "X-Amz-Security-Token", valid_21627875
  var valid_21627876 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627876 = validateParameter(valid_21627876, JString, required = false,
                                   default = nil)
  if valid_21627876 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627876
  var valid_21627877 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627877 = validateParameter(valid_21627877, JString, required = false,
                                   default = nil)
  if valid_21627877 != nil:
    section.add "X-Amz-Algorithm", valid_21627877
  var valid_21627878 = header.getOrDefault("X-Amz-Signature")
  valid_21627878 = validateParameter(valid_21627878, JString, required = false,
                                   default = nil)
  if valid_21627878 != nil:
    section.add "X-Amz-Signature", valid_21627878
  var valid_21627879 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627879 = validateParameter(valid_21627879, JString, required = false,
                                   default = nil)
  if valid_21627879 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627879
  var valid_21627880 = header.getOrDefault("X-Amz-Credential")
  valid_21627880 = validateParameter(valid_21627880, JString, required = false,
                                   default = nil)
  if valid_21627880 != nil:
    section.add "X-Amz-Credential", valid_21627880
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627881: Call_DescribeEventConfigurations_21627871;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes event configurations.
  ## 
  let valid = call_21627881.validator(path, query, header, formData, body, _)
  let scheme = call_21627881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627881.makeUrl(scheme.get, call_21627881.host, call_21627881.base,
                               call_21627881.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627881, uri, valid, _)

proc call*(call_21627882: Call_DescribeEventConfigurations_21627871): Recallable =
  ## describeEventConfigurations
  ## Describes event configurations.
  result = call_21627882.call(nil, nil, nil, nil, nil)

var describeEventConfigurations* = Call_DescribeEventConfigurations_21627871(
    name: "describeEventConfigurations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/event-configurations",
    validator: validate_DescribeEventConfigurations_21627872, base: "/",
    makeUrl: url_DescribeEventConfigurations_21627873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateEventConfigurations_21627883 = ref object of OpenApiRestCall_21625435
proc url_UpdateEventConfigurations_21627885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateEventConfigurations_21627884(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the event configurations.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627886 = header.getOrDefault("X-Amz-Date")
  valid_21627886 = validateParameter(valid_21627886, JString, required = false,
                                   default = nil)
  if valid_21627886 != nil:
    section.add "X-Amz-Date", valid_21627886
  var valid_21627887 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627887 = validateParameter(valid_21627887, JString, required = false,
                                   default = nil)
  if valid_21627887 != nil:
    section.add "X-Amz-Security-Token", valid_21627887
  var valid_21627888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627888 = validateParameter(valid_21627888, JString, required = false,
                                   default = nil)
  if valid_21627888 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627888
  var valid_21627889 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627889 = validateParameter(valid_21627889, JString, required = false,
                                   default = nil)
  if valid_21627889 != nil:
    section.add "X-Amz-Algorithm", valid_21627889
  var valid_21627890 = header.getOrDefault("X-Amz-Signature")
  valid_21627890 = validateParameter(valid_21627890, JString, required = false,
                                   default = nil)
  if valid_21627890 != nil:
    section.add "X-Amz-Signature", valid_21627890
  var valid_21627891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627891 = validateParameter(valid_21627891, JString, required = false,
                                   default = nil)
  if valid_21627891 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627891
  var valid_21627892 = header.getOrDefault("X-Amz-Credential")
  valid_21627892 = validateParameter(valid_21627892, JString, required = false,
                                   default = nil)
  if valid_21627892 != nil:
    section.add "X-Amz-Credential", valid_21627892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627894: Call_UpdateEventConfigurations_21627883;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the event configurations.
  ## 
  let valid = call_21627894.validator(path, query, header, formData, body, _)
  let scheme = call_21627894.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627894.makeUrl(scheme.get, call_21627894.host, call_21627894.base,
                               call_21627894.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627894, uri, valid, _)

proc call*(call_21627895: Call_UpdateEventConfigurations_21627883; body: JsonNode): Recallable =
  ## updateEventConfigurations
  ## Updates the event configurations.
  ##   body: JObject (required)
  var body_21627896 = newJObject()
  if body != nil:
    body_21627896 = body
  result = call_21627895.call(nil, nil, nil, nil, body_21627896)

var updateEventConfigurations* = Call_UpdateEventConfigurations_21627883(
    name: "updateEventConfigurations", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/event-configurations",
    validator: validate_UpdateEventConfigurations_21627884, base: "/",
    makeUrl: url_UpdateEventConfigurations_21627885,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeIndex_21627897 = ref object of OpenApiRestCall_21625435
proc url_DescribeIndex_21627899(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "indexName" in path, "`indexName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/indices/"),
               (kind: VariableSegment, value: "indexName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeIndex_21627898(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Describes a search index.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   indexName: JString (required)
  ##            : The index name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `indexName` field"
  var valid_21627900 = path.getOrDefault("indexName")
  valid_21627900 = validateParameter(valid_21627900, JString, required = true,
                                   default = nil)
  if valid_21627900 != nil:
    section.add "indexName", valid_21627900
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627901 = header.getOrDefault("X-Amz-Date")
  valid_21627901 = validateParameter(valid_21627901, JString, required = false,
                                   default = nil)
  if valid_21627901 != nil:
    section.add "X-Amz-Date", valid_21627901
  var valid_21627902 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627902 = validateParameter(valid_21627902, JString, required = false,
                                   default = nil)
  if valid_21627902 != nil:
    section.add "X-Amz-Security-Token", valid_21627902
  var valid_21627903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627903 = validateParameter(valid_21627903, JString, required = false,
                                   default = nil)
  if valid_21627903 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627903
  var valid_21627904 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627904 = validateParameter(valid_21627904, JString, required = false,
                                   default = nil)
  if valid_21627904 != nil:
    section.add "X-Amz-Algorithm", valid_21627904
  var valid_21627905 = header.getOrDefault("X-Amz-Signature")
  valid_21627905 = validateParameter(valid_21627905, JString, required = false,
                                   default = nil)
  if valid_21627905 != nil:
    section.add "X-Amz-Signature", valid_21627905
  var valid_21627906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627906 = validateParameter(valid_21627906, JString, required = false,
                                   default = nil)
  if valid_21627906 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627906
  var valid_21627907 = header.getOrDefault("X-Amz-Credential")
  valid_21627907 = validateParameter(valid_21627907, JString, required = false,
                                   default = nil)
  if valid_21627907 != nil:
    section.add "X-Amz-Credential", valid_21627907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627908: Call_DescribeIndex_21627897; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a search index.
  ## 
  let valid = call_21627908.validator(path, query, header, formData, body, _)
  let scheme = call_21627908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627908.makeUrl(scheme.get, call_21627908.host, call_21627908.base,
                               call_21627908.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627908, uri, valid, _)

proc call*(call_21627909: Call_DescribeIndex_21627897; indexName: string): Recallable =
  ## describeIndex
  ## Describes a search index.
  ##   indexName: string (required)
  ##            : The index name.
  var path_21627910 = newJObject()
  add(path_21627910, "indexName", newJString(indexName))
  result = call_21627909.call(path_21627910, nil, nil, nil, nil)

var describeIndex* = Call_DescribeIndex_21627897(name: "describeIndex",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/indices/{indexName}", validator: validate_DescribeIndex_21627898,
    base: "/", makeUrl: url_DescribeIndex_21627899,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeJobExecution_21627911 = ref object of OpenApiRestCall_21625435
proc url_DescribeJobExecution_21627913(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeJobExecution_21627912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a job execution.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing on which the job execution is running.
  ##   jobId: JString (required)
  ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21627914 = path.getOrDefault("thingName")
  valid_21627914 = validateParameter(valid_21627914, JString, required = true,
                                   default = nil)
  if valid_21627914 != nil:
    section.add "thingName", valid_21627914
  var valid_21627915 = path.getOrDefault("jobId")
  valid_21627915 = validateParameter(valid_21627915, JString, required = true,
                                   default = nil)
  if valid_21627915 != nil:
    section.add "jobId", valid_21627915
  result.add "path", section
  ## parameters in `query` object:
  ##   executionNumber: JInt
  ##                  : A string (consisting of the digits "0" through "9" which is used to specify a particular job execution on a particular device.
  section = newJObject()
  var valid_21627916 = query.getOrDefault("executionNumber")
  valid_21627916 = validateParameter(valid_21627916, JInt, required = false,
                                   default = nil)
  if valid_21627916 != nil:
    section.add "executionNumber", valid_21627916
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627917 = header.getOrDefault("X-Amz-Date")
  valid_21627917 = validateParameter(valid_21627917, JString, required = false,
                                   default = nil)
  if valid_21627917 != nil:
    section.add "X-Amz-Date", valid_21627917
  var valid_21627918 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627918 = validateParameter(valid_21627918, JString, required = false,
                                   default = nil)
  if valid_21627918 != nil:
    section.add "X-Amz-Security-Token", valid_21627918
  var valid_21627919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627919 = validateParameter(valid_21627919, JString, required = false,
                                   default = nil)
  if valid_21627919 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627919
  var valid_21627920 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627920 = validateParameter(valid_21627920, JString, required = false,
                                   default = nil)
  if valid_21627920 != nil:
    section.add "X-Amz-Algorithm", valid_21627920
  var valid_21627921 = header.getOrDefault("X-Amz-Signature")
  valid_21627921 = validateParameter(valid_21627921, JString, required = false,
                                   default = nil)
  if valid_21627921 != nil:
    section.add "X-Amz-Signature", valid_21627921
  var valid_21627922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627922 = validateParameter(valid_21627922, JString, required = false,
                                   default = nil)
  if valid_21627922 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627922
  var valid_21627923 = header.getOrDefault("X-Amz-Credential")
  valid_21627923 = validateParameter(valid_21627923, JString, required = false,
                                   default = nil)
  if valid_21627923 != nil:
    section.add "X-Amz-Credential", valid_21627923
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627924: Call_DescribeJobExecution_21627911; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a job execution.
  ## 
  let valid = call_21627924.validator(path, query, header, formData, body, _)
  let scheme = call_21627924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627924.makeUrl(scheme.get, call_21627924.host, call_21627924.base,
                               call_21627924.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627924, uri, valid, _)

proc call*(call_21627925: Call_DescribeJobExecution_21627911; thingName: string;
          jobId: string; executionNumber: int = 0): Recallable =
  ## describeJobExecution
  ## Describes a job execution.
  ##   thingName: string (required)
  ##            : The name of the thing on which the job execution is running.
  ##   jobId: string (required)
  ##        : The unique identifier you assigned to this job when it was created.
  ##   executionNumber: int
  ##                  : A string (consisting of the digits "0" through "9" which is used to specify a particular job execution on a particular device.
  var path_21627926 = newJObject()
  var query_21627927 = newJObject()
  add(path_21627926, "thingName", newJString(thingName))
  add(path_21627926, "jobId", newJString(jobId))
  add(query_21627927, "executionNumber", newJInt(executionNumber))
  result = call_21627925.call(path_21627926, query_21627927, nil, nil, nil)

var describeJobExecution* = Call_DescribeJobExecution_21627911(
    name: "describeJobExecution", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/jobs/{jobId}",
    validator: validate_DescribeJobExecution_21627912, base: "/",
    makeUrl: url_DescribeJobExecution_21627913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThingRegistrationTask_21627928 = ref object of OpenApiRestCall_21625435
proc url_DescribeThingRegistrationTask_21627930(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-registration-tasks/"),
               (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThingRegistrationTask_21627929(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes a bulk thing provisioning task.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : The task ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21627931 = path.getOrDefault("taskId")
  valid_21627931 = validateParameter(valid_21627931, JString, required = true,
                                   default = nil)
  if valid_21627931 != nil:
    section.add "taskId", valid_21627931
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627932 = header.getOrDefault("X-Amz-Date")
  valid_21627932 = validateParameter(valid_21627932, JString, required = false,
                                   default = nil)
  if valid_21627932 != nil:
    section.add "X-Amz-Date", valid_21627932
  var valid_21627933 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627933 = validateParameter(valid_21627933, JString, required = false,
                                   default = nil)
  if valid_21627933 != nil:
    section.add "X-Amz-Security-Token", valid_21627933
  var valid_21627934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627934 = validateParameter(valid_21627934, JString, required = false,
                                   default = nil)
  if valid_21627934 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627934
  var valid_21627935 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627935 = validateParameter(valid_21627935, JString, required = false,
                                   default = nil)
  if valid_21627935 != nil:
    section.add "X-Amz-Algorithm", valid_21627935
  var valid_21627936 = header.getOrDefault("X-Amz-Signature")
  valid_21627936 = validateParameter(valid_21627936, JString, required = false,
                                   default = nil)
  if valid_21627936 != nil:
    section.add "X-Amz-Signature", valid_21627936
  var valid_21627937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627937 = validateParameter(valid_21627937, JString, required = false,
                                   default = nil)
  if valid_21627937 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627937
  var valid_21627938 = header.getOrDefault("X-Amz-Credential")
  valid_21627938 = validateParameter(valid_21627938, JString, required = false,
                                   default = nil)
  if valid_21627938 != nil:
    section.add "X-Amz-Credential", valid_21627938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627939: Call_DescribeThingRegistrationTask_21627928;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a bulk thing provisioning task.
  ## 
  let valid = call_21627939.validator(path, query, header, formData, body, _)
  let scheme = call_21627939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627939.makeUrl(scheme.get, call_21627939.host, call_21627939.base,
                               call_21627939.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627939, uri, valid, _)

proc call*(call_21627940: Call_DescribeThingRegistrationTask_21627928;
          taskId: string): Recallable =
  ## describeThingRegistrationTask
  ## Describes a bulk thing provisioning task.
  ##   taskId: string (required)
  ##         : The task ID.
  var path_21627941 = newJObject()
  add(path_21627941, "taskId", newJString(taskId))
  result = call_21627940.call(path_21627941, nil, nil, nil, nil)

var describeThingRegistrationTask* = Call_DescribeThingRegistrationTask_21627928(
    name: "describeThingRegistrationTask", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-registration-tasks/{taskId}",
    validator: validate_DescribeThingRegistrationTask_21627929, base: "/",
    makeUrl: url_DescribeThingRegistrationTask_21627930,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableTopicRule_21627942 = ref object of OpenApiRestCall_21625435
proc url_DisableTopicRule_21627944(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleName"),
               (kind: ConstantSegment, value: "/disable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DisableTopicRule_21627943(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Disables the rule.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
  ##           : The name of the rule to disable.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `ruleName` field"
  var valid_21627945 = path.getOrDefault("ruleName")
  valid_21627945 = validateParameter(valid_21627945, JString, required = true,
                                   default = nil)
  if valid_21627945 != nil:
    section.add "ruleName", valid_21627945
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627946 = header.getOrDefault("X-Amz-Date")
  valid_21627946 = validateParameter(valid_21627946, JString, required = false,
                                   default = nil)
  if valid_21627946 != nil:
    section.add "X-Amz-Date", valid_21627946
  var valid_21627947 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627947 = validateParameter(valid_21627947, JString, required = false,
                                   default = nil)
  if valid_21627947 != nil:
    section.add "X-Amz-Security-Token", valid_21627947
  var valid_21627948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627948 = validateParameter(valid_21627948, JString, required = false,
                                   default = nil)
  if valid_21627948 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627948
  var valid_21627949 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627949 = validateParameter(valid_21627949, JString, required = false,
                                   default = nil)
  if valid_21627949 != nil:
    section.add "X-Amz-Algorithm", valid_21627949
  var valid_21627950 = header.getOrDefault("X-Amz-Signature")
  valid_21627950 = validateParameter(valid_21627950, JString, required = false,
                                   default = nil)
  if valid_21627950 != nil:
    section.add "X-Amz-Signature", valid_21627950
  var valid_21627951 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627951 = validateParameter(valid_21627951, JString, required = false,
                                   default = nil)
  if valid_21627951 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627951
  var valid_21627952 = header.getOrDefault("X-Amz-Credential")
  valid_21627952 = validateParameter(valid_21627952, JString, required = false,
                                   default = nil)
  if valid_21627952 != nil:
    section.add "X-Amz-Credential", valid_21627952
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627953: Call_DisableTopicRule_21627942; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Disables the rule.
  ## 
  let valid = call_21627953.validator(path, query, header, formData, body, _)
  let scheme = call_21627953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627953.makeUrl(scheme.get, call_21627953.host, call_21627953.base,
                               call_21627953.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627953, uri, valid, _)

proc call*(call_21627954: Call_DisableTopicRule_21627942; ruleName: string): Recallable =
  ## disableTopicRule
  ## Disables the rule.
  ##   ruleName: string (required)
  ##           : The name of the rule to disable.
  var path_21627955 = newJObject()
  add(path_21627955, "ruleName", newJString(ruleName))
  result = call_21627954.call(path_21627955, nil, nil, nil, nil)

var disableTopicRule* = Call_DisableTopicRule_21627942(name: "disableTopicRule",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}/disable", validator: validate_DisableTopicRule_21627943,
    base: "/", makeUrl: url_DisableTopicRule_21627944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableTopicRule_21627956 = ref object of OpenApiRestCall_21625435
proc url_EnableTopicRule_21627958(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
               (kind: VariableSegment, value: "ruleName"),
               (kind: ConstantSegment, value: "/enable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_EnableTopicRule_21627957(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Enables the rule.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
  ##           : The name of the topic rule to enable.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `ruleName` field"
  var valid_21627959 = path.getOrDefault("ruleName")
  valid_21627959 = validateParameter(valid_21627959, JString, required = true,
                                   default = nil)
  if valid_21627959 != nil:
    section.add "ruleName", valid_21627959
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627960 = header.getOrDefault("X-Amz-Date")
  valid_21627960 = validateParameter(valid_21627960, JString, required = false,
                                   default = nil)
  if valid_21627960 != nil:
    section.add "X-Amz-Date", valid_21627960
  var valid_21627961 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627961 = validateParameter(valid_21627961, JString, required = false,
                                   default = nil)
  if valid_21627961 != nil:
    section.add "X-Amz-Security-Token", valid_21627961
  var valid_21627962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627962 = validateParameter(valid_21627962, JString, required = false,
                                   default = nil)
  if valid_21627962 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627962
  var valid_21627963 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627963 = validateParameter(valid_21627963, JString, required = false,
                                   default = nil)
  if valid_21627963 != nil:
    section.add "X-Amz-Algorithm", valid_21627963
  var valid_21627964 = header.getOrDefault("X-Amz-Signature")
  valid_21627964 = validateParameter(valid_21627964, JString, required = false,
                                   default = nil)
  if valid_21627964 != nil:
    section.add "X-Amz-Signature", valid_21627964
  var valid_21627965 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627965 = validateParameter(valid_21627965, JString, required = false,
                                   default = nil)
  if valid_21627965 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627965
  var valid_21627966 = header.getOrDefault("X-Amz-Credential")
  valid_21627966 = validateParameter(valid_21627966, JString, required = false,
                                   default = nil)
  if valid_21627966 != nil:
    section.add "X-Amz-Credential", valid_21627966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627967: Call_EnableTopicRule_21627956; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Enables the rule.
  ## 
  let valid = call_21627967.validator(path, query, header, formData, body, _)
  let scheme = call_21627967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627967.makeUrl(scheme.get, call_21627967.host, call_21627967.base,
                               call_21627967.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627967, uri, valid, _)

proc call*(call_21627968: Call_EnableTopicRule_21627956; ruleName: string): Recallable =
  ## enableTopicRule
  ## Enables the rule.
  ##   ruleName: string (required)
  ##           : The name of the topic rule to enable.
  var path_21627969 = newJObject()
  add(path_21627969, "ruleName", newJString(ruleName))
  result = call_21627968.call(path_21627969, nil, nil, nil, nil)

var enableTopicRule* = Call_EnableTopicRule_21627956(name: "enableTopicRule",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}/enable", validator: validate_EnableTopicRule_21627957,
    base: "/", makeUrl: url_EnableTopicRule_21627958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCardinality_21627970 = ref object of OpenApiRestCall_21625435
proc url_GetCardinality_21627972(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCardinality_21627971(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the approximate count of unique values that match the query.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627973 = header.getOrDefault("X-Amz-Date")
  valid_21627973 = validateParameter(valid_21627973, JString, required = false,
                                   default = nil)
  if valid_21627973 != nil:
    section.add "X-Amz-Date", valid_21627973
  var valid_21627974 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627974 = validateParameter(valid_21627974, JString, required = false,
                                   default = nil)
  if valid_21627974 != nil:
    section.add "X-Amz-Security-Token", valid_21627974
  var valid_21627975 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627975 = validateParameter(valid_21627975, JString, required = false,
                                   default = nil)
  if valid_21627975 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627975
  var valid_21627976 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627976 = validateParameter(valid_21627976, JString, required = false,
                                   default = nil)
  if valid_21627976 != nil:
    section.add "X-Amz-Algorithm", valid_21627976
  var valid_21627977 = header.getOrDefault("X-Amz-Signature")
  valid_21627977 = validateParameter(valid_21627977, JString, required = false,
                                   default = nil)
  if valid_21627977 != nil:
    section.add "X-Amz-Signature", valid_21627977
  var valid_21627978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627978 = validateParameter(valid_21627978, JString, required = false,
                                   default = nil)
  if valid_21627978 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627978
  var valid_21627979 = header.getOrDefault("X-Amz-Credential")
  valid_21627979 = validateParameter(valid_21627979, JString, required = false,
                                   default = nil)
  if valid_21627979 != nil:
    section.add "X-Amz-Credential", valid_21627979
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627981: Call_GetCardinality_21627970; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the approximate count of unique values that match the query.
  ## 
  let valid = call_21627981.validator(path, query, header, formData, body, _)
  let scheme = call_21627981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627981.makeUrl(scheme.get, call_21627981.host, call_21627981.base,
                               call_21627981.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627981, uri, valid, _)

proc call*(call_21627982: Call_GetCardinality_21627970; body: JsonNode): Recallable =
  ## getCardinality
  ## Returns the approximate count of unique values that match the query.
  ##   body: JObject (required)
  var body_21627983 = newJObject()
  if body != nil:
    body_21627983 = body
  result = call_21627982.call(nil, nil, nil, nil, body_21627983)

var getCardinality* = Call_GetCardinality_21627970(name: "getCardinality",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/indices/cardinality", validator: validate_GetCardinality_21627971,
    base: "/", makeUrl: url_GetCardinality_21627972,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEffectivePolicies_21627984 = ref object of OpenApiRestCall_21625435
proc url_GetEffectivePolicies_21627986(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEffectivePolicies_21627985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   thingName: JString
  ##            : The thing name.
  section = newJObject()
  var valid_21627987 = query.getOrDefault("thingName")
  valid_21627987 = validateParameter(valid_21627987, JString, required = false,
                                   default = nil)
  if valid_21627987 != nil:
    section.add "thingName", valid_21627987
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627988 = header.getOrDefault("X-Amz-Date")
  valid_21627988 = validateParameter(valid_21627988, JString, required = false,
                                   default = nil)
  if valid_21627988 != nil:
    section.add "X-Amz-Date", valid_21627988
  var valid_21627989 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627989 = validateParameter(valid_21627989, JString, required = false,
                                   default = nil)
  if valid_21627989 != nil:
    section.add "X-Amz-Security-Token", valid_21627989
  var valid_21627990 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627990 = validateParameter(valid_21627990, JString, required = false,
                                   default = nil)
  if valid_21627990 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627990
  var valid_21627991 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627991 = validateParameter(valid_21627991, JString, required = false,
                                   default = nil)
  if valid_21627991 != nil:
    section.add "X-Amz-Algorithm", valid_21627991
  var valid_21627992 = header.getOrDefault("X-Amz-Signature")
  valid_21627992 = validateParameter(valid_21627992, JString, required = false,
                                   default = nil)
  if valid_21627992 != nil:
    section.add "X-Amz-Signature", valid_21627992
  var valid_21627993 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627993 = validateParameter(valid_21627993, JString, required = false,
                                   default = nil)
  if valid_21627993 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627993
  var valid_21627994 = header.getOrDefault("X-Amz-Credential")
  valid_21627994 = validateParameter(valid_21627994, JString, required = false,
                                   default = nil)
  if valid_21627994 != nil:
    section.add "X-Amz-Credential", valid_21627994
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21627996: Call_GetEffectivePolicies_21627984; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.
  ## 
  let valid = call_21627996.validator(path, query, header, formData, body, _)
  let scheme = call_21627996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627996.makeUrl(scheme.get, call_21627996.host, call_21627996.base,
                               call_21627996.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627996, uri, valid, _)

proc call*(call_21627997: Call_GetEffectivePolicies_21627984; body: JsonNode;
          thingName: string = ""): Recallable =
  ## getEffectivePolicies
  ## Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.
  ##   thingName: string
  ##            : The thing name.
  ##   body: JObject (required)
  var query_21627998 = newJObject()
  var body_21627999 = newJObject()
  add(query_21627998, "thingName", newJString(thingName))
  if body != nil:
    body_21627999 = body
  result = call_21627997.call(nil, query_21627998, nil, nil, body_21627999)

var getEffectivePolicies* = Call_GetEffectivePolicies_21627984(
    name: "getEffectivePolicies", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/effective-policies",
    validator: validate_GetEffectivePolicies_21627985, base: "/",
    makeUrl: url_GetEffectivePolicies_21627986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateIndexingConfiguration_21628012 = ref object of OpenApiRestCall_21625435
proc url_UpdateIndexingConfiguration_21628014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateIndexingConfiguration_21628013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the search configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628015 = header.getOrDefault("X-Amz-Date")
  valid_21628015 = validateParameter(valid_21628015, JString, required = false,
                                   default = nil)
  if valid_21628015 != nil:
    section.add "X-Amz-Date", valid_21628015
  var valid_21628016 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628016 = validateParameter(valid_21628016, JString, required = false,
                                   default = nil)
  if valid_21628016 != nil:
    section.add "X-Amz-Security-Token", valid_21628016
  var valid_21628017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628017 = validateParameter(valid_21628017, JString, required = false,
                                   default = nil)
  if valid_21628017 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628017
  var valid_21628018 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628018 = validateParameter(valid_21628018, JString, required = false,
                                   default = nil)
  if valid_21628018 != nil:
    section.add "X-Amz-Algorithm", valid_21628018
  var valid_21628019 = header.getOrDefault("X-Amz-Signature")
  valid_21628019 = validateParameter(valid_21628019, JString, required = false,
                                   default = nil)
  if valid_21628019 != nil:
    section.add "X-Amz-Signature", valid_21628019
  var valid_21628020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628020 = validateParameter(valid_21628020, JString, required = false,
                                   default = nil)
  if valid_21628020 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628020
  var valid_21628021 = header.getOrDefault("X-Amz-Credential")
  valid_21628021 = validateParameter(valid_21628021, JString, required = false,
                                   default = nil)
  if valid_21628021 != nil:
    section.add "X-Amz-Credential", valid_21628021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628023: Call_UpdateIndexingConfiguration_21628012;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the search configuration.
  ## 
  let valid = call_21628023.validator(path, query, header, formData, body, _)
  let scheme = call_21628023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628023.makeUrl(scheme.get, call_21628023.host, call_21628023.base,
                               call_21628023.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628023, uri, valid, _)

proc call*(call_21628024: Call_UpdateIndexingConfiguration_21628012; body: JsonNode): Recallable =
  ## updateIndexingConfiguration
  ## Updates the search configuration.
  ##   body: JObject (required)
  var body_21628025 = newJObject()
  if body != nil:
    body_21628025 = body
  result = call_21628024.call(nil, nil, nil, nil, body_21628025)

var updateIndexingConfiguration* = Call_UpdateIndexingConfiguration_21628012(
    name: "updateIndexingConfiguration", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/indexing/config",
    validator: validate_UpdateIndexingConfiguration_21628013, base: "/",
    makeUrl: url_UpdateIndexingConfiguration_21628014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIndexingConfiguration_21628000 = ref object of OpenApiRestCall_21625435
proc url_GetIndexingConfiguration_21628002(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetIndexingConfiguration_21628001(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the indexing configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628003 = header.getOrDefault("X-Amz-Date")
  valid_21628003 = validateParameter(valid_21628003, JString, required = false,
                                   default = nil)
  if valid_21628003 != nil:
    section.add "X-Amz-Date", valid_21628003
  var valid_21628004 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628004 = validateParameter(valid_21628004, JString, required = false,
                                   default = nil)
  if valid_21628004 != nil:
    section.add "X-Amz-Security-Token", valid_21628004
  var valid_21628005 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628005 = validateParameter(valid_21628005, JString, required = false,
                                   default = nil)
  if valid_21628005 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628005
  var valid_21628006 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628006 = validateParameter(valid_21628006, JString, required = false,
                                   default = nil)
  if valid_21628006 != nil:
    section.add "X-Amz-Algorithm", valid_21628006
  var valid_21628007 = header.getOrDefault("X-Amz-Signature")
  valid_21628007 = validateParameter(valid_21628007, JString, required = false,
                                   default = nil)
  if valid_21628007 != nil:
    section.add "X-Amz-Signature", valid_21628007
  var valid_21628008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628008 = validateParameter(valid_21628008, JString, required = false,
                                   default = nil)
  if valid_21628008 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628008
  var valid_21628009 = header.getOrDefault("X-Amz-Credential")
  valid_21628009 = validateParameter(valid_21628009, JString, required = false,
                                   default = nil)
  if valid_21628009 != nil:
    section.add "X-Amz-Credential", valid_21628009
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628010: Call_GetIndexingConfiguration_21628000;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the indexing configuration.
  ## 
  let valid = call_21628010.validator(path, query, header, formData, body, _)
  let scheme = call_21628010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628010.makeUrl(scheme.get, call_21628010.host, call_21628010.base,
                               call_21628010.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628010, uri, valid, _)

proc call*(call_21628011: Call_GetIndexingConfiguration_21628000): Recallable =
  ## getIndexingConfiguration
  ## Gets the indexing configuration.
  result = call_21628011.call(nil, nil, nil, nil, nil)

var getIndexingConfiguration* = Call_GetIndexingConfiguration_21628000(
    name: "getIndexingConfiguration", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/indexing/config",
    validator: validate_GetIndexingConfiguration_21628001, base: "/",
    makeUrl: url_GetIndexingConfiguration_21628002,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetJobDocument_21628026 = ref object of OpenApiRestCall_21625435
proc url_GetJobDocument_21628028(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId"),
               (kind: ConstantSegment, value: "/job-document")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetJobDocument_21628027(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a job document.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21628029 = path.getOrDefault("jobId")
  valid_21628029 = validateParameter(valid_21628029, JString, required = true,
                                   default = nil)
  if valid_21628029 != nil:
    section.add "jobId", valid_21628029
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628030 = header.getOrDefault("X-Amz-Date")
  valid_21628030 = validateParameter(valid_21628030, JString, required = false,
                                   default = nil)
  if valid_21628030 != nil:
    section.add "X-Amz-Date", valid_21628030
  var valid_21628031 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628031 = validateParameter(valid_21628031, JString, required = false,
                                   default = nil)
  if valid_21628031 != nil:
    section.add "X-Amz-Security-Token", valid_21628031
  var valid_21628032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628032 = validateParameter(valid_21628032, JString, required = false,
                                   default = nil)
  if valid_21628032 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628032
  var valid_21628033 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628033 = validateParameter(valid_21628033, JString, required = false,
                                   default = nil)
  if valid_21628033 != nil:
    section.add "X-Amz-Algorithm", valid_21628033
  var valid_21628034 = header.getOrDefault("X-Amz-Signature")
  valid_21628034 = validateParameter(valid_21628034, JString, required = false,
                                   default = nil)
  if valid_21628034 != nil:
    section.add "X-Amz-Signature", valid_21628034
  var valid_21628035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628035 = validateParameter(valid_21628035, JString, required = false,
                                   default = nil)
  if valid_21628035 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628035
  var valid_21628036 = header.getOrDefault("X-Amz-Credential")
  valid_21628036 = validateParameter(valid_21628036, JString, required = false,
                                   default = nil)
  if valid_21628036 != nil:
    section.add "X-Amz-Credential", valid_21628036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628037: Call_GetJobDocument_21628026; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a job document.
  ## 
  let valid = call_21628037.validator(path, query, header, formData, body, _)
  let scheme = call_21628037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628037.makeUrl(scheme.get, call_21628037.host, call_21628037.base,
                               call_21628037.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628037, uri, valid, _)

proc call*(call_21628038: Call_GetJobDocument_21628026; jobId: string): Recallable =
  ## getJobDocument
  ## Gets a job document.
  ##   jobId: string (required)
  ##        : The unique identifier you assigned to this job when it was created.
  var path_21628039 = newJObject()
  add(path_21628039, "jobId", newJString(jobId))
  result = call_21628038.call(path_21628039, nil, nil, nil, nil)

var getJobDocument* = Call_GetJobDocument_21628026(name: "getJobDocument",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/jobs/{jobId}/job-document", validator: validate_GetJobDocument_21628027,
    base: "/", makeUrl: url_GetJobDocument_21628028,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetLoggingOptions_21628052 = ref object of OpenApiRestCall_21625435
proc url_SetLoggingOptions_21628054(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetLoggingOptions_21628053(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628055 = header.getOrDefault("X-Amz-Date")
  valid_21628055 = validateParameter(valid_21628055, JString, required = false,
                                   default = nil)
  if valid_21628055 != nil:
    section.add "X-Amz-Date", valid_21628055
  var valid_21628056 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628056 = validateParameter(valid_21628056, JString, required = false,
                                   default = nil)
  if valid_21628056 != nil:
    section.add "X-Amz-Security-Token", valid_21628056
  var valid_21628057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628057 = validateParameter(valid_21628057, JString, required = false,
                                   default = nil)
  if valid_21628057 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628057
  var valid_21628058 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628058 = validateParameter(valid_21628058, JString, required = false,
                                   default = nil)
  if valid_21628058 != nil:
    section.add "X-Amz-Algorithm", valid_21628058
  var valid_21628059 = header.getOrDefault("X-Amz-Signature")
  valid_21628059 = validateParameter(valid_21628059, JString, required = false,
                                   default = nil)
  if valid_21628059 != nil:
    section.add "X-Amz-Signature", valid_21628059
  var valid_21628060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628060 = validateParameter(valid_21628060, JString, required = false,
                                   default = nil)
  if valid_21628060 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628060
  var valid_21628061 = header.getOrDefault("X-Amz-Credential")
  valid_21628061 = validateParameter(valid_21628061, JString, required = false,
                                   default = nil)
  if valid_21628061 != nil:
    section.add "X-Amz-Credential", valid_21628061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628063: Call_SetLoggingOptions_21628052; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>
  ## 
  let valid = call_21628063.validator(path, query, header, formData, body, _)
  let scheme = call_21628063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628063.makeUrl(scheme.get, call_21628063.host, call_21628063.base,
                               call_21628063.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628063, uri, valid, _)

proc call*(call_21628064: Call_SetLoggingOptions_21628052; body: JsonNode): Recallable =
  ## setLoggingOptions
  ## <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>
  ##   body: JObject (required)
  var body_21628065 = newJObject()
  if body != nil:
    body_21628065 = body
  result = call_21628064.call(nil, nil, nil, nil, body_21628065)

var setLoggingOptions* = Call_SetLoggingOptions_21628052(name: "setLoggingOptions",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/loggingOptions",
    validator: validate_SetLoggingOptions_21628053, base: "/",
    makeUrl: url_SetLoggingOptions_21628054, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetLoggingOptions_21628040 = ref object of OpenApiRestCall_21625435
proc url_GetLoggingOptions_21628042(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetLoggingOptions_21628041(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628043 = header.getOrDefault("X-Amz-Date")
  valid_21628043 = validateParameter(valid_21628043, JString, required = false,
                                   default = nil)
  if valid_21628043 != nil:
    section.add "X-Amz-Date", valid_21628043
  var valid_21628044 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628044 = validateParameter(valid_21628044, JString, required = false,
                                   default = nil)
  if valid_21628044 != nil:
    section.add "X-Amz-Security-Token", valid_21628044
  var valid_21628045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628045 = validateParameter(valid_21628045, JString, required = false,
                                   default = nil)
  if valid_21628045 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628045
  var valid_21628046 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628046 = validateParameter(valid_21628046, JString, required = false,
                                   default = nil)
  if valid_21628046 != nil:
    section.add "X-Amz-Algorithm", valid_21628046
  var valid_21628047 = header.getOrDefault("X-Amz-Signature")
  valid_21628047 = validateParameter(valid_21628047, JString, required = false,
                                   default = nil)
  if valid_21628047 != nil:
    section.add "X-Amz-Signature", valid_21628047
  var valid_21628048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628048 = validateParameter(valid_21628048, JString, required = false,
                                   default = nil)
  if valid_21628048 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628048
  var valid_21628049 = header.getOrDefault("X-Amz-Credential")
  valid_21628049 = validateParameter(valid_21628049, JString, required = false,
                                   default = nil)
  if valid_21628049 != nil:
    section.add "X-Amz-Credential", valid_21628049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628050: Call_GetLoggingOptions_21628040; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>
  ## 
  let valid = call_21628050.validator(path, query, header, formData, body, _)
  let scheme = call_21628050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628050.makeUrl(scheme.get, call_21628050.host, call_21628050.base,
                               call_21628050.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628050, uri, valid, _)

proc call*(call_21628051: Call_GetLoggingOptions_21628040): Recallable =
  ## getLoggingOptions
  ## <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>
  result = call_21628051.call(nil, nil, nil, nil, nil)

var getLoggingOptions* = Call_GetLoggingOptions_21628040(name: "getLoggingOptions",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/loggingOptions",
    validator: validate_GetLoggingOptions_21628041, base: "/",
    makeUrl: url_GetLoggingOptions_21628042, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPercentiles_21628066 = ref object of OpenApiRestCall_21625435
proc url_GetPercentiles_21628068(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPercentiles_21628067(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628069 = header.getOrDefault("X-Amz-Date")
  valid_21628069 = validateParameter(valid_21628069, JString, required = false,
                                   default = nil)
  if valid_21628069 != nil:
    section.add "X-Amz-Date", valid_21628069
  var valid_21628070 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628070 = validateParameter(valid_21628070, JString, required = false,
                                   default = nil)
  if valid_21628070 != nil:
    section.add "X-Amz-Security-Token", valid_21628070
  var valid_21628071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628071 = validateParameter(valid_21628071, JString, required = false,
                                   default = nil)
  if valid_21628071 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628071
  var valid_21628072 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628072 = validateParameter(valid_21628072, JString, required = false,
                                   default = nil)
  if valid_21628072 != nil:
    section.add "X-Amz-Algorithm", valid_21628072
  var valid_21628073 = header.getOrDefault("X-Amz-Signature")
  valid_21628073 = validateParameter(valid_21628073, JString, required = false,
                                   default = nil)
  if valid_21628073 != nil:
    section.add "X-Amz-Signature", valid_21628073
  var valid_21628074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628074 = validateParameter(valid_21628074, JString, required = false,
                                   default = nil)
  if valid_21628074 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628074
  var valid_21628075 = header.getOrDefault("X-Amz-Credential")
  valid_21628075 = validateParameter(valid_21628075, JString, required = false,
                                   default = nil)
  if valid_21628075 != nil:
    section.add "X-Amz-Credential", valid_21628075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628077: Call_GetPercentiles_21628066; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.
  ## 
  let valid = call_21628077.validator(path, query, header, formData, body, _)
  let scheme = call_21628077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628077.makeUrl(scheme.get, call_21628077.host, call_21628077.base,
                               call_21628077.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628077, uri, valid, _)

proc call*(call_21628078: Call_GetPercentiles_21628066; body: JsonNode): Recallable =
  ## getPercentiles
  ## Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.
  ##   body: JObject (required)
  var body_21628079 = newJObject()
  if body != nil:
    body_21628079 = body
  result = call_21628078.call(nil, nil, nil, nil, body_21628079)

var getPercentiles* = Call_GetPercentiles_21628066(name: "getPercentiles",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/indices/percentiles", validator: validate_GetPercentiles_21628067,
    base: "/", makeUrl: url_GetPercentiles_21628068,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStatistics_21628080 = ref object of OpenApiRestCall_21625435
proc url_GetStatistics_21628082(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStatistics_21628081(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628083 = header.getOrDefault("X-Amz-Date")
  valid_21628083 = validateParameter(valid_21628083, JString, required = false,
                                   default = nil)
  if valid_21628083 != nil:
    section.add "X-Amz-Date", valid_21628083
  var valid_21628084 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628084 = validateParameter(valid_21628084, JString, required = false,
                                   default = nil)
  if valid_21628084 != nil:
    section.add "X-Amz-Security-Token", valid_21628084
  var valid_21628085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628085 = validateParameter(valid_21628085, JString, required = false,
                                   default = nil)
  if valid_21628085 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628085
  var valid_21628086 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628086 = validateParameter(valid_21628086, JString, required = false,
                                   default = nil)
  if valid_21628086 != nil:
    section.add "X-Amz-Algorithm", valid_21628086
  var valid_21628087 = header.getOrDefault("X-Amz-Signature")
  valid_21628087 = validateParameter(valid_21628087, JString, required = false,
                                   default = nil)
  if valid_21628087 != nil:
    section.add "X-Amz-Signature", valid_21628087
  var valid_21628088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628088 = validateParameter(valid_21628088, JString, required = false,
                                   default = nil)
  if valid_21628088 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628088
  var valid_21628089 = header.getOrDefault("X-Amz-Credential")
  valid_21628089 = validateParameter(valid_21628089, JString, required = false,
                                   default = nil)
  if valid_21628089 != nil:
    section.add "X-Amz-Credential", valid_21628089
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628091: Call_GetStatistics_21628080; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.
  ## 
  let valid = call_21628091.validator(path, query, header, formData, body, _)
  let scheme = call_21628091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628091.makeUrl(scheme.get, call_21628091.host, call_21628091.base,
                               call_21628091.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628091, uri, valid, _)

proc call*(call_21628092: Call_GetStatistics_21628080; body: JsonNode): Recallable =
  ## getStatistics
  ## Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.
  ##   body: JObject (required)
  var body_21628093 = newJObject()
  if body != nil:
    body_21628093 = body
  result = call_21628092.call(nil, nil, nil, nil, body_21628093)

var getStatistics* = Call_GetStatistics_21628080(name: "getStatistics",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/indices/statistics", validator: validate_GetStatistics_21628081,
    base: "/", makeUrl: url_GetStatistics_21628082,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetV2LoggingOptions_21628106 = ref object of OpenApiRestCall_21625435
proc url_SetV2LoggingOptions_21628108(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetV2LoggingOptions_21628107(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the logging options for the V2 logging service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628109 = header.getOrDefault("X-Amz-Date")
  valid_21628109 = validateParameter(valid_21628109, JString, required = false,
                                   default = nil)
  if valid_21628109 != nil:
    section.add "X-Amz-Date", valid_21628109
  var valid_21628110 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628110 = validateParameter(valid_21628110, JString, required = false,
                                   default = nil)
  if valid_21628110 != nil:
    section.add "X-Amz-Security-Token", valid_21628110
  var valid_21628111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628111 = validateParameter(valid_21628111, JString, required = false,
                                   default = nil)
  if valid_21628111 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628111
  var valid_21628112 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628112 = validateParameter(valid_21628112, JString, required = false,
                                   default = nil)
  if valid_21628112 != nil:
    section.add "X-Amz-Algorithm", valid_21628112
  var valid_21628113 = header.getOrDefault("X-Amz-Signature")
  valid_21628113 = validateParameter(valid_21628113, JString, required = false,
                                   default = nil)
  if valid_21628113 != nil:
    section.add "X-Amz-Signature", valid_21628113
  var valid_21628114 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628114 = validateParameter(valid_21628114, JString, required = false,
                                   default = nil)
  if valid_21628114 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628114
  var valid_21628115 = header.getOrDefault("X-Amz-Credential")
  valid_21628115 = validateParameter(valid_21628115, JString, required = false,
                                   default = nil)
  if valid_21628115 != nil:
    section.add "X-Amz-Credential", valid_21628115
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628117: Call_SetV2LoggingOptions_21628106; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the logging options for the V2 logging service.
  ## 
  let valid = call_21628117.validator(path, query, header, formData, body, _)
  let scheme = call_21628117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628117.makeUrl(scheme.get, call_21628117.host, call_21628117.base,
                               call_21628117.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628117, uri, valid, _)

proc call*(call_21628118: Call_SetV2LoggingOptions_21628106; body: JsonNode): Recallable =
  ## setV2LoggingOptions
  ## Sets the logging options for the V2 logging service.
  ##   body: JObject (required)
  var body_21628119 = newJObject()
  if body != nil:
    body_21628119 = body
  result = call_21628118.call(nil, nil, nil, nil, body_21628119)

var setV2LoggingOptions* = Call_SetV2LoggingOptions_21628106(
    name: "setV2LoggingOptions", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/v2LoggingOptions",
    validator: validate_SetV2LoggingOptions_21628107, base: "/",
    makeUrl: url_SetV2LoggingOptions_21628108,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetV2LoggingOptions_21628094 = ref object of OpenApiRestCall_21625435
proc url_GetV2LoggingOptions_21628096(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetV2LoggingOptions_21628095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the fine grained logging options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628097 = header.getOrDefault("X-Amz-Date")
  valid_21628097 = validateParameter(valid_21628097, JString, required = false,
                                   default = nil)
  if valid_21628097 != nil:
    section.add "X-Amz-Date", valid_21628097
  var valid_21628098 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628098 = validateParameter(valid_21628098, JString, required = false,
                                   default = nil)
  if valid_21628098 != nil:
    section.add "X-Amz-Security-Token", valid_21628098
  var valid_21628099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628099 = validateParameter(valid_21628099, JString, required = false,
                                   default = nil)
  if valid_21628099 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628099
  var valid_21628100 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628100 = validateParameter(valid_21628100, JString, required = false,
                                   default = nil)
  if valid_21628100 != nil:
    section.add "X-Amz-Algorithm", valid_21628100
  var valid_21628101 = header.getOrDefault("X-Amz-Signature")
  valid_21628101 = validateParameter(valid_21628101, JString, required = false,
                                   default = nil)
  if valid_21628101 != nil:
    section.add "X-Amz-Signature", valid_21628101
  var valid_21628102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628102 = validateParameter(valid_21628102, JString, required = false,
                                   default = nil)
  if valid_21628102 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628102
  var valid_21628103 = header.getOrDefault("X-Amz-Credential")
  valid_21628103 = validateParameter(valid_21628103, JString, required = false,
                                   default = nil)
  if valid_21628103 != nil:
    section.add "X-Amz-Credential", valid_21628103
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628104: Call_GetV2LoggingOptions_21628094; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the fine grained logging options.
  ## 
  let valid = call_21628104.validator(path, query, header, formData, body, _)
  let scheme = call_21628104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628104.makeUrl(scheme.get, call_21628104.host, call_21628104.base,
                               call_21628104.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628104, uri, valid, _)

proc call*(call_21628105: Call_GetV2LoggingOptions_21628094): Recallable =
  ## getV2LoggingOptions
  ## Gets the fine grained logging options.
  result = call_21628105.call(nil, nil, nil, nil, nil)

var getV2LoggingOptions* = Call_GetV2LoggingOptions_21628094(
    name: "getV2LoggingOptions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/v2LoggingOptions",
    validator: validate_GetV2LoggingOptions_21628095, base: "/",
    makeUrl: url_GetV2LoggingOptions_21628096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListActiveViolations_21628120 = ref object of OpenApiRestCall_21625435
proc url_ListActiveViolations_21628122(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListActiveViolations_21628121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the active violations for a given Device Defender security profile.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   thingName: JString
  ##            : The name of the thing whose active violations are listed.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  ##   securityProfileName: JString
  ##                      : The name of the Device Defender security profile for which violations are listed.
  section = newJObject()
  var valid_21628123 = query.getOrDefault("thingName")
  valid_21628123 = validateParameter(valid_21628123, JString, required = false,
                                   default = nil)
  if valid_21628123 != nil:
    section.add "thingName", valid_21628123
  var valid_21628124 = query.getOrDefault("maxResults")
  valid_21628124 = validateParameter(valid_21628124, JInt, required = false,
                                   default = nil)
  if valid_21628124 != nil:
    section.add "maxResults", valid_21628124
  var valid_21628125 = query.getOrDefault("nextToken")
  valid_21628125 = validateParameter(valid_21628125, JString, required = false,
                                   default = nil)
  if valid_21628125 != nil:
    section.add "nextToken", valid_21628125
  var valid_21628126 = query.getOrDefault("securityProfileName")
  valid_21628126 = validateParameter(valid_21628126, JString, required = false,
                                   default = nil)
  if valid_21628126 != nil:
    section.add "securityProfileName", valid_21628126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628127 = header.getOrDefault("X-Amz-Date")
  valid_21628127 = validateParameter(valid_21628127, JString, required = false,
                                   default = nil)
  if valid_21628127 != nil:
    section.add "X-Amz-Date", valid_21628127
  var valid_21628128 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628128 = validateParameter(valid_21628128, JString, required = false,
                                   default = nil)
  if valid_21628128 != nil:
    section.add "X-Amz-Security-Token", valid_21628128
  var valid_21628129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628129 = validateParameter(valid_21628129, JString, required = false,
                                   default = nil)
  if valid_21628129 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628129
  var valid_21628130 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628130 = validateParameter(valid_21628130, JString, required = false,
                                   default = nil)
  if valid_21628130 != nil:
    section.add "X-Amz-Algorithm", valid_21628130
  var valid_21628131 = header.getOrDefault("X-Amz-Signature")
  valid_21628131 = validateParameter(valid_21628131, JString, required = false,
                                   default = nil)
  if valid_21628131 != nil:
    section.add "X-Amz-Signature", valid_21628131
  var valid_21628132 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628132 = validateParameter(valid_21628132, JString, required = false,
                                   default = nil)
  if valid_21628132 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628132
  var valid_21628133 = header.getOrDefault("X-Amz-Credential")
  valid_21628133 = validateParameter(valid_21628133, JString, required = false,
                                   default = nil)
  if valid_21628133 != nil:
    section.add "X-Amz-Credential", valid_21628133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628134: Call_ListActiveViolations_21628120; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the active violations for a given Device Defender security profile.
  ## 
  let valid = call_21628134.validator(path, query, header, formData, body, _)
  let scheme = call_21628134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628134.makeUrl(scheme.get, call_21628134.host, call_21628134.base,
                               call_21628134.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628134, uri, valid, _)

proc call*(call_21628135: Call_ListActiveViolations_21628120;
          thingName: string = ""; maxResults: int = 0; nextToken: string = "";
          securityProfileName: string = ""): Recallable =
  ## listActiveViolations
  ## Lists the active violations for a given Device Defender security profile.
  ##   thingName: string
  ##            : The name of the thing whose active violations are listed.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token for the next set of results.
  ##   securityProfileName: string
  ##                      : The name of the Device Defender security profile for which violations are listed.
  var query_21628136 = newJObject()
  add(query_21628136, "thingName", newJString(thingName))
  add(query_21628136, "maxResults", newJInt(maxResults))
  add(query_21628136, "nextToken", newJString(nextToken))
  add(query_21628136, "securityProfileName", newJString(securityProfileName))
  result = call_21628135.call(nil, query_21628136, nil, nil, nil)

var listActiveViolations* = Call_ListActiveViolations_21628120(
    name: "listActiveViolations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/active-violations",
    validator: validate_ListActiveViolations_21628121, base: "/",
    makeUrl: url_ListActiveViolations_21628122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAttachedPolicies_21628137 = ref object of OpenApiRestCall_21625435
proc url_ListAttachedPolicies_21628139(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "target" in path, "`target` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/attached-policies/"),
               (kind: VariableSegment, value: "target")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListAttachedPolicies_21628138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the policies attached to the specified thing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   target: JString (required)
  ##         : The group or principal for which the policies will be listed.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `target` field"
  var valid_21628140 = path.getOrDefault("target")
  valid_21628140 = validateParameter(valid_21628140, JString, required = true,
                                   default = nil)
  if valid_21628140 != nil:
    section.add "target", valid_21628140
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The token to retrieve the next set of results.
  ##   pageSize: JInt
  ##           : The maximum number of results to be returned per request.
  ##   recursive: JBool
  ##            : When true, recursively list attached policies.
  section = newJObject()
  var valid_21628141 = query.getOrDefault("marker")
  valid_21628141 = validateParameter(valid_21628141, JString, required = false,
                                   default = nil)
  if valid_21628141 != nil:
    section.add "marker", valid_21628141
  var valid_21628142 = query.getOrDefault("pageSize")
  valid_21628142 = validateParameter(valid_21628142, JInt, required = false,
                                   default = nil)
  if valid_21628142 != nil:
    section.add "pageSize", valid_21628142
  var valid_21628143 = query.getOrDefault("recursive")
  valid_21628143 = validateParameter(valid_21628143, JBool, required = false,
                                   default = nil)
  if valid_21628143 != nil:
    section.add "recursive", valid_21628143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628144 = header.getOrDefault("X-Amz-Date")
  valid_21628144 = validateParameter(valid_21628144, JString, required = false,
                                   default = nil)
  if valid_21628144 != nil:
    section.add "X-Amz-Date", valid_21628144
  var valid_21628145 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628145 = validateParameter(valid_21628145, JString, required = false,
                                   default = nil)
  if valid_21628145 != nil:
    section.add "X-Amz-Security-Token", valid_21628145
  var valid_21628146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628146 = validateParameter(valid_21628146, JString, required = false,
                                   default = nil)
  if valid_21628146 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628146
  var valid_21628147 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628147 = validateParameter(valid_21628147, JString, required = false,
                                   default = nil)
  if valid_21628147 != nil:
    section.add "X-Amz-Algorithm", valid_21628147
  var valid_21628148 = header.getOrDefault("X-Amz-Signature")
  valid_21628148 = validateParameter(valid_21628148, JString, required = false,
                                   default = nil)
  if valid_21628148 != nil:
    section.add "X-Amz-Signature", valid_21628148
  var valid_21628149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628149 = validateParameter(valid_21628149, JString, required = false,
                                   default = nil)
  if valid_21628149 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628149
  var valid_21628150 = header.getOrDefault("X-Amz-Credential")
  valid_21628150 = validateParameter(valid_21628150, JString, required = false,
                                   default = nil)
  if valid_21628150 != nil:
    section.add "X-Amz-Credential", valid_21628150
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628151: Call_ListAttachedPolicies_21628137; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the policies attached to the specified thing group.
  ## 
  let valid = call_21628151.validator(path, query, header, formData, body, _)
  let scheme = call_21628151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628151.makeUrl(scheme.get, call_21628151.host, call_21628151.base,
                               call_21628151.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628151, uri, valid, _)

proc call*(call_21628152: Call_ListAttachedPolicies_21628137; target: string;
          marker: string = ""; pageSize: int = 0; recursive: bool = false): Recallable =
  ## listAttachedPolicies
  ## Lists the policies attached to the specified thing group.
  ##   marker: string
  ##         : The token to retrieve the next set of results.
  ##   pageSize: int
  ##           : The maximum number of results to be returned per request.
  ##   recursive: bool
  ##            : When true, recursively list attached policies.
  ##   target: string (required)
  ##         : The group or principal for which the policies will be listed.
  var path_21628153 = newJObject()
  var query_21628154 = newJObject()
  add(query_21628154, "marker", newJString(marker))
  add(query_21628154, "pageSize", newJInt(pageSize))
  add(query_21628154, "recursive", newJBool(recursive))
  add(path_21628153, "target", newJString(target))
  result = call_21628152.call(path_21628153, query_21628154, nil, nil, nil)

var listAttachedPolicies* = Call_ListAttachedPolicies_21628137(
    name: "listAttachedPolicies", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/attached-policies/{target}",
    validator: validate_ListAttachedPolicies_21628138, base: "/",
    makeUrl: url_ListAttachedPolicies_21628139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditFindings_21628155 = ref object of OpenApiRestCall_21625435
proc url_ListAuditFindings_21628157(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditFindings_21628156(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628158 = header.getOrDefault("X-Amz-Date")
  valid_21628158 = validateParameter(valid_21628158, JString, required = false,
                                   default = nil)
  if valid_21628158 != nil:
    section.add "X-Amz-Date", valid_21628158
  var valid_21628159 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628159 = validateParameter(valid_21628159, JString, required = false,
                                   default = nil)
  if valid_21628159 != nil:
    section.add "X-Amz-Security-Token", valid_21628159
  var valid_21628160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628160 = validateParameter(valid_21628160, JString, required = false,
                                   default = nil)
  if valid_21628160 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628160
  var valid_21628161 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628161 = validateParameter(valid_21628161, JString, required = false,
                                   default = nil)
  if valid_21628161 != nil:
    section.add "X-Amz-Algorithm", valid_21628161
  var valid_21628162 = header.getOrDefault("X-Amz-Signature")
  valid_21628162 = validateParameter(valid_21628162, JString, required = false,
                                   default = nil)
  if valid_21628162 != nil:
    section.add "X-Amz-Signature", valid_21628162
  var valid_21628163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628163 = validateParameter(valid_21628163, JString, required = false,
                                   default = nil)
  if valid_21628163 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628163
  var valid_21628164 = header.getOrDefault("X-Amz-Credential")
  valid_21628164 = validateParameter(valid_21628164, JString, required = false,
                                   default = nil)
  if valid_21628164 != nil:
    section.add "X-Amz-Credential", valid_21628164
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628166: Call_ListAuditFindings_21628155; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)
  ## 
  let valid = call_21628166.validator(path, query, header, formData, body, _)
  let scheme = call_21628166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628166.makeUrl(scheme.get, call_21628166.host, call_21628166.base,
                               call_21628166.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628166, uri, valid, _)

proc call*(call_21628167: Call_ListAuditFindings_21628155; body: JsonNode): Recallable =
  ## listAuditFindings
  ## Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)
  ##   body: JObject (required)
  var body_21628168 = newJObject()
  if body != nil:
    body_21628168 = body
  result = call_21628167.call(nil, nil, nil, nil, body_21628168)

var listAuditFindings* = Call_ListAuditFindings_21628155(name: "listAuditFindings",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/audit/findings",
    validator: validate_ListAuditFindings_21628156, base: "/",
    makeUrl: url_ListAuditFindings_21628157, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditMitigationActionsExecutions_21628169 = ref object of OpenApiRestCall_21625435
proc url_ListAuditMitigationActionsExecutions_21628171(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditMitigationActionsExecutions_21628170(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets the status of audit mitigation action tasks that were executed.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   findingId: JString (required)
  ##            : Specify this filter to limit results to those that were applied to a specific audit finding.
  ##   taskId: JString (required)
  ##         : Specify this filter to limit results to actions for a specific audit mitigation actions task.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  ##   actionStatus: JString
  ##               : Specify this filter to limit results to those with a specific status.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `findingId` field"
  var valid_21628172 = query.getOrDefault("findingId")
  valid_21628172 = validateParameter(valid_21628172, JString, required = true,
                                   default = nil)
  if valid_21628172 != nil:
    section.add "findingId", valid_21628172
  var valid_21628173 = query.getOrDefault("taskId")
  valid_21628173 = validateParameter(valid_21628173, JString, required = true,
                                   default = nil)
  if valid_21628173 != nil:
    section.add "taskId", valid_21628173
  var valid_21628174 = query.getOrDefault("maxResults")
  valid_21628174 = validateParameter(valid_21628174, JInt, required = false,
                                   default = nil)
  if valid_21628174 != nil:
    section.add "maxResults", valid_21628174
  var valid_21628175 = query.getOrDefault("nextToken")
  valid_21628175 = validateParameter(valid_21628175, JString, required = false,
                                   default = nil)
  if valid_21628175 != nil:
    section.add "nextToken", valid_21628175
  var valid_21628176 = query.getOrDefault("actionStatus")
  valid_21628176 = validateParameter(valid_21628176, JString, required = false,
                                   default = newJString("IN_PROGRESS"))
  if valid_21628176 != nil:
    section.add "actionStatus", valid_21628176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628177 = header.getOrDefault("X-Amz-Date")
  valid_21628177 = validateParameter(valid_21628177, JString, required = false,
                                   default = nil)
  if valid_21628177 != nil:
    section.add "X-Amz-Date", valid_21628177
  var valid_21628178 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628178 = validateParameter(valid_21628178, JString, required = false,
                                   default = nil)
  if valid_21628178 != nil:
    section.add "X-Amz-Security-Token", valid_21628178
  var valid_21628179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628179 = validateParameter(valid_21628179, JString, required = false,
                                   default = nil)
  if valid_21628179 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628179
  var valid_21628180 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628180 = validateParameter(valid_21628180, JString, required = false,
                                   default = nil)
  if valid_21628180 != nil:
    section.add "X-Amz-Algorithm", valid_21628180
  var valid_21628181 = header.getOrDefault("X-Amz-Signature")
  valid_21628181 = validateParameter(valid_21628181, JString, required = false,
                                   default = nil)
  if valid_21628181 != nil:
    section.add "X-Amz-Signature", valid_21628181
  var valid_21628182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628182 = validateParameter(valid_21628182, JString, required = false,
                                   default = nil)
  if valid_21628182 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628182
  var valid_21628183 = header.getOrDefault("X-Amz-Credential")
  valid_21628183 = validateParameter(valid_21628183, JString, required = false,
                                   default = nil)
  if valid_21628183 != nil:
    section.add "X-Amz-Credential", valid_21628183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628184: Call_ListAuditMitigationActionsExecutions_21628169;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the status of audit mitigation action tasks that were executed.
  ## 
  let valid = call_21628184.validator(path, query, header, formData, body, _)
  let scheme = call_21628184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628184.makeUrl(scheme.get, call_21628184.host, call_21628184.base,
                               call_21628184.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628184, uri, valid, _)

proc call*(call_21628185: Call_ListAuditMitigationActionsExecutions_21628169;
          findingId: string; taskId: string; maxResults: int = 0;
          nextToken: string = ""; actionStatus: string = "IN_PROGRESS"): Recallable =
  ## listAuditMitigationActionsExecutions
  ## Gets the status of audit mitigation action tasks that were executed.
  ##   findingId: string (required)
  ##            : Specify this filter to limit results to those that were applied to a specific audit finding.
  ##   taskId: string (required)
  ##         : Specify this filter to limit results to actions for a specific audit mitigation actions task.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: string
  ##            : The token for the next set of results.
  ##   actionStatus: string
  ##               : Specify this filter to limit results to those with a specific status.
  var query_21628186 = newJObject()
  add(query_21628186, "findingId", newJString(findingId))
  add(query_21628186, "taskId", newJString(taskId))
  add(query_21628186, "maxResults", newJInt(maxResults))
  add(query_21628186, "nextToken", newJString(nextToken))
  add(query_21628186, "actionStatus", newJString(actionStatus))
  result = call_21628185.call(nil, query_21628186, nil, nil, nil)

var listAuditMitigationActionsExecutions* = Call_ListAuditMitigationActionsExecutions_21628169(
    name: "listAuditMitigationActionsExecutions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/audit/mitigationactions/executions#taskId&findingId",
    validator: validate_ListAuditMitigationActionsExecutions_21628170, base: "/",
    makeUrl: url_ListAuditMitigationActionsExecutions_21628171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditMitigationActionsTasks_21628187 = ref object of OpenApiRestCall_21625435
proc url_ListAuditMitigationActionsTasks_21628189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditMitigationActionsTasks_21628188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets a list of audit mitigation action tasks that match the specified filters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   findingId: JString
  ##            : Specify this filter to limit results to tasks that were applied to a specific audit finding.
  ##   taskStatus: JString
  ##             : Specify this filter to limit results to tasks that are in a specific state.
  ##   auditTaskId: JString
  ##              : Specify this filter to limit results to tasks that were applied to results for a specific audit.
  ##   endTime: JString (required)
  ##          : Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  ##   startTime: JString (required)
  ##            : Specify this filter to limit results to tasks that began on or after a specific date and time.
  section = newJObject()
  var valid_21628190 = query.getOrDefault("findingId")
  valid_21628190 = validateParameter(valid_21628190, JString, required = false,
                                   default = nil)
  if valid_21628190 != nil:
    section.add "findingId", valid_21628190
  var valid_21628191 = query.getOrDefault("taskStatus")
  valid_21628191 = validateParameter(valid_21628191, JString, required = false,
                                   default = newJString("IN_PROGRESS"))
  if valid_21628191 != nil:
    section.add "taskStatus", valid_21628191
  var valid_21628192 = query.getOrDefault("auditTaskId")
  valid_21628192 = validateParameter(valid_21628192, JString, required = false,
                                   default = nil)
  if valid_21628192 != nil:
    section.add "auditTaskId", valid_21628192
  assert query != nil, "query argument is necessary due to required `endTime` field"
  var valid_21628193 = query.getOrDefault("endTime")
  valid_21628193 = validateParameter(valid_21628193, JString, required = true,
                                   default = nil)
  if valid_21628193 != nil:
    section.add "endTime", valid_21628193
  var valid_21628194 = query.getOrDefault("maxResults")
  valid_21628194 = validateParameter(valid_21628194, JInt, required = false,
                                   default = nil)
  if valid_21628194 != nil:
    section.add "maxResults", valid_21628194
  var valid_21628195 = query.getOrDefault("nextToken")
  valid_21628195 = validateParameter(valid_21628195, JString, required = false,
                                   default = nil)
  if valid_21628195 != nil:
    section.add "nextToken", valid_21628195
  var valid_21628196 = query.getOrDefault("startTime")
  valid_21628196 = validateParameter(valid_21628196, JString, required = true,
                                   default = nil)
  if valid_21628196 != nil:
    section.add "startTime", valid_21628196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628197 = header.getOrDefault("X-Amz-Date")
  valid_21628197 = validateParameter(valid_21628197, JString, required = false,
                                   default = nil)
  if valid_21628197 != nil:
    section.add "X-Amz-Date", valid_21628197
  var valid_21628198 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628198 = validateParameter(valid_21628198, JString, required = false,
                                   default = nil)
  if valid_21628198 != nil:
    section.add "X-Amz-Security-Token", valid_21628198
  var valid_21628199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628199 = validateParameter(valid_21628199, JString, required = false,
                                   default = nil)
  if valid_21628199 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628199
  var valid_21628200 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628200 = validateParameter(valid_21628200, JString, required = false,
                                   default = nil)
  if valid_21628200 != nil:
    section.add "X-Amz-Algorithm", valid_21628200
  var valid_21628201 = header.getOrDefault("X-Amz-Signature")
  valid_21628201 = validateParameter(valid_21628201, JString, required = false,
                                   default = nil)
  if valid_21628201 != nil:
    section.add "X-Amz-Signature", valid_21628201
  var valid_21628202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628202 = validateParameter(valid_21628202, JString, required = false,
                                   default = nil)
  if valid_21628202 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628202
  var valid_21628203 = header.getOrDefault("X-Amz-Credential")
  valid_21628203 = validateParameter(valid_21628203, JString, required = false,
                                   default = nil)
  if valid_21628203 != nil:
    section.add "X-Amz-Credential", valid_21628203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628204: Call_ListAuditMitigationActionsTasks_21628187;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a list of audit mitigation action tasks that match the specified filters.
  ## 
  let valid = call_21628204.validator(path, query, header, formData, body, _)
  let scheme = call_21628204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628204.makeUrl(scheme.get, call_21628204.host, call_21628204.base,
                               call_21628204.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628204, uri, valid, _)

proc call*(call_21628205: Call_ListAuditMitigationActionsTasks_21628187;
          endTime: string; startTime: string; findingId: string = "";
          taskStatus: string = "IN_PROGRESS"; auditTaskId: string = "";
          maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listAuditMitigationActionsTasks
  ## Gets a list of audit mitigation action tasks that match the specified filters.
  ##   findingId: string
  ##            : Specify this filter to limit results to tasks that were applied to a specific audit finding.
  ##   taskStatus: string
  ##             : Specify this filter to limit results to tasks that are in a specific state.
  ##   auditTaskId: string
  ##              : Specify this filter to limit results to tasks that were applied to results for a specific audit.
  ##   endTime: string (required)
  ##          : Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: string
  ##            : The token for the next set of results.
  ##   startTime: string (required)
  ##            : Specify this filter to limit results to tasks that began on or after a specific date and time.
  var query_21628206 = newJObject()
  add(query_21628206, "findingId", newJString(findingId))
  add(query_21628206, "taskStatus", newJString(taskStatus))
  add(query_21628206, "auditTaskId", newJString(auditTaskId))
  add(query_21628206, "endTime", newJString(endTime))
  add(query_21628206, "maxResults", newJInt(maxResults))
  add(query_21628206, "nextToken", newJString(nextToken))
  add(query_21628206, "startTime", newJString(startTime))
  result = call_21628205.call(nil, query_21628206, nil, nil, nil)

var listAuditMitigationActionsTasks* = Call_ListAuditMitigationActionsTasks_21628187(
    name: "listAuditMitigationActionsTasks", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/audit/mitigationactions/tasks#startTime&endTime",
    validator: validate_ListAuditMitigationActionsTasks_21628188, base: "/",
    makeUrl: url_ListAuditMitigationActionsTasks_21628189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditTasks_21628207 = ref object of OpenApiRestCall_21625435
proc url_ListAuditTasks_21628209(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditTasks_21628208(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Device Defender audits that have been performed during a given time period.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   taskType: JString
  ##           : A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
  ##   taskStatus: JString
  ##             : A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".
  ##   endTime: JString (required)
  ##          : The end of the time period.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  ##   startTime: JString (required)
  ##            : The beginning of the time period. Audit information is retained for a limited time (180 days). Requesting a start time prior to what is retained results in an "InvalidRequestException".
  section = newJObject()
  var valid_21628210 = query.getOrDefault("taskType")
  valid_21628210 = validateParameter(valid_21628210, JString, required = false,
                                   default = newJString("ON_DEMAND_AUDIT_TASK"))
  if valid_21628210 != nil:
    section.add "taskType", valid_21628210
  var valid_21628211 = query.getOrDefault("taskStatus")
  valid_21628211 = validateParameter(valid_21628211, JString, required = false,
                                   default = newJString("IN_PROGRESS"))
  if valid_21628211 != nil:
    section.add "taskStatus", valid_21628211
  assert query != nil, "query argument is necessary due to required `endTime` field"
  var valid_21628212 = query.getOrDefault("endTime")
  valid_21628212 = validateParameter(valid_21628212, JString, required = true,
                                   default = nil)
  if valid_21628212 != nil:
    section.add "endTime", valid_21628212
  var valid_21628213 = query.getOrDefault("maxResults")
  valid_21628213 = validateParameter(valid_21628213, JInt, required = false,
                                   default = nil)
  if valid_21628213 != nil:
    section.add "maxResults", valid_21628213
  var valid_21628214 = query.getOrDefault("nextToken")
  valid_21628214 = validateParameter(valid_21628214, JString, required = false,
                                   default = nil)
  if valid_21628214 != nil:
    section.add "nextToken", valid_21628214
  var valid_21628215 = query.getOrDefault("startTime")
  valid_21628215 = validateParameter(valid_21628215, JString, required = true,
                                   default = nil)
  if valid_21628215 != nil:
    section.add "startTime", valid_21628215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628216 = header.getOrDefault("X-Amz-Date")
  valid_21628216 = validateParameter(valid_21628216, JString, required = false,
                                   default = nil)
  if valid_21628216 != nil:
    section.add "X-Amz-Date", valid_21628216
  var valid_21628217 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628217 = validateParameter(valid_21628217, JString, required = false,
                                   default = nil)
  if valid_21628217 != nil:
    section.add "X-Amz-Security-Token", valid_21628217
  var valid_21628218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628218 = validateParameter(valid_21628218, JString, required = false,
                                   default = nil)
  if valid_21628218 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628218
  var valid_21628219 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628219 = validateParameter(valid_21628219, JString, required = false,
                                   default = nil)
  if valid_21628219 != nil:
    section.add "X-Amz-Algorithm", valid_21628219
  var valid_21628220 = header.getOrDefault("X-Amz-Signature")
  valid_21628220 = validateParameter(valid_21628220, JString, required = false,
                                   default = nil)
  if valid_21628220 != nil:
    section.add "X-Amz-Signature", valid_21628220
  var valid_21628221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628221 = validateParameter(valid_21628221, JString, required = false,
                                   default = nil)
  if valid_21628221 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628221
  var valid_21628222 = header.getOrDefault("X-Amz-Credential")
  valid_21628222 = validateParameter(valid_21628222, JString, required = false,
                                   default = nil)
  if valid_21628222 != nil:
    section.add "X-Amz-Credential", valid_21628222
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628223: Call_ListAuditTasks_21628207; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender audits that have been performed during a given time period.
  ## 
  let valid = call_21628223.validator(path, query, header, formData, body, _)
  let scheme = call_21628223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628223.makeUrl(scheme.get, call_21628223.host, call_21628223.base,
                               call_21628223.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628223, uri, valid, _)

proc call*(call_21628224: Call_ListAuditTasks_21628207; endTime: string;
          startTime: string; taskType: string = "ON_DEMAND_AUDIT_TASK";
          taskStatus: string = "IN_PROGRESS"; maxResults: int = 0;
          nextToken: string = ""): Recallable =
  ## listAuditTasks
  ## Lists the Device Defender audits that have been performed during a given time period.
  ##   taskType: string
  ##           : A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
  ##   taskStatus: string
  ##             : A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".
  ##   endTime: string (required)
  ##          : The end of the time period.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: string
  ##            : The token for the next set of results.
  ##   startTime: string (required)
  ##            : The beginning of the time period. Audit information is retained for a limited time (180 days). Requesting a start time prior to what is retained results in an "InvalidRequestException".
  var query_21628225 = newJObject()
  add(query_21628225, "taskType", newJString(taskType))
  add(query_21628225, "taskStatus", newJString(taskStatus))
  add(query_21628225, "endTime", newJString(endTime))
  add(query_21628225, "maxResults", newJInt(maxResults))
  add(query_21628225, "nextToken", newJString(nextToken))
  add(query_21628225, "startTime", newJString(startTime))
  result = call_21628224.call(nil, query_21628225, nil, nil, nil)

var listAuditTasks* = Call_ListAuditTasks_21628207(name: "listAuditTasks",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/audit/tasks#startTime&endTime", validator: validate_ListAuditTasks_21628208,
    base: "/", makeUrl: url_ListAuditTasks_21628209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuthorizers_21628226 = ref object of OpenApiRestCall_21625435
proc url_ListAuthorizers_21628228(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuthorizers_21628227(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the authorizers registered in your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : A marker used to get the next set of results.
  ##   pageSize: JInt
  ##           : The maximum number of results to return at one time.
  ##   status: JString
  ##         : The status of the list authorizers request.
  ##   isAscendingOrder: JBool
  ##                   : Return the list of authorizers in ascending alphabetical order.
  section = newJObject()
  var valid_21628229 = query.getOrDefault("marker")
  valid_21628229 = validateParameter(valid_21628229, JString, required = false,
                                   default = nil)
  if valid_21628229 != nil:
    section.add "marker", valid_21628229
  var valid_21628230 = query.getOrDefault("pageSize")
  valid_21628230 = validateParameter(valid_21628230, JInt, required = false,
                                   default = nil)
  if valid_21628230 != nil:
    section.add "pageSize", valid_21628230
  var valid_21628231 = query.getOrDefault("status")
  valid_21628231 = validateParameter(valid_21628231, JString, required = false,
                                   default = newJString("ACTIVE"))
  if valid_21628231 != nil:
    section.add "status", valid_21628231
  var valid_21628232 = query.getOrDefault("isAscendingOrder")
  valid_21628232 = validateParameter(valid_21628232, JBool, required = false,
                                   default = nil)
  if valid_21628232 != nil:
    section.add "isAscendingOrder", valid_21628232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628233 = header.getOrDefault("X-Amz-Date")
  valid_21628233 = validateParameter(valid_21628233, JString, required = false,
                                   default = nil)
  if valid_21628233 != nil:
    section.add "X-Amz-Date", valid_21628233
  var valid_21628234 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628234 = validateParameter(valid_21628234, JString, required = false,
                                   default = nil)
  if valid_21628234 != nil:
    section.add "X-Amz-Security-Token", valid_21628234
  var valid_21628235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628235 = validateParameter(valid_21628235, JString, required = false,
                                   default = nil)
  if valid_21628235 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628235
  var valid_21628236 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628236 = validateParameter(valid_21628236, JString, required = false,
                                   default = nil)
  if valid_21628236 != nil:
    section.add "X-Amz-Algorithm", valid_21628236
  var valid_21628237 = header.getOrDefault("X-Amz-Signature")
  valid_21628237 = validateParameter(valid_21628237, JString, required = false,
                                   default = nil)
  if valid_21628237 != nil:
    section.add "X-Amz-Signature", valid_21628237
  var valid_21628238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628238 = validateParameter(valid_21628238, JString, required = false,
                                   default = nil)
  if valid_21628238 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628238
  var valid_21628239 = header.getOrDefault("X-Amz-Credential")
  valid_21628239 = validateParameter(valid_21628239, JString, required = false,
                                   default = nil)
  if valid_21628239 != nil:
    section.add "X-Amz-Credential", valid_21628239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628240: Call_ListAuthorizers_21628226; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the authorizers registered in your account.
  ## 
  let valid = call_21628240.validator(path, query, header, formData, body, _)
  let scheme = call_21628240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628240.makeUrl(scheme.get, call_21628240.host, call_21628240.base,
                               call_21628240.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628240, uri, valid, _)

proc call*(call_21628241: Call_ListAuthorizers_21628226; marker: string = "";
          pageSize: int = 0; status: string = "ACTIVE"; isAscendingOrder: bool = false): Recallable =
  ## listAuthorizers
  ## Lists the authorizers registered in your account.
  ##   marker: string
  ##         : A marker used to get the next set of results.
  ##   pageSize: int
  ##           : The maximum number of results to return at one time.
  ##   status: string
  ##         : The status of the list authorizers request.
  ##   isAscendingOrder: bool
  ##                   : Return the list of authorizers in ascending alphabetical order.
  var query_21628242 = newJObject()
  add(query_21628242, "marker", newJString(marker))
  add(query_21628242, "pageSize", newJInt(pageSize))
  add(query_21628242, "status", newJString(status))
  add(query_21628242, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628241.call(nil, query_21628242, nil, nil, nil)

var listAuthorizers* = Call_ListAuthorizers_21628226(name: "listAuthorizers",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/authorizers/",
    validator: validate_ListAuthorizers_21628227, base: "/",
    makeUrl: url_ListAuthorizers_21628228, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListBillingGroups_21628243 = ref object of OpenApiRestCall_21625435
proc url_ListBillingGroups_21628245(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListBillingGroups_21628244(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the billing groups you have created.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   namePrefixFilter: JString
  ##                   : Limit the results to billing groups whose names have the given prefix.
  ##   maxResults: JInt
  ##             : The maximum number of results to return per request.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  section = newJObject()
  var valid_21628246 = query.getOrDefault("namePrefixFilter")
  valid_21628246 = validateParameter(valid_21628246, JString, required = false,
                                   default = nil)
  if valid_21628246 != nil:
    section.add "namePrefixFilter", valid_21628246
  var valid_21628247 = query.getOrDefault("maxResults")
  valid_21628247 = validateParameter(valid_21628247, JInt, required = false,
                                   default = nil)
  if valid_21628247 != nil:
    section.add "maxResults", valid_21628247
  var valid_21628248 = query.getOrDefault("nextToken")
  valid_21628248 = validateParameter(valid_21628248, JString, required = false,
                                   default = nil)
  if valid_21628248 != nil:
    section.add "nextToken", valid_21628248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628249 = header.getOrDefault("X-Amz-Date")
  valid_21628249 = validateParameter(valid_21628249, JString, required = false,
                                   default = nil)
  if valid_21628249 != nil:
    section.add "X-Amz-Date", valid_21628249
  var valid_21628250 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628250 = validateParameter(valid_21628250, JString, required = false,
                                   default = nil)
  if valid_21628250 != nil:
    section.add "X-Amz-Security-Token", valid_21628250
  var valid_21628251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628251 = validateParameter(valid_21628251, JString, required = false,
                                   default = nil)
  if valid_21628251 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628251
  var valid_21628252 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628252 = validateParameter(valid_21628252, JString, required = false,
                                   default = nil)
  if valid_21628252 != nil:
    section.add "X-Amz-Algorithm", valid_21628252
  var valid_21628253 = header.getOrDefault("X-Amz-Signature")
  valid_21628253 = validateParameter(valid_21628253, JString, required = false,
                                   default = nil)
  if valid_21628253 != nil:
    section.add "X-Amz-Signature", valid_21628253
  var valid_21628254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628254 = validateParameter(valid_21628254, JString, required = false,
                                   default = nil)
  if valid_21628254 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628254
  var valid_21628255 = header.getOrDefault("X-Amz-Credential")
  valid_21628255 = validateParameter(valid_21628255, JString, required = false,
                                   default = nil)
  if valid_21628255 != nil:
    section.add "X-Amz-Credential", valid_21628255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628256: Call_ListBillingGroups_21628243; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the billing groups you have created.
  ## 
  let valid = call_21628256.validator(path, query, header, formData, body, _)
  let scheme = call_21628256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628256.makeUrl(scheme.get, call_21628256.host, call_21628256.base,
                               call_21628256.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628256, uri, valid, _)

proc call*(call_21628257: Call_ListBillingGroups_21628243;
          namePrefixFilter: string = ""; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listBillingGroups
  ## Lists the billing groups you have created.
  ##   namePrefixFilter: string
  ##                   : Limit the results to billing groups whose names have the given prefix.
  ##   maxResults: int
  ##             : The maximum number of results to return per request.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  var query_21628258 = newJObject()
  add(query_21628258, "namePrefixFilter", newJString(namePrefixFilter))
  add(query_21628258, "maxResults", newJInt(maxResults))
  add(query_21628258, "nextToken", newJString(nextToken))
  result = call_21628257.call(nil, query_21628258, nil, nil, nil)

var listBillingGroups* = Call_ListBillingGroups_21628243(name: "listBillingGroups",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/billing-groups",
    validator: validate_ListBillingGroups_21628244, base: "/",
    makeUrl: url_ListBillingGroups_21628245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListCACertificates_21628259 = ref object of OpenApiRestCall_21625435
proc url_ListCACertificates_21628261(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListCACertificates_21628260(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  ##   isAscendingOrder: JBool
  ##                   : Determines the order of the results.
  section = newJObject()
  var valid_21628262 = query.getOrDefault("marker")
  valid_21628262 = validateParameter(valid_21628262, JString, required = false,
                                   default = nil)
  if valid_21628262 != nil:
    section.add "marker", valid_21628262
  var valid_21628263 = query.getOrDefault("pageSize")
  valid_21628263 = validateParameter(valid_21628263, JInt, required = false,
                                   default = nil)
  if valid_21628263 != nil:
    section.add "pageSize", valid_21628263
  var valid_21628264 = query.getOrDefault("isAscendingOrder")
  valid_21628264 = validateParameter(valid_21628264, JBool, required = false,
                                   default = nil)
  if valid_21628264 != nil:
    section.add "isAscendingOrder", valid_21628264
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628265 = header.getOrDefault("X-Amz-Date")
  valid_21628265 = validateParameter(valid_21628265, JString, required = false,
                                   default = nil)
  if valid_21628265 != nil:
    section.add "X-Amz-Date", valid_21628265
  var valid_21628266 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628266 = validateParameter(valid_21628266, JString, required = false,
                                   default = nil)
  if valid_21628266 != nil:
    section.add "X-Amz-Security-Token", valid_21628266
  var valid_21628267 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628267 = validateParameter(valid_21628267, JString, required = false,
                                   default = nil)
  if valid_21628267 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628267
  var valid_21628268 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628268 = validateParameter(valid_21628268, JString, required = false,
                                   default = nil)
  if valid_21628268 != nil:
    section.add "X-Amz-Algorithm", valid_21628268
  var valid_21628269 = header.getOrDefault("X-Amz-Signature")
  valid_21628269 = validateParameter(valid_21628269, JString, required = false,
                                   default = nil)
  if valid_21628269 != nil:
    section.add "X-Amz-Signature", valid_21628269
  var valid_21628270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628270 = validateParameter(valid_21628270, JString, required = false,
                                   default = nil)
  if valid_21628270 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628270
  var valid_21628271 = header.getOrDefault("X-Amz-Credential")
  valid_21628271 = validateParameter(valid_21628271, JString, required = false,
                                   default = nil)
  if valid_21628271 != nil:
    section.add "X-Amz-Credential", valid_21628271
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628272: Call_ListCACertificates_21628259; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ## 
  let valid = call_21628272.validator(path, query, header, formData, body, _)
  let scheme = call_21628272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628272.makeUrl(scheme.get, call_21628272.host, call_21628272.base,
                               call_21628272.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628272, uri, valid, _)

proc call*(call_21628273: Call_ListCACertificates_21628259; marker: string = "";
          pageSize: int = 0; isAscendingOrder: bool = false): Recallable =
  ## listCACertificates
  ## <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  ##   isAscendingOrder: bool
  ##                   : Determines the order of the results.
  var query_21628274 = newJObject()
  add(query_21628274, "marker", newJString(marker))
  add(query_21628274, "pageSize", newJInt(pageSize))
  add(query_21628274, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628273.call(nil, query_21628274, nil, nil, nil)

var listCACertificates* = Call_ListCACertificates_21628259(
    name: "listCACertificates", meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/cacertificates", validator: validate_ListCACertificates_21628260,
    base: "/", makeUrl: url_ListCACertificates_21628261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListCertificatesByCA_21628275 = ref object of OpenApiRestCall_21625435
proc url_ListCertificatesByCA_21628277(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path, "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates-by-ca/"),
               (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListCertificatesByCA_21628276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List the device certificates signed by the specified CA certificate.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
  ##                  : The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `caCertificateId` field"
  var valid_21628278 = path.getOrDefault("caCertificateId")
  valid_21628278 = validateParameter(valid_21628278, JString, required = true,
                                   default = nil)
  if valid_21628278 != nil:
    section.add "caCertificateId", valid_21628278
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  ##   isAscendingOrder: JBool
  ##                   : Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
  section = newJObject()
  var valid_21628279 = query.getOrDefault("marker")
  valid_21628279 = validateParameter(valid_21628279, JString, required = false,
                                   default = nil)
  if valid_21628279 != nil:
    section.add "marker", valid_21628279
  var valid_21628280 = query.getOrDefault("pageSize")
  valid_21628280 = validateParameter(valid_21628280, JInt, required = false,
                                   default = nil)
  if valid_21628280 != nil:
    section.add "pageSize", valid_21628280
  var valid_21628281 = query.getOrDefault("isAscendingOrder")
  valid_21628281 = validateParameter(valid_21628281, JBool, required = false,
                                   default = nil)
  if valid_21628281 != nil:
    section.add "isAscendingOrder", valid_21628281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628282 = header.getOrDefault("X-Amz-Date")
  valid_21628282 = validateParameter(valid_21628282, JString, required = false,
                                   default = nil)
  if valid_21628282 != nil:
    section.add "X-Amz-Date", valid_21628282
  var valid_21628283 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628283 = validateParameter(valid_21628283, JString, required = false,
                                   default = nil)
  if valid_21628283 != nil:
    section.add "X-Amz-Security-Token", valid_21628283
  var valid_21628284 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628284 = validateParameter(valid_21628284, JString, required = false,
                                   default = nil)
  if valid_21628284 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628284
  var valid_21628285 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628285 = validateParameter(valid_21628285, JString, required = false,
                                   default = nil)
  if valid_21628285 != nil:
    section.add "X-Amz-Algorithm", valid_21628285
  var valid_21628286 = header.getOrDefault("X-Amz-Signature")
  valid_21628286 = validateParameter(valid_21628286, JString, required = false,
                                   default = nil)
  if valid_21628286 != nil:
    section.add "X-Amz-Signature", valid_21628286
  var valid_21628287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628287 = validateParameter(valid_21628287, JString, required = false,
                                   default = nil)
  if valid_21628287 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628287
  var valid_21628288 = header.getOrDefault("X-Amz-Credential")
  valid_21628288 = validateParameter(valid_21628288, JString, required = false,
                                   default = nil)
  if valid_21628288 != nil:
    section.add "X-Amz-Credential", valid_21628288
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628289: Call_ListCertificatesByCA_21628275; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## List the device certificates signed by the specified CA certificate.
  ## 
  let valid = call_21628289.validator(path, query, header, formData, body, _)
  let scheme = call_21628289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628289.makeUrl(scheme.get, call_21628289.host, call_21628289.base,
                               call_21628289.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628289, uri, valid, _)

proc call*(call_21628290: Call_ListCertificatesByCA_21628275;
          caCertificateId: string; marker: string = ""; pageSize: int = 0;
          isAscendingOrder: bool = false): Recallable =
  ## listCertificatesByCA
  ## List the device certificates signed by the specified CA certificate.
  ##   caCertificateId: string (required)
  ##                  : The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  ##   isAscendingOrder: bool
  ##                   : Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
  var path_21628291 = newJObject()
  var query_21628292 = newJObject()
  add(path_21628291, "caCertificateId", newJString(caCertificateId))
  add(query_21628292, "marker", newJString(marker))
  add(query_21628292, "pageSize", newJInt(pageSize))
  add(query_21628292, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628290.call(path_21628291, query_21628292, nil, nil, nil)

var listCertificatesByCA* = Call_ListCertificatesByCA_21628275(
    name: "listCertificatesByCA", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/certificates-by-ca/{caCertificateId}",
    validator: validate_ListCertificatesByCA_21628276, base: "/",
    makeUrl: url_ListCertificatesByCA_21628277,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListDomainConfigurations_21628293 = ref object of OpenApiRestCall_21625435
proc url_ListDomainConfigurations_21628295(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListDomainConfigurations_21628294(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   serviceType: JString
  ##              : The type of service delivered by the endpoint.
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  section = newJObject()
  var valid_21628296 = query.getOrDefault("serviceType")
  valid_21628296 = validateParameter(valid_21628296, JString, required = false,
                                   default = newJString("DATA"))
  if valid_21628296 != nil:
    section.add "serviceType", valid_21628296
  var valid_21628297 = query.getOrDefault("marker")
  valid_21628297 = validateParameter(valid_21628297, JString, required = false,
                                   default = nil)
  if valid_21628297 != nil:
    section.add "marker", valid_21628297
  var valid_21628298 = query.getOrDefault("pageSize")
  valid_21628298 = validateParameter(valid_21628298, JInt, required = false,
                                   default = nil)
  if valid_21628298 != nil:
    section.add "pageSize", valid_21628298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628299 = header.getOrDefault("X-Amz-Date")
  valid_21628299 = validateParameter(valid_21628299, JString, required = false,
                                   default = nil)
  if valid_21628299 != nil:
    section.add "X-Amz-Date", valid_21628299
  var valid_21628300 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628300 = validateParameter(valid_21628300, JString, required = false,
                                   default = nil)
  if valid_21628300 != nil:
    section.add "X-Amz-Security-Token", valid_21628300
  var valid_21628301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628301 = validateParameter(valid_21628301, JString, required = false,
                                   default = nil)
  if valid_21628301 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628301
  var valid_21628302 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628302 = validateParameter(valid_21628302, JString, required = false,
                                   default = nil)
  if valid_21628302 != nil:
    section.add "X-Amz-Algorithm", valid_21628302
  var valid_21628303 = header.getOrDefault("X-Amz-Signature")
  valid_21628303 = validateParameter(valid_21628303, JString, required = false,
                                   default = nil)
  if valid_21628303 != nil:
    section.add "X-Amz-Signature", valid_21628303
  var valid_21628304 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628304 = validateParameter(valid_21628304, JString, required = false,
                                   default = nil)
  if valid_21628304 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628304
  var valid_21628305 = header.getOrDefault("X-Amz-Credential")
  valid_21628305 = validateParameter(valid_21628305, JString, required = false,
                                   default = nil)
  if valid_21628305 != nil:
    section.add "X-Amz-Credential", valid_21628305
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628306: Call_ListDomainConfigurations_21628293;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ## 
  let valid = call_21628306.validator(path, query, header, formData, body, _)
  let scheme = call_21628306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628306.makeUrl(scheme.get, call_21628306.host, call_21628306.base,
                               call_21628306.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628306, uri, valid, _)

proc call*(call_21628307: Call_ListDomainConfigurations_21628293;
          serviceType: string = "DATA"; marker: string = ""; pageSize: int = 0): Recallable =
  ## listDomainConfigurations
  ## <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   serviceType: string
  ##              : The type of service delivered by the endpoint.
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  var query_21628308 = newJObject()
  add(query_21628308, "serviceType", newJString(serviceType))
  add(query_21628308, "marker", newJString(marker))
  add(query_21628308, "pageSize", newJInt(pageSize))
  result = call_21628307.call(nil, query_21628308, nil, nil, nil)

var listDomainConfigurations* = Call_ListDomainConfigurations_21628293(
    name: "listDomainConfigurations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/domainConfigurations",
    validator: validate_ListDomainConfigurations_21628294, base: "/",
    makeUrl: url_ListDomainConfigurations_21628295,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListIndices_21628309 = ref object of OpenApiRestCall_21625435
proc url_ListIndices_21628311(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListIndices_21628310(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the search indices.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token used to get the next set of results, or <code>null</code> if there are no additional results.
  section = newJObject()
  var valid_21628312 = query.getOrDefault("maxResults")
  valid_21628312 = validateParameter(valid_21628312, JInt, required = false,
                                   default = nil)
  if valid_21628312 != nil:
    section.add "maxResults", valid_21628312
  var valid_21628313 = query.getOrDefault("nextToken")
  valid_21628313 = validateParameter(valid_21628313, JString, required = false,
                                   default = nil)
  if valid_21628313 != nil:
    section.add "nextToken", valid_21628313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628314 = header.getOrDefault("X-Amz-Date")
  valid_21628314 = validateParameter(valid_21628314, JString, required = false,
                                   default = nil)
  if valid_21628314 != nil:
    section.add "X-Amz-Date", valid_21628314
  var valid_21628315 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628315 = validateParameter(valid_21628315, JString, required = false,
                                   default = nil)
  if valid_21628315 != nil:
    section.add "X-Amz-Security-Token", valid_21628315
  var valid_21628316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628316 = validateParameter(valid_21628316, JString, required = false,
                                   default = nil)
  if valid_21628316 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628316
  var valid_21628317 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628317 = validateParameter(valid_21628317, JString, required = false,
                                   default = nil)
  if valid_21628317 != nil:
    section.add "X-Amz-Algorithm", valid_21628317
  var valid_21628318 = header.getOrDefault("X-Amz-Signature")
  valid_21628318 = validateParameter(valid_21628318, JString, required = false,
                                   default = nil)
  if valid_21628318 != nil:
    section.add "X-Amz-Signature", valid_21628318
  var valid_21628319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628319 = validateParameter(valid_21628319, JString, required = false,
                                   default = nil)
  if valid_21628319 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628319
  var valid_21628320 = header.getOrDefault("X-Amz-Credential")
  valid_21628320 = validateParameter(valid_21628320, JString, required = false,
                                   default = nil)
  if valid_21628320 != nil:
    section.add "X-Amz-Credential", valid_21628320
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628321: Call_ListIndices_21628309; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the search indices.
  ## 
  let valid = call_21628321.validator(path, query, header, formData, body, _)
  let scheme = call_21628321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628321.makeUrl(scheme.get, call_21628321.host, call_21628321.base,
                               call_21628321.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628321, uri, valid, _)

proc call*(call_21628322: Call_ListIndices_21628309; maxResults: int = 0;
          nextToken: string = ""): Recallable =
  ## listIndices
  ## Lists the search indices.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token used to get the next set of results, or <code>null</code> if there are no additional results.
  var query_21628323 = newJObject()
  add(query_21628323, "maxResults", newJInt(maxResults))
  add(query_21628323, "nextToken", newJString(nextToken))
  result = call_21628322.call(nil, query_21628323, nil, nil, nil)

var listIndices* = Call_ListIndices_21628309(name: "listIndices",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/indices",
    validator: validate_ListIndices_21628310, base: "/", makeUrl: url_ListIndices_21628311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListJobExecutionsForJob_21628324 = ref object of OpenApiRestCall_21625435
proc url_ListJobExecutionsForJob_21628326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
               (kind: VariableSegment, value: "jobId"),
               (kind: ConstantSegment, value: "/things")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListJobExecutionsForJob_21628325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the job executions for a job.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
  ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_21628327 = path.getOrDefault("jobId")
  valid_21628327 = validateParameter(valid_21628327, JString, required = true,
                                   default = nil)
  if valid_21628327 != nil:
    section.add "jobId", valid_21628327
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to be returned per request.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   status: JString
  ##         : The status of the job.
  section = newJObject()
  var valid_21628328 = query.getOrDefault("maxResults")
  valid_21628328 = validateParameter(valid_21628328, JInt, required = false,
                                   default = nil)
  if valid_21628328 != nil:
    section.add "maxResults", valid_21628328
  var valid_21628329 = query.getOrDefault("nextToken")
  valid_21628329 = validateParameter(valid_21628329, JString, required = false,
                                   default = nil)
  if valid_21628329 != nil:
    section.add "nextToken", valid_21628329
  var valid_21628330 = query.getOrDefault("status")
  valid_21628330 = validateParameter(valid_21628330, JString, required = false,
                                   default = newJString("QUEUED"))
  if valid_21628330 != nil:
    section.add "status", valid_21628330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628331 = header.getOrDefault("X-Amz-Date")
  valid_21628331 = validateParameter(valid_21628331, JString, required = false,
                                   default = nil)
  if valid_21628331 != nil:
    section.add "X-Amz-Date", valid_21628331
  var valid_21628332 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628332 = validateParameter(valid_21628332, JString, required = false,
                                   default = nil)
  if valid_21628332 != nil:
    section.add "X-Amz-Security-Token", valid_21628332
  var valid_21628333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628333 = validateParameter(valid_21628333, JString, required = false,
                                   default = nil)
  if valid_21628333 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628333
  var valid_21628334 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628334 = validateParameter(valid_21628334, JString, required = false,
                                   default = nil)
  if valid_21628334 != nil:
    section.add "X-Amz-Algorithm", valid_21628334
  var valid_21628335 = header.getOrDefault("X-Amz-Signature")
  valid_21628335 = validateParameter(valid_21628335, JString, required = false,
                                   default = nil)
  if valid_21628335 != nil:
    section.add "X-Amz-Signature", valid_21628335
  var valid_21628336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628336 = validateParameter(valid_21628336, JString, required = false,
                                   default = nil)
  if valid_21628336 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628336
  var valid_21628337 = header.getOrDefault("X-Amz-Credential")
  valid_21628337 = validateParameter(valid_21628337, JString, required = false,
                                   default = nil)
  if valid_21628337 != nil:
    section.add "X-Amz-Credential", valid_21628337
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628338: Call_ListJobExecutionsForJob_21628324;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the job executions for a job.
  ## 
  let valid = call_21628338.validator(path, query, header, formData, body, _)
  let scheme = call_21628338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628338.makeUrl(scheme.get, call_21628338.host, call_21628338.base,
                               call_21628338.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628338, uri, valid, _)

proc call*(call_21628339: Call_ListJobExecutionsForJob_21628324; jobId: string;
          maxResults: int = 0; nextToken: string = ""; status: string = "QUEUED"): Recallable =
  ## listJobExecutionsForJob
  ## Lists the job executions for a job.
  ##   jobId: string (required)
  ##        : The unique identifier you assigned to this job when it was created.
  ##   maxResults: int
  ##             : The maximum number of results to be returned per request.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   status: string
  ##         : The status of the job.
  var path_21628340 = newJObject()
  var query_21628341 = newJObject()
  add(path_21628340, "jobId", newJString(jobId))
  add(query_21628341, "maxResults", newJInt(maxResults))
  add(query_21628341, "nextToken", newJString(nextToken))
  add(query_21628341, "status", newJString(status))
  result = call_21628339.call(path_21628340, query_21628341, nil, nil, nil)

var listJobExecutionsForJob* = Call_ListJobExecutionsForJob_21628324(
    name: "listJobExecutionsForJob", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/jobs/{jobId}/things",
    validator: validate_ListJobExecutionsForJob_21628325, base: "/",
    makeUrl: url_ListJobExecutionsForJob_21628326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListJobExecutionsForThing_21628342 = ref object of OpenApiRestCall_21625435
proc url_ListJobExecutionsForThing_21628344(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/jobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListJobExecutionsForThing_21628343(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the job executions for the specified thing.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The thing name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21628345 = path.getOrDefault("thingName")
  valid_21628345 = validateParameter(valid_21628345, JString, required = true,
                                   default = nil)
  if valid_21628345 != nil:
    section.add "thingName", valid_21628345
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to be returned per request.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   status: JString
  ##         : An optional filter that lets you search for jobs that have the specified status.
  section = newJObject()
  var valid_21628346 = query.getOrDefault("maxResults")
  valid_21628346 = validateParameter(valid_21628346, JInt, required = false,
                                   default = nil)
  if valid_21628346 != nil:
    section.add "maxResults", valid_21628346
  var valid_21628347 = query.getOrDefault("nextToken")
  valid_21628347 = validateParameter(valid_21628347, JString, required = false,
                                   default = nil)
  if valid_21628347 != nil:
    section.add "nextToken", valid_21628347
  var valid_21628348 = query.getOrDefault("status")
  valid_21628348 = validateParameter(valid_21628348, JString, required = false,
                                   default = newJString("QUEUED"))
  if valid_21628348 != nil:
    section.add "status", valid_21628348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628349 = header.getOrDefault("X-Amz-Date")
  valid_21628349 = validateParameter(valid_21628349, JString, required = false,
                                   default = nil)
  if valid_21628349 != nil:
    section.add "X-Amz-Date", valid_21628349
  var valid_21628350 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628350 = validateParameter(valid_21628350, JString, required = false,
                                   default = nil)
  if valid_21628350 != nil:
    section.add "X-Amz-Security-Token", valid_21628350
  var valid_21628351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628351 = validateParameter(valid_21628351, JString, required = false,
                                   default = nil)
  if valid_21628351 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628351
  var valid_21628352 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628352 = validateParameter(valid_21628352, JString, required = false,
                                   default = nil)
  if valid_21628352 != nil:
    section.add "X-Amz-Algorithm", valid_21628352
  var valid_21628353 = header.getOrDefault("X-Amz-Signature")
  valid_21628353 = validateParameter(valid_21628353, JString, required = false,
                                   default = nil)
  if valid_21628353 != nil:
    section.add "X-Amz-Signature", valid_21628353
  var valid_21628354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628354 = validateParameter(valid_21628354, JString, required = false,
                                   default = nil)
  if valid_21628354 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628354
  var valid_21628355 = header.getOrDefault("X-Amz-Credential")
  valid_21628355 = validateParameter(valid_21628355, JString, required = false,
                                   default = nil)
  if valid_21628355 != nil:
    section.add "X-Amz-Credential", valid_21628355
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628356: Call_ListJobExecutionsForThing_21628342;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the job executions for the specified thing.
  ## 
  let valid = call_21628356.validator(path, query, header, formData, body, _)
  let scheme = call_21628356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628356.makeUrl(scheme.get, call_21628356.host, call_21628356.base,
                               call_21628356.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628356, uri, valid, _)

proc call*(call_21628357: Call_ListJobExecutionsForThing_21628342;
          thingName: string; maxResults: int = 0; nextToken: string = "";
          status: string = "QUEUED"): Recallable =
  ## listJobExecutionsForThing
  ## Lists the job executions for the specified thing.
  ##   thingName: string (required)
  ##            : The thing name.
  ##   maxResults: int
  ##             : The maximum number of results to be returned per request.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   status: string
  ##         : An optional filter that lets you search for jobs that have the specified status.
  var path_21628358 = newJObject()
  var query_21628359 = newJObject()
  add(path_21628358, "thingName", newJString(thingName))
  add(query_21628359, "maxResults", newJInt(maxResults))
  add(query_21628359, "nextToken", newJString(nextToken))
  add(query_21628359, "status", newJString(status))
  result = call_21628357.call(path_21628358, query_21628359, nil, nil, nil)

var listJobExecutionsForThing* = Call_ListJobExecutionsForThing_21628342(
    name: "listJobExecutionsForThing", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/jobs",
    validator: validate_ListJobExecutionsForThing_21628343, base: "/",
    makeUrl: url_ListJobExecutionsForThing_21628344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListJobs_21628360 = ref object of OpenApiRestCall_21625435
proc url_ListJobs_21628362(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListJobs_21628361(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists jobs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   thingGroupName: JString
  ##                 : A filter that limits the returned jobs to those for the specified group.
  ##   targetSelection: JString
  ##                  : Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. 
  ##   maxResults: JInt
  ##             : The maximum number of results to return per request.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   status: JString
  ##         : An optional filter that lets you search for jobs that have the specified status.
  ##   thingGroupId: JString
  ##               : A filter that limits the returned jobs to those for the specified group.
  section = newJObject()
  var valid_21628363 = query.getOrDefault("thingGroupName")
  valid_21628363 = validateParameter(valid_21628363, JString, required = false,
                                   default = nil)
  if valid_21628363 != nil:
    section.add "thingGroupName", valid_21628363
  var valid_21628364 = query.getOrDefault("targetSelection")
  valid_21628364 = validateParameter(valid_21628364, JString, required = false,
                                   default = newJString("CONTINUOUS"))
  if valid_21628364 != nil:
    section.add "targetSelection", valid_21628364
  var valid_21628365 = query.getOrDefault("maxResults")
  valid_21628365 = validateParameter(valid_21628365, JInt, required = false,
                                   default = nil)
  if valid_21628365 != nil:
    section.add "maxResults", valid_21628365
  var valid_21628366 = query.getOrDefault("nextToken")
  valid_21628366 = validateParameter(valid_21628366, JString, required = false,
                                   default = nil)
  if valid_21628366 != nil:
    section.add "nextToken", valid_21628366
  var valid_21628367 = query.getOrDefault("status")
  valid_21628367 = validateParameter(valid_21628367, JString, required = false,
                                   default = newJString("IN_PROGRESS"))
  if valid_21628367 != nil:
    section.add "status", valid_21628367
  var valid_21628368 = query.getOrDefault("thingGroupId")
  valid_21628368 = validateParameter(valid_21628368, JString, required = false,
                                   default = nil)
  if valid_21628368 != nil:
    section.add "thingGroupId", valid_21628368
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628369 = header.getOrDefault("X-Amz-Date")
  valid_21628369 = validateParameter(valid_21628369, JString, required = false,
                                   default = nil)
  if valid_21628369 != nil:
    section.add "X-Amz-Date", valid_21628369
  var valid_21628370 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628370 = validateParameter(valid_21628370, JString, required = false,
                                   default = nil)
  if valid_21628370 != nil:
    section.add "X-Amz-Security-Token", valid_21628370
  var valid_21628371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628371 = validateParameter(valid_21628371, JString, required = false,
                                   default = nil)
  if valid_21628371 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628371
  var valid_21628372 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628372 = validateParameter(valid_21628372, JString, required = false,
                                   default = nil)
  if valid_21628372 != nil:
    section.add "X-Amz-Algorithm", valid_21628372
  var valid_21628373 = header.getOrDefault("X-Amz-Signature")
  valid_21628373 = validateParameter(valid_21628373, JString, required = false,
                                   default = nil)
  if valid_21628373 != nil:
    section.add "X-Amz-Signature", valid_21628373
  var valid_21628374 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628374 = validateParameter(valid_21628374, JString, required = false,
                                   default = nil)
  if valid_21628374 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628374
  var valid_21628375 = header.getOrDefault("X-Amz-Credential")
  valid_21628375 = validateParameter(valid_21628375, JString, required = false,
                                   default = nil)
  if valid_21628375 != nil:
    section.add "X-Amz-Credential", valid_21628375
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628376: Call_ListJobs_21628360; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists jobs.
  ## 
  let valid = call_21628376.validator(path, query, header, formData, body, _)
  let scheme = call_21628376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628376.makeUrl(scheme.get, call_21628376.host, call_21628376.base,
                               call_21628376.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628376, uri, valid, _)

proc call*(call_21628377: Call_ListJobs_21628360; thingGroupName: string = "";
          targetSelection: string = "CONTINUOUS"; maxResults: int = 0;
          nextToken: string = ""; status: string = "IN_PROGRESS";
          thingGroupId: string = ""): Recallable =
  ## listJobs
  ## Lists jobs.
  ##   thingGroupName: string
  ##                 : A filter that limits the returned jobs to those for the specified group.
  ##   targetSelection: string
  ##                  : Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. 
  ##   maxResults: int
  ##             : The maximum number of results to return per request.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   status: string
  ##         : An optional filter that lets you search for jobs that have the specified status.
  ##   thingGroupId: string
  ##               : A filter that limits the returned jobs to those for the specified group.
  var query_21628378 = newJObject()
  add(query_21628378, "thingGroupName", newJString(thingGroupName))
  add(query_21628378, "targetSelection", newJString(targetSelection))
  add(query_21628378, "maxResults", newJInt(maxResults))
  add(query_21628378, "nextToken", newJString(nextToken))
  add(query_21628378, "status", newJString(status))
  add(query_21628378, "thingGroupId", newJString(thingGroupId))
  result = call_21628377.call(nil, query_21628378, nil, nil, nil)

var listJobs* = Call_ListJobs_21628360(name: "listJobs", meth: HttpMethod.HttpGet,
                                    host: "iot.amazonaws.com", route: "/jobs",
                                    validator: validate_ListJobs_21628361,
                                    base: "/", makeUrl: url_ListJobs_21628362,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListMitigationActions_21628379 = ref object of OpenApiRestCall_21625435
proc url_ListMitigationActions_21628381(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListMitigationActions_21628380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a list of all mitigation actions that match the specified filter criteria.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   actionType: JString
  ##             : Specify a value to limit the result to mitigation actions with a specific action type.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  section = newJObject()
  var valid_21628382 = query.getOrDefault("actionType")
  valid_21628382 = validateParameter(valid_21628382, JString, required = false, default = newJString(
      "UPDATE_DEVICE_CERTIFICATE"))
  if valid_21628382 != nil:
    section.add "actionType", valid_21628382
  var valid_21628383 = query.getOrDefault("maxResults")
  valid_21628383 = validateParameter(valid_21628383, JInt, required = false,
                                   default = nil)
  if valid_21628383 != nil:
    section.add "maxResults", valid_21628383
  var valid_21628384 = query.getOrDefault("nextToken")
  valid_21628384 = validateParameter(valid_21628384, JString, required = false,
                                   default = nil)
  if valid_21628384 != nil:
    section.add "nextToken", valid_21628384
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628385 = header.getOrDefault("X-Amz-Date")
  valid_21628385 = validateParameter(valid_21628385, JString, required = false,
                                   default = nil)
  if valid_21628385 != nil:
    section.add "X-Amz-Date", valid_21628385
  var valid_21628386 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628386 = validateParameter(valid_21628386, JString, required = false,
                                   default = nil)
  if valid_21628386 != nil:
    section.add "X-Amz-Security-Token", valid_21628386
  var valid_21628387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628387 = validateParameter(valid_21628387, JString, required = false,
                                   default = nil)
  if valid_21628387 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628387
  var valid_21628388 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628388 = validateParameter(valid_21628388, JString, required = false,
                                   default = nil)
  if valid_21628388 != nil:
    section.add "X-Amz-Algorithm", valid_21628388
  var valid_21628389 = header.getOrDefault("X-Amz-Signature")
  valid_21628389 = validateParameter(valid_21628389, JString, required = false,
                                   default = nil)
  if valid_21628389 != nil:
    section.add "X-Amz-Signature", valid_21628389
  var valid_21628390 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628390 = validateParameter(valid_21628390, JString, required = false,
                                   default = nil)
  if valid_21628390 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628390
  var valid_21628391 = header.getOrDefault("X-Amz-Credential")
  valid_21628391 = validateParameter(valid_21628391, JString, required = false,
                                   default = nil)
  if valid_21628391 != nil:
    section.add "X-Amz-Credential", valid_21628391
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628392: Call_ListMitigationActions_21628379;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a list of all mitigation actions that match the specified filter criteria.
  ## 
  let valid = call_21628392.validator(path, query, header, formData, body, _)
  let scheme = call_21628392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628392.makeUrl(scheme.get, call_21628392.host, call_21628392.base,
                               call_21628392.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628392, uri, valid, _)

proc call*(call_21628393: Call_ListMitigationActions_21628379;
          actionType: string = "UPDATE_DEVICE_CERTIFICATE"; maxResults: int = 0;
          nextToken: string = ""): Recallable =
  ## listMitigationActions
  ## Gets a list of all mitigation actions that match the specified filter criteria.
  ##   actionType: string
  ##             : Specify a value to limit the result to mitigation actions with a specific action type.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: string
  ##            : The token for the next set of results.
  var query_21628394 = newJObject()
  add(query_21628394, "actionType", newJString(actionType))
  add(query_21628394, "maxResults", newJInt(maxResults))
  add(query_21628394, "nextToken", newJString(nextToken))
  result = call_21628393.call(nil, query_21628394, nil, nil, nil)

var listMitigationActions* = Call_ListMitigationActions_21628379(
    name: "listMitigationActions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions",
    validator: validate_ListMitigationActions_21628380, base: "/",
    makeUrl: url_ListMitigationActions_21628381,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListOTAUpdates_21628395 = ref object of OpenApiRestCall_21625435
proc url_ListOTAUpdates_21628397(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListOTAUpdates_21628396(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists OTA updates.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   otaUpdateStatus: JString
  ##                  : The OTA update job status.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : A token used to retrieve the next set of results.
  section = newJObject()
  var valid_21628398 = query.getOrDefault("otaUpdateStatus")
  valid_21628398 = validateParameter(valid_21628398, JString, required = false,
                                   default = newJString("CREATE_PENDING"))
  if valid_21628398 != nil:
    section.add "otaUpdateStatus", valid_21628398
  var valid_21628399 = query.getOrDefault("maxResults")
  valid_21628399 = validateParameter(valid_21628399, JInt, required = false,
                                   default = nil)
  if valid_21628399 != nil:
    section.add "maxResults", valid_21628399
  var valid_21628400 = query.getOrDefault("nextToken")
  valid_21628400 = validateParameter(valid_21628400, JString, required = false,
                                   default = nil)
  if valid_21628400 != nil:
    section.add "nextToken", valid_21628400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628401 = header.getOrDefault("X-Amz-Date")
  valid_21628401 = validateParameter(valid_21628401, JString, required = false,
                                   default = nil)
  if valid_21628401 != nil:
    section.add "X-Amz-Date", valid_21628401
  var valid_21628402 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628402 = validateParameter(valid_21628402, JString, required = false,
                                   default = nil)
  if valid_21628402 != nil:
    section.add "X-Amz-Security-Token", valid_21628402
  var valid_21628403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628403 = validateParameter(valid_21628403, JString, required = false,
                                   default = nil)
  if valid_21628403 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628403
  var valid_21628404 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628404 = validateParameter(valid_21628404, JString, required = false,
                                   default = nil)
  if valid_21628404 != nil:
    section.add "X-Amz-Algorithm", valid_21628404
  var valid_21628405 = header.getOrDefault("X-Amz-Signature")
  valid_21628405 = validateParameter(valid_21628405, JString, required = false,
                                   default = nil)
  if valid_21628405 != nil:
    section.add "X-Amz-Signature", valid_21628405
  var valid_21628406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628406 = validateParameter(valid_21628406, JString, required = false,
                                   default = nil)
  if valid_21628406 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628406
  var valid_21628407 = header.getOrDefault("X-Amz-Credential")
  valid_21628407 = validateParameter(valid_21628407, JString, required = false,
                                   default = nil)
  if valid_21628407 != nil:
    section.add "X-Amz-Credential", valid_21628407
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628408: Call_ListOTAUpdates_21628395; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists OTA updates.
  ## 
  let valid = call_21628408.validator(path, query, header, formData, body, _)
  let scheme = call_21628408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628408.makeUrl(scheme.get, call_21628408.host, call_21628408.base,
                               call_21628408.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628408, uri, valid, _)

proc call*(call_21628409: Call_ListOTAUpdates_21628395;
          otaUpdateStatus: string = "CREATE_PENDING"; maxResults: int = 0;
          nextToken: string = ""): Recallable =
  ## listOTAUpdates
  ## Lists OTA updates.
  ##   otaUpdateStatus: string
  ##                  : The OTA update job status.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : A token used to retrieve the next set of results.
  var query_21628410 = newJObject()
  add(query_21628410, "otaUpdateStatus", newJString(otaUpdateStatus))
  add(query_21628410, "maxResults", newJInt(maxResults))
  add(query_21628410, "nextToken", newJString(nextToken))
  result = call_21628409.call(nil, query_21628410, nil, nil, nil)

var listOTAUpdates* = Call_ListOTAUpdates_21628395(name: "listOTAUpdates",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/otaUpdates",
    validator: validate_ListOTAUpdates_21628396, base: "/",
    makeUrl: url_ListOTAUpdates_21628397, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListOutgoingCertificates_21628411 = ref object of OpenApiRestCall_21625435
proc url_ListOutgoingCertificates_21628413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListOutgoingCertificates_21628412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists certificates that are being transferred but not yet accepted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  ##   isAscendingOrder: JBool
  ##                   : Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
  section = newJObject()
  var valid_21628414 = query.getOrDefault("marker")
  valid_21628414 = validateParameter(valid_21628414, JString, required = false,
                                   default = nil)
  if valid_21628414 != nil:
    section.add "marker", valid_21628414
  var valid_21628415 = query.getOrDefault("pageSize")
  valid_21628415 = validateParameter(valid_21628415, JInt, required = false,
                                   default = nil)
  if valid_21628415 != nil:
    section.add "pageSize", valid_21628415
  var valid_21628416 = query.getOrDefault("isAscendingOrder")
  valid_21628416 = validateParameter(valid_21628416, JBool, required = false,
                                   default = nil)
  if valid_21628416 != nil:
    section.add "isAscendingOrder", valid_21628416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628417 = header.getOrDefault("X-Amz-Date")
  valid_21628417 = validateParameter(valid_21628417, JString, required = false,
                                   default = nil)
  if valid_21628417 != nil:
    section.add "X-Amz-Date", valid_21628417
  var valid_21628418 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628418 = validateParameter(valid_21628418, JString, required = false,
                                   default = nil)
  if valid_21628418 != nil:
    section.add "X-Amz-Security-Token", valid_21628418
  var valid_21628419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628419 = validateParameter(valid_21628419, JString, required = false,
                                   default = nil)
  if valid_21628419 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628419
  var valid_21628420 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628420 = validateParameter(valid_21628420, JString, required = false,
                                   default = nil)
  if valid_21628420 != nil:
    section.add "X-Amz-Algorithm", valid_21628420
  var valid_21628421 = header.getOrDefault("X-Amz-Signature")
  valid_21628421 = validateParameter(valid_21628421, JString, required = false,
                                   default = nil)
  if valid_21628421 != nil:
    section.add "X-Amz-Signature", valid_21628421
  var valid_21628422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628422 = validateParameter(valid_21628422, JString, required = false,
                                   default = nil)
  if valid_21628422 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628422
  var valid_21628423 = header.getOrDefault("X-Amz-Credential")
  valid_21628423 = validateParameter(valid_21628423, JString, required = false,
                                   default = nil)
  if valid_21628423 != nil:
    section.add "X-Amz-Credential", valid_21628423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628424: Call_ListOutgoingCertificates_21628411;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists certificates that are being transferred but not yet accepted.
  ## 
  let valid = call_21628424.validator(path, query, header, formData, body, _)
  let scheme = call_21628424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628424.makeUrl(scheme.get, call_21628424.host, call_21628424.base,
                               call_21628424.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628424, uri, valid, _)

proc call*(call_21628425: Call_ListOutgoingCertificates_21628411;
          marker: string = ""; pageSize: int = 0; isAscendingOrder: bool = false): Recallable =
  ## listOutgoingCertificates
  ## Lists certificates that are being transferred but not yet accepted.
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  ##   isAscendingOrder: bool
  ##                   : Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
  var query_21628426 = newJObject()
  add(query_21628426, "marker", newJString(marker))
  add(query_21628426, "pageSize", newJInt(pageSize))
  add(query_21628426, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628425.call(nil, query_21628426, nil, nil, nil)

var listOutgoingCertificates* = Call_ListOutgoingCertificates_21628411(
    name: "listOutgoingCertificates", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/certificates-out-going",
    validator: validate_ListOutgoingCertificates_21628412, base: "/",
    makeUrl: url_ListOutgoingCertificates_21628413,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPolicies_21628427 = ref object of OpenApiRestCall_21625435
proc url_ListPolicies_21628429(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPolicies_21628428(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Lists your policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  ##   isAscendingOrder: JBool
  ##                   : Specifies the order for results. If true, the results are returned in ascending creation order.
  section = newJObject()
  var valid_21628430 = query.getOrDefault("marker")
  valid_21628430 = validateParameter(valid_21628430, JString, required = false,
                                   default = nil)
  if valid_21628430 != nil:
    section.add "marker", valid_21628430
  var valid_21628431 = query.getOrDefault("pageSize")
  valid_21628431 = validateParameter(valid_21628431, JInt, required = false,
                                   default = nil)
  if valid_21628431 != nil:
    section.add "pageSize", valid_21628431
  var valid_21628432 = query.getOrDefault("isAscendingOrder")
  valid_21628432 = validateParameter(valid_21628432, JBool, required = false,
                                   default = nil)
  if valid_21628432 != nil:
    section.add "isAscendingOrder", valid_21628432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628433 = header.getOrDefault("X-Amz-Date")
  valid_21628433 = validateParameter(valid_21628433, JString, required = false,
                                   default = nil)
  if valid_21628433 != nil:
    section.add "X-Amz-Date", valid_21628433
  var valid_21628434 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628434 = validateParameter(valid_21628434, JString, required = false,
                                   default = nil)
  if valid_21628434 != nil:
    section.add "X-Amz-Security-Token", valid_21628434
  var valid_21628435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628435 = validateParameter(valid_21628435, JString, required = false,
                                   default = nil)
  if valid_21628435 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628435
  var valid_21628436 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628436 = validateParameter(valid_21628436, JString, required = false,
                                   default = nil)
  if valid_21628436 != nil:
    section.add "X-Amz-Algorithm", valid_21628436
  var valid_21628437 = header.getOrDefault("X-Amz-Signature")
  valid_21628437 = validateParameter(valid_21628437, JString, required = false,
                                   default = nil)
  if valid_21628437 != nil:
    section.add "X-Amz-Signature", valid_21628437
  var valid_21628438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628438 = validateParameter(valid_21628438, JString, required = false,
                                   default = nil)
  if valid_21628438 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628438
  var valid_21628439 = header.getOrDefault("X-Amz-Credential")
  valid_21628439 = validateParameter(valid_21628439, JString, required = false,
                                   default = nil)
  if valid_21628439 != nil:
    section.add "X-Amz-Credential", valid_21628439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628440: Call_ListPolicies_21628427; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists your policies.
  ## 
  let valid = call_21628440.validator(path, query, header, formData, body, _)
  let scheme = call_21628440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628440.makeUrl(scheme.get, call_21628440.host, call_21628440.base,
                               call_21628440.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628440, uri, valid, _)

proc call*(call_21628441: Call_ListPolicies_21628427; marker: string = "";
          pageSize: int = 0; isAscendingOrder: bool = false): Recallable =
  ## listPolicies
  ## Lists your policies.
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  ##   isAscendingOrder: bool
  ##                   : Specifies the order for results. If true, the results are returned in ascending creation order.
  var query_21628442 = newJObject()
  add(query_21628442, "marker", newJString(marker))
  add(query_21628442, "pageSize", newJInt(pageSize))
  add(query_21628442, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628441.call(nil, query_21628442, nil, nil, nil)

var listPolicies* = Call_ListPolicies_21628427(name: "listPolicies",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/policies",
    validator: validate_ListPolicies_21628428, base: "/", makeUrl: url_ListPolicies_21628429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPolicyPrincipals_21628443 = ref object of OpenApiRestCall_21625435
proc url_ListPolicyPrincipals_21628445(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPolicyPrincipals_21628444(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  ##   isAscendingOrder: JBool
  ##                   : Specifies the order for results. If true, the results are returned in ascending creation order.
  section = newJObject()
  var valid_21628446 = query.getOrDefault("marker")
  valid_21628446 = validateParameter(valid_21628446, JString, required = false,
                                   default = nil)
  if valid_21628446 != nil:
    section.add "marker", valid_21628446
  var valid_21628447 = query.getOrDefault("pageSize")
  valid_21628447 = validateParameter(valid_21628447, JInt, required = false,
                                   default = nil)
  if valid_21628447 != nil:
    section.add "pageSize", valid_21628447
  var valid_21628448 = query.getOrDefault("isAscendingOrder")
  valid_21628448 = validateParameter(valid_21628448, JBool, required = false,
                                   default = nil)
  if valid_21628448 != nil:
    section.add "isAscendingOrder", valid_21628448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   x-amzn-iot-policy: JString (required)
  ##                    : The policy name.
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628449 = header.getOrDefault("X-Amz-Date")
  valid_21628449 = validateParameter(valid_21628449, JString, required = false,
                                   default = nil)
  if valid_21628449 != nil:
    section.add "X-Amz-Date", valid_21628449
  var valid_21628450 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628450 = validateParameter(valid_21628450, JString, required = false,
                                   default = nil)
  if valid_21628450 != nil:
    section.add "X-Amz-Security-Token", valid_21628450
  var valid_21628451 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628451 = validateParameter(valid_21628451, JString, required = false,
                                   default = nil)
  if valid_21628451 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628451
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-policy` field"
  var valid_21628452 = header.getOrDefault("x-amzn-iot-policy")
  valid_21628452 = validateParameter(valid_21628452, JString, required = true,
                                   default = nil)
  if valid_21628452 != nil:
    section.add "x-amzn-iot-policy", valid_21628452
  var valid_21628453 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628453 = validateParameter(valid_21628453, JString, required = false,
                                   default = nil)
  if valid_21628453 != nil:
    section.add "X-Amz-Algorithm", valid_21628453
  var valid_21628454 = header.getOrDefault("X-Amz-Signature")
  valid_21628454 = validateParameter(valid_21628454, JString, required = false,
                                   default = nil)
  if valid_21628454 != nil:
    section.add "X-Amz-Signature", valid_21628454
  var valid_21628455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628455 = validateParameter(valid_21628455, JString, required = false,
                                   default = nil)
  if valid_21628455 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628455
  var valid_21628456 = header.getOrDefault("X-Amz-Credential")
  valid_21628456 = validateParameter(valid_21628456, JString, required = false,
                                   default = nil)
  if valid_21628456 != nil:
    section.add "X-Amz-Credential", valid_21628456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628457: Call_ListPolicyPrincipals_21628443; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
  ## 
  let valid = call_21628457.validator(path, query, header, formData, body, _)
  let scheme = call_21628457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628457.makeUrl(scheme.get, call_21628457.host, call_21628457.base,
                               call_21628457.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628457, uri, valid, _)

proc call*(call_21628458: Call_ListPolicyPrincipals_21628443; marker: string = "";
          pageSize: int = 0; isAscendingOrder: bool = false): Recallable =
  ## listPolicyPrincipals
  ## <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  ##   isAscendingOrder: bool
  ##                   : Specifies the order for results. If true, the results are returned in ascending creation order.
  var query_21628459 = newJObject()
  add(query_21628459, "marker", newJString(marker))
  add(query_21628459, "pageSize", newJInt(pageSize))
  add(query_21628459, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628458.call(nil, query_21628459, nil, nil, nil)

var listPolicyPrincipals* = Call_ListPolicyPrincipals_21628443(
    name: "listPolicyPrincipals", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/policy-principals#x-amzn-iot-policy",
    validator: validate_ListPolicyPrincipals_21628444, base: "/",
    makeUrl: url_ListPolicyPrincipals_21628445,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPrincipalPolicies_21628460 = ref object of OpenApiRestCall_21625435
proc url_ListPrincipalPolicies_21628462(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPrincipalPolicies_21628461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : The marker for the next set of results.
  ##   pageSize: JInt
  ##           : The result page size.
  ##   isAscendingOrder: JBool
  ##                   : Specifies the order for results. If true, results are returned in ascending creation order.
  section = newJObject()
  var valid_21628463 = query.getOrDefault("marker")
  valid_21628463 = validateParameter(valid_21628463, JString, required = false,
                                   default = nil)
  if valid_21628463 != nil:
    section.add "marker", valid_21628463
  var valid_21628464 = query.getOrDefault("pageSize")
  valid_21628464 = validateParameter(valid_21628464, JInt, required = false,
                                   default = nil)
  if valid_21628464 != nil:
    section.add "pageSize", valid_21628464
  var valid_21628465 = query.getOrDefault("isAscendingOrder")
  valid_21628465 = validateParameter(valid_21628465, JBool, required = false,
                                   default = nil)
  if valid_21628465 != nil:
    section.add "isAscendingOrder", valid_21628465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amzn-iot-principal: JString (required)
  ##                       : The principal.
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628466 = header.getOrDefault("X-Amz-Date")
  valid_21628466 = validateParameter(valid_21628466, JString, required = false,
                                   default = nil)
  if valid_21628466 != nil:
    section.add "X-Amz-Date", valid_21628466
  var valid_21628467 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628467 = validateParameter(valid_21628467, JString, required = false,
                                   default = nil)
  if valid_21628467 != nil:
    section.add "X-Amz-Security-Token", valid_21628467
  var valid_21628468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628468 = validateParameter(valid_21628468, JString, required = false,
                                   default = nil)
  if valid_21628468 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628468
  var valid_21628469 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628469 = validateParameter(valid_21628469, JString, required = false,
                                   default = nil)
  if valid_21628469 != nil:
    section.add "X-Amz-Algorithm", valid_21628469
  var valid_21628470 = header.getOrDefault("X-Amz-Signature")
  valid_21628470 = validateParameter(valid_21628470, JString, required = false,
                                   default = nil)
  if valid_21628470 != nil:
    section.add "X-Amz-Signature", valid_21628470
  var valid_21628471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628471 = validateParameter(valid_21628471, JString, required = false,
                                   default = nil)
  if valid_21628471 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628471
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-principal` field"
  var valid_21628472 = header.getOrDefault("x-amzn-iot-principal")
  valid_21628472 = validateParameter(valid_21628472, JString, required = true,
                                   default = nil)
  if valid_21628472 != nil:
    section.add "x-amzn-iot-principal", valid_21628472
  var valid_21628473 = header.getOrDefault("X-Amz-Credential")
  valid_21628473 = validateParameter(valid_21628473, JString, required = false,
                                   default = nil)
  if valid_21628473 != nil:
    section.add "X-Amz-Credential", valid_21628473
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628474: Call_ListPrincipalPolicies_21628460;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
  ## 
  let valid = call_21628474.validator(path, query, header, formData, body, _)
  let scheme = call_21628474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628474.makeUrl(scheme.get, call_21628474.host, call_21628474.base,
                               call_21628474.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628474, uri, valid, _)

proc call*(call_21628475: Call_ListPrincipalPolicies_21628460; marker: string = "";
          pageSize: int = 0; isAscendingOrder: bool = false): Recallable =
  ## listPrincipalPolicies
  ## <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
  ##   marker: string
  ##         : The marker for the next set of results.
  ##   pageSize: int
  ##           : The result page size.
  ##   isAscendingOrder: bool
  ##                   : Specifies the order for results. If true, results are returned in ascending creation order.
  var query_21628476 = newJObject()
  add(query_21628476, "marker", newJString(marker))
  add(query_21628476, "pageSize", newJInt(pageSize))
  add(query_21628476, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628475.call(nil, query_21628476, nil, nil, nil)

var listPrincipalPolicies* = Call_ListPrincipalPolicies_21628460(
    name: "listPrincipalPolicies", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/principal-policies#x-amzn-iot-principal",
    validator: validate_ListPrincipalPolicies_21628461, base: "/",
    makeUrl: url_ListPrincipalPolicies_21628462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPrincipalThings_21628477 = ref object of OpenApiRestCall_21625435
proc url_ListPrincipalThings_21628479(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPrincipalThings_21628478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return in this operation.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  section = newJObject()
  var valid_21628480 = query.getOrDefault("maxResults")
  valid_21628480 = validateParameter(valid_21628480, JInt, required = false,
                                   default = nil)
  if valid_21628480 != nil:
    section.add "maxResults", valid_21628480
  var valid_21628481 = query.getOrDefault("nextToken")
  valid_21628481 = validateParameter(valid_21628481, JString, required = false,
                                   default = nil)
  if valid_21628481 != nil:
    section.add "nextToken", valid_21628481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   x-amzn-principal: JString (required)
  ##                   : The principal.
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628482 = header.getOrDefault("X-Amz-Date")
  valid_21628482 = validateParameter(valid_21628482, JString, required = false,
                                   default = nil)
  if valid_21628482 != nil:
    section.add "X-Amz-Date", valid_21628482
  var valid_21628483 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628483 = validateParameter(valid_21628483, JString, required = false,
                                   default = nil)
  if valid_21628483 != nil:
    section.add "X-Amz-Security-Token", valid_21628483
  var valid_21628484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628484 = validateParameter(valid_21628484, JString, required = false,
                                   default = nil)
  if valid_21628484 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628484
  var valid_21628485 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628485 = validateParameter(valid_21628485, JString, required = false,
                                   default = nil)
  if valid_21628485 != nil:
    section.add "X-Amz-Algorithm", valid_21628485
  assert header != nil,
        "header argument is necessary due to required `x-amzn-principal` field"
  var valid_21628486 = header.getOrDefault("x-amzn-principal")
  valid_21628486 = validateParameter(valid_21628486, JString, required = true,
                                   default = nil)
  if valid_21628486 != nil:
    section.add "x-amzn-principal", valid_21628486
  var valid_21628487 = header.getOrDefault("X-Amz-Signature")
  valid_21628487 = validateParameter(valid_21628487, JString, required = false,
                                   default = nil)
  if valid_21628487 != nil:
    section.add "X-Amz-Signature", valid_21628487
  var valid_21628488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628488 = validateParameter(valid_21628488, JString, required = false,
                                   default = nil)
  if valid_21628488 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628488
  var valid_21628489 = header.getOrDefault("X-Amz-Credential")
  valid_21628489 = validateParameter(valid_21628489, JString, required = false,
                                   default = nil)
  if valid_21628489 != nil:
    section.add "X-Amz-Credential", valid_21628489
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628490: Call_ListPrincipalThings_21628477; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. 
  ## 
  let valid = call_21628490.validator(path, query, header, formData, body, _)
  let scheme = call_21628490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628490.makeUrl(scheme.get, call_21628490.host, call_21628490.base,
                               call_21628490.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628490, uri, valid, _)

proc call*(call_21628491: Call_ListPrincipalThings_21628477; maxResults: int = 0;
          nextToken: string = ""): Recallable =
  ## listPrincipalThings
  ## Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. 
  ##   maxResults: int
  ##             : The maximum number of results to return in this operation.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  var query_21628492 = newJObject()
  add(query_21628492, "maxResults", newJInt(maxResults))
  add(query_21628492, "nextToken", newJString(nextToken))
  result = call_21628491.call(nil, query_21628492, nil, nil, nil)

var listPrincipalThings* = Call_ListPrincipalThings_21628477(
    name: "listPrincipalThings", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/principals/things#x-amzn-principal",
    validator: validate_ListPrincipalThings_21628478, base: "/",
    makeUrl: url_ListPrincipalThings_21628479,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListRoleAliases_21628493 = ref object of OpenApiRestCall_21625435
proc url_ListRoleAliases_21628495(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListRoleAliases_21628494(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the role aliases registered in your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : A marker used to get the next set of results.
  ##   pageSize: JInt
  ##           : The maximum number of results to return at one time.
  ##   isAscendingOrder: JBool
  ##                   : Return the list of role aliases in ascending alphabetical order.
  section = newJObject()
  var valid_21628496 = query.getOrDefault("marker")
  valid_21628496 = validateParameter(valid_21628496, JString, required = false,
                                   default = nil)
  if valid_21628496 != nil:
    section.add "marker", valid_21628496
  var valid_21628497 = query.getOrDefault("pageSize")
  valid_21628497 = validateParameter(valid_21628497, JInt, required = false,
                                   default = nil)
  if valid_21628497 != nil:
    section.add "pageSize", valid_21628497
  var valid_21628498 = query.getOrDefault("isAscendingOrder")
  valid_21628498 = validateParameter(valid_21628498, JBool, required = false,
                                   default = nil)
  if valid_21628498 != nil:
    section.add "isAscendingOrder", valid_21628498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628499 = header.getOrDefault("X-Amz-Date")
  valid_21628499 = validateParameter(valid_21628499, JString, required = false,
                                   default = nil)
  if valid_21628499 != nil:
    section.add "X-Amz-Date", valid_21628499
  var valid_21628500 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628500 = validateParameter(valid_21628500, JString, required = false,
                                   default = nil)
  if valid_21628500 != nil:
    section.add "X-Amz-Security-Token", valid_21628500
  var valid_21628501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628501 = validateParameter(valid_21628501, JString, required = false,
                                   default = nil)
  if valid_21628501 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628501
  var valid_21628502 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628502 = validateParameter(valid_21628502, JString, required = false,
                                   default = nil)
  if valid_21628502 != nil:
    section.add "X-Amz-Algorithm", valid_21628502
  var valid_21628503 = header.getOrDefault("X-Amz-Signature")
  valid_21628503 = validateParameter(valid_21628503, JString, required = false,
                                   default = nil)
  if valid_21628503 != nil:
    section.add "X-Amz-Signature", valid_21628503
  var valid_21628504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628504 = validateParameter(valid_21628504, JString, required = false,
                                   default = nil)
  if valid_21628504 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628504
  var valid_21628505 = header.getOrDefault("X-Amz-Credential")
  valid_21628505 = validateParameter(valid_21628505, JString, required = false,
                                   default = nil)
  if valid_21628505 != nil:
    section.add "X-Amz-Credential", valid_21628505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628506: Call_ListRoleAliases_21628493; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the role aliases registered in your account.
  ## 
  let valid = call_21628506.validator(path, query, header, formData, body, _)
  let scheme = call_21628506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628506.makeUrl(scheme.get, call_21628506.host, call_21628506.base,
                               call_21628506.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628506, uri, valid, _)

proc call*(call_21628507: Call_ListRoleAliases_21628493; marker: string = "";
          pageSize: int = 0; isAscendingOrder: bool = false): Recallable =
  ## listRoleAliases
  ## Lists the role aliases registered in your account.
  ##   marker: string
  ##         : A marker used to get the next set of results.
  ##   pageSize: int
  ##           : The maximum number of results to return at one time.
  ##   isAscendingOrder: bool
  ##                   : Return the list of role aliases in ascending alphabetical order.
  var query_21628508 = newJObject()
  add(query_21628508, "marker", newJString(marker))
  add(query_21628508, "pageSize", newJInt(pageSize))
  add(query_21628508, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628507.call(nil, query_21628508, nil, nil, nil)

var listRoleAliases* = Call_ListRoleAliases_21628493(name: "listRoleAliases",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/role-aliases",
    validator: validate_ListRoleAliases_21628494, base: "/",
    makeUrl: url_ListRoleAliases_21628495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListScheduledAudits_21628509 = ref object of OpenApiRestCall_21625435
proc url_ListScheduledAudits_21628511(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListScheduledAudits_21628510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists all of your scheduled audits.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  section = newJObject()
  var valid_21628512 = query.getOrDefault("maxResults")
  valid_21628512 = validateParameter(valid_21628512, JInt, required = false,
                                   default = nil)
  if valid_21628512 != nil:
    section.add "maxResults", valid_21628512
  var valid_21628513 = query.getOrDefault("nextToken")
  valid_21628513 = validateParameter(valid_21628513, JString, required = false,
                                   default = nil)
  if valid_21628513 != nil:
    section.add "nextToken", valid_21628513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628514 = header.getOrDefault("X-Amz-Date")
  valid_21628514 = validateParameter(valid_21628514, JString, required = false,
                                   default = nil)
  if valid_21628514 != nil:
    section.add "X-Amz-Date", valid_21628514
  var valid_21628515 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628515 = validateParameter(valid_21628515, JString, required = false,
                                   default = nil)
  if valid_21628515 != nil:
    section.add "X-Amz-Security-Token", valid_21628515
  var valid_21628516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628516 = validateParameter(valid_21628516, JString, required = false,
                                   default = nil)
  if valid_21628516 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628516
  var valid_21628517 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628517 = validateParameter(valid_21628517, JString, required = false,
                                   default = nil)
  if valid_21628517 != nil:
    section.add "X-Amz-Algorithm", valid_21628517
  var valid_21628518 = header.getOrDefault("X-Amz-Signature")
  valid_21628518 = validateParameter(valid_21628518, JString, required = false,
                                   default = nil)
  if valid_21628518 != nil:
    section.add "X-Amz-Signature", valid_21628518
  var valid_21628519 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628519 = validateParameter(valid_21628519, JString, required = false,
                                   default = nil)
  if valid_21628519 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628519
  var valid_21628520 = header.getOrDefault("X-Amz-Credential")
  valid_21628520 = validateParameter(valid_21628520, JString, required = false,
                                   default = nil)
  if valid_21628520 != nil:
    section.add "X-Amz-Credential", valid_21628520
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628521: Call_ListScheduledAudits_21628509; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all of your scheduled audits.
  ## 
  let valid = call_21628521.validator(path, query, header, formData, body, _)
  let scheme = call_21628521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628521.makeUrl(scheme.get, call_21628521.host, call_21628521.base,
                               call_21628521.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628521, uri, valid, _)

proc call*(call_21628522: Call_ListScheduledAudits_21628509; maxResults: int = 0;
          nextToken: string = ""): Recallable =
  ## listScheduledAudits
  ## Lists all of your scheduled audits.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time. The default is 25.
  ##   nextToken: string
  ##            : The token for the next set of results.
  var query_21628523 = newJObject()
  add(query_21628523, "maxResults", newJInt(maxResults))
  add(query_21628523, "nextToken", newJString(nextToken))
  result = call_21628522.call(nil, query_21628523, nil, nil, nil)

var listScheduledAudits* = Call_ListScheduledAudits_21628509(
    name: "listScheduledAudits", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/scheduledaudits",
    validator: validate_ListScheduledAudits_21628510, base: "/",
    makeUrl: url_ListScheduledAudits_21628511,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListSecurityProfiles_21628524 = ref object of OpenApiRestCall_21625435
proc url_ListSecurityProfiles_21628526(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListSecurityProfiles_21628525(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  section = newJObject()
  var valid_21628527 = query.getOrDefault("maxResults")
  valid_21628527 = validateParameter(valid_21628527, JInt, required = false,
                                   default = nil)
  if valid_21628527 != nil:
    section.add "maxResults", valid_21628527
  var valid_21628528 = query.getOrDefault("nextToken")
  valid_21628528 = validateParameter(valid_21628528, JString, required = false,
                                   default = nil)
  if valid_21628528 != nil:
    section.add "nextToken", valid_21628528
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628529 = header.getOrDefault("X-Amz-Date")
  valid_21628529 = validateParameter(valid_21628529, JString, required = false,
                                   default = nil)
  if valid_21628529 != nil:
    section.add "X-Amz-Date", valid_21628529
  var valid_21628530 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628530 = validateParameter(valid_21628530, JString, required = false,
                                   default = nil)
  if valid_21628530 != nil:
    section.add "X-Amz-Security-Token", valid_21628530
  var valid_21628531 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628531 = validateParameter(valid_21628531, JString, required = false,
                                   default = nil)
  if valid_21628531 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628531
  var valid_21628532 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628532 = validateParameter(valid_21628532, JString, required = false,
                                   default = nil)
  if valid_21628532 != nil:
    section.add "X-Amz-Algorithm", valid_21628532
  var valid_21628533 = header.getOrDefault("X-Amz-Signature")
  valid_21628533 = validateParameter(valid_21628533, JString, required = false,
                                   default = nil)
  if valid_21628533 != nil:
    section.add "X-Amz-Signature", valid_21628533
  var valid_21628534 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628534 = validateParameter(valid_21628534, JString, required = false,
                                   default = nil)
  if valid_21628534 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628534
  var valid_21628535 = header.getOrDefault("X-Amz-Credential")
  valid_21628535 = validateParameter(valid_21628535, JString, required = false,
                                   default = nil)
  if valid_21628535 != nil:
    section.add "X-Amz-Credential", valid_21628535
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628536: Call_ListSecurityProfiles_21628524; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.
  ## 
  let valid = call_21628536.validator(path, query, header, formData, body, _)
  let scheme = call_21628536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628536.makeUrl(scheme.get, call_21628536.host, call_21628536.base,
                               call_21628536.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628536, uri, valid, _)

proc call*(call_21628537: Call_ListSecurityProfiles_21628524; maxResults: int = 0;
          nextToken: string = ""): Recallable =
  ## listSecurityProfiles
  ## Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token for the next set of results.
  var query_21628538 = newJObject()
  add(query_21628538, "maxResults", newJInt(maxResults))
  add(query_21628538, "nextToken", newJString(nextToken))
  result = call_21628537.call(nil, query_21628538, nil, nil, nil)

var listSecurityProfiles* = Call_ListSecurityProfiles_21628524(
    name: "listSecurityProfiles", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/security-profiles",
    validator: validate_ListSecurityProfiles_21628525, base: "/",
    makeUrl: url_ListSecurityProfiles_21628526,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListSecurityProfilesForTarget_21628539 = ref object of OpenApiRestCall_21625435
proc url_ListSecurityProfilesForTarget_21628541(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListSecurityProfilesForTarget_21628540(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the Device Defender security profiles attached to a target (thing group).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  ##   securityProfileTargetArn: JString (required)
  ##                           : The ARN of the target (thing group) whose attached security profiles you want to get.
  ##   recursive: JBool
  ##            : If true, return child groups too.
  section = newJObject()
  var valid_21628542 = query.getOrDefault("maxResults")
  valid_21628542 = validateParameter(valid_21628542, JInt, required = false,
                                   default = nil)
  if valid_21628542 != nil:
    section.add "maxResults", valid_21628542
  var valid_21628543 = query.getOrDefault("nextToken")
  valid_21628543 = validateParameter(valid_21628543, JString, required = false,
                                   default = nil)
  if valid_21628543 != nil:
    section.add "nextToken", valid_21628543
  assert query != nil, "query argument is necessary due to required `securityProfileTargetArn` field"
  var valid_21628544 = query.getOrDefault("securityProfileTargetArn")
  valid_21628544 = validateParameter(valid_21628544, JString, required = true,
                                   default = nil)
  if valid_21628544 != nil:
    section.add "securityProfileTargetArn", valid_21628544
  var valid_21628545 = query.getOrDefault("recursive")
  valid_21628545 = validateParameter(valid_21628545, JBool, required = false,
                                   default = nil)
  if valid_21628545 != nil:
    section.add "recursive", valid_21628545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628546 = header.getOrDefault("X-Amz-Date")
  valid_21628546 = validateParameter(valid_21628546, JString, required = false,
                                   default = nil)
  if valid_21628546 != nil:
    section.add "X-Amz-Date", valid_21628546
  var valid_21628547 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628547 = validateParameter(valid_21628547, JString, required = false,
                                   default = nil)
  if valid_21628547 != nil:
    section.add "X-Amz-Security-Token", valid_21628547
  var valid_21628548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628548 = validateParameter(valid_21628548, JString, required = false,
                                   default = nil)
  if valid_21628548 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628548
  var valid_21628549 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628549 = validateParameter(valid_21628549, JString, required = false,
                                   default = nil)
  if valid_21628549 != nil:
    section.add "X-Amz-Algorithm", valid_21628549
  var valid_21628550 = header.getOrDefault("X-Amz-Signature")
  valid_21628550 = validateParameter(valid_21628550, JString, required = false,
                                   default = nil)
  if valid_21628550 != nil:
    section.add "X-Amz-Signature", valid_21628550
  var valid_21628551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628551 = validateParameter(valid_21628551, JString, required = false,
                                   default = nil)
  if valid_21628551 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628551
  var valid_21628552 = header.getOrDefault("X-Amz-Credential")
  valid_21628552 = validateParameter(valid_21628552, JString, required = false,
                                   default = nil)
  if valid_21628552 != nil:
    section.add "X-Amz-Credential", valid_21628552
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628553: Call_ListSecurityProfilesForTarget_21628539;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender security profiles attached to a target (thing group).
  ## 
  let valid = call_21628553.validator(path, query, header, formData, body, _)
  let scheme = call_21628553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628553.makeUrl(scheme.get, call_21628553.host, call_21628553.base,
                               call_21628553.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628553, uri, valid, _)

proc call*(call_21628554: Call_ListSecurityProfilesForTarget_21628539;
          securityProfileTargetArn: string; maxResults: int = 0;
          nextToken: string = ""; recursive: bool = false): Recallable =
  ## listSecurityProfilesForTarget
  ## Lists the Device Defender security profiles attached to a target (thing group).
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token for the next set of results.
  ##   securityProfileTargetArn: string (required)
  ##                           : The ARN of the target (thing group) whose attached security profiles you want to get.
  ##   recursive: bool
  ##            : If true, return child groups too.
  var query_21628555 = newJObject()
  add(query_21628555, "maxResults", newJInt(maxResults))
  add(query_21628555, "nextToken", newJString(nextToken))
  add(query_21628555, "securityProfileTargetArn",
      newJString(securityProfileTargetArn))
  add(query_21628555, "recursive", newJBool(recursive))
  result = call_21628554.call(nil, query_21628555, nil, nil, nil)

var listSecurityProfilesForTarget* = Call_ListSecurityProfilesForTarget_21628539(
    name: "listSecurityProfilesForTarget", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/security-profiles-for-target#securityProfileTargetArn",
    validator: validate_ListSecurityProfilesForTarget_21628540, base: "/",
    makeUrl: url_ListSecurityProfilesForTarget_21628541,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListStreams_21628556 = ref object of OpenApiRestCall_21625435
proc url_ListStreams_21628558(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListStreams_21628557(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists all of the streams in your AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at a time.
  ##   nextToken: JString
  ##            : A token used to get the next set of results.
  ##   isAscendingOrder: JBool
  ##                   : Set to true to return the list of streams in ascending order.
  section = newJObject()
  var valid_21628559 = query.getOrDefault("maxResults")
  valid_21628559 = validateParameter(valid_21628559, JInt, required = false,
                                   default = nil)
  if valid_21628559 != nil:
    section.add "maxResults", valid_21628559
  var valid_21628560 = query.getOrDefault("nextToken")
  valid_21628560 = validateParameter(valid_21628560, JString, required = false,
                                   default = nil)
  if valid_21628560 != nil:
    section.add "nextToken", valid_21628560
  var valid_21628561 = query.getOrDefault("isAscendingOrder")
  valid_21628561 = validateParameter(valid_21628561, JBool, required = false,
                                   default = nil)
  if valid_21628561 != nil:
    section.add "isAscendingOrder", valid_21628561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628562 = header.getOrDefault("X-Amz-Date")
  valid_21628562 = validateParameter(valid_21628562, JString, required = false,
                                   default = nil)
  if valid_21628562 != nil:
    section.add "X-Amz-Date", valid_21628562
  var valid_21628563 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628563 = validateParameter(valid_21628563, JString, required = false,
                                   default = nil)
  if valid_21628563 != nil:
    section.add "X-Amz-Security-Token", valid_21628563
  var valid_21628564 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628564 = validateParameter(valid_21628564, JString, required = false,
                                   default = nil)
  if valid_21628564 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628564
  var valid_21628565 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628565 = validateParameter(valid_21628565, JString, required = false,
                                   default = nil)
  if valid_21628565 != nil:
    section.add "X-Amz-Algorithm", valid_21628565
  var valid_21628566 = header.getOrDefault("X-Amz-Signature")
  valid_21628566 = validateParameter(valid_21628566, JString, required = false,
                                   default = nil)
  if valid_21628566 != nil:
    section.add "X-Amz-Signature", valid_21628566
  var valid_21628567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628567 = validateParameter(valid_21628567, JString, required = false,
                                   default = nil)
  if valid_21628567 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628567
  var valid_21628568 = header.getOrDefault("X-Amz-Credential")
  valid_21628568 = validateParameter(valid_21628568, JString, required = false,
                                   default = nil)
  if valid_21628568 != nil:
    section.add "X-Amz-Credential", valid_21628568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628569: Call_ListStreams_21628556; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all of the streams in your AWS account.
  ## 
  let valid = call_21628569.validator(path, query, header, formData, body, _)
  let scheme = call_21628569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628569.makeUrl(scheme.get, call_21628569.host, call_21628569.base,
                               call_21628569.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628569, uri, valid, _)

proc call*(call_21628570: Call_ListStreams_21628556; maxResults: int = 0;
          nextToken: string = ""; isAscendingOrder: bool = false): Recallable =
  ## listStreams
  ## Lists all of the streams in your AWS account.
  ##   maxResults: int
  ##             : The maximum number of results to return at a time.
  ##   nextToken: string
  ##            : A token used to get the next set of results.
  ##   isAscendingOrder: bool
  ##                   : Set to true to return the list of streams in ascending order.
  var query_21628571 = newJObject()
  add(query_21628571, "maxResults", newJInt(maxResults))
  add(query_21628571, "nextToken", newJString(nextToken))
  add(query_21628571, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_21628570.call(nil, query_21628571, nil, nil, nil)

var listStreams* = Call_ListStreams_21628556(name: "listStreams",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/streams",
    validator: validate_ListStreams_21628557, base: "/", makeUrl: url_ListStreams_21628558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTagsForResource_21628572 = ref object of OpenApiRestCall_21625435
proc url_ListTagsForResource_21628574(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListTagsForResource_21628573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the tags (metadata) you have assigned to the resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   resourceArn: JString (required)
  ##              : The ARN of the resource.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `resourceArn` field"
  var valid_21628575 = query.getOrDefault("resourceArn")
  valid_21628575 = validateParameter(valid_21628575, JString, required = true,
                                   default = nil)
  if valid_21628575 != nil:
    section.add "resourceArn", valid_21628575
  var valid_21628576 = query.getOrDefault("nextToken")
  valid_21628576 = validateParameter(valid_21628576, JString, required = false,
                                   default = nil)
  if valid_21628576 != nil:
    section.add "nextToken", valid_21628576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628577 = header.getOrDefault("X-Amz-Date")
  valid_21628577 = validateParameter(valid_21628577, JString, required = false,
                                   default = nil)
  if valid_21628577 != nil:
    section.add "X-Amz-Date", valid_21628577
  var valid_21628578 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628578 = validateParameter(valid_21628578, JString, required = false,
                                   default = nil)
  if valid_21628578 != nil:
    section.add "X-Amz-Security-Token", valid_21628578
  var valid_21628579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628579 = validateParameter(valid_21628579, JString, required = false,
                                   default = nil)
  if valid_21628579 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628579
  var valid_21628580 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628580 = validateParameter(valid_21628580, JString, required = false,
                                   default = nil)
  if valid_21628580 != nil:
    section.add "X-Amz-Algorithm", valid_21628580
  var valid_21628581 = header.getOrDefault("X-Amz-Signature")
  valid_21628581 = validateParameter(valid_21628581, JString, required = false,
                                   default = nil)
  if valid_21628581 != nil:
    section.add "X-Amz-Signature", valid_21628581
  var valid_21628582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628582 = validateParameter(valid_21628582, JString, required = false,
                                   default = nil)
  if valid_21628582 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628582
  var valid_21628583 = header.getOrDefault("X-Amz-Credential")
  valid_21628583 = validateParameter(valid_21628583, JString, required = false,
                                   default = nil)
  if valid_21628583 != nil:
    section.add "X-Amz-Credential", valid_21628583
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628584: Call_ListTagsForResource_21628572; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the tags (metadata) you have assigned to the resource.
  ## 
  let valid = call_21628584.validator(path, query, header, formData, body, _)
  let scheme = call_21628584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628584.makeUrl(scheme.get, call_21628584.host, call_21628584.base,
                               call_21628584.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628584, uri, valid, _)

proc call*(call_21628585: Call_ListTagsForResource_21628572; resourceArn: string;
          nextToken: string = ""): Recallable =
  ## listTagsForResource
  ## Lists the tags (metadata) you have assigned to the resource.
  ##   resourceArn: string (required)
  ##              : The ARN of the resource.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  var query_21628586 = newJObject()
  add(query_21628586, "resourceArn", newJString(resourceArn))
  add(query_21628586, "nextToken", newJString(nextToken))
  result = call_21628585.call(nil, query_21628586, nil, nil, nil)

var listTagsForResource* = Call_ListTagsForResource_21628572(
    name: "listTagsForResource", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/tags#resourceArn",
    validator: validate_ListTagsForResource_21628573, base: "/",
    makeUrl: url_ListTagsForResource_21628574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTargetsForPolicy_21628587 = ref object of OpenApiRestCall_21625435
proc url_ListTargetsForPolicy_21628589(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policy-targets/"),
               (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListTargetsForPolicy_21628588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List targets for the specified policy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
  ##             : The policy name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `policyName` field"
  var valid_21628590 = path.getOrDefault("policyName")
  valid_21628590 = validateParameter(valid_21628590, JString, required = true,
                                   default = nil)
  if valid_21628590 != nil:
    section.add "policyName", valid_21628590
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
  ##         : A marker used to get the next set of results.
  ##   pageSize: JInt
  ##           : The maximum number of results to return at one time.
  section = newJObject()
  var valid_21628591 = query.getOrDefault("marker")
  valid_21628591 = validateParameter(valid_21628591, JString, required = false,
                                   default = nil)
  if valid_21628591 != nil:
    section.add "marker", valid_21628591
  var valid_21628592 = query.getOrDefault("pageSize")
  valid_21628592 = validateParameter(valid_21628592, JInt, required = false,
                                   default = nil)
  if valid_21628592 != nil:
    section.add "pageSize", valid_21628592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628593 = header.getOrDefault("X-Amz-Date")
  valid_21628593 = validateParameter(valid_21628593, JString, required = false,
                                   default = nil)
  if valid_21628593 != nil:
    section.add "X-Amz-Date", valid_21628593
  var valid_21628594 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628594 = validateParameter(valid_21628594, JString, required = false,
                                   default = nil)
  if valid_21628594 != nil:
    section.add "X-Amz-Security-Token", valid_21628594
  var valid_21628595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628595 = validateParameter(valid_21628595, JString, required = false,
                                   default = nil)
  if valid_21628595 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628595
  var valid_21628596 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628596 = validateParameter(valid_21628596, JString, required = false,
                                   default = nil)
  if valid_21628596 != nil:
    section.add "X-Amz-Algorithm", valid_21628596
  var valid_21628597 = header.getOrDefault("X-Amz-Signature")
  valid_21628597 = validateParameter(valid_21628597, JString, required = false,
                                   default = nil)
  if valid_21628597 != nil:
    section.add "X-Amz-Signature", valid_21628597
  var valid_21628598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628598 = validateParameter(valid_21628598, JString, required = false,
                                   default = nil)
  if valid_21628598 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628598
  var valid_21628599 = header.getOrDefault("X-Amz-Credential")
  valid_21628599 = validateParameter(valid_21628599, JString, required = false,
                                   default = nil)
  if valid_21628599 != nil:
    section.add "X-Amz-Credential", valid_21628599
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628600: Call_ListTargetsForPolicy_21628587; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## List targets for the specified policy.
  ## 
  let valid = call_21628600.validator(path, query, header, formData, body, _)
  let scheme = call_21628600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628600.makeUrl(scheme.get, call_21628600.host, call_21628600.base,
                               call_21628600.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628600, uri, valid, _)

proc call*(call_21628601: Call_ListTargetsForPolicy_21628587; policyName: string;
          marker: string = ""; pageSize: int = 0): Recallable =
  ## listTargetsForPolicy
  ## List targets for the specified policy.
  ##   policyName: string (required)
  ##             : The policy name.
  ##   marker: string
  ##         : A marker used to get the next set of results.
  ##   pageSize: int
  ##           : The maximum number of results to return at one time.
  var path_21628602 = newJObject()
  var query_21628603 = newJObject()
  add(path_21628602, "policyName", newJString(policyName))
  add(query_21628603, "marker", newJString(marker))
  add(query_21628603, "pageSize", newJInt(pageSize))
  result = call_21628601.call(path_21628602, query_21628603, nil, nil, nil)

var listTargetsForPolicy* = Call_ListTargetsForPolicy_21628587(
    name: "listTargetsForPolicy", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/policy-targets/{policyName}",
    validator: validate_ListTargetsForPolicy_21628588, base: "/",
    makeUrl: url_ListTargetsForPolicy_21628589,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTargetsForSecurityProfile_21628604 = ref object of OpenApiRestCall_21625435
proc url_ListTargetsForSecurityProfile_21628606(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
        "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
               (kind: VariableSegment, value: "securityProfileName"),
               (kind: ConstantSegment, value: "/targets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListTargetsForSecurityProfile_21628605(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the targets (thing groups) associated with a given Device Defender security profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
  ##                      : The security profile.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_21628607 = path.getOrDefault("securityProfileName")
  valid_21628607 = validateParameter(valid_21628607, JString, required = true,
                                   default = nil)
  if valid_21628607 != nil:
    section.add "securityProfileName", valid_21628607
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  section = newJObject()
  var valid_21628608 = query.getOrDefault("maxResults")
  valid_21628608 = validateParameter(valid_21628608, JInt, required = false,
                                   default = nil)
  if valid_21628608 != nil:
    section.add "maxResults", valid_21628608
  var valid_21628609 = query.getOrDefault("nextToken")
  valid_21628609 = validateParameter(valid_21628609, JString, required = false,
                                   default = nil)
  if valid_21628609 != nil:
    section.add "nextToken", valid_21628609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628610 = header.getOrDefault("X-Amz-Date")
  valid_21628610 = validateParameter(valid_21628610, JString, required = false,
                                   default = nil)
  if valid_21628610 != nil:
    section.add "X-Amz-Date", valid_21628610
  var valid_21628611 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628611 = validateParameter(valid_21628611, JString, required = false,
                                   default = nil)
  if valid_21628611 != nil:
    section.add "X-Amz-Security-Token", valid_21628611
  var valid_21628612 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628612 = validateParameter(valid_21628612, JString, required = false,
                                   default = nil)
  if valid_21628612 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628612
  var valid_21628613 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628613 = validateParameter(valid_21628613, JString, required = false,
                                   default = nil)
  if valid_21628613 != nil:
    section.add "X-Amz-Algorithm", valid_21628613
  var valid_21628614 = header.getOrDefault("X-Amz-Signature")
  valid_21628614 = validateParameter(valid_21628614, JString, required = false,
                                   default = nil)
  if valid_21628614 != nil:
    section.add "X-Amz-Signature", valid_21628614
  var valid_21628615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628615 = validateParameter(valid_21628615, JString, required = false,
                                   default = nil)
  if valid_21628615 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628615
  var valid_21628616 = header.getOrDefault("X-Amz-Credential")
  valid_21628616 = validateParameter(valid_21628616, JString, required = false,
                                   default = nil)
  if valid_21628616 != nil:
    section.add "X-Amz-Credential", valid_21628616
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628617: Call_ListTargetsForSecurityProfile_21628604;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the targets (thing groups) associated with a given Device Defender security profile.
  ## 
  let valid = call_21628617.validator(path, query, header, formData, body, _)
  let scheme = call_21628617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628617.makeUrl(scheme.get, call_21628617.host, call_21628617.base,
                               call_21628617.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628617, uri, valid, _)

proc call*(call_21628618: Call_ListTargetsForSecurityProfile_21628604;
          securityProfileName: string; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listTargetsForSecurityProfile
  ## Lists the targets (thing groups) associated with a given Device Defender security profile.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token for the next set of results.
  ##   securityProfileName: string (required)
  ##                      : The security profile.
  var path_21628619 = newJObject()
  var query_21628620 = newJObject()
  add(query_21628620, "maxResults", newJInt(maxResults))
  add(query_21628620, "nextToken", newJString(nextToken))
  add(path_21628619, "securityProfileName", newJString(securityProfileName))
  result = call_21628618.call(path_21628619, query_21628620, nil, nil, nil)

var listTargetsForSecurityProfile* = Call_ListTargetsForSecurityProfile_21628604(
    name: "listTargetsForSecurityProfile", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/security-profiles/{securityProfileName}/targets",
    validator: validate_ListTargetsForSecurityProfile_21628605, base: "/",
    makeUrl: url_ListTargetsForSecurityProfile_21628606,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingGroups_21628621 = ref object of OpenApiRestCall_21625435
proc url_ListThingGroups_21628623(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThingGroups_21628622(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List the thing groups in your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   namePrefixFilter: JString
  ##                   : A filter that limits the results to those with the specified name prefix.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   recursive: JBool
  ##            : If true, return child groups as well.
  ##   parentGroup: JString
  ##              : A filter that limits the results to those with the specified parent group.
  section = newJObject()
  var valid_21628624 = query.getOrDefault("namePrefixFilter")
  valid_21628624 = validateParameter(valid_21628624, JString, required = false,
                                   default = nil)
  if valid_21628624 != nil:
    section.add "namePrefixFilter", valid_21628624
  var valid_21628625 = query.getOrDefault("maxResults")
  valid_21628625 = validateParameter(valid_21628625, JInt, required = false,
                                   default = nil)
  if valid_21628625 != nil:
    section.add "maxResults", valid_21628625
  var valid_21628626 = query.getOrDefault("nextToken")
  valid_21628626 = validateParameter(valid_21628626, JString, required = false,
                                   default = nil)
  if valid_21628626 != nil:
    section.add "nextToken", valid_21628626
  var valid_21628627 = query.getOrDefault("recursive")
  valid_21628627 = validateParameter(valid_21628627, JBool, required = false,
                                   default = nil)
  if valid_21628627 != nil:
    section.add "recursive", valid_21628627
  var valid_21628628 = query.getOrDefault("parentGroup")
  valid_21628628 = validateParameter(valid_21628628, JString, required = false,
                                   default = nil)
  if valid_21628628 != nil:
    section.add "parentGroup", valid_21628628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628629 = header.getOrDefault("X-Amz-Date")
  valid_21628629 = validateParameter(valid_21628629, JString, required = false,
                                   default = nil)
  if valid_21628629 != nil:
    section.add "X-Amz-Date", valid_21628629
  var valid_21628630 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628630 = validateParameter(valid_21628630, JString, required = false,
                                   default = nil)
  if valid_21628630 != nil:
    section.add "X-Amz-Security-Token", valid_21628630
  var valid_21628631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628631 = validateParameter(valid_21628631, JString, required = false,
                                   default = nil)
  if valid_21628631 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628631
  var valid_21628632 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628632 = validateParameter(valid_21628632, JString, required = false,
                                   default = nil)
  if valid_21628632 != nil:
    section.add "X-Amz-Algorithm", valid_21628632
  var valid_21628633 = header.getOrDefault("X-Amz-Signature")
  valid_21628633 = validateParameter(valid_21628633, JString, required = false,
                                   default = nil)
  if valid_21628633 != nil:
    section.add "X-Amz-Signature", valid_21628633
  var valid_21628634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628634 = validateParameter(valid_21628634, JString, required = false,
                                   default = nil)
  if valid_21628634 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628634
  var valid_21628635 = header.getOrDefault("X-Amz-Credential")
  valid_21628635 = validateParameter(valid_21628635, JString, required = false,
                                   default = nil)
  if valid_21628635 != nil:
    section.add "X-Amz-Credential", valid_21628635
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628636: Call_ListThingGroups_21628621; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## List the thing groups in your account.
  ## 
  let valid = call_21628636.validator(path, query, header, formData, body, _)
  let scheme = call_21628636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628636.makeUrl(scheme.get, call_21628636.host, call_21628636.base,
                               call_21628636.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628636, uri, valid, _)

proc call*(call_21628637: Call_ListThingGroups_21628621;
          namePrefixFilter: string = ""; maxResults: int = 0; nextToken: string = "";
          recursive: bool = false; parentGroup: string = ""): Recallable =
  ## listThingGroups
  ## List the thing groups in your account.
  ##   namePrefixFilter: string
  ##                   : A filter that limits the results to those with the specified name prefix.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   recursive: bool
  ##            : If true, return child groups as well.
  ##   parentGroup: string
  ##              : A filter that limits the results to those with the specified parent group.
  var query_21628638 = newJObject()
  add(query_21628638, "namePrefixFilter", newJString(namePrefixFilter))
  add(query_21628638, "maxResults", newJInt(maxResults))
  add(query_21628638, "nextToken", newJString(nextToken))
  add(query_21628638, "recursive", newJBool(recursive))
  add(query_21628638, "parentGroup", newJString(parentGroup))
  result = call_21628637.call(nil, query_21628638, nil, nil, nil)

var listThingGroups* = Call_ListThingGroups_21628621(name: "listThingGroups",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/thing-groups",
    validator: validate_ListThingGroups_21628622, base: "/",
    makeUrl: url_ListThingGroups_21628623, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingGroupsForThing_21628639 = ref object of OpenApiRestCall_21625435
proc url_ListThingGroupsForThing_21628641(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/thing-groups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingGroupsForThing_21628640(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List the thing groups to which the specified thing belongs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The thing name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21628642 = path.getOrDefault("thingName")
  valid_21628642 = validateParameter(valid_21628642, JString, required = true,
                                   default = nil)
  if valid_21628642 != nil:
    section.add "thingName", valid_21628642
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  section = newJObject()
  var valid_21628643 = query.getOrDefault("maxResults")
  valid_21628643 = validateParameter(valid_21628643, JInt, required = false,
                                   default = nil)
  if valid_21628643 != nil:
    section.add "maxResults", valid_21628643
  var valid_21628644 = query.getOrDefault("nextToken")
  valid_21628644 = validateParameter(valid_21628644, JString, required = false,
                                   default = nil)
  if valid_21628644 != nil:
    section.add "nextToken", valid_21628644
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628645 = header.getOrDefault("X-Amz-Date")
  valid_21628645 = validateParameter(valid_21628645, JString, required = false,
                                   default = nil)
  if valid_21628645 != nil:
    section.add "X-Amz-Date", valid_21628645
  var valid_21628646 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628646 = validateParameter(valid_21628646, JString, required = false,
                                   default = nil)
  if valid_21628646 != nil:
    section.add "X-Amz-Security-Token", valid_21628646
  var valid_21628647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628647 = validateParameter(valid_21628647, JString, required = false,
                                   default = nil)
  if valid_21628647 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628647
  var valid_21628648 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628648 = validateParameter(valid_21628648, JString, required = false,
                                   default = nil)
  if valid_21628648 != nil:
    section.add "X-Amz-Algorithm", valid_21628648
  var valid_21628649 = header.getOrDefault("X-Amz-Signature")
  valid_21628649 = validateParameter(valid_21628649, JString, required = false,
                                   default = nil)
  if valid_21628649 != nil:
    section.add "X-Amz-Signature", valid_21628649
  var valid_21628650 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628650 = validateParameter(valid_21628650, JString, required = false,
                                   default = nil)
  if valid_21628650 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628650
  var valid_21628651 = header.getOrDefault("X-Amz-Credential")
  valid_21628651 = validateParameter(valid_21628651, JString, required = false,
                                   default = nil)
  if valid_21628651 != nil:
    section.add "X-Amz-Credential", valid_21628651
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628652: Call_ListThingGroupsForThing_21628639;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## List the thing groups to which the specified thing belongs.
  ## 
  let valid = call_21628652.validator(path, query, header, formData, body, _)
  let scheme = call_21628652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628652.makeUrl(scheme.get, call_21628652.host, call_21628652.base,
                               call_21628652.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628652, uri, valid, _)

proc call*(call_21628653: Call_ListThingGroupsForThing_21628639; thingName: string;
          maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listThingGroupsForThing
  ## List the thing groups to which the specified thing belongs.
  ##   thingName: string (required)
  ##            : The thing name.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  var path_21628654 = newJObject()
  var query_21628655 = newJObject()
  add(path_21628654, "thingName", newJString(thingName))
  add(query_21628655, "maxResults", newJInt(maxResults))
  add(query_21628655, "nextToken", newJString(nextToken))
  result = call_21628653.call(path_21628654, query_21628655, nil, nil, nil)

var listThingGroupsForThing* = Call_ListThingGroupsForThing_21628639(
    name: "listThingGroupsForThing", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/thing-groups",
    validator: validate_ListThingGroupsForThing_21628640, base: "/",
    makeUrl: url_ListThingGroupsForThing_21628641,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingPrincipals_21628656 = ref object of OpenApiRestCall_21625435
proc url_ListThingPrincipals_21628658(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
               (kind: VariableSegment, value: "thingName"),
               (kind: ConstantSegment, value: "/principals")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingPrincipals_21628657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
  ##            : The name of the thing.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `thingName` field"
  var valid_21628659 = path.getOrDefault("thingName")
  valid_21628659 = validateParameter(valid_21628659, JString, required = true,
                                   default = nil)
  if valid_21628659 != nil:
    section.add "thingName", valid_21628659
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628660 = header.getOrDefault("X-Amz-Date")
  valid_21628660 = validateParameter(valid_21628660, JString, required = false,
                                   default = nil)
  if valid_21628660 != nil:
    section.add "X-Amz-Date", valid_21628660
  var valid_21628661 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628661 = validateParameter(valid_21628661, JString, required = false,
                                   default = nil)
  if valid_21628661 != nil:
    section.add "X-Amz-Security-Token", valid_21628661
  var valid_21628662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628662 = validateParameter(valid_21628662, JString, required = false,
                                   default = nil)
  if valid_21628662 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628662
  var valid_21628663 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628663 = validateParameter(valid_21628663, JString, required = false,
                                   default = nil)
  if valid_21628663 != nil:
    section.add "X-Amz-Algorithm", valid_21628663
  var valid_21628664 = header.getOrDefault("X-Amz-Signature")
  valid_21628664 = validateParameter(valid_21628664, JString, required = false,
                                   default = nil)
  if valid_21628664 != nil:
    section.add "X-Amz-Signature", valid_21628664
  var valid_21628665 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628665 = validateParameter(valid_21628665, JString, required = false,
                                   default = nil)
  if valid_21628665 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628665
  var valid_21628666 = header.getOrDefault("X-Amz-Credential")
  valid_21628666 = validateParameter(valid_21628666, JString, required = false,
                                   default = nil)
  if valid_21628666 != nil:
    section.add "X-Amz-Credential", valid_21628666
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628667: Call_ListThingPrincipals_21628656; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ## 
  let valid = call_21628667.validator(path, query, header, formData, body, _)
  let scheme = call_21628667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628667.makeUrl(scheme.get, call_21628667.host, call_21628667.base,
                               call_21628667.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628667, uri, valid, _)

proc call*(call_21628668: Call_ListThingPrincipals_21628656; thingName: string): Recallable =
  ## listThingPrincipals
  ## Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ##   thingName: string (required)
  ##            : The name of the thing.
  var path_21628669 = newJObject()
  add(path_21628669, "thingName", newJString(thingName))
  result = call_21628668.call(path_21628669, nil, nil, nil, nil)

var listThingPrincipals* = Call_ListThingPrincipals_21628656(
    name: "listThingPrincipals", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/principals",
    validator: validate_ListThingPrincipals_21628657, base: "/",
    makeUrl: url_ListThingPrincipals_21628658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingRegistrationTaskReports_21628670 = ref object of OpenApiRestCall_21625435
proc url_ListThingRegistrationTaskReports_21628672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-registration-tasks/"),
               (kind: VariableSegment, value: "taskId"),
               (kind: ConstantSegment, value: "/reports#reportType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingRegistrationTaskReports_21628671(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Information about the thing registration tasks.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : The id of the task.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21628673 = path.getOrDefault("taskId")
  valid_21628673 = validateParameter(valid_21628673, JString, required = true,
                                   default = nil)
  if valid_21628673 != nil:
    section.add "taskId", valid_21628673
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return per request.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   reportType: JString (required)
  ##             : The type of task report.
  section = newJObject()
  var valid_21628674 = query.getOrDefault("maxResults")
  valid_21628674 = validateParameter(valid_21628674, JInt, required = false,
                                   default = nil)
  if valid_21628674 != nil:
    section.add "maxResults", valid_21628674
  var valid_21628675 = query.getOrDefault("nextToken")
  valid_21628675 = validateParameter(valid_21628675, JString, required = false,
                                   default = nil)
  if valid_21628675 != nil:
    section.add "nextToken", valid_21628675
  var valid_21628676 = query.getOrDefault("reportType")
  valid_21628676 = validateParameter(valid_21628676, JString, required = true,
                                   default = newJString("ERRORS"))
  if valid_21628676 != nil:
    section.add "reportType", valid_21628676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628677 = header.getOrDefault("X-Amz-Date")
  valid_21628677 = validateParameter(valid_21628677, JString, required = false,
                                   default = nil)
  if valid_21628677 != nil:
    section.add "X-Amz-Date", valid_21628677
  var valid_21628678 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628678 = validateParameter(valid_21628678, JString, required = false,
                                   default = nil)
  if valid_21628678 != nil:
    section.add "X-Amz-Security-Token", valid_21628678
  var valid_21628679 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628679 = validateParameter(valid_21628679, JString, required = false,
                                   default = nil)
  if valid_21628679 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628679
  var valid_21628680 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628680 = validateParameter(valid_21628680, JString, required = false,
                                   default = nil)
  if valid_21628680 != nil:
    section.add "X-Amz-Algorithm", valid_21628680
  var valid_21628681 = header.getOrDefault("X-Amz-Signature")
  valid_21628681 = validateParameter(valid_21628681, JString, required = false,
                                   default = nil)
  if valid_21628681 != nil:
    section.add "X-Amz-Signature", valid_21628681
  var valid_21628682 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628682 = validateParameter(valid_21628682, JString, required = false,
                                   default = nil)
  if valid_21628682 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628682
  var valid_21628683 = header.getOrDefault("X-Amz-Credential")
  valid_21628683 = validateParameter(valid_21628683, JString, required = false,
                                   default = nil)
  if valid_21628683 != nil:
    section.add "X-Amz-Credential", valid_21628683
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628684: Call_ListThingRegistrationTaskReports_21628670;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Information about the thing registration tasks.
  ## 
  let valid = call_21628684.validator(path, query, header, formData, body, _)
  let scheme = call_21628684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628684.makeUrl(scheme.get, call_21628684.host, call_21628684.base,
                               call_21628684.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628684, uri, valid, _)

proc call*(call_21628685: Call_ListThingRegistrationTaskReports_21628670;
          taskId: string; maxResults: int = 0; nextToken: string = "";
          reportType: string = "ERRORS"): Recallable =
  ## listThingRegistrationTaskReports
  ## Information about the thing registration tasks.
  ##   maxResults: int
  ##             : The maximum number of results to return per request.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   reportType: string (required)
  ##             : The type of task report.
  ##   taskId: string (required)
  ##         : The id of the task.
  var path_21628686 = newJObject()
  var query_21628687 = newJObject()
  add(query_21628687, "maxResults", newJInt(maxResults))
  add(query_21628687, "nextToken", newJString(nextToken))
  add(query_21628687, "reportType", newJString(reportType))
  add(path_21628686, "taskId", newJString(taskId))
  result = call_21628685.call(path_21628686, query_21628687, nil, nil, nil)

var listThingRegistrationTaskReports* = Call_ListThingRegistrationTaskReports_21628670(
    name: "listThingRegistrationTaskReports", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/thing-registration-tasks/{taskId}/reports#reportType",
    validator: validate_ListThingRegistrationTaskReports_21628671, base: "/",
    makeUrl: url_ListThingRegistrationTaskReports_21628672,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartThingRegistrationTask_21628704 = ref object of OpenApiRestCall_21625435
proc url_StartThingRegistrationTask_21628706(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_StartThingRegistrationTask_21628705(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a bulk thing provisioning task.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628707 = header.getOrDefault("X-Amz-Date")
  valid_21628707 = validateParameter(valid_21628707, JString, required = false,
                                   default = nil)
  if valid_21628707 != nil:
    section.add "X-Amz-Date", valid_21628707
  var valid_21628708 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628708 = validateParameter(valid_21628708, JString, required = false,
                                   default = nil)
  if valid_21628708 != nil:
    section.add "X-Amz-Security-Token", valid_21628708
  var valid_21628709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628709 = validateParameter(valid_21628709, JString, required = false,
                                   default = nil)
  if valid_21628709 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628709
  var valid_21628710 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628710 = validateParameter(valid_21628710, JString, required = false,
                                   default = nil)
  if valid_21628710 != nil:
    section.add "X-Amz-Algorithm", valid_21628710
  var valid_21628711 = header.getOrDefault("X-Amz-Signature")
  valid_21628711 = validateParameter(valid_21628711, JString, required = false,
                                   default = nil)
  if valid_21628711 != nil:
    section.add "X-Amz-Signature", valid_21628711
  var valid_21628712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628712 = validateParameter(valid_21628712, JString, required = false,
                                   default = nil)
  if valid_21628712 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628712
  var valid_21628713 = header.getOrDefault("X-Amz-Credential")
  valid_21628713 = validateParameter(valid_21628713, JString, required = false,
                                   default = nil)
  if valid_21628713 != nil:
    section.add "X-Amz-Credential", valid_21628713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628715: Call_StartThingRegistrationTask_21628704;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a bulk thing provisioning task.
  ## 
  let valid = call_21628715.validator(path, query, header, formData, body, _)
  let scheme = call_21628715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628715.makeUrl(scheme.get, call_21628715.host, call_21628715.base,
                               call_21628715.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628715, uri, valid, _)

proc call*(call_21628716: Call_StartThingRegistrationTask_21628704; body: JsonNode): Recallable =
  ## startThingRegistrationTask
  ## Creates a bulk thing provisioning task.
  ##   body: JObject (required)
  var body_21628717 = newJObject()
  if body != nil:
    body_21628717 = body
  result = call_21628716.call(nil, nil, nil, nil, body_21628717)

var startThingRegistrationTask* = Call_StartThingRegistrationTask_21628704(
    name: "startThingRegistrationTask", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/thing-registration-tasks",
    validator: validate_StartThingRegistrationTask_21628705, base: "/",
    makeUrl: url_StartThingRegistrationTask_21628706,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingRegistrationTasks_21628688 = ref object of OpenApiRestCall_21625435
proc url_ListThingRegistrationTasks_21628690(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThingRegistrationTasks_21628689(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List bulk thing provisioning tasks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   status: JString
  ##         : The status of the bulk thing provisioning task.
  section = newJObject()
  var valid_21628691 = query.getOrDefault("maxResults")
  valid_21628691 = validateParameter(valid_21628691, JInt, required = false,
                                   default = nil)
  if valid_21628691 != nil:
    section.add "maxResults", valid_21628691
  var valid_21628692 = query.getOrDefault("nextToken")
  valid_21628692 = validateParameter(valid_21628692, JString, required = false,
                                   default = nil)
  if valid_21628692 != nil:
    section.add "nextToken", valid_21628692
  var valid_21628693 = query.getOrDefault("status")
  valid_21628693 = validateParameter(valid_21628693, JString, required = false,
                                   default = newJString("InProgress"))
  if valid_21628693 != nil:
    section.add "status", valid_21628693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628694 = header.getOrDefault("X-Amz-Date")
  valid_21628694 = validateParameter(valid_21628694, JString, required = false,
                                   default = nil)
  if valid_21628694 != nil:
    section.add "X-Amz-Date", valid_21628694
  var valid_21628695 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628695 = validateParameter(valid_21628695, JString, required = false,
                                   default = nil)
  if valid_21628695 != nil:
    section.add "X-Amz-Security-Token", valid_21628695
  var valid_21628696 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628696 = validateParameter(valid_21628696, JString, required = false,
                                   default = nil)
  if valid_21628696 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628696
  var valid_21628697 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628697 = validateParameter(valid_21628697, JString, required = false,
                                   default = nil)
  if valid_21628697 != nil:
    section.add "X-Amz-Algorithm", valid_21628697
  var valid_21628698 = header.getOrDefault("X-Amz-Signature")
  valid_21628698 = validateParameter(valid_21628698, JString, required = false,
                                   default = nil)
  if valid_21628698 != nil:
    section.add "X-Amz-Signature", valid_21628698
  var valid_21628699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628699 = validateParameter(valid_21628699, JString, required = false,
                                   default = nil)
  if valid_21628699 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628699
  var valid_21628700 = header.getOrDefault("X-Amz-Credential")
  valid_21628700 = validateParameter(valid_21628700, JString, required = false,
                                   default = nil)
  if valid_21628700 != nil:
    section.add "X-Amz-Credential", valid_21628700
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628701: Call_ListThingRegistrationTasks_21628688;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## List bulk thing provisioning tasks.
  ## 
  let valid = call_21628701.validator(path, query, header, formData, body, _)
  let scheme = call_21628701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628701.makeUrl(scheme.get, call_21628701.host, call_21628701.base,
                               call_21628701.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628701, uri, valid, _)

proc call*(call_21628702: Call_ListThingRegistrationTasks_21628688;
          maxResults: int = 0; nextToken: string = ""; status: string = "InProgress"): Recallable =
  ## listThingRegistrationTasks
  ## List bulk thing provisioning tasks.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   status: string
  ##         : The status of the bulk thing provisioning task.
  var query_21628703 = newJObject()
  add(query_21628703, "maxResults", newJInt(maxResults))
  add(query_21628703, "nextToken", newJString(nextToken))
  add(query_21628703, "status", newJString(status))
  result = call_21628702.call(nil, query_21628703, nil, nil, nil)

var listThingRegistrationTasks* = Call_ListThingRegistrationTasks_21628688(
    name: "listThingRegistrationTasks", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-registration-tasks",
    validator: validate_ListThingRegistrationTasks_21628689, base: "/",
    makeUrl: url_ListThingRegistrationTasks_21628690,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingTypes_21628718 = ref object of OpenApiRestCall_21625435
proc url_ListThingTypes_21628720(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThingTypes_21628719(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the existing thing types.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   thingTypeName: JString
  ##                : The name of the thing type.
  ##   maxResults: JInt
  ##             : The maximum number of results to return in this operation.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  section = newJObject()
  var valid_21628721 = query.getOrDefault("thingTypeName")
  valid_21628721 = validateParameter(valid_21628721, JString, required = false,
                                   default = nil)
  if valid_21628721 != nil:
    section.add "thingTypeName", valid_21628721
  var valid_21628722 = query.getOrDefault("maxResults")
  valid_21628722 = validateParameter(valid_21628722, JInt, required = false,
                                   default = nil)
  if valid_21628722 != nil:
    section.add "maxResults", valid_21628722
  var valid_21628723 = query.getOrDefault("nextToken")
  valid_21628723 = validateParameter(valid_21628723, JString, required = false,
                                   default = nil)
  if valid_21628723 != nil:
    section.add "nextToken", valid_21628723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628724 = header.getOrDefault("X-Amz-Date")
  valid_21628724 = validateParameter(valid_21628724, JString, required = false,
                                   default = nil)
  if valid_21628724 != nil:
    section.add "X-Amz-Date", valid_21628724
  var valid_21628725 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628725 = validateParameter(valid_21628725, JString, required = false,
                                   default = nil)
  if valid_21628725 != nil:
    section.add "X-Amz-Security-Token", valid_21628725
  var valid_21628726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628726 = validateParameter(valid_21628726, JString, required = false,
                                   default = nil)
  if valid_21628726 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628726
  var valid_21628727 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628727 = validateParameter(valid_21628727, JString, required = false,
                                   default = nil)
  if valid_21628727 != nil:
    section.add "X-Amz-Algorithm", valid_21628727
  var valid_21628728 = header.getOrDefault("X-Amz-Signature")
  valid_21628728 = validateParameter(valid_21628728, JString, required = false,
                                   default = nil)
  if valid_21628728 != nil:
    section.add "X-Amz-Signature", valid_21628728
  var valid_21628729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628729 = validateParameter(valid_21628729, JString, required = false,
                                   default = nil)
  if valid_21628729 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628729
  var valid_21628730 = header.getOrDefault("X-Amz-Credential")
  valid_21628730 = validateParameter(valid_21628730, JString, required = false,
                                   default = nil)
  if valid_21628730 != nil:
    section.add "X-Amz-Credential", valid_21628730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628731: Call_ListThingTypes_21628718; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the existing thing types.
  ## 
  let valid = call_21628731.validator(path, query, header, formData, body, _)
  let scheme = call_21628731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628731.makeUrl(scheme.get, call_21628731.host, call_21628731.base,
                               call_21628731.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628731, uri, valid, _)

proc call*(call_21628732: Call_ListThingTypes_21628718; thingTypeName: string = "";
          maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listThingTypes
  ## Lists the existing thing types.
  ##   thingTypeName: string
  ##                : The name of the thing type.
  ##   maxResults: int
  ##             : The maximum number of results to return in this operation.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  var query_21628733 = newJObject()
  add(query_21628733, "thingTypeName", newJString(thingTypeName))
  add(query_21628733, "maxResults", newJInt(maxResults))
  add(query_21628733, "nextToken", newJString(nextToken))
  result = call_21628732.call(nil, query_21628733, nil, nil, nil)

var listThingTypes* = Call_ListThingTypes_21628718(name: "listThingTypes",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/thing-types",
    validator: validate_ListThingTypes_21628719, base: "/",
    makeUrl: url_ListThingTypes_21628720, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RegisterThing_21628752 = ref object of OpenApiRestCall_21625435
proc url_RegisterThing_21628754(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RegisterThing_21628753(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Provisions a thing in the device registry. RegisterThing calls other AWS IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise your throttling limits if necessary.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628755 = header.getOrDefault("X-Amz-Date")
  valid_21628755 = validateParameter(valid_21628755, JString, required = false,
                                   default = nil)
  if valid_21628755 != nil:
    section.add "X-Amz-Date", valid_21628755
  var valid_21628756 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628756 = validateParameter(valid_21628756, JString, required = false,
                                   default = nil)
  if valid_21628756 != nil:
    section.add "X-Amz-Security-Token", valid_21628756
  var valid_21628757 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628757 = validateParameter(valid_21628757, JString, required = false,
                                   default = nil)
  if valid_21628757 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628757
  var valid_21628758 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628758 = validateParameter(valid_21628758, JString, required = false,
                                   default = nil)
  if valid_21628758 != nil:
    section.add "X-Amz-Algorithm", valid_21628758
  var valid_21628759 = header.getOrDefault("X-Amz-Signature")
  valid_21628759 = validateParameter(valid_21628759, JString, required = false,
                                   default = nil)
  if valid_21628759 != nil:
    section.add "X-Amz-Signature", valid_21628759
  var valid_21628760 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628760 = validateParameter(valid_21628760, JString, required = false,
                                   default = nil)
  if valid_21628760 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628760
  var valid_21628761 = header.getOrDefault("X-Amz-Credential")
  valid_21628761 = validateParameter(valid_21628761, JString, required = false,
                                   default = nil)
  if valid_21628761 != nil:
    section.add "X-Amz-Credential", valid_21628761
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628763: Call_RegisterThing_21628752; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Provisions a thing in the device registry. RegisterThing calls other AWS IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise your throttling limits if necessary.
  ## 
  let valid = call_21628763.validator(path, query, header, formData, body, _)
  let scheme = call_21628763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628763.makeUrl(scheme.get, call_21628763.host, call_21628763.base,
                               call_21628763.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628763, uri, valid, _)

proc call*(call_21628764: Call_RegisterThing_21628752; body: JsonNode): Recallable =
  ## registerThing
  ## Provisions a thing in the device registry. RegisterThing calls other AWS IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise your throttling limits if necessary.
  ##   body: JObject (required)
  var body_21628765 = newJObject()
  if body != nil:
    body_21628765 = body
  result = call_21628764.call(nil, nil, nil, nil, body_21628765)

var registerThing* = Call_RegisterThing_21628752(name: "registerThing",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/things",
    validator: validate_RegisterThing_21628753, base: "/",
    makeUrl: url_RegisterThing_21628754, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThings_21628734 = ref object of OpenApiRestCall_21625435
proc url_ListThings_21628736(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThings_21628735(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   thingTypeName: JString
  ##                : The name of the thing type used to search for things.
  ##   maxResults: JInt
  ##             : The maximum number of results to return in this operation.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   attributeValue: JString
  ##                 : The attribute value used to search for things.
  ##   attributeName: JString
  ##                : The attribute name used to search for things.
  section = newJObject()
  var valid_21628737 = query.getOrDefault("thingTypeName")
  valid_21628737 = validateParameter(valid_21628737, JString, required = false,
                                   default = nil)
  if valid_21628737 != nil:
    section.add "thingTypeName", valid_21628737
  var valid_21628738 = query.getOrDefault("maxResults")
  valid_21628738 = validateParameter(valid_21628738, JInt, required = false,
                                   default = nil)
  if valid_21628738 != nil:
    section.add "maxResults", valid_21628738
  var valid_21628739 = query.getOrDefault("nextToken")
  valid_21628739 = validateParameter(valid_21628739, JString, required = false,
                                   default = nil)
  if valid_21628739 != nil:
    section.add "nextToken", valid_21628739
  var valid_21628740 = query.getOrDefault("attributeValue")
  valid_21628740 = validateParameter(valid_21628740, JString, required = false,
                                   default = nil)
  if valid_21628740 != nil:
    section.add "attributeValue", valid_21628740
  var valid_21628741 = query.getOrDefault("attributeName")
  valid_21628741 = validateParameter(valid_21628741, JString, required = false,
                                   default = nil)
  if valid_21628741 != nil:
    section.add "attributeName", valid_21628741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628742 = header.getOrDefault("X-Amz-Date")
  valid_21628742 = validateParameter(valid_21628742, JString, required = false,
                                   default = nil)
  if valid_21628742 != nil:
    section.add "X-Amz-Date", valid_21628742
  var valid_21628743 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628743 = validateParameter(valid_21628743, JString, required = false,
                                   default = nil)
  if valid_21628743 != nil:
    section.add "X-Amz-Security-Token", valid_21628743
  var valid_21628744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628744 = validateParameter(valid_21628744, JString, required = false,
                                   default = nil)
  if valid_21628744 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628744
  var valid_21628745 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628745 = validateParameter(valid_21628745, JString, required = false,
                                   default = nil)
  if valid_21628745 != nil:
    section.add "X-Amz-Algorithm", valid_21628745
  var valid_21628746 = header.getOrDefault("X-Amz-Signature")
  valid_21628746 = validateParameter(valid_21628746, JString, required = false,
                                   default = nil)
  if valid_21628746 != nil:
    section.add "X-Amz-Signature", valid_21628746
  var valid_21628747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628747 = validateParameter(valid_21628747, JString, required = false,
                                   default = nil)
  if valid_21628747 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628747
  var valid_21628748 = header.getOrDefault("X-Amz-Credential")
  valid_21628748 = validateParameter(valid_21628748, JString, required = false,
                                   default = nil)
  if valid_21628748 != nil:
    section.add "X-Amz-Credential", valid_21628748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628749: Call_ListThings_21628734; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. 
  ## 
  let valid = call_21628749.validator(path, query, header, formData, body, _)
  let scheme = call_21628749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628749.makeUrl(scheme.get, call_21628749.host, call_21628749.base,
                               call_21628749.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628749, uri, valid, _)

proc call*(call_21628750: Call_ListThings_21628734; thingTypeName: string = "";
          maxResults: int = 0; nextToken: string = ""; attributeValue: string = "";
          attributeName: string = ""): Recallable =
  ## listThings
  ## Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. 
  ##   thingTypeName: string
  ##                : The name of the thing type used to search for things.
  ##   maxResults: int
  ##             : The maximum number of results to return in this operation.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   attributeValue: string
  ##                 : The attribute value used to search for things.
  ##   attributeName: string
  ##                : The attribute name used to search for things.
  var query_21628751 = newJObject()
  add(query_21628751, "thingTypeName", newJString(thingTypeName))
  add(query_21628751, "maxResults", newJInt(maxResults))
  add(query_21628751, "nextToken", newJString(nextToken))
  add(query_21628751, "attributeValue", newJString(attributeValue))
  add(query_21628751, "attributeName", newJString(attributeName))
  result = call_21628750.call(nil, query_21628751, nil, nil, nil)

var listThings* = Call_ListThings_21628734(name: "listThings",
                                        meth: HttpMethod.HttpGet,
                                        host: "iot.amazonaws.com",
                                        route: "/things",
                                        validator: validate_ListThings_21628735,
                                        base: "/", makeUrl: url_ListThings_21628736,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingsInBillingGroup_21628766 = ref object of OpenApiRestCall_21625435
proc url_ListThingsInBillingGroup_21628768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
        "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
               (kind: VariableSegment, value: "billingGroupName"),
               (kind: ConstantSegment, value: "/things")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingsInBillingGroup_21628767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the things you have added to the given billing group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
  ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `billingGroupName` field"
  var valid_21628769 = path.getOrDefault("billingGroupName")
  valid_21628769 = validateParameter(valid_21628769, JString, required = true,
                                   default = nil)
  if valid_21628769 != nil:
    section.add "billingGroupName", valid_21628769
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return per request.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  section = newJObject()
  var valid_21628770 = query.getOrDefault("maxResults")
  valid_21628770 = validateParameter(valid_21628770, JInt, required = false,
                                   default = nil)
  if valid_21628770 != nil:
    section.add "maxResults", valid_21628770
  var valid_21628771 = query.getOrDefault("nextToken")
  valid_21628771 = validateParameter(valid_21628771, JString, required = false,
                                   default = nil)
  if valid_21628771 != nil:
    section.add "nextToken", valid_21628771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628772 = header.getOrDefault("X-Amz-Date")
  valid_21628772 = validateParameter(valid_21628772, JString, required = false,
                                   default = nil)
  if valid_21628772 != nil:
    section.add "X-Amz-Date", valid_21628772
  var valid_21628773 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628773 = validateParameter(valid_21628773, JString, required = false,
                                   default = nil)
  if valid_21628773 != nil:
    section.add "X-Amz-Security-Token", valid_21628773
  var valid_21628774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628774 = validateParameter(valid_21628774, JString, required = false,
                                   default = nil)
  if valid_21628774 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628774
  var valid_21628775 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628775 = validateParameter(valid_21628775, JString, required = false,
                                   default = nil)
  if valid_21628775 != nil:
    section.add "X-Amz-Algorithm", valid_21628775
  var valid_21628776 = header.getOrDefault("X-Amz-Signature")
  valid_21628776 = validateParameter(valid_21628776, JString, required = false,
                                   default = nil)
  if valid_21628776 != nil:
    section.add "X-Amz-Signature", valid_21628776
  var valid_21628777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628777 = validateParameter(valid_21628777, JString, required = false,
                                   default = nil)
  if valid_21628777 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628777
  var valid_21628778 = header.getOrDefault("X-Amz-Credential")
  valid_21628778 = validateParameter(valid_21628778, JString, required = false,
                                   default = nil)
  if valid_21628778 != nil:
    section.add "X-Amz-Credential", valid_21628778
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628779: Call_ListThingsInBillingGroup_21628766;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the things you have added to the given billing group.
  ## 
  let valid = call_21628779.validator(path, query, header, formData, body, _)
  let scheme = call_21628779.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628779.makeUrl(scheme.get, call_21628779.host, call_21628779.base,
                               call_21628779.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628779, uri, valid, _)

proc call*(call_21628780: Call_ListThingsInBillingGroup_21628766;
          billingGroupName: string; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listThingsInBillingGroup
  ## Lists the things you have added to the given billing group.
  ##   billingGroupName: string (required)
  ##                   : The name of the billing group.
  ##   maxResults: int
  ##             : The maximum number of results to return per request.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  var path_21628781 = newJObject()
  var query_21628782 = newJObject()
  add(path_21628781, "billingGroupName", newJString(billingGroupName))
  add(query_21628782, "maxResults", newJInt(maxResults))
  add(query_21628782, "nextToken", newJString(nextToken))
  result = call_21628780.call(path_21628781, query_21628782, nil, nil, nil)

var listThingsInBillingGroup* = Call_ListThingsInBillingGroup_21628766(
    name: "listThingsInBillingGroup", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}/things",
    validator: validate_ListThingsInBillingGroup_21628767, base: "/",
    makeUrl: url_ListThingsInBillingGroup_21628768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingsInThingGroup_21628783 = ref object of OpenApiRestCall_21625435
proc url_ListThingsInThingGroup_21628785(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path, "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
               (kind: VariableSegment, value: "thingGroupName"),
               (kind: ConstantSegment, value: "/things")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingsInThingGroup_21628784(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the things in the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
  ##                 : The thing group name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `thingGroupName` field"
  var valid_21628786 = path.getOrDefault("thingGroupName")
  valid_21628786 = validateParameter(valid_21628786, JString, required = true,
                                   default = nil)
  if valid_21628786 != nil:
    section.add "thingGroupName", valid_21628786
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token to retrieve the next set of results.
  ##   recursive: JBool
  ##            : When true, list things in this thing group and in all child groups as well.
  section = newJObject()
  var valid_21628787 = query.getOrDefault("maxResults")
  valid_21628787 = validateParameter(valid_21628787, JInt, required = false,
                                   default = nil)
  if valid_21628787 != nil:
    section.add "maxResults", valid_21628787
  var valid_21628788 = query.getOrDefault("nextToken")
  valid_21628788 = validateParameter(valid_21628788, JString, required = false,
                                   default = nil)
  if valid_21628788 != nil:
    section.add "nextToken", valid_21628788
  var valid_21628789 = query.getOrDefault("recursive")
  valid_21628789 = validateParameter(valid_21628789, JBool, required = false,
                                   default = nil)
  if valid_21628789 != nil:
    section.add "recursive", valid_21628789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628790 = header.getOrDefault("X-Amz-Date")
  valid_21628790 = validateParameter(valid_21628790, JString, required = false,
                                   default = nil)
  if valid_21628790 != nil:
    section.add "X-Amz-Date", valid_21628790
  var valid_21628791 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628791 = validateParameter(valid_21628791, JString, required = false,
                                   default = nil)
  if valid_21628791 != nil:
    section.add "X-Amz-Security-Token", valid_21628791
  var valid_21628792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628792 = validateParameter(valid_21628792, JString, required = false,
                                   default = nil)
  if valid_21628792 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628792
  var valid_21628793 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628793 = validateParameter(valid_21628793, JString, required = false,
                                   default = nil)
  if valid_21628793 != nil:
    section.add "X-Amz-Algorithm", valid_21628793
  var valid_21628794 = header.getOrDefault("X-Amz-Signature")
  valid_21628794 = validateParameter(valid_21628794, JString, required = false,
                                   default = nil)
  if valid_21628794 != nil:
    section.add "X-Amz-Signature", valid_21628794
  var valid_21628795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628795 = validateParameter(valid_21628795, JString, required = false,
                                   default = nil)
  if valid_21628795 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628795
  var valid_21628796 = header.getOrDefault("X-Amz-Credential")
  valid_21628796 = validateParameter(valid_21628796, JString, required = false,
                                   default = nil)
  if valid_21628796 != nil:
    section.add "X-Amz-Credential", valid_21628796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628797: Call_ListThingsInThingGroup_21628783;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the things in the specified group.
  ## 
  let valid = call_21628797.validator(path, query, header, formData, body, _)
  let scheme = call_21628797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628797.makeUrl(scheme.get, call_21628797.host, call_21628797.base,
                               call_21628797.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628797, uri, valid, _)

proc call*(call_21628798: Call_ListThingsInThingGroup_21628783;
          thingGroupName: string; maxResults: int = 0; nextToken: string = "";
          recursive: bool = false): Recallable =
  ## listThingsInThingGroup
  ## Lists the things in the specified group.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token to retrieve the next set of results.
  ##   thingGroupName: string (required)
  ##                 : The thing group name.
  ##   recursive: bool
  ##            : When true, list things in this thing group and in all child groups as well.
  var path_21628799 = newJObject()
  var query_21628800 = newJObject()
  add(query_21628800, "maxResults", newJInt(maxResults))
  add(query_21628800, "nextToken", newJString(nextToken))
  add(path_21628799, "thingGroupName", newJString(thingGroupName))
  add(query_21628800, "recursive", newJBool(recursive))
  result = call_21628798.call(path_21628799, query_21628800, nil, nil, nil)

var listThingsInThingGroup* = Call_ListThingsInThingGroup_21628783(
    name: "listThingsInThingGroup", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-groups/{thingGroupName}/things",
    validator: validate_ListThingsInThingGroup_21628784, base: "/",
    makeUrl: url_ListThingsInThingGroup_21628785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTopicRules_21628801 = ref object of OpenApiRestCall_21625435
proc url_ListTopicRules_21628803(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListTopicRules_21628802(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the rules for the specific topic.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
  ##             : The maximum number of results to return.
  ##   nextToken: JString
  ##            : A token used to retrieve the next value.
  ##   topic: JString
  ##        : The topic.
  ##   ruleDisabled: JBool
  ##               : Specifies whether the rule is disabled.
  section = newJObject()
  var valid_21628804 = query.getOrDefault("maxResults")
  valid_21628804 = validateParameter(valid_21628804, JInt, required = false,
                                   default = nil)
  if valid_21628804 != nil:
    section.add "maxResults", valid_21628804
  var valid_21628805 = query.getOrDefault("nextToken")
  valid_21628805 = validateParameter(valid_21628805, JString, required = false,
                                   default = nil)
  if valid_21628805 != nil:
    section.add "nextToken", valid_21628805
  var valid_21628806 = query.getOrDefault("topic")
  valid_21628806 = validateParameter(valid_21628806, JString, required = false,
                                   default = nil)
  if valid_21628806 != nil:
    section.add "topic", valid_21628806
  var valid_21628807 = query.getOrDefault("ruleDisabled")
  valid_21628807 = validateParameter(valid_21628807, JBool, required = false,
                                   default = nil)
  if valid_21628807 != nil:
    section.add "ruleDisabled", valid_21628807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628808 = header.getOrDefault("X-Amz-Date")
  valid_21628808 = validateParameter(valid_21628808, JString, required = false,
                                   default = nil)
  if valid_21628808 != nil:
    section.add "X-Amz-Date", valid_21628808
  var valid_21628809 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628809 = validateParameter(valid_21628809, JString, required = false,
                                   default = nil)
  if valid_21628809 != nil:
    section.add "X-Amz-Security-Token", valid_21628809
  var valid_21628810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628810 = validateParameter(valid_21628810, JString, required = false,
                                   default = nil)
  if valid_21628810 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628810
  var valid_21628811 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628811 = validateParameter(valid_21628811, JString, required = false,
                                   default = nil)
  if valid_21628811 != nil:
    section.add "X-Amz-Algorithm", valid_21628811
  var valid_21628812 = header.getOrDefault("X-Amz-Signature")
  valid_21628812 = validateParameter(valid_21628812, JString, required = false,
                                   default = nil)
  if valid_21628812 != nil:
    section.add "X-Amz-Signature", valid_21628812
  var valid_21628813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628813 = validateParameter(valid_21628813, JString, required = false,
                                   default = nil)
  if valid_21628813 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628813
  var valid_21628814 = header.getOrDefault("X-Amz-Credential")
  valid_21628814 = validateParameter(valid_21628814, JString, required = false,
                                   default = nil)
  if valid_21628814 != nil:
    section.add "X-Amz-Credential", valid_21628814
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628815: Call_ListTopicRules_21628801; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the rules for the specific topic.
  ## 
  let valid = call_21628815.validator(path, query, header, formData, body, _)
  let scheme = call_21628815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628815.makeUrl(scheme.get, call_21628815.host, call_21628815.base,
                               call_21628815.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628815, uri, valid, _)

proc call*(call_21628816: Call_ListTopicRules_21628801; maxResults: int = 0;
          nextToken: string = ""; topic: string = ""; ruleDisabled: bool = false): Recallable =
  ## listTopicRules
  ## Lists the rules for the specific topic.
  ##   maxResults: int
  ##             : The maximum number of results to return.
  ##   nextToken: string
  ##            : A token used to retrieve the next value.
  ##   topic: string
  ##        : The topic.
  ##   ruleDisabled: bool
  ##               : Specifies whether the rule is disabled.
  var query_21628817 = newJObject()
  add(query_21628817, "maxResults", newJInt(maxResults))
  add(query_21628817, "nextToken", newJString(nextToken))
  add(query_21628817, "topic", newJString(topic))
  add(query_21628817, "ruleDisabled", newJBool(ruleDisabled))
  result = call_21628816.call(nil, query_21628817, nil, nil, nil)

var listTopicRules* = Call_ListTopicRules_21628801(name: "listTopicRules",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/rules",
    validator: validate_ListTopicRules_21628802, base: "/",
    makeUrl: url_ListTopicRules_21628803, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetV2LoggingLevel_21628834 = ref object of OpenApiRestCall_21625435
proc url_SetV2LoggingLevel_21628836(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetV2LoggingLevel_21628835(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the logging level.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628837 = header.getOrDefault("X-Amz-Date")
  valid_21628837 = validateParameter(valid_21628837, JString, required = false,
                                   default = nil)
  if valid_21628837 != nil:
    section.add "X-Amz-Date", valid_21628837
  var valid_21628838 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628838 = validateParameter(valid_21628838, JString, required = false,
                                   default = nil)
  if valid_21628838 != nil:
    section.add "X-Amz-Security-Token", valid_21628838
  var valid_21628839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628839 = validateParameter(valid_21628839, JString, required = false,
                                   default = nil)
  if valid_21628839 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628839
  var valid_21628840 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628840 = validateParameter(valid_21628840, JString, required = false,
                                   default = nil)
  if valid_21628840 != nil:
    section.add "X-Amz-Algorithm", valid_21628840
  var valid_21628841 = header.getOrDefault("X-Amz-Signature")
  valid_21628841 = validateParameter(valid_21628841, JString, required = false,
                                   default = nil)
  if valid_21628841 != nil:
    section.add "X-Amz-Signature", valid_21628841
  var valid_21628842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628842 = validateParameter(valid_21628842, JString, required = false,
                                   default = nil)
  if valid_21628842 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628842
  var valid_21628843 = header.getOrDefault("X-Amz-Credential")
  valid_21628843 = validateParameter(valid_21628843, JString, required = false,
                                   default = nil)
  if valid_21628843 != nil:
    section.add "X-Amz-Credential", valid_21628843
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628845: Call_SetV2LoggingLevel_21628834; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the logging level.
  ## 
  let valid = call_21628845.validator(path, query, header, formData, body, _)
  let scheme = call_21628845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628845.makeUrl(scheme.get, call_21628845.host, call_21628845.base,
                               call_21628845.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628845, uri, valid, _)

proc call*(call_21628846: Call_SetV2LoggingLevel_21628834; body: JsonNode): Recallable =
  ## setV2LoggingLevel
  ## Sets the logging level.
  ##   body: JObject (required)
  var body_21628847 = newJObject()
  if body != nil:
    body_21628847 = body
  result = call_21628846.call(nil, nil, nil, nil, body_21628847)

var setV2LoggingLevel* = Call_SetV2LoggingLevel_21628834(name: "setV2LoggingLevel",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/v2LoggingLevel",
    validator: validate_SetV2LoggingLevel_21628835, base: "/",
    makeUrl: url_SetV2LoggingLevel_21628836, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListV2LoggingLevels_21628818 = ref object of OpenApiRestCall_21625435
proc url_ListV2LoggingLevels_21628820(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListV2LoggingLevels_21628819(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists logging levels.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   targetType: JString
  ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token used to get the next set of results, or <b>null</b> if there are no additional results.
  section = newJObject()
  var valid_21628821 = query.getOrDefault("targetType")
  valid_21628821 = validateParameter(valid_21628821, JString, required = false,
                                   default = newJString("DEFAULT"))
  if valid_21628821 != nil:
    section.add "targetType", valid_21628821
  var valid_21628822 = query.getOrDefault("maxResults")
  valid_21628822 = validateParameter(valid_21628822, JInt, required = false,
                                   default = nil)
  if valid_21628822 != nil:
    section.add "maxResults", valid_21628822
  var valid_21628823 = query.getOrDefault("nextToken")
  valid_21628823 = validateParameter(valid_21628823, JString, required = false,
                                   default = nil)
  if valid_21628823 != nil:
    section.add "nextToken", valid_21628823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628824 = header.getOrDefault("X-Amz-Date")
  valid_21628824 = validateParameter(valid_21628824, JString, required = false,
                                   default = nil)
  if valid_21628824 != nil:
    section.add "X-Amz-Date", valid_21628824
  var valid_21628825 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628825 = validateParameter(valid_21628825, JString, required = false,
                                   default = nil)
  if valid_21628825 != nil:
    section.add "X-Amz-Security-Token", valid_21628825
  var valid_21628826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628826 = validateParameter(valid_21628826, JString, required = false,
                                   default = nil)
  if valid_21628826 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628826
  var valid_21628827 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628827 = validateParameter(valid_21628827, JString, required = false,
                                   default = nil)
  if valid_21628827 != nil:
    section.add "X-Amz-Algorithm", valid_21628827
  var valid_21628828 = header.getOrDefault("X-Amz-Signature")
  valid_21628828 = validateParameter(valid_21628828, JString, required = false,
                                   default = nil)
  if valid_21628828 != nil:
    section.add "X-Amz-Signature", valid_21628828
  var valid_21628829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628829 = validateParameter(valid_21628829, JString, required = false,
                                   default = nil)
  if valid_21628829 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628829
  var valid_21628830 = header.getOrDefault("X-Amz-Credential")
  valid_21628830 = validateParameter(valid_21628830, JString, required = false,
                                   default = nil)
  if valid_21628830 != nil:
    section.add "X-Amz-Credential", valid_21628830
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628831: Call_ListV2LoggingLevels_21628818; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists logging levels.
  ## 
  let valid = call_21628831.validator(path, query, header, formData, body, _)
  let scheme = call_21628831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628831.makeUrl(scheme.get, call_21628831.host, call_21628831.base,
                               call_21628831.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628831, uri, valid, _)

proc call*(call_21628832: Call_ListV2LoggingLevels_21628818;
          targetType: string = "DEFAULT"; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listV2LoggingLevels
  ## Lists logging levels.
  ##   targetType: string
  ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token used to get the next set of results, or <b>null</b> if there are no additional results.
  var query_21628833 = newJObject()
  add(query_21628833, "targetType", newJString(targetType))
  add(query_21628833, "maxResults", newJInt(maxResults))
  add(query_21628833, "nextToken", newJString(nextToken))
  result = call_21628832.call(nil, query_21628833, nil, nil, nil)

var listV2LoggingLevels* = Call_ListV2LoggingLevels_21628818(
    name: "listV2LoggingLevels", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/v2LoggingLevel",
    validator: validate_ListV2LoggingLevels_21628819, base: "/",
    makeUrl: url_ListV2LoggingLevels_21628820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListViolationEvents_21628848 = ref object of OpenApiRestCall_21625435
proc url_ListViolationEvents_21628850(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListViolationEvents_21628849(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   thingName: JString
  ##            : A filter to limit results to those alerts caused by the specified thing.
  ##   endTime: JString (required)
  ##          : The end time for the alerts to be listed.
  ##   maxResults: JInt
  ##             : The maximum number of results to return at one time.
  ##   nextToken: JString
  ##            : The token for the next set of results.
  ##   securityProfileName: JString
  ##                      : A filter to limit results to those alerts generated by the specified security profile.
  ##   startTime: JString (required)
  ##            : The start time for the alerts to be listed.
  section = newJObject()
  var valid_21628851 = query.getOrDefault("thingName")
  valid_21628851 = validateParameter(valid_21628851, JString, required = false,
                                   default = nil)
  if valid_21628851 != nil:
    section.add "thingName", valid_21628851
  assert query != nil, "query argument is necessary due to required `endTime` field"
  var valid_21628852 = query.getOrDefault("endTime")
  valid_21628852 = validateParameter(valid_21628852, JString, required = true,
                                   default = nil)
  if valid_21628852 != nil:
    section.add "endTime", valid_21628852
  var valid_21628853 = query.getOrDefault("maxResults")
  valid_21628853 = validateParameter(valid_21628853, JInt, required = false,
                                   default = nil)
  if valid_21628853 != nil:
    section.add "maxResults", valid_21628853
  var valid_21628854 = query.getOrDefault("nextToken")
  valid_21628854 = validateParameter(valid_21628854, JString, required = false,
                                   default = nil)
  if valid_21628854 != nil:
    section.add "nextToken", valid_21628854
  var valid_21628855 = query.getOrDefault("securityProfileName")
  valid_21628855 = validateParameter(valid_21628855, JString, required = false,
                                   default = nil)
  if valid_21628855 != nil:
    section.add "securityProfileName", valid_21628855
  var valid_21628856 = query.getOrDefault("startTime")
  valid_21628856 = validateParameter(valid_21628856, JString, required = true,
                                   default = nil)
  if valid_21628856 != nil:
    section.add "startTime", valid_21628856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628857 = header.getOrDefault("X-Amz-Date")
  valid_21628857 = validateParameter(valid_21628857, JString, required = false,
                                   default = nil)
  if valid_21628857 != nil:
    section.add "X-Amz-Date", valid_21628857
  var valid_21628858 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628858 = validateParameter(valid_21628858, JString, required = false,
                                   default = nil)
  if valid_21628858 != nil:
    section.add "X-Amz-Security-Token", valid_21628858
  var valid_21628859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628859 = validateParameter(valid_21628859, JString, required = false,
                                   default = nil)
  if valid_21628859 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628859
  var valid_21628860 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628860 = validateParameter(valid_21628860, JString, required = false,
                                   default = nil)
  if valid_21628860 != nil:
    section.add "X-Amz-Algorithm", valid_21628860
  var valid_21628861 = header.getOrDefault("X-Amz-Signature")
  valid_21628861 = validateParameter(valid_21628861, JString, required = false,
                                   default = nil)
  if valid_21628861 != nil:
    section.add "X-Amz-Signature", valid_21628861
  var valid_21628862 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628862 = validateParameter(valid_21628862, JString, required = false,
                                   default = nil)
  if valid_21628862 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628862
  var valid_21628863 = header.getOrDefault("X-Amz-Credential")
  valid_21628863 = validateParameter(valid_21628863, JString, required = false,
                                   default = nil)
  if valid_21628863 != nil:
    section.add "X-Amz-Credential", valid_21628863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628864: Call_ListViolationEvents_21628848; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
  ## 
  let valid = call_21628864.validator(path, query, header, formData, body, _)
  let scheme = call_21628864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628864.makeUrl(scheme.get, call_21628864.host, call_21628864.base,
                               call_21628864.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628864, uri, valid, _)

proc call*(call_21628865: Call_ListViolationEvents_21628848; endTime: string;
          startTime: string; thingName: string = ""; maxResults: int = 0;
          nextToken: string = ""; securityProfileName: string = ""): Recallable =
  ## listViolationEvents
  ## Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
  ##   thingName: string
  ##            : A filter to limit results to those alerts caused by the specified thing.
  ##   endTime: string (required)
  ##          : The end time for the alerts to be listed.
  ##   maxResults: int
  ##             : The maximum number of results to return at one time.
  ##   nextToken: string
  ##            : The token for the next set of results.
  ##   securityProfileName: string
  ##                      : A filter to limit results to those alerts generated by the specified security profile.
  ##   startTime: string (required)
  ##            : The start time for the alerts to be listed.
  var query_21628866 = newJObject()
  add(query_21628866, "thingName", newJString(thingName))
  add(query_21628866, "endTime", newJString(endTime))
  add(query_21628866, "maxResults", newJInt(maxResults))
  add(query_21628866, "nextToken", newJString(nextToken))
  add(query_21628866, "securityProfileName", newJString(securityProfileName))
  add(query_21628866, "startTime", newJString(startTime))
  result = call_21628865.call(nil, query_21628866, nil, nil, nil)

var listViolationEvents* = Call_ListViolationEvents_21628848(
    name: "listViolationEvents", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/violation-events#startTime&endTime",
    validator: validate_ListViolationEvents_21628849, base: "/",
    makeUrl: url_ListViolationEvents_21628850,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RegisterCACertificate_21628867 = ref object of OpenApiRestCall_21625435
proc url_RegisterCACertificate_21628869(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RegisterCACertificate_21628868(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
  ##              : A boolean value that specifies if the CA certificate is set to active.
  ##   allowAutoRegistration: JBool
  ##                        : Allows this CA certificate to be used for auto registration of device certificates.
  section = newJObject()
  var valid_21628870 = query.getOrDefault("setAsActive")
  valid_21628870 = validateParameter(valid_21628870, JBool, required = false,
                                   default = nil)
  if valid_21628870 != nil:
    section.add "setAsActive", valid_21628870
  var valid_21628871 = query.getOrDefault("allowAutoRegistration")
  valid_21628871 = validateParameter(valid_21628871, JBool, required = false,
                                   default = nil)
  if valid_21628871 != nil:
    section.add "allowAutoRegistration", valid_21628871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628872 = header.getOrDefault("X-Amz-Date")
  valid_21628872 = validateParameter(valid_21628872, JString, required = false,
                                   default = nil)
  if valid_21628872 != nil:
    section.add "X-Amz-Date", valid_21628872
  var valid_21628873 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628873 = validateParameter(valid_21628873, JString, required = false,
                                   default = nil)
  if valid_21628873 != nil:
    section.add "X-Amz-Security-Token", valid_21628873
  var valid_21628874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628874 = validateParameter(valid_21628874, JString, required = false,
                                   default = nil)
  if valid_21628874 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628874
  var valid_21628875 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628875 = validateParameter(valid_21628875, JString, required = false,
                                   default = nil)
  if valid_21628875 != nil:
    section.add "X-Amz-Algorithm", valid_21628875
  var valid_21628876 = header.getOrDefault("X-Amz-Signature")
  valid_21628876 = validateParameter(valid_21628876, JString, required = false,
                                   default = nil)
  if valid_21628876 != nil:
    section.add "X-Amz-Signature", valid_21628876
  var valid_21628877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628877 = validateParameter(valid_21628877, JString, required = false,
                                   default = nil)
  if valid_21628877 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628877
  var valid_21628878 = header.getOrDefault("X-Amz-Credential")
  valid_21628878 = validateParameter(valid_21628878, JString, required = false,
                                   default = nil)
  if valid_21628878 != nil:
    section.add "X-Amz-Credential", valid_21628878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628880: Call_RegisterCACertificate_21628867;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
  ## 
  let valid = call_21628880.validator(path, query, header, formData, body, _)
  let scheme = call_21628880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628880.makeUrl(scheme.get, call_21628880.host, call_21628880.base,
                               call_21628880.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628880, uri, valid, _)

proc call*(call_21628881: Call_RegisterCACertificate_21628867; body: JsonNode;
          setAsActive: bool = false; allowAutoRegistration: bool = false): Recallable =
  ## registerCACertificate
  ## Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
  ##   setAsActive: bool
  ##              : A boolean value that specifies if the CA certificate is set to active.
  ##   body: JObject (required)
  ##   allowAutoRegistration: bool
  ##                        : Allows this CA certificate to be used for auto registration of device certificates.
  var query_21628882 = newJObject()
  var body_21628883 = newJObject()
  add(query_21628882, "setAsActive", newJBool(setAsActive))
  if body != nil:
    body_21628883 = body
  add(query_21628882, "allowAutoRegistration", newJBool(allowAutoRegistration))
  result = call_21628881.call(nil, query_21628882, nil, nil, body_21628883)

var registerCACertificate* = Call_RegisterCACertificate_21628867(
    name: "registerCACertificate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/cacertificate",
    validator: validate_RegisterCACertificate_21628868, base: "/",
    makeUrl: url_RegisterCACertificate_21628869,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RegisterCertificate_21628884 = ref object of OpenApiRestCall_21625435
proc url_RegisterCertificate_21628886(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RegisterCertificate_21628885(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
  ##              : A boolean value that specifies if the certificate is set to active.
  section = newJObject()
  var valid_21628887 = query.getOrDefault("setAsActive")
  valid_21628887 = validateParameter(valid_21628887, JBool, required = false,
                                   default = nil)
  if valid_21628887 != nil:
    section.add "setAsActive", valid_21628887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628888 = header.getOrDefault("X-Amz-Date")
  valid_21628888 = validateParameter(valid_21628888, JString, required = false,
                                   default = nil)
  if valid_21628888 != nil:
    section.add "X-Amz-Date", valid_21628888
  var valid_21628889 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628889 = validateParameter(valid_21628889, JString, required = false,
                                   default = nil)
  if valid_21628889 != nil:
    section.add "X-Amz-Security-Token", valid_21628889
  var valid_21628890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628890 = validateParameter(valid_21628890, JString, required = false,
                                   default = nil)
  if valid_21628890 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628890
  var valid_21628891 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628891 = validateParameter(valid_21628891, JString, required = false,
                                   default = nil)
  if valid_21628891 != nil:
    section.add "X-Amz-Algorithm", valid_21628891
  var valid_21628892 = header.getOrDefault("X-Amz-Signature")
  valid_21628892 = validateParameter(valid_21628892, JString, required = false,
                                   default = nil)
  if valid_21628892 != nil:
    section.add "X-Amz-Signature", valid_21628892
  var valid_21628893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628893 = validateParameter(valid_21628893, JString, required = false,
                                   default = nil)
  if valid_21628893 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628893
  var valid_21628894 = header.getOrDefault("X-Amz-Credential")
  valid_21628894 = validateParameter(valid_21628894, JString, required = false,
                                   default = nil)
  if valid_21628894 != nil:
    section.add "X-Amz-Credential", valid_21628894
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628896: Call_RegisterCertificate_21628884; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
  ## 
  let valid = call_21628896.validator(path, query, header, formData, body, _)
  let scheme = call_21628896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628896.makeUrl(scheme.get, call_21628896.host, call_21628896.base,
                               call_21628896.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628896, uri, valid, _)

proc call*(call_21628897: Call_RegisterCertificate_21628884; body: JsonNode;
          setAsActive: bool = false): Recallable =
  ## registerCertificate
  ## Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
  ##   setAsActive: bool
  ##              : A boolean value that specifies if the certificate is set to active.
  ##   body: JObject (required)
  var query_21628898 = newJObject()
  var body_21628899 = newJObject()
  add(query_21628898, "setAsActive", newJBool(setAsActive))
  if body != nil:
    body_21628899 = body
  result = call_21628897.call(nil, query_21628898, nil, nil, body_21628899)

var registerCertificate* = Call_RegisterCertificate_21628884(
    name: "registerCertificate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/certificate/register",
    validator: validate_RegisterCertificate_21628885, base: "/",
    makeUrl: url_RegisterCertificate_21628886,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RejectCertificateTransfer_21628900 = ref object of OpenApiRestCall_21625435
proc url_RejectCertificateTransfer_21628902(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/reject-certificate-transfer/"),
               (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_RejectCertificateTransfer_21628901(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `certificateId` field"
  var valid_21628903 = path.getOrDefault("certificateId")
  valid_21628903 = validateParameter(valid_21628903, JString, required = true,
                                   default = nil)
  if valid_21628903 != nil:
    section.add "certificateId", valid_21628903
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628904 = header.getOrDefault("X-Amz-Date")
  valid_21628904 = validateParameter(valid_21628904, JString, required = false,
                                   default = nil)
  if valid_21628904 != nil:
    section.add "X-Amz-Date", valid_21628904
  var valid_21628905 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628905 = validateParameter(valid_21628905, JString, required = false,
                                   default = nil)
  if valid_21628905 != nil:
    section.add "X-Amz-Security-Token", valid_21628905
  var valid_21628906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628906 = validateParameter(valid_21628906, JString, required = false,
                                   default = nil)
  if valid_21628906 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628906
  var valid_21628907 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628907 = validateParameter(valid_21628907, JString, required = false,
                                   default = nil)
  if valid_21628907 != nil:
    section.add "X-Amz-Algorithm", valid_21628907
  var valid_21628908 = header.getOrDefault("X-Amz-Signature")
  valid_21628908 = validateParameter(valid_21628908, JString, required = false,
                                   default = nil)
  if valid_21628908 != nil:
    section.add "X-Amz-Signature", valid_21628908
  var valid_21628909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628909 = validateParameter(valid_21628909, JString, required = false,
                                   default = nil)
  if valid_21628909 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628909
  var valid_21628910 = header.getOrDefault("X-Amz-Credential")
  valid_21628910 = validateParameter(valid_21628910, JString, required = false,
                                   default = nil)
  if valid_21628910 != nil:
    section.add "X-Amz-Credential", valid_21628910
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628912: Call_RejectCertificateTransfer_21628900;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>
  ## 
  let valid = call_21628912.validator(path, query, header, formData, body, _)
  let scheme = call_21628912.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628912.makeUrl(scheme.get, call_21628912.host, call_21628912.base,
                               call_21628912.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628912, uri, valid, _)

proc call*(call_21628913: Call_RejectCertificateTransfer_21628900;
          certificateId: string; body: JsonNode): Recallable =
  ## rejectCertificateTransfer
  ## <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>
  ##   certificateId: string (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  ##   body: JObject (required)
  var path_21628914 = newJObject()
  var body_21628915 = newJObject()
  add(path_21628914, "certificateId", newJString(certificateId))
  if body != nil:
    body_21628915 = body
  result = call_21628913.call(path_21628914, nil, nil, nil, body_21628915)

var rejectCertificateTransfer* = Call_RejectCertificateTransfer_21628900(
    name: "rejectCertificateTransfer", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/reject-certificate-transfer/{certificateId}",
    validator: validate_RejectCertificateTransfer_21628901, base: "/",
    makeUrl: url_RejectCertificateTransfer_21628902,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveThingFromBillingGroup_21628916 = ref object of OpenApiRestCall_21625435
proc url_RemoveThingFromBillingGroup_21628918(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RemoveThingFromBillingGroup_21628917(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes the given thing from the billing group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628919 = header.getOrDefault("X-Amz-Date")
  valid_21628919 = validateParameter(valid_21628919, JString, required = false,
                                   default = nil)
  if valid_21628919 != nil:
    section.add "X-Amz-Date", valid_21628919
  var valid_21628920 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628920 = validateParameter(valid_21628920, JString, required = false,
                                   default = nil)
  if valid_21628920 != nil:
    section.add "X-Amz-Security-Token", valid_21628920
  var valid_21628921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628921 = validateParameter(valid_21628921, JString, required = false,
                                   default = nil)
  if valid_21628921 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628921
  var valid_21628922 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628922 = validateParameter(valid_21628922, JString, required = false,
                                   default = nil)
  if valid_21628922 != nil:
    section.add "X-Amz-Algorithm", valid_21628922
  var valid_21628923 = header.getOrDefault("X-Amz-Signature")
  valid_21628923 = validateParameter(valid_21628923, JString, required = false,
                                   default = nil)
  if valid_21628923 != nil:
    section.add "X-Amz-Signature", valid_21628923
  var valid_21628924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628924 = validateParameter(valid_21628924, JString, required = false,
                                   default = nil)
  if valid_21628924 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628924
  var valid_21628925 = header.getOrDefault("X-Amz-Credential")
  valid_21628925 = validateParameter(valid_21628925, JString, required = false,
                                   default = nil)
  if valid_21628925 != nil:
    section.add "X-Amz-Credential", valid_21628925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628927: Call_RemoveThingFromBillingGroup_21628916;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the given thing from the billing group.
  ## 
  let valid = call_21628927.validator(path, query, header, formData, body, _)
  let scheme = call_21628927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628927.makeUrl(scheme.get, call_21628927.host, call_21628927.base,
                               call_21628927.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628927, uri, valid, _)

proc call*(call_21628928: Call_RemoveThingFromBillingGroup_21628916; body: JsonNode): Recallable =
  ## removeThingFromBillingGroup
  ## Removes the given thing from the billing group.
  ##   body: JObject (required)
  var body_21628929 = newJObject()
  if body != nil:
    body_21628929 = body
  result = call_21628928.call(nil, nil, nil, nil, body_21628929)

var removeThingFromBillingGroup* = Call_RemoveThingFromBillingGroup_21628916(
    name: "removeThingFromBillingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/billing-groups/removeThingFromBillingGroup",
    validator: validate_RemoveThingFromBillingGroup_21628917, base: "/",
    makeUrl: url_RemoveThingFromBillingGroup_21628918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveThingFromThingGroup_21628930 = ref object of OpenApiRestCall_21625435
proc url_RemoveThingFromThingGroup_21628932(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RemoveThingFromThingGroup_21628931(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Remove the specified thing from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628933 = header.getOrDefault("X-Amz-Date")
  valid_21628933 = validateParameter(valid_21628933, JString, required = false,
                                   default = nil)
  if valid_21628933 != nil:
    section.add "X-Amz-Date", valid_21628933
  var valid_21628934 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628934 = validateParameter(valid_21628934, JString, required = false,
                                   default = nil)
  if valid_21628934 != nil:
    section.add "X-Amz-Security-Token", valid_21628934
  var valid_21628935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628935 = validateParameter(valid_21628935, JString, required = false,
                                   default = nil)
  if valid_21628935 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628935
  var valid_21628936 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628936 = validateParameter(valid_21628936, JString, required = false,
                                   default = nil)
  if valid_21628936 != nil:
    section.add "X-Amz-Algorithm", valid_21628936
  var valid_21628937 = header.getOrDefault("X-Amz-Signature")
  valid_21628937 = validateParameter(valid_21628937, JString, required = false,
                                   default = nil)
  if valid_21628937 != nil:
    section.add "X-Amz-Signature", valid_21628937
  var valid_21628938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628938 = validateParameter(valid_21628938, JString, required = false,
                                   default = nil)
  if valid_21628938 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628938
  var valid_21628939 = header.getOrDefault("X-Amz-Credential")
  valid_21628939 = validateParameter(valid_21628939, JString, required = false,
                                   default = nil)
  if valid_21628939 != nil:
    section.add "X-Amz-Credential", valid_21628939
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628941: Call_RemoveThingFromThingGroup_21628930;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Remove the specified thing from the specified group.
  ## 
  let valid = call_21628941.validator(path, query, header, formData, body, _)
  let scheme = call_21628941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628941.makeUrl(scheme.get, call_21628941.host, call_21628941.base,
                               call_21628941.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628941, uri, valid, _)

proc call*(call_21628942: Call_RemoveThingFromThingGroup_21628930; body: JsonNode): Recallable =
  ## removeThingFromThingGroup
  ## Remove the specified thing from the specified group.
  ##   body: JObject (required)
  var body_21628943 = newJObject()
  if body != nil:
    body_21628943 = body
  result = call_21628942.call(nil, nil, nil, nil, body_21628943)

var removeThingFromThingGroup* = Call_RemoveThingFromThingGroup_21628930(
    name: "removeThingFromThingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/thing-groups/removeThingFromThingGroup",
    validator: validate_RemoveThingFromThingGroup_21628931, base: "/",
    makeUrl: url_RemoveThingFromThingGroup_21628932,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SearchIndex_21628944 = ref object of OpenApiRestCall_21625435
proc url_SearchIndex_21628946(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SearchIndex_21628945(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## The query search index.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628947 = header.getOrDefault("X-Amz-Date")
  valid_21628947 = validateParameter(valid_21628947, JString, required = false,
                                   default = nil)
  if valid_21628947 != nil:
    section.add "X-Amz-Date", valid_21628947
  var valid_21628948 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628948 = validateParameter(valid_21628948, JString, required = false,
                                   default = nil)
  if valid_21628948 != nil:
    section.add "X-Amz-Security-Token", valid_21628948
  var valid_21628949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628949 = validateParameter(valid_21628949, JString, required = false,
                                   default = nil)
  if valid_21628949 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628949
  var valid_21628950 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628950 = validateParameter(valid_21628950, JString, required = false,
                                   default = nil)
  if valid_21628950 != nil:
    section.add "X-Amz-Algorithm", valid_21628950
  var valid_21628951 = header.getOrDefault("X-Amz-Signature")
  valid_21628951 = validateParameter(valid_21628951, JString, required = false,
                                   default = nil)
  if valid_21628951 != nil:
    section.add "X-Amz-Signature", valid_21628951
  var valid_21628952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628952 = validateParameter(valid_21628952, JString, required = false,
                                   default = nil)
  if valid_21628952 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628952
  var valid_21628953 = header.getOrDefault("X-Amz-Credential")
  valid_21628953 = validateParameter(valid_21628953, JString, required = false,
                                   default = nil)
  if valid_21628953 != nil:
    section.add "X-Amz-Credential", valid_21628953
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628955: Call_SearchIndex_21628944; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## The query search index.
  ## 
  let valid = call_21628955.validator(path, query, header, formData, body, _)
  let scheme = call_21628955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628955.makeUrl(scheme.get, call_21628955.host, call_21628955.base,
                               call_21628955.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628955, uri, valid, _)

proc call*(call_21628956: Call_SearchIndex_21628944; body: JsonNode): Recallable =
  ## searchIndex
  ## The query search index.
  ##   body: JObject (required)
  var body_21628957 = newJObject()
  if body != nil:
    body_21628957 = body
  result = call_21628956.call(nil, nil, nil, nil, body_21628957)

var searchIndex* = Call_SearchIndex_21628944(name: "searchIndex",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/indices/search",
    validator: validate_SearchIndex_21628945, base: "/", makeUrl: url_SearchIndex_21628946,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartOnDemandAuditTask_21628958 = ref object of OpenApiRestCall_21625435
proc url_StartOnDemandAuditTask_21628960(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_StartOnDemandAuditTask_21628959(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts an on-demand Device Defender audit.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628961 = header.getOrDefault("X-Amz-Date")
  valid_21628961 = validateParameter(valid_21628961, JString, required = false,
                                   default = nil)
  if valid_21628961 != nil:
    section.add "X-Amz-Date", valid_21628961
  var valid_21628962 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628962 = validateParameter(valid_21628962, JString, required = false,
                                   default = nil)
  if valid_21628962 != nil:
    section.add "X-Amz-Security-Token", valid_21628962
  var valid_21628963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628963 = validateParameter(valid_21628963, JString, required = false,
                                   default = nil)
  if valid_21628963 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628963
  var valid_21628964 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628964 = validateParameter(valid_21628964, JString, required = false,
                                   default = nil)
  if valid_21628964 != nil:
    section.add "X-Amz-Algorithm", valid_21628964
  var valid_21628965 = header.getOrDefault("X-Amz-Signature")
  valid_21628965 = validateParameter(valid_21628965, JString, required = false,
                                   default = nil)
  if valid_21628965 != nil:
    section.add "X-Amz-Signature", valid_21628965
  var valid_21628966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628966 = validateParameter(valid_21628966, JString, required = false,
                                   default = nil)
  if valid_21628966 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628966
  var valid_21628967 = header.getOrDefault("X-Amz-Credential")
  valid_21628967 = validateParameter(valid_21628967, JString, required = false,
                                   default = nil)
  if valid_21628967 != nil:
    section.add "X-Amz-Credential", valid_21628967
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628969: Call_StartOnDemandAuditTask_21628958;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts an on-demand Device Defender audit.
  ## 
  let valid = call_21628969.validator(path, query, header, formData, body, _)
  let scheme = call_21628969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628969.makeUrl(scheme.get, call_21628969.host, call_21628969.base,
                               call_21628969.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628969, uri, valid, _)

proc call*(call_21628970: Call_StartOnDemandAuditTask_21628958; body: JsonNode): Recallable =
  ## startOnDemandAuditTask
  ## Starts an on-demand Device Defender audit.
  ##   body: JObject (required)
  var body_21628971 = newJObject()
  if body != nil:
    body_21628971 = body
  result = call_21628970.call(nil, nil, nil, nil, body_21628971)

var startOnDemandAuditTask* = Call_StartOnDemandAuditTask_21628958(
    name: "startOnDemandAuditTask", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/audit/tasks",
    validator: validate_StartOnDemandAuditTask_21628959, base: "/",
    makeUrl: url_StartOnDemandAuditTask_21628960,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StopThingRegistrationTask_21628972 = ref object of OpenApiRestCall_21625435
proc url_StopThingRegistrationTask_21628974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-registration-tasks/"),
               (kind: VariableSegment, value: "taskId"),
               (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_StopThingRegistrationTask_21628973(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels a bulk thing provisioning task.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
  ##         : The bulk thing provisioning task ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `taskId` field"
  var valid_21628975 = path.getOrDefault("taskId")
  valid_21628975 = validateParameter(valid_21628975, JString, required = true,
                                   default = nil)
  if valid_21628975 != nil:
    section.add "taskId", valid_21628975
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628976 = header.getOrDefault("X-Amz-Date")
  valid_21628976 = validateParameter(valid_21628976, JString, required = false,
                                   default = nil)
  if valid_21628976 != nil:
    section.add "X-Amz-Date", valid_21628976
  var valid_21628977 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628977 = validateParameter(valid_21628977, JString, required = false,
                                   default = nil)
  if valid_21628977 != nil:
    section.add "X-Amz-Security-Token", valid_21628977
  var valid_21628978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628978 = validateParameter(valid_21628978, JString, required = false,
                                   default = nil)
  if valid_21628978 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628978
  var valid_21628979 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628979 = validateParameter(valid_21628979, JString, required = false,
                                   default = nil)
  if valid_21628979 != nil:
    section.add "X-Amz-Algorithm", valid_21628979
  var valid_21628980 = header.getOrDefault("X-Amz-Signature")
  valid_21628980 = validateParameter(valid_21628980, JString, required = false,
                                   default = nil)
  if valid_21628980 != nil:
    section.add "X-Amz-Signature", valid_21628980
  var valid_21628981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628981 = validateParameter(valid_21628981, JString, required = false,
                                   default = nil)
  if valid_21628981 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628981
  var valid_21628982 = header.getOrDefault("X-Amz-Credential")
  valid_21628982 = validateParameter(valid_21628982, JString, required = false,
                                   default = nil)
  if valid_21628982 != nil:
    section.add "X-Amz-Credential", valid_21628982
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628983: Call_StopThingRegistrationTask_21628972;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a bulk thing provisioning task.
  ## 
  let valid = call_21628983.validator(path, query, header, formData, body, _)
  let scheme = call_21628983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628983.makeUrl(scheme.get, call_21628983.host, call_21628983.base,
                               call_21628983.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628983, uri, valid, _)

proc call*(call_21628984: Call_StopThingRegistrationTask_21628972; taskId: string): Recallable =
  ## stopThingRegistrationTask
  ## Cancels a bulk thing provisioning task.
  ##   taskId: string (required)
  ##         : The bulk thing provisioning task ID.
  var path_21628985 = newJObject()
  add(path_21628985, "taskId", newJString(taskId))
  result = call_21628984.call(path_21628985, nil, nil, nil, nil)

var stopThingRegistrationTask* = Call_StopThingRegistrationTask_21628972(
    name: "stopThingRegistrationTask", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/thing-registration-tasks/{taskId}/cancel",
    validator: validate_StopThingRegistrationTask_21628973, base: "/",
    makeUrl: url_StopThingRegistrationTask_21628974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TagResource_21628986 = ref object of OpenApiRestCall_21625435
proc url_TagResource_21628988(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_TagResource_21628987(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628989 = header.getOrDefault("X-Amz-Date")
  valid_21628989 = validateParameter(valid_21628989, JString, required = false,
                                   default = nil)
  if valid_21628989 != nil:
    section.add "X-Amz-Date", valid_21628989
  var valid_21628990 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628990 = validateParameter(valid_21628990, JString, required = false,
                                   default = nil)
  if valid_21628990 != nil:
    section.add "X-Amz-Security-Token", valid_21628990
  var valid_21628991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628991 = validateParameter(valid_21628991, JString, required = false,
                                   default = nil)
  if valid_21628991 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628991
  var valid_21628992 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628992 = validateParameter(valid_21628992, JString, required = false,
                                   default = nil)
  if valid_21628992 != nil:
    section.add "X-Amz-Algorithm", valid_21628992
  var valid_21628993 = header.getOrDefault("X-Amz-Signature")
  valid_21628993 = validateParameter(valid_21628993, JString, required = false,
                                   default = nil)
  if valid_21628993 != nil:
    section.add "X-Amz-Signature", valid_21628993
  var valid_21628994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628994 = validateParameter(valid_21628994, JString, required = false,
                                   default = nil)
  if valid_21628994 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628994
  var valid_21628995 = header.getOrDefault("X-Amz-Credential")
  valid_21628995 = validateParameter(valid_21628995, JString, required = false,
                                   default = nil)
  if valid_21628995 != nil:
    section.add "X-Amz-Credential", valid_21628995
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21628997: Call_TagResource_21628986; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
  ## 
  let valid = call_21628997.validator(path, query, header, formData, body, _)
  let scheme = call_21628997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628997.makeUrl(scheme.get, call_21628997.host, call_21628997.base,
                               call_21628997.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628997, uri, valid, _)

proc call*(call_21628998: Call_TagResource_21628986; body: JsonNode): Recallable =
  ## tagResource
  ## Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
  ##   body: JObject (required)
  var body_21628999 = newJObject()
  if body != nil:
    body_21628999 = body
  result = call_21628998.call(nil, nil, nil, nil, body_21628999)

var tagResource* = Call_TagResource_21628986(name: "tagResource",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/tags",
    validator: validate_TagResource_21628987, base: "/", makeUrl: url_TagResource_21628988,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TestAuthorization_21629000 = ref object of OpenApiRestCall_21625435
proc url_TestAuthorization_21629002(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_TestAuthorization_21629001(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   clientId: JString
  ##           : The MQTT client ID.
  section = newJObject()
  var valid_21629003 = query.getOrDefault("clientId")
  valid_21629003 = validateParameter(valid_21629003, JString, required = false,
                                   default = nil)
  if valid_21629003 != nil:
    section.add "clientId", valid_21629003
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629004 = header.getOrDefault("X-Amz-Date")
  valid_21629004 = validateParameter(valid_21629004, JString, required = false,
                                   default = nil)
  if valid_21629004 != nil:
    section.add "X-Amz-Date", valid_21629004
  var valid_21629005 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629005 = validateParameter(valid_21629005, JString, required = false,
                                   default = nil)
  if valid_21629005 != nil:
    section.add "X-Amz-Security-Token", valid_21629005
  var valid_21629006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629006 = validateParameter(valid_21629006, JString, required = false,
                                   default = nil)
  if valid_21629006 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629006
  var valid_21629007 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629007 = validateParameter(valid_21629007, JString, required = false,
                                   default = nil)
  if valid_21629007 != nil:
    section.add "X-Amz-Algorithm", valid_21629007
  var valid_21629008 = header.getOrDefault("X-Amz-Signature")
  valid_21629008 = validateParameter(valid_21629008, JString, required = false,
                                   default = nil)
  if valid_21629008 != nil:
    section.add "X-Amz-Signature", valid_21629008
  var valid_21629009 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629009 = validateParameter(valid_21629009, JString, required = false,
                                   default = nil)
  if valid_21629009 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629009
  var valid_21629010 = header.getOrDefault("X-Amz-Credential")
  valid_21629010 = validateParameter(valid_21629010, JString, required = false,
                                   default = nil)
  if valid_21629010 != nil:
    section.add "X-Amz-Credential", valid_21629010
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21629012: Call_TestAuthorization_21629000; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.
  ## 
  let valid = call_21629012.validator(path, query, header, formData, body, _)
  let scheme = call_21629012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629012.makeUrl(scheme.get, call_21629012.host, call_21629012.base,
                               call_21629012.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629012, uri, valid, _)

proc call*(call_21629013: Call_TestAuthorization_21629000; body: JsonNode;
          clientId: string = ""): Recallable =
  ## testAuthorization
  ## Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.
  ##   clientId: string
  ##           : The MQTT client ID.
  ##   body: JObject (required)
  var query_21629014 = newJObject()
  var body_21629015 = newJObject()
  add(query_21629014, "clientId", newJString(clientId))
  if body != nil:
    body_21629015 = body
  result = call_21629013.call(nil, query_21629014, nil, nil, body_21629015)

var testAuthorization* = Call_TestAuthorization_21629000(name: "testAuthorization",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/test-authorization", validator: validate_TestAuthorization_21629001,
    base: "/", makeUrl: url_TestAuthorization_21629002,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TestInvokeAuthorizer_21629016 = ref object of OpenApiRestCall_21625435
proc url_TestInvokeAuthorizer_21629018(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path, "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
               (kind: VariableSegment, value: "authorizerName"),
               (kind: ConstantSegment, value: "/test")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_TestInvokeAuthorizer_21629017(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
  ##                 : The custom authorizer name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `authorizerName` field"
  var valid_21629019 = path.getOrDefault("authorizerName")
  valid_21629019 = validateParameter(valid_21629019, JString, required = true,
                                   default = nil)
  if valid_21629019 != nil:
    section.add "authorizerName", valid_21629019
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629020 = header.getOrDefault("X-Amz-Date")
  valid_21629020 = validateParameter(valid_21629020, JString, required = false,
                                   default = nil)
  if valid_21629020 != nil:
    section.add "X-Amz-Date", valid_21629020
  var valid_21629021 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629021 = validateParameter(valid_21629021, JString, required = false,
                                   default = nil)
  if valid_21629021 != nil:
    section.add "X-Amz-Security-Token", valid_21629021
  var valid_21629022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629022 = validateParameter(valid_21629022, JString, required = false,
                                   default = nil)
  if valid_21629022 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629022
  var valid_21629023 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629023 = validateParameter(valid_21629023, JString, required = false,
                                   default = nil)
  if valid_21629023 != nil:
    section.add "X-Amz-Algorithm", valid_21629023
  var valid_21629024 = header.getOrDefault("X-Amz-Signature")
  valid_21629024 = validateParameter(valid_21629024, JString, required = false,
                                   default = nil)
  if valid_21629024 != nil:
    section.add "X-Amz-Signature", valid_21629024
  var valid_21629025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629025 = validateParameter(valid_21629025, JString, required = false,
                                   default = nil)
  if valid_21629025 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629025
  var valid_21629026 = header.getOrDefault("X-Amz-Credential")
  valid_21629026 = validateParameter(valid_21629026, JString, required = false,
                                   default = nil)
  if valid_21629026 != nil:
    section.add "X-Amz-Credential", valid_21629026
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21629028: Call_TestInvokeAuthorizer_21629016; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.
  ## 
  let valid = call_21629028.validator(path, query, header, formData, body, _)
  let scheme = call_21629028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629028.makeUrl(scheme.get, call_21629028.host, call_21629028.base,
                               call_21629028.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629028, uri, valid, _)

proc call*(call_21629029: Call_TestInvokeAuthorizer_21629016;
          authorizerName: string; body: JsonNode): Recallable =
  ## testInvokeAuthorizer
  ## Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.
  ##   authorizerName: string (required)
  ##                 : The custom authorizer name.
  ##   body: JObject (required)
  var path_21629030 = newJObject()
  var body_21629031 = newJObject()
  add(path_21629030, "authorizerName", newJString(authorizerName))
  if body != nil:
    body_21629031 = body
  result = call_21629029.call(path_21629030, nil, nil, nil, body_21629031)

var testInvokeAuthorizer* = Call_TestInvokeAuthorizer_21629016(
    name: "testInvokeAuthorizer", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/authorizer/{authorizerName}/test",
    validator: validate_TestInvokeAuthorizer_21629017, base: "/",
    makeUrl: url_TestInvokeAuthorizer_21629018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TransferCertificate_21629032 = ref object of OpenApiRestCall_21625435
proc url_TransferCertificate_21629034(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/transfer-certificate/"),
               (kind: VariableSegment, value: "certificateId"),
               (kind: ConstantSegment, value: "#targetAwsAccount")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_TransferCertificate_21629033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `certificateId` field"
  var valid_21629035 = path.getOrDefault("certificateId")
  valid_21629035 = validateParameter(valid_21629035, JString, required = true,
                                   default = nil)
  if valid_21629035 != nil:
    section.add "certificateId", valid_21629035
  result.add "path", section
  ## parameters in `query` object:
  ##   targetAwsAccount: JString (required)
  ##                   : The AWS account.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `targetAwsAccount` field"
  var valid_21629036 = query.getOrDefault("targetAwsAccount")
  valid_21629036 = validateParameter(valid_21629036, JString, required = true,
                                   default = nil)
  if valid_21629036 != nil:
    section.add "targetAwsAccount", valid_21629036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629037 = header.getOrDefault("X-Amz-Date")
  valid_21629037 = validateParameter(valid_21629037, JString, required = false,
                                   default = nil)
  if valid_21629037 != nil:
    section.add "X-Amz-Date", valid_21629037
  var valid_21629038 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629038 = validateParameter(valid_21629038, JString, required = false,
                                   default = nil)
  if valid_21629038 != nil:
    section.add "X-Amz-Security-Token", valid_21629038
  var valid_21629039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629039 = validateParameter(valid_21629039, JString, required = false,
                                   default = nil)
  if valid_21629039 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629039
  var valid_21629040 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629040 = validateParameter(valid_21629040, JString, required = false,
                                   default = nil)
  if valid_21629040 != nil:
    section.add "X-Amz-Algorithm", valid_21629040
  var valid_21629041 = header.getOrDefault("X-Amz-Signature")
  valid_21629041 = validateParameter(valid_21629041, JString, required = false,
                                   default = nil)
  if valid_21629041 != nil:
    section.add "X-Amz-Signature", valid_21629041
  var valid_21629042 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629042 = validateParameter(valid_21629042, JString, required = false,
                                   default = nil)
  if valid_21629042 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629042
  var valid_21629043 = header.getOrDefault("X-Amz-Credential")
  valid_21629043 = validateParameter(valid_21629043, JString, required = false,
                                   default = nil)
  if valid_21629043 != nil:
    section.add "X-Amz-Credential", valid_21629043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21629045: Call_TransferCertificate_21629032; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>
  ## 
  let valid = call_21629045.validator(path, query, header, formData, body, _)
  let scheme = call_21629045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629045.makeUrl(scheme.get, call_21629045.host, call_21629045.base,
                               call_21629045.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629045, uri, valid, _)

proc call*(call_21629046: Call_TransferCertificate_21629032; certificateId: string;
          targetAwsAccount: string; body: JsonNode): Recallable =
  ## transferCertificate
  ## <p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>
  ##   certificateId: string (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  ##   targetAwsAccount: string (required)
  ##                   : The AWS account.
  ##   body: JObject (required)
  var path_21629047 = newJObject()
  var query_21629048 = newJObject()
  var body_21629049 = newJObject()
  add(path_21629047, "certificateId", newJString(certificateId))
  add(query_21629048, "targetAwsAccount", newJString(targetAwsAccount))
  if body != nil:
    body_21629049 = body
  result = call_21629046.call(path_21629047, query_21629048, nil, nil, body_21629049)

var transferCertificate* = Call_TransferCertificate_21629032(
    name: "transferCertificate", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/transfer-certificate/{certificateId}#targetAwsAccount",
    validator: validate_TransferCertificate_21629033, base: "/",
    makeUrl: url_TransferCertificate_21629034,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UntagResource_21629050 = ref object of OpenApiRestCall_21625435
proc url_UntagResource_21629052(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UntagResource_21629051(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Removes the given tags (metadata) from the resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629053 = header.getOrDefault("X-Amz-Date")
  valid_21629053 = validateParameter(valid_21629053, JString, required = false,
                                   default = nil)
  if valid_21629053 != nil:
    section.add "X-Amz-Date", valid_21629053
  var valid_21629054 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629054 = validateParameter(valid_21629054, JString, required = false,
                                   default = nil)
  if valid_21629054 != nil:
    section.add "X-Amz-Security-Token", valid_21629054
  var valid_21629055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629055 = validateParameter(valid_21629055, JString, required = false,
                                   default = nil)
  if valid_21629055 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629055
  var valid_21629056 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629056 = validateParameter(valid_21629056, JString, required = false,
                                   default = nil)
  if valid_21629056 != nil:
    section.add "X-Amz-Algorithm", valid_21629056
  var valid_21629057 = header.getOrDefault("X-Amz-Signature")
  valid_21629057 = validateParameter(valid_21629057, JString, required = false,
                                   default = nil)
  if valid_21629057 != nil:
    section.add "X-Amz-Signature", valid_21629057
  var valid_21629058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629058 = validateParameter(valid_21629058, JString, required = false,
                                   default = nil)
  if valid_21629058 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629058
  var valid_21629059 = header.getOrDefault("X-Amz-Credential")
  valid_21629059 = validateParameter(valid_21629059, JString, required = false,
                                   default = nil)
  if valid_21629059 != nil:
    section.add "X-Amz-Credential", valid_21629059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21629061: Call_UntagResource_21629050; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the given tags (metadata) from the resource.
  ## 
  let valid = call_21629061.validator(path, query, header, formData, body, _)
  let scheme = call_21629061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629061.makeUrl(scheme.get, call_21629061.host, call_21629061.base,
                               call_21629061.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629061, uri, valid, _)

proc call*(call_21629062: Call_UntagResource_21629050; body: JsonNode): Recallable =
  ## untagResource
  ## Removes the given tags (metadata) from the resource.
  ##   body: JObject (required)
  var body_21629063 = newJObject()
  if body != nil:
    body_21629063 = body
  result = call_21629062.call(nil, nil, nil, nil, body_21629063)

var untagResource* = Call_UntagResource_21629050(name: "untagResource",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/untag",
    validator: validate_UntagResource_21629051, base: "/",
    makeUrl: url_UntagResource_21629052, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateCertificate_21629064 = ref object of OpenApiRestCall_21625435
proc url_UpdateCertificate_21629066(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates/"),
               (kind: VariableSegment, value: "certificateId"),
               (kind: ConstantSegment, value: "#newStatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateCertificate_21629065(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `certificateId` field"
  var valid_21629067 = path.getOrDefault("certificateId")
  valid_21629067 = validateParameter(valid_21629067, JString, required = true,
                                   default = nil)
  if valid_21629067 != nil:
    section.add "certificateId", valid_21629067
  result.add "path", section
  ## parameters in `query` object:
  ##   newStatus: JString (required)
  ##            : <p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER will result in an exception being thrown. PENDING_TRANSFER is a status used internally by AWS IoT. It is not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
  section = newJObject()
  var valid_21629068 = query.getOrDefault("newStatus")
  valid_21629068 = validateParameter(valid_21629068, JString, required = true,
                                   default = newJString("ACTIVE"))
  if valid_21629068 != nil:
    section.add "newStatus", valid_21629068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629069 = header.getOrDefault("X-Amz-Date")
  valid_21629069 = validateParameter(valid_21629069, JString, required = false,
                                   default = nil)
  if valid_21629069 != nil:
    section.add "X-Amz-Date", valid_21629069
  var valid_21629070 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629070 = validateParameter(valid_21629070, JString, required = false,
                                   default = nil)
  if valid_21629070 != nil:
    section.add "X-Amz-Security-Token", valid_21629070
  var valid_21629071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629071 = validateParameter(valid_21629071, JString, required = false,
                                   default = nil)
  if valid_21629071 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629071
  var valid_21629072 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629072 = validateParameter(valid_21629072, JString, required = false,
                                   default = nil)
  if valid_21629072 != nil:
    section.add "X-Amz-Algorithm", valid_21629072
  var valid_21629073 = header.getOrDefault("X-Amz-Signature")
  valid_21629073 = validateParameter(valid_21629073, JString, required = false,
                                   default = nil)
  if valid_21629073 != nil:
    section.add "X-Amz-Signature", valid_21629073
  var valid_21629074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629074 = validateParameter(valid_21629074, JString, required = false,
                                   default = nil)
  if valid_21629074 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629074
  var valid_21629075 = header.getOrDefault("X-Amz-Credential")
  valid_21629075 = validateParameter(valid_21629075, JString, required = false,
                                   default = nil)
  if valid_21629075 != nil:
    section.add "X-Amz-Credential", valid_21629075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629076: Call_UpdateCertificate_21629064; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
  ## 
  let valid = call_21629076.validator(path, query, header, formData, body, _)
  let scheme = call_21629076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629076.makeUrl(scheme.get, call_21629076.host, call_21629076.base,
                               call_21629076.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629076, uri, valid, _)

proc call*(call_21629077: Call_UpdateCertificate_21629064; certificateId: string;
          newStatus: string = "ACTIVE"): Recallable =
  ## updateCertificate
  ## <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
  ##   certificateId: string (required)
  ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  ##   newStatus: string (required)
  ##            : <p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER will result in an exception being thrown. PENDING_TRANSFER is a status used internally by AWS IoT. It is not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
  var path_21629078 = newJObject()
  var query_21629079 = newJObject()
  add(path_21629078, "certificateId", newJString(certificateId))
  add(query_21629079, "newStatus", newJString(newStatus))
  result = call_21629077.call(path_21629078, query_21629079, nil, nil, nil)

var updateCertificate* = Call_UpdateCertificate_21629064(name: "updateCertificate",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/certificates/{certificateId}#newStatus",
    validator: validate_UpdateCertificate_21629065, base: "/",
    makeUrl: url_UpdateCertificate_21629066, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateThingGroupsForThing_21629080 = ref object of OpenApiRestCall_21625435
proc url_UpdateThingGroupsForThing_21629082(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateThingGroupsForThing_21629081(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the groups to which the thing belongs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629083 = header.getOrDefault("X-Amz-Date")
  valid_21629083 = validateParameter(valid_21629083, JString, required = false,
                                   default = nil)
  if valid_21629083 != nil:
    section.add "X-Amz-Date", valid_21629083
  var valid_21629084 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629084 = validateParameter(valid_21629084, JString, required = false,
                                   default = nil)
  if valid_21629084 != nil:
    section.add "X-Amz-Security-Token", valid_21629084
  var valid_21629085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629085 = validateParameter(valid_21629085, JString, required = false,
                                   default = nil)
  if valid_21629085 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629085
  var valid_21629086 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629086 = validateParameter(valid_21629086, JString, required = false,
                                   default = nil)
  if valid_21629086 != nil:
    section.add "X-Amz-Algorithm", valid_21629086
  var valid_21629087 = header.getOrDefault("X-Amz-Signature")
  valid_21629087 = validateParameter(valid_21629087, JString, required = false,
                                   default = nil)
  if valid_21629087 != nil:
    section.add "X-Amz-Signature", valid_21629087
  var valid_21629088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629088 = validateParameter(valid_21629088, JString, required = false,
                                   default = nil)
  if valid_21629088 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629088
  var valid_21629089 = header.getOrDefault("X-Amz-Credential")
  valid_21629089 = validateParameter(valid_21629089, JString, required = false,
                                   default = nil)
  if valid_21629089 != nil:
    section.add "X-Amz-Credential", valid_21629089
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21629091: Call_UpdateThingGroupsForThing_21629080;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the groups to which the thing belongs.
  ## 
  let valid = call_21629091.validator(path, query, header, formData, body, _)
  let scheme = call_21629091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629091.makeUrl(scheme.get, call_21629091.host, call_21629091.base,
                               call_21629091.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629091, uri, valid, _)

proc call*(call_21629092: Call_UpdateThingGroupsForThing_21629080; body: JsonNode): Recallable =
  ## updateThingGroupsForThing
  ## Updates the groups to which the thing belongs.
  ##   body: JObject (required)
  var body_21629093 = newJObject()
  if body != nil:
    body_21629093 = body
  result = call_21629092.call(nil, nil, nil, nil, body_21629093)

var updateThingGroupsForThing* = Call_UpdateThingGroupsForThing_21629080(
    name: "updateThingGroupsForThing", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/thing-groups/updateThingGroupsForThing",
    validator: validate_UpdateThingGroupsForThing_21629081, base: "/",
    makeUrl: url_UpdateThingGroupsForThing_21629082,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ValidateSecurityProfileBehaviors_21629094 = ref object of OpenApiRestCall_21625435
proc url_ValidateSecurityProfileBehaviors_21629096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ValidateSecurityProfileBehaviors_21629095(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Validates a Device Defender security profile behaviors specification.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629097 = header.getOrDefault("X-Amz-Date")
  valid_21629097 = validateParameter(valid_21629097, JString, required = false,
                                   default = nil)
  if valid_21629097 != nil:
    section.add "X-Amz-Date", valid_21629097
  var valid_21629098 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629098 = validateParameter(valid_21629098, JString, required = false,
                                   default = nil)
  if valid_21629098 != nil:
    section.add "X-Amz-Security-Token", valid_21629098
  var valid_21629099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629099 = validateParameter(valid_21629099, JString, required = false,
                                   default = nil)
  if valid_21629099 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629099
  var valid_21629100 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629100 = validateParameter(valid_21629100, JString, required = false,
                                   default = nil)
  if valid_21629100 != nil:
    section.add "X-Amz-Algorithm", valid_21629100
  var valid_21629101 = header.getOrDefault("X-Amz-Signature")
  valid_21629101 = validateParameter(valid_21629101, JString, required = false,
                                   default = nil)
  if valid_21629101 != nil:
    section.add "X-Amz-Signature", valid_21629101
  var valid_21629102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629102 = validateParameter(valid_21629102, JString, required = false,
                                   default = nil)
  if valid_21629102 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629102
  var valid_21629103 = header.getOrDefault("X-Amz-Credential")
  valid_21629103 = validateParameter(valid_21629103, JString, required = false,
                                   default = nil)
  if valid_21629103 != nil:
    section.add "X-Amz-Credential", valid_21629103
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_21629105: Call_ValidateSecurityProfileBehaviors_21629094;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Validates a Device Defender security profile behaviors specification.
  ## 
  let valid = call_21629105.validator(path, query, header, formData, body, _)
  let scheme = call_21629105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629105.makeUrl(scheme.get, call_21629105.host, call_21629105.base,
                               call_21629105.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629105, uri, valid, _)

proc call*(call_21629106: Call_ValidateSecurityProfileBehaviors_21629094;
          body: JsonNode): Recallable =
  ## validateSecurityProfileBehaviors
  ## Validates a Device Defender security profile behaviors specification.
  ##   body: JObject (required)
  var body_21629107 = newJObject()
  if body != nil:
    body_21629107 = body
  result = call_21629106.call(nil, nil, nil, nil, body_21629107)

var validateSecurityProfileBehaviors* = Call_ValidateSecurityProfileBehaviors_21629094(
    name: "validateSecurityProfileBehaviors", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/security-profile-behaviors/validate",
    validator: validate_ValidateSecurityProfileBehaviors_21629095, base: "/",
    makeUrl: url_ValidateSecurityProfileBehaviors_21629096,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}