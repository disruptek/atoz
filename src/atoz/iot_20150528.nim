
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5,
  base64, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS IoT
## version: 2015-05-28
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS IoT</fullname> <p>AWS IoT provides secure, bi-directional communication between Internet-connected devices (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud. You can discover your custom IoT-Data endpoint to communicate with, configure rules for data processing and integration with other services, organize resources associated with each device (Registry), configure logging, and create and manage policies and credentials to authenticate devices.</p> <p>For more information about how AWS IoT works, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html">Developer Guide</a>.</p> <p>For information about how to use the credentials provider for AWS IoT, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html">Authorizing Direct Calls to AWS Services</a>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iot/
type
  Scheme* {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                             header: JsonNode = nil; formData: JsonNode = nil;
                             body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                    path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_402656044 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_402656044](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base,
             route: t.route, schemes: t.schemes, validator: t.validator,
             url: t.url)

proc pickScheme(t: OpenApiRestCall_402656044): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                       default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
                                                            ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.
    used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Https: {"ap-northeast-1": "iot.ap-northeast-1.amazonaws.com", "ap-southeast-1": "iot.ap-southeast-1.amazonaws.com",
                               "us-west-2": "iot.us-west-2.amazonaws.com",
                               "eu-west-2": "iot.eu-west-2.amazonaws.com", "ap-northeast-3": "iot.ap-northeast-3.amazonaws.com", "eu-central-1": "iot.eu-central-1.amazonaws.com",
                               "us-east-2": "iot.us-east-2.amazonaws.com",
                               "us-east-1": "iot.us-east-1.amazonaws.com", "cn-northwest-1": "iot.cn-northwest-1.amazonaws.com.cn",
                               "ap-south-1": "iot.ap-south-1.amazonaws.com",
                               "eu-north-1": "iot.eu-north-1.amazonaws.com", "ap-northeast-2": "iot.ap-northeast-2.amazonaws.com",
                               "us-west-1": "iot.us-west-1.amazonaws.com", "us-gov-east-1": "iot.us-gov-east-1.amazonaws.com",
                               "eu-west-3": "iot.eu-west-3.amazonaws.com",
                               "cn-north-1": "iot.cn-north-1.amazonaws.com.cn",
                               "sa-east-1": "iot.sa-east-1.amazonaws.com",
                               "eu-west-1": "iot.eu-west-1.amazonaws.com", "us-gov-west-1": "iot.us-gov-west-1.amazonaws.com", "ap-southeast-2": "iot.ap-southeast-2.amazonaws.com",
                               "ca-central-1": "iot.ca-central-1.amazonaws.com"}.toTable, Scheme.Http: {
      "ap-northeast-1": "iot.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "iot.ap-southeast-1.amazonaws.com",
      "us-west-2": "iot.us-west-2.amazonaws.com",
      "eu-west-2": "iot.eu-west-2.amazonaws.com",
      "ap-northeast-3": "iot.ap-northeast-3.amazonaws.com",
      "eu-central-1": "iot.eu-central-1.amazonaws.com",
      "us-east-2": "iot.us-east-2.amazonaws.com",
      "us-east-1": "iot.us-east-1.amazonaws.com",
      "cn-northwest-1": "iot.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "iot.ap-south-1.amazonaws.com",
      "eu-north-1": "iot.eu-north-1.amazonaws.com",
      "ap-northeast-2": "iot.ap-northeast-2.amazonaws.com",
      "us-west-1": "iot.us-west-1.amazonaws.com",
      "us-gov-east-1": "iot.us-gov-east-1.amazonaws.com",
      "eu-west-3": "iot.eu-west-3.amazonaws.com",
      "cn-north-1": "iot.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "iot.sa-east-1.amazonaws.com",
      "eu-west-1": "iot.eu-west-1.amazonaws.com",
      "us-gov-west-1": "iot.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "iot.ap-southeast-2.amazonaws.com",
      "ca-central-1": "iot.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "iot"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode;
                body: string = ""): Recallable {.base.}
type
  Call_AcceptCertificateTransfer_402656294 = ref object of OpenApiRestCall_402656044
proc url_AcceptCertificateTransfer_402656296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accept-certificate-transfer/"),
                 (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AcceptCertificateTransfer_402656295(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
                                 ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `certificateId` field"
  var valid_402656386 = path.getOrDefault("certificateId")
  valid_402656386 = validateParameter(valid_402656386, JString, required = true,
                                      default = nil)
  if valid_402656386 != nil:
    section.add "certificateId", valid_402656386
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
                                  ##              : Specifies whether the certificate is active.
  section = newJObject()
  var valid_402656387 = query.getOrDefault("setAsActive")
  valid_402656387 = validateParameter(valid_402656387, JBool, required = false,
                                      default = nil)
  if valid_402656387 != nil:
    section.add "setAsActive", valid_402656387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656388 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656388 = validateParameter(valid_402656388, JString,
                                      required = false, default = nil)
  if valid_402656388 != nil:
    section.add "X-Amz-Security-Token", valid_402656388
  var valid_402656389 = header.getOrDefault("X-Amz-Signature")
  valid_402656389 = validateParameter(valid_402656389, JString,
                                      required = false, default = nil)
  if valid_402656389 != nil:
    section.add "X-Amz-Signature", valid_402656389
  var valid_402656390 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656390 = validateParameter(valid_402656390, JString,
                                      required = false, default = nil)
  if valid_402656390 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656390
  var valid_402656391 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656391 = validateParameter(valid_402656391, JString,
                                      required = false, default = nil)
  if valid_402656391 != nil:
    section.add "X-Amz-Algorithm", valid_402656391
  var valid_402656392 = header.getOrDefault("X-Amz-Date")
  valid_402656392 = validateParameter(valid_402656392, JString,
                                      required = false, default = nil)
  if valid_402656392 != nil:
    section.add "X-Amz-Date", valid_402656392
  var valid_402656393 = header.getOrDefault("X-Amz-Credential")
  valid_402656393 = validateParameter(valid_402656393, JString,
                                      required = false, default = nil)
  if valid_402656393 != nil:
    section.add "X-Amz-Credential", valid_402656393
  var valid_402656394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656394 = validateParameter(valid_402656394, JString,
                                      required = false, default = nil)
  if valid_402656394 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656394
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656408: Call_AcceptCertificateTransfer_402656294;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>
                                                                                         ## 
  let valid = call_402656408.validator(path, query, header, formData, body, _)
  let scheme = call_402656408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656408.makeUrl(scheme.get, call_402656408.host, call_402656408.base,
                                   call_402656408.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656408, uri, valid, _)

proc call*(call_402656457: Call_AcceptCertificateTransfer_402656294;
           certificateId: string; setAsActive: bool = false): Recallable =
  ## acceptCertificateTransfer
  ## <p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>
  ##   
                                                                                                                                                                                                                     ## certificateId: string (required)
                                                                                                                                                                                                                     ##                
                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                     ## ID 
                                                                                                                                                                                                                     ## of 
                                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                                     ## certificate. 
                                                                                                                                                                                                                     ## (The 
                                                                                                                                                                                                                     ## last 
                                                                                                                                                                                                                     ## part 
                                                                                                                                                                                                                     ## of 
                                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                                     ## certificate 
                                                                                                                                                                                                                     ## ARN 
                                                                                                                                                                                                                     ## contains 
                                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                                     ## certificate 
                                                                                                                                                                                                                     ## ID.)
  ##   
                                                                                                                                                                                                                            ## setAsActive: bool
                                                                                                                                                                                                                            ##              
                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                            ## Specifies 
                                                                                                                                                                                                                            ## whether 
                                                                                                                                                                                                                            ## the 
                                                                                                                                                                                                                            ## certificate 
                                                                                                                                                                                                                            ## is 
                                                                                                                                                                                                                            ## active.
  var path_402656458 = newJObject()
  var query_402656460 = newJObject()
  add(path_402656458, "certificateId", newJString(certificateId))
  add(query_402656460, "setAsActive", newJBool(setAsActive))
  result = call_402656457.call(path_402656458, query_402656460, nil, nil, nil)

var acceptCertificateTransfer* = Call_AcceptCertificateTransfer_402656294(
    name: "acceptCertificateTransfer", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/accept-certificate-transfer/{certificateId}",
    validator: validate_AcceptCertificateTransfer_402656295, base: "/",
    makeUrl: url_AcceptCertificateTransfer_402656296,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AddThingToBillingGroup_402656489 = ref object of OpenApiRestCall_402656044
proc url_AddThingToBillingGroup_402656491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_AddThingToBillingGroup_402656490(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds a thing to a billing group.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656492 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656492 = validateParameter(valid_402656492, JString,
                                      required = false, default = nil)
  if valid_402656492 != nil:
    section.add "X-Amz-Security-Token", valid_402656492
  var valid_402656493 = header.getOrDefault("X-Amz-Signature")
  valid_402656493 = validateParameter(valid_402656493, JString,
                                      required = false, default = nil)
  if valid_402656493 != nil:
    section.add "X-Amz-Signature", valid_402656493
  var valid_402656494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656494 = validateParameter(valid_402656494, JString,
                                      required = false, default = nil)
  if valid_402656494 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656494
  var valid_402656495 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656495 = validateParameter(valid_402656495, JString,
                                      required = false, default = nil)
  if valid_402656495 != nil:
    section.add "X-Amz-Algorithm", valid_402656495
  var valid_402656496 = header.getOrDefault("X-Amz-Date")
  valid_402656496 = validateParameter(valid_402656496, JString,
                                      required = false, default = nil)
  if valid_402656496 != nil:
    section.add "X-Amz-Date", valid_402656496
  var valid_402656497 = header.getOrDefault("X-Amz-Credential")
  valid_402656497 = validateParameter(valid_402656497, JString,
                                      required = false, default = nil)
  if valid_402656497 != nil:
    section.add "X-Amz-Credential", valid_402656497
  var valid_402656498 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656498 = validateParameter(valid_402656498, JString,
                                      required = false, default = nil)
  if valid_402656498 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656498
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656500: Call_AddThingToBillingGroup_402656489;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a thing to a billing group.
                                                                                         ## 
  let valid = call_402656500.validator(path, query, header, formData, body, _)
  let scheme = call_402656500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656500.makeUrl(scheme.get, call_402656500.host, call_402656500.base,
                                   call_402656500.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656500, uri, valid, _)

proc call*(call_402656501: Call_AddThingToBillingGroup_402656489; body: JsonNode): Recallable =
  ## addThingToBillingGroup
  ## Adds a thing to a billing group.
  ##   body: JObject (required)
  var body_402656502 = newJObject()
  if body != nil:
    body_402656502 = body
  result = call_402656501.call(nil, nil, nil, nil, body_402656502)

var addThingToBillingGroup* = Call_AddThingToBillingGroup_402656489(
    name: "addThingToBillingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/billing-groups/addThingToBillingGroup",
    validator: validate_AddThingToBillingGroup_402656490, base: "/",
    makeUrl: url_AddThingToBillingGroup_402656491,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AddThingToThingGroup_402656503 = ref object of OpenApiRestCall_402656044
proc url_AddThingToThingGroup_402656505(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_AddThingToThingGroup_402656504(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds a thing to a thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656506 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656506 = validateParameter(valid_402656506, JString,
                                      required = false, default = nil)
  if valid_402656506 != nil:
    section.add "X-Amz-Security-Token", valid_402656506
  var valid_402656507 = header.getOrDefault("X-Amz-Signature")
  valid_402656507 = validateParameter(valid_402656507, JString,
                                      required = false, default = nil)
  if valid_402656507 != nil:
    section.add "X-Amz-Signature", valid_402656507
  var valid_402656508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656508 = validateParameter(valid_402656508, JString,
                                      required = false, default = nil)
  if valid_402656508 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656508
  var valid_402656509 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656509 = validateParameter(valid_402656509, JString,
                                      required = false, default = nil)
  if valid_402656509 != nil:
    section.add "X-Amz-Algorithm", valid_402656509
  var valid_402656510 = header.getOrDefault("X-Amz-Date")
  valid_402656510 = validateParameter(valid_402656510, JString,
                                      required = false, default = nil)
  if valid_402656510 != nil:
    section.add "X-Amz-Date", valid_402656510
  var valid_402656511 = header.getOrDefault("X-Amz-Credential")
  valid_402656511 = validateParameter(valid_402656511, JString,
                                      required = false, default = nil)
  if valid_402656511 != nil:
    section.add "X-Amz-Credential", valid_402656511
  var valid_402656512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656512 = validateParameter(valid_402656512, JString,
                                      required = false, default = nil)
  if valid_402656512 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656514: Call_AddThingToThingGroup_402656503;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a thing to a thing group.
                                                                                         ## 
  let valid = call_402656514.validator(path, query, header, formData, body, _)
  let scheme = call_402656514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656514.makeUrl(scheme.get, call_402656514.host, call_402656514.base,
                                   call_402656514.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656514, uri, valid, _)

proc call*(call_402656515: Call_AddThingToThingGroup_402656503; body: JsonNode): Recallable =
  ## addThingToThingGroup
  ## Adds a thing to a thing group.
  ##   body: JObject (required)
  var body_402656516 = newJObject()
  if body != nil:
    body_402656516 = body
  result = call_402656515.call(nil, nil, nil, nil, body_402656516)

var addThingToThingGroup* = Call_AddThingToThingGroup_402656503(
    name: "addThingToThingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/thing-groups/addThingToThingGroup",
    validator: validate_AddThingToThingGroup_402656504, base: "/",
    makeUrl: url_AddThingToThingGroup_402656505,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AssociateTargetsWithJob_402656517 = ref object of OpenApiRestCall_402656044
proc url_AssociateTargetsWithJob_402656519(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId"),
                 (kind: ConstantSegment, value: "/targets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AssociateTargetsWithJob_402656518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402656520 = path.getOrDefault("jobId")
  valid_402656520 = validateParameter(valid_402656520, JString, required = true,
                                      default = nil)
  if valid_402656520 != nil:
    section.add "jobId", valid_402656520
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656521 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656521 = validateParameter(valid_402656521, JString,
                                      required = false, default = nil)
  if valid_402656521 != nil:
    section.add "X-Amz-Security-Token", valid_402656521
  var valid_402656522 = header.getOrDefault("X-Amz-Signature")
  valid_402656522 = validateParameter(valid_402656522, JString,
                                      required = false, default = nil)
  if valid_402656522 != nil:
    section.add "X-Amz-Signature", valid_402656522
  var valid_402656523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656523 = validateParameter(valid_402656523, JString,
                                      required = false, default = nil)
  if valid_402656523 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656523
  var valid_402656524 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656524 = validateParameter(valid_402656524, JString,
                                      required = false, default = nil)
  if valid_402656524 != nil:
    section.add "X-Amz-Algorithm", valid_402656524
  var valid_402656525 = header.getOrDefault("X-Amz-Date")
  valid_402656525 = validateParameter(valid_402656525, JString,
                                      required = false, default = nil)
  if valid_402656525 != nil:
    section.add "X-Amz-Date", valid_402656525
  var valid_402656526 = header.getOrDefault("X-Amz-Credential")
  valid_402656526 = validateParameter(valid_402656526, JString,
                                      required = false, default = nil)
  if valid_402656526 != nil:
    section.add "X-Amz-Credential", valid_402656526
  var valid_402656527 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656527 = validateParameter(valid_402656527, JString,
                                      required = false, default = nil)
  if valid_402656527 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656527
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656529: Call_AssociateTargetsWithJob_402656517;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>
                                                                                         ## 
  let valid = call_402656529.validator(path, query, header, formData, body, _)
  let scheme = call_402656529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656529.makeUrl(scheme.get, call_402656529.host, call_402656529.base,
                                   call_402656529.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656529, uri, valid, _)

proc call*(call_402656530: Call_AssociateTargetsWithJob_402656517;
           jobId: string; body: JsonNode): Recallable =
  ## associateTargetsWithJob
  ## <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                  ## jobId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                  ##        
                                                                                                                                                                                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                                                                                                                                                                                  ## The 
                                                                                                                                                                                                                                                                                                                                                                                  ## unique 
                                                                                                                                                                                                                                                                                                                                                                                  ## identifier 
                                                                                                                                                                                                                                                                                                                                                                                  ## you 
                                                                                                                                                                                                                                                                                                                                                                                  ## assigned 
                                                                                                                                                                                                                                                                                                                                                                                  ## to 
                                                                                                                                                                                                                                                                                                                                                                                  ## this 
                                                                                                                                                                                                                                                                                                                                                                                  ## job 
                                                                                                                                                                                                                                                                                                                                                                                  ## when 
                                                                                                                                                                                                                                                                                                                                                                                  ## it 
                                                                                                                                                                                                                                                                                                                                                                                  ## was 
                                                                                                                                                                                                                                                                                                                                                                                  ## created.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                             ## body: JObject (required)
  var path_402656531 = newJObject()
  var body_402656532 = newJObject()
  add(path_402656531, "jobId", newJString(jobId))
  if body != nil:
    body_402656532 = body
  result = call_402656530.call(path_402656531, nil, nil, nil, body_402656532)

var associateTargetsWithJob* = Call_AssociateTargetsWithJob_402656517(
    name: "associateTargetsWithJob", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/jobs/{jobId}/targets",
    validator: validate_AssociateTargetsWithJob_402656518, base: "/",
    makeUrl: url_AssociateTargetsWithJob_402656519,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachPolicy_402656533 = ref object of OpenApiRestCall_402656044
proc url_AttachPolicy_402656535(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/target-policies/"),
                 (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachPolicy_402656534(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Attaches a policy to the specified target.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The name of the policy to attach.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402656536 = path.getOrDefault("policyName")
  valid_402656536 = validateParameter(valid_402656536, JString, required = true,
                                      default = nil)
  if valid_402656536 != nil:
    section.add "policyName", valid_402656536
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656537 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656537 = validateParameter(valid_402656537, JString,
                                      required = false, default = nil)
  if valid_402656537 != nil:
    section.add "X-Amz-Security-Token", valid_402656537
  var valid_402656538 = header.getOrDefault("X-Amz-Signature")
  valid_402656538 = validateParameter(valid_402656538, JString,
                                      required = false, default = nil)
  if valid_402656538 != nil:
    section.add "X-Amz-Signature", valid_402656538
  var valid_402656539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656539 = validateParameter(valid_402656539, JString,
                                      required = false, default = nil)
  if valid_402656539 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656539
  var valid_402656540 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656540 = validateParameter(valid_402656540, JString,
                                      required = false, default = nil)
  if valid_402656540 != nil:
    section.add "X-Amz-Algorithm", valid_402656540
  var valid_402656541 = header.getOrDefault("X-Amz-Date")
  valid_402656541 = validateParameter(valid_402656541, JString,
                                      required = false, default = nil)
  if valid_402656541 != nil:
    section.add "X-Amz-Date", valid_402656541
  var valid_402656542 = header.getOrDefault("X-Amz-Credential")
  valid_402656542 = validateParameter(valid_402656542, JString,
                                      required = false, default = nil)
  if valid_402656542 != nil:
    section.add "X-Amz-Credential", valid_402656542
  var valid_402656543 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656543 = validateParameter(valid_402656543, JString,
                                      required = false, default = nil)
  if valid_402656543 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656543
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656545: Call_AttachPolicy_402656533; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Attaches a policy to the specified target.
                                                                                         ## 
  let valid = call_402656545.validator(path, query, header, formData, body, _)
  let scheme = call_402656545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656545.makeUrl(scheme.get, call_402656545.host, call_402656545.base,
                                   call_402656545.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656545, uri, valid, _)

proc call*(call_402656546: Call_AttachPolicy_402656533; body: JsonNode;
           policyName: string): Recallable =
  ## attachPolicy
  ## Attaches a policy to the specified target.
  ##   body: JObject (required)
  ##   policyName: string (required)
                               ##             : The name of the policy to attach.
  var path_402656547 = newJObject()
  var body_402656548 = newJObject()
  if body != nil:
    body_402656548 = body
  add(path_402656547, "policyName", newJString(policyName))
  result = call_402656546.call(path_402656547, nil, nil, nil, body_402656548)

var attachPolicy* = Call_AttachPolicy_402656533(name: "attachPolicy",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/target-policies/{policyName}", validator: validate_AttachPolicy_402656534,
    base: "/", makeUrl: url_AttachPolicy_402656535,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachPolicy_402656549 = ref object of OpenApiRestCall_402656044
proc url_DetachPolicy_402656551(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/target-policies/"),
                 (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachPolicy_402656550(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Detaches a policy from the specified target.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The policy to detach.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402656552 = path.getOrDefault("policyName")
  valid_402656552 = validateParameter(valid_402656552, JString, required = true,
                                      default = nil)
  if valid_402656552 != nil:
    section.add "policyName", valid_402656552
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656553 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656553 = validateParameter(valid_402656553, JString,
                                      required = false, default = nil)
  if valid_402656553 != nil:
    section.add "X-Amz-Security-Token", valid_402656553
  var valid_402656554 = header.getOrDefault("X-Amz-Signature")
  valid_402656554 = validateParameter(valid_402656554, JString,
                                      required = false, default = nil)
  if valid_402656554 != nil:
    section.add "X-Amz-Signature", valid_402656554
  var valid_402656555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656555 = validateParameter(valid_402656555, JString,
                                      required = false, default = nil)
  if valid_402656555 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656555
  var valid_402656556 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656556 = validateParameter(valid_402656556, JString,
                                      required = false, default = nil)
  if valid_402656556 != nil:
    section.add "X-Amz-Algorithm", valid_402656556
  var valid_402656557 = header.getOrDefault("X-Amz-Date")
  valid_402656557 = validateParameter(valid_402656557, JString,
                                      required = false, default = nil)
  if valid_402656557 != nil:
    section.add "X-Amz-Date", valid_402656557
  var valid_402656558 = header.getOrDefault("X-Amz-Credential")
  valid_402656558 = validateParameter(valid_402656558, JString,
                                      required = false, default = nil)
  if valid_402656558 != nil:
    section.add "X-Amz-Credential", valid_402656558
  var valid_402656559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656559 = validateParameter(valid_402656559, JString,
                                      required = false, default = nil)
  if valid_402656559 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656559
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656561: Call_DetachPolicy_402656549; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Detaches a policy from the specified target.
                                                                                         ## 
  let valid = call_402656561.validator(path, query, header, formData, body, _)
  let scheme = call_402656561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656561.makeUrl(scheme.get, call_402656561.host, call_402656561.base,
                                   call_402656561.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656561, uri, valid, _)

proc call*(call_402656562: Call_DetachPolicy_402656549; body: JsonNode;
           policyName: string): Recallable =
  ## detachPolicy
  ## Detaches a policy from the specified target.
  ##   body: JObject (required)
  ##   policyName: string (required)
                               ##             : The policy to detach.
  var path_402656563 = newJObject()
  var body_402656564 = newJObject()
  if body != nil:
    body_402656564 = body
  add(path_402656563, "policyName", newJString(policyName))
  result = call_402656562.call(path_402656563, nil, nil, nil, body_402656564)

var detachPolicy* = Call_DetachPolicy_402656549(name: "detachPolicy",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/target-policies/{policyName}", validator: validate_DetachPolicy_402656550,
    base: "/", makeUrl: url_DetachPolicy_402656551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachPrincipalPolicy_402656565 = ref object of OpenApiRestCall_402656044
proc url_AttachPrincipalPolicy_402656567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/principal-policies/"),
                 (kind: VariableSegment, value: "policyName"),
                 (kind: ConstantSegment, value: "#x-amzn-iot-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachPrincipalPolicy_402656566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The policy name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402656568 = path.getOrDefault("policyName")
  valid_402656568 = validateParameter(valid_402656568, JString, required = true,
                                      default = nil)
  if valid_402656568 != nil:
    section.add "policyName", valid_402656568
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   x-amzn-iot-principal: JString (required)
                                    ##                       : The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.
  ##   
                                                                                                                                                                                        ## X-Amz-Signature: JString
  ##   
                                                                                                                                                                                                                   ## X-Amz-Content-Sha256: JString
  ##   
                                                                                                                                                                                                                                                   ## X-Amz-Algorithm: JString
  ##   
                                                                                                                                                                                                                                                                              ## X-Amz-Date: JString
  ##   
                                                                                                                                                                                                                                                                                                    ## X-Amz-Credential: JString
  ##   
                                                                                                                                                                                                                                                                                                                                ## X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656569 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656569 = validateParameter(valid_402656569, JString,
                                      required = false, default = nil)
  if valid_402656569 != nil:
    section.add "X-Amz-Security-Token", valid_402656569
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-principal` field"
  var valid_402656570 = header.getOrDefault("x-amzn-iot-principal")
  valid_402656570 = validateParameter(valid_402656570, JString, required = true,
                                      default = nil)
  if valid_402656570 != nil:
    section.add "x-amzn-iot-principal", valid_402656570
  var valid_402656571 = header.getOrDefault("X-Amz-Signature")
  valid_402656571 = validateParameter(valid_402656571, JString,
                                      required = false, default = nil)
  if valid_402656571 != nil:
    section.add "X-Amz-Signature", valid_402656571
  var valid_402656572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656572 = validateParameter(valid_402656572, JString,
                                      required = false, default = nil)
  if valid_402656572 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656572
  var valid_402656573 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656573 = validateParameter(valid_402656573, JString,
                                      required = false, default = nil)
  if valid_402656573 != nil:
    section.add "X-Amz-Algorithm", valid_402656573
  var valid_402656574 = header.getOrDefault("X-Amz-Date")
  valid_402656574 = validateParameter(valid_402656574, JString,
                                      required = false, default = nil)
  if valid_402656574 != nil:
    section.add "X-Amz-Date", valid_402656574
  var valid_402656575 = header.getOrDefault("X-Amz-Credential")
  valid_402656575 = validateParameter(valid_402656575, JString,
                                      required = false, default = nil)
  if valid_402656575 != nil:
    section.add "X-Amz-Credential", valid_402656575
  var valid_402656576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656576 = validateParameter(valid_402656576, JString,
                                      required = false, default = nil)
  if valid_402656576 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656576
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656577: Call_AttachPrincipalPolicy_402656565;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
                                                                                         ## 
  let valid = call_402656577.validator(path, query, header, formData, body, _)
  let scheme = call_402656577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656577.makeUrl(scheme.get, call_402656577.host, call_402656577.base,
                                   call_402656577.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656577, uri, valid, _)

proc call*(call_402656578: Call_AttachPrincipalPolicy_402656565;
           policyName: string): Recallable =
  ## attachPrincipalPolicy
  ## <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
  ##   
                                                                                                                                                                                            ## policyName: string (required)
                                                                                                                                                                                            ##             
                                                                                                                                                                                            ## : 
                                                                                                                                                                                            ## The 
                                                                                                                                                                                            ## policy 
                                                                                                                                                                                            ## name.
  var path_402656579 = newJObject()
  add(path_402656579, "policyName", newJString(policyName))
  result = call_402656578.call(path_402656579, nil, nil, nil, nil)

var attachPrincipalPolicy* = Call_AttachPrincipalPolicy_402656565(
    name: "attachPrincipalPolicy", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/principal-policies/{policyName}#x-amzn-iot-principal",
    validator: validate_AttachPrincipalPolicy_402656566, base: "/",
    makeUrl: url_AttachPrincipalPolicy_402656567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachPrincipalPolicy_402656580 = ref object of OpenApiRestCall_402656044
proc url_DetachPrincipalPolicy_402656582(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/principal-policies/"),
                 (kind: VariableSegment, value: "policyName"),
                 (kind: ConstantSegment, value: "#x-amzn-iot-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachPrincipalPolicy_402656581(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The name of the policy to detach.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402656583 = path.getOrDefault("policyName")
  valid_402656583 = validateParameter(valid_402656583, JString, required = true,
                                      default = nil)
  if valid_402656583 != nil:
    section.add "policyName", valid_402656583
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   x-amzn-iot-principal: JString (required)
                                    ##                       : <p>The principal.</p> <p>If the principal is a certificate, specify the certificate ARN. If the principal is an Amazon Cognito identity, specify the identity ID.</p>
  ##   
                                                                                                                                                                                                                                    ## X-Amz-Signature: JString
  ##   
                                                                                                                                                                                                                                                               ## X-Amz-Content-Sha256: JString
  ##   
                                                                                                                                                                                                                                                                                               ## X-Amz-Algorithm: JString
  ##   
                                                                                                                                                                                                                                                                                                                          ## X-Amz-Date: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                ## X-Amz-Credential: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                            ## X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656584 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656584 = validateParameter(valid_402656584, JString,
                                      required = false, default = nil)
  if valid_402656584 != nil:
    section.add "X-Amz-Security-Token", valid_402656584
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-principal` field"
  var valid_402656585 = header.getOrDefault("x-amzn-iot-principal")
  valid_402656585 = validateParameter(valid_402656585, JString, required = true,
                                      default = nil)
  if valid_402656585 != nil:
    section.add "x-amzn-iot-principal", valid_402656585
  var valid_402656586 = header.getOrDefault("X-Amz-Signature")
  valid_402656586 = validateParameter(valid_402656586, JString,
                                      required = false, default = nil)
  if valid_402656586 != nil:
    section.add "X-Amz-Signature", valid_402656586
  var valid_402656587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656587 = validateParameter(valid_402656587, JString,
                                      required = false, default = nil)
  if valid_402656587 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656587
  var valid_402656588 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656588 = validateParameter(valid_402656588, JString,
                                      required = false, default = nil)
  if valid_402656588 != nil:
    section.add "X-Amz-Algorithm", valid_402656588
  var valid_402656589 = header.getOrDefault("X-Amz-Date")
  valid_402656589 = validateParameter(valid_402656589, JString,
                                      required = false, default = nil)
  if valid_402656589 != nil:
    section.add "X-Amz-Date", valid_402656589
  var valid_402656590 = header.getOrDefault("X-Amz-Credential")
  valid_402656590 = validateParameter(valid_402656590, JString,
                                      required = false, default = nil)
  if valid_402656590 != nil:
    section.add "X-Amz-Credential", valid_402656590
  var valid_402656591 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656591 = validateParameter(valid_402656591, JString,
                                      required = false, default = nil)
  if valid_402656591 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656591
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656592: Call_DetachPrincipalPolicy_402656580;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
                                                                                         ## 
  let valid = call_402656592.validator(path, query, header, formData, body, _)
  let scheme = call_402656592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656592.makeUrl(scheme.get, call_402656592.host, call_402656592.base,
                                   call_402656592.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656592, uri, valid, _)

proc call*(call_402656593: Call_DetachPrincipalPolicy_402656580;
           policyName: string): Recallable =
  ## detachPrincipalPolicy
  ## <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
  ##   
                                                                                                                                                             ## policyName: string (required)
                                                                                                                                                             ##             
                                                                                                                                                             ## : 
                                                                                                                                                             ## The 
                                                                                                                                                             ## name 
                                                                                                                                                             ## of 
                                                                                                                                                             ## the 
                                                                                                                                                             ## policy 
                                                                                                                                                             ## to 
                                                                                                                                                             ## detach.
  var path_402656594 = newJObject()
  add(path_402656594, "policyName", newJString(policyName))
  result = call_402656593.call(path_402656594, nil, nil, nil, nil)

var detachPrincipalPolicy* = Call_DetachPrincipalPolicy_402656580(
    name: "detachPrincipalPolicy", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/principal-policies/{policyName}#x-amzn-iot-principal",
    validator: validate_DetachPrincipalPolicy_402656581, base: "/",
    makeUrl: url_DetachPrincipalPolicy_402656582,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachSecurityProfile_402656595 = ref object of OpenApiRestCall_402656044
proc url_AttachSecurityProfile_402656597(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
         "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
                 (kind: VariableSegment, value: "securityProfileName"), (
        kind: ConstantSegment, value: "/targets#securityProfileTargetArn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachSecurityProfile_402656596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
                                 ##                      : The security profile that is attached.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_402656598 = path.getOrDefault("securityProfileName")
  valid_402656598 = validateParameter(valid_402656598, JString, required = true,
                                      default = nil)
  if valid_402656598 != nil:
    section.add "securityProfileName", valid_402656598
  result.add "path", section
  ## parameters in `query` object:
  ##   securityProfileTargetArn: JString (required)
                                  ##                           : The ARN of the target (thing group) to which the security profile is attached.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `securityProfileTargetArn` field"
  var valid_402656599 = query.getOrDefault("securityProfileTargetArn")
  valid_402656599 = validateParameter(valid_402656599, JString, required = true,
                                      default = nil)
  if valid_402656599 != nil:
    section.add "securityProfileTargetArn", valid_402656599
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656600 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656600 = validateParameter(valid_402656600, JString,
                                      required = false, default = nil)
  if valid_402656600 != nil:
    section.add "X-Amz-Security-Token", valid_402656600
  var valid_402656601 = header.getOrDefault("X-Amz-Signature")
  valid_402656601 = validateParameter(valid_402656601, JString,
                                      required = false, default = nil)
  if valid_402656601 != nil:
    section.add "X-Amz-Signature", valid_402656601
  var valid_402656602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656602 = validateParameter(valid_402656602, JString,
                                      required = false, default = nil)
  if valid_402656602 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656602
  var valid_402656603 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656603 = validateParameter(valid_402656603, JString,
                                      required = false, default = nil)
  if valid_402656603 != nil:
    section.add "X-Amz-Algorithm", valid_402656603
  var valid_402656604 = header.getOrDefault("X-Amz-Date")
  valid_402656604 = validateParameter(valid_402656604, JString,
                                      required = false, default = nil)
  if valid_402656604 != nil:
    section.add "X-Amz-Date", valid_402656604
  var valid_402656605 = header.getOrDefault("X-Amz-Credential")
  valid_402656605 = validateParameter(valid_402656605, JString,
                                      required = false, default = nil)
  if valid_402656605 != nil:
    section.add "X-Amz-Credential", valid_402656605
  var valid_402656606 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656606 = validateParameter(valid_402656606, JString,
                                      required = false, default = nil)
  if valid_402656606 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656606
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656607: Call_AttachSecurityProfile_402656595;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.
                                                                                         ## 
  let valid = call_402656607.validator(path, query, header, formData, body, _)
  let scheme = call_402656607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656607.makeUrl(scheme.get, call_402656607.host, call_402656607.base,
                                   call_402656607.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656607, uri, valid, _)

proc call*(call_402656608: Call_AttachSecurityProfile_402656595;
           securityProfileName: string; securityProfileTargetArn: string): Recallable =
  ## attachSecurityProfile
  ## Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.
  ##   
                                                                                                                                                                            ## securityProfileName: string (required)
                                                                                                                                                                            ##                      
                                                                                                                                                                            ## : 
                                                                                                                                                                            ## The 
                                                                                                                                                                            ## security 
                                                                                                                                                                            ## profile 
                                                                                                                                                                            ## that 
                                                                                                                                                                            ## is 
                                                                                                                                                                            ## attached.
  ##   
                                                                                                                                                                                        ## securityProfileTargetArn: string (required)
                                                                                                                                                                                        ##                           
                                                                                                                                                                                        ## : 
                                                                                                                                                                                        ## The 
                                                                                                                                                                                        ## ARN 
                                                                                                                                                                                        ## of 
                                                                                                                                                                                        ## the 
                                                                                                                                                                                        ## target 
                                                                                                                                                                                        ## (thing 
                                                                                                                                                                                        ## group) 
                                                                                                                                                                                        ## to 
                                                                                                                                                                                        ## which 
                                                                                                                                                                                        ## the 
                                                                                                                                                                                        ## security 
                                                                                                                                                                                        ## profile 
                                                                                                                                                                                        ## is 
                                                                                                                                                                                        ## attached.
  var path_402656609 = newJObject()
  var query_402656610 = newJObject()
  add(path_402656609, "securityProfileName", newJString(securityProfileName))
  add(query_402656610, "securityProfileTargetArn",
      newJString(securityProfileTargetArn))
  result = call_402656608.call(path_402656609, query_402656610, nil, nil, nil)

var attachSecurityProfile* = Call_AttachSecurityProfile_402656595(
    name: "attachSecurityProfile", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}/targets#securityProfileTargetArn",
    validator: validate_AttachSecurityProfile_402656596, base: "/",
    makeUrl: url_AttachSecurityProfile_402656597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachSecurityProfile_402656611 = ref object of OpenApiRestCall_402656044
proc url_DetachSecurityProfile_402656613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
         "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
                 (kind: VariableSegment, value: "securityProfileName"), (
        kind: ConstantSegment, value: "/targets#securityProfileTargetArn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachSecurityProfile_402656612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Disassociates a Device Defender security profile from a thing group or from this account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
                                 ##                      : The security profile that is detached.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_402656614 = path.getOrDefault("securityProfileName")
  valid_402656614 = validateParameter(valid_402656614, JString, required = true,
                                      default = nil)
  if valid_402656614 != nil:
    section.add "securityProfileName", valid_402656614
  result.add "path", section
  ## parameters in `query` object:
  ##   securityProfileTargetArn: JString (required)
                                  ##                           : The ARN of the thing group from which the security profile is detached.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `securityProfileTargetArn` field"
  var valid_402656615 = query.getOrDefault("securityProfileTargetArn")
  valid_402656615 = validateParameter(valid_402656615, JString, required = true,
                                      default = nil)
  if valid_402656615 != nil:
    section.add "securityProfileTargetArn", valid_402656615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656616 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656616 = validateParameter(valid_402656616, JString,
                                      required = false, default = nil)
  if valid_402656616 != nil:
    section.add "X-Amz-Security-Token", valid_402656616
  var valid_402656617 = header.getOrDefault("X-Amz-Signature")
  valid_402656617 = validateParameter(valid_402656617, JString,
                                      required = false, default = nil)
  if valid_402656617 != nil:
    section.add "X-Amz-Signature", valid_402656617
  var valid_402656618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656618 = validateParameter(valid_402656618, JString,
                                      required = false, default = nil)
  if valid_402656618 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656618
  var valid_402656619 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656619 = validateParameter(valid_402656619, JString,
                                      required = false, default = nil)
  if valid_402656619 != nil:
    section.add "X-Amz-Algorithm", valid_402656619
  var valid_402656620 = header.getOrDefault("X-Amz-Date")
  valid_402656620 = validateParameter(valid_402656620, JString,
                                      required = false, default = nil)
  if valid_402656620 != nil:
    section.add "X-Amz-Date", valid_402656620
  var valid_402656621 = header.getOrDefault("X-Amz-Credential")
  valid_402656621 = validateParameter(valid_402656621, JString,
                                      required = false, default = nil)
  if valid_402656621 != nil:
    section.add "X-Amz-Credential", valid_402656621
  var valid_402656622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656622 = validateParameter(valid_402656622, JString,
                                      required = false, default = nil)
  if valid_402656622 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656623: Call_DetachSecurityProfile_402656611;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates a Device Defender security profile from a thing group or from this account.
                                                                                         ## 
  let valid = call_402656623.validator(path, query, header, formData, body, _)
  let scheme = call_402656623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656623.makeUrl(scheme.get, call_402656623.host, call_402656623.base,
                                   call_402656623.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656623, uri, valid, _)

proc call*(call_402656624: Call_DetachSecurityProfile_402656611;
           securityProfileName: string; securityProfileTargetArn: string): Recallable =
  ## detachSecurityProfile
  ## Disassociates a Device Defender security profile from a thing group or from this account.
  ##   
                                                                                              ## securityProfileName: string (required)
                                                                                              ##                      
                                                                                              ## : 
                                                                                              ## The 
                                                                                              ## security 
                                                                                              ## profile 
                                                                                              ## that 
                                                                                              ## is 
                                                                                              ## detached.
  ##   
                                                                                                          ## securityProfileTargetArn: string (required)
                                                                                                          ##                           
                                                                                                          ## : 
                                                                                                          ## The 
                                                                                                          ## ARN 
                                                                                                          ## of 
                                                                                                          ## the 
                                                                                                          ## thing 
                                                                                                          ## group 
                                                                                                          ## from 
                                                                                                          ## which 
                                                                                                          ## the 
                                                                                                          ## security 
                                                                                                          ## profile 
                                                                                                          ## is 
                                                                                                          ## detached.
  var path_402656625 = newJObject()
  var query_402656626 = newJObject()
  add(path_402656625, "securityProfileName", newJString(securityProfileName))
  add(query_402656626, "securityProfileTargetArn",
      newJString(securityProfileTargetArn))
  result = call_402656624.call(path_402656625, query_402656626, nil, nil, nil)

var detachSecurityProfile* = Call_DetachSecurityProfile_402656611(
    name: "detachSecurityProfile", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/security-profiles/{securityProfileName}/targets#securityProfileTargetArn",
    validator: validate_DetachSecurityProfile_402656612, base: "/",
    makeUrl: url_DetachSecurityProfile_402656613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AttachThingPrincipal_402656627 = ref object of OpenApiRestCall_402656044
proc url_AttachThingPrincipal_402656629(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/principals#x-amzn-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AttachThingPrincipal_402656628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The name of the thing.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402656630 = path.getOrDefault("thingName")
  valid_402656630 = validateParameter(valid_402656630, JString, required = true,
                                      default = nil)
  if valid_402656630 != nil:
    section.add "thingName", valid_402656630
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amzn-principal: JString (required)
                                   ##                   : The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.
  section = newJObject()
  var valid_402656631 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656631 = validateParameter(valid_402656631, JString,
                                      required = false, default = nil)
  if valid_402656631 != nil:
    section.add "X-Amz-Security-Token", valid_402656631
  var valid_402656632 = header.getOrDefault("X-Amz-Signature")
  valid_402656632 = validateParameter(valid_402656632, JString,
                                      required = false, default = nil)
  if valid_402656632 != nil:
    section.add "X-Amz-Signature", valid_402656632
  var valid_402656633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656633 = validateParameter(valid_402656633, JString,
                                      required = false, default = nil)
  if valid_402656633 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656633
  var valid_402656634 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656634 = validateParameter(valid_402656634, JString,
                                      required = false, default = nil)
  if valid_402656634 != nil:
    section.add "X-Amz-Algorithm", valid_402656634
  var valid_402656635 = header.getOrDefault("X-Amz-Date")
  valid_402656635 = validateParameter(valid_402656635, JString,
                                      required = false, default = nil)
  if valid_402656635 != nil:
    section.add "X-Amz-Date", valid_402656635
  var valid_402656636 = header.getOrDefault("X-Amz-Credential")
  valid_402656636 = validateParameter(valid_402656636, JString,
                                      required = false, default = nil)
  if valid_402656636 != nil:
    section.add "X-Amz-Credential", valid_402656636
  var valid_402656637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656637 = validateParameter(valid_402656637, JString,
                                      required = false, default = nil)
  if valid_402656637 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656637
  assert header != nil, "header argument is necessary due to required `x-amzn-principal` field"
  var valid_402656638 = header.getOrDefault("x-amzn-principal")
  valid_402656638 = validateParameter(valid_402656638, JString, required = true,
                                      default = nil)
  if valid_402656638 != nil:
    section.add "x-amzn-principal", valid_402656638
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656639: Call_AttachThingPrincipal_402656627;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
                                                                                         ## 
  let valid = call_402656639.validator(path, query, header, formData, body, _)
  let scheme = call_402656639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656639.makeUrl(scheme.get, call_402656639.host, call_402656639.base,
                                   call_402656639.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656639, uri, valid, _)

proc call*(call_402656640: Call_AttachThingPrincipal_402656627;
           thingName: string): Recallable =
  ## attachThingPrincipal
  ## Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ##   
                                                                                                                                                                                     ## thingName: string (required)
                                                                                                                                                                                     ##            
                                                                                                                                                                                     ## : 
                                                                                                                                                                                     ## The 
                                                                                                                                                                                     ## name 
                                                                                                                                                                                     ## of 
                                                                                                                                                                                     ## the 
                                                                                                                                                                                     ## thing.
  var path_402656641 = newJObject()
  add(path_402656641, "thingName", newJString(thingName))
  result = call_402656640.call(path_402656641, nil, nil, nil, nil)

var attachThingPrincipal* = Call_AttachThingPrincipal_402656627(
    name: "attachThingPrincipal", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/things/{thingName}/principals#x-amzn-principal",
    validator: validate_AttachThingPrincipal_402656628, base: "/",
    makeUrl: url_AttachThingPrincipal_402656629,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DetachThingPrincipal_402656642 = ref object of OpenApiRestCall_402656044
proc url_DetachThingPrincipal_402656644(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/principals#x-amzn-principal")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DetachThingPrincipal_402656643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The name of the thing.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402656645 = path.getOrDefault("thingName")
  valid_402656645 = validateParameter(valid_402656645, JString, required = true,
                                      default = nil)
  if valid_402656645 != nil:
    section.add "thingName", valid_402656645
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amzn-principal: JString (required)
                                   ##                   : If the principal is a certificate, this value must be ARN of the certificate. If the principal is an Amazon Cognito identity, this value must be the ID of the Amazon Cognito identity.
  section = newJObject()
  var valid_402656646 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656646 = validateParameter(valid_402656646, JString,
                                      required = false, default = nil)
  if valid_402656646 != nil:
    section.add "X-Amz-Security-Token", valid_402656646
  var valid_402656647 = header.getOrDefault("X-Amz-Signature")
  valid_402656647 = validateParameter(valid_402656647, JString,
                                      required = false, default = nil)
  if valid_402656647 != nil:
    section.add "X-Amz-Signature", valid_402656647
  var valid_402656648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656648 = validateParameter(valid_402656648, JString,
                                      required = false, default = nil)
  if valid_402656648 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656648
  var valid_402656649 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656649 = validateParameter(valid_402656649, JString,
                                      required = false, default = nil)
  if valid_402656649 != nil:
    section.add "X-Amz-Algorithm", valid_402656649
  var valid_402656650 = header.getOrDefault("X-Amz-Date")
  valid_402656650 = validateParameter(valid_402656650, JString,
                                      required = false, default = nil)
  if valid_402656650 != nil:
    section.add "X-Amz-Date", valid_402656650
  var valid_402656651 = header.getOrDefault("X-Amz-Credential")
  valid_402656651 = validateParameter(valid_402656651, JString,
                                      required = false, default = nil)
  if valid_402656651 != nil:
    section.add "X-Amz-Credential", valid_402656651
  var valid_402656652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656652 = validateParameter(valid_402656652, JString,
                                      required = false, default = nil)
  if valid_402656652 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656652
  assert header != nil, "header argument is necessary due to required `x-amzn-principal` field"
  var valid_402656653 = header.getOrDefault("x-amzn-principal")
  valid_402656653 = validateParameter(valid_402656653, JString, required = true,
                                      default = nil)
  if valid_402656653 != nil:
    section.add "x-amzn-principal", valid_402656653
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656654: Call_DetachThingPrincipal_402656642;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
                                                                                         ## 
  let valid = call_402656654.validator(path, query, header, formData, body, _)
  let scheme = call_402656654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656654.makeUrl(scheme.get, call_402656654.host, call_402656654.base,
                                   call_402656654.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656654, uri, valid, _)

proc call*(call_402656655: Call_DetachThingPrincipal_402656642;
           thingName: string): Recallable =
  ## detachThingPrincipal
  ## <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
  ##   
                                                                                                                                                                                                                                                                                                              ## thingName: string (required)
                                                                                                                                                                                                                                                                                                              ##            
                                                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                                                              ## name 
                                                                                                                                                                                                                                                                                                              ## of 
                                                                                                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                                                                                                              ## thing.
  var path_402656656 = newJObject()
  add(path_402656656, "thingName", newJString(thingName))
  result = call_402656655.call(path_402656656, nil, nil, nil, nil)

var detachThingPrincipal* = Call_DetachThingPrincipal_402656642(
    name: "detachThingPrincipal", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/things/{thingName}/principals#x-amzn-principal",
    validator: validate_DetachThingPrincipal_402656643, base: "/",
    makeUrl: url_DetachThingPrincipal_402656644,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelAuditMitigationActionsTask_402656657 = ref object of OpenApiRestCall_402656044
proc url_CancelAuditMitigationActionsTask_402656659(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                  value: "/audit/mitigationactions/tasks/"),
                 (kind: VariableSegment, value: "taskId"),
                 (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelAuditMitigationActionsTask_402656658(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : The unique identifier for the task that you want to cancel. 
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402656660 = path.getOrDefault("taskId")
  valid_402656660 = validateParameter(valid_402656660, JString, required = true,
                                      default = nil)
  if valid_402656660 != nil:
    section.add "taskId", valid_402656660
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656661 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656661 = validateParameter(valid_402656661, JString,
                                      required = false, default = nil)
  if valid_402656661 != nil:
    section.add "X-Amz-Security-Token", valid_402656661
  var valid_402656662 = header.getOrDefault("X-Amz-Signature")
  valid_402656662 = validateParameter(valid_402656662, JString,
                                      required = false, default = nil)
  if valid_402656662 != nil:
    section.add "X-Amz-Signature", valid_402656662
  var valid_402656663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656663 = validateParameter(valid_402656663, JString,
                                      required = false, default = nil)
  if valid_402656663 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656663
  var valid_402656664 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656664 = validateParameter(valid_402656664, JString,
                                      required = false, default = nil)
  if valid_402656664 != nil:
    section.add "X-Amz-Algorithm", valid_402656664
  var valid_402656665 = header.getOrDefault("X-Amz-Date")
  valid_402656665 = validateParameter(valid_402656665, JString,
                                      required = false, default = nil)
  if valid_402656665 != nil:
    section.add "X-Amz-Date", valid_402656665
  var valid_402656666 = header.getOrDefault("X-Amz-Credential")
  valid_402656666 = validateParameter(valid_402656666, JString,
                                      required = false, default = nil)
  if valid_402656666 != nil:
    section.add "X-Amz-Credential", valid_402656666
  var valid_402656667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656667 = validateParameter(valid_402656667, JString,
                                      required = false, default = nil)
  if valid_402656667 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656667
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656668: Call_CancelAuditMitigationActionsTask_402656657;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.
                                                                                         ## 
  let valid = call_402656668.validator(path, query, header, formData, body, _)
  let scheme = call_402656668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656668.makeUrl(scheme.get, call_402656668.host, call_402656668.base,
                                   call_402656668.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656668, uri, valid, _)

proc call*(call_402656669: Call_CancelAuditMitigationActionsTask_402656657;
           taskId: string): Recallable =
  ## cancelAuditMitigationActionsTask
  ## Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.
  ##   
                                                                                                                             ## taskId: string (required)
                                                                                                                             ##         
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## unique 
                                                                                                                             ## identifier 
                                                                                                                             ## for 
                                                                                                                             ## the 
                                                                                                                             ## task 
                                                                                                                             ## that 
                                                                                                                             ## you 
                                                                                                                             ## want 
                                                                                                                             ## to 
                                                                                                                             ## cancel. 
  var path_402656670 = newJObject()
  add(path_402656670, "taskId", newJString(taskId))
  result = call_402656669.call(path_402656670, nil, nil, nil, nil)

var cancelAuditMitigationActionsTask* = Call_CancelAuditMitigationActionsTask_402656657(
    name: "cancelAuditMitigationActionsTask", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/audit/mitigationactions/tasks/{taskId}/cancel",
    validator: validate_CancelAuditMitigationActionsTask_402656658, base: "/",
    makeUrl: url_CancelAuditMitigationActionsTask_402656659,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelAuditTask_402656671 = ref object of OpenApiRestCall_402656044
proc url_CancelAuditTask_402656673(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/tasks/"),
                 (kind: VariableSegment, value: "taskId"),
                 (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelAuditTask_402656672(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an "InvalidRequestException" occurs.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : The ID of the audit you want to cancel. You can only cancel an audit that is "IN_PROGRESS".
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402656674 = path.getOrDefault("taskId")
  valid_402656674 = validateParameter(valid_402656674, JString, required = true,
                                      default = nil)
  if valid_402656674 != nil:
    section.add "taskId", valid_402656674
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656675 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656675 = validateParameter(valid_402656675, JString,
                                      required = false, default = nil)
  if valid_402656675 != nil:
    section.add "X-Amz-Security-Token", valid_402656675
  var valid_402656676 = header.getOrDefault("X-Amz-Signature")
  valid_402656676 = validateParameter(valid_402656676, JString,
                                      required = false, default = nil)
  if valid_402656676 != nil:
    section.add "X-Amz-Signature", valid_402656676
  var valid_402656677 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656677 = validateParameter(valid_402656677, JString,
                                      required = false, default = nil)
  if valid_402656677 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656677
  var valid_402656678 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656678 = validateParameter(valid_402656678, JString,
                                      required = false, default = nil)
  if valid_402656678 != nil:
    section.add "X-Amz-Algorithm", valid_402656678
  var valid_402656679 = header.getOrDefault("X-Amz-Date")
  valid_402656679 = validateParameter(valid_402656679, JString,
                                      required = false, default = nil)
  if valid_402656679 != nil:
    section.add "X-Amz-Date", valid_402656679
  var valid_402656680 = header.getOrDefault("X-Amz-Credential")
  valid_402656680 = validateParameter(valid_402656680, JString,
                                      required = false, default = nil)
  if valid_402656680 != nil:
    section.add "X-Amz-Credential", valid_402656680
  var valid_402656681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656681 = validateParameter(valid_402656681, JString,
                                      required = false, default = nil)
  if valid_402656681 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656681
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656682: Call_CancelAuditTask_402656671; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an "InvalidRequestException" occurs.
                                                                                         ## 
  let valid = call_402656682.validator(path, query, header, formData, body, _)
  let scheme = call_402656682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656682.makeUrl(scheme.get, call_402656682.host, call_402656682.base,
                                   call_402656682.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656682, uri, valid, _)

proc call*(call_402656683: Call_CancelAuditTask_402656671; taskId: string): Recallable =
  ## cancelAuditTask
  ## Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an "InvalidRequestException" occurs.
  ##   
                                                                                                                                                                ## taskId: string (required)
                                                                                                                                                                ##         
                                                                                                                                                                ## : 
                                                                                                                                                                ## The 
                                                                                                                                                                ## ID 
                                                                                                                                                                ## of 
                                                                                                                                                                ## the 
                                                                                                                                                                ## audit 
                                                                                                                                                                ## you 
                                                                                                                                                                ## want 
                                                                                                                                                                ## to 
                                                                                                                                                                ## cancel. 
                                                                                                                                                                ## You 
                                                                                                                                                                ## can 
                                                                                                                                                                ## only 
                                                                                                                                                                ## cancel 
                                                                                                                                                                ## an 
                                                                                                                                                                ## audit 
                                                                                                                                                                ## that 
                                                                                                                                                                ## is 
                                                                                                                                                                ## "IN_PROGRESS".
  var path_402656684 = newJObject()
  add(path_402656684, "taskId", newJString(taskId))
  result = call_402656683.call(path_402656684, nil, nil, nil, nil)

var cancelAuditTask* = Call_CancelAuditTask_402656671(name: "cancelAuditTask",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/audit/tasks/{taskId}/cancel", validator: validate_CancelAuditTask_402656672,
    base: "/", makeUrl: url_CancelAuditTask_402656673,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelCertificateTransfer_402656685 = ref object of OpenApiRestCall_402656044
proc url_CancelCertificateTransfer_402656687(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cancel-certificate-transfer/"),
                 (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelCertificateTransfer_402656686(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
                                 ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `certificateId` field"
  var valid_402656688 = path.getOrDefault("certificateId")
  valid_402656688 = validateParameter(valid_402656688, JString, required = true,
                                      default = nil)
  if valid_402656688 != nil:
    section.add "certificateId", valid_402656688
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656689 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656689 = validateParameter(valid_402656689, JString,
                                      required = false, default = nil)
  if valid_402656689 != nil:
    section.add "X-Amz-Security-Token", valid_402656689
  var valid_402656690 = header.getOrDefault("X-Amz-Signature")
  valid_402656690 = validateParameter(valid_402656690, JString,
                                      required = false, default = nil)
  if valid_402656690 != nil:
    section.add "X-Amz-Signature", valid_402656690
  var valid_402656691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656691 = validateParameter(valid_402656691, JString,
                                      required = false, default = nil)
  if valid_402656691 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656691
  var valid_402656692 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656692 = validateParameter(valid_402656692, JString,
                                      required = false, default = nil)
  if valid_402656692 != nil:
    section.add "X-Amz-Algorithm", valid_402656692
  var valid_402656693 = header.getOrDefault("X-Amz-Date")
  valid_402656693 = validateParameter(valid_402656693, JString,
                                      required = false, default = nil)
  if valid_402656693 != nil:
    section.add "X-Amz-Date", valid_402656693
  var valid_402656694 = header.getOrDefault("X-Amz-Credential")
  valid_402656694 = validateParameter(valid_402656694, JString,
                                      required = false, default = nil)
  if valid_402656694 != nil:
    section.add "X-Amz-Credential", valid_402656694
  var valid_402656695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656695 = validateParameter(valid_402656695, JString,
                                      required = false, default = nil)
  if valid_402656695 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656695
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656696: Call_CancelCertificateTransfer_402656685;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>
                                                                                         ## 
  let valid = call_402656696.validator(path, query, header, formData, body, _)
  let scheme = call_402656696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656696.makeUrl(scheme.get, call_402656696.host, call_402656696.base,
                                   call_402656696.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656696, uri, valid, _)

proc call*(call_402656697: Call_CancelCertificateTransfer_402656685;
           certificateId: string): Recallable =
  ## cancelCertificateTransfer
  ## <p>Cancels a pending transfer for the specified certificate.</p> <p> <b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>
  ##   
certificateId: string (required)


he 

of 
the 
certificate. 
he 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ## last 
part 
of 
the 
certificate 

contains 
the 
certificate 

  var path_402656698 = newJObject()
  add(path_402656698, "certificateId", newJString(certificateId))
  result = call_402656697.call(path_402656698, nil, nil, nil, nil)

var cancelCertificateTransfer* = Call_CancelCertificateTransfer_402656685(
    name: "cancelCertificateTransfer", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/cancel-certificate-transfer/{certificateId}",
    validator: validate_CancelCertificateTransfer_402656686, base: "/",
    makeUrl: url_CancelCertificateTransfer_402656687,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelJob_402656699 = ref object of OpenApiRestCall_402656044
proc url_CancelJob_402656701(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId"),
                 (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelJob_402656700(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels a job.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402656702 = path.getOrDefault("jobId")
  valid_402656702 = validateParameter(valid_402656702, JString, required = true,
                                      default = nil)
  if valid_402656702 != nil:
    section.add "jobId", valid_402656702
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
                                  ##        : <p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is <code>false</code>.</p> <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.</p>
  section = newJObject()
  var valid_402656703 = query.getOrDefault("force")
  valid_402656703 = validateParameter(valid_402656703, JBool, required = false,
                                      default = nil)
  if valid_402656703 != nil:
    section.add "force", valid_402656703
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656704 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656704 = validateParameter(valid_402656704, JString,
                                      required = false, default = nil)
  if valid_402656704 != nil:
    section.add "X-Amz-Security-Token", valid_402656704
  var valid_402656705 = header.getOrDefault("X-Amz-Signature")
  valid_402656705 = validateParameter(valid_402656705, JString,
                                      required = false, default = nil)
  if valid_402656705 != nil:
    section.add "X-Amz-Signature", valid_402656705
  var valid_402656706 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656706 = validateParameter(valid_402656706, JString,
                                      required = false, default = nil)
  if valid_402656706 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656706
  var valid_402656707 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656707 = validateParameter(valid_402656707, JString,
                                      required = false, default = nil)
  if valid_402656707 != nil:
    section.add "X-Amz-Algorithm", valid_402656707
  var valid_402656708 = header.getOrDefault("X-Amz-Date")
  valid_402656708 = validateParameter(valid_402656708, JString,
                                      required = false, default = nil)
  if valid_402656708 != nil:
    section.add "X-Amz-Date", valid_402656708
  var valid_402656709 = header.getOrDefault("X-Amz-Credential")
  valid_402656709 = validateParameter(valid_402656709, JString,
                                      required = false, default = nil)
  if valid_402656709 != nil:
    section.add "X-Amz-Credential", valid_402656709
  var valid_402656710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656710 = validateParameter(valid_402656710, JString,
                                      required = false, default = nil)
  if valid_402656710 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656710
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656712: Call_CancelJob_402656699; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a job.
                                                                                         ## 
  let valid = call_402656712.validator(path, query, header, formData, body, _)
  let scheme = call_402656712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656712.makeUrl(scheme.get, call_402656712.host, call_402656712.base,
                                   call_402656712.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656712, uri, valid, _)

proc call*(call_402656713: Call_CancelJob_402656699; jobId: string;
           body: JsonNode; force: bool = false): Recallable =
  ## cancelJob
  ## Cancels a job.
  ##   force: bool
                   ##        : <p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is <code>false</code>.</p> <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## jobId: string (required)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## unique 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## identifier 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## you 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## assigned 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## to 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## this 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## job 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## when 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## it 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## was 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## created.
  ##   
body: JObject (required)
  var path_402656714 = newJObject()
  var query_402656715 = newJObject()
  var body_402656716 = newJObject()
  add(query_402656715, "force", newJBool(force))
  add(path_402656714, "jobId", newJString(jobId))
  if body != nil:
    body_402656716 = body
  result = call_402656713.call(path_402656714, query_402656715, nil, nil, body_402656716)

var cancelJob* = Call_CancelJob_402656699(name: "cancelJob",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/jobs/{jobId}/cancel", validator: validate_CancelJob_402656700,
    base: "/", makeUrl: url_CancelJob_402656701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CancelJobExecution_402656717 = ref object of OpenApiRestCall_402656044
proc url_CancelJobExecution_402656719(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId"),
                 (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CancelJobExecution_402656718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels the execution of a job for a given thing.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The ID of the job to be canceled.
  ##   
                                                                              ## thingName: JString (required)
                                                                              ##            
                                                                              ## : 
                                                                              ## The 
                                                                              ## name 
                                                                              ## of 
                                                                              ## the 
                                                                              ## thing 
                                                                              ## whose 
                                                                              ## execution 
                                                                              ## of 
                                                                              ## the 
                                                                              ## job 
                                                                              ## will 
                                                                              ## be 
                                                                              ## canceled.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402656720 = path.getOrDefault("jobId")
  valid_402656720 = validateParameter(valid_402656720, JString, required = true,
                                      default = nil)
  if valid_402656720 != nil:
    section.add "jobId", valid_402656720
  var valid_402656721 = path.getOrDefault("thingName")
  valid_402656721 = validateParameter(valid_402656721, JString, required = true,
                                      default = nil)
  if valid_402656721 != nil:
    section.add "thingName", valid_402656721
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
                                  ##        : <p>(Optional) If <code>true</code> the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code> will be thrown. The default is <code>false</code>.</p> <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p>
  section = newJObject()
  var valid_402656722 = query.getOrDefault("force")
  valid_402656722 = validateParameter(valid_402656722, JBool, required = false,
                                      default = nil)
  if valid_402656722 != nil:
    section.add "force", valid_402656722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656723 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656723 = validateParameter(valid_402656723, JString,
                                      required = false, default = nil)
  if valid_402656723 != nil:
    section.add "X-Amz-Security-Token", valid_402656723
  var valid_402656724 = header.getOrDefault("X-Amz-Signature")
  valid_402656724 = validateParameter(valid_402656724, JString,
                                      required = false, default = nil)
  if valid_402656724 != nil:
    section.add "X-Amz-Signature", valid_402656724
  var valid_402656725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656725 = validateParameter(valid_402656725, JString,
                                      required = false, default = nil)
  if valid_402656725 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656725
  var valid_402656726 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656726 = validateParameter(valid_402656726, JString,
                                      required = false, default = nil)
  if valid_402656726 != nil:
    section.add "X-Amz-Algorithm", valid_402656726
  var valid_402656727 = header.getOrDefault("X-Amz-Date")
  valid_402656727 = validateParameter(valid_402656727, JString,
                                      required = false, default = nil)
  if valid_402656727 != nil:
    section.add "X-Amz-Date", valid_402656727
  var valid_402656728 = header.getOrDefault("X-Amz-Credential")
  valid_402656728 = validateParameter(valid_402656728, JString,
                                      required = false, default = nil)
  if valid_402656728 != nil:
    section.add "X-Amz-Credential", valid_402656728
  var valid_402656729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656729 = validateParameter(valid_402656729, JString,
                                      required = false, default = nil)
  if valid_402656729 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656731: Call_CancelJobExecution_402656717;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels the execution of a job for a given thing.
                                                                                         ## 
  let valid = call_402656731.validator(path, query, header, formData, body, _)
  let scheme = call_402656731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656731.makeUrl(scheme.get, call_402656731.host, call_402656731.base,
                                   call_402656731.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656731, uri, valid, _)

proc call*(call_402656732: Call_CancelJobExecution_402656717; jobId: string;
           body: JsonNode; thingName: string; force: bool = false): Recallable =
  ## cancelJobExecution
  ## Cancels the execution of a job for a given thing.
  ##   force: bool
                                                      ##        : <p>(Optional) If <code>true</code> the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code> will be thrown. The default is <code>false</code>.</p> <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p>
  ##   
jobId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ##        

he 

of 
the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ## job 
to 
be 
canceled.
  ##   
body: JObject (required)
  ##   
thingName: string (required)


he 
name 
of 
the 
thing 
whose 
execution 
of 
the 
job 
will 
be 
canceled.
  var path_402656733 = newJObject()
  var query_402656734 = newJObject()
  var body_402656735 = newJObject()
  add(query_402656734, "force", newJBool(force))
  add(path_402656733, "jobId", newJString(jobId))
  if body != nil:
    body_402656735 = body
  add(path_402656733, "thingName", newJString(thingName))
  result = call_402656732.call(path_402656733, query_402656734, nil, nil, body_402656735)

var cancelJobExecution* = Call_CancelJobExecution_402656717(
    name: "cancelJobExecution", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/things/{thingName}/jobs/{jobId}/cancel",
    validator: validate_CancelJobExecution_402656718, base: "/",
    makeUrl: url_CancelJobExecution_402656719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetDefaultAuthorizer_402656748 = ref object of OpenApiRestCall_402656044
proc url_SetDefaultAuthorizer_402656750(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetDefaultAuthorizer_402656749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656751 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656751 = validateParameter(valid_402656751, JString,
                                      required = false, default = nil)
  if valid_402656751 != nil:
    section.add "X-Amz-Security-Token", valid_402656751
  var valid_402656752 = header.getOrDefault("X-Amz-Signature")
  valid_402656752 = validateParameter(valid_402656752, JString,
                                      required = false, default = nil)
  if valid_402656752 != nil:
    section.add "X-Amz-Signature", valid_402656752
  var valid_402656753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656753 = validateParameter(valid_402656753, JString,
                                      required = false, default = nil)
  if valid_402656753 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656753
  var valid_402656754 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656754 = validateParameter(valid_402656754, JString,
                                      required = false, default = nil)
  if valid_402656754 != nil:
    section.add "X-Amz-Algorithm", valid_402656754
  var valid_402656755 = header.getOrDefault("X-Amz-Date")
  valid_402656755 = validateParameter(valid_402656755, JString,
                                      required = false, default = nil)
  if valid_402656755 != nil:
    section.add "X-Amz-Date", valid_402656755
  var valid_402656756 = header.getOrDefault("X-Amz-Credential")
  valid_402656756 = validateParameter(valid_402656756, JString,
                                      required = false, default = nil)
  if valid_402656756 != nil:
    section.add "X-Amz-Credential", valid_402656756
  var valid_402656757 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656757 = validateParameter(valid_402656757, JString,
                                      required = false, default = nil)
  if valid_402656757 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656757
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656759: Call_SetDefaultAuthorizer_402656748;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.
                                                                                         ## 
  let valid = call_402656759.validator(path, query, header, formData, body, _)
  let scheme = call_402656759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656759.makeUrl(scheme.get, call_402656759.host, call_402656759.base,
                                   call_402656759.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656759, uri, valid, _)

proc call*(call_402656760: Call_SetDefaultAuthorizer_402656748; body: JsonNode): Recallable =
  ## setDefaultAuthorizer
  ## Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.
  ##   
                                                                                                                       ## body: JObject (required)
  var body_402656761 = newJObject()
  if body != nil:
    body_402656761 = body
  result = call_402656760.call(nil, nil, nil, nil, body_402656761)

var setDefaultAuthorizer* = Call_SetDefaultAuthorizer_402656748(
    name: "setDefaultAuthorizer", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/default-authorizer",
    validator: validate_SetDefaultAuthorizer_402656749, base: "/",
    makeUrl: url_SetDefaultAuthorizer_402656750,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeDefaultAuthorizer_402656736 = ref object of OpenApiRestCall_402656044
proc url_DescribeDefaultAuthorizer_402656738(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeDefaultAuthorizer_402656737(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes the default authorizer.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656739 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656739 = validateParameter(valid_402656739, JString,
                                      required = false, default = nil)
  if valid_402656739 != nil:
    section.add "X-Amz-Security-Token", valid_402656739
  var valid_402656740 = header.getOrDefault("X-Amz-Signature")
  valid_402656740 = validateParameter(valid_402656740, JString,
                                      required = false, default = nil)
  if valid_402656740 != nil:
    section.add "X-Amz-Signature", valid_402656740
  var valid_402656741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656741 = validateParameter(valid_402656741, JString,
                                      required = false, default = nil)
  if valid_402656741 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656741
  var valid_402656742 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656742 = validateParameter(valid_402656742, JString,
                                      required = false, default = nil)
  if valid_402656742 != nil:
    section.add "X-Amz-Algorithm", valid_402656742
  var valid_402656743 = header.getOrDefault("X-Amz-Date")
  valid_402656743 = validateParameter(valid_402656743, JString,
                                      required = false, default = nil)
  if valid_402656743 != nil:
    section.add "X-Amz-Date", valid_402656743
  var valid_402656744 = header.getOrDefault("X-Amz-Credential")
  valid_402656744 = validateParameter(valid_402656744, JString,
                                      required = false, default = nil)
  if valid_402656744 != nil:
    section.add "X-Amz-Credential", valid_402656744
  var valid_402656745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656745 = validateParameter(valid_402656745, JString,
                                      required = false, default = nil)
  if valid_402656745 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656745
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656746: Call_DescribeDefaultAuthorizer_402656736;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes the default authorizer.
                                                                                         ## 
  let valid = call_402656746.validator(path, query, header, formData, body, _)
  let scheme = call_402656746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656746.makeUrl(scheme.get, call_402656746.host, call_402656746.base,
                                   call_402656746.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656746, uri, valid, _)

proc call*(call_402656747: Call_DescribeDefaultAuthorizer_402656736): Recallable =
  ## describeDefaultAuthorizer
  ## Describes the default authorizer.
  result = call_402656747.call(nil, nil, nil, nil, nil)

var describeDefaultAuthorizer* = Call_DescribeDefaultAuthorizer_402656736(
    name: "describeDefaultAuthorizer", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/default-authorizer",
    validator: validate_DescribeDefaultAuthorizer_402656737, base: "/",
    makeUrl: url_DescribeDefaultAuthorizer_402656738,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ClearDefaultAuthorizer_402656762 = ref object of OpenApiRestCall_402656044
proc url_ClearDefaultAuthorizer_402656764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ClearDefaultAuthorizer_402656763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Clears the default authorizer.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656765 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656765 = validateParameter(valid_402656765, JString,
                                      required = false, default = nil)
  if valid_402656765 != nil:
    section.add "X-Amz-Security-Token", valid_402656765
  var valid_402656766 = header.getOrDefault("X-Amz-Signature")
  valid_402656766 = validateParameter(valid_402656766, JString,
                                      required = false, default = nil)
  if valid_402656766 != nil:
    section.add "X-Amz-Signature", valid_402656766
  var valid_402656767 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656767 = validateParameter(valid_402656767, JString,
                                      required = false, default = nil)
  if valid_402656767 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656767
  var valid_402656768 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656768 = validateParameter(valid_402656768, JString,
                                      required = false, default = nil)
  if valid_402656768 != nil:
    section.add "X-Amz-Algorithm", valid_402656768
  var valid_402656769 = header.getOrDefault("X-Amz-Date")
  valid_402656769 = validateParameter(valid_402656769, JString,
                                      required = false, default = nil)
  if valid_402656769 != nil:
    section.add "X-Amz-Date", valid_402656769
  var valid_402656770 = header.getOrDefault("X-Amz-Credential")
  valid_402656770 = validateParameter(valid_402656770, JString,
                                      required = false, default = nil)
  if valid_402656770 != nil:
    section.add "X-Amz-Credential", valid_402656770
  var valid_402656771 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656771 = validateParameter(valid_402656771, JString,
                                      required = false, default = nil)
  if valid_402656771 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656771
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656772: Call_ClearDefaultAuthorizer_402656762;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Clears the default authorizer.
                                                                                         ## 
  let valid = call_402656772.validator(path, query, header, formData, body, _)
  let scheme = call_402656772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656772.makeUrl(scheme.get, call_402656772.host, call_402656772.base,
                                   call_402656772.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656772, uri, valid, _)

proc call*(call_402656773: Call_ClearDefaultAuthorizer_402656762): Recallable =
  ## clearDefaultAuthorizer
  ## Clears the default authorizer.
  result = call_402656773.call(nil, nil, nil, nil, nil)

var clearDefaultAuthorizer* = Call_ClearDefaultAuthorizer_402656762(
    name: "clearDefaultAuthorizer", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/default-authorizer",
    validator: validate_ClearDefaultAuthorizer_402656763, base: "/",
    makeUrl: url_ClearDefaultAuthorizer_402656764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ConfirmTopicRuleDestination_402656774 = ref object of OpenApiRestCall_402656044
proc url_ConfirmTopicRuleDestination_402656776(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "confirmationToken" in path,
         "`confirmationToken` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/confirmdestination/"),
                 (kind: VariableSegment, value: "confirmationToken")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ConfirmTopicRuleDestination_402656775(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Confirms a topic rule destination. When you create a rule requiring a destination, AWS IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   confirmationToken: JString (required)
                                 ##                    : The token used to confirm ownership or access to the topic rule confirmation URL.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `confirmationToken` field"
  var valid_402656777 = path.getOrDefault("confirmationToken")
  valid_402656777 = validateParameter(valid_402656777, JString, required = true,
                                      default = nil)
  if valid_402656777 != nil:
    section.add "confirmationToken", valid_402656777
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656778 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656778 = validateParameter(valid_402656778, JString,
                                      required = false, default = nil)
  if valid_402656778 != nil:
    section.add "X-Amz-Security-Token", valid_402656778
  var valid_402656779 = header.getOrDefault("X-Amz-Signature")
  valid_402656779 = validateParameter(valid_402656779, JString,
                                      required = false, default = nil)
  if valid_402656779 != nil:
    section.add "X-Amz-Signature", valid_402656779
  var valid_402656780 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656780 = validateParameter(valid_402656780, JString,
                                      required = false, default = nil)
  if valid_402656780 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656780
  var valid_402656781 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656781 = validateParameter(valid_402656781, JString,
                                      required = false, default = nil)
  if valid_402656781 != nil:
    section.add "X-Amz-Algorithm", valid_402656781
  var valid_402656782 = header.getOrDefault("X-Amz-Date")
  valid_402656782 = validateParameter(valid_402656782, JString,
                                      required = false, default = nil)
  if valid_402656782 != nil:
    section.add "X-Amz-Date", valid_402656782
  var valid_402656783 = header.getOrDefault("X-Amz-Credential")
  valid_402656783 = validateParameter(valid_402656783, JString,
                                      required = false, default = nil)
  if valid_402656783 != nil:
    section.add "X-Amz-Credential", valid_402656783
  var valid_402656784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656784 = validateParameter(valid_402656784, JString,
                                      required = false, default = nil)
  if valid_402656784 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656784
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656785: Call_ConfirmTopicRuleDestination_402656774;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Confirms a topic rule destination. When you create a rule requiring a destination, AWS IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.
                                                                                         ## 
  let valid = call_402656785.validator(path, query, header, formData, body, _)
  let scheme = call_402656785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656785.makeUrl(scheme.get, call_402656785.host, call_402656785.base,
                                   call_402656785.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656785, uri, valid, _)

proc call*(call_402656786: Call_ConfirmTopicRuleDestination_402656774;
           confirmationToken: string): Recallable =
  ## confirmTopicRuleDestination
  ## Confirms a topic rule destination. When you create a rule requiring a destination, AWS IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.
  ##   
                                                                                                                                                                                                                                                                                                                                        ## confirmationToken: string (required)
                                                                                                                                                                                                                                                                                                                                        ##                    
                                                                                                                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                                                                                                                                        ## token 
                                                                                                                                                                                                                                                                                                                                        ## used 
                                                                                                                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                                                                                                                        ## confirm 
                                                                                                                                                                                                                                                                                                                                        ## ownership 
                                                                                                                                                                                                                                                                                                                                        ## or 
                                                                                                                                                                                                                                                                                                                                        ## access 
                                                                                                                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                                                                                                                        ## topic 
                                                                                                                                                                                                                                                                                                                                        ## rule 
                                                                                                                                                                                                                                                                                                                                        ## confirmation 
                                                                                                                                                                                                                                                                                                                                        ## URL.
  var path_402656787 = newJObject()
  add(path_402656787, "confirmationToken", newJString(confirmationToken))
  result = call_402656786.call(path_402656787, nil, nil, nil, nil)

var confirmTopicRuleDestination* = Call_ConfirmTopicRuleDestination_402656774(
    name: "confirmTopicRuleDestination", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/confirmdestination/{confirmationToken}",
    validator: validate_ConfirmTopicRuleDestination_402656775, base: "/",
    makeUrl: url_ConfirmTopicRuleDestination_402656776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAuthorizer_402656802 = ref object of OpenApiRestCall_402656044
proc url_UpdateAuthorizer_402656804(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path,
         "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
                 (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateAuthorizer_402656803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates an authorizer.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
                                 ##                 : The authorizer name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizerName` field"
  var valid_402656805 = path.getOrDefault("authorizerName")
  valid_402656805 = validateParameter(valid_402656805, JString, required = true,
                                      default = nil)
  if valid_402656805 != nil:
    section.add "authorizerName", valid_402656805
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656806 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656806 = validateParameter(valid_402656806, JString,
                                      required = false, default = nil)
  if valid_402656806 != nil:
    section.add "X-Amz-Security-Token", valid_402656806
  var valid_402656807 = header.getOrDefault("X-Amz-Signature")
  valid_402656807 = validateParameter(valid_402656807, JString,
                                      required = false, default = nil)
  if valid_402656807 != nil:
    section.add "X-Amz-Signature", valid_402656807
  var valid_402656808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656808 = validateParameter(valid_402656808, JString,
                                      required = false, default = nil)
  if valid_402656808 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656808
  var valid_402656809 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656809 = validateParameter(valid_402656809, JString,
                                      required = false, default = nil)
  if valid_402656809 != nil:
    section.add "X-Amz-Algorithm", valid_402656809
  var valid_402656810 = header.getOrDefault("X-Amz-Date")
  valid_402656810 = validateParameter(valid_402656810, JString,
                                      required = false, default = nil)
  if valid_402656810 != nil:
    section.add "X-Amz-Date", valid_402656810
  var valid_402656811 = header.getOrDefault("X-Amz-Credential")
  valid_402656811 = validateParameter(valid_402656811, JString,
                                      required = false, default = nil)
  if valid_402656811 != nil:
    section.add "X-Amz-Credential", valid_402656811
  var valid_402656812 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656812 = validateParameter(valid_402656812, JString,
                                      required = false, default = nil)
  if valid_402656812 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656812
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656814: Call_UpdateAuthorizer_402656802;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates an authorizer.
                                                                                         ## 
  let valid = call_402656814.validator(path, query, header, formData, body, _)
  let scheme = call_402656814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656814.makeUrl(scheme.get, call_402656814.host, call_402656814.base,
                                   call_402656814.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656814, uri, valid, _)

proc call*(call_402656815: Call_UpdateAuthorizer_402656802; body: JsonNode;
           authorizerName: string): Recallable =
  ## updateAuthorizer
  ## Updates an authorizer.
  ##   body: JObject (required)
  ##   authorizerName: string (required)
                               ##                 : The authorizer name.
  var path_402656816 = newJObject()
  var body_402656817 = newJObject()
  if body != nil:
    body_402656817 = body
  add(path_402656816, "authorizerName", newJString(authorizerName))
  result = call_402656815.call(path_402656816, nil, nil, nil, body_402656817)

var updateAuthorizer* = Call_UpdateAuthorizer_402656802(
    name: "updateAuthorizer", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/authorizer/{authorizerName}",
    validator: validate_UpdateAuthorizer_402656803, base: "/",
    makeUrl: url_UpdateAuthorizer_402656804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateAuthorizer_402656818 = ref object of OpenApiRestCall_402656044
proc url_CreateAuthorizer_402656820(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path,
         "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
                 (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateAuthorizer_402656819(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an authorizer.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
                                 ##                 : The authorizer name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizerName` field"
  var valid_402656821 = path.getOrDefault("authorizerName")
  valid_402656821 = validateParameter(valid_402656821, JString, required = true,
                                      default = nil)
  if valid_402656821 != nil:
    section.add "authorizerName", valid_402656821
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656822 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656822 = validateParameter(valid_402656822, JString,
                                      required = false, default = nil)
  if valid_402656822 != nil:
    section.add "X-Amz-Security-Token", valid_402656822
  var valid_402656823 = header.getOrDefault("X-Amz-Signature")
  valid_402656823 = validateParameter(valid_402656823, JString,
                                      required = false, default = nil)
  if valid_402656823 != nil:
    section.add "X-Amz-Signature", valid_402656823
  var valid_402656824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656824 = validateParameter(valid_402656824, JString,
                                      required = false, default = nil)
  if valid_402656824 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656824
  var valid_402656825 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656825 = validateParameter(valid_402656825, JString,
                                      required = false, default = nil)
  if valid_402656825 != nil:
    section.add "X-Amz-Algorithm", valid_402656825
  var valid_402656826 = header.getOrDefault("X-Amz-Date")
  valid_402656826 = validateParameter(valid_402656826, JString,
                                      required = false, default = nil)
  if valid_402656826 != nil:
    section.add "X-Amz-Date", valid_402656826
  var valid_402656827 = header.getOrDefault("X-Amz-Credential")
  valid_402656827 = validateParameter(valid_402656827, JString,
                                      required = false, default = nil)
  if valid_402656827 != nil:
    section.add "X-Amz-Credential", valid_402656827
  var valid_402656828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656828 = validateParameter(valid_402656828, JString,
                                      required = false, default = nil)
  if valid_402656828 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656828
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656830: Call_CreateAuthorizer_402656818;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an authorizer.
                                                                                         ## 
  let valid = call_402656830.validator(path, query, header, formData, body, _)
  let scheme = call_402656830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656830.makeUrl(scheme.get, call_402656830.host, call_402656830.base,
                                   call_402656830.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656830, uri, valid, _)

proc call*(call_402656831: Call_CreateAuthorizer_402656818; body: JsonNode;
           authorizerName: string): Recallable =
  ## createAuthorizer
  ## Creates an authorizer.
  ##   body: JObject (required)
  ##   authorizerName: string (required)
                               ##                 : The authorizer name.
  var path_402656832 = newJObject()
  var body_402656833 = newJObject()
  if body != nil:
    body_402656833 = body
  add(path_402656832, "authorizerName", newJString(authorizerName))
  result = call_402656831.call(path_402656832, nil, nil, nil, body_402656833)

var createAuthorizer* = Call_CreateAuthorizer_402656818(
    name: "createAuthorizer", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/authorizer/{authorizerName}",
    validator: validate_CreateAuthorizer_402656819, base: "/",
    makeUrl: url_CreateAuthorizer_402656820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuthorizer_402656788 = ref object of OpenApiRestCall_402656044
proc url_DescribeAuthorizer_402656790(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path,
         "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
                 (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuthorizer_402656789(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes an authorizer.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
                                 ##                 : The name of the authorizer to describe.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizerName` field"
  var valid_402656791 = path.getOrDefault("authorizerName")
  valid_402656791 = validateParameter(valid_402656791, JString, required = true,
                                      default = nil)
  if valid_402656791 != nil:
    section.add "authorizerName", valid_402656791
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656792 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656792 = validateParameter(valid_402656792, JString,
                                      required = false, default = nil)
  if valid_402656792 != nil:
    section.add "X-Amz-Security-Token", valid_402656792
  var valid_402656793 = header.getOrDefault("X-Amz-Signature")
  valid_402656793 = validateParameter(valid_402656793, JString,
                                      required = false, default = nil)
  if valid_402656793 != nil:
    section.add "X-Amz-Signature", valid_402656793
  var valid_402656794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656794 = validateParameter(valid_402656794, JString,
                                      required = false, default = nil)
  if valid_402656794 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656794
  var valid_402656795 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656795 = validateParameter(valid_402656795, JString,
                                      required = false, default = nil)
  if valid_402656795 != nil:
    section.add "X-Amz-Algorithm", valid_402656795
  var valid_402656796 = header.getOrDefault("X-Amz-Date")
  valid_402656796 = validateParameter(valid_402656796, JString,
                                      required = false, default = nil)
  if valid_402656796 != nil:
    section.add "X-Amz-Date", valid_402656796
  var valid_402656797 = header.getOrDefault("X-Amz-Credential")
  valid_402656797 = validateParameter(valid_402656797, JString,
                                      required = false, default = nil)
  if valid_402656797 != nil:
    section.add "X-Amz-Credential", valid_402656797
  var valid_402656798 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656798 = validateParameter(valid_402656798, JString,
                                      required = false, default = nil)
  if valid_402656798 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656798
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656799: Call_DescribeAuthorizer_402656788;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes an authorizer.
                                                                                         ## 
  let valid = call_402656799.validator(path, query, header, formData, body, _)
  let scheme = call_402656799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656799.makeUrl(scheme.get, call_402656799.host, call_402656799.base,
                                   call_402656799.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656799, uri, valid, _)

proc call*(call_402656800: Call_DescribeAuthorizer_402656788;
           authorizerName: string): Recallable =
  ## describeAuthorizer
  ## Describes an authorizer.
  ##   authorizerName: string (required)
                             ##                 : The name of the authorizer to describe.
  var path_402656801 = newJObject()
  add(path_402656801, "authorizerName", newJString(authorizerName))
  result = call_402656800.call(path_402656801, nil, nil, nil, nil)

var describeAuthorizer* = Call_DescribeAuthorizer_402656788(
    name: "describeAuthorizer", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/authorizer/{authorizerName}",
    validator: validate_DescribeAuthorizer_402656789, base: "/",
    makeUrl: url_DescribeAuthorizer_402656790,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteAuthorizer_402656834 = ref object of OpenApiRestCall_402656044
proc url_DeleteAuthorizer_402656836(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path,
         "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
                 (kind: VariableSegment, value: "authorizerName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteAuthorizer_402656835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an authorizer.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
                                 ##                 : The name of the authorizer to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizerName` field"
  var valid_402656837 = path.getOrDefault("authorizerName")
  valid_402656837 = validateParameter(valid_402656837, JString, required = true,
                                      default = nil)
  if valid_402656837 != nil:
    section.add "authorizerName", valid_402656837
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656838 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656838 = validateParameter(valid_402656838, JString,
                                      required = false, default = nil)
  if valid_402656838 != nil:
    section.add "X-Amz-Security-Token", valid_402656838
  var valid_402656839 = header.getOrDefault("X-Amz-Signature")
  valid_402656839 = validateParameter(valid_402656839, JString,
                                      required = false, default = nil)
  if valid_402656839 != nil:
    section.add "X-Amz-Signature", valid_402656839
  var valid_402656840 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656840 = validateParameter(valid_402656840, JString,
                                      required = false, default = nil)
  if valid_402656840 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656840
  var valid_402656841 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656841 = validateParameter(valid_402656841, JString,
                                      required = false, default = nil)
  if valid_402656841 != nil:
    section.add "X-Amz-Algorithm", valid_402656841
  var valid_402656842 = header.getOrDefault("X-Amz-Date")
  valid_402656842 = validateParameter(valid_402656842, JString,
                                      required = false, default = nil)
  if valid_402656842 != nil:
    section.add "X-Amz-Date", valid_402656842
  var valid_402656843 = header.getOrDefault("X-Amz-Credential")
  valid_402656843 = validateParameter(valid_402656843, JString,
                                      required = false, default = nil)
  if valid_402656843 != nil:
    section.add "X-Amz-Credential", valid_402656843
  var valid_402656844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656844 = validateParameter(valid_402656844, JString,
                                      required = false, default = nil)
  if valid_402656844 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656844
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656845: Call_DeleteAuthorizer_402656834;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an authorizer.
                                                                                         ## 
  let valid = call_402656845.validator(path, query, header, formData, body, _)
  let scheme = call_402656845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656845.makeUrl(scheme.get, call_402656845.host, call_402656845.base,
                                   call_402656845.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656845, uri, valid, _)

proc call*(call_402656846: Call_DeleteAuthorizer_402656834;
           authorizerName: string): Recallable =
  ## deleteAuthorizer
  ## Deletes an authorizer.
  ##   authorizerName: string (required)
                           ##                 : The name of the authorizer to delete.
  var path_402656847 = newJObject()
  add(path_402656847, "authorizerName", newJString(authorizerName))
  result = call_402656846.call(path_402656847, nil, nil, nil, nil)

var deleteAuthorizer* = Call_DeleteAuthorizer_402656834(
    name: "deleteAuthorizer", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/authorizer/{authorizerName}",
    validator: validate_DeleteAuthorizer_402656835, base: "/",
    makeUrl: url_DeleteAuthorizer_402656836,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBillingGroup_402656862 = ref object of OpenApiRestCall_402656044
proc url_CreateBillingGroup_402656864(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
         "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
                 (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateBillingGroup_402656863(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a billing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
                                 ##                   : The name you wish to give to the billing group.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `billingGroupName` field"
  var valid_402656865 = path.getOrDefault("billingGroupName")
  valid_402656865 = validateParameter(valid_402656865, JString, required = true,
                                      default = nil)
  if valid_402656865 != nil:
    section.add "billingGroupName", valid_402656865
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656866 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656866 = validateParameter(valid_402656866, JString,
                                      required = false, default = nil)
  if valid_402656866 != nil:
    section.add "X-Amz-Security-Token", valid_402656866
  var valid_402656867 = header.getOrDefault("X-Amz-Signature")
  valid_402656867 = validateParameter(valid_402656867, JString,
                                      required = false, default = nil)
  if valid_402656867 != nil:
    section.add "X-Amz-Signature", valid_402656867
  var valid_402656868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656868 = validateParameter(valid_402656868, JString,
                                      required = false, default = nil)
  if valid_402656868 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656868
  var valid_402656869 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656869 = validateParameter(valid_402656869, JString,
                                      required = false, default = nil)
  if valid_402656869 != nil:
    section.add "X-Amz-Algorithm", valid_402656869
  var valid_402656870 = header.getOrDefault("X-Amz-Date")
  valid_402656870 = validateParameter(valid_402656870, JString,
                                      required = false, default = nil)
  if valid_402656870 != nil:
    section.add "X-Amz-Date", valid_402656870
  var valid_402656871 = header.getOrDefault("X-Amz-Credential")
  valid_402656871 = validateParameter(valid_402656871, JString,
                                      required = false, default = nil)
  if valid_402656871 != nil:
    section.add "X-Amz-Credential", valid_402656871
  var valid_402656872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656872 = validateParameter(valid_402656872, JString,
                                      required = false, default = nil)
  if valid_402656872 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656874: Call_CreateBillingGroup_402656862;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a billing group.
                                                                                         ## 
  let valid = call_402656874.validator(path, query, header, formData, body, _)
  let scheme = call_402656874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656874.makeUrl(scheme.get, call_402656874.host, call_402656874.base,
                                   call_402656874.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656874, uri, valid, _)

proc call*(call_402656875: Call_CreateBillingGroup_402656862;
           billingGroupName: string; body: JsonNode): Recallable =
  ## createBillingGroup
  ## Creates a billing group.
  ##   billingGroupName: string (required)
                             ##                   : The name you wish to give to the billing group.
  ##   
                                                                                                   ## body: JObject (required)
  var path_402656876 = newJObject()
  var body_402656877 = newJObject()
  add(path_402656876, "billingGroupName", newJString(billingGroupName))
  if body != nil:
    body_402656877 = body
  result = call_402656875.call(path_402656876, nil, nil, nil, body_402656877)

var createBillingGroup* = Call_CreateBillingGroup_402656862(
    name: "createBillingGroup", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_CreateBillingGroup_402656863, base: "/",
    makeUrl: url_CreateBillingGroup_402656864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeBillingGroup_402656848 = ref object of OpenApiRestCall_402656044
proc url_DescribeBillingGroup_402656850(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
         "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
                 (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeBillingGroup_402656849(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns information about a billing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
                                 ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `billingGroupName` field"
  var valid_402656851 = path.getOrDefault("billingGroupName")
  valid_402656851 = validateParameter(valid_402656851, JString, required = true,
                                      default = nil)
  if valid_402656851 != nil:
    section.add "billingGroupName", valid_402656851
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656852 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656852 = validateParameter(valid_402656852, JString,
                                      required = false, default = nil)
  if valid_402656852 != nil:
    section.add "X-Amz-Security-Token", valid_402656852
  var valid_402656853 = header.getOrDefault("X-Amz-Signature")
  valid_402656853 = validateParameter(valid_402656853, JString,
                                      required = false, default = nil)
  if valid_402656853 != nil:
    section.add "X-Amz-Signature", valid_402656853
  var valid_402656854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656854 = validateParameter(valid_402656854, JString,
                                      required = false, default = nil)
  if valid_402656854 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656854
  var valid_402656855 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656855 = validateParameter(valid_402656855, JString,
                                      required = false, default = nil)
  if valid_402656855 != nil:
    section.add "X-Amz-Algorithm", valid_402656855
  var valid_402656856 = header.getOrDefault("X-Amz-Date")
  valid_402656856 = validateParameter(valid_402656856, JString,
                                      required = false, default = nil)
  if valid_402656856 != nil:
    section.add "X-Amz-Date", valid_402656856
  var valid_402656857 = header.getOrDefault("X-Amz-Credential")
  valid_402656857 = validateParameter(valid_402656857, JString,
                                      required = false, default = nil)
  if valid_402656857 != nil:
    section.add "X-Amz-Credential", valid_402656857
  var valid_402656858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656858 = validateParameter(valid_402656858, JString,
                                      required = false, default = nil)
  if valid_402656858 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656858
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656859: Call_DescribeBillingGroup_402656848;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a billing group.
                                                                                         ## 
  let valid = call_402656859.validator(path, query, header, formData, body, _)
  let scheme = call_402656859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656859.makeUrl(scheme.get, call_402656859.host, call_402656859.base,
                                   call_402656859.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656859, uri, valid, _)

proc call*(call_402656860: Call_DescribeBillingGroup_402656848;
           billingGroupName: string): Recallable =
  ## describeBillingGroup
  ## Returns information about a billing group.
  ##   billingGroupName: string (required)
                                               ##                   : The name of the billing group.
  var path_402656861 = newJObject()
  add(path_402656861, "billingGroupName", newJString(billingGroupName))
  result = call_402656860.call(path_402656861, nil, nil, nil, nil)

var describeBillingGroup* = Call_DescribeBillingGroup_402656848(
    name: "describeBillingGroup", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_DescribeBillingGroup_402656849, base: "/",
    makeUrl: url_DescribeBillingGroup_402656850,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBillingGroup_402656894 = ref object of OpenApiRestCall_402656044
proc url_UpdateBillingGroup_402656896(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
         "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
                 (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateBillingGroup_402656895(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates information about the billing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
                                 ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `billingGroupName` field"
  var valid_402656897 = path.getOrDefault("billingGroupName")
  valid_402656897 = validateParameter(valid_402656897, JString, required = true,
                                      default = nil)
  if valid_402656897 != nil:
    section.add "billingGroupName", valid_402656897
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656898 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656898 = validateParameter(valid_402656898, JString,
                                      required = false, default = nil)
  if valid_402656898 != nil:
    section.add "X-Amz-Security-Token", valid_402656898
  var valid_402656899 = header.getOrDefault("X-Amz-Signature")
  valid_402656899 = validateParameter(valid_402656899, JString,
                                      required = false, default = nil)
  if valid_402656899 != nil:
    section.add "X-Amz-Signature", valid_402656899
  var valid_402656900 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656900 = validateParameter(valid_402656900, JString,
                                      required = false, default = nil)
  if valid_402656900 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656900
  var valid_402656901 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656901 = validateParameter(valid_402656901, JString,
                                      required = false, default = nil)
  if valid_402656901 != nil:
    section.add "X-Amz-Algorithm", valid_402656901
  var valid_402656902 = header.getOrDefault("X-Amz-Date")
  valid_402656902 = validateParameter(valid_402656902, JString,
                                      required = false, default = nil)
  if valid_402656902 != nil:
    section.add "X-Amz-Date", valid_402656902
  var valid_402656903 = header.getOrDefault("X-Amz-Credential")
  valid_402656903 = validateParameter(valid_402656903, JString,
                                      required = false, default = nil)
  if valid_402656903 != nil:
    section.add "X-Amz-Credential", valid_402656903
  var valid_402656904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656904 = validateParameter(valid_402656904, JString,
                                      required = false, default = nil)
  if valid_402656904 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656904
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656906: Call_UpdateBillingGroup_402656894;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates information about the billing group.
                                                                                         ## 
  let valid = call_402656906.validator(path, query, header, formData, body, _)
  let scheme = call_402656906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656906.makeUrl(scheme.get, call_402656906.host, call_402656906.base,
                                   call_402656906.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656906, uri, valid, _)

proc call*(call_402656907: Call_UpdateBillingGroup_402656894;
           billingGroupName: string; body: JsonNode): Recallable =
  ## updateBillingGroup
  ## Updates information about the billing group.
  ##   billingGroupName: string (required)
                                                 ##                   : The name of the billing group.
  ##   
                                                                                                      ## body: JObject (required)
  var path_402656908 = newJObject()
  var body_402656909 = newJObject()
  add(path_402656908, "billingGroupName", newJString(billingGroupName))
  if body != nil:
    body_402656909 = body
  result = call_402656907.call(path_402656908, nil, nil, nil, body_402656909)

var updateBillingGroup* = Call_UpdateBillingGroup_402656894(
    name: "updateBillingGroup", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_UpdateBillingGroup_402656895, base: "/",
    makeUrl: url_UpdateBillingGroup_402656896,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBillingGroup_402656878 = ref object of OpenApiRestCall_402656044
proc url_DeleteBillingGroup_402656880(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
         "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
                 (kind: VariableSegment, value: "billingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteBillingGroup_402656879(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the billing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
                                 ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `billingGroupName` field"
  var valid_402656881 = path.getOrDefault("billingGroupName")
  valid_402656881 = validateParameter(valid_402656881, JString, required = true,
                                      default = nil)
  if valid_402656881 != nil:
    section.add "billingGroupName", valid_402656881
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
                                  ##                  : The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>DeleteBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.
  section = newJObject()
  var valid_402656882 = query.getOrDefault("expectedVersion")
  valid_402656882 = validateParameter(valid_402656882, JInt, required = false,
                                      default = nil)
  if valid_402656882 != nil:
    section.add "expectedVersion", valid_402656882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656883 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656883 = validateParameter(valid_402656883, JString,
                                      required = false, default = nil)
  if valid_402656883 != nil:
    section.add "X-Amz-Security-Token", valid_402656883
  var valid_402656884 = header.getOrDefault("X-Amz-Signature")
  valid_402656884 = validateParameter(valid_402656884, JString,
                                      required = false, default = nil)
  if valid_402656884 != nil:
    section.add "X-Amz-Signature", valid_402656884
  var valid_402656885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656885 = validateParameter(valid_402656885, JString,
                                      required = false, default = nil)
  if valid_402656885 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656885
  var valid_402656886 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656886 = validateParameter(valid_402656886, JString,
                                      required = false, default = nil)
  if valid_402656886 != nil:
    section.add "X-Amz-Algorithm", valid_402656886
  var valid_402656887 = header.getOrDefault("X-Amz-Date")
  valid_402656887 = validateParameter(valid_402656887, JString,
                                      required = false, default = nil)
  if valid_402656887 != nil:
    section.add "X-Amz-Date", valid_402656887
  var valid_402656888 = header.getOrDefault("X-Amz-Credential")
  valid_402656888 = validateParameter(valid_402656888, JString,
                                      required = false, default = nil)
  if valid_402656888 != nil:
    section.add "X-Amz-Credential", valid_402656888
  var valid_402656889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656889 = validateParameter(valid_402656889, JString,
                                      required = false, default = nil)
  if valid_402656889 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656890: Call_DeleteBillingGroup_402656878;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the billing group.
                                                                                         ## 
  let valid = call_402656890.validator(path, query, header, formData, body, _)
  let scheme = call_402656890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656890.makeUrl(scheme.get, call_402656890.host, call_402656890.base,
                                   call_402656890.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656890, uri, valid, _)

proc call*(call_402656891: Call_DeleteBillingGroup_402656878;
           billingGroupName: string; expectedVersion: int = 0): Recallable =
  ## deleteBillingGroup
  ## Deletes the billing group.
  ##   billingGroupName: string (required)
                               ##                   : The name of the billing group.
  ##   
                                                                                    ## expectedVersion: int
                                                                                    ##                  
                                                                                    ## : 
                                                                                    ## The 
                                                                                    ## expected 
                                                                                    ## version 
                                                                                    ## of 
                                                                                    ## the 
                                                                                    ## billing 
                                                                                    ## group. 
                                                                                    ## If 
                                                                                    ## the 
                                                                                    ## version 
                                                                                    ## of 
                                                                                    ## the 
                                                                                    ## billing 
                                                                                    ## group 
                                                                                    ## does 
                                                                                    ## not 
                                                                                    ## match 
                                                                                    ## the 
                                                                                    ## expected 
                                                                                    ## version 
                                                                                    ## specified 
                                                                                    ## in 
                                                                                    ## the 
                                                                                    ## request, 
                                                                                    ## the 
                                                                                    ## <code>DeleteBillingGroup</code> 
                                                                                    ## request 
                                                                                    ## is 
                                                                                    ## rejected 
                                                                                    ## with 
                                                                                    ## a 
                                                                                    ## <code>VersionConflictException</code>.
  var path_402656892 = newJObject()
  var query_402656893 = newJObject()
  add(path_402656892, "billingGroupName", newJString(billingGroupName))
  add(query_402656893, "expectedVersion", newJInt(expectedVersion))
  result = call_402656891.call(path_402656892, query_402656893, nil, nil, nil)

var deleteBillingGroup* = Call_DeleteBillingGroup_402656878(
    name: "deleteBillingGroup", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/billing-groups/{billingGroupName}",
    validator: validate_DeleteBillingGroup_402656879, base: "/",
    makeUrl: url_DeleteBillingGroup_402656880,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateCertificateFromCsr_402656926 = ref object of OpenApiRestCall_402656044
proc url_CreateCertificateFromCsr_402656928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateCertificateFromCsr_402656927(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
                                  ##              : Specifies whether the certificate is active.
  section = newJObject()
  var valid_402656929 = query.getOrDefault("setAsActive")
  valid_402656929 = validateParameter(valid_402656929, JBool, required = false,
                                      default = nil)
  if valid_402656929 != nil:
    section.add "setAsActive", valid_402656929
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656930 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656930 = validateParameter(valid_402656930, JString,
                                      required = false, default = nil)
  if valid_402656930 != nil:
    section.add "X-Amz-Security-Token", valid_402656930
  var valid_402656931 = header.getOrDefault("X-Amz-Signature")
  valid_402656931 = validateParameter(valid_402656931, JString,
                                      required = false, default = nil)
  if valid_402656931 != nil:
    section.add "X-Amz-Signature", valid_402656931
  var valid_402656932 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656932 = validateParameter(valid_402656932, JString,
                                      required = false, default = nil)
  if valid_402656932 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656932
  var valid_402656933 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656933 = validateParameter(valid_402656933, JString,
                                      required = false, default = nil)
  if valid_402656933 != nil:
    section.add "X-Amz-Algorithm", valid_402656933
  var valid_402656934 = header.getOrDefault("X-Amz-Date")
  valid_402656934 = validateParameter(valid_402656934, JString,
                                      required = false, default = nil)
  if valid_402656934 != nil:
    section.add "X-Amz-Date", valid_402656934
  var valid_402656935 = header.getOrDefault("X-Amz-Credential")
  valid_402656935 = validateParameter(valid_402656935, JString,
                                      required = false, default = nil)
  if valid_402656935 != nil:
    section.add "X-Amz-Credential", valid_402656935
  var valid_402656936 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656936 = validateParameter(valid_402656936, JString,
                                      required = false, default = nil)
  if valid_402656936 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656936
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656938: Call_CreateCertificateFromCsr_402656926;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
                                                                                         ## 
  let valid = call_402656938.validator(path, query, header, formData, body, _)
  let scheme = call_402656938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656938.makeUrl(scheme.get, call_402656938.host, call_402656938.base,
                                   call_402656938.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656938, uri, valid, _)

proc call*(call_402656939: Call_CreateCertificateFromCsr_402656926;
           body: JsonNode; setAsActive: bool = false): Recallable =
  ## createCertificateFromCsr
  ## <p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
  ##   
setAsActive: bool


pecifies 
whether 
the 
certificate 
is 
active.
  ##   
body: JObject (required)
  var query_402656940 = newJObject()
  var body_402656941 = newJObject()
  add(query_402656940, "setAsActive", newJBool(setAsActive))
  if body != nil:
    body_402656941 = body
  result = call_402656939.call(nil, query_402656940, nil, nil, body_402656941)

var createCertificateFromCsr* = Call_CreateCertificateFromCsr_402656926(
    name: "createCertificateFromCsr", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/certificates",
    validator: validate_CreateCertificateFromCsr_402656927, base: "/",
    makeUrl: url_CreateCertificateFromCsr_402656928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListCertificates_402656910 = ref object of OpenApiRestCall_402656044
proc url_ListCertificates_402656912(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListCertificates_402656911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The marker for the next set of results.
  ##   
                                                                                      ## isAscendingOrder: JBool
                                                                                      ##                   
                                                                                      ## : 
                                                                                      ## Specifies 
                                                                                      ## the 
                                                                                      ## order 
                                                                                      ## for 
                                                                                      ## results. 
                                                                                      ## If 
                                                                                      ## True, 
                                                                                      ## the 
                                                                                      ## results 
                                                                                      ## are 
                                                                                      ## returned 
                                                                                      ## in 
                                                                                      ## ascending 
                                                                                      ## order, 
                                                                                      ## based 
                                                                                      ## on 
                                                                                      ## the 
                                                                                      ## creation 
                                                                                      ## date.
  ##   
                                                                                              ## pageSize: JInt
                                                                                              ##           
                                                                                              ## : 
                                                                                              ## The 
                                                                                              ## result 
                                                                                              ## page 
                                                                                              ## size.
  section = newJObject()
  var valid_402656913 = query.getOrDefault("marker")
  valid_402656913 = validateParameter(valid_402656913, JString,
                                      required = false, default = nil)
  if valid_402656913 != nil:
    section.add "marker", valid_402656913
  var valid_402656914 = query.getOrDefault("isAscendingOrder")
  valid_402656914 = validateParameter(valid_402656914, JBool, required = false,
                                      default = nil)
  if valid_402656914 != nil:
    section.add "isAscendingOrder", valid_402656914
  var valid_402656915 = query.getOrDefault("pageSize")
  valid_402656915 = validateParameter(valid_402656915, JInt, required = false,
                                      default = nil)
  if valid_402656915 != nil:
    section.add "pageSize", valid_402656915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656916 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656916 = validateParameter(valid_402656916, JString,
                                      required = false, default = nil)
  if valid_402656916 != nil:
    section.add "X-Amz-Security-Token", valid_402656916
  var valid_402656917 = header.getOrDefault("X-Amz-Signature")
  valid_402656917 = validateParameter(valid_402656917, JString,
                                      required = false, default = nil)
  if valid_402656917 != nil:
    section.add "X-Amz-Signature", valid_402656917
  var valid_402656918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656918 = validateParameter(valid_402656918, JString,
                                      required = false, default = nil)
  if valid_402656918 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656918
  var valid_402656919 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656919 = validateParameter(valid_402656919, JString,
                                      required = false, default = nil)
  if valid_402656919 != nil:
    section.add "X-Amz-Algorithm", valid_402656919
  var valid_402656920 = header.getOrDefault("X-Amz-Date")
  valid_402656920 = validateParameter(valid_402656920, JString,
                                      required = false, default = nil)
  if valid_402656920 != nil:
    section.add "X-Amz-Date", valid_402656920
  var valid_402656921 = header.getOrDefault("X-Amz-Credential")
  valid_402656921 = validateParameter(valid_402656921, JString,
                                      required = false, default = nil)
  if valid_402656921 != nil:
    section.add "X-Amz-Credential", valid_402656921
  var valid_402656922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656922 = validateParameter(valid_402656922, JString,
                                      required = false, default = nil)
  if valid_402656922 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656922
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656923: Call_ListCertificates_402656910;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
                                                                                         ## 
  let valid = call_402656923.validator(path, query, header, formData, body, _)
  let scheme = call_402656923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656923.makeUrl(scheme.get, call_402656923.host, call_402656923.base,
                                   call_402656923.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656923, uri, valid, _)

proc call*(call_402656924: Call_ListCertificates_402656910; marker: string = "";
           isAscendingOrder: bool = false; pageSize: int = 0): Recallable =
  ## listCertificates
  ## <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ##   
                                                                                                                                                                                                   ## marker: string
                                                                                                                                                                                                   ##         
                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                   ## marker 
                                                                                                                                                                                                   ## for 
                                                                                                                                                                                                   ## the 
                                                                                                                                                                                                   ## next 
                                                                                                                                                                                                   ## set 
                                                                                                                                                                                                   ## of 
                                                                                                                                                                                                   ## results.
  ##   
                                                                                                                                                                                                              ## isAscendingOrder: bool
                                                                                                                                                                                                              ##                   
                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                              ## Specifies 
                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                              ## order 
                                                                                                                                                                                                              ## for 
                                                                                                                                                                                                              ## results. 
                                                                                                                                                                                                              ## If 
                                                                                                                                                                                                              ## True, 
                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                              ## results 
                                                                                                                                                                                                              ## are 
                                                                                                                                                                                                              ## returned 
                                                                                                                                                                                                              ## in 
                                                                                                                                                                                                              ## ascending 
                                                                                                                                                                                                              ## order, 
                                                                                                                                                                                                              ## based 
                                                                                                                                                                                                              ## on 
                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                              ## creation 
                                                                                                                                                                                                              ## date.
  ##   
                                                                                                                                                                                                                      ## pageSize: int
                                                                                                                                                                                                                      ##           
                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                      ## The 
                                                                                                                                                                                                                      ## result 
                                                                                                                                                                                                                      ## page 
                                                                                                                                                                                                                      ## size.
  var query_402656925 = newJObject()
  add(query_402656925, "marker", newJString(marker))
  add(query_402656925, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402656925, "pageSize", newJInt(pageSize))
  result = call_402656924.call(nil, query_402656925, nil, nil, nil)

var listCertificates* = Call_ListCertificates_402656910(
    name: "listCertificates", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/certificates",
    validator: validate_ListCertificates_402656911, base: "/",
    makeUrl: url_ListCertificates_402656912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDomainConfiguration_402656956 = ref object of OpenApiRestCall_402656044
proc url_UpdateDomainConfiguration_402656958(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
         "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
                 (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDomainConfiguration_402656957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
                                 ##                          : The name of the domain configuration to be updated.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_402656959 = path.getOrDefault("domainConfigurationName")
  valid_402656959 = validateParameter(valid_402656959, JString, required = true,
                                      default = nil)
  if valid_402656959 != nil:
    section.add "domainConfigurationName", valid_402656959
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656960 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656960 = validateParameter(valid_402656960, JString,
                                      required = false, default = nil)
  if valid_402656960 != nil:
    section.add "X-Amz-Security-Token", valid_402656960
  var valid_402656961 = header.getOrDefault("X-Amz-Signature")
  valid_402656961 = validateParameter(valid_402656961, JString,
                                      required = false, default = nil)
  if valid_402656961 != nil:
    section.add "X-Amz-Signature", valid_402656961
  var valid_402656962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656962 = validateParameter(valid_402656962, JString,
                                      required = false, default = nil)
  if valid_402656962 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656962
  var valid_402656963 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656963 = validateParameter(valid_402656963, JString,
                                      required = false, default = nil)
  if valid_402656963 != nil:
    section.add "X-Amz-Algorithm", valid_402656963
  var valid_402656964 = header.getOrDefault("X-Amz-Date")
  valid_402656964 = validateParameter(valid_402656964, JString,
                                      required = false, default = nil)
  if valid_402656964 != nil:
    section.add "X-Amz-Date", valid_402656964
  var valid_402656965 = header.getOrDefault("X-Amz-Credential")
  valid_402656965 = validateParameter(valid_402656965, JString,
                                      required = false, default = nil)
  if valid_402656965 != nil:
    section.add "X-Amz-Credential", valid_402656965
  var valid_402656966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656966 = validateParameter(valid_402656966, JString,
                                      required = false, default = nil)
  if valid_402656966 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656968: Call_UpdateDomainConfiguration_402656956;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                                                                         ## 
  let valid = call_402656968.validator(path, query, header, formData, body, _)
  let scheme = call_402656968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656968.makeUrl(scheme.get, call_402656968.host, call_402656968.base,
                                   call_402656968.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656968, uri, valid, _)

proc call*(call_402656969: Call_UpdateDomainConfiguration_402656956;
           domainConfigurationName: string; body: JsonNode): Recallable =
  ## updateDomainConfiguration
  ## <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   
                                                                                                                                                                                                                                  ## domainConfigurationName: string (required)
                                                                                                                                                                                                                                  ##                          
                                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                                  ## The 
                                                                                                                                                                                                                                  ## name 
                                                                                                                                                                                                                                  ## of 
                                                                                                                                                                                                                                  ## the 
                                                                                                                                                                                                                                  ## domain 
                                                                                                                                                                                                                                  ## configuration 
                                                                                                                                                                                                                                  ## to 
                                                                                                                                                                                                                                  ## be 
                                                                                                                                                                                                                                  ## updated.
  ##   
                                                                                                                                                                                                                                             ## body: JObject (required)
  var path_402656970 = newJObject()
  var body_402656971 = newJObject()
  add(path_402656970, "domainConfigurationName",
      newJString(domainConfigurationName))
  if body != nil:
    body_402656971 = body
  result = call_402656969.call(path_402656970, nil, nil, nil, body_402656971)

var updateDomainConfiguration* = Call_UpdateDomainConfiguration_402656956(
    name: "updateDomainConfiguration", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_UpdateDomainConfiguration_402656957, base: "/",
    makeUrl: url_UpdateDomainConfiguration_402656958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDomainConfiguration_402656972 = ref object of OpenApiRestCall_402656044
proc url_CreateDomainConfiguration_402656974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
         "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
                 (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateDomainConfiguration_402656973(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
                                 ##                          : The name of the domain configuration. This value must be unique to a region.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_402656975 = path.getOrDefault("domainConfigurationName")
  valid_402656975 = validateParameter(valid_402656975, JString, required = true,
                                      default = nil)
  if valid_402656975 != nil:
    section.add "domainConfigurationName", valid_402656975
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656976 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656976 = validateParameter(valid_402656976, JString,
                                      required = false, default = nil)
  if valid_402656976 != nil:
    section.add "X-Amz-Security-Token", valid_402656976
  var valid_402656977 = header.getOrDefault("X-Amz-Signature")
  valid_402656977 = validateParameter(valid_402656977, JString,
                                      required = false, default = nil)
  if valid_402656977 != nil:
    section.add "X-Amz-Signature", valid_402656977
  var valid_402656978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656978 = validateParameter(valid_402656978, JString,
                                      required = false, default = nil)
  if valid_402656978 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656978
  var valid_402656979 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656979 = validateParameter(valid_402656979, JString,
                                      required = false, default = nil)
  if valid_402656979 != nil:
    section.add "X-Amz-Algorithm", valid_402656979
  var valid_402656980 = header.getOrDefault("X-Amz-Date")
  valid_402656980 = validateParameter(valid_402656980, JString,
                                      required = false, default = nil)
  if valid_402656980 != nil:
    section.add "X-Amz-Date", valid_402656980
  var valid_402656981 = header.getOrDefault("X-Amz-Credential")
  valid_402656981 = validateParameter(valid_402656981, JString,
                                      required = false, default = nil)
  if valid_402656981 != nil:
    section.add "X-Amz-Credential", valid_402656981
  var valid_402656982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656982 = validateParameter(valid_402656982, JString,
                                      required = false, default = nil)
  if valid_402656982 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656982
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656984: Call_CreateDomainConfiguration_402656972;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                                                                         ## 
  let valid = call_402656984.validator(path, query, header, formData, body, _)
  let scheme = call_402656984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656984.makeUrl(scheme.get, call_402656984.host, call_402656984.base,
                                   call_402656984.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656984, uri, valid, _)

proc call*(call_402656985: Call_CreateDomainConfiguration_402656972;
           domainConfigurationName: string; body: JsonNode): Recallable =
  ## createDomainConfiguration
  ## <p>Creates a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   
                                                                                                                                                 ## domainConfigurationName: string (required)
                                                                                                                                                 ##                          
                                                                                                                                                 ## : 
                                                                                                                                                 ## The 
                                                                                                                                                 ## name 
                                                                                                                                                 ## of 
                                                                                                                                                 ## the 
                                                                                                                                                 ## domain 
                                                                                                                                                 ## configuration. 
                                                                                                                                                 ## This 
                                                                                                                                                 ## value 
                                                                                                                                                 ## must 
                                                                                                                                                 ## be 
                                                                                                                                                 ## unique 
                                                                                                                                                 ## to 
                                                                                                                                                 ## a 
                                                                                                                                                 ## region.
  ##   
                                                                                                                                                           ## body: JObject (required)
  var path_402656986 = newJObject()
  var body_402656987 = newJObject()
  add(path_402656986, "domainConfigurationName",
      newJString(domainConfigurationName))
  if body != nil:
    body_402656987 = body
  result = call_402656985.call(path_402656986, nil, nil, nil, body_402656987)

var createDomainConfiguration* = Call_CreateDomainConfiguration_402656972(
    name: "createDomainConfiguration", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_CreateDomainConfiguration_402656973, base: "/",
    makeUrl: url_CreateDomainConfiguration_402656974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeDomainConfiguration_402656942 = ref object of OpenApiRestCall_402656044
proc url_DescribeDomainConfiguration_402656944(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
         "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
                 (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeDomainConfiguration_402656943(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Gets summary information about a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
                                 ##                          : The name of the domain configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_402656945 = path.getOrDefault("domainConfigurationName")
  valid_402656945 = validateParameter(valid_402656945, JString, required = true,
                                      default = nil)
  if valid_402656945 != nil:
    section.add "domainConfigurationName", valid_402656945
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656946 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656946 = validateParameter(valid_402656946, JString,
                                      required = false, default = nil)
  if valid_402656946 != nil:
    section.add "X-Amz-Security-Token", valid_402656946
  var valid_402656947 = header.getOrDefault("X-Amz-Signature")
  valid_402656947 = validateParameter(valid_402656947, JString,
                                      required = false, default = nil)
  if valid_402656947 != nil:
    section.add "X-Amz-Signature", valid_402656947
  var valid_402656948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656948 = validateParameter(valid_402656948, JString,
                                      required = false, default = nil)
  if valid_402656948 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656948
  var valid_402656949 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656949 = validateParameter(valid_402656949, JString,
                                      required = false, default = nil)
  if valid_402656949 != nil:
    section.add "X-Amz-Algorithm", valid_402656949
  var valid_402656950 = header.getOrDefault("X-Amz-Date")
  valid_402656950 = validateParameter(valid_402656950, JString,
                                      required = false, default = nil)
  if valid_402656950 != nil:
    section.add "X-Amz-Date", valid_402656950
  var valid_402656951 = header.getOrDefault("X-Amz-Credential")
  valid_402656951 = validateParameter(valid_402656951, JString,
                                      required = false, default = nil)
  if valid_402656951 != nil:
    section.add "X-Amz-Credential", valid_402656951
  var valid_402656952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656952 = validateParameter(valid_402656952, JString,
                                      required = false, default = nil)
  if valid_402656952 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656952
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656953: Call_DescribeDomainConfiguration_402656942;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets summary information about a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                                                                         ## 
  let valid = call_402656953.validator(path, query, header, formData, body, _)
  let scheme = call_402656953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656953.makeUrl(scheme.get, call_402656953.host, call_402656953.base,
                                   call_402656953.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656953, uri, valid, _)

proc call*(call_402656954: Call_DescribeDomainConfiguration_402656942;
           domainConfigurationName: string): Recallable =
  ## describeDomainConfiguration
  ## <p>Gets summary information about a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   
                                                                                                                                                                        ## domainConfigurationName: string (required)
                                                                                                                                                                        ##                          
                                                                                                                                                                        ## : 
                                                                                                                                                                        ## The 
                                                                                                                                                                        ## name 
                                                                                                                                                                        ## of 
                                                                                                                                                                        ## the 
                                                                                                                                                                        ## domain 
                                                                                                                                                                        ## configuration.
  var path_402656955 = newJObject()
  add(path_402656955, "domainConfigurationName",
      newJString(domainConfigurationName))
  result = call_402656954.call(path_402656955, nil, nil, nil, nil)

var describeDomainConfiguration* = Call_DescribeDomainConfiguration_402656942(
    name: "describeDomainConfiguration", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_DescribeDomainConfiguration_402656943, base: "/",
    makeUrl: url_DescribeDomainConfiguration_402656944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDomainConfiguration_402656988 = ref object of OpenApiRestCall_402656044
proc url_DeleteDomainConfiguration_402656990(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domainConfigurationName" in path,
         "`domainConfigurationName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainConfigurations/"),
                 (kind: VariableSegment, value: "domainConfigurationName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDomainConfiguration_402656989(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the specified domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainConfigurationName: JString (required)
                                 ##                          : The name of the domain configuration to be deleted.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainConfigurationName` field"
  var valid_402656991 = path.getOrDefault("domainConfigurationName")
  valid_402656991 = validateParameter(valid_402656991, JString, required = true,
                                      default = nil)
  if valid_402656991 != nil:
    section.add "domainConfigurationName", valid_402656991
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656992 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656992 = validateParameter(valid_402656992, JString,
                                      required = false, default = nil)
  if valid_402656992 != nil:
    section.add "X-Amz-Security-Token", valid_402656992
  var valid_402656993 = header.getOrDefault("X-Amz-Signature")
  valid_402656993 = validateParameter(valid_402656993, JString,
                                      required = false, default = nil)
  if valid_402656993 != nil:
    section.add "X-Amz-Signature", valid_402656993
  var valid_402656994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656994 = validateParameter(valid_402656994, JString,
                                      required = false, default = nil)
  if valid_402656994 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656994
  var valid_402656995 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656995 = validateParameter(valid_402656995, JString,
                                      required = false, default = nil)
  if valid_402656995 != nil:
    section.add "X-Amz-Algorithm", valid_402656995
  var valid_402656996 = header.getOrDefault("X-Amz-Date")
  valid_402656996 = validateParameter(valid_402656996, JString,
                                      required = false, default = nil)
  if valid_402656996 != nil:
    section.add "X-Amz-Date", valid_402656996
  var valid_402656997 = header.getOrDefault("X-Amz-Credential")
  valid_402656997 = validateParameter(valid_402656997, JString,
                                      required = false, default = nil)
  if valid_402656997 != nil:
    section.add "X-Amz-Credential", valid_402656997
  var valid_402656998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656998 = validateParameter(valid_402656998, JString,
                                      required = false, default = nil)
  if valid_402656998 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656998
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656999: Call_DeleteDomainConfiguration_402656988;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                                                                         ## 
  let valid = call_402656999.validator(path, query, header, formData, body, _)
  let scheme = call_402656999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656999.makeUrl(scheme.get, call_402656999.host, call_402656999.base,
                                   call_402656999.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656999, uri, valid, _)

proc call*(call_402657000: Call_DeleteDomainConfiguration_402656988;
           domainConfigurationName: string): Recallable =
  ## deleteDomainConfiguration
  ## <p>Deletes the specified domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   
                                                                                                                                                             ## domainConfigurationName: string (required)
                                                                                                                                                             ##                          
                                                                                                                                                             ## : 
                                                                                                                                                             ## The 
                                                                                                                                                             ## name 
                                                                                                                                                             ## of 
                                                                                                                                                             ## the 
                                                                                                                                                             ## domain 
                                                                                                                                                             ## configuration 
                                                                                                                                                             ## to 
                                                                                                                                                             ## be 
                                                                                                                                                             ## deleted.
  var path_402657001 = newJObject()
  add(path_402657001, "domainConfigurationName",
      newJString(domainConfigurationName))
  result = call_402657000.call(path_402657001, nil, nil, nil, nil)

var deleteDomainConfiguration* = Call_DeleteDomainConfiguration_402656988(
    name: "deleteDomainConfiguration", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/domainConfigurations/{domainConfigurationName}",
    validator: validate_DeleteDomainConfiguration_402656989, base: "/",
    makeUrl: url_DeleteDomainConfiguration_402656990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDynamicThingGroup_402657002 = ref object of OpenApiRestCall_402656044
proc url_CreateDynamicThingGroup_402657004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/dynamic-thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateDynamicThingGroup_402657003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a dynamic thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The dynamic thing group name to create.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402657005 = path.getOrDefault("thingGroupName")
  valid_402657005 = validateParameter(valid_402657005, JString, required = true,
                                      default = nil)
  if valid_402657005 != nil:
    section.add "thingGroupName", valid_402657005
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657006 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657006 = validateParameter(valid_402657006, JString,
                                      required = false, default = nil)
  if valid_402657006 != nil:
    section.add "X-Amz-Security-Token", valid_402657006
  var valid_402657007 = header.getOrDefault("X-Amz-Signature")
  valid_402657007 = validateParameter(valid_402657007, JString,
                                      required = false, default = nil)
  if valid_402657007 != nil:
    section.add "X-Amz-Signature", valid_402657007
  var valid_402657008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657008 = validateParameter(valid_402657008, JString,
                                      required = false, default = nil)
  if valid_402657008 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657008
  var valid_402657009 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657009 = validateParameter(valid_402657009, JString,
                                      required = false, default = nil)
  if valid_402657009 != nil:
    section.add "X-Amz-Algorithm", valid_402657009
  var valid_402657010 = header.getOrDefault("X-Amz-Date")
  valid_402657010 = validateParameter(valid_402657010, JString,
                                      required = false, default = nil)
  if valid_402657010 != nil:
    section.add "X-Amz-Date", valid_402657010
  var valid_402657011 = header.getOrDefault("X-Amz-Credential")
  valid_402657011 = validateParameter(valid_402657011, JString,
                                      required = false, default = nil)
  if valid_402657011 != nil:
    section.add "X-Amz-Credential", valid_402657011
  var valid_402657012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657012 = validateParameter(valid_402657012, JString,
                                      required = false, default = nil)
  if valid_402657012 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657012
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657014: Call_CreateDynamicThingGroup_402657002;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a dynamic thing group.
                                                                                         ## 
  let valid = call_402657014.validator(path, query, header, formData, body, _)
  let scheme = call_402657014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657014.makeUrl(scheme.get, call_402657014.host, call_402657014.base,
                                   call_402657014.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657014, uri, valid, _)

proc call*(call_402657015: Call_CreateDynamicThingGroup_402657002;
           thingGroupName: string; body: JsonNode): Recallable =
  ## createDynamicThingGroup
  ## Creates a dynamic thing group.
  ##   thingGroupName: string (required)
                                   ##                 : The dynamic thing group name to create.
  ##   
                                                                                               ## body: JObject (required)
  var path_402657016 = newJObject()
  var body_402657017 = newJObject()
  add(path_402657016, "thingGroupName", newJString(thingGroupName))
  if body != nil:
    body_402657017 = body
  result = call_402657015.call(path_402657016, nil, nil, nil, body_402657017)

var createDynamicThingGroup* = Call_CreateDynamicThingGroup_402657002(
    name: "createDynamicThingGroup", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/dynamic-thing-groups/{thingGroupName}",
    validator: validate_CreateDynamicThingGroup_402657003, base: "/",
    makeUrl: url_CreateDynamicThingGroup_402657004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDynamicThingGroup_402657034 = ref object of OpenApiRestCall_402656044
proc url_UpdateDynamicThingGroup_402657036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/dynamic-thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDynamicThingGroup_402657035(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a dynamic thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The name of the dynamic thing group to update.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402657037 = path.getOrDefault("thingGroupName")
  valid_402657037 = validateParameter(valid_402657037, JString, required = true,
                                      default = nil)
  if valid_402657037 != nil:
    section.add "thingGroupName", valid_402657037
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657038 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657038 = validateParameter(valid_402657038, JString,
                                      required = false, default = nil)
  if valid_402657038 != nil:
    section.add "X-Amz-Security-Token", valid_402657038
  var valid_402657039 = header.getOrDefault("X-Amz-Signature")
  valid_402657039 = validateParameter(valid_402657039, JString,
                                      required = false, default = nil)
  if valid_402657039 != nil:
    section.add "X-Amz-Signature", valid_402657039
  var valid_402657040 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657040 = validateParameter(valid_402657040, JString,
                                      required = false, default = nil)
  if valid_402657040 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657040
  var valid_402657041 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657041 = validateParameter(valid_402657041, JString,
                                      required = false, default = nil)
  if valid_402657041 != nil:
    section.add "X-Amz-Algorithm", valid_402657041
  var valid_402657042 = header.getOrDefault("X-Amz-Date")
  valid_402657042 = validateParameter(valid_402657042, JString,
                                      required = false, default = nil)
  if valid_402657042 != nil:
    section.add "X-Amz-Date", valid_402657042
  var valid_402657043 = header.getOrDefault("X-Amz-Credential")
  valid_402657043 = validateParameter(valid_402657043, JString,
                                      required = false, default = nil)
  if valid_402657043 != nil:
    section.add "X-Amz-Credential", valid_402657043
  var valid_402657044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657044 = validateParameter(valid_402657044, JString,
                                      required = false, default = nil)
  if valid_402657044 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657044
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657046: Call_UpdateDynamicThingGroup_402657034;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a dynamic thing group.
                                                                                         ## 
  let valid = call_402657046.validator(path, query, header, formData, body, _)
  let scheme = call_402657046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657046.makeUrl(scheme.get, call_402657046.host, call_402657046.base,
                                   call_402657046.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657046, uri, valid, _)

proc call*(call_402657047: Call_UpdateDynamicThingGroup_402657034;
           thingGroupName: string; body: JsonNode): Recallable =
  ## updateDynamicThingGroup
  ## Updates a dynamic thing group.
  ##   thingGroupName: string (required)
                                   ##                 : The name of the dynamic thing group to update.
  ##   
                                                                                                      ## body: JObject (required)
  var path_402657048 = newJObject()
  var body_402657049 = newJObject()
  add(path_402657048, "thingGroupName", newJString(thingGroupName))
  if body != nil:
    body_402657049 = body
  result = call_402657047.call(path_402657048, nil, nil, nil, body_402657049)

var updateDynamicThingGroup* = Call_UpdateDynamicThingGroup_402657034(
    name: "updateDynamicThingGroup", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/dynamic-thing-groups/{thingGroupName}",
    validator: validate_UpdateDynamicThingGroup_402657035, base: "/",
    makeUrl: url_UpdateDynamicThingGroup_402657036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDynamicThingGroup_402657018 = ref object of OpenApiRestCall_402656044
proc url_DeleteDynamicThingGroup_402657020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/dynamic-thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDynamicThingGroup_402657019(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a dynamic thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The name of the dynamic thing group to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402657021 = path.getOrDefault("thingGroupName")
  valid_402657021 = validateParameter(valid_402657021, JString, required = true,
                                      default = nil)
  if valid_402657021 != nil:
    section.add "thingGroupName", valid_402657021
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
                                  ##                  : The expected version of the dynamic thing group to delete.
  section = newJObject()
  var valid_402657022 = query.getOrDefault("expectedVersion")
  valid_402657022 = validateParameter(valid_402657022, JInt, required = false,
                                      default = nil)
  if valid_402657022 != nil:
    section.add "expectedVersion", valid_402657022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657023 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657023 = validateParameter(valid_402657023, JString,
                                      required = false, default = nil)
  if valid_402657023 != nil:
    section.add "X-Amz-Security-Token", valid_402657023
  var valid_402657024 = header.getOrDefault("X-Amz-Signature")
  valid_402657024 = validateParameter(valid_402657024, JString,
                                      required = false, default = nil)
  if valid_402657024 != nil:
    section.add "X-Amz-Signature", valid_402657024
  var valid_402657025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657025 = validateParameter(valid_402657025, JString,
                                      required = false, default = nil)
  if valid_402657025 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657025
  var valid_402657026 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657026 = validateParameter(valid_402657026, JString,
                                      required = false, default = nil)
  if valid_402657026 != nil:
    section.add "X-Amz-Algorithm", valid_402657026
  var valid_402657027 = header.getOrDefault("X-Amz-Date")
  valid_402657027 = validateParameter(valid_402657027, JString,
                                      required = false, default = nil)
  if valid_402657027 != nil:
    section.add "X-Amz-Date", valid_402657027
  var valid_402657028 = header.getOrDefault("X-Amz-Credential")
  valid_402657028 = validateParameter(valid_402657028, JString,
                                      required = false, default = nil)
  if valid_402657028 != nil:
    section.add "X-Amz-Credential", valid_402657028
  var valid_402657029 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657029 = validateParameter(valid_402657029, JString,
                                      required = false, default = nil)
  if valid_402657029 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657029
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657030: Call_DeleteDynamicThingGroup_402657018;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a dynamic thing group.
                                                                                         ## 
  let valid = call_402657030.validator(path, query, header, formData, body, _)
  let scheme = call_402657030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657030.makeUrl(scheme.get, call_402657030.host, call_402657030.base,
                                   call_402657030.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657030, uri, valid, _)

proc call*(call_402657031: Call_DeleteDynamicThingGroup_402657018;
           thingGroupName: string; expectedVersion: int = 0): Recallable =
  ## deleteDynamicThingGroup
  ## Deletes a dynamic thing group.
  ##   thingGroupName: string (required)
                                   ##                 : The name of the dynamic thing group to delete.
  ##   
                                                                                                      ## expectedVersion: int
                                                                                                      ##                  
                                                                                                      ## : 
                                                                                                      ## The 
                                                                                                      ## expected 
                                                                                                      ## version 
                                                                                                      ## of 
                                                                                                      ## the 
                                                                                                      ## dynamic 
                                                                                                      ## thing 
                                                                                                      ## group 
                                                                                                      ## to 
                                                                                                      ## delete.
  var path_402657032 = newJObject()
  var query_402657033 = newJObject()
  add(path_402657032, "thingGroupName", newJString(thingGroupName))
  add(query_402657033, "expectedVersion", newJInt(expectedVersion))
  result = call_402657031.call(path_402657032, query_402657033, nil, nil, nil)

var deleteDynamicThingGroup* = Call_DeleteDynamicThingGroup_402657018(
    name: "deleteDynamicThingGroup", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/dynamic-thing-groups/{thingGroupName}",
    validator: validate_DeleteDynamicThingGroup_402657019, base: "/",
    makeUrl: url_DeleteDynamicThingGroup_402657020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateJob_402657064 = ref object of OpenApiRestCall_402656044
proc url_CreateJob_402657066(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateJob_402657065(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a job.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402657067 = path.getOrDefault("jobId")
  valid_402657067 = validateParameter(valid_402657067, JString, required = true,
                                      default = nil)
  if valid_402657067 != nil:
    section.add "jobId", valid_402657067
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657068 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657068 = validateParameter(valid_402657068, JString,
                                      required = false, default = nil)
  if valid_402657068 != nil:
    section.add "X-Amz-Security-Token", valid_402657068
  var valid_402657069 = header.getOrDefault("X-Amz-Signature")
  valid_402657069 = validateParameter(valid_402657069, JString,
                                      required = false, default = nil)
  if valid_402657069 != nil:
    section.add "X-Amz-Signature", valid_402657069
  var valid_402657070 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657070 = validateParameter(valid_402657070, JString,
                                      required = false, default = nil)
  if valid_402657070 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657070
  var valid_402657071 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657071 = validateParameter(valid_402657071, JString,
                                      required = false, default = nil)
  if valid_402657071 != nil:
    section.add "X-Amz-Algorithm", valid_402657071
  var valid_402657072 = header.getOrDefault("X-Amz-Date")
  valid_402657072 = validateParameter(valid_402657072, JString,
                                      required = false, default = nil)
  if valid_402657072 != nil:
    section.add "X-Amz-Date", valid_402657072
  var valid_402657073 = header.getOrDefault("X-Amz-Credential")
  valid_402657073 = validateParameter(valid_402657073, JString,
                                      required = false, default = nil)
  if valid_402657073 != nil:
    section.add "X-Amz-Credential", valid_402657073
  var valid_402657074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657074 = validateParameter(valid_402657074, JString,
                                      required = false, default = nil)
  if valid_402657074 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657074
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657076: Call_CreateJob_402657064; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a job.
                                                                                         ## 
  let valid = call_402657076.validator(path, query, header, formData, body, _)
  let scheme = call_402657076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657076.makeUrl(scheme.get, call_402657076.host, call_402657076.base,
                                   call_402657076.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657076, uri, valid, _)

proc call*(call_402657077: Call_CreateJob_402657064; jobId: string;
           body: JsonNode): Recallable =
  ## createJob
  ## Creates a job.
  ##   jobId: string (required)
                   ##        : A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.
  ##   
                                                                                                                                                                                   ## body: JObject (required)
  var path_402657078 = newJObject()
  var body_402657079 = newJObject()
  add(path_402657078, "jobId", newJString(jobId))
  if body != nil:
    body_402657079 = body
  result = call_402657077.call(path_402657078, nil, nil, nil, body_402657079)

var createJob* = Call_CreateJob_402657064(name: "createJob",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com", route: "/jobs/{jobId}",
    validator: validate_CreateJob_402657065, base: "/", makeUrl: url_CreateJob_402657066,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeJob_402657050 = ref object of OpenApiRestCall_402656044
proc url_DescribeJob_402657052(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeJob_402657051(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a job.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402657053 = path.getOrDefault("jobId")
  valid_402657053 = validateParameter(valid_402657053, JString, required = true,
                                      default = nil)
  if valid_402657053 != nil:
    section.add "jobId", valid_402657053
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657054 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657054 = validateParameter(valid_402657054, JString,
                                      required = false, default = nil)
  if valid_402657054 != nil:
    section.add "X-Amz-Security-Token", valid_402657054
  var valid_402657055 = header.getOrDefault("X-Amz-Signature")
  valid_402657055 = validateParameter(valid_402657055, JString,
                                      required = false, default = nil)
  if valid_402657055 != nil:
    section.add "X-Amz-Signature", valid_402657055
  var valid_402657056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657056 = validateParameter(valid_402657056, JString,
                                      required = false, default = nil)
  if valid_402657056 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657056
  var valid_402657057 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657057 = validateParameter(valid_402657057, JString,
                                      required = false, default = nil)
  if valid_402657057 != nil:
    section.add "X-Amz-Algorithm", valid_402657057
  var valid_402657058 = header.getOrDefault("X-Amz-Date")
  valid_402657058 = validateParameter(valid_402657058, JString,
                                      required = false, default = nil)
  if valid_402657058 != nil:
    section.add "X-Amz-Date", valid_402657058
  var valid_402657059 = header.getOrDefault("X-Amz-Credential")
  valid_402657059 = validateParameter(valid_402657059, JString,
                                      required = false, default = nil)
  if valid_402657059 != nil:
    section.add "X-Amz-Credential", valid_402657059
  var valid_402657060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657060 = validateParameter(valid_402657060, JString,
                                      required = false, default = nil)
  if valid_402657060 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657060
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657061: Call_DescribeJob_402657050; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a job.
                                                                                         ## 
  let valid = call_402657061.validator(path, query, header, formData, body, _)
  let scheme = call_402657061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657061.makeUrl(scheme.get, call_402657061.host, call_402657061.base,
                                   call_402657061.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657061, uri, valid, _)

proc call*(call_402657062: Call_DescribeJob_402657050; jobId: string): Recallable =
  ## describeJob
  ## Describes a job.
  ##   jobId: string (required)
                     ##        : The unique identifier you assigned to this job when it was created.
  var path_402657063 = newJObject()
  add(path_402657063, "jobId", newJString(jobId))
  result = call_402657062.call(path_402657063, nil, nil, nil, nil)

var describeJob* = Call_DescribeJob_402657050(name: "describeJob",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/jobs/{jobId}",
    validator: validate_DescribeJob_402657051, base: "/",
    makeUrl: url_DescribeJob_402657052, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateJob_402657096 = ref object of OpenApiRestCall_402656044
proc url_UpdateJob_402657098(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateJob_402657097(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates supported fields of the specified job.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The ID of the job to be updated.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402657099 = path.getOrDefault("jobId")
  valid_402657099 = validateParameter(valid_402657099, JString, required = true,
                                      default = nil)
  if valid_402657099 != nil:
    section.add "jobId", valid_402657099
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657100 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657100 = validateParameter(valid_402657100, JString,
                                      required = false, default = nil)
  if valid_402657100 != nil:
    section.add "X-Amz-Security-Token", valid_402657100
  var valid_402657101 = header.getOrDefault("X-Amz-Signature")
  valid_402657101 = validateParameter(valid_402657101, JString,
                                      required = false, default = nil)
  if valid_402657101 != nil:
    section.add "X-Amz-Signature", valid_402657101
  var valid_402657102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657102 = validateParameter(valid_402657102, JString,
                                      required = false, default = nil)
  if valid_402657102 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657102
  var valid_402657103 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657103 = validateParameter(valid_402657103, JString,
                                      required = false, default = nil)
  if valid_402657103 != nil:
    section.add "X-Amz-Algorithm", valid_402657103
  var valid_402657104 = header.getOrDefault("X-Amz-Date")
  valid_402657104 = validateParameter(valid_402657104, JString,
                                      required = false, default = nil)
  if valid_402657104 != nil:
    section.add "X-Amz-Date", valid_402657104
  var valid_402657105 = header.getOrDefault("X-Amz-Credential")
  valid_402657105 = validateParameter(valid_402657105, JString,
                                      required = false, default = nil)
  if valid_402657105 != nil:
    section.add "X-Amz-Credential", valid_402657105
  var valid_402657106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657106 = validateParameter(valid_402657106, JString,
                                      required = false, default = nil)
  if valid_402657106 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657106
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657108: Call_UpdateJob_402657096; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates supported fields of the specified job.
                                                                                         ## 
  let valid = call_402657108.validator(path, query, header, formData, body, _)
  let scheme = call_402657108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657108.makeUrl(scheme.get, call_402657108.host, call_402657108.base,
                                   call_402657108.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657108, uri, valid, _)

proc call*(call_402657109: Call_UpdateJob_402657096; jobId: string;
           body: JsonNode): Recallable =
  ## updateJob
  ## Updates supported fields of the specified job.
  ##   jobId: string (required)
                                                   ##        : The ID of the job to be updated.
  ##   
                                                                                               ## body: JObject (required)
  var path_402657110 = newJObject()
  var body_402657111 = newJObject()
  add(path_402657110, "jobId", newJString(jobId))
  if body != nil:
    body_402657111 = body
  result = call_402657109.call(path_402657110, nil, nil, nil, body_402657111)

var updateJob* = Call_UpdateJob_402657096(name: "updateJob",
    meth: HttpMethod.HttpPatch, host: "iot.amazonaws.com",
    route: "/jobs/{jobId}", validator: validate_UpdateJob_402657097, base: "/",
    makeUrl: url_UpdateJob_402657098, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteJob_402657080 = ref object of OpenApiRestCall_402656044
proc url_DeleteJob_402657082(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteJob_402657081(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : <p>The ID of the job to be deleted.</p> <p>After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.</p>
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402657083 = path.getOrDefault("jobId")
  valid_402657083 = validateParameter(valid_402657083, JString, required = true,
                                      default = nil)
  if valid_402657083 != nil:
    section.add "jobId", valid_402657083
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
                                  ##        : <p>(Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state.</p> </note>
  section = newJObject()
  var valid_402657084 = query.getOrDefault("force")
  valid_402657084 = validateParameter(valid_402657084, JBool, required = false,
                                      default = nil)
  if valid_402657084 != nil:
    section.add "force", valid_402657084
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657085 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657085 = validateParameter(valid_402657085, JString,
                                      required = false, default = nil)
  if valid_402657085 != nil:
    section.add "X-Amz-Security-Token", valid_402657085
  var valid_402657086 = header.getOrDefault("X-Amz-Signature")
  valid_402657086 = validateParameter(valid_402657086, JString,
                                      required = false, default = nil)
  if valid_402657086 != nil:
    section.add "X-Amz-Signature", valid_402657086
  var valid_402657087 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657087 = validateParameter(valid_402657087, JString,
                                      required = false, default = nil)
  if valid_402657087 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657087
  var valid_402657088 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657088 = validateParameter(valid_402657088, JString,
                                      required = false, default = nil)
  if valid_402657088 != nil:
    section.add "X-Amz-Algorithm", valid_402657088
  var valid_402657089 = header.getOrDefault("X-Amz-Date")
  valid_402657089 = validateParameter(valid_402657089, JString,
                                      required = false, default = nil)
  if valid_402657089 != nil:
    section.add "X-Amz-Date", valid_402657089
  var valid_402657090 = header.getOrDefault("X-Amz-Credential")
  valid_402657090 = validateParameter(valid_402657090, JString,
                                      required = false, default = nil)
  if valid_402657090 != nil:
    section.add "X-Amz-Credential", valid_402657090
  var valid_402657091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657091 = validateParameter(valid_402657091, JString,
                                      required = false, default = nil)
  if valid_402657091 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657091
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657092: Call_DeleteJob_402657080; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p>
                                                                                         ## 
  let valid = call_402657092.validator(path, query, header, formData, body, _)
  let scheme = call_402657092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657092.makeUrl(scheme.get, call_402657092.host, call_402657092.base,
                                   call_402657092.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657092, uri, valid, _)

proc call*(call_402657093: Call_DeleteJob_402657080; jobId: string;
           force: bool = false): Recallable =
  ## deleteJob
  ## <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p>
  ##   
force: bool
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ##        

p>(Optional) 
hen 
true, 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## you 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## can 
delete 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## a 
job 
which 
is 

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## Otherwise, 
you 
can 
only 
delete 
a 
job 
which 
is 
in 
a 
terminal 
state 

or 

or 
an 
exception 
will 
occur. 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## The 
default 
is 
false.</p> 
note> 
p>Deleting 
a 
job 
which 
is 

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## will 
cause 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## a 
device 
which 
is 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## executing 
the 
job 
to 
be 
unable 
to 
access 
job 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## information 
or 
update 
the 
job 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ## execution 
status. 
se 
caution 
and 
ensure 
that 
each 
device 
executing 
a 
job 
which 
is 
deleted 
is 
able 
to 
recover 
to 
a 
valid 
state.</p> 
note>
  ##   
jobId: string (required)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## : 
p>The 

of 
the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## job 
to 
be 
deleted.</p> 
p>After 
a 
job 
deletion 
is 
completed, 
you 
may 
reuse 
this 
jobId 
when 
you 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## create 
a 
new 
job. 
owever, 
this 
is 
not 
recommended, 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## and 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## you 
must 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## ensure 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## that 
your 
devices 
are 
not 
using 
the 
jobId 
to 
refer 
to 
the 
deleted 
job.</p>
  var path_402657094 = newJObject()
  var query_402657095 = newJObject()
  add(query_402657095, "force", newJBool(force))
  add(path_402657094, "jobId", newJString(jobId))
  result = call_402657093.call(path_402657094, query_402657095, nil, nil, nil)

var deleteJob* = Call_DeleteJob_402657080(name: "deleteJob",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/jobs/{jobId}", validator: validate_DeleteJob_402657081, base: "/",
    makeUrl: url_DeleteJob_402657082, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateKeysAndCertificate_402657112 = ref object of OpenApiRestCall_402656044
proc url_CreateKeysAndCertificate_402657114(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateKeysAndCertificate_402657113(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
                                  ##              : Specifies whether the certificate is active.
  section = newJObject()
  var valid_402657115 = query.getOrDefault("setAsActive")
  valid_402657115 = validateParameter(valid_402657115, JBool, required = false,
                                      default = nil)
  if valid_402657115 != nil:
    section.add "setAsActive", valid_402657115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657116 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657116 = validateParameter(valid_402657116, JString,
                                      required = false, default = nil)
  if valid_402657116 != nil:
    section.add "X-Amz-Security-Token", valid_402657116
  var valid_402657117 = header.getOrDefault("X-Amz-Signature")
  valid_402657117 = validateParameter(valid_402657117, JString,
                                      required = false, default = nil)
  if valid_402657117 != nil:
    section.add "X-Amz-Signature", valid_402657117
  var valid_402657118 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657118 = validateParameter(valid_402657118, JString,
                                      required = false, default = nil)
  if valid_402657118 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657118
  var valid_402657119 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657119 = validateParameter(valid_402657119, JString,
                                      required = false, default = nil)
  if valid_402657119 != nil:
    section.add "X-Amz-Algorithm", valid_402657119
  var valid_402657120 = header.getOrDefault("X-Amz-Date")
  valid_402657120 = validateParameter(valid_402657120, JString,
                                      required = false, default = nil)
  if valid_402657120 != nil:
    section.add "X-Amz-Date", valid_402657120
  var valid_402657121 = header.getOrDefault("X-Amz-Credential")
  valid_402657121 = validateParameter(valid_402657121, JString,
                                      required = false, default = nil)
  if valid_402657121 != nil:
    section.add "X-Amz-Credential", valid_402657121
  var valid_402657122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657122 = validateParameter(valid_402657122, JString,
                                      required = false, default = nil)
  if valid_402657122 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657123: Call_CreateKeysAndCertificate_402657112;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
                                                                                         ## 
  let valid = call_402657123.validator(path, query, header, formData, body, _)
  let scheme = call_402657123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657123.makeUrl(scheme.get, call_402657123.host, call_402657123.base,
                                   call_402657123.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657123, uri, valid, _)

proc call*(call_402657124: Call_CreateKeysAndCertificate_402657112;
           setAsActive: bool = false): Recallable =
  ## createKeysAndCertificate
  ## <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## setAsActive: bool

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## Specifies 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## whether 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## certificate 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## is 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## active.
  var query_402657125 = newJObject()
  add(query_402657125, "setAsActive", newJBool(setAsActive))
  result = call_402657124.call(nil, query_402657125, nil, nil, nil)

var createKeysAndCertificate* = Call_CreateKeysAndCertificate_402657112(
    name: "createKeysAndCertificate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/keys-and-certificate",
    validator: validate_CreateKeysAndCertificate_402657113, base: "/",
    makeUrl: url_CreateKeysAndCertificate_402657114,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateMitigationAction_402657140 = ref object of OpenApiRestCall_402656044
proc url_CreateMitigationAction_402657142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
                 (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateMitigationAction_402657141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
                                 ##             : A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `actionName` field"
  var valid_402657143 = path.getOrDefault("actionName")
  valid_402657143 = validateParameter(valid_402657143, JString, required = true,
                                      default = nil)
  if valid_402657143 != nil:
    section.add "actionName", valid_402657143
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657144 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657144 = validateParameter(valid_402657144, JString,
                                      required = false, default = nil)
  if valid_402657144 != nil:
    section.add "X-Amz-Security-Token", valid_402657144
  var valid_402657145 = header.getOrDefault("X-Amz-Signature")
  valid_402657145 = validateParameter(valid_402657145, JString,
                                      required = false, default = nil)
  if valid_402657145 != nil:
    section.add "X-Amz-Signature", valid_402657145
  var valid_402657146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657146 = validateParameter(valid_402657146, JString,
                                      required = false, default = nil)
  if valid_402657146 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657146
  var valid_402657147 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657147 = validateParameter(valid_402657147, JString,
                                      required = false, default = nil)
  if valid_402657147 != nil:
    section.add "X-Amz-Algorithm", valid_402657147
  var valid_402657148 = header.getOrDefault("X-Amz-Date")
  valid_402657148 = validateParameter(valid_402657148, JString,
                                      required = false, default = nil)
  if valid_402657148 != nil:
    section.add "X-Amz-Date", valid_402657148
  var valid_402657149 = header.getOrDefault("X-Amz-Credential")
  valid_402657149 = validateParameter(valid_402657149, JString,
                                      required = false, default = nil)
  if valid_402657149 != nil:
    section.add "X-Amz-Credential", valid_402657149
  var valid_402657150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657150 = validateParameter(valid_402657150, JString,
                                      required = false, default = nil)
  if valid_402657150 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657150
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657152: Call_CreateMitigationAction_402657140;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.
                                                                                         ## 
  let valid = call_402657152.validator(path, query, header, formData, body, _)
  let scheme = call_402657152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657152.makeUrl(scheme.get, call_402657152.host, call_402657152.base,
                                   call_402657152.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657152, uri, valid, _)

proc call*(call_402657153: Call_CreateMitigationAction_402657140;
           body: JsonNode; actionName: string): Recallable =
  ## createMitigationAction
  ## Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.
  ##   
                                                                                                                                                                ## body: JObject (required)
  ##   
                                                                                                                                                                                           ## actionName: string (required)
                                                                                                                                                                                           ##             
                                                                                                                                                                                           ## : 
                                                                                                                                                                                           ## A 
                                                                                                                                                                                           ## friendly 
                                                                                                                                                                                           ## name 
                                                                                                                                                                                           ## for 
                                                                                                                                                                                           ## the 
                                                                                                                                                                                           ## action. 
                                                                                                                                                                                           ## Choose 
                                                                                                                                                                                           ## a 
                                                                                                                                                                                           ## friendly 
                                                                                                                                                                                           ## name 
                                                                                                                                                                                           ## that 
                                                                                                                                                                                           ## accurately 
                                                                                                                                                                                           ## describes 
                                                                                                                                                                                           ## the 
                                                                                                                                                                                           ## action 
                                                                                                                                                                                           ## (for 
                                                                                                                                                                                           ## example, 
                                                                                                                                                                                           ## <code>EnableLoggingAction</code>).
  var path_402657154 = newJObject()
  var body_402657155 = newJObject()
  if body != nil:
    body_402657155 = body
  add(path_402657154, "actionName", newJString(actionName))
  result = call_402657153.call(path_402657154, nil, nil, nil, body_402657155)

var createMitigationAction* = Call_CreateMitigationAction_402657140(
    name: "createMitigationAction", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_CreateMitigationAction_402657141, base: "/",
    makeUrl: url_CreateMitigationAction_402657142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeMitigationAction_402657126 = ref object of OpenApiRestCall_402656044
proc url_DescribeMitigationAction_402657128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
                 (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeMitigationAction_402657127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets information about a mitigation action.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
                                 ##             : The friendly name that uniquely identifies the mitigation action.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `actionName` field"
  var valid_402657129 = path.getOrDefault("actionName")
  valid_402657129 = validateParameter(valid_402657129, JString, required = true,
                                      default = nil)
  if valid_402657129 != nil:
    section.add "actionName", valid_402657129
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657130 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657130 = validateParameter(valid_402657130, JString,
                                      required = false, default = nil)
  if valid_402657130 != nil:
    section.add "X-Amz-Security-Token", valid_402657130
  var valid_402657131 = header.getOrDefault("X-Amz-Signature")
  valid_402657131 = validateParameter(valid_402657131, JString,
                                      required = false, default = nil)
  if valid_402657131 != nil:
    section.add "X-Amz-Signature", valid_402657131
  var valid_402657132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657132 = validateParameter(valid_402657132, JString,
                                      required = false, default = nil)
  if valid_402657132 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657132
  var valid_402657133 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657133 = validateParameter(valid_402657133, JString,
                                      required = false, default = nil)
  if valid_402657133 != nil:
    section.add "X-Amz-Algorithm", valid_402657133
  var valid_402657134 = header.getOrDefault("X-Amz-Date")
  valid_402657134 = validateParameter(valid_402657134, JString,
                                      required = false, default = nil)
  if valid_402657134 != nil:
    section.add "X-Amz-Date", valid_402657134
  var valid_402657135 = header.getOrDefault("X-Amz-Credential")
  valid_402657135 = validateParameter(valid_402657135, JString,
                                      required = false, default = nil)
  if valid_402657135 != nil:
    section.add "X-Amz-Credential", valid_402657135
  var valid_402657136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657136 = validateParameter(valid_402657136, JString,
                                      required = false, default = nil)
  if valid_402657136 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657136
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657137: Call_DescribeMitigationAction_402657126;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a mitigation action.
                                                                                         ## 
  let valid = call_402657137.validator(path, query, header, formData, body, _)
  let scheme = call_402657137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657137.makeUrl(scheme.get, call_402657137.host, call_402657137.base,
                                   call_402657137.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657137, uri, valid, _)

proc call*(call_402657138: Call_DescribeMitigationAction_402657126;
           actionName: string): Recallable =
  ## describeMitigationAction
  ## Gets information about a mitigation action.
  ##   actionName: string (required)
                                                ##             : The friendly name that uniquely identifies the mitigation action.
  var path_402657139 = newJObject()
  add(path_402657139, "actionName", newJString(actionName))
  result = call_402657138.call(path_402657139, nil, nil, nil, nil)

var describeMitigationAction* = Call_DescribeMitigationAction_402657126(
    name: "describeMitigationAction", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_DescribeMitigationAction_402657127, base: "/",
    makeUrl: url_DescribeMitigationAction_402657128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateMitigationAction_402657170 = ref object of OpenApiRestCall_402656044
proc url_UpdateMitigationAction_402657172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
                 (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateMitigationAction_402657171(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the definition for the specified mitigation action.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
                                 ##             : The friendly name for the mitigation action. You can't change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and re-create the mitigation action with the new name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `actionName` field"
  var valid_402657173 = path.getOrDefault("actionName")
  valid_402657173 = validateParameter(valid_402657173, JString, required = true,
                                      default = nil)
  if valid_402657173 != nil:
    section.add "actionName", valid_402657173
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657174 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657174 = validateParameter(valid_402657174, JString,
                                      required = false, default = nil)
  if valid_402657174 != nil:
    section.add "X-Amz-Security-Token", valid_402657174
  var valid_402657175 = header.getOrDefault("X-Amz-Signature")
  valid_402657175 = validateParameter(valid_402657175, JString,
                                      required = false, default = nil)
  if valid_402657175 != nil:
    section.add "X-Amz-Signature", valid_402657175
  var valid_402657176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657176 = validateParameter(valid_402657176, JString,
                                      required = false, default = nil)
  if valid_402657176 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657176
  var valid_402657177 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657177 = validateParameter(valid_402657177, JString,
                                      required = false, default = nil)
  if valid_402657177 != nil:
    section.add "X-Amz-Algorithm", valid_402657177
  var valid_402657178 = header.getOrDefault("X-Amz-Date")
  valid_402657178 = validateParameter(valid_402657178, JString,
                                      required = false, default = nil)
  if valid_402657178 != nil:
    section.add "X-Amz-Date", valid_402657178
  var valid_402657179 = header.getOrDefault("X-Amz-Credential")
  valid_402657179 = validateParameter(valid_402657179, JString,
                                      required = false, default = nil)
  if valid_402657179 != nil:
    section.add "X-Amz-Credential", valid_402657179
  var valid_402657180 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657180 = validateParameter(valid_402657180, JString,
                                      required = false, default = nil)
  if valid_402657180 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657180
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657182: Call_UpdateMitigationAction_402657170;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the definition for the specified mitigation action.
                                                                                         ## 
  let valid = call_402657182.validator(path, query, header, formData, body, _)
  let scheme = call_402657182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657182.makeUrl(scheme.get, call_402657182.host, call_402657182.base,
                                   call_402657182.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657182, uri, valid, _)

proc call*(call_402657183: Call_UpdateMitigationAction_402657170;
           body: JsonNode; actionName: string): Recallable =
  ## updateMitigationAction
  ## Updates the definition for the specified mitigation action.
  ##   body: JObject (required)
  ##   actionName: string (required)
                               ##             : The friendly name for the mitigation action. You can't change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and re-create the mitigation action with the new name.
  var path_402657184 = newJObject()
  var body_402657185 = newJObject()
  if body != nil:
    body_402657185 = body
  add(path_402657184, "actionName", newJString(actionName))
  result = call_402657183.call(path_402657184, nil, nil, nil, body_402657185)

var updateMitigationAction* = Call_UpdateMitigationAction_402657170(
    name: "updateMitigationAction", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_UpdateMitigationAction_402657171, base: "/",
    makeUrl: url_UpdateMitigationAction_402657172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteMitigationAction_402657156 = ref object of OpenApiRestCall_402656044
proc url_DeleteMitigationAction_402657158(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "actionName" in path, "`actionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/mitigationactions/actions/"),
                 (kind: VariableSegment, value: "actionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteMitigationAction_402657157(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a defined mitigation action from your AWS account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   actionName: JString (required)
                                 ##             : The name of the mitigation action that you want to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `actionName` field"
  var valid_402657159 = path.getOrDefault("actionName")
  valid_402657159 = validateParameter(valid_402657159, JString, required = true,
                                      default = nil)
  if valid_402657159 != nil:
    section.add "actionName", valid_402657159
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657160 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657160 = validateParameter(valid_402657160, JString,
                                      required = false, default = nil)
  if valid_402657160 != nil:
    section.add "X-Amz-Security-Token", valid_402657160
  var valid_402657161 = header.getOrDefault("X-Amz-Signature")
  valid_402657161 = validateParameter(valid_402657161, JString,
                                      required = false, default = nil)
  if valid_402657161 != nil:
    section.add "X-Amz-Signature", valid_402657161
  var valid_402657162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657162 = validateParameter(valid_402657162, JString,
                                      required = false, default = nil)
  if valid_402657162 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657162
  var valid_402657163 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657163 = validateParameter(valid_402657163, JString,
                                      required = false, default = nil)
  if valid_402657163 != nil:
    section.add "X-Amz-Algorithm", valid_402657163
  var valid_402657164 = header.getOrDefault("X-Amz-Date")
  valid_402657164 = validateParameter(valid_402657164, JString,
                                      required = false, default = nil)
  if valid_402657164 != nil:
    section.add "X-Amz-Date", valid_402657164
  var valid_402657165 = header.getOrDefault("X-Amz-Credential")
  valid_402657165 = validateParameter(valid_402657165, JString,
                                      required = false, default = nil)
  if valid_402657165 != nil:
    section.add "X-Amz-Credential", valid_402657165
  var valid_402657166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657166 = validateParameter(valid_402657166, JString,
                                      required = false, default = nil)
  if valid_402657166 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657167: Call_DeleteMitigationAction_402657156;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a defined mitigation action from your AWS account.
                                                                                         ## 
  let valid = call_402657167.validator(path, query, header, formData, body, _)
  let scheme = call_402657167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657167.makeUrl(scheme.get, call_402657167.host, call_402657167.base,
                                   call_402657167.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657167, uri, valid, _)

proc call*(call_402657168: Call_DeleteMitigationAction_402657156;
           actionName: string): Recallable =
  ## deleteMitigationAction
  ## Deletes a defined mitigation action from your AWS account.
  ##   actionName: string (required)
                                                               ##             : The name of the mitigation action that you want to delete.
  var path_402657169 = newJObject()
  add(path_402657169, "actionName", newJString(actionName))
  result = call_402657168.call(path_402657169, nil, nil, nil, nil)

var deleteMitigationAction* = Call_DeleteMitigationAction_402657156(
    name: "deleteMitigationAction", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions/{actionName}",
    validator: validate_DeleteMitigationAction_402657157, base: "/",
    makeUrl: url_DeleteMitigationAction_402657158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateOTAUpdate_402657200 = ref object of OpenApiRestCall_402656044
proc url_CreateOTAUpdate_402657202(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "otaUpdateId" in path, "`otaUpdateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/otaUpdates/"),
                 (kind: VariableSegment, value: "otaUpdateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateOTAUpdate_402657201(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an AWS IoT OTAUpdate on a target group of things or groups.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   otaUpdateId: JString (required)
                                 ##              : The ID of the OTA update to be created.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `otaUpdateId` field"
  var valid_402657203 = path.getOrDefault("otaUpdateId")
  valid_402657203 = validateParameter(valid_402657203, JString, required = true,
                                      default = nil)
  if valid_402657203 != nil:
    section.add "otaUpdateId", valid_402657203
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657204 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657204 = validateParameter(valid_402657204, JString,
                                      required = false, default = nil)
  if valid_402657204 != nil:
    section.add "X-Amz-Security-Token", valid_402657204
  var valid_402657205 = header.getOrDefault("X-Amz-Signature")
  valid_402657205 = validateParameter(valid_402657205, JString,
                                      required = false, default = nil)
  if valid_402657205 != nil:
    section.add "X-Amz-Signature", valid_402657205
  var valid_402657206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657206 = validateParameter(valid_402657206, JString,
                                      required = false, default = nil)
  if valid_402657206 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657206
  var valid_402657207 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657207 = validateParameter(valid_402657207, JString,
                                      required = false, default = nil)
  if valid_402657207 != nil:
    section.add "X-Amz-Algorithm", valid_402657207
  var valid_402657208 = header.getOrDefault("X-Amz-Date")
  valid_402657208 = validateParameter(valid_402657208, JString,
                                      required = false, default = nil)
  if valid_402657208 != nil:
    section.add "X-Amz-Date", valid_402657208
  var valid_402657209 = header.getOrDefault("X-Amz-Credential")
  valid_402657209 = validateParameter(valid_402657209, JString,
                                      required = false, default = nil)
  if valid_402657209 != nil:
    section.add "X-Amz-Credential", valid_402657209
  var valid_402657210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657210 = validateParameter(valid_402657210, JString,
                                      required = false, default = nil)
  if valid_402657210 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657210
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657212: Call_CreateOTAUpdate_402657200; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an AWS IoT OTAUpdate on a target group of things or groups.
                                                                                         ## 
  let valid = call_402657212.validator(path, query, header, formData, body, _)
  let scheme = call_402657212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657212.makeUrl(scheme.get, call_402657212.host, call_402657212.base,
                                   call_402657212.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657212, uri, valid, _)

proc call*(call_402657213: Call_CreateOTAUpdate_402657200; otaUpdateId: string;
           body: JsonNode): Recallable =
  ## createOTAUpdate
  ## Creates an AWS IoT OTAUpdate on a target group of things or groups.
  ##   
                                                                        ## otaUpdateId: string (required)
                                                                        ##              
                                                                        ## : 
                                                                        ## The ID of the OTA 
                                                                        ## update 
                                                                        ## to 
                                                                        ## be 
                                                                        ## created.
  ##   
                                                                                   ## body: JObject (required)
  var path_402657214 = newJObject()
  var body_402657215 = newJObject()
  add(path_402657214, "otaUpdateId", newJString(otaUpdateId))
  if body != nil:
    body_402657215 = body
  result = call_402657213.call(path_402657214, nil, nil, nil, body_402657215)

var createOTAUpdate* = Call_CreateOTAUpdate_402657200(name: "createOTAUpdate",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/otaUpdates/{otaUpdateId}", validator: validate_CreateOTAUpdate_402657201,
    base: "/", makeUrl: url_CreateOTAUpdate_402657202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetOTAUpdate_402657186 = ref object of OpenApiRestCall_402656044
proc url_GetOTAUpdate_402657188(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "otaUpdateId" in path, "`otaUpdateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/otaUpdates/"),
                 (kind: VariableSegment, value: "otaUpdateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetOTAUpdate_402657187(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets an OTA update.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   otaUpdateId: JString (required)
                                 ##              : The OTA update ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `otaUpdateId` field"
  var valid_402657189 = path.getOrDefault("otaUpdateId")
  valid_402657189 = validateParameter(valid_402657189, JString, required = true,
                                      default = nil)
  if valid_402657189 != nil:
    section.add "otaUpdateId", valid_402657189
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657190 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657190 = validateParameter(valid_402657190, JString,
                                      required = false, default = nil)
  if valid_402657190 != nil:
    section.add "X-Amz-Security-Token", valid_402657190
  var valid_402657191 = header.getOrDefault("X-Amz-Signature")
  valid_402657191 = validateParameter(valid_402657191, JString,
                                      required = false, default = nil)
  if valid_402657191 != nil:
    section.add "X-Amz-Signature", valid_402657191
  var valid_402657192 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657192 = validateParameter(valid_402657192, JString,
                                      required = false, default = nil)
  if valid_402657192 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657192
  var valid_402657193 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657193 = validateParameter(valid_402657193, JString,
                                      required = false, default = nil)
  if valid_402657193 != nil:
    section.add "X-Amz-Algorithm", valid_402657193
  var valid_402657194 = header.getOrDefault("X-Amz-Date")
  valid_402657194 = validateParameter(valid_402657194, JString,
                                      required = false, default = nil)
  if valid_402657194 != nil:
    section.add "X-Amz-Date", valid_402657194
  var valid_402657195 = header.getOrDefault("X-Amz-Credential")
  valid_402657195 = validateParameter(valid_402657195, JString,
                                      required = false, default = nil)
  if valid_402657195 != nil:
    section.add "X-Amz-Credential", valid_402657195
  var valid_402657196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657196 = validateParameter(valid_402657196, JString,
                                      required = false, default = nil)
  if valid_402657196 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657196
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657197: Call_GetOTAUpdate_402657186; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets an OTA update.
                                                                                         ## 
  let valid = call_402657197.validator(path, query, header, formData, body, _)
  let scheme = call_402657197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657197.makeUrl(scheme.get, call_402657197.host, call_402657197.base,
                                   call_402657197.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657197, uri, valid, _)

proc call*(call_402657198: Call_GetOTAUpdate_402657186; otaUpdateId: string): Recallable =
  ## getOTAUpdate
  ## Gets an OTA update.
  ##   otaUpdateId: string (required)
                        ##              : The OTA update ID.
  var path_402657199 = newJObject()
  add(path_402657199, "otaUpdateId", newJString(otaUpdateId))
  result = call_402657198.call(path_402657199, nil, nil, nil, nil)

var getOTAUpdate* = Call_GetOTAUpdate_402657186(name: "getOTAUpdate",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/otaUpdates/{otaUpdateId}", validator: validate_GetOTAUpdate_402657187,
    base: "/", makeUrl: url_GetOTAUpdate_402657188,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteOTAUpdate_402657216 = ref object of OpenApiRestCall_402656044
proc url_DeleteOTAUpdate_402657218(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "otaUpdateId" in path, "`otaUpdateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/otaUpdates/"),
                 (kind: VariableSegment, value: "otaUpdateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteOTAUpdate_402657217(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Delete an OTA update.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   otaUpdateId: JString (required)
                                 ##              : The OTA update ID to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `otaUpdateId` field"
  var valid_402657219 = path.getOrDefault("otaUpdateId")
  valid_402657219 = validateParameter(valid_402657219, JString, required = true,
                                      default = nil)
  if valid_402657219 != nil:
    section.add "otaUpdateId", valid_402657219
  result.add "path", section
  ## parameters in `query` object:
  ##   deleteStream: JBool
                                  ##               : Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.
  ##   
                                                                                                                                                            ## forceDeleteAWSJob: JBool
                                                                                                                                                            ##                    
                                                                                                                                                            ## : 
                                                                                                                                                            ## Specifies 
                                                                                                                                                            ## if 
                                                                                                                                                            ## the 
                                                                                                                                                            ## AWS 
                                                                                                                                                            ## Job 
                                                                                                                                                            ## associated 
                                                                                                                                                            ## with 
                                                                                                                                                            ## the 
                                                                                                                                                            ## OTA 
                                                                                                                                                            ## update 
                                                                                                                                                            ## should 
                                                                                                                                                            ## be 
                                                                                                                                                            ## deleted 
                                                                                                                                                            ## with 
                                                                                                                                                            ## the 
                                                                                                                                                            ## OTA 
                                                                                                                                                            ## update 
                                                                                                                                                            ## is 
                                                                                                                                                            ## deleted.
  section = newJObject()
  var valid_402657220 = query.getOrDefault("deleteStream")
  valid_402657220 = validateParameter(valid_402657220, JBool, required = false,
                                      default = nil)
  if valid_402657220 != nil:
    section.add "deleteStream", valid_402657220
  var valid_402657221 = query.getOrDefault("forceDeleteAWSJob")
  valid_402657221 = validateParameter(valid_402657221, JBool, required = false,
                                      default = nil)
  if valid_402657221 != nil:
    section.add "forceDeleteAWSJob", valid_402657221
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657222 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657222 = validateParameter(valid_402657222, JString,
                                      required = false, default = nil)
  if valid_402657222 != nil:
    section.add "X-Amz-Security-Token", valid_402657222
  var valid_402657223 = header.getOrDefault("X-Amz-Signature")
  valid_402657223 = validateParameter(valid_402657223, JString,
                                      required = false, default = nil)
  if valid_402657223 != nil:
    section.add "X-Amz-Signature", valid_402657223
  var valid_402657224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657224 = validateParameter(valid_402657224, JString,
                                      required = false, default = nil)
  if valid_402657224 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657224
  var valid_402657225 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657225 = validateParameter(valid_402657225, JString,
                                      required = false, default = nil)
  if valid_402657225 != nil:
    section.add "X-Amz-Algorithm", valid_402657225
  var valid_402657226 = header.getOrDefault("X-Amz-Date")
  valid_402657226 = validateParameter(valid_402657226, JString,
                                      required = false, default = nil)
  if valid_402657226 != nil:
    section.add "X-Amz-Date", valid_402657226
  var valid_402657227 = header.getOrDefault("X-Amz-Credential")
  valid_402657227 = validateParameter(valid_402657227, JString,
                                      required = false, default = nil)
  if valid_402657227 != nil:
    section.add "X-Amz-Credential", valid_402657227
  var valid_402657228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657228 = validateParameter(valid_402657228, JString,
                                      required = false, default = nil)
  if valid_402657228 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657228
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657229: Call_DeleteOTAUpdate_402657216; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Delete an OTA update.
                                                                                         ## 
  let valid = call_402657229.validator(path, query, header, formData, body, _)
  let scheme = call_402657229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657229.makeUrl(scheme.get, call_402657229.host, call_402657229.base,
                                   call_402657229.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657229, uri, valid, _)

proc call*(call_402657230: Call_DeleteOTAUpdate_402657216; otaUpdateId: string;
           deleteStream: bool = false; forceDeleteAWSJob: bool = false): Recallable =
  ## deleteOTAUpdate
  ## Delete an OTA update.
  ##   deleteStream: bool
                          ##               : Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.
  ##   
                                                                                                                                                    ## otaUpdateId: string (required)
                                                                                                                                                    ##              
                                                                                                                                                    ## : 
                                                                                                                                                    ## The 
                                                                                                                                                    ## OTA 
                                                                                                                                                    ## update 
                                                                                                                                                    ## ID 
                                                                                                                                                    ## to 
                                                                                                                                                    ## delete.
  ##   
                                                                                                                                                              ## forceDeleteAWSJob: bool
                                                                                                                                                              ##                    
                                                                                                                                                              ## : 
                                                                                                                                                              ## Specifies 
                                                                                                                                                              ## if 
                                                                                                                                                              ## the 
                                                                                                                                                              ## AWS 
                                                                                                                                                              ## Job 
                                                                                                                                                              ## associated 
                                                                                                                                                              ## with 
                                                                                                                                                              ## the 
                                                                                                                                                              ## OTA 
                                                                                                                                                              ## update 
                                                                                                                                                              ## should 
                                                                                                                                                              ## be 
                                                                                                                                                              ## deleted 
                                                                                                                                                              ## with 
                                                                                                                                                              ## the 
                                                                                                                                                              ## OTA 
                                                                                                                                                              ## update 
                                                                                                                                                              ## is 
                                                                                                                                                              ## deleted.
  var path_402657231 = newJObject()
  var query_402657232 = newJObject()
  add(query_402657232, "deleteStream", newJBool(deleteStream))
  add(path_402657231, "otaUpdateId", newJString(otaUpdateId))
  add(query_402657232, "forceDeleteAWSJob", newJBool(forceDeleteAWSJob))
  result = call_402657230.call(path_402657231, query_402657232, nil, nil, nil)

var deleteOTAUpdate* = Call_DeleteOTAUpdate_402657216(name: "deleteOTAUpdate",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/otaUpdates/{otaUpdateId}", validator: validate_DeleteOTAUpdate_402657217,
    base: "/", makeUrl: url_DeleteOTAUpdate_402657218,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreatePolicy_402657247 = ref object of OpenApiRestCall_402656044
proc url_CreatePolicy_402657249(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreatePolicy_402657248(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The policy name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402657250 = path.getOrDefault("policyName")
  valid_402657250 = validateParameter(valid_402657250, JString, required = true,
                                      default = nil)
  if valid_402657250 != nil:
    section.add "policyName", valid_402657250
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657251 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657251 = validateParameter(valid_402657251, JString,
                                      required = false, default = nil)
  if valid_402657251 != nil:
    section.add "X-Amz-Security-Token", valid_402657251
  var valid_402657252 = header.getOrDefault("X-Amz-Signature")
  valid_402657252 = validateParameter(valid_402657252, JString,
                                      required = false, default = nil)
  if valid_402657252 != nil:
    section.add "X-Amz-Signature", valid_402657252
  var valid_402657253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657253 = validateParameter(valid_402657253, JString,
                                      required = false, default = nil)
  if valid_402657253 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657253
  var valid_402657254 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657254 = validateParameter(valid_402657254, JString,
                                      required = false, default = nil)
  if valid_402657254 != nil:
    section.add "X-Amz-Algorithm", valid_402657254
  var valid_402657255 = header.getOrDefault("X-Amz-Date")
  valid_402657255 = validateParameter(valid_402657255, JString,
                                      required = false, default = nil)
  if valid_402657255 != nil:
    section.add "X-Amz-Date", valid_402657255
  var valid_402657256 = header.getOrDefault("X-Amz-Credential")
  valid_402657256 = validateParameter(valid_402657256, JString,
                                      required = false, default = nil)
  if valid_402657256 != nil:
    section.add "X-Amz-Credential", valid_402657256
  var valid_402657257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657257 = validateParameter(valid_402657257, JString,
                                      required = false, default = nil)
  if valid_402657257 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657257
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657259: Call_CreatePolicy_402657247; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>
                                                                                         ## 
  let valid = call_402657259.validator(path, query, header, formData, body, _)
  let scheme = call_402657259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657259.makeUrl(scheme.get, call_402657259.host, call_402657259.base,
                                   call_402657259.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657259, uri, valid, _)

proc call*(call_402657260: Call_CreatePolicy_402657247; body: JsonNode;
           policyName: string): Recallable =
  ## createPolicy
  ## <p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>
  ##   
                                                                                                                                                                                                                                        ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                   ## policyName: string (required)
                                                                                                                                                                                                                                                                   ##             
                                                                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                                                                                   ## policy 
                                                                                                                                                                                                                                                                   ## name.
  var path_402657261 = newJObject()
  var body_402657262 = newJObject()
  if body != nil:
    body_402657262 = body
  add(path_402657261, "policyName", newJString(policyName))
  result = call_402657260.call(path_402657261, nil, nil, nil, body_402657262)

var createPolicy* = Call_CreatePolicy_402657247(name: "createPolicy",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/policies/{policyName}", validator: validate_CreatePolicy_402657248,
    base: "/", makeUrl: url_CreatePolicy_402657249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPolicy_402657233 = ref object of OpenApiRestCall_402656044
proc url_GetPolicy_402657235(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetPolicy_402657234(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified policy with the policy document of the default version.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The name of the policy.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402657236 = path.getOrDefault("policyName")
  valid_402657236 = validateParameter(valid_402657236, JString, required = true,
                                      default = nil)
  if valid_402657236 != nil:
    section.add "policyName", valid_402657236
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657237 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657237 = validateParameter(valid_402657237, JString,
                                      required = false, default = nil)
  if valid_402657237 != nil:
    section.add "X-Amz-Security-Token", valid_402657237
  var valid_402657238 = header.getOrDefault("X-Amz-Signature")
  valid_402657238 = validateParameter(valid_402657238, JString,
                                      required = false, default = nil)
  if valid_402657238 != nil:
    section.add "X-Amz-Signature", valid_402657238
  var valid_402657239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657239 = validateParameter(valid_402657239, JString,
                                      required = false, default = nil)
  if valid_402657239 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657239
  var valid_402657240 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657240 = validateParameter(valid_402657240, JString,
                                      required = false, default = nil)
  if valid_402657240 != nil:
    section.add "X-Amz-Algorithm", valid_402657240
  var valid_402657241 = header.getOrDefault("X-Amz-Date")
  valid_402657241 = validateParameter(valid_402657241, JString,
                                      required = false, default = nil)
  if valid_402657241 != nil:
    section.add "X-Amz-Date", valid_402657241
  var valid_402657242 = header.getOrDefault("X-Amz-Credential")
  valid_402657242 = validateParameter(valid_402657242, JString,
                                      required = false, default = nil)
  if valid_402657242 != nil:
    section.add "X-Amz-Credential", valid_402657242
  var valid_402657243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657243 = validateParameter(valid_402657243, JString,
                                      required = false, default = nil)
  if valid_402657243 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657243
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657244: Call_GetPolicy_402657233; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified policy with the policy document of the default version.
                                                                                         ## 
  let valid = call_402657244.validator(path, query, header, formData, body, _)
  let scheme = call_402657244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657244.makeUrl(scheme.get, call_402657244.host, call_402657244.base,
                                   call_402657244.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657244, uri, valid, _)

proc call*(call_402657245: Call_GetPolicy_402657233; policyName: string): Recallable =
  ## getPolicy
  ## Gets information about the specified policy with the policy document of the default version.
  ##   
                                                                                                 ## policyName: string (required)
                                                                                                 ##             
                                                                                                 ## : 
                                                                                                 ## The 
                                                                                                 ## name 
                                                                                                 ## of 
                                                                                                 ## the 
                                                                                                 ## policy.
  var path_402657246 = newJObject()
  add(path_402657246, "policyName", newJString(policyName))
  result = call_402657245.call(path_402657246, nil, nil, nil, nil)

var getPolicy* = Call_GetPolicy_402657233(name: "getPolicy",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/policies/{policyName}", validator: validate_GetPolicy_402657234,
    base: "/", makeUrl: url_GetPolicy_402657235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeletePolicy_402657263 = ref object of OpenApiRestCall_402656044
proc url_DeletePolicy_402657265(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeletePolicy_402657264(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The name of the policy to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402657266 = path.getOrDefault("policyName")
  valid_402657266 = validateParameter(valid_402657266, JString, required = true,
                                      default = nil)
  if valid_402657266 != nil:
    section.add "policyName", valid_402657266
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657267 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657267 = validateParameter(valid_402657267, JString,
                                      required = false, default = nil)
  if valid_402657267 != nil:
    section.add "X-Amz-Security-Token", valid_402657267
  var valid_402657268 = header.getOrDefault("X-Amz-Signature")
  valid_402657268 = validateParameter(valid_402657268, JString,
                                      required = false, default = nil)
  if valid_402657268 != nil:
    section.add "X-Amz-Signature", valid_402657268
  var valid_402657269 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657269 = validateParameter(valid_402657269, JString,
                                      required = false, default = nil)
  if valid_402657269 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657269
  var valid_402657270 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657270 = validateParameter(valid_402657270, JString,
                                      required = false, default = nil)
  if valid_402657270 != nil:
    section.add "X-Amz-Algorithm", valid_402657270
  var valid_402657271 = header.getOrDefault("X-Amz-Date")
  valid_402657271 = validateParameter(valid_402657271, JString,
                                      required = false, default = nil)
  if valid_402657271 != nil:
    section.add "X-Amz-Date", valid_402657271
  var valid_402657272 = header.getOrDefault("X-Amz-Credential")
  valid_402657272 = validateParameter(valid_402657272, JString,
                                      required = false, default = nil)
  if valid_402657272 != nil:
    section.add "X-Amz-Credential", valid_402657272
  var valid_402657273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657273 = validateParameter(valid_402657273, JString,
                                      required = false, default = nil)
  if valid_402657273 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657274: Call_DeletePolicy_402657263; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>
                                                                                         ## 
  let valid = call_402657274.validator(path, query, header, formData, body, _)
  let scheme = call_402657274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657274.makeUrl(scheme.get, call_402657274.host, call_402657274.base,
                                   call_402657274.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657274, uri, valid, _)

proc call*(call_402657275: Call_DeletePolicy_402657263; policyName: string): Recallable =
  ## deletePolicy
  ## <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## policyName: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ##             
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## name 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## of 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## policy 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## to 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## delete.
  var path_402657276 = newJObject()
  add(path_402657276, "policyName", newJString(policyName))
  result = call_402657275.call(path_402657276, nil, nil, nil, nil)

var deletePolicy* = Call_DeletePolicy_402657263(name: "deletePolicy",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/policies/{policyName}", validator: validate_DeletePolicy_402657264,
    base: "/", makeUrl: url_DeletePolicy_402657265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreatePolicyVersion_402657291 = ref object of OpenApiRestCall_402656044
proc url_CreatePolicyVersion_402657293(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName"),
                 (kind: ConstantSegment, value: "/version")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreatePolicyVersion_402657292(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The policy name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402657294 = path.getOrDefault("policyName")
  valid_402657294 = validateParameter(valid_402657294, JString, required = true,
                                      default = nil)
  if valid_402657294 != nil:
    section.add "policyName", valid_402657294
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsDefault: JBool
                                  ##               : Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).
  section = newJObject()
  var valid_402657295 = query.getOrDefault("setAsDefault")
  valid_402657295 = validateParameter(valid_402657295, JBool, required = false,
                                      default = nil)
  if valid_402657295 != nil:
    section.add "setAsDefault", valid_402657295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657296 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657296 = validateParameter(valid_402657296, JString,
                                      required = false, default = nil)
  if valid_402657296 != nil:
    section.add "X-Amz-Security-Token", valid_402657296
  var valid_402657297 = header.getOrDefault("X-Amz-Signature")
  valid_402657297 = validateParameter(valid_402657297, JString,
                                      required = false, default = nil)
  if valid_402657297 != nil:
    section.add "X-Amz-Signature", valid_402657297
  var valid_402657298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657298 = validateParameter(valid_402657298, JString,
                                      required = false, default = nil)
  if valid_402657298 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657298
  var valid_402657299 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657299 = validateParameter(valid_402657299, JString,
                                      required = false, default = nil)
  if valid_402657299 != nil:
    section.add "X-Amz-Algorithm", valid_402657299
  var valid_402657300 = header.getOrDefault("X-Amz-Date")
  valid_402657300 = validateParameter(valid_402657300, JString,
                                      required = false, default = nil)
  if valid_402657300 != nil:
    section.add "X-Amz-Date", valid_402657300
  var valid_402657301 = header.getOrDefault("X-Amz-Credential")
  valid_402657301 = validateParameter(valid_402657301, JString,
                                      required = false, default = nil)
  if valid_402657301 != nil:
    section.add "X-Amz-Credential", valid_402657301
  var valid_402657302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657302 = validateParameter(valid_402657302, JString,
                                      required = false, default = nil)
  if valid_402657302 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657304: Call_CreatePolicyVersion_402657291;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>
                                                                                         ## 
  let valid = call_402657304.validator(path, query, header, formData, body, _)
  let scheme = call_402657304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657304.makeUrl(scheme.get, call_402657304.host, call_402657304.base,
                                   call_402657304.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657304, uri, valid, _)

proc call*(call_402657305: Call_CreatePolicyVersion_402657291; body: JsonNode;
           policyName: string; setAsDefault: bool = false): Recallable =
  ## createPolicyVersion
  ## <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>
  ##   
body: JObject (required)
  ##   
policyName: string (required)


he 
policy 
name.
  ##   
setAsDefault: bool


pecifies 
whether 
the 
policy 
version 
is 
set 
as 
the 
default. 
hen 
this 
parameter 
is 
true, 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## the 
new 
policy 
version 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## becomes 
the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## operative 
version 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## (that 
is, 
the 
version 
that 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## is 
in 
effect 
for 
the 
certificates 
to 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## which 
the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## policy 
is 
attached).
  var path_402657306 = newJObject()
  var query_402657307 = newJObject()
  var body_402657308 = newJObject()
  if body != nil:
    body_402657308 = body
  add(path_402657306, "policyName", newJString(policyName))
  add(query_402657307, "setAsDefault", newJBool(setAsDefault))
  result = call_402657305.call(path_402657306, query_402657307, nil, nil, body_402657308)

var createPolicyVersion* = Call_CreatePolicyVersion_402657291(
    name: "createPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/policies/{policyName}/version",
    validator: validate_CreatePolicyVersion_402657292, base: "/",
    makeUrl: url_CreatePolicyVersion_402657293,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPolicyVersions_402657277 = ref object of OpenApiRestCall_402656044
proc url_ListPolicyVersions_402657279(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName"),
                 (kind: ConstantSegment, value: "/version")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListPolicyVersions_402657278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the versions of the specified policy and identifies the default version.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The policy name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402657280 = path.getOrDefault("policyName")
  valid_402657280 = validateParameter(valid_402657280, JString, required = true,
                                      default = nil)
  if valid_402657280 != nil:
    section.add "policyName", valid_402657280
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657281 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657281 = validateParameter(valid_402657281, JString,
                                      required = false, default = nil)
  if valid_402657281 != nil:
    section.add "X-Amz-Security-Token", valid_402657281
  var valid_402657282 = header.getOrDefault("X-Amz-Signature")
  valid_402657282 = validateParameter(valid_402657282, JString,
                                      required = false, default = nil)
  if valid_402657282 != nil:
    section.add "X-Amz-Signature", valid_402657282
  var valid_402657283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657283 = validateParameter(valid_402657283, JString,
                                      required = false, default = nil)
  if valid_402657283 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657283
  var valid_402657284 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657284 = validateParameter(valid_402657284, JString,
                                      required = false, default = nil)
  if valid_402657284 != nil:
    section.add "X-Amz-Algorithm", valid_402657284
  var valid_402657285 = header.getOrDefault("X-Amz-Date")
  valid_402657285 = validateParameter(valid_402657285, JString,
                                      required = false, default = nil)
  if valid_402657285 != nil:
    section.add "X-Amz-Date", valid_402657285
  var valid_402657286 = header.getOrDefault("X-Amz-Credential")
  valid_402657286 = validateParameter(valid_402657286, JString,
                                      required = false, default = nil)
  if valid_402657286 != nil:
    section.add "X-Amz-Credential", valid_402657286
  var valid_402657287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657287 = validateParameter(valid_402657287, JString,
                                      required = false, default = nil)
  if valid_402657287 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657287
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657288: Call_ListPolicyVersions_402657277;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the versions of the specified policy and identifies the default version.
                                                                                         ## 
  let valid = call_402657288.validator(path, query, header, formData, body, _)
  let scheme = call_402657288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657288.makeUrl(scheme.get, call_402657288.host, call_402657288.base,
                                   call_402657288.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657288, uri, valid, _)

proc call*(call_402657289: Call_ListPolicyVersions_402657277; policyName: string): Recallable =
  ## listPolicyVersions
  ## Lists the versions of the specified policy and identifies the default version.
  ##   
                                                                                   ## policyName: string (required)
                                                                                   ##             
                                                                                   ## : 
                                                                                   ## The 
                                                                                   ## policy 
                                                                                   ## name.
  var path_402657290 = newJObject()
  add(path_402657290, "policyName", newJString(policyName))
  result = call_402657289.call(path_402657290, nil, nil, nil, nil)

var listPolicyVersions* = Call_ListPolicyVersions_402657277(
    name: "listPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/policies/{policyName}/version",
    validator: validate_ListPolicyVersions_402657278, base: "/",
    makeUrl: url_ListPolicyVersions_402657279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateProvisioningClaim_402657309 = ref object of OpenApiRestCall_402656044
proc url_CreateProvisioningClaim_402657311(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName"),
                 (kind: ConstantSegment, value: "/provisioning-claim")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateProvisioningClaim_402657310(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a provisioning claim.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
                                 ##               : The name of the provisioning template to use.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `templateName` field"
  var valid_402657312 = path.getOrDefault("templateName")
  valid_402657312 = validateParameter(valid_402657312, JString, required = true,
                                      default = nil)
  if valid_402657312 != nil:
    section.add "templateName", valid_402657312
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657313 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657313 = validateParameter(valid_402657313, JString,
                                      required = false, default = nil)
  if valid_402657313 != nil:
    section.add "X-Amz-Security-Token", valid_402657313
  var valid_402657314 = header.getOrDefault("X-Amz-Signature")
  valid_402657314 = validateParameter(valid_402657314, JString,
                                      required = false, default = nil)
  if valid_402657314 != nil:
    section.add "X-Amz-Signature", valid_402657314
  var valid_402657315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657315 = validateParameter(valid_402657315, JString,
                                      required = false, default = nil)
  if valid_402657315 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657315
  var valid_402657316 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657316 = validateParameter(valid_402657316, JString,
                                      required = false, default = nil)
  if valid_402657316 != nil:
    section.add "X-Amz-Algorithm", valid_402657316
  var valid_402657317 = header.getOrDefault("X-Amz-Date")
  valid_402657317 = validateParameter(valid_402657317, JString,
                                      required = false, default = nil)
  if valid_402657317 != nil:
    section.add "X-Amz-Date", valid_402657317
  var valid_402657318 = header.getOrDefault("X-Amz-Credential")
  valid_402657318 = validateParameter(valid_402657318, JString,
                                      required = false, default = nil)
  if valid_402657318 != nil:
    section.add "X-Amz-Credential", valid_402657318
  var valid_402657319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657319 = validateParameter(valid_402657319, JString,
                                      required = false, default = nil)
  if valid_402657319 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657319
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657320: Call_CreateProvisioningClaim_402657309;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a provisioning claim.
                                                                                         ## 
  let valid = call_402657320.validator(path, query, header, formData, body, _)
  let scheme = call_402657320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657320.makeUrl(scheme.get, call_402657320.host, call_402657320.base,
                                   call_402657320.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657320, uri, valid, _)

proc call*(call_402657321: Call_CreateProvisioningClaim_402657309;
           templateName: string): Recallable =
  ## createProvisioningClaim
  ## Creates a provisioning claim.
  ##   templateName: string (required)
                                  ##               : The name of the provisioning template to use.
  var path_402657322 = newJObject()
  add(path_402657322, "templateName", newJString(templateName))
  result = call_402657321.call(path_402657322, nil, nil, nil, nil)

var createProvisioningClaim* = Call_CreateProvisioningClaim_402657309(
    name: "createProvisioningClaim", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/provisioning-claim",
    validator: validate_CreateProvisioningClaim_402657310, base: "/",
    makeUrl: url_CreateProvisioningClaim_402657311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateProvisioningTemplate_402657338 = ref object of OpenApiRestCall_402656044
proc url_CreateProvisioningTemplate_402657340(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateProvisioningTemplate_402657339(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Creates a fleet provisioning template.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657341 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657341 = validateParameter(valid_402657341, JString,
                                      required = false, default = nil)
  if valid_402657341 != nil:
    section.add "X-Amz-Security-Token", valid_402657341
  var valid_402657342 = header.getOrDefault("X-Amz-Signature")
  valid_402657342 = validateParameter(valid_402657342, JString,
                                      required = false, default = nil)
  if valid_402657342 != nil:
    section.add "X-Amz-Signature", valid_402657342
  var valid_402657343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657343 = validateParameter(valid_402657343, JString,
                                      required = false, default = nil)
  if valid_402657343 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657343
  var valid_402657344 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657344 = validateParameter(valid_402657344, JString,
                                      required = false, default = nil)
  if valid_402657344 != nil:
    section.add "X-Amz-Algorithm", valid_402657344
  var valid_402657345 = header.getOrDefault("X-Amz-Date")
  valid_402657345 = validateParameter(valid_402657345, JString,
                                      required = false, default = nil)
  if valid_402657345 != nil:
    section.add "X-Amz-Date", valid_402657345
  var valid_402657346 = header.getOrDefault("X-Amz-Credential")
  valid_402657346 = validateParameter(valid_402657346, JString,
                                      required = false, default = nil)
  if valid_402657346 != nil:
    section.add "X-Amz-Credential", valid_402657346
  var valid_402657347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657347 = validateParameter(valid_402657347, JString,
                                      required = false, default = nil)
  if valid_402657347 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657349: Call_CreateProvisioningTemplate_402657338;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a fleet provisioning template.
                                                                                         ## 
  let valid = call_402657349.validator(path, query, header, formData, body, _)
  let scheme = call_402657349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657349.makeUrl(scheme.get, call_402657349.host, call_402657349.base,
                                   call_402657349.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657349, uri, valid, _)

proc call*(call_402657350: Call_CreateProvisioningTemplate_402657338;
           body: JsonNode): Recallable =
  ## createProvisioningTemplate
  ## Creates a fleet provisioning template.
  ##   body: JObject (required)
  var body_402657351 = newJObject()
  if body != nil:
    body_402657351 = body
  result = call_402657350.call(nil, nil, nil, nil, body_402657351)

var createProvisioningTemplate* = Call_CreateProvisioningTemplate_402657338(
    name: "createProvisioningTemplate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/provisioning-templates",
    validator: validate_CreateProvisioningTemplate_402657339, base: "/",
    makeUrl: url_CreateProvisioningTemplate_402657340,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListProvisioningTemplates_402657323 = ref object of OpenApiRestCall_402656044
proc url_ListProvisioningTemplates_402657325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListProvisioningTemplates_402657324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the fleet provisioning templates in your AWS account.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## A 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  section = newJObject()
  var valid_402657326 = query.getOrDefault("maxResults")
  valid_402657326 = validateParameter(valid_402657326, JInt, required = false,
                                      default = nil)
  if valid_402657326 != nil:
    section.add "maxResults", valid_402657326
  var valid_402657327 = query.getOrDefault("nextToken")
  valid_402657327 = validateParameter(valid_402657327, JString,
                                      required = false, default = nil)
  if valid_402657327 != nil:
    section.add "nextToken", valid_402657327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657328 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657328 = validateParameter(valid_402657328, JString,
                                      required = false, default = nil)
  if valid_402657328 != nil:
    section.add "X-Amz-Security-Token", valid_402657328
  var valid_402657329 = header.getOrDefault("X-Amz-Signature")
  valid_402657329 = validateParameter(valid_402657329, JString,
                                      required = false, default = nil)
  if valid_402657329 != nil:
    section.add "X-Amz-Signature", valid_402657329
  var valid_402657330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657330 = validateParameter(valid_402657330, JString,
                                      required = false, default = nil)
  if valid_402657330 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657330
  var valid_402657331 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657331 = validateParameter(valid_402657331, JString,
                                      required = false, default = nil)
  if valid_402657331 != nil:
    section.add "X-Amz-Algorithm", valid_402657331
  var valid_402657332 = header.getOrDefault("X-Amz-Date")
  valid_402657332 = validateParameter(valid_402657332, JString,
                                      required = false, default = nil)
  if valid_402657332 != nil:
    section.add "X-Amz-Date", valid_402657332
  var valid_402657333 = header.getOrDefault("X-Amz-Credential")
  valid_402657333 = validateParameter(valid_402657333, JString,
                                      required = false, default = nil)
  if valid_402657333 != nil:
    section.add "X-Amz-Credential", valid_402657333
  var valid_402657334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657334 = validateParameter(valid_402657334, JString,
                                      required = false, default = nil)
  if valid_402657334 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657335: Call_ListProvisioningTemplates_402657323;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the fleet provisioning templates in your AWS account.
                                                                                         ## 
  let valid = call_402657335.validator(path, query, header, formData, body, _)
  let scheme = call_402657335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657335.makeUrl(scheme.get, call_402657335.host, call_402657335.base,
                                   call_402657335.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657335, uri, valid, _)

proc call*(call_402657336: Call_ListProvisioningTemplates_402657323;
           maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listProvisioningTemplates
  ## Lists the fleet provisioning templates in your AWS account.
  ##   maxResults: int
                                                                ##             : The maximum number of results to return at one time.
  ##   
                                                                                                                                     ## nextToken: string
                                                                                                                                     ##            
                                                                                                                                     ## : 
                                                                                                                                     ## A 
                                                                                                                                     ## token 
                                                                                                                                     ## to 
                                                                                                                                     ## retrieve 
                                                                                                                                     ## the 
                                                                                                                                     ## next 
                                                                                                                                     ## set 
                                                                                                                                     ## of 
                                                                                                                                     ## results.
  var query_402657337 = newJObject()
  add(query_402657337, "maxResults", newJInt(maxResults))
  add(query_402657337, "nextToken", newJString(nextToken))
  result = call_402657336.call(nil, query_402657337, nil, nil, nil)

var listProvisioningTemplates* = Call_ListProvisioningTemplates_402657323(
    name: "listProvisioningTemplates", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/provisioning-templates",
    validator: validate_ListProvisioningTemplates_402657324, base: "/",
    makeUrl: url_ListProvisioningTemplates_402657325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateProvisioningTemplateVersion_402657369 = ref object of OpenApiRestCall_402656044
proc url_CreateProvisioningTemplateVersion_402657371(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName"),
                 (kind: ConstantSegment, value: "/versions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateProvisioningTemplateVersion_402657370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Creates a new version of a fleet provisioning template.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
                                 ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `templateName` field"
  var valid_402657372 = path.getOrDefault("templateName")
  valid_402657372 = validateParameter(valid_402657372, JString, required = true,
                                      default = nil)
  if valid_402657372 != nil:
    section.add "templateName", valid_402657372
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsDefault: JBool
                                  ##               : Sets a fleet provision template version as the default version.
  section = newJObject()
  var valid_402657373 = query.getOrDefault("setAsDefault")
  valid_402657373 = validateParameter(valid_402657373, JBool, required = false,
                                      default = nil)
  if valid_402657373 != nil:
    section.add "setAsDefault", valid_402657373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657374 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657374 = validateParameter(valid_402657374, JString,
                                      required = false, default = nil)
  if valid_402657374 != nil:
    section.add "X-Amz-Security-Token", valid_402657374
  var valid_402657375 = header.getOrDefault("X-Amz-Signature")
  valid_402657375 = validateParameter(valid_402657375, JString,
                                      required = false, default = nil)
  if valid_402657375 != nil:
    section.add "X-Amz-Signature", valid_402657375
  var valid_402657376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657376 = validateParameter(valid_402657376, JString,
                                      required = false, default = nil)
  if valid_402657376 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657376
  var valid_402657377 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657377 = validateParameter(valid_402657377, JString,
                                      required = false, default = nil)
  if valid_402657377 != nil:
    section.add "X-Amz-Algorithm", valid_402657377
  var valid_402657378 = header.getOrDefault("X-Amz-Date")
  valid_402657378 = validateParameter(valid_402657378, JString,
                                      required = false, default = nil)
  if valid_402657378 != nil:
    section.add "X-Amz-Date", valid_402657378
  var valid_402657379 = header.getOrDefault("X-Amz-Credential")
  valid_402657379 = validateParameter(valid_402657379, JString,
                                      required = false, default = nil)
  if valid_402657379 != nil:
    section.add "X-Amz-Credential", valid_402657379
  var valid_402657380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657380 = validateParameter(valid_402657380, JString,
                                      required = false, default = nil)
  if valid_402657380 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657380
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657382: Call_CreateProvisioningTemplateVersion_402657369;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new version of a fleet provisioning template.
                                                                                         ## 
  let valid = call_402657382.validator(path, query, header, formData, body, _)
  let scheme = call_402657382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657382.makeUrl(scheme.get, call_402657382.host, call_402657382.base,
                                   call_402657382.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657382, uri, valid, _)

proc call*(call_402657383: Call_CreateProvisioningTemplateVersion_402657369;
           body: JsonNode; templateName: string; setAsDefault: bool = false): Recallable =
  ## createProvisioningTemplateVersion
  ## Creates a new version of a fleet provisioning template.
  ##   body: JObject (required)
  ##   templateName: string (required)
                               ##               : The name of the fleet provisioning template.
  ##   
                                                                                              ## setAsDefault: bool
                                                                                              ##               
                                                                                              ## : 
                                                                                              ## Sets 
                                                                                              ## a 
                                                                                              ## fleet 
                                                                                              ## provision 
                                                                                              ## template 
                                                                                              ## version 
                                                                                              ## as 
                                                                                              ## the 
                                                                                              ## default 
                                                                                              ## version.
  var path_402657384 = newJObject()
  var query_402657385 = newJObject()
  var body_402657386 = newJObject()
  if body != nil:
    body_402657386 = body
  add(path_402657384, "templateName", newJString(templateName))
  add(query_402657385, "setAsDefault", newJBool(setAsDefault))
  result = call_402657383.call(path_402657384, query_402657385, nil, nil, body_402657386)

var createProvisioningTemplateVersion* = Call_CreateProvisioningTemplateVersion_402657369(
    name: "createProvisioningTemplateVersion", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions",
    validator: validate_CreateProvisioningTemplateVersion_402657370, base: "/",
    makeUrl: url_CreateProvisioningTemplateVersion_402657371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListProvisioningTemplateVersions_402657352 = ref object of OpenApiRestCall_402656044
proc url_ListProvisioningTemplateVersions_402657354(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName"),
                 (kind: ConstantSegment, value: "/versions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListProvisioningTemplateVersions_402657353(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## A list of fleet provisioning template versions.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
                                 ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `templateName` field"
  var valid_402657355 = path.getOrDefault("templateName")
  valid_402657355 = validateParameter(valid_402657355, JString, required = true,
                                      default = nil)
  if valid_402657355 != nil:
    section.add "templateName", valid_402657355
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## A 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  section = newJObject()
  var valid_402657356 = query.getOrDefault("maxResults")
  valid_402657356 = validateParameter(valid_402657356, JInt, required = false,
                                      default = nil)
  if valid_402657356 != nil:
    section.add "maxResults", valid_402657356
  var valid_402657357 = query.getOrDefault("nextToken")
  valid_402657357 = validateParameter(valid_402657357, JString,
                                      required = false, default = nil)
  if valid_402657357 != nil:
    section.add "nextToken", valid_402657357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657358 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657358 = validateParameter(valid_402657358, JString,
                                      required = false, default = nil)
  if valid_402657358 != nil:
    section.add "X-Amz-Security-Token", valid_402657358
  var valid_402657359 = header.getOrDefault("X-Amz-Signature")
  valid_402657359 = validateParameter(valid_402657359, JString,
                                      required = false, default = nil)
  if valid_402657359 != nil:
    section.add "X-Amz-Signature", valid_402657359
  var valid_402657360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657360 = validateParameter(valid_402657360, JString,
                                      required = false, default = nil)
  if valid_402657360 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657360
  var valid_402657361 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657361 = validateParameter(valid_402657361, JString,
                                      required = false, default = nil)
  if valid_402657361 != nil:
    section.add "X-Amz-Algorithm", valid_402657361
  var valid_402657362 = header.getOrDefault("X-Amz-Date")
  valid_402657362 = validateParameter(valid_402657362, JString,
                                      required = false, default = nil)
  if valid_402657362 != nil:
    section.add "X-Amz-Date", valid_402657362
  var valid_402657363 = header.getOrDefault("X-Amz-Credential")
  valid_402657363 = validateParameter(valid_402657363, JString,
                                      required = false, default = nil)
  if valid_402657363 != nil:
    section.add "X-Amz-Credential", valid_402657363
  var valid_402657364 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657364 = validateParameter(valid_402657364, JString,
                                      required = false, default = nil)
  if valid_402657364 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657364
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657365: Call_ListProvisioningTemplateVersions_402657352;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## 
                                                                                         ## A list of fleet provisioning template versions.
                                                                                         ## 
  let valid = call_402657365.validator(path, query, header, formData, body, _)
  let scheme = call_402657365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657365.makeUrl(scheme.get, call_402657365.host, call_402657365.base,
                                   call_402657365.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657365, uri, valid, _)

proc call*(call_402657366: Call_ListProvisioningTemplateVersions_402657352;
           templateName: string; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listProvisioningTemplateVersions
  ## A list of fleet provisioning template versions.
  ##   maxResults: int
                                                    ##             : The maximum number of results to return at one time.
  ##   
                                                                                                                         ## nextToken: string
                                                                                                                         ##            
                                                                                                                         ## : 
                                                                                                                         ## A 
                                                                                                                         ## token 
                                                                                                                         ## to 
                                                                                                                         ## retrieve 
                                                                                                                         ## the 
                                                                                                                         ## next 
                                                                                                                         ## set 
                                                                                                                         ## of 
                                                                                                                         ## results.
  ##   
                                                                                                                                    ## templateName: string (required)
                                                                                                                                    ##               
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## name 
                                                                                                                                    ## of 
                                                                                                                                    ## the 
                                                                                                                                    ## fleet 
                                                                                                                                    ## provisioning 
                                                                                                                                    ## template.
  var path_402657367 = newJObject()
  var query_402657368 = newJObject()
  add(query_402657368, "maxResults", newJInt(maxResults))
  add(query_402657368, "nextToken", newJString(nextToken))
  add(path_402657367, "templateName", newJString(templateName))
  result = call_402657366.call(path_402657367, query_402657368, nil, nil, nil)

var listProvisioningTemplateVersions* = Call_ListProvisioningTemplateVersions_402657352(
    name: "listProvisioningTemplateVersions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions",
    validator: validate_ListProvisioningTemplateVersions_402657353, base: "/",
    makeUrl: url_ListProvisioningTemplateVersions_402657354,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRoleAlias_402657401 = ref object of OpenApiRestCall_402656044
proc url_UpdateRoleAlias_402657403(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
                 (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateRoleAlias_402657402(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a role alias.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
                                 ##            : The role alias to update.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roleAlias` field"
  var valid_402657404 = path.getOrDefault("roleAlias")
  valid_402657404 = validateParameter(valid_402657404, JString, required = true,
                                      default = nil)
  if valid_402657404 != nil:
    section.add "roleAlias", valid_402657404
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657405 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657405 = validateParameter(valid_402657405, JString,
                                      required = false, default = nil)
  if valid_402657405 != nil:
    section.add "X-Amz-Security-Token", valid_402657405
  var valid_402657406 = header.getOrDefault("X-Amz-Signature")
  valid_402657406 = validateParameter(valid_402657406, JString,
                                      required = false, default = nil)
  if valid_402657406 != nil:
    section.add "X-Amz-Signature", valid_402657406
  var valid_402657407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657407 = validateParameter(valid_402657407, JString,
                                      required = false, default = nil)
  if valid_402657407 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657407
  var valid_402657408 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657408 = validateParameter(valid_402657408, JString,
                                      required = false, default = nil)
  if valid_402657408 != nil:
    section.add "X-Amz-Algorithm", valid_402657408
  var valid_402657409 = header.getOrDefault("X-Amz-Date")
  valid_402657409 = validateParameter(valid_402657409, JString,
                                      required = false, default = nil)
  if valid_402657409 != nil:
    section.add "X-Amz-Date", valid_402657409
  var valid_402657410 = header.getOrDefault("X-Amz-Credential")
  valid_402657410 = validateParameter(valid_402657410, JString,
                                      required = false, default = nil)
  if valid_402657410 != nil:
    section.add "X-Amz-Credential", valid_402657410
  var valid_402657411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657411 = validateParameter(valid_402657411, JString,
                                      required = false, default = nil)
  if valid_402657411 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657413: Call_UpdateRoleAlias_402657401; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a role alias.
                                                                                         ## 
  let valid = call_402657413.validator(path, query, header, formData, body, _)
  let scheme = call_402657413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657413.makeUrl(scheme.get, call_402657413.host, call_402657413.base,
                                   call_402657413.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657413, uri, valid, _)

proc call*(call_402657414: Call_UpdateRoleAlias_402657401; roleAlias: string;
           body: JsonNode): Recallable =
  ## updateRoleAlias
  ## Updates a role alias.
  ##   roleAlias: string (required)
                          ##            : The role alias to update.
  ##   body: JObject (required)
  var path_402657415 = newJObject()
  var body_402657416 = newJObject()
  add(path_402657415, "roleAlias", newJString(roleAlias))
  if body != nil:
    body_402657416 = body
  result = call_402657414.call(path_402657415, nil, nil, nil, body_402657416)

var updateRoleAlias* = Call_UpdateRoleAlias_402657401(name: "updateRoleAlias",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/role-aliases/{roleAlias}", validator: validate_UpdateRoleAlias_402657402,
    base: "/", makeUrl: url_UpdateRoleAlias_402657403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRoleAlias_402657417 = ref object of OpenApiRestCall_402656044
proc url_CreateRoleAlias_402657419(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
                 (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateRoleAlias_402657418(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a role alias.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
                                 ##            : The role alias that points to a role ARN. This allows you to change the role without having to update the device.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roleAlias` field"
  var valid_402657420 = path.getOrDefault("roleAlias")
  valid_402657420 = validateParameter(valid_402657420, JString, required = true,
                                      default = nil)
  if valid_402657420 != nil:
    section.add "roleAlias", valid_402657420
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657421 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657421 = validateParameter(valid_402657421, JString,
                                      required = false, default = nil)
  if valid_402657421 != nil:
    section.add "X-Amz-Security-Token", valid_402657421
  var valid_402657422 = header.getOrDefault("X-Amz-Signature")
  valid_402657422 = validateParameter(valid_402657422, JString,
                                      required = false, default = nil)
  if valid_402657422 != nil:
    section.add "X-Amz-Signature", valid_402657422
  var valid_402657423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657423 = validateParameter(valid_402657423, JString,
                                      required = false, default = nil)
  if valid_402657423 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657423
  var valid_402657424 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657424 = validateParameter(valid_402657424, JString,
                                      required = false, default = nil)
  if valid_402657424 != nil:
    section.add "X-Amz-Algorithm", valid_402657424
  var valid_402657425 = header.getOrDefault("X-Amz-Date")
  valid_402657425 = validateParameter(valid_402657425, JString,
                                      required = false, default = nil)
  if valid_402657425 != nil:
    section.add "X-Amz-Date", valid_402657425
  var valid_402657426 = header.getOrDefault("X-Amz-Credential")
  valid_402657426 = validateParameter(valid_402657426, JString,
                                      required = false, default = nil)
  if valid_402657426 != nil:
    section.add "X-Amz-Credential", valid_402657426
  var valid_402657427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657427 = validateParameter(valid_402657427, JString,
                                      required = false, default = nil)
  if valid_402657427 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657429: Call_CreateRoleAlias_402657417; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a role alias.
                                                                                         ## 
  let valid = call_402657429.validator(path, query, header, formData, body, _)
  let scheme = call_402657429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657429.makeUrl(scheme.get, call_402657429.host, call_402657429.base,
                                   call_402657429.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657429, uri, valid, _)

proc call*(call_402657430: Call_CreateRoleAlias_402657417; roleAlias: string;
           body: JsonNode): Recallable =
  ## createRoleAlias
  ## Creates a role alias.
  ##   roleAlias: string (required)
                          ##            : The role alias that points to a role ARN. This allows you to change the role without having to update the device.
  ##   
                                                                                                                                                           ## body: JObject (required)
  var path_402657431 = newJObject()
  var body_402657432 = newJObject()
  add(path_402657431, "roleAlias", newJString(roleAlias))
  if body != nil:
    body_402657432 = body
  result = call_402657430.call(path_402657431, nil, nil, nil, body_402657432)

var createRoleAlias* = Call_CreateRoleAlias_402657417(name: "createRoleAlias",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/role-aliases/{roleAlias}", validator: validate_CreateRoleAlias_402657418,
    base: "/", makeUrl: url_CreateRoleAlias_402657419,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeRoleAlias_402657387 = ref object of OpenApiRestCall_402656044
proc url_DescribeRoleAlias_402657389(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
                 (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeRoleAlias_402657388(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a role alias.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
                                 ##            : The role alias to describe.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roleAlias` field"
  var valid_402657390 = path.getOrDefault("roleAlias")
  valid_402657390 = validateParameter(valid_402657390, JString, required = true,
                                      default = nil)
  if valid_402657390 != nil:
    section.add "roleAlias", valid_402657390
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657391 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657391 = validateParameter(valid_402657391, JString,
                                      required = false, default = nil)
  if valid_402657391 != nil:
    section.add "X-Amz-Security-Token", valid_402657391
  var valid_402657392 = header.getOrDefault("X-Amz-Signature")
  valid_402657392 = validateParameter(valid_402657392, JString,
                                      required = false, default = nil)
  if valid_402657392 != nil:
    section.add "X-Amz-Signature", valid_402657392
  var valid_402657393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657393 = validateParameter(valid_402657393, JString,
                                      required = false, default = nil)
  if valid_402657393 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657393
  var valid_402657394 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657394 = validateParameter(valid_402657394, JString,
                                      required = false, default = nil)
  if valid_402657394 != nil:
    section.add "X-Amz-Algorithm", valid_402657394
  var valid_402657395 = header.getOrDefault("X-Amz-Date")
  valid_402657395 = validateParameter(valid_402657395, JString,
                                      required = false, default = nil)
  if valid_402657395 != nil:
    section.add "X-Amz-Date", valid_402657395
  var valid_402657396 = header.getOrDefault("X-Amz-Credential")
  valid_402657396 = validateParameter(valid_402657396, JString,
                                      required = false, default = nil)
  if valid_402657396 != nil:
    section.add "X-Amz-Credential", valid_402657396
  var valid_402657397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657397 = validateParameter(valid_402657397, JString,
                                      required = false, default = nil)
  if valid_402657397 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657397
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657398: Call_DescribeRoleAlias_402657387;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a role alias.
                                                                                         ## 
  let valid = call_402657398.validator(path, query, header, formData, body, _)
  let scheme = call_402657398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657398.makeUrl(scheme.get, call_402657398.host, call_402657398.base,
                                   call_402657398.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657398, uri, valid, _)

proc call*(call_402657399: Call_DescribeRoleAlias_402657387; roleAlias: string): Recallable =
  ## describeRoleAlias
  ## Describes a role alias.
  ##   roleAlias: string (required)
                            ##            : The role alias to describe.
  var path_402657400 = newJObject()
  add(path_402657400, "roleAlias", newJString(roleAlias))
  result = call_402657399.call(path_402657400, nil, nil, nil, nil)

var describeRoleAlias* = Call_DescribeRoleAlias_402657387(
    name: "describeRoleAlias", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/role-aliases/{roleAlias}",
    validator: validate_DescribeRoleAlias_402657388, base: "/",
    makeUrl: url_DescribeRoleAlias_402657389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRoleAlias_402657433 = ref object of OpenApiRestCall_402656044
proc url_DeleteRoleAlias_402657435(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "roleAlias" in path, "`roleAlias` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/role-aliases/"),
                 (kind: VariableSegment, value: "roleAlias")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteRoleAlias_402657434(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a role alias
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roleAlias: JString (required)
                                 ##            : The role alias to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roleAlias` field"
  var valid_402657436 = path.getOrDefault("roleAlias")
  valid_402657436 = validateParameter(valid_402657436, JString, required = true,
                                      default = nil)
  if valid_402657436 != nil:
    section.add "roleAlias", valid_402657436
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657437 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657437 = validateParameter(valid_402657437, JString,
                                      required = false, default = nil)
  if valid_402657437 != nil:
    section.add "X-Amz-Security-Token", valid_402657437
  var valid_402657438 = header.getOrDefault("X-Amz-Signature")
  valid_402657438 = validateParameter(valid_402657438, JString,
                                      required = false, default = nil)
  if valid_402657438 != nil:
    section.add "X-Amz-Signature", valid_402657438
  var valid_402657439 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657439 = validateParameter(valid_402657439, JString,
                                      required = false, default = nil)
  if valid_402657439 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657439
  var valid_402657440 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657440 = validateParameter(valid_402657440, JString,
                                      required = false, default = nil)
  if valid_402657440 != nil:
    section.add "X-Amz-Algorithm", valid_402657440
  var valid_402657441 = header.getOrDefault("X-Amz-Date")
  valid_402657441 = validateParameter(valid_402657441, JString,
                                      required = false, default = nil)
  if valid_402657441 != nil:
    section.add "X-Amz-Date", valid_402657441
  var valid_402657442 = header.getOrDefault("X-Amz-Credential")
  valid_402657442 = validateParameter(valid_402657442, JString,
                                      required = false, default = nil)
  if valid_402657442 != nil:
    section.add "X-Amz-Credential", valid_402657442
  var valid_402657443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657443 = validateParameter(valid_402657443, JString,
                                      required = false, default = nil)
  if valid_402657443 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657443
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657444: Call_DeleteRoleAlias_402657433; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a role alias
                                                                                         ## 
  let valid = call_402657444.validator(path, query, header, formData, body, _)
  let scheme = call_402657444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657444.makeUrl(scheme.get, call_402657444.host, call_402657444.base,
                                   call_402657444.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657444, uri, valid, _)

proc call*(call_402657445: Call_DeleteRoleAlias_402657433; roleAlias: string): Recallable =
  ## deleteRoleAlias
  ## Deletes a role alias
  ##   roleAlias: string (required)
                         ##            : The role alias to delete.
  var path_402657446 = newJObject()
  add(path_402657446, "roleAlias", newJString(roleAlias))
  result = call_402657445.call(path_402657446, nil, nil, nil, nil)

var deleteRoleAlias* = Call_DeleteRoleAlias_402657433(name: "deleteRoleAlias",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/role-aliases/{roleAlias}", validator: validate_DeleteRoleAlias_402657434,
    base: "/", makeUrl: url_DeleteRoleAlias_402657435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateScheduledAudit_402657461 = ref object of OpenApiRestCall_402656044
proc url_CreateScheduledAudit_402657463(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
         "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
                 (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateScheduledAudit_402657462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a scheduled audit that is run at a specified time interval.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
                                 ##                     : The name you want to give to the scheduled audit. (Max. 128 chars)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `scheduledAuditName` field"
  var valid_402657464 = path.getOrDefault("scheduledAuditName")
  valid_402657464 = validateParameter(valid_402657464, JString, required = true,
                                      default = nil)
  if valid_402657464 != nil:
    section.add "scheduledAuditName", valid_402657464
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657465 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657465 = validateParameter(valid_402657465, JString,
                                      required = false, default = nil)
  if valid_402657465 != nil:
    section.add "X-Amz-Security-Token", valid_402657465
  var valid_402657466 = header.getOrDefault("X-Amz-Signature")
  valid_402657466 = validateParameter(valid_402657466, JString,
                                      required = false, default = nil)
  if valid_402657466 != nil:
    section.add "X-Amz-Signature", valid_402657466
  var valid_402657467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657467 = validateParameter(valid_402657467, JString,
                                      required = false, default = nil)
  if valid_402657467 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657467
  var valid_402657468 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657468 = validateParameter(valid_402657468, JString,
                                      required = false, default = nil)
  if valid_402657468 != nil:
    section.add "X-Amz-Algorithm", valid_402657468
  var valid_402657469 = header.getOrDefault("X-Amz-Date")
  valid_402657469 = validateParameter(valid_402657469, JString,
                                      required = false, default = nil)
  if valid_402657469 != nil:
    section.add "X-Amz-Date", valid_402657469
  var valid_402657470 = header.getOrDefault("X-Amz-Credential")
  valid_402657470 = validateParameter(valid_402657470, JString,
                                      required = false, default = nil)
  if valid_402657470 != nil:
    section.add "X-Amz-Credential", valid_402657470
  var valid_402657471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657471 = validateParameter(valid_402657471, JString,
                                      required = false, default = nil)
  if valid_402657471 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657473: Call_CreateScheduledAudit_402657461;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a scheduled audit that is run at a specified time interval.
                                                                                         ## 
  let valid = call_402657473.validator(path, query, header, formData, body, _)
  let scheme = call_402657473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657473.makeUrl(scheme.get, call_402657473.host, call_402657473.base,
                                   call_402657473.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657473, uri, valid, _)

proc call*(call_402657474: Call_CreateScheduledAudit_402657461;
           scheduledAuditName: string; body: JsonNode): Recallable =
  ## createScheduledAudit
  ## Creates a scheduled audit that is run at a specified time interval.
  ##   
                                                                        ## scheduledAuditName: string (required)
                                                                        ##                     
                                                                        ## : 
                                                                        ## The 
                                                                        ## name 
                                                                        ## you 
                                                                        ## want 
                                                                        ## to 
                                                                        ## give to 
                                                                        ## the 
                                                                        ## scheduled 
                                                                        ## audit. 
                                                                        ## (Max. 
                                                                        ## 128 
                                                                        ## chars)
  ##   
                                                                                 ## body: JObject (required)
  var path_402657475 = newJObject()
  var body_402657476 = newJObject()
  add(path_402657475, "scheduledAuditName", newJString(scheduledAuditName))
  if body != nil:
    body_402657476 = body
  result = call_402657474.call(path_402657475, nil, nil, nil, body_402657476)

var createScheduledAudit* = Call_CreateScheduledAudit_402657461(
    name: "createScheduledAudit", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_CreateScheduledAudit_402657462, base: "/",
    makeUrl: url_CreateScheduledAudit_402657463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeScheduledAudit_402657447 = ref object of OpenApiRestCall_402656044
proc url_DescribeScheduledAudit_402657449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
         "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
                 (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeScheduledAudit_402657448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a scheduled audit.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
                                 ##                     : The name of the scheduled audit whose information you want to get.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `scheduledAuditName` field"
  var valid_402657450 = path.getOrDefault("scheduledAuditName")
  valid_402657450 = validateParameter(valid_402657450, JString, required = true,
                                      default = nil)
  if valid_402657450 != nil:
    section.add "scheduledAuditName", valid_402657450
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657451 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657451 = validateParameter(valid_402657451, JString,
                                      required = false, default = nil)
  if valid_402657451 != nil:
    section.add "X-Amz-Security-Token", valid_402657451
  var valid_402657452 = header.getOrDefault("X-Amz-Signature")
  valid_402657452 = validateParameter(valid_402657452, JString,
                                      required = false, default = nil)
  if valid_402657452 != nil:
    section.add "X-Amz-Signature", valid_402657452
  var valid_402657453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657453 = validateParameter(valid_402657453, JString,
                                      required = false, default = nil)
  if valid_402657453 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657453
  var valid_402657454 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657454 = validateParameter(valid_402657454, JString,
                                      required = false, default = nil)
  if valid_402657454 != nil:
    section.add "X-Amz-Algorithm", valid_402657454
  var valid_402657455 = header.getOrDefault("X-Amz-Date")
  valid_402657455 = validateParameter(valid_402657455, JString,
                                      required = false, default = nil)
  if valid_402657455 != nil:
    section.add "X-Amz-Date", valid_402657455
  var valid_402657456 = header.getOrDefault("X-Amz-Credential")
  valid_402657456 = validateParameter(valid_402657456, JString,
                                      required = false, default = nil)
  if valid_402657456 != nil:
    section.add "X-Amz-Credential", valid_402657456
  var valid_402657457 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657457 = validateParameter(valid_402657457, JString,
                                      required = false, default = nil)
  if valid_402657457 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657457
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657458: Call_DescribeScheduledAudit_402657447;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a scheduled audit.
                                                                                         ## 
  let valid = call_402657458.validator(path, query, header, formData, body, _)
  let scheme = call_402657458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657458.makeUrl(scheme.get, call_402657458.host, call_402657458.base,
                                   call_402657458.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657458, uri, valid, _)

proc call*(call_402657459: Call_DescribeScheduledAudit_402657447;
           scheduledAuditName: string): Recallable =
  ## describeScheduledAudit
  ## Gets information about a scheduled audit.
  ##   scheduledAuditName: string (required)
                                              ##                     : The name of the scheduled audit whose information you want to get.
  var path_402657460 = newJObject()
  add(path_402657460, "scheduledAuditName", newJString(scheduledAuditName))
  result = call_402657459.call(path_402657460, nil, nil, nil, nil)

var describeScheduledAudit* = Call_DescribeScheduledAudit_402657447(
    name: "describeScheduledAudit", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_DescribeScheduledAudit_402657448, base: "/",
    makeUrl: url_DescribeScheduledAudit_402657449,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateScheduledAudit_402657491 = ref object of OpenApiRestCall_402656044
proc url_UpdateScheduledAudit_402657493(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
         "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
                 (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateScheduledAudit_402657492(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a scheduled audit, including which checks are performed and how often the audit takes place.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
                                 ##                     : The name of the scheduled audit. (Max. 128 chars)
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `scheduledAuditName` field"
  var valid_402657494 = path.getOrDefault("scheduledAuditName")
  valid_402657494 = validateParameter(valid_402657494, JString, required = true,
                                      default = nil)
  if valid_402657494 != nil:
    section.add "scheduledAuditName", valid_402657494
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657495 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657495 = validateParameter(valid_402657495, JString,
                                      required = false, default = nil)
  if valid_402657495 != nil:
    section.add "X-Amz-Security-Token", valid_402657495
  var valid_402657496 = header.getOrDefault("X-Amz-Signature")
  valid_402657496 = validateParameter(valid_402657496, JString,
                                      required = false, default = nil)
  if valid_402657496 != nil:
    section.add "X-Amz-Signature", valid_402657496
  var valid_402657497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657497 = validateParameter(valid_402657497, JString,
                                      required = false, default = nil)
  if valid_402657497 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657497
  var valid_402657498 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657498 = validateParameter(valid_402657498, JString,
                                      required = false, default = nil)
  if valid_402657498 != nil:
    section.add "X-Amz-Algorithm", valid_402657498
  var valid_402657499 = header.getOrDefault("X-Amz-Date")
  valid_402657499 = validateParameter(valid_402657499, JString,
                                      required = false, default = nil)
  if valid_402657499 != nil:
    section.add "X-Amz-Date", valid_402657499
  var valid_402657500 = header.getOrDefault("X-Amz-Credential")
  valid_402657500 = validateParameter(valid_402657500, JString,
                                      required = false, default = nil)
  if valid_402657500 != nil:
    section.add "X-Amz-Credential", valid_402657500
  var valid_402657501 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657501 = validateParameter(valid_402657501, JString,
                                      required = false, default = nil)
  if valid_402657501 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657501
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657503: Call_UpdateScheduledAudit_402657491;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a scheduled audit, including which checks are performed and how often the audit takes place.
                                                                                         ## 
  let valid = call_402657503.validator(path, query, header, formData, body, _)
  let scheme = call_402657503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657503.makeUrl(scheme.get, call_402657503.host, call_402657503.base,
                                   call_402657503.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657503, uri, valid, _)

proc call*(call_402657504: Call_UpdateScheduledAudit_402657491;
           scheduledAuditName: string; body: JsonNode): Recallable =
  ## updateScheduledAudit
  ## Updates a scheduled audit, including which checks are performed and how often the audit takes place.
  ##   
                                                                                                         ## scheduledAuditName: string (required)
                                                                                                         ##                     
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## name 
                                                                                                         ## of 
                                                                                                         ## the 
                                                                                                         ## scheduled 
                                                                                                         ## audit. 
                                                                                                         ## (Max. 
                                                                                                         ## 128 
                                                                                                         ## chars)
  ##   
                                                                                                                  ## body: JObject (required)
  var path_402657505 = newJObject()
  var body_402657506 = newJObject()
  add(path_402657505, "scheduledAuditName", newJString(scheduledAuditName))
  if body != nil:
    body_402657506 = body
  result = call_402657504.call(path_402657505, nil, nil, nil, body_402657506)

var updateScheduledAudit* = Call_UpdateScheduledAudit_402657491(
    name: "updateScheduledAudit", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_UpdateScheduledAudit_402657492, base: "/",
    makeUrl: url_UpdateScheduledAudit_402657493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteScheduledAudit_402657477 = ref object of OpenApiRestCall_402656044
proc url_DeleteScheduledAudit_402657479(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "scheduledAuditName" in path,
         "`scheduledAuditName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/scheduledaudits/"),
                 (kind: VariableSegment, value: "scheduledAuditName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteScheduledAudit_402657478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a scheduled audit.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   scheduledAuditName: JString (required)
                                 ##                     : The name of the scheduled audit you want to delete.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `scheduledAuditName` field"
  var valid_402657480 = path.getOrDefault("scheduledAuditName")
  valid_402657480 = validateParameter(valid_402657480, JString, required = true,
                                      default = nil)
  if valid_402657480 != nil:
    section.add "scheduledAuditName", valid_402657480
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657481 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657481 = validateParameter(valid_402657481, JString,
                                      required = false, default = nil)
  if valid_402657481 != nil:
    section.add "X-Amz-Security-Token", valid_402657481
  var valid_402657482 = header.getOrDefault("X-Amz-Signature")
  valid_402657482 = validateParameter(valid_402657482, JString,
                                      required = false, default = nil)
  if valid_402657482 != nil:
    section.add "X-Amz-Signature", valid_402657482
  var valid_402657483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657483 = validateParameter(valid_402657483, JString,
                                      required = false, default = nil)
  if valid_402657483 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657483
  var valid_402657484 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657484 = validateParameter(valid_402657484, JString,
                                      required = false, default = nil)
  if valid_402657484 != nil:
    section.add "X-Amz-Algorithm", valid_402657484
  var valid_402657485 = header.getOrDefault("X-Amz-Date")
  valid_402657485 = validateParameter(valid_402657485, JString,
                                      required = false, default = nil)
  if valid_402657485 != nil:
    section.add "X-Amz-Date", valid_402657485
  var valid_402657486 = header.getOrDefault("X-Amz-Credential")
  valid_402657486 = validateParameter(valid_402657486, JString,
                                      required = false, default = nil)
  if valid_402657486 != nil:
    section.add "X-Amz-Credential", valid_402657486
  var valid_402657487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657487 = validateParameter(valid_402657487, JString,
                                      required = false, default = nil)
  if valid_402657487 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657487
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657488: Call_DeleteScheduledAudit_402657477;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a scheduled audit.
                                                                                         ## 
  let valid = call_402657488.validator(path, query, header, formData, body, _)
  let scheme = call_402657488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657488.makeUrl(scheme.get, call_402657488.host, call_402657488.base,
                                   call_402657488.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657488, uri, valid, _)

proc call*(call_402657489: Call_DeleteScheduledAudit_402657477;
           scheduledAuditName: string): Recallable =
  ## deleteScheduledAudit
  ## Deletes a scheduled audit.
  ##   scheduledAuditName: string (required)
                               ##                     : The name of the scheduled audit you want to delete.
  var path_402657490 = newJObject()
  add(path_402657490, "scheduledAuditName", newJString(scheduledAuditName))
  result = call_402657489.call(path_402657490, nil, nil, nil, nil)

var deleteScheduledAudit* = Call_DeleteScheduledAudit_402657477(
    name: "deleteScheduledAudit", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/audit/scheduledaudits/{scheduledAuditName}",
    validator: validate_DeleteScheduledAudit_402657478, base: "/",
    makeUrl: url_DeleteScheduledAudit_402657479,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateSecurityProfile_402657521 = ref object of OpenApiRestCall_402656044
proc url_CreateSecurityProfile_402657523(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
         "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
                 (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateSecurityProfile_402657522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a Device Defender security profile.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
                                 ##                      : The name you are giving to the security profile.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_402657524 = path.getOrDefault("securityProfileName")
  valid_402657524 = validateParameter(valid_402657524, JString, required = true,
                                      default = nil)
  if valid_402657524 != nil:
    section.add "securityProfileName", valid_402657524
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657525 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657525 = validateParameter(valid_402657525, JString,
                                      required = false, default = nil)
  if valid_402657525 != nil:
    section.add "X-Amz-Security-Token", valid_402657525
  var valid_402657526 = header.getOrDefault("X-Amz-Signature")
  valid_402657526 = validateParameter(valid_402657526, JString,
                                      required = false, default = nil)
  if valid_402657526 != nil:
    section.add "X-Amz-Signature", valid_402657526
  var valid_402657527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657527 = validateParameter(valid_402657527, JString,
                                      required = false, default = nil)
  if valid_402657527 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657527
  var valid_402657528 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657528 = validateParameter(valid_402657528, JString,
                                      required = false, default = nil)
  if valid_402657528 != nil:
    section.add "X-Amz-Algorithm", valid_402657528
  var valid_402657529 = header.getOrDefault("X-Amz-Date")
  valid_402657529 = validateParameter(valid_402657529, JString,
                                      required = false, default = nil)
  if valid_402657529 != nil:
    section.add "X-Amz-Date", valid_402657529
  var valid_402657530 = header.getOrDefault("X-Amz-Credential")
  valid_402657530 = validateParameter(valid_402657530, JString,
                                      required = false, default = nil)
  if valid_402657530 != nil:
    section.add "X-Amz-Credential", valid_402657530
  var valid_402657531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657531 = validateParameter(valid_402657531, JString,
                                      required = false, default = nil)
  if valid_402657531 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657533: Call_CreateSecurityProfile_402657521;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a Device Defender security profile.
                                                                                         ## 
  let valid = call_402657533.validator(path, query, header, formData, body, _)
  let scheme = call_402657533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657533.makeUrl(scheme.get, call_402657533.host, call_402657533.base,
                                   call_402657533.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657533, uri, valid, _)

proc call*(call_402657534: Call_CreateSecurityProfile_402657521; body: JsonNode;
           securityProfileName: string): Recallable =
  ## createSecurityProfile
  ## Creates a Device Defender security profile.
  ##   body: JObject (required)
  ##   securityProfileName: string (required)
                               ##                      : The name you are giving to the security profile.
  var path_402657535 = newJObject()
  var body_402657536 = newJObject()
  if body != nil:
    body_402657536 = body
  add(path_402657535, "securityProfileName", newJString(securityProfileName))
  result = call_402657534.call(path_402657535, nil, nil, nil, body_402657536)

var createSecurityProfile* = Call_CreateSecurityProfile_402657521(
    name: "createSecurityProfile", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com",
    route: "/security-profiles/{securityProfileName}",
    validator: validate_CreateSecurityProfile_402657522, base: "/",
    makeUrl: url_CreateSecurityProfile_402657523,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeSecurityProfile_402657507 = ref object of OpenApiRestCall_402656044
proc url_DescribeSecurityProfile_402657509(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
         "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
                 (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeSecurityProfile_402657508(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a Device Defender security profile.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
                                 ##                      : The name of the security profile whose information you want to get.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_402657510 = path.getOrDefault("securityProfileName")
  valid_402657510 = validateParameter(valid_402657510, JString, required = true,
                                      default = nil)
  if valid_402657510 != nil:
    section.add "securityProfileName", valid_402657510
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657511 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657511 = validateParameter(valid_402657511, JString,
                                      required = false, default = nil)
  if valid_402657511 != nil:
    section.add "X-Amz-Security-Token", valid_402657511
  var valid_402657512 = header.getOrDefault("X-Amz-Signature")
  valid_402657512 = validateParameter(valid_402657512, JString,
                                      required = false, default = nil)
  if valid_402657512 != nil:
    section.add "X-Amz-Signature", valid_402657512
  var valid_402657513 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657513 = validateParameter(valid_402657513, JString,
                                      required = false, default = nil)
  if valid_402657513 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657513
  var valid_402657514 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657514 = validateParameter(valid_402657514, JString,
                                      required = false, default = nil)
  if valid_402657514 != nil:
    section.add "X-Amz-Algorithm", valid_402657514
  var valid_402657515 = header.getOrDefault("X-Amz-Date")
  valid_402657515 = validateParameter(valid_402657515, JString,
                                      required = false, default = nil)
  if valid_402657515 != nil:
    section.add "X-Amz-Date", valid_402657515
  var valid_402657516 = header.getOrDefault("X-Amz-Credential")
  valid_402657516 = validateParameter(valid_402657516, JString,
                                      required = false, default = nil)
  if valid_402657516 != nil:
    section.add "X-Amz-Credential", valid_402657516
  var valid_402657517 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657517 = validateParameter(valid_402657517, JString,
                                      required = false, default = nil)
  if valid_402657517 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657517
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657518: Call_DescribeSecurityProfile_402657507;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a Device Defender security profile.
                                                                                         ## 
  let valid = call_402657518.validator(path, query, header, formData, body, _)
  let scheme = call_402657518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657518.makeUrl(scheme.get, call_402657518.host, call_402657518.base,
                                   call_402657518.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657518, uri, valid, _)

proc call*(call_402657519: Call_DescribeSecurityProfile_402657507;
           securityProfileName: string): Recallable =
  ## describeSecurityProfile
  ## Gets information about a Device Defender security profile.
  ##   
                                                               ## securityProfileName: string (required)
                                                               ##                      
                                                               ## : 
                                                               ## The name of the security profile whose information you want to get.
  var path_402657520 = newJObject()
  add(path_402657520, "securityProfileName", newJString(securityProfileName))
  result = call_402657519.call(path_402657520, nil, nil, nil, nil)

var describeSecurityProfile* = Call_DescribeSecurityProfile_402657507(
    name: "describeSecurityProfile", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/security-profiles/{securityProfileName}",
    validator: validate_DescribeSecurityProfile_402657508, base: "/",
    makeUrl: url_DescribeSecurityProfile_402657509,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateSecurityProfile_402657553 = ref object of OpenApiRestCall_402656044
proc url_UpdateSecurityProfile_402657555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
         "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
                 (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateSecurityProfile_402657554(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a Device Defender security profile.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
                                 ##                      : The name of the security profile you want to update.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_402657556 = path.getOrDefault("securityProfileName")
  valid_402657556 = validateParameter(valid_402657556, JString, required = true,
                                      default = nil)
  if valid_402657556 != nil:
    section.add "securityProfileName", valid_402657556
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
                                  ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  section = newJObject()
  var valid_402657557 = query.getOrDefault("expectedVersion")
  valid_402657557 = validateParameter(valid_402657557, JInt, required = false,
                                      default = nil)
  if valid_402657557 != nil:
    section.add "expectedVersion", valid_402657557
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657558 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657558 = validateParameter(valid_402657558, JString,
                                      required = false, default = nil)
  if valid_402657558 != nil:
    section.add "X-Amz-Security-Token", valid_402657558
  var valid_402657559 = header.getOrDefault("X-Amz-Signature")
  valid_402657559 = validateParameter(valid_402657559, JString,
                                      required = false, default = nil)
  if valid_402657559 != nil:
    section.add "X-Amz-Signature", valid_402657559
  var valid_402657560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657560 = validateParameter(valid_402657560, JString,
                                      required = false, default = nil)
  if valid_402657560 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657560
  var valid_402657561 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657561 = validateParameter(valid_402657561, JString,
                                      required = false, default = nil)
  if valid_402657561 != nil:
    section.add "X-Amz-Algorithm", valid_402657561
  var valid_402657562 = header.getOrDefault("X-Amz-Date")
  valid_402657562 = validateParameter(valid_402657562, JString,
                                      required = false, default = nil)
  if valid_402657562 != nil:
    section.add "X-Amz-Date", valid_402657562
  var valid_402657563 = header.getOrDefault("X-Amz-Credential")
  valid_402657563 = validateParameter(valid_402657563, JString,
                                      required = false, default = nil)
  if valid_402657563 != nil:
    section.add "X-Amz-Credential", valid_402657563
  var valid_402657564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657564 = validateParameter(valid_402657564, JString,
                                      required = false, default = nil)
  if valid_402657564 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657564
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657566: Call_UpdateSecurityProfile_402657553;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a Device Defender security profile.
                                                                                         ## 
  let valid = call_402657566.validator(path, query, header, formData, body, _)
  let scheme = call_402657566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657566.makeUrl(scheme.get, call_402657566.host, call_402657566.base,
                                   call_402657566.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657566, uri, valid, _)

proc call*(call_402657567: Call_UpdateSecurityProfile_402657553; body: JsonNode;
           securityProfileName: string; expectedVersion: int = 0): Recallable =
  ## updateSecurityProfile
  ## Updates a Device Defender security profile.
  ##   expectedVersion: int
                                                ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  ##   
                                                                                                                                                                                                                                                                                                             ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                                                                                        ## securityProfileName: string (required)
                                                                                                                                                                                                                                                                                                                                        ##                      
                                                                                                                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                                                                                                                                        ## name 
                                                                                                                                                                                                                                                                                                                                        ## of 
                                                                                                                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                                                                                                                        ## security 
                                                                                                                                                                                                                                                                                                                                        ## profile 
                                                                                                                                                                                                                                                                                                                                        ## you 
                                                                                                                                                                                                                                                                                                                                        ## want 
                                                                                                                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                                                                                                                        ## update.
  var path_402657568 = newJObject()
  var query_402657569 = newJObject()
  var body_402657570 = newJObject()
  add(query_402657569, "expectedVersion", newJInt(expectedVersion))
  if body != nil:
    body_402657570 = body
  add(path_402657568, "securityProfileName", newJString(securityProfileName))
  result = call_402657567.call(path_402657568, query_402657569, nil, nil, body_402657570)

var updateSecurityProfile* = Call_UpdateSecurityProfile_402657553(
    name: "updateSecurityProfile", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/security-profiles/{securityProfileName}",
    validator: validate_UpdateSecurityProfile_402657554, base: "/",
    makeUrl: url_UpdateSecurityProfile_402657555,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteSecurityProfile_402657537 = ref object of OpenApiRestCall_402656044
proc url_DeleteSecurityProfile_402657539(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
         "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
                 (kind: VariableSegment, value: "securityProfileName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteSecurityProfile_402657538(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a Device Defender security profile.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
                                 ##                      : The name of the security profile to be deleted.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_402657540 = path.getOrDefault("securityProfileName")
  valid_402657540 = validateParameter(valid_402657540, JString, required = true,
                                      default = nil)
  if valid_402657540 != nil:
    section.add "securityProfileName", valid_402657540
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
                                  ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  section = newJObject()
  var valid_402657541 = query.getOrDefault("expectedVersion")
  valid_402657541 = validateParameter(valid_402657541, JInt, required = false,
                                      default = nil)
  if valid_402657541 != nil:
    section.add "expectedVersion", valid_402657541
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657542 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657542 = validateParameter(valid_402657542, JString,
                                      required = false, default = nil)
  if valid_402657542 != nil:
    section.add "X-Amz-Security-Token", valid_402657542
  var valid_402657543 = header.getOrDefault("X-Amz-Signature")
  valid_402657543 = validateParameter(valid_402657543, JString,
                                      required = false, default = nil)
  if valid_402657543 != nil:
    section.add "X-Amz-Signature", valid_402657543
  var valid_402657544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657544 = validateParameter(valid_402657544, JString,
                                      required = false, default = nil)
  if valid_402657544 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657544
  var valid_402657545 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657545 = validateParameter(valid_402657545, JString,
                                      required = false, default = nil)
  if valid_402657545 != nil:
    section.add "X-Amz-Algorithm", valid_402657545
  var valid_402657546 = header.getOrDefault("X-Amz-Date")
  valid_402657546 = validateParameter(valid_402657546, JString,
                                      required = false, default = nil)
  if valid_402657546 != nil:
    section.add "X-Amz-Date", valid_402657546
  var valid_402657547 = header.getOrDefault("X-Amz-Credential")
  valid_402657547 = validateParameter(valid_402657547, JString,
                                      required = false, default = nil)
  if valid_402657547 != nil:
    section.add "X-Amz-Credential", valid_402657547
  var valid_402657548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657548 = validateParameter(valid_402657548, JString,
                                      required = false, default = nil)
  if valid_402657548 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657548
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657549: Call_DeleteSecurityProfile_402657537;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a Device Defender security profile.
                                                                                         ## 
  let valid = call_402657549.validator(path, query, header, formData, body, _)
  let scheme = call_402657549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657549.makeUrl(scheme.get, call_402657549.host, call_402657549.base,
                                   call_402657549.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657549, uri, valid, _)

proc call*(call_402657550: Call_DeleteSecurityProfile_402657537;
           securityProfileName: string; expectedVersion: int = 0): Recallable =
  ## deleteSecurityProfile
  ## Deletes a Device Defender security profile.
  ##   expectedVersion: int
                                                ##                  : The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.
  ##   
                                                                                                                                                                                                                                                                                                             ## securityProfileName: string (required)
                                                                                                                                                                                                                                                                                                             ##                      
                                                                                                                                                                                                                                                                                                             ## : 
                                                                                                                                                                                                                                                                                                             ## The 
                                                                                                                                                                                                                                                                                                             ## name 
                                                                                                                                                                                                                                                                                                             ## of 
                                                                                                                                                                                                                                                                                                             ## the 
                                                                                                                                                                                                                                                                                                             ## security 
                                                                                                                                                                                                                                                                                                             ## profile 
                                                                                                                                                                                                                                                                                                             ## to 
                                                                                                                                                                                                                                                                                                             ## be 
                                                                                                                                                                                                                                                                                                             ## deleted.
  var path_402657551 = newJObject()
  var query_402657552 = newJObject()
  add(query_402657552, "expectedVersion", newJInt(expectedVersion))
  add(path_402657551, "securityProfileName", newJString(securityProfileName))
  result = call_402657550.call(path_402657551, query_402657552, nil, nil, nil)

var deleteSecurityProfile* = Call_DeleteSecurityProfile_402657537(
    name: "deleteSecurityProfile", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/security-profiles/{securityProfileName}",
    validator: validate_DeleteSecurityProfile_402657538, base: "/",
    makeUrl: url_DeleteSecurityProfile_402657539,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateStream_402657585 = ref object of OpenApiRestCall_402656044
proc url_UpdateStream_402657587(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
                 (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateStream_402657586(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates an existing stream. The stream version will be incremented by one.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
                                 ##           : The stream ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `streamId` field"
  var valid_402657588 = path.getOrDefault("streamId")
  valid_402657588 = validateParameter(valid_402657588, JString, required = true,
                                      default = nil)
  if valid_402657588 != nil:
    section.add "streamId", valid_402657588
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657589 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657589 = validateParameter(valid_402657589, JString,
                                      required = false, default = nil)
  if valid_402657589 != nil:
    section.add "X-Amz-Security-Token", valid_402657589
  var valid_402657590 = header.getOrDefault("X-Amz-Signature")
  valid_402657590 = validateParameter(valid_402657590, JString,
                                      required = false, default = nil)
  if valid_402657590 != nil:
    section.add "X-Amz-Signature", valid_402657590
  var valid_402657591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657591 = validateParameter(valid_402657591, JString,
                                      required = false, default = nil)
  if valid_402657591 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657591
  var valid_402657592 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657592 = validateParameter(valid_402657592, JString,
                                      required = false, default = nil)
  if valid_402657592 != nil:
    section.add "X-Amz-Algorithm", valid_402657592
  var valid_402657593 = header.getOrDefault("X-Amz-Date")
  valid_402657593 = validateParameter(valid_402657593, JString,
                                      required = false, default = nil)
  if valid_402657593 != nil:
    section.add "X-Amz-Date", valid_402657593
  var valid_402657594 = header.getOrDefault("X-Amz-Credential")
  valid_402657594 = validateParameter(valid_402657594, JString,
                                      required = false, default = nil)
  if valid_402657594 != nil:
    section.add "X-Amz-Credential", valid_402657594
  var valid_402657595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657595 = validateParameter(valid_402657595, JString,
                                      required = false, default = nil)
  if valid_402657595 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657595
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657597: Call_UpdateStream_402657585; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates an existing stream. The stream version will be incremented by one.
                                                                                         ## 
  let valid = call_402657597.validator(path, query, header, formData, body, _)
  let scheme = call_402657597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657597.makeUrl(scheme.get, call_402657597.host, call_402657597.base,
                                   call_402657597.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657597, uri, valid, _)

proc call*(call_402657598: Call_UpdateStream_402657585; body: JsonNode;
           streamId: string): Recallable =
  ## updateStream
  ## Updates an existing stream. The stream version will be incremented by one.
  ##   
                                                                               ## body: JObject (required)
  ##   
                                                                                                          ## streamId: string (required)
                                                                                                          ##           
                                                                                                          ## : 
                                                                                                          ## The 
                                                                                                          ## stream 
                                                                                                          ## ID.
  var path_402657599 = newJObject()
  var body_402657600 = newJObject()
  if body != nil:
    body_402657600 = body
  add(path_402657599, "streamId", newJString(streamId))
  result = call_402657598.call(path_402657599, nil, nil, nil, body_402657600)

var updateStream* = Call_UpdateStream_402657585(name: "updateStream",
    meth: HttpMethod.HttpPut, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_UpdateStream_402657586,
    base: "/", makeUrl: url_UpdateStream_402657587,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateStream_402657601 = ref object of OpenApiRestCall_402656044
proc url_CreateStream_402657603(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
                 (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateStream_402657602(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
                                 ##           : The stream ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `streamId` field"
  var valid_402657604 = path.getOrDefault("streamId")
  valid_402657604 = validateParameter(valid_402657604, JString, required = true,
                                      default = nil)
  if valid_402657604 != nil:
    section.add "streamId", valid_402657604
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657605 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657605 = validateParameter(valid_402657605, JString,
                                      required = false, default = nil)
  if valid_402657605 != nil:
    section.add "X-Amz-Security-Token", valid_402657605
  var valid_402657606 = header.getOrDefault("X-Amz-Signature")
  valid_402657606 = validateParameter(valid_402657606, JString,
                                      required = false, default = nil)
  if valid_402657606 != nil:
    section.add "X-Amz-Signature", valid_402657606
  var valid_402657607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657607 = validateParameter(valid_402657607, JString,
                                      required = false, default = nil)
  if valid_402657607 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657607
  var valid_402657608 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657608 = validateParameter(valid_402657608, JString,
                                      required = false, default = nil)
  if valid_402657608 != nil:
    section.add "X-Amz-Algorithm", valid_402657608
  var valid_402657609 = header.getOrDefault("X-Amz-Date")
  valid_402657609 = validateParameter(valid_402657609, JString,
                                      required = false, default = nil)
  if valid_402657609 != nil:
    section.add "X-Amz-Date", valid_402657609
  var valid_402657610 = header.getOrDefault("X-Amz-Credential")
  valid_402657610 = validateParameter(valid_402657610, JString,
                                      required = false, default = nil)
  if valid_402657610 != nil:
    section.add "X-Amz-Credential", valid_402657610
  var valid_402657611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657611 = validateParameter(valid_402657611, JString,
                                      required = false, default = nil)
  if valid_402657611 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657611
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657613: Call_CreateStream_402657601; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.
                                                                                         ## 
  let valid = call_402657613.validator(path, query, header, formData, body, _)
  let scheme = call_402657613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657613.makeUrl(scheme.get, call_402657613.host, call_402657613.base,
                                   call_402657613.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657613, uri, valid, _)

proc call*(call_402657614: Call_CreateStream_402657601; body: JsonNode;
           streamId: string): Recallable =
  ## createStream
  ## Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.
  ##   
                                                                                                                                                                                                                                              ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                         ## streamId: string (required)
                                                                                                                                                                                                                                                                         ##           
                                                                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                                                                         ## stream 
                                                                                                                                                                                                                                                                         ## ID.
  var path_402657615 = newJObject()
  var body_402657616 = newJObject()
  if body != nil:
    body_402657616 = body
  add(path_402657615, "streamId", newJString(streamId))
  result = call_402657614.call(path_402657615, nil, nil, nil, body_402657616)

var createStream* = Call_CreateStream_402657601(name: "createStream",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_CreateStream_402657602,
    base: "/", makeUrl: url_CreateStream_402657603,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeStream_402657571 = ref object of OpenApiRestCall_402656044
proc url_DescribeStream_402657573(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
                 (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeStream_402657572(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a stream.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
                                 ##           : The stream ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `streamId` field"
  var valid_402657574 = path.getOrDefault("streamId")
  valid_402657574 = validateParameter(valid_402657574, JString, required = true,
                                      default = nil)
  if valid_402657574 != nil:
    section.add "streamId", valid_402657574
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657575 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657575 = validateParameter(valid_402657575, JString,
                                      required = false, default = nil)
  if valid_402657575 != nil:
    section.add "X-Amz-Security-Token", valid_402657575
  var valid_402657576 = header.getOrDefault("X-Amz-Signature")
  valid_402657576 = validateParameter(valid_402657576, JString,
                                      required = false, default = nil)
  if valid_402657576 != nil:
    section.add "X-Amz-Signature", valid_402657576
  var valid_402657577 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657577 = validateParameter(valid_402657577, JString,
                                      required = false, default = nil)
  if valid_402657577 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657577
  var valid_402657578 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657578 = validateParameter(valid_402657578, JString,
                                      required = false, default = nil)
  if valid_402657578 != nil:
    section.add "X-Amz-Algorithm", valid_402657578
  var valid_402657579 = header.getOrDefault("X-Amz-Date")
  valid_402657579 = validateParameter(valid_402657579, JString,
                                      required = false, default = nil)
  if valid_402657579 != nil:
    section.add "X-Amz-Date", valid_402657579
  var valid_402657580 = header.getOrDefault("X-Amz-Credential")
  valid_402657580 = validateParameter(valid_402657580, JString,
                                      required = false, default = nil)
  if valid_402657580 != nil:
    section.add "X-Amz-Credential", valid_402657580
  var valid_402657581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657581 = validateParameter(valid_402657581, JString,
                                      required = false, default = nil)
  if valid_402657581 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657581
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657582: Call_DescribeStream_402657571; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a stream.
                                                                                         ## 
  let valid = call_402657582.validator(path, query, header, formData, body, _)
  let scheme = call_402657582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657582.makeUrl(scheme.get, call_402657582.host, call_402657582.base,
                                   call_402657582.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657582, uri, valid, _)

proc call*(call_402657583: Call_DescribeStream_402657571; streamId: string): Recallable =
  ## describeStream
  ## Gets information about a stream.
  ##   streamId: string (required)
                                     ##           : The stream ID.
  var path_402657584 = newJObject()
  add(path_402657584, "streamId", newJString(streamId))
  result = call_402657583.call(path_402657584, nil, nil, nil, nil)

var describeStream* = Call_DescribeStream_402657571(name: "describeStream",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_DescribeStream_402657572,
    base: "/", makeUrl: url_DescribeStream_402657573,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteStream_402657617 = ref object of OpenApiRestCall_402656044
proc url_DeleteStream_402657619(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "streamId" in path, "`streamId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/streams/"),
                 (kind: VariableSegment, value: "streamId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteStream_402657618(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a stream.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   streamId: JString (required)
                                 ##           : The stream ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `streamId` field"
  var valid_402657620 = path.getOrDefault("streamId")
  valid_402657620 = validateParameter(valid_402657620, JString, required = true,
                                      default = nil)
  if valid_402657620 != nil:
    section.add "streamId", valid_402657620
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657621 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657621 = validateParameter(valid_402657621, JString,
                                      required = false, default = nil)
  if valid_402657621 != nil:
    section.add "X-Amz-Security-Token", valid_402657621
  var valid_402657622 = header.getOrDefault("X-Amz-Signature")
  valid_402657622 = validateParameter(valid_402657622, JString,
                                      required = false, default = nil)
  if valid_402657622 != nil:
    section.add "X-Amz-Signature", valid_402657622
  var valid_402657623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657623 = validateParameter(valid_402657623, JString,
                                      required = false, default = nil)
  if valid_402657623 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657623
  var valid_402657624 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657624 = validateParameter(valid_402657624, JString,
                                      required = false, default = nil)
  if valid_402657624 != nil:
    section.add "X-Amz-Algorithm", valid_402657624
  var valid_402657625 = header.getOrDefault("X-Amz-Date")
  valid_402657625 = validateParameter(valid_402657625, JString,
                                      required = false, default = nil)
  if valid_402657625 != nil:
    section.add "X-Amz-Date", valid_402657625
  var valid_402657626 = header.getOrDefault("X-Amz-Credential")
  valid_402657626 = validateParameter(valid_402657626, JString,
                                      required = false, default = nil)
  if valid_402657626 != nil:
    section.add "X-Amz-Credential", valid_402657626
  var valid_402657627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657627 = validateParameter(valid_402657627, JString,
                                      required = false, default = nil)
  if valid_402657627 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657628: Call_DeleteStream_402657617; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a stream.
                                                                                         ## 
  let valid = call_402657628.validator(path, query, header, formData, body, _)
  let scheme = call_402657628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657628.makeUrl(scheme.get, call_402657628.host, call_402657628.base,
                                   call_402657628.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657628, uri, valid, _)

proc call*(call_402657629: Call_DeleteStream_402657617; streamId: string): Recallable =
  ## deleteStream
  ## Deletes a stream.
  ##   streamId: string (required)
                      ##           : The stream ID.
  var path_402657630 = newJObject()
  add(path_402657630, "streamId", newJString(streamId))
  result = call_402657629.call(path_402657630, nil, nil, nil, nil)

var deleteStream* = Call_DeleteStream_402657617(name: "deleteStream",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/streams/{streamId}", validator: validate_DeleteStream_402657618,
    base: "/", makeUrl: url_DeleteStream_402657619,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateThing_402657645 = ref object of OpenApiRestCall_402656044
proc url_CreateThing_402657647(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateThing_402657646(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The name of the thing to create.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402657648 = path.getOrDefault("thingName")
  valid_402657648 = validateParameter(valid_402657648, JString, required = true,
                                      default = nil)
  if valid_402657648 != nil:
    section.add "thingName", valid_402657648
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657649 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657649 = validateParameter(valid_402657649, JString,
                                      required = false, default = nil)
  if valid_402657649 != nil:
    section.add "X-Amz-Security-Token", valid_402657649
  var valid_402657650 = header.getOrDefault("X-Amz-Signature")
  valid_402657650 = validateParameter(valid_402657650, JString,
                                      required = false, default = nil)
  if valid_402657650 != nil:
    section.add "X-Amz-Signature", valid_402657650
  var valid_402657651 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657651 = validateParameter(valid_402657651, JString,
                                      required = false, default = nil)
  if valid_402657651 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657651
  var valid_402657652 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657652 = validateParameter(valid_402657652, JString,
                                      required = false, default = nil)
  if valid_402657652 != nil:
    section.add "X-Amz-Algorithm", valid_402657652
  var valid_402657653 = header.getOrDefault("X-Amz-Date")
  valid_402657653 = validateParameter(valid_402657653, JString,
                                      required = false, default = nil)
  if valid_402657653 != nil:
    section.add "X-Amz-Date", valid_402657653
  var valid_402657654 = header.getOrDefault("X-Amz-Credential")
  valid_402657654 = validateParameter(valid_402657654, JString,
                                      required = false, default = nil)
  if valid_402657654 != nil:
    section.add "X-Amz-Credential", valid_402657654
  var valid_402657655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657655 = validateParameter(valid_402657655, JString,
                                      required = false, default = nil)
  if valid_402657655 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657655
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657657: Call_CreateThing_402657645; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
                                                                                         ## 
  let valid = call_402657657.validator(path, query, header, formData, body, _)
  let scheme = call_402657657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657657.makeUrl(scheme.get, call_402657657.host, call_402657657.base,
                                   call_402657657.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657657, uri, valid, _)

proc call*(call_402657658: Call_CreateThing_402657645; body: JsonNode;
           thingName: string): Recallable =
  ## createThing
  ## <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ##   
body: JObject (required)
  ##   
thingName: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ##            

he 
name 
of 
the 
thing 
to 
create.
  var path_402657659 = newJObject()
  var body_402657660 = newJObject()
  if body != nil:
    body_402657660 = body
  add(path_402657659, "thingName", newJString(thingName))
  result = call_402657658.call(path_402657659, nil, nil, nil, body_402657660)

var createThing* = Call_CreateThing_402657645(name: "createThing",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_CreateThing_402657646,
    base: "/", makeUrl: url_CreateThing_402657647,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThing_402657631 = ref object of OpenApiRestCall_402656044
proc url_DescribeThing_402657633(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThing_402657632(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified thing.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The name of the thing.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402657634 = path.getOrDefault("thingName")
  valid_402657634 = validateParameter(valid_402657634, JString, required = true,
                                      default = nil)
  if valid_402657634 != nil:
    section.add "thingName", valid_402657634
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657635 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657635 = validateParameter(valid_402657635, JString,
                                      required = false, default = nil)
  if valid_402657635 != nil:
    section.add "X-Amz-Security-Token", valid_402657635
  var valid_402657636 = header.getOrDefault("X-Amz-Signature")
  valid_402657636 = validateParameter(valid_402657636, JString,
                                      required = false, default = nil)
  if valid_402657636 != nil:
    section.add "X-Amz-Signature", valid_402657636
  var valid_402657637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657637 = validateParameter(valid_402657637, JString,
                                      required = false, default = nil)
  if valid_402657637 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657637
  var valid_402657638 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657638 = validateParameter(valid_402657638, JString,
                                      required = false, default = nil)
  if valid_402657638 != nil:
    section.add "X-Amz-Algorithm", valid_402657638
  var valid_402657639 = header.getOrDefault("X-Amz-Date")
  valid_402657639 = validateParameter(valid_402657639, JString,
                                      required = false, default = nil)
  if valid_402657639 != nil:
    section.add "X-Amz-Date", valid_402657639
  var valid_402657640 = header.getOrDefault("X-Amz-Credential")
  valid_402657640 = validateParameter(valid_402657640, JString,
                                      required = false, default = nil)
  if valid_402657640 != nil:
    section.add "X-Amz-Credential", valid_402657640
  var valid_402657641 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657641 = validateParameter(valid_402657641, JString,
                                      required = false, default = nil)
  if valid_402657641 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657641
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657642: Call_DescribeThing_402657631; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified thing.
                                                                                         ## 
  let valid = call_402657642.validator(path, query, header, formData, body, _)
  let scheme = call_402657642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657642.makeUrl(scheme.get, call_402657642.host, call_402657642.base,
                                   call_402657642.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657642, uri, valid, _)

proc call*(call_402657643: Call_DescribeThing_402657631; thingName: string): Recallable =
  ## describeThing
  ## Gets information about the specified thing.
  ##   thingName: string (required)
                                                ##            : The name of the thing.
  var path_402657644 = newJObject()
  add(path_402657644, "thingName", newJString(thingName))
  result = call_402657643.call(path_402657644, nil, nil, nil, nil)

var describeThing* = Call_DescribeThing_402657631(name: "describeThing",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_DescribeThing_402657632,
    base: "/", makeUrl: url_DescribeThing_402657633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateThing_402657677 = ref object of OpenApiRestCall_402656044
proc url_UpdateThing_402657679(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateThing_402657678(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the data for a thing.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The name of the thing to update.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402657680 = path.getOrDefault("thingName")
  valid_402657680 = validateParameter(valid_402657680, JString, required = true,
                                      default = nil)
  if valid_402657680 != nil:
    section.add "thingName", valid_402657680
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657681 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657681 = validateParameter(valid_402657681, JString,
                                      required = false, default = nil)
  if valid_402657681 != nil:
    section.add "X-Amz-Security-Token", valid_402657681
  var valid_402657682 = header.getOrDefault("X-Amz-Signature")
  valid_402657682 = validateParameter(valid_402657682, JString,
                                      required = false, default = nil)
  if valid_402657682 != nil:
    section.add "X-Amz-Signature", valid_402657682
  var valid_402657683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657683 = validateParameter(valid_402657683, JString,
                                      required = false, default = nil)
  if valid_402657683 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657683
  var valid_402657684 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657684 = validateParameter(valid_402657684, JString,
                                      required = false, default = nil)
  if valid_402657684 != nil:
    section.add "X-Amz-Algorithm", valid_402657684
  var valid_402657685 = header.getOrDefault("X-Amz-Date")
  valid_402657685 = validateParameter(valid_402657685, JString,
                                      required = false, default = nil)
  if valid_402657685 != nil:
    section.add "X-Amz-Date", valid_402657685
  var valid_402657686 = header.getOrDefault("X-Amz-Credential")
  valid_402657686 = validateParameter(valid_402657686, JString,
                                      required = false, default = nil)
  if valid_402657686 != nil:
    section.add "X-Amz-Credential", valid_402657686
  var valid_402657687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657687 = validateParameter(valid_402657687, JString,
                                      required = false, default = nil)
  if valid_402657687 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657687
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657689: Call_UpdateThing_402657677; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the data for a thing.
                                                                                         ## 
  let valid = call_402657689.validator(path, query, header, formData, body, _)
  let scheme = call_402657689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657689.makeUrl(scheme.get, call_402657689.host, call_402657689.base,
                                   call_402657689.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657689, uri, valid, _)

proc call*(call_402657690: Call_UpdateThing_402657677; body: JsonNode;
           thingName: string): Recallable =
  ## updateThing
  ## Updates the data for a thing.
  ##   body: JObject (required)
  ##   thingName: string (required)
                               ##            : The name of the thing to update.
  var path_402657691 = newJObject()
  var body_402657692 = newJObject()
  if body != nil:
    body_402657692 = body
  add(path_402657691, "thingName", newJString(thingName))
  result = call_402657690.call(path_402657691, nil, nil, nil, body_402657692)

var updateThing* = Call_UpdateThing_402657677(name: "updateThing",
    meth: HttpMethod.HttpPatch, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_UpdateThing_402657678,
    base: "/", makeUrl: url_UpdateThing_402657679,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteThing_402657661 = ref object of OpenApiRestCall_402656044
proc url_DeleteThing_402657663(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteThing_402657662(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The name of the thing to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402657664 = path.getOrDefault("thingName")
  valid_402657664 = validateParameter(valid_402657664, JString, required = true,
                                      default = nil)
  if valid_402657664 != nil:
    section.add "thingName", valid_402657664
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
                                  ##                  : The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>DeleteThing</code> request is rejected with a <code>VersionConflictException</code>.
  section = newJObject()
  var valid_402657665 = query.getOrDefault("expectedVersion")
  valid_402657665 = validateParameter(valid_402657665, JInt, required = false,
                                      default = nil)
  if valid_402657665 != nil:
    section.add "expectedVersion", valid_402657665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657666 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657666 = validateParameter(valid_402657666, JString,
                                      required = false, default = nil)
  if valid_402657666 != nil:
    section.add "X-Amz-Security-Token", valid_402657666
  var valid_402657667 = header.getOrDefault("X-Amz-Signature")
  valid_402657667 = validateParameter(valid_402657667, JString,
                                      required = false, default = nil)
  if valid_402657667 != nil:
    section.add "X-Amz-Signature", valid_402657667
  var valid_402657668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657668 = validateParameter(valid_402657668, JString,
                                      required = false, default = nil)
  if valid_402657668 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657668
  var valid_402657669 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657669 = validateParameter(valid_402657669, JString,
                                      required = false, default = nil)
  if valid_402657669 != nil:
    section.add "X-Amz-Algorithm", valid_402657669
  var valid_402657670 = header.getOrDefault("X-Amz-Date")
  valid_402657670 = validateParameter(valid_402657670, JString,
                                      required = false, default = nil)
  if valid_402657670 != nil:
    section.add "X-Amz-Date", valid_402657670
  var valid_402657671 = header.getOrDefault("X-Amz-Credential")
  valid_402657671 = validateParameter(valid_402657671, JString,
                                      required = false, default = nil)
  if valid_402657671 != nil:
    section.add "X-Amz-Credential", valid_402657671
  var valid_402657672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657672 = validateParameter(valid_402657672, JString,
                                      required = false, default = nil)
  if valid_402657672 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657673: Call_DeleteThing_402657661; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.
                                                                                         ## 
  let valid = call_402657673.validator(path, query, header, formData, body, _)
  let scheme = call_402657673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657673.makeUrl(scheme.get, call_402657673.host, call_402657673.base,
                                   call_402657673.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657673, uri, valid, _)

proc call*(call_402657674: Call_DeleteThing_402657661; thingName: string;
           expectedVersion: int = 0): Recallable =
  ## deleteThing
  ## Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.
  ##   
                                                                                                                                             ## expectedVersion: int
                                                                                                                                             ##                  
                                                                                                                                             ## : 
                                                                                                                                             ## The 
                                                                                                                                             ## expected 
                                                                                                                                             ## version 
                                                                                                                                             ## of 
                                                                                                                                             ## the 
                                                                                                                                             ## thing 
                                                                                                                                             ## record 
                                                                                                                                             ## in 
                                                                                                                                             ## the 
                                                                                                                                             ## registry. 
                                                                                                                                             ## If 
                                                                                                                                             ## the 
                                                                                                                                             ## version 
                                                                                                                                             ## of 
                                                                                                                                             ## the 
                                                                                                                                             ## record 
                                                                                                                                             ## in 
                                                                                                                                             ## the 
                                                                                                                                             ## registry 
                                                                                                                                             ## does 
                                                                                                                                             ## not 
                                                                                                                                             ## match 
                                                                                                                                             ## the 
                                                                                                                                             ## expected 
                                                                                                                                             ## version 
                                                                                                                                             ## specified 
                                                                                                                                             ## in 
                                                                                                                                             ## the 
                                                                                                                                             ## request, 
                                                                                                                                             ## the 
                                                                                                                                             ## <code>DeleteThing</code> 
                                                                                                                                             ## request 
                                                                                                                                             ## is 
                                                                                                                                             ## rejected 
                                                                                                                                             ## with 
                                                                                                                                             ## a 
                                                                                                                                             ## <code>VersionConflictException</code>.
  ##   
                                                                                                                                                                                      ## thingName: string (required)
                                                                                                                                                                                      ##            
                                                                                                                                                                                      ## : 
                                                                                                                                                                                      ## The 
                                                                                                                                                                                      ## name 
                                                                                                                                                                                      ## of 
                                                                                                                                                                                      ## the 
                                                                                                                                                                                      ## thing 
                                                                                                                                                                                      ## to 
                                                                                                                                                                                      ## delete.
  var path_402657675 = newJObject()
  var query_402657676 = newJObject()
  add(query_402657676, "expectedVersion", newJInt(expectedVersion))
  add(path_402657675, "thingName", newJString(thingName))
  result = call_402657674.call(path_402657675, query_402657676, nil, nil, nil)

var deleteThing* = Call_DeleteThing_402657661(name: "deleteThing",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/things/{thingName}", validator: validate_DeleteThing_402657662,
    base: "/", makeUrl: url_DeleteThing_402657663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateThingGroup_402657707 = ref object of OpenApiRestCall_402656044
proc url_CreateThingGroup_402657709(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateThingGroup_402657708(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The thing group name to create.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402657710 = path.getOrDefault("thingGroupName")
  valid_402657710 = validateParameter(valid_402657710, JString, required = true,
                                      default = nil)
  if valid_402657710 != nil:
    section.add "thingGroupName", valid_402657710
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657711 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657711 = validateParameter(valid_402657711, JString,
                                      required = false, default = nil)
  if valid_402657711 != nil:
    section.add "X-Amz-Security-Token", valid_402657711
  var valid_402657712 = header.getOrDefault("X-Amz-Signature")
  valid_402657712 = validateParameter(valid_402657712, JString,
                                      required = false, default = nil)
  if valid_402657712 != nil:
    section.add "X-Amz-Signature", valid_402657712
  var valid_402657713 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657713 = validateParameter(valid_402657713, JString,
                                      required = false, default = nil)
  if valid_402657713 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657713
  var valid_402657714 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657714 = validateParameter(valid_402657714, JString,
                                      required = false, default = nil)
  if valid_402657714 != nil:
    section.add "X-Amz-Algorithm", valid_402657714
  var valid_402657715 = header.getOrDefault("X-Amz-Date")
  valid_402657715 = validateParameter(valid_402657715, JString,
                                      required = false, default = nil)
  if valid_402657715 != nil:
    section.add "X-Amz-Date", valid_402657715
  var valid_402657716 = header.getOrDefault("X-Amz-Credential")
  valid_402657716 = validateParameter(valid_402657716, JString,
                                      required = false, default = nil)
  if valid_402657716 != nil:
    section.add "X-Amz-Credential", valid_402657716
  var valid_402657717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657717 = validateParameter(valid_402657717, JString,
                                      required = false, default = nil)
  if valid_402657717 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657717
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657719: Call_CreateThingGroup_402657707;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
                                                                                         ## 
  let valid = call_402657719.validator(path, query, header, formData, body, _)
  let scheme = call_402657719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657719.makeUrl(scheme.get, call_402657719.host, call_402657719.base,
                                   call_402657719.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657719, uri, valid, _)

proc call*(call_402657720: Call_CreateThingGroup_402657707;
           thingGroupName: string; body: JsonNode): Recallable =
  ## createThingGroup
  ## <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
  ##   
                                                                                                                                                                                                                                                            ## thingGroupName: string (required)
                                                                                                                                                                                                                                                            ##                 
                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                            ## thing 
                                                                                                                                                                                                                                                            ## group 
                                                                                                                                                                                                                                                            ## name 
                                                                                                                                                                                                                                                            ## to 
                                                                                                                                                                                                                                                            ## create.
  ##   
                                                                                                                                                                                                                                                                      ## body: JObject (required)
  var path_402657721 = newJObject()
  var body_402657722 = newJObject()
  add(path_402657721, "thingGroupName", newJString(thingGroupName))
  if body != nil:
    body_402657722 = body
  result = call_402657720.call(path_402657721, nil, nil, nil, body_402657722)

var createThingGroup* = Call_CreateThingGroup_402657707(
    name: "createThingGroup", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/thing-groups/{thingGroupName}",
    validator: validate_CreateThingGroup_402657708, base: "/",
    makeUrl: url_CreateThingGroup_402657709,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThingGroup_402657693 = ref object of OpenApiRestCall_402656044
proc url_DescribeThingGroup_402657695(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThingGroup_402657694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describe a thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The name of the thing group.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402657696 = path.getOrDefault("thingGroupName")
  valid_402657696 = validateParameter(valid_402657696, JString, required = true,
                                      default = nil)
  if valid_402657696 != nil:
    section.add "thingGroupName", valid_402657696
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657697 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657697 = validateParameter(valid_402657697, JString,
                                      required = false, default = nil)
  if valid_402657697 != nil:
    section.add "X-Amz-Security-Token", valid_402657697
  var valid_402657698 = header.getOrDefault("X-Amz-Signature")
  valid_402657698 = validateParameter(valid_402657698, JString,
                                      required = false, default = nil)
  if valid_402657698 != nil:
    section.add "X-Amz-Signature", valid_402657698
  var valid_402657699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657699 = validateParameter(valid_402657699, JString,
                                      required = false, default = nil)
  if valid_402657699 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657699
  var valid_402657700 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657700 = validateParameter(valid_402657700, JString,
                                      required = false, default = nil)
  if valid_402657700 != nil:
    section.add "X-Amz-Algorithm", valid_402657700
  var valid_402657701 = header.getOrDefault("X-Amz-Date")
  valid_402657701 = validateParameter(valid_402657701, JString,
                                      required = false, default = nil)
  if valid_402657701 != nil:
    section.add "X-Amz-Date", valid_402657701
  var valid_402657702 = header.getOrDefault("X-Amz-Credential")
  valid_402657702 = validateParameter(valid_402657702, JString,
                                      required = false, default = nil)
  if valid_402657702 != nil:
    section.add "X-Amz-Credential", valid_402657702
  var valid_402657703 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657703 = validateParameter(valid_402657703, JString,
                                      required = false, default = nil)
  if valid_402657703 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657703
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657704: Call_DescribeThingGroup_402657693;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describe a thing group.
                                                                                         ## 
  let valid = call_402657704.validator(path, query, header, formData, body, _)
  let scheme = call_402657704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657704.makeUrl(scheme.get, call_402657704.host, call_402657704.base,
                                   call_402657704.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657704, uri, valid, _)

proc call*(call_402657705: Call_DescribeThingGroup_402657693;
           thingGroupName: string): Recallable =
  ## describeThingGroup
  ## Describe a thing group.
  ##   thingGroupName: string (required)
                            ##                 : The name of the thing group.
  var path_402657706 = newJObject()
  add(path_402657706, "thingGroupName", newJString(thingGroupName))
  result = call_402657705.call(path_402657706, nil, nil, nil, nil)

var describeThingGroup* = Call_DescribeThingGroup_402657693(
    name: "describeThingGroup", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-groups/{thingGroupName}",
    validator: validate_DescribeThingGroup_402657694, base: "/",
    makeUrl: url_DescribeThingGroup_402657695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateThingGroup_402657739 = ref object of OpenApiRestCall_402656044
proc url_UpdateThingGroup_402657741(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateThingGroup_402657740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Update a thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The thing group to update.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402657742 = path.getOrDefault("thingGroupName")
  valid_402657742 = validateParameter(valid_402657742, JString, required = true,
                                      default = nil)
  if valid_402657742 != nil:
    section.add "thingGroupName", valid_402657742
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657743 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657743 = validateParameter(valid_402657743, JString,
                                      required = false, default = nil)
  if valid_402657743 != nil:
    section.add "X-Amz-Security-Token", valid_402657743
  var valid_402657744 = header.getOrDefault("X-Amz-Signature")
  valid_402657744 = validateParameter(valid_402657744, JString,
                                      required = false, default = nil)
  if valid_402657744 != nil:
    section.add "X-Amz-Signature", valid_402657744
  var valid_402657745 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657745 = validateParameter(valid_402657745, JString,
                                      required = false, default = nil)
  if valid_402657745 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657745
  var valid_402657746 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657746 = validateParameter(valid_402657746, JString,
                                      required = false, default = nil)
  if valid_402657746 != nil:
    section.add "X-Amz-Algorithm", valid_402657746
  var valid_402657747 = header.getOrDefault("X-Amz-Date")
  valid_402657747 = validateParameter(valid_402657747, JString,
                                      required = false, default = nil)
  if valid_402657747 != nil:
    section.add "X-Amz-Date", valid_402657747
  var valid_402657748 = header.getOrDefault("X-Amz-Credential")
  valid_402657748 = validateParameter(valid_402657748, JString,
                                      required = false, default = nil)
  if valid_402657748 != nil:
    section.add "X-Amz-Credential", valid_402657748
  var valid_402657749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657749 = validateParameter(valid_402657749, JString,
                                      required = false, default = nil)
  if valid_402657749 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657749
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657751: Call_UpdateThingGroup_402657739;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Update a thing group.
                                                                                         ## 
  let valid = call_402657751.validator(path, query, header, formData, body, _)
  let scheme = call_402657751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657751.makeUrl(scheme.get, call_402657751.host, call_402657751.base,
                                   call_402657751.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657751, uri, valid, _)

proc call*(call_402657752: Call_UpdateThingGroup_402657739;
           thingGroupName: string; body: JsonNode): Recallable =
  ## updateThingGroup
  ## Update a thing group.
  ##   thingGroupName: string (required)
                          ##                 : The thing group to update.
  ##   body: JObject 
                                                                         ## (required)
  var path_402657753 = newJObject()
  var body_402657754 = newJObject()
  add(path_402657753, "thingGroupName", newJString(thingGroupName))
  if body != nil:
    body_402657754 = body
  result = call_402657752.call(path_402657753, nil, nil, nil, body_402657754)

var updateThingGroup* = Call_UpdateThingGroup_402657739(
    name: "updateThingGroup", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/thing-groups/{thingGroupName}",
    validator: validate_UpdateThingGroup_402657740, base: "/",
    makeUrl: url_UpdateThingGroup_402657741,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteThingGroup_402657723 = ref object of OpenApiRestCall_402656044
proc url_DeleteThingGroup_402657725(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteThingGroup_402657724(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The name of the thing group to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402657726 = path.getOrDefault("thingGroupName")
  valid_402657726 = validateParameter(valid_402657726, JString, required = true,
                                      default = nil)
  if valid_402657726 != nil:
    section.add "thingGroupName", valid_402657726
  result.add "path", section
  ## parameters in `query` object:
  ##   expectedVersion: JInt
                                  ##                  : The expected version of the thing group to delete.
  section = newJObject()
  var valid_402657727 = query.getOrDefault("expectedVersion")
  valid_402657727 = validateParameter(valid_402657727, JInt, required = false,
                                      default = nil)
  if valid_402657727 != nil:
    section.add "expectedVersion", valid_402657727
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657728 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657728 = validateParameter(valid_402657728, JString,
                                      required = false, default = nil)
  if valid_402657728 != nil:
    section.add "X-Amz-Security-Token", valid_402657728
  var valid_402657729 = header.getOrDefault("X-Amz-Signature")
  valid_402657729 = validateParameter(valid_402657729, JString,
                                      required = false, default = nil)
  if valid_402657729 != nil:
    section.add "X-Amz-Signature", valid_402657729
  var valid_402657730 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657730 = validateParameter(valid_402657730, JString,
                                      required = false, default = nil)
  if valid_402657730 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657730
  var valid_402657731 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657731 = validateParameter(valid_402657731, JString,
                                      required = false, default = nil)
  if valid_402657731 != nil:
    section.add "X-Amz-Algorithm", valid_402657731
  var valid_402657732 = header.getOrDefault("X-Amz-Date")
  valid_402657732 = validateParameter(valid_402657732, JString,
                                      required = false, default = nil)
  if valid_402657732 != nil:
    section.add "X-Amz-Date", valid_402657732
  var valid_402657733 = header.getOrDefault("X-Amz-Credential")
  valid_402657733 = validateParameter(valid_402657733, JString,
                                      required = false, default = nil)
  if valid_402657733 != nil:
    section.add "X-Amz-Credential", valid_402657733
  var valid_402657734 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657734 = validateParameter(valid_402657734, JString,
                                      required = false, default = nil)
  if valid_402657734 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657734
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657735: Call_DeleteThingGroup_402657723;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a thing group.
                                                                                         ## 
  let valid = call_402657735.validator(path, query, header, formData, body, _)
  let scheme = call_402657735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657735.makeUrl(scheme.get, call_402657735.host, call_402657735.base,
                                   call_402657735.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657735, uri, valid, _)

proc call*(call_402657736: Call_DeleteThingGroup_402657723;
           thingGroupName: string; expectedVersion: int = 0): Recallable =
  ## deleteThingGroup
  ## Deletes a thing group.
  ##   thingGroupName: string (required)
                           ##                 : The name of the thing group to delete.
  ##   
                                                                                      ## expectedVersion: int
                                                                                      ##                  
                                                                                      ## : 
                                                                                      ## The 
                                                                                      ## expected 
                                                                                      ## version 
                                                                                      ## of 
                                                                                      ## the 
                                                                                      ## thing 
                                                                                      ## group 
                                                                                      ## to 
                                                                                      ## delete.
  var path_402657737 = newJObject()
  var query_402657738 = newJObject()
  add(path_402657737, "thingGroupName", newJString(thingGroupName))
  add(query_402657738, "expectedVersion", newJInt(expectedVersion))
  result = call_402657736.call(path_402657737, query_402657738, nil, nil, nil)

var deleteThingGroup* = Call_DeleteThingGroup_402657723(
    name: "deleteThingGroup", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/thing-groups/{thingGroupName}",
    validator: validate_DeleteThingGroup_402657724, base: "/",
    makeUrl: url_DeleteThingGroup_402657725,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateThingType_402657769 = ref object of OpenApiRestCall_402656044
proc url_CreateThingType_402657771(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
                 (kind: VariableSegment, value: "thingTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateThingType_402657770(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new thing type.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
                                 ##                : The name of the thing type.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingTypeName` field"
  var valid_402657772 = path.getOrDefault("thingTypeName")
  valid_402657772 = validateParameter(valid_402657772, JString, required = true,
                                      default = nil)
  if valid_402657772 != nil:
    section.add "thingTypeName", valid_402657772
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657773 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657773 = validateParameter(valid_402657773, JString,
                                      required = false, default = nil)
  if valid_402657773 != nil:
    section.add "X-Amz-Security-Token", valid_402657773
  var valid_402657774 = header.getOrDefault("X-Amz-Signature")
  valid_402657774 = validateParameter(valid_402657774, JString,
                                      required = false, default = nil)
  if valid_402657774 != nil:
    section.add "X-Amz-Signature", valid_402657774
  var valid_402657775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657775 = validateParameter(valid_402657775, JString,
                                      required = false, default = nil)
  if valid_402657775 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657775
  var valid_402657776 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657776 = validateParameter(valid_402657776, JString,
                                      required = false, default = nil)
  if valid_402657776 != nil:
    section.add "X-Amz-Algorithm", valid_402657776
  var valid_402657777 = header.getOrDefault("X-Amz-Date")
  valid_402657777 = validateParameter(valid_402657777, JString,
                                      required = false, default = nil)
  if valid_402657777 != nil:
    section.add "X-Amz-Date", valid_402657777
  var valid_402657778 = header.getOrDefault("X-Amz-Credential")
  valid_402657778 = validateParameter(valid_402657778, JString,
                                      required = false, default = nil)
  if valid_402657778 != nil:
    section.add "X-Amz-Credential", valid_402657778
  var valid_402657779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657779 = validateParameter(valid_402657779, JString,
                                      required = false, default = nil)
  if valid_402657779 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657781: Call_CreateThingType_402657769; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new thing type.
                                                                                         ## 
  let valid = call_402657781.validator(path, query, header, formData, body, _)
  let scheme = call_402657781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657781.makeUrl(scheme.get, call_402657781.host, call_402657781.base,
                                   call_402657781.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657781, uri, valid, _)

proc call*(call_402657782: Call_CreateThingType_402657769;
           thingTypeName: string; body: JsonNode): Recallable =
  ## createThingType
  ## Creates a new thing type.
  ##   thingTypeName: string (required)
                              ##                : The name of the thing type.
  ##   
                                                                             ## body: JObject (required)
  var path_402657783 = newJObject()
  var body_402657784 = newJObject()
  add(path_402657783, "thingTypeName", newJString(thingTypeName))
  if body != nil:
    body_402657784 = body
  result = call_402657782.call(path_402657783, nil, nil, nil, body_402657784)

var createThingType* = Call_CreateThingType_402657769(name: "createThingType",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/thing-types/{thingTypeName}", validator: validate_CreateThingType_402657770,
    base: "/", makeUrl: url_CreateThingType_402657771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThingType_402657755 = ref object of OpenApiRestCall_402656044
proc url_DescribeThingType_402657757(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
                 (kind: VariableSegment, value: "thingTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThingType_402657756(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified thing type.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
                                 ##                : The name of the thing type.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingTypeName` field"
  var valid_402657758 = path.getOrDefault("thingTypeName")
  valid_402657758 = validateParameter(valid_402657758, JString, required = true,
                                      default = nil)
  if valid_402657758 != nil:
    section.add "thingTypeName", valid_402657758
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657759 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657759 = validateParameter(valid_402657759, JString,
                                      required = false, default = nil)
  if valid_402657759 != nil:
    section.add "X-Amz-Security-Token", valid_402657759
  var valid_402657760 = header.getOrDefault("X-Amz-Signature")
  valid_402657760 = validateParameter(valid_402657760, JString,
                                      required = false, default = nil)
  if valid_402657760 != nil:
    section.add "X-Amz-Signature", valid_402657760
  var valid_402657761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657761 = validateParameter(valid_402657761, JString,
                                      required = false, default = nil)
  if valid_402657761 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657761
  var valid_402657762 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657762 = validateParameter(valid_402657762, JString,
                                      required = false, default = nil)
  if valid_402657762 != nil:
    section.add "X-Amz-Algorithm", valid_402657762
  var valid_402657763 = header.getOrDefault("X-Amz-Date")
  valid_402657763 = validateParameter(valid_402657763, JString,
                                      required = false, default = nil)
  if valid_402657763 != nil:
    section.add "X-Amz-Date", valid_402657763
  var valid_402657764 = header.getOrDefault("X-Amz-Credential")
  valid_402657764 = validateParameter(valid_402657764, JString,
                                      required = false, default = nil)
  if valid_402657764 != nil:
    section.add "X-Amz-Credential", valid_402657764
  var valid_402657765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657765 = validateParameter(valid_402657765, JString,
                                      required = false, default = nil)
  if valid_402657765 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657766: Call_DescribeThingType_402657755;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified thing type.
                                                                                         ## 
  let valid = call_402657766.validator(path, query, header, formData, body, _)
  let scheme = call_402657766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657766.makeUrl(scheme.get, call_402657766.host, call_402657766.base,
                                   call_402657766.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657766, uri, valid, _)

proc call*(call_402657767: Call_DescribeThingType_402657755;
           thingTypeName: string): Recallable =
  ## describeThingType
  ## Gets information about the specified thing type.
  ##   thingTypeName: string (required)
                                                     ##                : The name of the thing type.
  var path_402657768 = newJObject()
  add(path_402657768, "thingTypeName", newJString(thingTypeName))
  result = call_402657767.call(path_402657768, nil, nil, nil, nil)

var describeThingType* = Call_DescribeThingType_402657755(
    name: "describeThingType", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-types/{thingTypeName}",
    validator: validate_DescribeThingType_402657756, base: "/",
    makeUrl: url_DescribeThingType_402657757,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteThingType_402657785 = ref object of OpenApiRestCall_402656044
proc url_DeleteThingType_402657787(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
                 (kind: VariableSegment, value: "thingTypeName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteThingType_402657786(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
                                 ##                : The name of the thing type.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingTypeName` field"
  var valid_402657788 = path.getOrDefault("thingTypeName")
  valid_402657788 = validateParameter(valid_402657788, JString, required = true,
                                      default = nil)
  if valid_402657788 != nil:
    section.add "thingTypeName", valid_402657788
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657789 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657789 = validateParameter(valid_402657789, JString,
                                      required = false, default = nil)
  if valid_402657789 != nil:
    section.add "X-Amz-Security-Token", valid_402657789
  var valid_402657790 = header.getOrDefault("X-Amz-Signature")
  valid_402657790 = validateParameter(valid_402657790, JString,
                                      required = false, default = nil)
  if valid_402657790 != nil:
    section.add "X-Amz-Signature", valid_402657790
  var valid_402657791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657791 = validateParameter(valid_402657791, JString,
                                      required = false, default = nil)
  if valid_402657791 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657791
  var valid_402657792 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657792 = validateParameter(valid_402657792, JString,
                                      required = false, default = nil)
  if valid_402657792 != nil:
    section.add "X-Amz-Algorithm", valid_402657792
  var valid_402657793 = header.getOrDefault("X-Amz-Date")
  valid_402657793 = validateParameter(valid_402657793, JString,
                                      required = false, default = nil)
  if valid_402657793 != nil:
    section.add "X-Amz-Date", valid_402657793
  var valid_402657794 = header.getOrDefault("X-Amz-Credential")
  valid_402657794 = validateParameter(valid_402657794, JString,
                                      required = false, default = nil)
  if valid_402657794 != nil:
    section.add "X-Amz-Credential", valid_402657794
  var valid_402657795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657795 = validateParameter(valid_402657795, JString,
                                      required = false, default = nil)
  if valid_402657795 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657795
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657796: Call_DeleteThingType_402657785; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.
                                                                                         ## 
  let valid = call_402657796.validator(path, query, header, formData, body, _)
  let scheme = call_402657796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657796.makeUrl(scheme.get, call_402657796.host, call_402657796.base,
                                   call_402657796.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657796, uri, valid, _)

proc call*(call_402657797: Call_DeleteThingType_402657785; thingTypeName: string): Recallable =
  ## deleteThingType
  ## Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                       ## thingTypeName: string (required)
                                                                                                                                                                                                                                                                                                                                                                                       ##                
                                                                                                                                                                                                                                                                                                                                                                                       ## : 
                                                                                                                                                                                                                                                                                                                                                                                       ## The 
                                                                                                                                                                                                                                                                                                                                                                                       ## name 
                                                                                                                                                                                                                                                                                                                                                                                       ## of 
                                                                                                                                                                                                                                                                                                                                                                                       ## the 
                                                                                                                                                                                                                                                                                                                                                                                       ## thing 
                                                                                                                                                                                                                                                                                                                                                                                       ## type.
  var path_402657798 = newJObject()
  add(path_402657798, "thingTypeName", newJString(thingTypeName))
  result = call_402657797.call(path_402657798, nil, nil, nil, nil)

var deleteThingType* = Call_DeleteThingType_402657785(name: "deleteThingType",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/thing-types/{thingTypeName}", validator: validate_DeleteThingType_402657786,
    base: "/", makeUrl: url_DeleteThingType_402657787,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateTopicRule_402657813 = ref object of OpenApiRestCall_402656044
proc url_CreateTopicRule_402657815(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
                 (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateTopicRule_402657814(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
                                 ##           : The name of the rule.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `ruleName` field"
  var valid_402657816 = path.getOrDefault("ruleName")
  valid_402657816 = validateParameter(valid_402657816, JString, required = true,
                                      default = nil)
  if valid_402657816 != nil:
    section.add "ruleName", valid_402657816
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amz-tagging: JString
                                   ##                : <p>Metadata which can be used to manage the topic rule.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: --tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
  section = newJObject()
  var valid_402657817 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657817 = validateParameter(valid_402657817, JString,
                                      required = false, default = nil)
  if valid_402657817 != nil:
    section.add "X-Amz-Security-Token", valid_402657817
  var valid_402657818 = header.getOrDefault("X-Amz-Signature")
  valid_402657818 = validateParameter(valid_402657818, JString,
                                      required = false, default = nil)
  if valid_402657818 != nil:
    section.add "X-Amz-Signature", valid_402657818
  var valid_402657819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657819 = validateParameter(valid_402657819, JString,
                                      required = false, default = nil)
  if valid_402657819 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657819
  var valid_402657820 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657820 = validateParameter(valid_402657820, JString,
                                      required = false, default = nil)
  if valid_402657820 != nil:
    section.add "X-Amz-Algorithm", valid_402657820
  var valid_402657821 = header.getOrDefault("X-Amz-Date")
  valid_402657821 = validateParameter(valid_402657821, JString,
                                      required = false, default = nil)
  if valid_402657821 != nil:
    section.add "X-Amz-Date", valid_402657821
  var valid_402657822 = header.getOrDefault("X-Amz-Credential")
  valid_402657822 = validateParameter(valid_402657822, JString,
                                      required = false, default = nil)
  if valid_402657822 != nil:
    section.add "X-Amz-Credential", valid_402657822
  var valid_402657823 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657823 = validateParameter(valid_402657823, JString,
                                      required = false, default = nil)
  if valid_402657823 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657823
  var valid_402657824 = header.getOrDefault("x-amz-tagging")
  valid_402657824 = validateParameter(valid_402657824, JString,
                                      required = false, default = nil)
  if valid_402657824 != nil:
    section.add "x-amz-tagging", valid_402657824
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657826: Call_CreateTopicRule_402657813; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
                                                                                         ## 
  let valid = call_402657826.validator(path, query, header, formData, body, _)
  let scheme = call_402657826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657826.makeUrl(scheme.get, call_402657826.host, call_402657826.base,
                                   call_402657826.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657826, uri, valid, _)

proc call*(call_402657827: Call_CreateTopicRule_402657813; body: JsonNode;
           ruleName: string): Recallable =
  ## createTopicRule
  ## Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ##   
                                                                                                                                                                    ## body: JObject (required)
  ##   
                                                                                                                                                                                               ## ruleName: string (required)
                                                                                                                                                                                               ##           
                                                                                                                                                                                               ## : 
                                                                                                                                                                                               ## The 
                                                                                                                                                                                               ## name 
                                                                                                                                                                                               ## of 
                                                                                                                                                                                               ## the 
                                                                                                                                                                                               ## rule.
  var path_402657828 = newJObject()
  var body_402657829 = newJObject()
  if body != nil:
    body_402657829 = body
  add(path_402657828, "ruleName", newJString(ruleName))
  result = call_402657827.call(path_402657828, nil, nil, nil, body_402657829)

var createTopicRule* = Call_CreateTopicRule_402657813(name: "createTopicRule",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}", validator: validate_CreateTopicRule_402657814,
    base: "/", makeUrl: url_CreateTopicRule_402657815,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTopicRule_402657799 = ref object of OpenApiRestCall_402656044
proc url_GetTopicRule_402657801(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
                 (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetTopicRule_402657800(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the rule.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
                                 ##           : The name of the rule.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `ruleName` field"
  var valid_402657802 = path.getOrDefault("ruleName")
  valid_402657802 = validateParameter(valid_402657802, JString, required = true,
                                      default = nil)
  if valid_402657802 != nil:
    section.add "ruleName", valid_402657802
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657803 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657803 = validateParameter(valid_402657803, JString,
                                      required = false, default = nil)
  if valid_402657803 != nil:
    section.add "X-Amz-Security-Token", valid_402657803
  var valid_402657804 = header.getOrDefault("X-Amz-Signature")
  valid_402657804 = validateParameter(valid_402657804, JString,
                                      required = false, default = nil)
  if valid_402657804 != nil:
    section.add "X-Amz-Signature", valid_402657804
  var valid_402657805 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657805 = validateParameter(valid_402657805, JString,
                                      required = false, default = nil)
  if valid_402657805 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657805
  var valid_402657806 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657806 = validateParameter(valid_402657806, JString,
                                      required = false, default = nil)
  if valid_402657806 != nil:
    section.add "X-Amz-Algorithm", valid_402657806
  var valid_402657807 = header.getOrDefault("X-Amz-Date")
  valid_402657807 = validateParameter(valid_402657807, JString,
                                      required = false, default = nil)
  if valid_402657807 != nil:
    section.add "X-Amz-Date", valid_402657807
  var valid_402657808 = header.getOrDefault("X-Amz-Credential")
  valid_402657808 = validateParameter(valid_402657808, JString,
                                      required = false, default = nil)
  if valid_402657808 != nil:
    section.add "X-Amz-Credential", valid_402657808
  var valid_402657809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657809 = validateParameter(valid_402657809, JString,
                                      required = false, default = nil)
  if valid_402657809 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657809
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657810: Call_GetTopicRule_402657799; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the rule.
                                                                                         ## 
  let valid = call_402657810.validator(path, query, header, formData, body, _)
  let scheme = call_402657810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657810.makeUrl(scheme.get, call_402657810.host, call_402657810.base,
                                   call_402657810.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657810, uri, valid, _)

proc call*(call_402657811: Call_GetTopicRule_402657799; ruleName: string): Recallable =
  ## getTopicRule
  ## Gets information about the rule.
  ##   ruleName: string (required)
                                     ##           : The name of the rule.
  var path_402657812 = newJObject()
  add(path_402657812, "ruleName", newJString(ruleName))
  result = call_402657811.call(path_402657812, nil, nil, nil, nil)

var getTopicRule* = Call_GetTopicRule_402657799(name: "getTopicRule",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}", validator: validate_GetTopicRule_402657800,
    base: "/", makeUrl: url_GetTopicRule_402657801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ReplaceTopicRule_402657844 = ref object of OpenApiRestCall_402656044
proc url_ReplaceTopicRule_402657846(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
                 (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ReplaceTopicRule_402657845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
                                 ##           : The name of the rule.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `ruleName` field"
  var valid_402657847 = path.getOrDefault("ruleName")
  valid_402657847 = validateParameter(valid_402657847, JString, required = true,
                                      default = nil)
  if valid_402657847 != nil:
    section.add "ruleName", valid_402657847
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657848 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657848 = validateParameter(valid_402657848, JString,
                                      required = false, default = nil)
  if valid_402657848 != nil:
    section.add "X-Amz-Security-Token", valid_402657848
  var valid_402657849 = header.getOrDefault("X-Amz-Signature")
  valid_402657849 = validateParameter(valid_402657849, JString,
                                      required = false, default = nil)
  if valid_402657849 != nil:
    section.add "X-Amz-Signature", valid_402657849
  var valid_402657850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657850 = validateParameter(valid_402657850, JString,
                                      required = false, default = nil)
  if valid_402657850 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657850
  var valid_402657851 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657851 = validateParameter(valid_402657851, JString,
                                      required = false, default = nil)
  if valid_402657851 != nil:
    section.add "X-Amz-Algorithm", valid_402657851
  var valid_402657852 = header.getOrDefault("X-Amz-Date")
  valid_402657852 = validateParameter(valid_402657852, JString,
                                      required = false, default = nil)
  if valid_402657852 != nil:
    section.add "X-Amz-Date", valid_402657852
  var valid_402657853 = header.getOrDefault("X-Amz-Credential")
  valid_402657853 = validateParameter(valid_402657853, JString,
                                      required = false, default = nil)
  if valid_402657853 != nil:
    section.add "X-Amz-Credential", valid_402657853
  var valid_402657854 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657854 = validateParameter(valid_402657854, JString,
                                      required = false, default = nil)
  if valid_402657854 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657854
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657856: Call_ReplaceTopicRule_402657844;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
                                                                                         ## 
  let valid = call_402657856.validator(path, query, header, formData, body, _)
  let scheme = call_402657856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657856.makeUrl(scheme.get, call_402657856.host, call_402657856.base,
                                   call_402657856.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657856, uri, valid, _)

proc call*(call_402657857: Call_ReplaceTopicRule_402657844; body: JsonNode;
           ruleName: string): Recallable =
  ## replaceTopicRule
  ## Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
  ##   
                                                                                                                                                                                                                         ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                    ## ruleName: string (required)
                                                                                                                                                                                                                                                    ##           
                                                                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                                                                    ## name 
                                                                                                                                                                                                                                                    ## of 
                                                                                                                                                                                                                                                    ## the 
                                                                                                                                                                                                                                                    ## rule.
  var path_402657858 = newJObject()
  var body_402657859 = newJObject()
  if body != nil:
    body_402657859 = body
  add(path_402657858, "ruleName", newJString(ruleName))
  result = call_402657857.call(path_402657858, nil, nil, nil, body_402657859)

var replaceTopicRule* = Call_ReplaceTopicRule_402657844(
    name: "replaceTopicRule", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/rules/{ruleName}",
    validator: validate_ReplaceTopicRule_402657845, base: "/",
    makeUrl: url_ReplaceTopicRule_402657846,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteTopicRule_402657830 = ref object of OpenApiRestCall_402656044
proc url_DeleteTopicRule_402657832(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
                 (kind: VariableSegment, value: "ruleName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteTopicRule_402657831(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the rule.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
                                 ##           : The name of the rule.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `ruleName` field"
  var valid_402657833 = path.getOrDefault("ruleName")
  valid_402657833 = validateParameter(valid_402657833, JString, required = true,
                                      default = nil)
  if valid_402657833 != nil:
    section.add "ruleName", valid_402657833
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657834 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657834 = validateParameter(valid_402657834, JString,
                                      required = false, default = nil)
  if valid_402657834 != nil:
    section.add "X-Amz-Security-Token", valid_402657834
  var valid_402657835 = header.getOrDefault("X-Amz-Signature")
  valid_402657835 = validateParameter(valid_402657835, JString,
                                      required = false, default = nil)
  if valid_402657835 != nil:
    section.add "X-Amz-Signature", valid_402657835
  var valid_402657836 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657836 = validateParameter(valid_402657836, JString,
                                      required = false, default = nil)
  if valid_402657836 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657836
  var valid_402657837 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657837 = validateParameter(valid_402657837, JString,
                                      required = false, default = nil)
  if valid_402657837 != nil:
    section.add "X-Amz-Algorithm", valid_402657837
  var valid_402657838 = header.getOrDefault("X-Amz-Date")
  valid_402657838 = validateParameter(valid_402657838, JString,
                                      required = false, default = nil)
  if valid_402657838 != nil:
    section.add "X-Amz-Date", valid_402657838
  var valid_402657839 = header.getOrDefault("X-Amz-Credential")
  valid_402657839 = validateParameter(valid_402657839, JString,
                                      required = false, default = nil)
  if valid_402657839 != nil:
    section.add "X-Amz-Credential", valid_402657839
  var valid_402657840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657840 = validateParameter(valid_402657840, JString,
                                      required = false, default = nil)
  if valid_402657840 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657841: Call_DeleteTopicRule_402657830; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the rule.
                                                                                         ## 
  let valid = call_402657841.validator(path, query, header, formData, body, _)
  let scheme = call_402657841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657841.makeUrl(scheme.get, call_402657841.host, call_402657841.base,
                                   call_402657841.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657841, uri, valid, _)

proc call*(call_402657842: Call_DeleteTopicRule_402657830; ruleName: string): Recallable =
  ## deleteTopicRule
  ## Deletes the rule.
  ##   ruleName: string (required)
                      ##           : The name of the rule.
  var path_402657843 = newJObject()
  add(path_402657843, "ruleName", newJString(ruleName))
  result = call_402657842.call(path_402657843, nil, nil, nil, nil)

var deleteTopicRule* = Call_DeleteTopicRule_402657830(name: "deleteTopicRule",
    meth: HttpMethod.HttpDelete, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}", validator: validate_DeleteTopicRule_402657831,
    base: "/", makeUrl: url_DeleteTopicRule_402657832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateTopicRuleDestination_402657875 = ref object of OpenApiRestCall_402656044
proc url_CreateTopicRuleDestination_402657877(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateTopicRuleDestination_402657876(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Creates a topic rule destination. The destination must be confirmed prior to use.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657878 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657878 = validateParameter(valid_402657878, JString,
                                      required = false, default = nil)
  if valid_402657878 != nil:
    section.add "X-Amz-Security-Token", valid_402657878
  var valid_402657879 = header.getOrDefault("X-Amz-Signature")
  valid_402657879 = validateParameter(valid_402657879, JString,
                                      required = false, default = nil)
  if valid_402657879 != nil:
    section.add "X-Amz-Signature", valid_402657879
  var valid_402657880 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657880 = validateParameter(valid_402657880, JString,
                                      required = false, default = nil)
  if valid_402657880 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657880
  var valid_402657881 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657881 = validateParameter(valid_402657881, JString,
                                      required = false, default = nil)
  if valid_402657881 != nil:
    section.add "X-Amz-Algorithm", valid_402657881
  var valid_402657882 = header.getOrDefault("X-Amz-Date")
  valid_402657882 = validateParameter(valid_402657882, JString,
                                      required = false, default = nil)
  if valid_402657882 != nil:
    section.add "X-Amz-Date", valid_402657882
  var valid_402657883 = header.getOrDefault("X-Amz-Credential")
  valid_402657883 = validateParameter(valid_402657883, JString,
                                      required = false, default = nil)
  if valid_402657883 != nil:
    section.add "X-Amz-Credential", valid_402657883
  var valid_402657884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657884 = validateParameter(valid_402657884, JString,
                                      required = false, default = nil)
  if valid_402657884 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657884
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657886: Call_CreateTopicRuleDestination_402657875;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a topic rule destination. The destination must be confirmed prior to use.
                                                                                         ## 
  let valid = call_402657886.validator(path, query, header, formData, body, _)
  let scheme = call_402657886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657886.makeUrl(scheme.get, call_402657886.host, call_402657886.base,
                                   call_402657886.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657886, uri, valid, _)

proc call*(call_402657887: Call_CreateTopicRuleDestination_402657875;
           body: JsonNode): Recallable =
  ## createTopicRuleDestination
  ## Creates a topic rule destination. The destination must be confirmed prior to use.
  ##   
                                                                                      ## body: JObject (required)
  var body_402657888 = newJObject()
  if body != nil:
    body_402657888 = body
  result = call_402657887.call(nil, nil, nil, nil, body_402657888)

var createTopicRuleDestination* = Call_CreateTopicRuleDestination_402657875(
    name: "createTopicRuleDestination", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/destinations",
    validator: validate_CreateTopicRuleDestination_402657876, base: "/",
    makeUrl: url_CreateTopicRuleDestination_402657877,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTopicRuleDestinations_402657860 = ref object of OpenApiRestCall_402656044
proc url_ListTopicRuleDestinations_402657862(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListTopicRuleDestinations_402657861(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists all the topic rule destinations in your AWS account.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  section = newJObject()
  var valid_402657863 = query.getOrDefault("maxResults")
  valid_402657863 = validateParameter(valid_402657863, JInt, required = false,
                                      default = nil)
  if valid_402657863 != nil:
    section.add "maxResults", valid_402657863
  var valid_402657864 = query.getOrDefault("nextToken")
  valid_402657864 = validateParameter(valid_402657864, JString,
                                      required = false, default = nil)
  if valid_402657864 != nil:
    section.add "nextToken", valid_402657864
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657865 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657865 = validateParameter(valid_402657865, JString,
                                      required = false, default = nil)
  if valid_402657865 != nil:
    section.add "X-Amz-Security-Token", valid_402657865
  var valid_402657866 = header.getOrDefault("X-Amz-Signature")
  valid_402657866 = validateParameter(valid_402657866, JString,
                                      required = false, default = nil)
  if valid_402657866 != nil:
    section.add "X-Amz-Signature", valid_402657866
  var valid_402657867 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657867 = validateParameter(valid_402657867, JString,
                                      required = false, default = nil)
  if valid_402657867 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657867
  var valid_402657868 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657868 = validateParameter(valid_402657868, JString,
                                      required = false, default = nil)
  if valid_402657868 != nil:
    section.add "X-Amz-Algorithm", valid_402657868
  var valid_402657869 = header.getOrDefault("X-Amz-Date")
  valid_402657869 = validateParameter(valid_402657869, JString,
                                      required = false, default = nil)
  if valid_402657869 != nil:
    section.add "X-Amz-Date", valid_402657869
  var valid_402657870 = header.getOrDefault("X-Amz-Credential")
  valid_402657870 = validateParameter(valid_402657870, JString,
                                      required = false, default = nil)
  if valid_402657870 != nil:
    section.add "X-Amz-Credential", valid_402657870
  var valid_402657871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657871 = validateParameter(valid_402657871, JString,
                                      required = false, default = nil)
  if valid_402657871 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657871
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657872: Call_ListTopicRuleDestinations_402657860;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all the topic rule destinations in your AWS account.
                                                                                         ## 
  let valid = call_402657872.validator(path, query, header, formData, body, _)
  let scheme = call_402657872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657872.makeUrl(scheme.get, call_402657872.host, call_402657872.base,
                                   call_402657872.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657872, uri, valid, _)

proc call*(call_402657873: Call_ListTopicRuleDestinations_402657860;
           maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listTopicRuleDestinations
  ## Lists all the topic rule destinations in your AWS account.
  ##   maxResults: int
                                                               ##             : The maximum number of results to return at one time.
  ##   
                                                                                                                                    ## nextToken: string
                                                                                                                                    ##            
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## token 
                                                                                                                                    ## to 
                                                                                                                                    ## retrieve 
                                                                                                                                    ## the 
                                                                                                                                    ## next 
                                                                                                                                    ## set 
                                                                                                                                    ## of 
                                                                                                                                    ## results.
  var query_402657874 = newJObject()
  add(query_402657874, "maxResults", newJInt(maxResults))
  add(query_402657874, "nextToken", newJString(nextToken))
  result = call_402657873.call(nil, query_402657874, nil, nil, nil)

var listTopicRuleDestinations* = Call_ListTopicRuleDestinations_402657860(
    name: "listTopicRuleDestinations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/destinations",
    validator: validate_ListTopicRuleDestinations_402657861, base: "/",
    makeUrl: url_ListTopicRuleDestinations_402657862,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateTopicRuleDestination_402657889 = ref object of OpenApiRestCall_402656044
proc url_UpdateTopicRuleDestination_402657891(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateTopicRuleDestination_402657890(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657892 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657892 = validateParameter(valid_402657892, JString,
                                      required = false, default = nil)
  if valid_402657892 != nil:
    section.add "X-Amz-Security-Token", valid_402657892
  var valid_402657893 = header.getOrDefault("X-Amz-Signature")
  valid_402657893 = validateParameter(valid_402657893, JString,
                                      required = false, default = nil)
  if valid_402657893 != nil:
    section.add "X-Amz-Signature", valid_402657893
  var valid_402657894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657894 = validateParameter(valid_402657894, JString,
                                      required = false, default = nil)
  if valid_402657894 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657894
  var valid_402657895 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657895 = validateParameter(valid_402657895, JString,
                                      required = false, default = nil)
  if valid_402657895 != nil:
    section.add "X-Amz-Algorithm", valid_402657895
  var valid_402657896 = header.getOrDefault("X-Amz-Date")
  valid_402657896 = validateParameter(valid_402657896, JString,
                                      required = false, default = nil)
  if valid_402657896 != nil:
    section.add "X-Amz-Date", valid_402657896
  var valid_402657897 = header.getOrDefault("X-Amz-Credential")
  valid_402657897 = validateParameter(valid_402657897, JString,
                                      required = false, default = nil)
  if valid_402657897 != nil:
    section.add "X-Amz-Credential", valid_402657897
  var valid_402657898 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657898 = validateParameter(valid_402657898, JString,
                                      required = false, default = nil)
  if valid_402657898 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657898
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657900: Call_UpdateTopicRuleDestination_402657889;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination.
                                                                                         ## 
  let valid = call_402657900.validator(path, query, header, formData, body, _)
  let scheme = call_402657900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657900.makeUrl(scheme.get, call_402657900.host, call_402657900.base,
                                   call_402657900.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657900, uri, valid, _)

proc call*(call_402657901: Call_UpdateTopicRuleDestination_402657889;
           body: JsonNode): Recallable =
  ## updateTopicRuleDestination
  ## Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination.
  ##   
                                                                                                                               ## body: JObject (required)
  var body_402657902 = newJObject()
  if body != nil:
    body_402657902 = body
  result = call_402657901.call(nil, nil, nil, nil, body_402657902)

var updateTopicRuleDestination* = Call_UpdateTopicRuleDestination_402657889(
    name: "updateTopicRuleDestination", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/destinations",
    validator: validate_UpdateTopicRuleDestination_402657890, base: "/",
    makeUrl: url_UpdateTopicRuleDestination_402657891,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAccountAuditConfiguration_402657903 = ref object of OpenApiRestCall_402656044
proc url_DescribeAccountAuditConfiguration_402657905(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeAccountAuditConfiguration_402657904(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657906 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657906 = validateParameter(valid_402657906, JString,
                                      required = false, default = nil)
  if valid_402657906 != nil:
    section.add "X-Amz-Security-Token", valid_402657906
  var valid_402657907 = header.getOrDefault("X-Amz-Signature")
  valid_402657907 = validateParameter(valid_402657907, JString,
                                      required = false, default = nil)
  if valid_402657907 != nil:
    section.add "X-Amz-Signature", valid_402657907
  var valid_402657908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657908 = validateParameter(valid_402657908, JString,
                                      required = false, default = nil)
  if valid_402657908 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657908
  var valid_402657909 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657909 = validateParameter(valid_402657909, JString,
                                      required = false, default = nil)
  if valid_402657909 != nil:
    section.add "X-Amz-Algorithm", valid_402657909
  var valid_402657910 = header.getOrDefault("X-Amz-Date")
  valid_402657910 = validateParameter(valid_402657910, JString,
                                      required = false, default = nil)
  if valid_402657910 != nil:
    section.add "X-Amz-Date", valid_402657910
  var valid_402657911 = header.getOrDefault("X-Amz-Credential")
  valid_402657911 = validateParameter(valid_402657911, JString,
                                      required = false, default = nil)
  if valid_402657911 != nil:
    section.add "X-Amz-Credential", valid_402657911
  var valid_402657912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657912 = validateParameter(valid_402657912, JString,
                                      required = false, default = nil)
  if valid_402657912 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657913: Call_DescribeAccountAuditConfiguration_402657903;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
                                                                                         ## 
  let valid = call_402657913.validator(path, query, header, formData, body, _)
  let scheme = call_402657913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657913.makeUrl(scheme.get, call_402657913.host, call_402657913.base,
                                   call_402657913.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657913, uri, valid, _)

proc call*(call_402657914: Call_DescribeAccountAuditConfiguration_402657903): Recallable =
  ## describeAccountAuditConfiguration
  ## Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  result = call_402657914.call(nil, nil, nil, nil, nil)

var describeAccountAuditConfiguration* = Call_DescribeAccountAuditConfiguration_402657903(
    name: "describeAccountAuditConfiguration", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/configuration",
    validator: validate_DescribeAccountAuditConfiguration_402657904, base: "/",
    makeUrl: url_DescribeAccountAuditConfiguration_402657905,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAccountAuditConfiguration_402657929 = ref object of OpenApiRestCall_402656044
proc url_UpdateAccountAuditConfiguration_402657931(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateAccountAuditConfiguration_402657930(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657932 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657932 = validateParameter(valid_402657932, JString,
                                      required = false, default = nil)
  if valid_402657932 != nil:
    section.add "X-Amz-Security-Token", valid_402657932
  var valid_402657933 = header.getOrDefault("X-Amz-Signature")
  valid_402657933 = validateParameter(valid_402657933, JString,
                                      required = false, default = nil)
  if valid_402657933 != nil:
    section.add "X-Amz-Signature", valid_402657933
  var valid_402657934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657934 = validateParameter(valid_402657934, JString,
                                      required = false, default = nil)
  if valid_402657934 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657934
  var valid_402657935 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657935 = validateParameter(valid_402657935, JString,
                                      required = false, default = nil)
  if valid_402657935 != nil:
    section.add "X-Amz-Algorithm", valid_402657935
  var valid_402657936 = header.getOrDefault("X-Amz-Date")
  valid_402657936 = validateParameter(valid_402657936, JString,
                                      required = false, default = nil)
  if valid_402657936 != nil:
    section.add "X-Amz-Date", valid_402657936
  var valid_402657937 = header.getOrDefault("X-Amz-Credential")
  valid_402657937 = validateParameter(valid_402657937, JString,
                                      required = false, default = nil)
  if valid_402657937 != nil:
    section.add "X-Amz-Credential", valid_402657937
  var valid_402657938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657938 = validateParameter(valid_402657938, JString,
                                      required = false, default = nil)
  if valid_402657938 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657940: Call_UpdateAccountAuditConfiguration_402657929;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
                                                                                         ## 
  let valid = call_402657940.validator(path, query, header, formData, body, _)
  let scheme = call_402657940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657940.makeUrl(scheme.get, call_402657940.host, call_402657940.base,
                                   call_402657940.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657940, uri, valid, _)

proc call*(call_402657941: Call_UpdateAccountAuditConfiguration_402657929;
           body: JsonNode): Recallable =
  ## updateAccountAuditConfiguration
  ## Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
  ##   
                                                                                                                                                                                      ## body: JObject (required)
  var body_402657942 = newJObject()
  if body != nil:
    body_402657942 = body
  result = call_402657941.call(nil, nil, nil, nil, body_402657942)

var updateAccountAuditConfiguration* = Call_UpdateAccountAuditConfiguration_402657929(
    name: "updateAccountAuditConfiguration", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/audit/configuration",
    validator: validate_UpdateAccountAuditConfiguration_402657930, base: "/",
    makeUrl: url_UpdateAccountAuditConfiguration_402657931,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteAccountAuditConfiguration_402657915 = ref object of OpenApiRestCall_402656044
proc url_DeleteAccountAuditConfiguration_402657917(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DeleteAccountAuditConfiguration_402657916(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. 
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   deleteScheduledAudits: JBool
                                  ##                        : If true, all scheduled audits are deleted.
  section = newJObject()
  var valid_402657918 = query.getOrDefault("deleteScheduledAudits")
  valid_402657918 = validateParameter(valid_402657918, JBool, required = false,
                                      default = nil)
  if valid_402657918 != nil:
    section.add "deleteScheduledAudits", valid_402657918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657919 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657919 = validateParameter(valid_402657919, JString,
                                      required = false, default = nil)
  if valid_402657919 != nil:
    section.add "X-Amz-Security-Token", valid_402657919
  var valid_402657920 = header.getOrDefault("X-Amz-Signature")
  valid_402657920 = validateParameter(valid_402657920, JString,
                                      required = false, default = nil)
  if valid_402657920 != nil:
    section.add "X-Amz-Signature", valid_402657920
  var valid_402657921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657921 = validateParameter(valid_402657921, JString,
                                      required = false, default = nil)
  if valid_402657921 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657921
  var valid_402657922 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657922 = validateParameter(valid_402657922, JString,
                                      required = false, default = nil)
  if valid_402657922 != nil:
    section.add "X-Amz-Algorithm", valid_402657922
  var valid_402657923 = header.getOrDefault("X-Amz-Date")
  valid_402657923 = validateParameter(valid_402657923, JString,
                                      required = false, default = nil)
  if valid_402657923 != nil:
    section.add "X-Amz-Date", valid_402657923
  var valid_402657924 = header.getOrDefault("X-Amz-Credential")
  valid_402657924 = validateParameter(valid_402657924, JString,
                                      required = false, default = nil)
  if valid_402657924 != nil:
    section.add "X-Amz-Credential", valid_402657924
  var valid_402657925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657925 = validateParameter(valid_402657925, JString,
                                      required = false, default = nil)
  if valid_402657925 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657926: Call_DeleteAccountAuditConfiguration_402657915;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. 
                                                                                         ## 
  let valid = call_402657926.validator(path, query, header, formData, body, _)
  let scheme = call_402657926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657926.makeUrl(scheme.get, call_402657926.host, call_402657926.base,
                                   call_402657926.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657926, uri, valid, _)

proc call*(call_402657927: Call_DeleteAccountAuditConfiguration_402657915;
           deleteScheduledAudits: bool = false): Recallable =
  ## deleteAccountAuditConfiguration
  ## Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. 
  ##   
                                                                                                                                                                          ## deleteScheduledAudits: bool
                                                                                                                                                                          ##                        
                                                                                                                                                                          ## : 
                                                                                                                                                                          ## If 
                                                                                                                                                                          ## true, 
                                                                                                                                                                          ## all 
                                                                                                                                                                          ## scheduled 
                                                                                                                                                                          ## audits 
                                                                                                                                                                          ## are 
                                                                                                                                                                          ## deleted.
  var query_402657928 = newJObject()
  add(query_402657928, "deleteScheduledAudits", newJBool(deleteScheduledAudits))
  result = call_402657927.call(nil, query_402657928, nil, nil, nil)

var deleteAccountAuditConfiguration* = Call_DeleteAccountAuditConfiguration_402657915(
    name: "deleteAccountAuditConfiguration", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/audit/configuration",
    validator: validate_DeleteAccountAuditConfiguration_402657916, base: "/",
    makeUrl: url_DeleteAccountAuditConfiguration_402657917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateCACertificate_402657957 = ref object of OpenApiRestCall_402656044
proc url_UpdateCACertificate_402657959(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path,
         "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cacertificate/"),
                 (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateCACertificate_402657958(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a registered CA certificate.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
                                 ##                  : The CA certificate identifier.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `caCertificateId` field"
  var valid_402657960 = path.getOrDefault("caCertificateId")
  valid_402657960 = validateParameter(valid_402657960, JString, required = true,
                                      default = nil)
  if valid_402657960 != nil:
    section.add "caCertificateId", valid_402657960
  result.add "path", section
  ## parameters in `query` object:
  ##   newAutoRegistrationStatus: JString
                                  ##                            : The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".
  ##   
                                                                                                                                                          ## newStatus: JString
                                                                                                                                                          ##            
                                                                                                                                                          ## : 
                                                                                                                                                          ## <p>The 
                                                                                                                                                          ## updated 
                                                                                                                                                          ## status 
                                                                                                                                                          ## of 
                                                                                                                                                          ## the 
                                                                                                                                                          ## CA 
                                                                                                                                                          ## certificate.</p> 
                                                                                                                                                          ## <p> 
                                                                                                                                                          ## <b>Note:</b> 
                                                                                                                                                          ## The 
                                                                                                                                                          ## status 
                                                                                                                                                          ## value 
                                                                                                                                                          ## REGISTER_INACTIVE 
                                                                                                                                                          ## is 
                                                                                                                                                          ## deprecated 
                                                                                                                                                          ## and 
                                                                                                                                                          ## should 
                                                                                                                                                          ## not 
                                                                                                                                                          ## be 
                                                                                                                                                          ## used.</p>
  section = newJObject()
  var valid_402657973 = query.getOrDefault("newAutoRegistrationStatus")
  valid_402657973 = validateParameter(valid_402657973, JString,
                                      required = false,
                                      default = newJString("ENABLE"))
  if valid_402657973 != nil:
    section.add "newAutoRegistrationStatus", valid_402657973
  var valid_402657974 = query.getOrDefault("newStatus")
  valid_402657974 = validateParameter(valid_402657974, JString,
                                      required = false,
                                      default = newJString("ACTIVE"))
  if valid_402657974 != nil:
    section.add "newStatus", valid_402657974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657975 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657975 = validateParameter(valid_402657975, JString,
                                      required = false, default = nil)
  if valid_402657975 != nil:
    section.add "X-Amz-Security-Token", valid_402657975
  var valid_402657976 = header.getOrDefault("X-Amz-Signature")
  valid_402657976 = validateParameter(valid_402657976, JString,
                                      required = false, default = nil)
  if valid_402657976 != nil:
    section.add "X-Amz-Signature", valid_402657976
  var valid_402657977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657977 = validateParameter(valid_402657977, JString,
                                      required = false, default = nil)
  if valid_402657977 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657977
  var valid_402657978 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657978 = validateParameter(valid_402657978, JString,
                                      required = false, default = nil)
  if valid_402657978 != nil:
    section.add "X-Amz-Algorithm", valid_402657978
  var valid_402657979 = header.getOrDefault("X-Amz-Date")
  valid_402657979 = validateParameter(valid_402657979, JString,
                                      required = false, default = nil)
  if valid_402657979 != nil:
    section.add "X-Amz-Date", valid_402657979
  var valid_402657980 = header.getOrDefault("X-Amz-Credential")
  valid_402657980 = validateParameter(valid_402657980, JString,
                                      required = false, default = nil)
  if valid_402657980 != nil:
    section.add "X-Amz-Credential", valid_402657980
  var valid_402657981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657981 = validateParameter(valid_402657981, JString,
                                      required = false, default = nil)
  if valid_402657981 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657981
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657983: Call_UpdateCACertificate_402657957;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a registered CA certificate.
                                                                                         ## 
  let valid = call_402657983.validator(path, query, header, formData, body, _)
  let scheme = call_402657983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657983.makeUrl(scheme.get, call_402657983.host, call_402657983.base,
                                   call_402657983.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657983, uri, valid, _)

proc call*(call_402657984: Call_UpdateCACertificate_402657957;
           caCertificateId: string; body: JsonNode;
           newAutoRegistrationStatus: string = "ENABLE";
           newStatus: string = "ACTIVE"): Recallable =
  ## updateCACertificate
  ## Updates a registered CA certificate.
  ##   caCertificateId: string (required)
                                         ##                  : The CA certificate identifier.
  ##   
                                                                                             ## body: JObject (required)
  ##   
                                                                                                                        ## newAutoRegistrationStatus: string
                                                                                                                        ##                            
                                                                                                                        ## : 
                                                                                                                        ## The 
                                                                                                                        ## new 
                                                                                                                        ## value 
                                                                                                                        ## for 
                                                                                                                        ## the 
                                                                                                                        ## auto 
                                                                                                                        ## registration 
                                                                                                                        ## status. 
                                                                                                                        ## Valid 
                                                                                                                        ## values 
                                                                                                                        ## are: 
                                                                                                                        ## "ENABLE" 
                                                                                                                        ## or 
                                                                                                                        ## "DISABLE".
  ##   
                                                                                                                                     ## newStatus: string
                                                                                                                                     ##            
                                                                                                                                     ## : 
                                                                                                                                     ## <p>The 
                                                                                                                                     ## updated 
                                                                                                                                     ## status 
                                                                                                                                     ## of 
                                                                                                                                     ## the 
                                                                                                                                     ## CA 
                                                                                                                                     ## certificate.</p> 
                                                                                                                                     ## <p> 
                                                                                                                                     ## <b>Note:</b> 
                                                                                                                                     ## The 
                                                                                                                                     ## status 
                                                                                                                                     ## value 
                                                                                                                                     ## REGISTER_INACTIVE 
                                                                                                                                     ## is 
                                                                                                                                     ## deprecated 
                                                                                                                                     ## and 
                                                                                                                                     ## should 
                                                                                                                                     ## not 
                                                                                                                                     ## be 
                                                                                                                                     ## used.</p>
  var path_402657985 = newJObject()
  var query_402657986 = newJObject()
  var body_402657987 = newJObject()
  add(path_402657985, "caCertificateId", newJString(caCertificateId))
  if body != nil:
    body_402657987 = body
  add(query_402657986, "newAutoRegistrationStatus",
      newJString(newAutoRegistrationStatus))
  add(query_402657986, "newStatus", newJString(newStatus))
  result = call_402657984.call(path_402657985, query_402657986, nil, nil, body_402657987)

var updateCACertificate* = Call_UpdateCACertificate_402657957(
    name: "updateCACertificate", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/cacertificate/{caCertificateId}",
    validator: validate_UpdateCACertificate_402657958, base: "/",
    makeUrl: url_UpdateCACertificate_402657959,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeCACertificate_402657943 = ref object of OpenApiRestCall_402656044
proc url_DescribeCACertificate_402657945(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path,
         "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cacertificate/"),
                 (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeCACertificate_402657944(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a registered CA certificate.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
                                 ##                  : The CA certificate identifier.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `caCertificateId` field"
  var valid_402657946 = path.getOrDefault("caCertificateId")
  valid_402657946 = validateParameter(valid_402657946, JString, required = true,
                                      default = nil)
  if valid_402657946 != nil:
    section.add "caCertificateId", valid_402657946
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657947 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657947 = validateParameter(valid_402657947, JString,
                                      required = false, default = nil)
  if valid_402657947 != nil:
    section.add "X-Amz-Security-Token", valid_402657947
  var valid_402657948 = header.getOrDefault("X-Amz-Signature")
  valid_402657948 = validateParameter(valid_402657948, JString,
                                      required = false, default = nil)
  if valid_402657948 != nil:
    section.add "X-Amz-Signature", valid_402657948
  var valid_402657949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657949 = validateParameter(valid_402657949, JString,
                                      required = false, default = nil)
  if valid_402657949 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657949
  var valid_402657950 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657950 = validateParameter(valid_402657950, JString,
                                      required = false, default = nil)
  if valid_402657950 != nil:
    section.add "X-Amz-Algorithm", valid_402657950
  var valid_402657951 = header.getOrDefault("X-Amz-Date")
  valid_402657951 = validateParameter(valid_402657951, JString,
                                      required = false, default = nil)
  if valid_402657951 != nil:
    section.add "X-Amz-Date", valid_402657951
  var valid_402657952 = header.getOrDefault("X-Amz-Credential")
  valid_402657952 = validateParameter(valid_402657952, JString,
                                      required = false, default = nil)
  if valid_402657952 != nil:
    section.add "X-Amz-Credential", valid_402657952
  var valid_402657953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657953 = validateParameter(valid_402657953, JString,
                                      required = false, default = nil)
  if valid_402657953 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657953
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657954: Call_DescribeCACertificate_402657943;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a registered CA certificate.
                                                                                         ## 
  let valid = call_402657954.validator(path, query, header, formData, body, _)
  let scheme = call_402657954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657954.makeUrl(scheme.get, call_402657954.host, call_402657954.base,
                                   call_402657954.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657954, uri, valid, _)

proc call*(call_402657955: Call_DescribeCACertificate_402657943;
           caCertificateId: string): Recallable =
  ## describeCACertificate
  ## Describes a registered CA certificate.
  ##   caCertificateId: string (required)
                                           ##                  : The CA certificate identifier.
  var path_402657956 = newJObject()
  add(path_402657956, "caCertificateId", newJString(caCertificateId))
  result = call_402657955.call(path_402657956, nil, nil, nil, nil)

var describeCACertificate* = Call_DescribeCACertificate_402657943(
    name: "describeCACertificate", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/cacertificate/{caCertificateId}",
    validator: validate_DescribeCACertificate_402657944, base: "/",
    makeUrl: url_DescribeCACertificate_402657945,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteCACertificate_402657988 = ref object of OpenApiRestCall_402656044
proc url_DeleteCACertificate_402657990(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path,
         "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/cacertificate/"),
                 (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteCACertificate_402657989(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a registered CA certificate.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
                                 ##                  : The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `caCertificateId` field"
  var valid_402657991 = path.getOrDefault("caCertificateId")
  valid_402657991 = validateParameter(valid_402657991, JString, required = true,
                                      default = nil)
  if valid_402657991 != nil:
    section.add "caCertificateId", valid_402657991
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657992 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657992 = validateParameter(valid_402657992, JString,
                                      required = false, default = nil)
  if valid_402657992 != nil:
    section.add "X-Amz-Security-Token", valid_402657992
  var valid_402657993 = header.getOrDefault("X-Amz-Signature")
  valid_402657993 = validateParameter(valid_402657993, JString,
                                      required = false, default = nil)
  if valid_402657993 != nil:
    section.add "X-Amz-Signature", valid_402657993
  var valid_402657994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657994 = validateParameter(valid_402657994, JString,
                                      required = false, default = nil)
  if valid_402657994 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657994
  var valid_402657995 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657995 = validateParameter(valid_402657995, JString,
                                      required = false, default = nil)
  if valid_402657995 != nil:
    section.add "X-Amz-Algorithm", valid_402657995
  var valid_402657996 = header.getOrDefault("X-Amz-Date")
  valid_402657996 = validateParameter(valid_402657996, JString,
                                      required = false, default = nil)
  if valid_402657996 != nil:
    section.add "X-Amz-Date", valid_402657996
  var valid_402657997 = header.getOrDefault("X-Amz-Credential")
  valid_402657997 = validateParameter(valid_402657997, JString,
                                      required = false, default = nil)
  if valid_402657997 != nil:
    section.add "X-Amz-Credential", valid_402657997
  var valid_402657998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657998 = validateParameter(valid_402657998, JString,
                                      required = false, default = nil)
  if valid_402657998 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657998
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657999: Call_DeleteCACertificate_402657988;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a registered CA certificate.
                                                                                         ## 
  let valid = call_402657999.validator(path, query, header, formData, body, _)
  let scheme = call_402657999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657999.makeUrl(scheme.get, call_402657999.host, call_402657999.base,
                                   call_402657999.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657999, uri, valid, _)

proc call*(call_402658000: Call_DeleteCACertificate_402657988;
           caCertificateId: string): Recallable =
  ## deleteCACertificate
  ## Deletes a registered CA certificate.
  ##   caCertificateId: string (required)
                                         ##                  : The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)
  var path_402658001 = newJObject()
  add(path_402658001, "caCertificateId", newJString(caCertificateId))
  result = call_402658000.call(path_402658001, nil, nil, nil, nil)

var deleteCACertificate* = Call_DeleteCACertificate_402657988(
    name: "deleteCACertificate", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/cacertificate/{caCertificateId}",
    validator: validate_DeleteCACertificate_402657989, base: "/",
    makeUrl: url_DeleteCACertificate_402657990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeCertificate_402658002 = ref object of OpenApiRestCall_402656044
proc url_DescribeCertificate_402658004(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates/"),
                 (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeCertificate_402658003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified certificate.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
                                 ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `certificateId` field"
  var valid_402658005 = path.getOrDefault("certificateId")
  valid_402658005 = validateParameter(valid_402658005, JString, required = true,
                                      default = nil)
  if valid_402658005 != nil:
    section.add "certificateId", valid_402658005
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658006 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658006 = validateParameter(valid_402658006, JString,
                                      required = false, default = nil)
  if valid_402658006 != nil:
    section.add "X-Amz-Security-Token", valid_402658006
  var valid_402658007 = header.getOrDefault("X-Amz-Signature")
  valid_402658007 = validateParameter(valid_402658007, JString,
                                      required = false, default = nil)
  if valid_402658007 != nil:
    section.add "X-Amz-Signature", valid_402658007
  var valid_402658008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658008 = validateParameter(valid_402658008, JString,
                                      required = false, default = nil)
  if valid_402658008 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658008
  var valid_402658009 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658009 = validateParameter(valid_402658009, JString,
                                      required = false, default = nil)
  if valid_402658009 != nil:
    section.add "X-Amz-Algorithm", valid_402658009
  var valid_402658010 = header.getOrDefault("X-Amz-Date")
  valid_402658010 = validateParameter(valid_402658010, JString,
                                      required = false, default = nil)
  if valid_402658010 != nil:
    section.add "X-Amz-Date", valid_402658010
  var valid_402658011 = header.getOrDefault("X-Amz-Credential")
  valid_402658011 = validateParameter(valid_402658011, JString,
                                      required = false, default = nil)
  if valid_402658011 != nil:
    section.add "X-Amz-Credential", valid_402658011
  var valid_402658012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658012 = validateParameter(valid_402658012, JString,
                                      required = false, default = nil)
  if valid_402658012 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658012
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658013: Call_DescribeCertificate_402658002;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified certificate.
                                                                                         ## 
  let valid = call_402658013.validator(path, query, header, formData, body, _)
  let scheme = call_402658013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658013.makeUrl(scheme.get, call_402658013.host, call_402658013.base,
                                   call_402658013.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658013, uri, valid, _)

proc call*(call_402658014: Call_DescribeCertificate_402658002;
           certificateId: string): Recallable =
  ## describeCertificate
  ## Gets information about the specified certificate.
  ##   certificateId: string (required)
                                                      ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  var path_402658015 = newJObject()
  add(path_402658015, "certificateId", newJString(certificateId))
  result = call_402658014.call(path_402658015, nil, nil, nil, nil)

var describeCertificate* = Call_DescribeCertificate_402658002(
    name: "describeCertificate", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/certificates/{certificateId}",
    validator: validate_DescribeCertificate_402658003, base: "/",
    makeUrl: url_DescribeCertificate_402658004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteCertificate_402658016 = ref object of OpenApiRestCall_402656044
proc url_DeleteCertificate_402658018(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates/"),
                 (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteCertificate_402658017(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
                                 ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `certificateId` field"
  var valid_402658019 = path.getOrDefault("certificateId")
  valid_402658019 = validateParameter(valid_402658019, JString, required = true,
                                      default = nil)
  if valid_402658019 != nil:
    section.add "certificateId", valid_402658019
  result.add "path", section
  ## parameters in `query` object:
  ##   forceDelete: JBool
                                  ##              : Forces the deletion of a certificate if it is inactive and is not attached to an IoT thing.
  section = newJObject()
  var valid_402658020 = query.getOrDefault("forceDelete")
  valid_402658020 = validateParameter(valid_402658020, JBool, required = false,
                                      default = nil)
  if valid_402658020 != nil:
    section.add "forceDelete", valid_402658020
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658021 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658021 = validateParameter(valid_402658021, JString,
                                      required = false, default = nil)
  if valid_402658021 != nil:
    section.add "X-Amz-Security-Token", valid_402658021
  var valid_402658022 = header.getOrDefault("X-Amz-Signature")
  valid_402658022 = validateParameter(valid_402658022, JString,
                                      required = false, default = nil)
  if valid_402658022 != nil:
    section.add "X-Amz-Signature", valid_402658022
  var valid_402658023 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658023 = validateParameter(valid_402658023, JString,
                                      required = false, default = nil)
  if valid_402658023 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658023
  var valid_402658024 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658024 = validateParameter(valid_402658024, JString,
                                      required = false, default = nil)
  if valid_402658024 != nil:
    section.add "X-Amz-Algorithm", valid_402658024
  var valid_402658025 = header.getOrDefault("X-Amz-Date")
  valid_402658025 = validateParameter(valid_402658025, JString,
                                      required = false, default = nil)
  if valid_402658025 != nil:
    section.add "X-Amz-Date", valid_402658025
  var valid_402658026 = header.getOrDefault("X-Amz-Credential")
  valid_402658026 = validateParameter(valid_402658026, JString,
                                      required = false, default = nil)
  if valid_402658026 != nil:
    section.add "X-Amz-Credential", valid_402658026
  var valid_402658027 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658027 = validateParameter(valid_402658027, JString,
                                      required = false, default = nil)
  if valid_402658027 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658027
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658028: Call_DeleteCertificate_402658016;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>
                                                                                         ## 
  let valid = call_402658028.validator(path, query, header, formData, body, _)
  let scheme = call_402658028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658028.makeUrl(scheme.get, call_402658028.host, call_402658028.base,
                                   call_402658028.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658028, uri, valid, _)

proc call*(call_402658029: Call_DeleteCertificate_402658016;
           certificateId: string; forceDelete: bool = false): Recallable =
  ## deleteCertificate
  ## <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                 ## certificateId: string (required)
                                                                                                                                                                                                                                                                                                                                                                 ##                
                                                                                                                                                                                                                                                                                                                                                                 ## : 
                                                                                                                                                                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                                                                                                                                                                 ## ID 
                                                                                                                                                                                                                                                                                                                                                                 ## of 
                                                                                                                                                                                                                                                                                                                                                                 ## the 
                                                                                                                                                                                                                                                                                                                                                                 ## certificate. 
                                                                                                                                                                                                                                                                                                                                                                 ## (The 
                                                                                                                                                                                                                                                                                                                                                                 ## last 
                                                                                                                                                                                                                                                                                                                                                                 ## part 
                                                                                                                                                                                                                                                                                                                                                                 ## of 
                                                                                                                                                                                                                                                                                                                                                                 ## the 
                                                                                                                                                                                                                                                                                                                                                                 ## certificate 
                                                                                                                                                                                                                                                                                                                                                                 ## ARN 
                                                                                                                                                                                                                                                                                                                                                                 ## contains 
                                                                                                                                                                                                                                                                                                                                                                 ## the 
                                                                                                                                                                                                                                                                                                                                                                 ## certificate 
                                                                                                                                                                                                                                                                                                                                                                 ## ID.)
  ##   
                                                                                                                                                                                                                                                                                                                                                                        ## forceDelete: bool
                                                                                                                                                                                                                                                                                                                                                                        ##              
                                                                                                                                                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                                                                                                                                                        ## Forces 
                                                                                                                                                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                                                                                                                                                        ## deletion 
                                                                                                                                                                                                                                                                                                                                                                        ## of 
                                                                                                                                                                                                                                                                                                                                                                        ## a 
                                                                                                                                                                                                                                                                                                                                                                        ## certificate 
                                                                                                                                                                                                                                                                                                                                                                        ## if 
                                                                                                                                                                                                                                                                                                                                                                        ## it 
                                                                                                                                                                                                                                                                                                                                                                        ## is 
                                                                                                                                                                                                                                                                                                                                                                        ## inactive 
                                                                                                                                                                                                                                                                                                                                                                        ## and 
                                                                                                                                                                                                                                                                                                                                                                        ## is 
                                                                                                                                                                                                                                                                                                                                                                        ## not 
                                                                                                                                                                                                                                                                                                                                                                        ## attached 
                                                                                                                                                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                                                                                                                                                        ## an 
                                                                                                                                                                                                                                                                                                                                                                        ## IoT 
                                                                                                                                                                                                                                                                                                                                                                        ## thing.
  var path_402658030 = newJObject()
  var query_402658031 = newJObject()
  add(path_402658030, "certificateId", newJString(certificateId))
  add(query_402658031, "forceDelete", newJBool(forceDelete))
  result = call_402658029.call(path_402658030, query_402658031, nil, nil, nil)

var deleteCertificate* = Call_DeleteCertificate_402658016(
    name: "deleteCertificate", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/certificates/{certificateId}",
    validator: validate_DeleteCertificate_402658017, base: "/",
    makeUrl: url_DeleteCertificate_402658018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteJobExecution_402658032 = ref object of OpenApiRestCall_402656044
proc url_DeleteJobExecution_402658034(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  assert "jobId" in path, "`jobId` is a required path parameter"
  assert "executionNumber" in path,
         "`executionNumber` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId"),
                 (kind: ConstantSegment, value: "/executionNumber/"),
                 (kind: VariableSegment, value: "executionNumber")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteJobExecution_402658033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a job execution.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The ID of the job whose execution on a particular device will be deleted.
  ##   
                                                                                                                      ## executionNumber: JInt (required)
                                                                                                                      ##                  
                                                                                                                      ## : 
                                                                                                                      ## <p>The 
                                                                                                                      ## ID 
                                                                                                                      ## of 
                                                                                                                      ## the 
                                                                                                                      ## job 
                                                                                                                      ## execution 
                                                                                                                      ## to 
                                                                                                                      ## be 
                                                                                                                      ## deleted. 
                                                                                                                      ## The 
                                                                                                                      ## <code>executionNumber</code> 
                                                                                                                      ## refers 
                                                                                                                      ## to 
                                                                                                                      ## the 
                                                                                                                      ## execution 
                                                                                                                      ## of 
                                                                                                                      ## a 
                                                                                                                      ## particular 
                                                                                                                      ## job 
                                                                                                                      ## on 
                                                                                                                      ## a 
                                                                                                                      ## particular 
                                                                                                                      ## device.</p> 
                                                                                                                      ## <p>Note 
                                                                                                                      ## that 
                                                                                                                      ## once 
                                                                                                                      ## a 
                                                                                                                      ## job 
                                                                                                                      ## execution 
                                                                                                                      ## is 
                                                                                                                      ## deleted, 
                                                                                                                      ## the 
                                                                                                                      ## <code>executionNumber</code> 
                                                                                                                      ## may 
                                                                                                                      ## be 
                                                                                                                      ## reused 
                                                                                                                      ## by 
                                                                                                                      ## IoT, 
                                                                                                                      ## so 
                                                                                                                      ## be 
                                                                                                                      ## sure 
                                                                                                                      ## you 
                                                                                                                      ## get 
                                                                                                                      ## and 
                                                                                                                      ## use 
                                                                                                                      ## the 
                                                                                                                      ## correct 
                                                                                                                      ## value 
                                                                                                                      ## here.</p>
  ##   
                                                                                                                                  ## thingName: JString (required)
                                                                                                                                  ##            
                                                                                                                                  ## : 
                                                                                                                                  ## The 
                                                                                                                                  ## name 
                                                                                                                                  ## of 
                                                                                                                                  ## the 
                                                                                                                                  ## thing 
                                                                                                                                  ## whose 
                                                                                                                                  ## job 
                                                                                                                                  ## execution 
                                                                                                                                  ## will 
                                                                                                                                  ## be 
                                                                                                                                  ## deleted.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402658035 = path.getOrDefault("jobId")
  valid_402658035 = validateParameter(valid_402658035, JString, required = true,
                                      default = nil)
  if valid_402658035 != nil:
    section.add "jobId", valid_402658035
  var valid_402658036 = path.getOrDefault("executionNumber")
  valid_402658036 = validateParameter(valid_402658036, JInt, required = true,
                                      default = nil)
  if valid_402658036 != nil:
    section.add "executionNumber", valid_402658036
  var valid_402658037 = path.getOrDefault("thingName")
  valid_402658037 = validateParameter(valid_402658037, JString, required = true,
                                      default = nil)
  if valid_402658037 != nil:
    section.add "thingName", valid_402658037
  result.add "path", section
  ## parameters in `query` object:
  ##   force: JBool
                                  ##        : <p>(Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p> </note>
  section = newJObject()
  var valid_402658038 = query.getOrDefault("force")
  valid_402658038 = validateParameter(valid_402658038, JBool, required = false,
                                      default = nil)
  if valid_402658038 != nil:
    section.add "force", valid_402658038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658039 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658039 = validateParameter(valid_402658039, JString,
                                      required = false, default = nil)
  if valid_402658039 != nil:
    section.add "X-Amz-Security-Token", valid_402658039
  var valid_402658040 = header.getOrDefault("X-Amz-Signature")
  valid_402658040 = validateParameter(valid_402658040, JString,
                                      required = false, default = nil)
  if valid_402658040 != nil:
    section.add "X-Amz-Signature", valid_402658040
  var valid_402658041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658041 = validateParameter(valid_402658041, JString,
                                      required = false, default = nil)
  if valid_402658041 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658041
  var valid_402658042 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658042 = validateParameter(valid_402658042, JString,
                                      required = false, default = nil)
  if valid_402658042 != nil:
    section.add "X-Amz-Algorithm", valid_402658042
  var valid_402658043 = header.getOrDefault("X-Amz-Date")
  valid_402658043 = validateParameter(valid_402658043, JString,
                                      required = false, default = nil)
  if valid_402658043 != nil:
    section.add "X-Amz-Date", valid_402658043
  var valid_402658044 = header.getOrDefault("X-Amz-Credential")
  valid_402658044 = validateParameter(valid_402658044, JString,
                                      required = false, default = nil)
  if valid_402658044 != nil:
    section.add "X-Amz-Credential", valid_402658044
  var valid_402658045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658045 = validateParameter(valid_402658045, JString,
                                      required = false, default = nil)
  if valid_402658045 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658046: Call_DeleteJobExecution_402658032;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a job execution.
                                                                                         ## 
  let valid = call_402658046.validator(path, query, header, formData, body, _)
  let scheme = call_402658046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658046.makeUrl(scheme.get, call_402658046.host, call_402658046.base,
                                   call_402658046.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658046, uri, valid, _)

proc call*(call_402658047: Call_DeleteJobExecution_402658032; jobId: string;
           executionNumber: int; thingName: string; force: bool = false): Recallable =
  ## deleteJobExecution
  ## Deletes a job execution.
  ##   force: bool
                             ##        : <p>(Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p> </note>
  ##   
jobId: string (required)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## : 
he 

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## of 
the 
job 
whose 
execution 
on 
a 
particular 
device 
will 
be 
deleted.
  ##   
executionNumber: int (required)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ## : 
p>The 

of 
the 
job 
execution 
to 
be 
deleted. 
he 
code>executionNumber</code> 
refers 
to 
the 
execution 
of 
a 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ## particular 
job 
on 
a 
particular 
device.</p> 
p>Note 
that 
once 
a 
job 
execution 
is 
deleted, 
the 
code>executionNumber</code> 
may 
be 
reused 
by 
oT, 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ## so 
be 
sure 
you 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ## get 
and 
use 
the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ## correct 
value 
here.</p>
  ##   
thingName: string (required)


he 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## name 
of 
the 
thing 
whose 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## job 
execution 
will 
be 
deleted.
  var path_402658048 = newJObject()
  var query_402658049 = newJObject()
  add(query_402658049, "force", newJBool(force))
  add(path_402658048, "jobId", newJString(jobId))
  add(path_402658048, "executionNumber", newJInt(executionNumber))
  add(path_402658048, "thingName", newJString(thingName))
  result = call_402658047.call(path_402658048, query_402658049, nil, nil, nil)

var deleteJobExecution* = Call_DeleteJobExecution_402658032(
    name: "deleteJobExecution", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}",
    validator: validate_DeleteJobExecution_402658033, base: "/",
    makeUrl: url_DeleteJobExecution_402658034,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPolicyVersion_402658050 = ref object of OpenApiRestCall_402656044
proc url_GetPolicyVersion_402658052(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  assert "policyVersionId" in path,
         "`policyVersionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName"),
                 (kind: ConstantSegment, value: "/version/"),
                 (kind: VariableSegment, value: "policyVersionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetPolicyVersion_402658051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the specified policy version.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The name of the policy.
  ##   
                                                                         ## policyVersionId: JString (required)
                                                                         ##                  
                                                                         ## : 
                                                                         ## The 
                                                                         ## policy 
                                                                         ## version 
                                                                         ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402658053 = path.getOrDefault("policyName")
  valid_402658053 = validateParameter(valid_402658053, JString, required = true,
                                      default = nil)
  if valid_402658053 != nil:
    section.add "policyName", valid_402658053
  var valid_402658054 = path.getOrDefault("policyVersionId")
  valid_402658054 = validateParameter(valid_402658054, JString, required = true,
                                      default = nil)
  if valid_402658054 != nil:
    section.add "policyVersionId", valid_402658054
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658055 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658055 = validateParameter(valid_402658055, JString,
                                      required = false, default = nil)
  if valid_402658055 != nil:
    section.add "X-Amz-Security-Token", valid_402658055
  var valid_402658056 = header.getOrDefault("X-Amz-Signature")
  valid_402658056 = validateParameter(valid_402658056, JString,
                                      required = false, default = nil)
  if valid_402658056 != nil:
    section.add "X-Amz-Signature", valid_402658056
  var valid_402658057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658057 = validateParameter(valid_402658057, JString,
                                      required = false, default = nil)
  if valid_402658057 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658057
  var valid_402658058 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658058 = validateParameter(valid_402658058, JString,
                                      required = false, default = nil)
  if valid_402658058 != nil:
    section.add "X-Amz-Algorithm", valid_402658058
  var valid_402658059 = header.getOrDefault("X-Amz-Date")
  valid_402658059 = validateParameter(valid_402658059, JString,
                                      required = false, default = nil)
  if valid_402658059 != nil:
    section.add "X-Amz-Date", valid_402658059
  var valid_402658060 = header.getOrDefault("X-Amz-Credential")
  valid_402658060 = validateParameter(valid_402658060, JString,
                                      required = false, default = nil)
  if valid_402658060 != nil:
    section.add "X-Amz-Credential", valid_402658060
  var valid_402658061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658061 = validateParameter(valid_402658061, JString,
                                      required = false, default = nil)
  if valid_402658061 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658062: Call_GetPolicyVersion_402658050;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the specified policy version.
                                                                                         ## 
  let valid = call_402658062.validator(path, query, header, formData, body, _)
  let scheme = call_402658062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658062.makeUrl(scheme.get, call_402658062.host, call_402658062.base,
                                   call_402658062.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658062, uri, valid, _)

proc call*(call_402658063: Call_GetPolicyVersion_402658050; policyName: string;
           policyVersionId: string): Recallable =
  ## getPolicyVersion
  ## Gets information about the specified policy version.
  ##   policyName: string (required)
                                                         ##             : The name of the policy.
  ##   
                                                                                                 ## policyVersionId: string (required)
                                                                                                 ##                  
                                                                                                 ## : 
                                                                                                 ## The 
                                                                                                 ## policy 
                                                                                                 ## version 
                                                                                                 ## ID.
  var path_402658064 = newJObject()
  add(path_402658064, "policyName", newJString(policyName))
  add(path_402658064, "policyVersionId", newJString(policyVersionId))
  result = call_402658063.call(path_402658064, nil, nil, nil, nil)

var getPolicyVersion* = Call_GetPolicyVersion_402658050(
    name: "getPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/policies/{policyName}/version/{policyVersionId}",
    validator: validate_GetPolicyVersion_402658051, base: "/",
    makeUrl: url_GetPolicyVersion_402658052,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetDefaultPolicyVersion_402658080 = ref object of OpenApiRestCall_402656044
proc url_SetDefaultPolicyVersion_402658082(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  assert "policyVersionId" in path,
         "`policyVersionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName"),
                 (kind: ConstantSegment, value: "/version/"),
                 (kind: VariableSegment, value: "policyVersionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_SetDefaultPolicyVersion_402658081(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The policy name.
  ##   
                                                                  ## policyVersionId: JString (required)
                                                                  ##                  
                                                                  ## : 
                                                                  ## The policy version ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402658083 = path.getOrDefault("policyName")
  valid_402658083 = validateParameter(valid_402658083, JString, required = true,
                                      default = nil)
  if valid_402658083 != nil:
    section.add "policyName", valid_402658083
  var valid_402658084 = path.getOrDefault("policyVersionId")
  valid_402658084 = validateParameter(valid_402658084, JString, required = true,
                                      default = nil)
  if valid_402658084 != nil:
    section.add "policyVersionId", valid_402658084
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658085 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658085 = validateParameter(valid_402658085, JString,
                                      required = false, default = nil)
  if valid_402658085 != nil:
    section.add "X-Amz-Security-Token", valid_402658085
  var valid_402658086 = header.getOrDefault("X-Amz-Signature")
  valid_402658086 = validateParameter(valid_402658086, JString,
                                      required = false, default = nil)
  if valid_402658086 != nil:
    section.add "X-Amz-Signature", valid_402658086
  var valid_402658087 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658087 = validateParameter(valid_402658087, JString,
                                      required = false, default = nil)
  if valid_402658087 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658087
  var valid_402658088 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658088 = validateParameter(valid_402658088, JString,
                                      required = false, default = nil)
  if valid_402658088 != nil:
    section.add "X-Amz-Algorithm", valid_402658088
  var valid_402658089 = header.getOrDefault("X-Amz-Date")
  valid_402658089 = validateParameter(valid_402658089, JString,
                                      required = false, default = nil)
  if valid_402658089 != nil:
    section.add "X-Amz-Date", valid_402658089
  var valid_402658090 = header.getOrDefault("X-Amz-Credential")
  valid_402658090 = validateParameter(valid_402658090, JString,
                                      required = false, default = nil)
  if valid_402658090 != nil:
    section.add "X-Amz-Credential", valid_402658090
  var valid_402658091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658091 = validateParameter(valid_402658091, JString,
                                      required = false, default = nil)
  if valid_402658091 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658091
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658092: Call_SetDefaultPolicyVersion_402658080;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.
                                                                                         ## 
  let valid = call_402658092.validator(path, query, header, formData, body, _)
  let scheme = call_402658092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658092.makeUrl(scheme.get, call_402658092.host, call_402658092.base,
                                   call_402658092.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658092, uri, valid, _)

proc call*(call_402658093: Call_SetDefaultPolicyVersion_402658080;
           policyName: string; policyVersionId: string): Recallable =
  ## setDefaultPolicyVersion
  ## Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.
  ##   
                                                                                                                                                                                                                                                             ## policyName: string (required)
                                                                                                                                                                                                                                                             ##             
                                                                                                                                                                                                                                                             ## : 
                                                                                                                                                                                                                                                             ## The 
                                                                                                                                                                                                                                                             ## policy 
                                                                                                                                                                                                                                                             ## name.
  ##   
                                                                                                                                                                                                                                                                     ## policyVersionId: string (required)
                                                                                                                                                                                                                                                                     ##                  
                                                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                                                                     ## policy 
                                                                                                                                                                                                                                                                     ## version 
                                                                                                                                                                                                                                                                     ## ID.
  var path_402658094 = newJObject()
  add(path_402658094, "policyName", newJString(policyName))
  add(path_402658094, "policyVersionId", newJString(policyVersionId))
  result = call_402658093.call(path_402658094, nil, nil, nil, nil)

var setDefaultPolicyVersion* = Call_SetDefaultPolicyVersion_402658080(
    name: "setDefaultPolicyVersion", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/policies/{policyName}/version/{policyVersionId}",
    validator: validate_SetDefaultPolicyVersion_402658081, base: "/",
    makeUrl: url_SetDefaultPolicyVersion_402658082,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeletePolicyVersion_402658065 = ref object of OpenApiRestCall_402656044
proc url_DeletePolicyVersion_402658067(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  assert "policyVersionId" in path,
         "`policyVersionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policies/"),
                 (kind: VariableSegment, value: "policyName"),
                 (kind: ConstantSegment, value: "/version/"),
                 (kind: VariableSegment, value: "policyVersionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeletePolicyVersion_402658066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The name of the policy.
  ##   
                                                                         ## policyVersionId: JString (required)
                                                                         ##                  
                                                                         ## : 
                                                                         ## The 
                                                                         ## policy 
                                                                         ## version 
                                                                         ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402658068 = path.getOrDefault("policyName")
  valid_402658068 = validateParameter(valid_402658068, JString, required = true,
                                      default = nil)
  if valid_402658068 != nil:
    section.add "policyName", valid_402658068
  var valid_402658069 = path.getOrDefault("policyVersionId")
  valid_402658069 = validateParameter(valid_402658069, JString, required = true,
                                      default = nil)
  if valid_402658069 != nil:
    section.add "policyVersionId", valid_402658069
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658070 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658070 = validateParameter(valid_402658070, JString,
                                      required = false, default = nil)
  if valid_402658070 != nil:
    section.add "X-Amz-Security-Token", valid_402658070
  var valid_402658071 = header.getOrDefault("X-Amz-Signature")
  valid_402658071 = validateParameter(valid_402658071, JString,
                                      required = false, default = nil)
  if valid_402658071 != nil:
    section.add "X-Amz-Signature", valid_402658071
  var valid_402658072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658072 = validateParameter(valid_402658072, JString,
                                      required = false, default = nil)
  if valid_402658072 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658072
  var valid_402658073 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658073 = validateParameter(valid_402658073, JString,
                                      required = false, default = nil)
  if valid_402658073 != nil:
    section.add "X-Amz-Algorithm", valid_402658073
  var valid_402658074 = header.getOrDefault("X-Amz-Date")
  valid_402658074 = validateParameter(valid_402658074, JString,
                                      required = false, default = nil)
  if valid_402658074 != nil:
    section.add "X-Amz-Date", valid_402658074
  var valid_402658075 = header.getOrDefault("X-Amz-Credential")
  valid_402658075 = validateParameter(valid_402658075, JString,
                                      required = false, default = nil)
  if valid_402658075 != nil:
    section.add "X-Amz-Credential", valid_402658075
  var valid_402658076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658076 = validateParameter(valid_402658076, JString,
                                      required = false, default = nil)
  if valid_402658076 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658076
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658077: Call_DeletePolicyVersion_402658065;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.
                                                                                         ## 
  let valid = call_402658077.validator(path, query, header, formData, body, _)
  let scheme = call_402658077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658077.makeUrl(scheme.get, call_402658077.host, call_402658077.base,
                                   call_402658077.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658077, uri, valid, _)

proc call*(call_402658078: Call_DeletePolicyVersion_402658065;
           policyName: string; policyVersionId: string): Recallable =
  ## deletePolicyVersion
  ## Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.
  ##   
                                                                                                                                                                                                                                                                                                 ## policyName: string (required)
                                                                                                                                                                                                                                                                                                 ##             
                                                                                                                                                                                                                                                                                                 ## : 
                                                                                                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                                                                                                 ## name 
                                                                                                                                                                                                                                                                                                 ## of 
                                                                                                                                                                                                                                                                                                 ## the 
                                                                                                                                                                                                                                                                                                 ## policy.
  ##   
                                                                                                                                                                                                                                                                                                           ## policyVersionId: string (required)
                                                                                                                                                                                                                                                                                                           ##                  
                                                                                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                                                                                                           ## policy 
                                                                                                                                                                                                                                                                                                           ## version 
                                                                                                                                                                                                                                                                                                           ## ID.
  var path_402658079 = newJObject()
  add(path_402658079, "policyName", newJString(policyName))
  add(path_402658079, "policyVersionId", newJString(policyVersionId))
  result = call_402658078.call(path_402658079, nil, nil, nil, nil)

var deletePolicyVersion* = Call_DeletePolicyVersion_402658065(
    name: "deletePolicyVersion", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/policies/{policyName}/version/{policyVersionId}",
    validator: validate_DeletePolicyVersion_402658066, base: "/",
    makeUrl: url_DeletePolicyVersion_402658067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeProvisioningTemplate_402658095 = ref object of OpenApiRestCall_402656044
proc url_DescribeProvisioningTemplate_402658097(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeProvisioningTemplate_402658096(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about a fleet provisioning template.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
                                 ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `templateName` field"
  var valid_402658098 = path.getOrDefault("templateName")
  valid_402658098 = validateParameter(valid_402658098, JString, required = true,
                                      default = nil)
  if valid_402658098 != nil:
    section.add "templateName", valid_402658098
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658099 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658099 = validateParameter(valid_402658099, JString,
                                      required = false, default = nil)
  if valid_402658099 != nil:
    section.add "X-Amz-Security-Token", valid_402658099
  var valid_402658100 = header.getOrDefault("X-Amz-Signature")
  valid_402658100 = validateParameter(valid_402658100, JString,
                                      required = false, default = nil)
  if valid_402658100 != nil:
    section.add "X-Amz-Signature", valid_402658100
  var valid_402658101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658101 = validateParameter(valid_402658101, JString,
                                      required = false, default = nil)
  if valid_402658101 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658101
  var valid_402658102 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658102 = validateParameter(valid_402658102, JString,
                                      required = false, default = nil)
  if valid_402658102 != nil:
    section.add "X-Amz-Algorithm", valid_402658102
  var valid_402658103 = header.getOrDefault("X-Amz-Date")
  valid_402658103 = validateParameter(valid_402658103, JString,
                                      required = false, default = nil)
  if valid_402658103 != nil:
    section.add "X-Amz-Date", valid_402658103
  var valid_402658104 = header.getOrDefault("X-Amz-Credential")
  valid_402658104 = validateParameter(valid_402658104, JString,
                                      required = false, default = nil)
  if valid_402658104 != nil:
    section.add "X-Amz-Credential", valid_402658104
  var valid_402658105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658105 = validateParameter(valid_402658105, JString,
                                      required = false, default = nil)
  if valid_402658105 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658106: Call_DescribeProvisioningTemplate_402658095;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a fleet provisioning template.
                                                                                         ## 
  let valid = call_402658106.validator(path, query, header, formData, body, _)
  let scheme = call_402658106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658106.makeUrl(scheme.get, call_402658106.host, call_402658106.base,
                                   call_402658106.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658106, uri, valid, _)

proc call*(call_402658107: Call_DescribeProvisioningTemplate_402658095;
           templateName: string): Recallable =
  ## describeProvisioningTemplate
  ## Returns information about a fleet provisioning template.
  ##   templateName: string (required)
                                                             ##               : The name of the fleet provisioning template.
  var path_402658108 = newJObject()
  add(path_402658108, "templateName", newJString(templateName))
  result = call_402658107.call(path_402658108, nil, nil, nil, nil)

var describeProvisioningTemplate* = Call_DescribeProvisioningTemplate_402658095(
    name: "describeProvisioningTemplate", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/provisioning-templates/{templateName}",
    validator: validate_DescribeProvisioningTemplate_402658096, base: "/",
    makeUrl: url_DescribeProvisioningTemplate_402658097,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateProvisioningTemplate_402658123 = ref object of OpenApiRestCall_402656044
proc url_UpdateProvisioningTemplate_402658125(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateProvisioningTemplate_402658124(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Updates a fleet provisioning template.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
                                 ##               : The name of the fleet provisioning template.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `templateName` field"
  var valid_402658126 = path.getOrDefault("templateName")
  valid_402658126 = validateParameter(valid_402658126, JString, required = true,
                                      default = nil)
  if valid_402658126 != nil:
    section.add "templateName", valid_402658126
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658127 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658127 = validateParameter(valid_402658127, JString,
                                      required = false, default = nil)
  if valid_402658127 != nil:
    section.add "X-Amz-Security-Token", valid_402658127
  var valid_402658128 = header.getOrDefault("X-Amz-Signature")
  valid_402658128 = validateParameter(valid_402658128, JString,
                                      required = false, default = nil)
  if valid_402658128 != nil:
    section.add "X-Amz-Signature", valid_402658128
  var valid_402658129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658129 = validateParameter(valid_402658129, JString,
                                      required = false, default = nil)
  if valid_402658129 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658129
  var valid_402658130 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658130 = validateParameter(valid_402658130, JString,
                                      required = false, default = nil)
  if valid_402658130 != nil:
    section.add "X-Amz-Algorithm", valid_402658130
  var valid_402658131 = header.getOrDefault("X-Amz-Date")
  valid_402658131 = validateParameter(valid_402658131, JString,
                                      required = false, default = nil)
  if valid_402658131 != nil:
    section.add "X-Amz-Date", valid_402658131
  var valid_402658132 = header.getOrDefault("X-Amz-Credential")
  valid_402658132 = validateParameter(valid_402658132, JString,
                                      required = false, default = nil)
  if valid_402658132 != nil:
    section.add "X-Amz-Credential", valid_402658132
  var valid_402658133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658133 = validateParameter(valid_402658133, JString,
                                      required = false, default = nil)
  if valid_402658133 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658135: Call_UpdateProvisioningTemplate_402658123;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a fleet provisioning template.
                                                                                         ## 
  let valid = call_402658135.validator(path, query, header, formData, body, _)
  let scheme = call_402658135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658135.makeUrl(scheme.get, call_402658135.host, call_402658135.base,
                                   call_402658135.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658135, uri, valid, _)

proc call*(call_402658136: Call_UpdateProvisioningTemplate_402658123;
           body: JsonNode; templateName: string): Recallable =
  ## updateProvisioningTemplate
  ## Updates a fleet provisioning template.
  ##   body: JObject (required)
  ##   templateName: string (required)
                               ##               : The name of the fleet provisioning template.
  var path_402658137 = newJObject()
  var body_402658138 = newJObject()
  if body != nil:
    body_402658138 = body
  add(path_402658137, "templateName", newJString(templateName))
  result = call_402658136.call(path_402658137, nil, nil, nil, body_402658138)

var updateProvisioningTemplate* = Call_UpdateProvisioningTemplate_402658123(
    name: "updateProvisioningTemplate", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/provisioning-templates/{templateName}",
    validator: validate_UpdateProvisioningTemplate_402658124, base: "/",
    makeUrl: url_UpdateProvisioningTemplate_402658125,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProvisioningTemplate_402658109 = ref object of OpenApiRestCall_402656044
proc url_DeleteProvisioningTemplate_402658111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteProvisioningTemplate_402658110(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a fleet provisioning template.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   templateName: JString (required)
                                 ##               : The name of the fleet provision template to delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `templateName` field"
  var valid_402658112 = path.getOrDefault("templateName")
  valid_402658112 = validateParameter(valid_402658112, JString, required = true,
                                      default = nil)
  if valid_402658112 != nil:
    section.add "templateName", valid_402658112
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658113 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658113 = validateParameter(valid_402658113, JString,
                                      required = false, default = nil)
  if valid_402658113 != nil:
    section.add "X-Amz-Security-Token", valid_402658113
  var valid_402658114 = header.getOrDefault("X-Amz-Signature")
  valid_402658114 = validateParameter(valid_402658114, JString,
                                      required = false, default = nil)
  if valid_402658114 != nil:
    section.add "X-Amz-Signature", valid_402658114
  var valid_402658115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658115 = validateParameter(valid_402658115, JString,
                                      required = false, default = nil)
  if valid_402658115 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658115
  var valid_402658116 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658116 = validateParameter(valid_402658116, JString,
                                      required = false, default = nil)
  if valid_402658116 != nil:
    section.add "X-Amz-Algorithm", valid_402658116
  var valid_402658117 = header.getOrDefault("X-Amz-Date")
  valid_402658117 = validateParameter(valid_402658117, JString,
                                      required = false, default = nil)
  if valid_402658117 != nil:
    section.add "X-Amz-Date", valid_402658117
  var valid_402658118 = header.getOrDefault("X-Amz-Credential")
  valid_402658118 = validateParameter(valid_402658118, JString,
                                      required = false, default = nil)
  if valid_402658118 != nil:
    section.add "X-Amz-Credential", valid_402658118
  var valid_402658119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658119 = validateParameter(valid_402658119, JString,
                                      required = false, default = nil)
  if valid_402658119 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658119
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658120: Call_DeleteProvisioningTemplate_402658109;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a fleet provisioning template.
                                                                                         ## 
  let valid = call_402658120.validator(path, query, header, formData, body, _)
  let scheme = call_402658120.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658120.makeUrl(scheme.get, call_402658120.host, call_402658120.base,
                                   call_402658120.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658120, uri, valid, _)

proc call*(call_402658121: Call_DeleteProvisioningTemplate_402658109;
           templateName: string): Recallable =
  ## deleteProvisioningTemplate
  ## Deletes a fleet provisioning template.
  ##   templateName: string (required)
                                           ##               : The name of the fleet provision template to delete.
  var path_402658122 = newJObject()
  add(path_402658122, "templateName", newJString(templateName))
  result = call_402658121.call(path_402658122, nil, nil, nil, nil)

var deleteProvisioningTemplate* = Call_DeleteProvisioningTemplate_402658109(
    name: "deleteProvisioningTemplate", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/provisioning-templates/{templateName}",
    validator: validate_DeleteProvisioningTemplate_402658110, base: "/",
    makeUrl: url_DeleteProvisioningTemplate_402658111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeProvisioningTemplateVersion_402658139 = ref object of OpenApiRestCall_402656044
proc url_DescribeProvisioningTemplateVersion_402658141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  assert "versionId" in path, "`versionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName"),
                 (kind: ConstantSegment, value: "/versions/"),
                 (kind: VariableSegment, value: "versionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeProvisioningTemplateVersion_402658140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about a fleet provisioning template version.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   versionId: JInt (required)
                                 ##            : The fleet provisioning template version ID.
  ##   
                                                                                            ## templateName: JString (required)
                                                                                            ##               
                                                                                            ## : 
                                                                                            ## The 
                                                                                            ## template 
                                                                                            ## name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `versionId` field"
  var valid_402658142 = path.getOrDefault("versionId")
  valid_402658142 = validateParameter(valid_402658142, JInt, required = true,
                                      default = nil)
  if valid_402658142 != nil:
    section.add "versionId", valid_402658142
  var valid_402658143 = path.getOrDefault("templateName")
  valid_402658143 = validateParameter(valid_402658143, JString, required = true,
                                      default = nil)
  if valid_402658143 != nil:
    section.add "templateName", valid_402658143
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658144 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658144 = validateParameter(valid_402658144, JString,
                                      required = false, default = nil)
  if valid_402658144 != nil:
    section.add "X-Amz-Security-Token", valid_402658144
  var valid_402658145 = header.getOrDefault("X-Amz-Signature")
  valid_402658145 = validateParameter(valid_402658145, JString,
                                      required = false, default = nil)
  if valid_402658145 != nil:
    section.add "X-Amz-Signature", valid_402658145
  var valid_402658146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658146 = validateParameter(valid_402658146, JString,
                                      required = false, default = nil)
  if valid_402658146 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658146
  var valid_402658147 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658147 = validateParameter(valid_402658147, JString,
                                      required = false, default = nil)
  if valid_402658147 != nil:
    section.add "X-Amz-Algorithm", valid_402658147
  var valid_402658148 = header.getOrDefault("X-Amz-Date")
  valid_402658148 = validateParameter(valid_402658148, JString,
                                      required = false, default = nil)
  if valid_402658148 != nil:
    section.add "X-Amz-Date", valid_402658148
  var valid_402658149 = header.getOrDefault("X-Amz-Credential")
  valid_402658149 = validateParameter(valid_402658149, JString,
                                      required = false, default = nil)
  if valid_402658149 != nil:
    section.add "X-Amz-Credential", valid_402658149
  var valid_402658150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658150 = validateParameter(valid_402658150, JString,
                                      required = false, default = nil)
  if valid_402658150 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658150
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658151: Call_DescribeProvisioningTemplateVersion_402658139;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a fleet provisioning template version.
                                                                                         ## 
  let valid = call_402658151.validator(path, query, header, formData, body, _)
  let scheme = call_402658151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658151.makeUrl(scheme.get, call_402658151.host, call_402658151.base,
                                   call_402658151.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658151, uri, valid, _)

proc call*(call_402658152: Call_DescribeProvisioningTemplateVersion_402658139;
           versionId: int; templateName: string): Recallable =
  ## describeProvisioningTemplateVersion
  ## Returns information about a fleet provisioning template version.
  ##   versionId: int (required)
                                                                     ##            : The fleet provisioning template version ID.
  ##   
                                                                                                                                ## templateName: string (required)
                                                                                                                                ##               
                                                                                                                                ## : 
                                                                                                                                ## The 
                                                                                                                                ## template 
                                                                                                                                ## name.
  var path_402658153 = newJObject()
  add(path_402658153, "versionId", newJInt(versionId))
  add(path_402658153, "templateName", newJString(templateName))
  result = call_402658152.call(path_402658153, nil, nil, nil, nil)

var describeProvisioningTemplateVersion* = Call_DescribeProvisioningTemplateVersion_402658139(
    name: "describeProvisioningTemplateVersion", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions/{versionId}",
    validator: validate_DescribeProvisioningTemplateVersion_402658140,
    base: "/", makeUrl: url_DescribeProvisioningTemplateVersion_402658141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteProvisioningTemplateVersion_402658154 = ref object of OpenApiRestCall_402656044
proc url_DeleteProvisioningTemplateVersion_402658156(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "templateName" in path, "`templateName` is a required path parameter"
  assert "versionId" in path, "`versionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/provisioning-templates/"),
                 (kind: VariableSegment, value: "templateName"),
                 (kind: ConstantSegment, value: "/versions/"),
                 (kind: VariableSegment, value: "versionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteProvisioningTemplateVersion_402658155(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a fleet provisioning template version.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   versionId: JInt (required)
                                 ##            : The fleet provisioning template version ID to delete.
  ##   
                                                                                                      ## templateName: JString (required)
                                                                                                      ##               
                                                                                                      ## : 
                                                                                                      ## The 
                                                                                                      ## name 
                                                                                                      ## of 
                                                                                                      ## the 
                                                                                                      ## fleet 
                                                                                                      ## provisioning 
                                                                                                      ## template 
                                                                                                      ## version 
                                                                                                      ## to 
                                                                                                      ## delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `versionId` field"
  var valid_402658157 = path.getOrDefault("versionId")
  valid_402658157 = validateParameter(valid_402658157, JInt, required = true,
                                      default = nil)
  if valid_402658157 != nil:
    section.add "versionId", valid_402658157
  var valid_402658158 = path.getOrDefault("templateName")
  valid_402658158 = validateParameter(valid_402658158, JString, required = true,
                                      default = nil)
  if valid_402658158 != nil:
    section.add "templateName", valid_402658158
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658159 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658159 = validateParameter(valid_402658159, JString,
                                      required = false, default = nil)
  if valid_402658159 != nil:
    section.add "X-Amz-Security-Token", valid_402658159
  var valid_402658160 = header.getOrDefault("X-Amz-Signature")
  valid_402658160 = validateParameter(valid_402658160, JString,
                                      required = false, default = nil)
  if valid_402658160 != nil:
    section.add "X-Amz-Signature", valid_402658160
  var valid_402658161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658161 = validateParameter(valid_402658161, JString,
                                      required = false, default = nil)
  if valid_402658161 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658161
  var valid_402658162 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658162 = validateParameter(valid_402658162, JString,
                                      required = false, default = nil)
  if valid_402658162 != nil:
    section.add "X-Amz-Algorithm", valid_402658162
  var valid_402658163 = header.getOrDefault("X-Amz-Date")
  valid_402658163 = validateParameter(valid_402658163, JString,
                                      required = false, default = nil)
  if valid_402658163 != nil:
    section.add "X-Amz-Date", valid_402658163
  var valid_402658164 = header.getOrDefault("X-Amz-Credential")
  valid_402658164 = validateParameter(valid_402658164, JString,
                                      required = false, default = nil)
  if valid_402658164 != nil:
    section.add "X-Amz-Credential", valid_402658164
  var valid_402658165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658165 = validateParameter(valid_402658165, JString,
                                      required = false, default = nil)
  if valid_402658165 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658165
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658166: Call_DeleteProvisioningTemplateVersion_402658154;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a fleet provisioning template version.
                                                                                         ## 
  let valid = call_402658166.validator(path, query, header, formData, body, _)
  let scheme = call_402658166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658166.makeUrl(scheme.get, call_402658166.host, call_402658166.base,
                                   call_402658166.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658166, uri, valid, _)

proc call*(call_402658167: Call_DeleteProvisioningTemplateVersion_402658154;
           versionId: int; templateName: string): Recallable =
  ## deleteProvisioningTemplateVersion
  ## Deletes a fleet provisioning template version.
  ##   versionId: int (required)
                                                   ##            : The fleet provisioning template version ID to delete.
  ##   
                                                                                                                        ## templateName: string (required)
                                                                                                                        ##               
                                                                                                                        ## : 
                                                                                                                        ## The 
                                                                                                                        ## name 
                                                                                                                        ## of 
                                                                                                                        ## the 
                                                                                                                        ## fleet 
                                                                                                                        ## provisioning 
                                                                                                                        ## template 
                                                                                                                        ## version 
                                                                                                                        ## to 
                                                                                                                        ## delete.
  var path_402658168 = newJObject()
  add(path_402658168, "versionId", newJInt(versionId))
  add(path_402658168, "templateName", newJString(templateName))
  result = call_402658167.call(path_402658168, nil, nil, nil, nil)

var deleteProvisioningTemplateVersion* = Call_DeleteProvisioningTemplateVersion_402658154(
    name: "deleteProvisioningTemplateVersion", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com",
    route: "/provisioning-templates/{templateName}/versions/{versionId}",
    validator: validate_DeleteProvisioningTemplateVersion_402658155, base: "/",
    makeUrl: url_DeleteProvisioningTemplateVersion_402658156,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegistrationCode_402658169 = ref object of OpenApiRestCall_402656044
proc url_GetRegistrationCode_402658171(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegistrationCode_402658170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a registration code used to register a CA certificate with AWS IoT.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658172 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658172 = validateParameter(valid_402658172, JString,
                                      required = false, default = nil)
  if valid_402658172 != nil:
    section.add "X-Amz-Security-Token", valid_402658172
  var valid_402658173 = header.getOrDefault("X-Amz-Signature")
  valid_402658173 = validateParameter(valid_402658173, JString,
                                      required = false, default = nil)
  if valid_402658173 != nil:
    section.add "X-Amz-Signature", valid_402658173
  var valid_402658174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658174 = validateParameter(valid_402658174, JString,
                                      required = false, default = nil)
  if valid_402658174 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658174
  var valid_402658175 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658175 = validateParameter(valid_402658175, JString,
                                      required = false, default = nil)
  if valid_402658175 != nil:
    section.add "X-Amz-Algorithm", valid_402658175
  var valid_402658176 = header.getOrDefault("X-Amz-Date")
  valid_402658176 = validateParameter(valid_402658176, JString,
                                      required = false, default = nil)
  if valid_402658176 != nil:
    section.add "X-Amz-Date", valid_402658176
  var valid_402658177 = header.getOrDefault("X-Amz-Credential")
  valid_402658177 = validateParameter(valid_402658177, JString,
                                      required = false, default = nil)
  if valid_402658177 != nil:
    section.add "X-Amz-Credential", valid_402658177
  var valid_402658178 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658178 = validateParameter(valid_402658178, JString,
                                      required = false, default = nil)
  if valid_402658178 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658178
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658179: Call_GetRegistrationCode_402658169;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a registration code used to register a CA certificate with AWS IoT.
                                                                                         ## 
  let valid = call_402658179.validator(path, query, header, formData, body, _)
  let scheme = call_402658179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658179.makeUrl(scheme.get, call_402658179.host, call_402658179.base,
                                   call_402658179.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658179, uri, valid, _)

proc call*(call_402658180: Call_GetRegistrationCode_402658169): Recallable =
  ## getRegistrationCode
  ## Gets a registration code used to register a CA certificate with AWS IoT.
  result = call_402658180.call(nil, nil, nil, nil, nil)

var getRegistrationCode* = Call_GetRegistrationCode_402658169(
    name: "getRegistrationCode", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/registrationcode",
    validator: validate_GetRegistrationCode_402658170, base: "/",
    makeUrl: url_GetRegistrationCode_402658171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRegistrationCode_402658181 = ref object of OpenApiRestCall_402656044
proc url_DeleteRegistrationCode_402658183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DeleteRegistrationCode_402658182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a CA certificate registration code.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658184 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658184 = validateParameter(valid_402658184, JString,
                                      required = false, default = nil)
  if valid_402658184 != nil:
    section.add "X-Amz-Security-Token", valid_402658184
  var valid_402658185 = header.getOrDefault("X-Amz-Signature")
  valid_402658185 = validateParameter(valid_402658185, JString,
                                      required = false, default = nil)
  if valid_402658185 != nil:
    section.add "X-Amz-Signature", valid_402658185
  var valid_402658186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658186 = validateParameter(valid_402658186, JString,
                                      required = false, default = nil)
  if valid_402658186 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658186
  var valid_402658187 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658187 = validateParameter(valid_402658187, JString,
                                      required = false, default = nil)
  if valid_402658187 != nil:
    section.add "X-Amz-Algorithm", valid_402658187
  var valid_402658188 = header.getOrDefault("X-Amz-Date")
  valid_402658188 = validateParameter(valid_402658188, JString,
                                      required = false, default = nil)
  if valid_402658188 != nil:
    section.add "X-Amz-Date", valid_402658188
  var valid_402658189 = header.getOrDefault("X-Amz-Credential")
  valid_402658189 = validateParameter(valid_402658189, JString,
                                      required = false, default = nil)
  if valid_402658189 != nil:
    section.add "X-Amz-Credential", valid_402658189
  var valid_402658190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658190 = validateParameter(valid_402658190, JString,
                                      required = false, default = nil)
  if valid_402658190 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658190
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658191: Call_DeleteRegistrationCode_402658181;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a CA certificate registration code.
                                                                                         ## 
  let valid = call_402658191.validator(path, query, header, formData, body, _)
  let scheme = call_402658191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658191.makeUrl(scheme.get, call_402658191.host, call_402658191.base,
                                   call_402658191.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658191, uri, valid, _)

proc call*(call_402658192: Call_DeleteRegistrationCode_402658181): Recallable =
  ## deleteRegistrationCode
  ## Deletes a CA certificate registration code.
  result = call_402658192.call(nil, nil, nil, nil, nil)

var deleteRegistrationCode* = Call_DeleteRegistrationCode_402658181(
    name: "deleteRegistrationCode", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/registrationcode",
    validator: validate_DeleteRegistrationCode_402658182, base: "/",
    makeUrl: url_DeleteRegistrationCode_402658183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTopicRuleDestination_402658193 = ref object of OpenApiRestCall_402656044
proc url_GetTopicRuleDestination_402658195(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "arn" in path, "`arn` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/destinations/"),
                 (kind: VariableSegment, value: "arn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetTopicRuleDestination_402658194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a topic rule destination.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   arn: JString (required)
                                 ##      : The ARN of the topic rule destination.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `arn` field"
  var valid_402658196 = path.getOrDefault("arn")
  valid_402658196 = validateParameter(valid_402658196, JString, required = true,
                                      default = nil)
  if valid_402658196 != nil:
    section.add "arn", valid_402658196
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658197 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658197 = validateParameter(valid_402658197, JString,
                                      required = false, default = nil)
  if valid_402658197 != nil:
    section.add "X-Amz-Security-Token", valid_402658197
  var valid_402658198 = header.getOrDefault("X-Amz-Signature")
  valid_402658198 = validateParameter(valid_402658198, JString,
                                      required = false, default = nil)
  if valid_402658198 != nil:
    section.add "X-Amz-Signature", valid_402658198
  var valid_402658199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658199 = validateParameter(valid_402658199, JString,
                                      required = false, default = nil)
  if valid_402658199 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658199
  var valid_402658200 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658200 = validateParameter(valid_402658200, JString,
                                      required = false, default = nil)
  if valid_402658200 != nil:
    section.add "X-Amz-Algorithm", valid_402658200
  var valid_402658201 = header.getOrDefault("X-Amz-Date")
  valid_402658201 = validateParameter(valid_402658201, JString,
                                      required = false, default = nil)
  if valid_402658201 != nil:
    section.add "X-Amz-Date", valid_402658201
  var valid_402658202 = header.getOrDefault("X-Amz-Credential")
  valid_402658202 = validateParameter(valid_402658202, JString,
                                      required = false, default = nil)
  if valid_402658202 != nil:
    section.add "X-Amz-Credential", valid_402658202
  var valid_402658203 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658203 = validateParameter(valid_402658203, JString,
                                      required = false, default = nil)
  if valid_402658203 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658204: Call_GetTopicRuleDestination_402658193;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a topic rule destination.
                                                                                         ## 
  let valid = call_402658204.validator(path, query, header, formData, body, _)
  let scheme = call_402658204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658204.makeUrl(scheme.get, call_402658204.host, call_402658204.base,
                                   call_402658204.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658204, uri, valid, _)

proc call*(call_402658205: Call_GetTopicRuleDestination_402658193; arn: string): Recallable =
  ## getTopicRuleDestination
  ## Gets information about a topic rule destination.
  ##   arn: string (required)
                                                     ##      : The ARN of the topic rule destination.
  var path_402658206 = newJObject()
  add(path_402658206, "arn", newJString(arn))
  result = call_402658205.call(path_402658206, nil, nil, nil, nil)

var getTopicRuleDestination* = Call_GetTopicRuleDestination_402658193(
    name: "getTopicRuleDestination", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/destinations/{arn}",
    validator: validate_GetTopicRuleDestination_402658194, base: "/",
    makeUrl: url_GetTopicRuleDestination_402658195,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteTopicRuleDestination_402658207 = ref object of OpenApiRestCall_402656044
proc url_DeleteTopicRuleDestination_402658209(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "arn" in path, "`arn` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/destinations/"),
                 (kind: VariableSegment, value: "arn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteTopicRuleDestination_402658208(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a topic rule destination.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   arn: JString (required)
                                 ##      : The ARN of the topic rule destination to delete.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `arn` field"
  var valid_402658210 = path.getOrDefault("arn")
  valid_402658210 = validateParameter(valid_402658210, JString, required = true,
                                      default = nil)
  if valid_402658210 != nil:
    section.add "arn", valid_402658210
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658211 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658211 = validateParameter(valid_402658211, JString,
                                      required = false, default = nil)
  if valid_402658211 != nil:
    section.add "X-Amz-Security-Token", valid_402658211
  var valid_402658212 = header.getOrDefault("X-Amz-Signature")
  valid_402658212 = validateParameter(valid_402658212, JString,
                                      required = false, default = nil)
  if valid_402658212 != nil:
    section.add "X-Amz-Signature", valid_402658212
  var valid_402658213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658213 = validateParameter(valid_402658213, JString,
                                      required = false, default = nil)
  if valid_402658213 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658213
  var valid_402658214 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658214 = validateParameter(valid_402658214, JString,
                                      required = false, default = nil)
  if valid_402658214 != nil:
    section.add "X-Amz-Algorithm", valid_402658214
  var valid_402658215 = header.getOrDefault("X-Amz-Date")
  valid_402658215 = validateParameter(valid_402658215, JString,
                                      required = false, default = nil)
  if valid_402658215 != nil:
    section.add "X-Amz-Date", valid_402658215
  var valid_402658216 = header.getOrDefault("X-Amz-Credential")
  valid_402658216 = validateParameter(valid_402658216, JString,
                                      required = false, default = nil)
  if valid_402658216 != nil:
    section.add "X-Amz-Credential", valid_402658216
  var valid_402658217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658217 = validateParameter(valid_402658217, JString,
                                      required = false, default = nil)
  if valid_402658217 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658217
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658218: Call_DeleteTopicRuleDestination_402658207;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a topic rule destination.
                                                                                         ## 
  let valid = call_402658218.validator(path, query, header, formData, body, _)
  let scheme = call_402658218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658218.makeUrl(scheme.get, call_402658218.host, call_402658218.base,
                                   call_402658218.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658218, uri, valid, _)

proc call*(call_402658219: Call_DeleteTopicRuleDestination_402658207;
           arn: string): Recallable =
  ## deleteTopicRuleDestination
  ## Deletes a topic rule destination.
  ##   arn: string (required)
                                      ##      : The ARN of the topic rule destination to delete.
  var path_402658220 = newJObject()
  add(path_402658220, "arn", newJString(arn))
  result = call_402658219.call(path_402658220, nil, nil, nil, nil)

var deleteTopicRuleDestination* = Call_DeleteTopicRuleDestination_402658207(
    name: "deleteTopicRuleDestination", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/destinations/{arn}",
    validator: validate_DeleteTopicRuleDestination_402658208, base: "/",
    makeUrl: url_DeleteTopicRuleDestination_402658209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteV2LoggingLevel_402658221 = ref object of OpenApiRestCall_402656044
proc url_DeleteV2LoggingLevel_402658223(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DeleteV2LoggingLevel_402658222(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a logging level.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   targetType: JString (required)
                                  ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   
                                                                                                                                                ## targetName: JString (required)
                                                                                                                                                ##             
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## name 
                                                                                                                                                ## of 
                                                                                                                                                ## the 
                                                                                                                                                ## resource 
                                                                                                                                                ## for 
                                                                                                                                                ## which 
                                                                                                                                                ## you 
                                                                                                                                                ## are 
                                                                                                                                                ## configuring 
                                                                                                                                                ## logging.
  section = newJObject()
  var valid_402658224 = query.getOrDefault("targetType")
  valid_402658224 = validateParameter(valid_402658224, JString, required = true,
                                      default = newJString("DEFAULT"))
  if valid_402658224 != nil:
    section.add "targetType", valid_402658224
  var valid_402658225 = query.getOrDefault("targetName")
  valid_402658225 = validateParameter(valid_402658225, JString, required = true,
                                      default = nil)
  if valid_402658225 != nil:
    section.add "targetName", valid_402658225
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658226 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658226 = validateParameter(valid_402658226, JString,
                                      required = false, default = nil)
  if valid_402658226 != nil:
    section.add "X-Amz-Security-Token", valid_402658226
  var valid_402658227 = header.getOrDefault("X-Amz-Signature")
  valid_402658227 = validateParameter(valid_402658227, JString,
                                      required = false, default = nil)
  if valid_402658227 != nil:
    section.add "X-Amz-Signature", valid_402658227
  var valid_402658228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658228 = validateParameter(valid_402658228, JString,
                                      required = false, default = nil)
  if valid_402658228 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658228
  var valid_402658229 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658229 = validateParameter(valid_402658229, JString,
                                      required = false, default = nil)
  if valid_402658229 != nil:
    section.add "X-Amz-Algorithm", valid_402658229
  var valid_402658230 = header.getOrDefault("X-Amz-Date")
  valid_402658230 = validateParameter(valid_402658230, JString,
                                      required = false, default = nil)
  if valid_402658230 != nil:
    section.add "X-Amz-Date", valid_402658230
  var valid_402658231 = header.getOrDefault("X-Amz-Credential")
  valid_402658231 = validateParameter(valid_402658231, JString,
                                      required = false, default = nil)
  if valid_402658231 != nil:
    section.add "X-Amz-Credential", valid_402658231
  var valid_402658232 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658232 = validateParameter(valid_402658232, JString,
                                      required = false, default = nil)
  if valid_402658232 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658232
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658233: Call_DeleteV2LoggingLevel_402658221;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a logging level.
                                                                                         ## 
  let valid = call_402658233.validator(path, query, header, formData, body, _)
  let scheme = call_402658233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658233.makeUrl(scheme.get, call_402658233.host, call_402658233.base,
                                   call_402658233.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658233, uri, valid, _)

proc call*(call_402658234: Call_DeleteV2LoggingLevel_402658221;
           targetName: string; targetType: string = "DEFAULT"): Recallable =
  ## deleteV2LoggingLevel
  ## Deletes a logging level.
  ##   targetType: string (required)
                             ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   
                                                                                                                                           ## targetName: string (required)
                                                                                                                                           ##             
                                                                                                                                           ## : 
                                                                                                                                           ## The 
                                                                                                                                           ## name 
                                                                                                                                           ## of 
                                                                                                                                           ## the 
                                                                                                                                           ## resource 
                                                                                                                                           ## for 
                                                                                                                                           ## which 
                                                                                                                                           ## you 
                                                                                                                                           ## are 
                                                                                                                                           ## configuring 
                                                                                                                                           ## logging.
  var query_402658235 = newJObject()
  add(query_402658235, "targetType", newJString(targetType))
  add(query_402658235, "targetName", newJString(targetName))
  result = call_402658234.call(nil, query_402658235, nil, nil, nil)

var deleteV2LoggingLevel* = Call_DeleteV2LoggingLevel_402658221(
    name: "deleteV2LoggingLevel", meth: HttpMethod.HttpDelete,
    host: "iot.amazonaws.com", route: "/v2LoggingLevel#targetType&targetName",
    validator: validate_DeleteV2LoggingLevel_402658222, base: "/",
    makeUrl: url_DeleteV2LoggingLevel_402658223,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeprecateThingType_402658236 = ref object of OpenApiRestCall_402656044
proc url_DeprecateThingType_402658238(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingTypeName" in path, "`thingTypeName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-types/"),
                 (kind: VariableSegment, value: "thingTypeName"),
                 (kind: ConstantSegment, value: "/deprecate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeprecateThingType_402658237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deprecates a thing type. You can not associate new things with deprecated thing type.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingTypeName: JString (required)
                                 ##                : The name of the thing type to deprecate.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingTypeName` field"
  var valid_402658239 = path.getOrDefault("thingTypeName")
  valid_402658239 = validateParameter(valid_402658239, JString, required = true,
                                      default = nil)
  if valid_402658239 != nil:
    section.add "thingTypeName", valid_402658239
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658240 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658240 = validateParameter(valid_402658240, JString,
                                      required = false, default = nil)
  if valid_402658240 != nil:
    section.add "X-Amz-Security-Token", valid_402658240
  var valid_402658241 = header.getOrDefault("X-Amz-Signature")
  valid_402658241 = validateParameter(valid_402658241, JString,
                                      required = false, default = nil)
  if valid_402658241 != nil:
    section.add "X-Amz-Signature", valid_402658241
  var valid_402658242 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658242 = validateParameter(valid_402658242, JString,
                                      required = false, default = nil)
  if valid_402658242 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658242
  var valid_402658243 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658243 = validateParameter(valid_402658243, JString,
                                      required = false, default = nil)
  if valid_402658243 != nil:
    section.add "X-Amz-Algorithm", valid_402658243
  var valid_402658244 = header.getOrDefault("X-Amz-Date")
  valid_402658244 = validateParameter(valid_402658244, JString,
                                      required = false, default = nil)
  if valid_402658244 != nil:
    section.add "X-Amz-Date", valid_402658244
  var valid_402658245 = header.getOrDefault("X-Amz-Credential")
  valid_402658245 = validateParameter(valid_402658245, JString,
                                      required = false, default = nil)
  if valid_402658245 != nil:
    section.add "X-Amz-Credential", valid_402658245
  var valid_402658246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658246 = validateParameter(valid_402658246, JString,
                                      required = false, default = nil)
  if valid_402658246 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658246
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658248: Call_DeprecateThingType_402658236;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecates a thing type. You can not associate new things with deprecated thing type.
                                                                                         ## 
  let valid = call_402658248.validator(path, query, header, formData, body, _)
  let scheme = call_402658248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658248.makeUrl(scheme.get, call_402658248.host, call_402658248.base,
                                   call_402658248.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658248, uri, valid, _)

proc call*(call_402658249: Call_DeprecateThingType_402658236;
           thingTypeName: string; body: JsonNode): Recallable =
  ## deprecateThingType
  ## Deprecates a thing type. You can not associate new things with deprecated thing type.
  ##   
                                                                                          ## thingTypeName: string (required)
                                                                                          ##                
                                                                                          ## : 
                                                                                          ## The 
                                                                                          ## name 
                                                                                          ## of 
                                                                                          ## the 
                                                                                          ## thing 
                                                                                          ## type 
                                                                                          ## to 
                                                                                          ## deprecate.
  ##   
                                                                                                       ## body: JObject (required)
  var path_402658250 = newJObject()
  var body_402658251 = newJObject()
  add(path_402658250, "thingTypeName", newJString(thingTypeName))
  if body != nil:
    body_402658251 = body
  result = call_402658249.call(path_402658250, nil, nil, nil, body_402658251)

var deprecateThingType* = Call_DeprecateThingType_402658236(
    name: "deprecateThingType", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/thing-types/{thingTypeName}/deprecate",
    validator: validate_DeprecateThingType_402658237, base: "/",
    makeUrl: url_DeprecateThingType_402658238,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuditFinding_402658252 = ref object of OpenApiRestCall_402656044
proc url_DescribeAuditFinding_402658254(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "findingId" in path, "`findingId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/findings/"),
                 (kind: VariableSegment, value: "findingId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuditFinding_402658253(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   findingId: JString (required)
                                 ##            : A unique identifier for a single audit finding. You can use this identifier to apply mitigation actions to the finding.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `findingId` field"
  var valid_402658255 = path.getOrDefault("findingId")
  valid_402658255 = validateParameter(valid_402658255, JString, required = true,
                                      default = nil)
  if valid_402658255 != nil:
    section.add "findingId", valid_402658255
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658256 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658256 = validateParameter(valid_402658256, JString,
                                      required = false, default = nil)
  if valid_402658256 != nil:
    section.add "X-Amz-Security-Token", valid_402658256
  var valid_402658257 = header.getOrDefault("X-Amz-Signature")
  valid_402658257 = validateParameter(valid_402658257, JString,
                                      required = false, default = nil)
  if valid_402658257 != nil:
    section.add "X-Amz-Signature", valid_402658257
  var valid_402658258 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658258 = validateParameter(valid_402658258, JString,
                                      required = false, default = nil)
  if valid_402658258 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658258
  var valid_402658259 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658259 = validateParameter(valid_402658259, JString,
                                      required = false, default = nil)
  if valid_402658259 != nil:
    section.add "X-Amz-Algorithm", valid_402658259
  var valid_402658260 = header.getOrDefault("X-Amz-Date")
  valid_402658260 = validateParameter(valid_402658260, JString,
                                      required = false, default = nil)
  if valid_402658260 != nil:
    section.add "X-Amz-Date", valid_402658260
  var valid_402658261 = header.getOrDefault("X-Amz-Credential")
  valid_402658261 = validateParameter(valid_402658261, JString,
                                      required = false, default = nil)
  if valid_402658261 != nil:
    section.add "X-Amz-Credential", valid_402658261
  var valid_402658262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658262 = validateParameter(valid_402658262, JString,
                                      required = false, default = nil)
  if valid_402658262 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658262
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658263: Call_DescribeAuditFinding_402658252;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.
                                                                                         ## 
  let valid = call_402658263.validator(path, query, header, formData, body, _)
  let scheme = call_402658263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658263.makeUrl(scheme.get, call_402658263.host, call_402658263.base,
                                   call_402658263.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658263, uri, valid, _)

proc call*(call_402658264: Call_DescribeAuditFinding_402658252;
           findingId: string): Recallable =
  ## describeAuditFinding
  ## Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.
  ##   
                                                                                                                                                                                         ## findingId: string (required)
                                                                                                                                                                                         ##            
                                                                                                                                                                                         ## : 
                                                                                                                                                                                         ## A 
                                                                                                                                                                                         ## unique 
                                                                                                                                                                                         ## identifier 
                                                                                                                                                                                         ## for 
                                                                                                                                                                                         ## a 
                                                                                                                                                                                         ## single 
                                                                                                                                                                                         ## audit 
                                                                                                                                                                                         ## finding. 
                                                                                                                                                                                         ## You 
                                                                                                                                                                                         ## can 
                                                                                                                                                                                         ## use 
                                                                                                                                                                                         ## this 
                                                                                                                                                                                         ## identifier 
                                                                                                                                                                                         ## to 
                                                                                                                                                                                         ## apply 
                                                                                                                                                                                         ## mitigation 
                                                                                                                                                                                         ## actions 
                                                                                                                                                                                         ## to 
                                                                                                                                                                                         ## the 
                                                                                                                                                                                         ## finding.
  var path_402658265 = newJObject()
  add(path_402658265, "findingId", newJString(findingId))
  result = call_402658264.call(path_402658265, nil, nil, nil, nil)

var describeAuditFinding* = Call_DescribeAuditFinding_402658252(
    name: "describeAuditFinding", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/findings/{findingId}",
    validator: validate_DescribeAuditFinding_402658253, base: "/",
    makeUrl: url_DescribeAuditFinding_402658254,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartAuditMitigationActionsTask_402658280 = ref object of OpenApiRestCall_402656044
proc url_StartAuditMitigationActionsTask_402658282(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                  value: "/audit/mitigationactions/tasks/"),
                 (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_StartAuditMitigationActionsTask_402658281(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Starts a task that applies a set of mitigation actions to the specified target.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402658283 = path.getOrDefault("taskId")
  valid_402658283 = validateParameter(valid_402658283, JString, required = true,
                                      default = nil)
  if valid_402658283 != nil:
    section.add "taskId", valid_402658283
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658284 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658284 = validateParameter(valid_402658284, JString,
                                      required = false, default = nil)
  if valid_402658284 != nil:
    section.add "X-Amz-Security-Token", valid_402658284
  var valid_402658285 = header.getOrDefault("X-Amz-Signature")
  valid_402658285 = validateParameter(valid_402658285, JString,
                                      required = false, default = nil)
  if valid_402658285 != nil:
    section.add "X-Amz-Signature", valid_402658285
  var valid_402658286 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658286 = validateParameter(valid_402658286, JString,
                                      required = false, default = nil)
  if valid_402658286 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658286
  var valid_402658287 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658287 = validateParameter(valid_402658287, JString,
                                      required = false, default = nil)
  if valid_402658287 != nil:
    section.add "X-Amz-Algorithm", valid_402658287
  var valid_402658288 = header.getOrDefault("X-Amz-Date")
  valid_402658288 = validateParameter(valid_402658288, JString,
                                      required = false, default = nil)
  if valid_402658288 != nil:
    section.add "X-Amz-Date", valid_402658288
  var valid_402658289 = header.getOrDefault("X-Amz-Credential")
  valid_402658289 = validateParameter(valid_402658289, JString,
                                      required = false, default = nil)
  if valid_402658289 != nil:
    section.add "X-Amz-Credential", valid_402658289
  var valid_402658290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658290 = validateParameter(valid_402658290, JString,
                                      required = false, default = nil)
  if valid_402658290 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658290
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658292: Call_StartAuditMitigationActionsTask_402658280;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts a task that applies a set of mitigation actions to the specified target.
                                                                                         ## 
  let valid = call_402658292.validator(path, query, header, formData, body, _)
  let scheme = call_402658292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658292.makeUrl(scheme.get, call_402658292.host, call_402658292.base,
                                   call_402658292.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658292, uri, valid, _)

proc call*(call_402658293: Call_StartAuditMitigationActionsTask_402658280;
           body: JsonNode; taskId: string): Recallable =
  ## startAuditMitigationActionsTask
  ## Starts a task that applies a set of mitigation actions to the specified target.
  ##   
                                                                                    ## body: JObject (required)
  ##   
                                                                                                               ## taskId: string (required)
                                                                                                               ##         
                                                                                                               ## : 
                                                                                                               ## A 
                                                                                                               ## unique 
                                                                                                               ## identifier 
                                                                                                               ## for 
                                                                                                               ## the 
                                                                                                               ## task. 
                                                                                                               ## You 
                                                                                                               ## can 
                                                                                                               ## use 
                                                                                                               ## this 
                                                                                                               ## identifier 
                                                                                                               ## to 
                                                                                                               ## check 
                                                                                                               ## the 
                                                                                                               ## status 
                                                                                                               ## of 
                                                                                                               ## the 
                                                                                                               ## task 
                                                                                                               ## or 
                                                                                                               ## to 
                                                                                                               ## cancel 
                                                                                                               ## it.
  var path_402658294 = newJObject()
  var body_402658295 = newJObject()
  if body != nil:
    body_402658295 = body
  add(path_402658294, "taskId", newJString(taskId))
  result = call_402658293.call(path_402658294, nil, nil, nil, body_402658295)

var startAuditMitigationActionsTask* = Call_StartAuditMitigationActionsTask_402658280(
    name: "startAuditMitigationActionsTask", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/audit/mitigationactions/tasks/{taskId}",
    validator: validate_StartAuditMitigationActionsTask_402658281, base: "/",
    makeUrl: url_StartAuditMitigationActionsTask_402658282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuditMitigationActionsTask_402658266 = ref object of OpenApiRestCall_402656044
proc url_DescribeAuditMitigationActionsTask_402658268(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment,
                  value: "/audit/mitigationactions/tasks/"),
                 (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuditMitigationActionsTask_402658267(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : The unique identifier for the audit mitigation task.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402658269 = path.getOrDefault("taskId")
  valid_402658269 = validateParameter(valid_402658269, JString, required = true,
                                      default = nil)
  if valid_402658269 != nil:
    section.add "taskId", valid_402658269
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658270 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658270 = validateParameter(valid_402658270, JString,
                                      required = false, default = nil)
  if valid_402658270 != nil:
    section.add "X-Amz-Security-Token", valid_402658270
  var valid_402658271 = header.getOrDefault("X-Amz-Signature")
  valid_402658271 = validateParameter(valid_402658271, JString,
                                      required = false, default = nil)
  if valid_402658271 != nil:
    section.add "X-Amz-Signature", valid_402658271
  var valid_402658272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658272 = validateParameter(valid_402658272, JString,
                                      required = false, default = nil)
  if valid_402658272 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658272
  var valid_402658273 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658273 = validateParameter(valid_402658273, JString,
                                      required = false, default = nil)
  if valid_402658273 != nil:
    section.add "X-Amz-Algorithm", valid_402658273
  var valid_402658274 = header.getOrDefault("X-Amz-Date")
  valid_402658274 = validateParameter(valid_402658274, JString,
                                      required = false, default = nil)
  if valid_402658274 != nil:
    section.add "X-Amz-Date", valid_402658274
  var valid_402658275 = header.getOrDefault("X-Amz-Credential")
  valid_402658275 = validateParameter(valid_402658275, JString,
                                      required = false, default = nil)
  if valid_402658275 != nil:
    section.add "X-Amz-Credential", valid_402658275
  var valid_402658276 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658276 = validateParameter(valid_402658276, JString,
                                      required = false, default = nil)
  if valid_402658276 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658276
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658277: Call_DescribeAuditMitigationActionsTask_402658266;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
                                                                                         ## 
  let valid = call_402658277.validator(path, query, header, formData, body, _)
  let scheme = call_402658277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658277.makeUrl(scheme.get, call_402658277.host, call_402658277.base,
                                   call_402658277.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658277, uri, valid, _)

proc call*(call_402658278: Call_DescribeAuditMitigationActionsTask_402658266;
           taskId: string): Recallable =
  ## describeAuditMitigationActionsTask
  ## Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
  ##   
                                                                                                                                                                                                                                                                         ## taskId: string (required)
                                                                                                                                                                                                                                                                         ##         
                                                                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                                                                         ## unique 
                                                                                                                                                                                                                                                                         ## identifier 
                                                                                                                                                                                                                                                                         ## for 
                                                                                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                                                                                         ## audit 
                                                                                                                                                                                                                                                                         ## mitigation 
                                                                                                                                                                                                                                                                         ## task.
  var path_402658279 = newJObject()
  add(path_402658279, "taskId", newJString(taskId))
  result = call_402658278.call(path_402658279, nil, nil, nil, nil)

var describeAuditMitigationActionsTask* = Call_DescribeAuditMitigationActionsTask_402658266(
    name: "describeAuditMitigationActionsTask", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/mitigationactions/tasks/{taskId}",
    validator: validate_DescribeAuditMitigationActionsTask_402658267, base: "/",
    makeUrl: url_DescribeAuditMitigationActionsTask_402658268,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeAuditTask_402658296 = ref object of OpenApiRestCall_402656044
proc url_DescribeAuditTask_402658298(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/audit/tasks/"),
                 (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeAuditTask_402658297(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a Device Defender audit.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : The ID of the audit whose information you want to get.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402658299 = path.getOrDefault("taskId")
  valid_402658299 = validateParameter(valid_402658299, JString, required = true,
                                      default = nil)
  if valid_402658299 != nil:
    section.add "taskId", valid_402658299
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658300 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658300 = validateParameter(valid_402658300, JString,
                                      required = false, default = nil)
  if valid_402658300 != nil:
    section.add "X-Amz-Security-Token", valid_402658300
  var valid_402658301 = header.getOrDefault("X-Amz-Signature")
  valid_402658301 = validateParameter(valid_402658301, JString,
                                      required = false, default = nil)
  if valid_402658301 != nil:
    section.add "X-Amz-Signature", valid_402658301
  var valid_402658302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658302 = validateParameter(valid_402658302, JString,
                                      required = false, default = nil)
  if valid_402658302 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658302
  var valid_402658303 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658303 = validateParameter(valid_402658303, JString,
                                      required = false, default = nil)
  if valid_402658303 != nil:
    section.add "X-Amz-Algorithm", valid_402658303
  var valid_402658304 = header.getOrDefault("X-Amz-Date")
  valid_402658304 = validateParameter(valid_402658304, JString,
                                      required = false, default = nil)
  if valid_402658304 != nil:
    section.add "X-Amz-Date", valid_402658304
  var valid_402658305 = header.getOrDefault("X-Amz-Credential")
  valid_402658305 = validateParameter(valid_402658305, JString,
                                      required = false, default = nil)
  if valid_402658305 != nil:
    section.add "X-Amz-Credential", valid_402658305
  var valid_402658306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658306 = validateParameter(valid_402658306, JString,
                                      required = false, default = nil)
  if valid_402658306 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658307: Call_DescribeAuditTask_402658296;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a Device Defender audit.
                                                                                         ## 
  let valid = call_402658307.validator(path, query, header, formData, body, _)
  let scheme = call_402658307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658307.makeUrl(scheme.get, call_402658307.host, call_402658307.base,
                                   call_402658307.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658307, uri, valid, _)

proc call*(call_402658308: Call_DescribeAuditTask_402658296; taskId: string): Recallable =
  ## describeAuditTask
  ## Gets information about a Device Defender audit.
  ##   taskId: string (required)
                                                    ##         : The ID of the audit whose information you want to get.
  var path_402658309 = newJObject()
  add(path_402658309, "taskId", newJString(taskId))
  result = call_402658308.call(path_402658309, nil, nil, nil, nil)

var describeAuditTask* = Call_DescribeAuditTask_402658296(
    name: "describeAuditTask", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/tasks/{taskId}",
    validator: validate_DescribeAuditTask_402658297, base: "/",
    makeUrl: url_DescribeAuditTask_402658298,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeEndpoint_402658310 = ref object of OpenApiRestCall_402656044
proc url_DescribeEndpoint_402658312(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeEndpoint_402658311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a unique endpoint specific to the AWS account making the call.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   endpointType: JString
                                  ##               : <p>The endpoint type. Valid endpoint types include:</p> <ul> <li> <p> <code>iot:Data</code> - Returns a VeriSign signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Data-ATS</code> - Returns an ATS signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:CredentialProvider</code> - Returns an AWS IoT credentials provider API endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Jobs</code> - Returns an AWS IoT device management Jobs API endpoint.</p> </li> </ul>
  section = newJObject()
  var valid_402658313 = query.getOrDefault("endpointType")
  valid_402658313 = validateParameter(valid_402658313, JString,
                                      required = false, default = nil)
  if valid_402658313 != nil:
    section.add "endpointType", valid_402658313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658314 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658314 = validateParameter(valid_402658314, JString,
                                      required = false, default = nil)
  if valid_402658314 != nil:
    section.add "X-Amz-Security-Token", valid_402658314
  var valid_402658315 = header.getOrDefault("X-Amz-Signature")
  valid_402658315 = validateParameter(valid_402658315, JString,
                                      required = false, default = nil)
  if valid_402658315 != nil:
    section.add "X-Amz-Signature", valid_402658315
  var valid_402658316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658316 = validateParameter(valid_402658316, JString,
                                      required = false, default = nil)
  if valid_402658316 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658316
  var valid_402658317 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658317 = validateParameter(valid_402658317, JString,
                                      required = false, default = nil)
  if valid_402658317 != nil:
    section.add "X-Amz-Algorithm", valid_402658317
  var valid_402658318 = header.getOrDefault("X-Amz-Date")
  valid_402658318 = validateParameter(valid_402658318, JString,
                                      required = false, default = nil)
  if valid_402658318 != nil:
    section.add "X-Amz-Date", valid_402658318
  var valid_402658319 = header.getOrDefault("X-Amz-Credential")
  valid_402658319 = validateParameter(valid_402658319, JString,
                                      required = false, default = nil)
  if valid_402658319 != nil:
    section.add "X-Amz-Credential", valid_402658319
  var valid_402658320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658320 = validateParameter(valid_402658320, JString,
                                      required = false, default = nil)
  if valid_402658320 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658320
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658321: Call_DescribeEndpoint_402658310;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a unique endpoint specific to the AWS account making the call.
                                                                                         ## 
  let valid = call_402658321.validator(path, query, header, formData, body, _)
  let scheme = call_402658321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658321.makeUrl(scheme.get, call_402658321.host, call_402658321.base,
                                   call_402658321.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658321, uri, valid, _)

proc call*(call_402658322: Call_DescribeEndpoint_402658310;
           endpointType: string = ""): Recallable =
  ## describeEndpoint
  ## Returns a unique endpoint specific to the AWS account making the call.
  ##   
                                                                           ## endpointType: string
                                                                           ##               
                                                                           ## : 
                                                                           ## <p>The 
                                                                           ## endpoint 
                                                                           ## type. 
                                                                           ## Valid 
                                                                           ## endpoint 
                                                                           ## types 
                                                                           ## include:</p> 
                                                                           ## <ul> 
                                                                           ## <li> 
                                                                           ## <p> 
                                                                           ## <code>iot:Data</code> 
                                                                           ## - 
                                                                           ## Returns 
                                                                           ## a 
                                                                           ## VeriSign 
                                                                           ## signed 
                                                                           ## data 
                                                                           ## endpoint.</p> 
                                                                           ## </li> 
                                                                           ## </ul> 
                                                                           ## <ul> 
                                                                           ## <li> 
                                                                           ## <p> 
                                                                           ## <code>iot:Data-ATS</code> 
                                                                           ## - 
                                                                           ## Returns 
                                                                           ## an 
                                                                           ## ATS 
                                                                           ## signed 
                                                                           ## data 
                                                                           ## endpoint.</p> 
                                                                           ## </li> 
                                                                           ## </ul> 
                                                                           ## <ul> 
                                                                           ## <li> 
                                                                           ## <p> 
                                                                           ## <code>iot:CredentialProvider</code> 
                                                                           ## - 
                                                                           ## Returns 
                                                                           ## an 
                                                                           ## AWS 
                                                                           ## IoT 
                                                                           ## credentials 
                                                                           ## provider 
                                                                           ## API 
                                                                           ## endpoint.</p> 
                                                                           ## </li> 
                                                                           ## </ul> 
                                                                           ## <ul> 
                                                                           ## <li> 
                                                                           ## <p> 
                                                                           ## <code>iot:Jobs</code> 
                                                                           ## - 
                                                                           ## Returns 
                                                                           ## an 
                                                                           ## AWS 
                                                                           ## IoT 
                                                                           ## device 
                                                                           ## management 
                                                                           ## Jobs 
                                                                           ## API 
                                                                           ## endpoint.</p> 
                                                                           ## </li> 
                                                                           ## </ul>
  var query_402658323 = newJObject()
  add(query_402658323, "endpointType", newJString(endpointType))
  result = call_402658322.call(nil, query_402658323, nil, nil, nil)

var describeEndpoint* = Call_DescribeEndpoint_402658310(
    name: "describeEndpoint", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/endpoint",
    validator: validate_DescribeEndpoint_402658311, base: "/",
    makeUrl: url_DescribeEndpoint_402658312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeEventConfigurations_402658324 = ref object of OpenApiRestCall_402656044
proc url_DescribeEventConfigurations_402658326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_DescribeEventConfigurations_402658325(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes event configurations.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658327 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658327 = validateParameter(valid_402658327, JString,
                                      required = false, default = nil)
  if valid_402658327 != nil:
    section.add "X-Amz-Security-Token", valid_402658327
  var valid_402658328 = header.getOrDefault("X-Amz-Signature")
  valid_402658328 = validateParameter(valid_402658328, JString,
                                      required = false, default = nil)
  if valid_402658328 != nil:
    section.add "X-Amz-Signature", valid_402658328
  var valid_402658329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658329 = validateParameter(valid_402658329, JString,
                                      required = false, default = nil)
  if valid_402658329 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658329
  var valid_402658330 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658330 = validateParameter(valid_402658330, JString,
                                      required = false, default = nil)
  if valid_402658330 != nil:
    section.add "X-Amz-Algorithm", valid_402658330
  var valid_402658331 = header.getOrDefault("X-Amz-Date")
  valid_402658331 = validateParameter(valid_402658331, JString,
                                      required = false, default = nil)
  if valid_402658331 != nil:
    section.add "X-Amz-Date", valid_402658331
  var valid_402658332 = header.getOrDefault("X-Amz-Credential")
  valid_402658332 = validateParameter(valid_402658332, JString,
                                      required = false, default = nil)
  if valid_402658332 != nil:
    section.add "X-Amz-Credential", valid_402658332
  var valid_402658333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658333 = validateParameter(valid_402658333, JString,
                                      required = false, default = nil)
  if valid_402658333 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658333
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658334: Call_DescribeEventConfigurations_402658324;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes event configurations.
                                                                                         ## 
  let valid = call_402658334.validator(path, query, header, formData, body, _)
  let scheme = call_402658334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658334.makeUrl(scheme.get, call_402658334.host, call_402658334.base,
                                   call_402658334.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658334, uri, valid, _)

proc call*(call_402658335: Call_DescribeEventConfigurations_402658324): Recallable =
  ## describeEventConfigurations
  ## Describes event configurations.
  result = call_402658335.call(nil, nil, nil, nil, nil)

var describeEventConfigurations* = Call_DescribeEventConfigurations_402658324(
    name: "describeEventConfigurations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/event-configurations",
    validator: validate_DescribeEventConfigurations_402658325, base: "/",
    makeUrl: url_DescribeEventConfigurations_402658326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateEventConfigurations_402658336 = ref object of OpenApiRestCall_402656044
proc url_UpdateEventConfigurations_402658338(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateEventConfigurations_402658337(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Updates the event configurations.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658339 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658339 = validateParameter(valid_402658339, JString,
                                      required = false, default = nil)
  if valid_402658339 != nil:
    section.add "X-Amz-Security-Token", valid_402658339
  var valid_402658340 = header.getOrDefault("X-Amz-Signature")
  valid_402658340 = validateParameter(valid_402658340, JString,
                                      required = false, default = nil)
  if valid_402658340 != nil:
    section.add "X-Amz-Signature", valid_402658340
  var valid_402658341 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658341 = validateParameter(valid_402658341, JString,
                                      required = false, default = nil)
  if valid_402658341 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658341
  var valid_402658342 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658342 = validateParameter(valid_402658342, JString,
                                      required = false, default = nil)
  if valid_402658342 != nil:
    section.add "X-Amz-Algorithm", valid_402658342
  var valid_402658343 = header.getOrDefault("X-Amz-Date")
  valid_402658343 = validateParameter(valid_402658343, JString,
                                      required = false, default = nil)
  if valid_402658343 != nil:
    section.add "X-Amz-Date", valid_402658343
  var valid_402658344 = header.getOrDefault("X-Amz-Credential")
  valid_402658344 = validateParameter(valid_402658344, JString,
                                      required = false, default = nil)
  if valid_402658344 != nil:
    section.add "X-Amz-Credential", valid_402658344
  var valid_402658345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658345 = validateParameter(valid_402658345, JString,
                                      required = false, default = nil)
  if valid_402658345 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658345
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658347: Call_UpdateEventConfigurations_402658336;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the event configurations.
                                                                                         ## 
  let valid = call_402658347.validator(path, query, header, formData, body, _)
  let scheme = call_402658347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658347.makeUrl(scheme.get, call_402658347.host, call_402658347.base,
                                   call_402658347.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658347, uri, valid, _)

proc call*(call_402658348: Call_UpdateEventConfigurations_402658336;
           body: JsonNode): Recallable =
  ## updateEventConfigurations
  ## Updates the event configurations.
  ##   body: JObject (required)
  var body_402658349 = newJObject()
  if body != nil:
    body_402658349 = body
  result = call_402658348.call(nil, nil, nil, nil, body_402658349)

var updateEventConfigurations* = Call_UpdateEventConfigurations_402658336(
    name: "updateEventConfigurations", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com", route: "/event-configurations",
    validator: validate_UpdateEventConfigurations_402658337, base: "/",
    makeUrl: url_UpdateEventConfigurations_402658338,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeIndex_402658350 = ref object of OpenApiRestCall_402656044
proc url_DescribeIndex_402658352(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "indexName" in path, "`indexName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/indices/"),
                 (kind: VariableSegment, value: "indexName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeIndex_402658351(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a search index.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   indexName: JString (required)
                                 ##            : The index name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `indexName` field"
  var valid_402658353 = path.getOrDefault("indexName")
  valid_402658353 = validateParameter(valid_402658353, JString, required = true,
                                      default = nil)
  if valid_402658353 != nil:
    section.add "indexName", valid_402658353
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658354 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658354 = validateParameter(valid_402658354, JString,
                                      required = false, default = nil)
  if valid_402658354 != nil:
    section.add "X-Amz-Security-Token", valid_402658354
  var valid_402658355 = header.getOrDefault("X-Amz-Signature")
  valid_402658355 = validateParameter(valid_402658355, JString,
                                      required = false, default = nil)
  if valid_402658355 != nil:
    section.add "X-Amz-Signature", valid_402658355
  var valid_402658356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658356 = validateParameter(valid_402658356, JString,
                                      required = false, default = nil)
  if valid_402658356 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658356
  var valid_402658357 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658357 = validateParameter(valid_402658357, JString,
                                      required = false, default = nil)
  if valid_402658357 != nil:
    section.add "X-Amz-Algorithm", valid_402658357
  var valid_402658358 = header.getOrDefault("X-Amz-Date")
  valid_402658358 = validateParameter(valid_402658358, JString,
                                      required = false, default = nil)
  if valid_402658358 != nil:
    section.add "X-Amz-Date", valid_402658358
  var valid_402658359 = header.getOrDefault("X-Amz-Credential")
  valid_402658359 = validateParameter(valid_402658359, JString,
                                      required = false, default = nil)
  if valid_402658359 != nil:
    section.add "X-Amz-Credential", valid_402658359
  var valid_402658360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658360 = validateParameter(valid_402658360, JString,
                                      required = false, default = nil)
  if valid_402658360 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658360
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658361: Call_DescribeIndex_402658350; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a search index.
                                                                                         ## 
  let valid = call_402658361.validator(path, query, header, formData, body, _)
  let scheme = call_402658361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658361.makeUrl(scheme.get, call_402658361.host, call_402658361.base,
                                   call_402658361.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658361, uri, valid, _)

proc call*(call_402658362: Call_DescribeIndex_402658350; indexName: string): Recallable =
  ## describeIndex
  ## Describes a search index.
  ##   indexName: string (required)
                              ##            : The index name.
  var path_402658363 = newJObject()
  add(path_402658363, "indexName", newJString(indexName))
  result = call_402658362.call(path_402658363, nil, nil, nil, nil)

var describeIndex* = Call_DescribeIndex_402658350(name: "describeIndex",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/indices/{indexName}", validator: validate_DescribeIndex_402658351,
    base: "/", makeUrl: url_DescribeIndex_402658352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeJobExecution_402658364 = ref object of OpenApiRestCall_402656044
proc url_DescribeJobExecution_402658366(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeJobExecution_402658365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a job execution.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The unique identifier you assigned to this job when it was created.
  ##   
                                                                                                                ## thingName: JString (required)
                                                                                                                ##            
                                                                                                                ## : 
                                                                                                                ## The 
                                                                                                                ## name 
                                                                                                                ## of 
                                                                                                                ## the 
                                                                                                                ## thing 
                                                                                                                ## on 
                                                                                                                ## which 
                                                                                                                ## the 
                                                                                                                ## job 
                                                                                                                ## execution 
                                                                                                                ## is 
                                                                                                                ## running.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402658367 = path.getOrDefault("jobId")
  valid_402658367 = validateParameter(valid_402658367, JString, required = true,
                                      default = nil)
  if valid_402658367 != nil:
    section.add "jobId", valid_402658367
  var valid_402658368 = path.getOrDefault("thingName")
  valid_402658368 = validateParameter(valid_402658368, JString, required = true,
                                      default = nil)
  if valid_402658368 != nil:
    section.add "thingName", valid_402658368
  result.add "path", section
  ## parameters in `query` object:
  ##   executionNumber: JInt
                                  ##                  : A string (consisting of the digits "0" through "9" which is used to specify a particular job execution on a particular device.
  section = newJObject()
  var valid_402658369 = query.getOrDefault("executionNumber")
  valid_402658369 = validateParameter(valid_402658369, JInt, required = false,
                                      default = nil)
  if valid_402658369 != nil:
    section.add "executionNumber", valid_402658369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658370 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658370 = validateParameter(valid_402658370, JString,
                                      required = false, default = nil)
  if valid_402658370 != nil:
    section.add "X-Amz-Security-Token", valid_402658370
  var valid_402658371 = header.getOrDefault("X-Amz-Signature")
  valid_402658371 = validateParameter(valid_402658371, JString,
                                      required = false, default = nil)
  if valid_402658371 != nil:
    section.add "X-Amz-Signature", valid_402658371
  var valid_402658372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658372 = validateParameter(valid_402658372, JString,
                                      required = false, default = nil)
  if valid_402658372 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658372
  var valid_402658373 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658373 = validateParameter(valid_402658373, JString,
                                      required = false, default = nil)
  if valid_402658373 != nil:
    section.add "X-Amz-Algorithm", valid_402658373
  var valid_402658374 = header.getOrDefault("X-Amz-Date")
  valid_402658374 = validateParameter(valid_402658374, JString,
                                      required = false, default = nil)
  if valid_402658374 != nil:
    section.add "X-Amz-Date", valid_402658374
  var valid_402658375 = header.getOrDefault("X-Amz-Credential")
  valid_402658375 = validateParameter(valid_402658375, JString,
                                      required = false, default = nil)
  if valid_402658375 != nil:
    section.add "X-Amz-Credential", valid_402658375
  var valid_402658376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658376 = validateParameter(valid_402658376, JString,
                                      required = false, default = nil)
  if valid_402658376 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658376
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658377: Call_DescribeJobExecution_402658364;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a job execution.
                                                                                         ## 
  let valid = call_402658377.validator(path, query, header, formData, body, _)
  let scheme = call_402658377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658377.makeUrl(scheme.get, call_402658377.host, call_402658377.base,
                                   call_402658377.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658377, uri, valid, _)

proc call*(call_402658378: Call_DescribeJobExecution_402658364; jobId: string;
           thingName: string; executionNumber: int = 0): Recallable =
  ## describeJobExecution
  ## Describes a job execution.
  ##   jobId: string (required)
                               ##        : The unique identifier you assigned to this job when it was created.
  ##   
                                                                                                              ## thingName: string (required)
                                                                                                              ##            
                                                                                                              ## : 
                                                                                                              ## The 
                                                                                                              ## name 
                                                                                                              ## of 
                                                                                                              ## the 
                                                                                                              ## thing 
                                                                                                              ## on 
                                                                                                              ## which 
                                                                                                              ## the 
                                                                                                              ## job 
                                                                                                              ## execution 
                                                                                                              ## is 
                                                                                                              ## running.
  ##   
                                                                                                                         ## executionNumber: int
                                                                                                                         ##                  
                                                                                                                         ## : 
                                                                                                                         ## A 
                                                                                                                         ## string 
                                                                                                                         ## (consisting 
                                                                                                                         ## of 
                                                                                                                         ## the 
                                                                                                                         ## digits 
                                                                                                                         ## "0" 
                                                                                                                         ## through 
                                                                                                                         ## "9" 
                                                                                                                         ## which 
                                                                                                                         ## is 
                                                                                                                         ## used 
                                                                                                                         ## to 
                                                                                                                         ## specify 
                                                                                                                         ## a 
                                                                                                                         ## particular 
                                                                                                                         ## job 
                                                                                                                         ## execution 
                                                                                                                         ## on 
                                                                                                                         ## a 
                                                                                                                         ## particular 
                                                                                                                         ## device.
  var path_402658379 = newJObject()
  var query_402658380 = newJObject()
  add(path_402658379, "jobId", newJString(jobId))
  add(path_402658379, "thingName", newJString(thingName))
  add(query_402658380, "executionNumber", newJInt(executionNumber))
  result = call_402658378.call(path_402658379, query_402658380, nil, nil, nil)

var describeJobExecution* = Call_DescribeJobExecution_402658364(
    name: "describeJobExecution", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/jobs/{jobId}",
    validator: validate_DescribeJobExecution_402658365, base: "/",
    makeUrl: url_DescribeJobExecution_402658366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DescribeThingRegistrationTask_402658381 = ref object of OpenApiRestCall_402656044
proc url_DescribeThingRegistrationTask_402658383(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-registration-tasks/"),
                 (kind: VariableSegment, value: "taskId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DescribeThingRegistrationTask_402658382(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes a bulk thing provisioning task.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : The task ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402658384 = path.getOrDefault("taskId")
  valid_402658384 = validateParameter(valid_402658384, JString, required = true,
                                      default = nil)
  if valid_402658384 != nil:
    section.add "taskId", valid_402658384
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658385 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658385 = validateParameter(valid_402658385, JString,
                                      required = false, default = nil)
  if valid_402658385 != nil:
    section.add "X-Amz-Security-Token", valid_402658385
  var valid_402658386 = header.getOrDefault("X-Amz-Signature")
  valid_402658386 = validateParameter(valid_402658386, JString,
                                      required = false, default = nil)
  if valid_402658386 != nil:
    section.add "X-Amz-Signature", valid_402658386
  var valid_402658387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658387 = validateParameter(valid_402658387, JString,
                                      required = false, default = nil)
  if valid_402658387 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658387
  var valid_402658388 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658388 = validateParameter(valid_402658388, JString,
                                      required = false, default = nil)
  if valid_402658388 != nil:
    section.add "X-Amz-Algorithm", valid_402658388
  var valid_402658389 = header.getOrDefault("X-Amz-Date")
  valid_402658389 = validateParameter(valid_402658389, JString,
                                      required = false, default = nil)
  if valid_402658389 != nil:
    section.add "X-Amz-Date", valid_402658389
  var valid_402658390 = header.getOrDefault("X-Amz-Credential")
  valid_402658390 = validateParameter(valid_402658390, JString,
                                      required = false, default = nil)
  if valid_402658390 != nil:
    section.add "X-Amz-Credential", valid_402658390
  var valid_402658391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658391 = validateParameter(valid_402658391, JString,
                                      required = false, default = nil)
  if valid_402658391 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658391
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658392: Call_DescribeThingRegistrationTask_402658381;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a bulk thing provisioning task.
                                                                                         ## 
  let valid = call_402658392.validator(path, query, header, formData, body, _)
  let scheme = call_402658392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658392.makeUrl(scheme.get, call_402658392.host, call_402658392.base,
                                   call_402658392.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658392, uri, valid, _)

proc call*(call_402658393: Call_DescribeThingRegistrationTask_402658381;
           taskId: string): Recallable =
  ## describeThingRegistrationTask
  ## Describes a bulk thing provisioning task.
  ##   taskId: string (required)
                                              ##         : The task ID.
  var path_402658394 = newJObject()
  add(path_402658394, "taskId", newJString(taskId))
  result = call_402658393.call(path_402658394, nil, nil, nil, nil)

var describeThingRegistrationTask* = Call_DescribeThingRegistrationTask_402658381(
    name: "describeThingRegistrationTask", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-registration-tasks/{taskId}",
    validator: validate_DescribeThingRegistrationTask_402658382, base: "/",
    makeUrl: url_DescribeThingRegistrationTask_402658383,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisableTopicRule_402658395 = ref object of OpenApiRestCall_402656044
proc url_DisableTopicRule_402658397(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
                 (kind: VariableSegment, value: "ruleName"),
                 (kind: ConstantSegment, value: "/disable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DisableTopicRule_402658396(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Disables the rule.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
                                 ##           : The name of the rule to disable.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `ruleName` field"
  var valid_402658398 = path.getOrDefault("ruleName")
  valid_402658398 = validateParameter(valid_402658398, JString, required = true,
                                      default = nil)
  if valid_402658398 != nil:
    section.add "ruleName", valid_402658398
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658399 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658399 = validateParameter(valid_402658399, JString,
                                      required = false, default = nil)
  if valid_402658399 != nil:
    section.add "X-Amz-Security-Token", valid_402658399
  var valid_402658400 = header.getOrDefault("X-Amz-Signature")
  valid_402658400 = validateParameter(valid_402658400, JString,
                                      required = false, default = nil)
  if valid_402658400 != nil:
    section.add "X-Amz-Signature", valid_402658400
  var valid_402658401 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658401 = validateParameter(valid_402658401, JString,
                                      required = false, default = nil)
  if valid_402658401 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658401
  var valid_402658402 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658402 = validateParameter(valid_402658402, JString,
                                      required = false, default = nil)
  if valid_402658402 != nil:
    section.add "X-Amz-Algorithm", valid_402658402
  var valid_402658403 = header.getOrDefault("X-Amz-Date")
  valid_402658403 = validateParameter(valid_402658403, JString,
                                      required = false, default = nil)
  if valid_402658403 != nil:
    section.add "X-Amz-Date", valid_402658403
  var valid_402658404 = header.getOrDefault("X-Amz-Credential")
  valid_402658404 = validateParameter(valid_402658404, JString,
                                      required = false, default = nil)
  if valid_402658404 != nil:
    section.add "X-Amz-Credential", valid_402658404
  var valid_402658405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658405 = validateParameter(valid_402658405, JString,
                                      required = false, default = nil)
  if valid_402658405 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658406: Call_DisableTopicRule_402658395;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disables the rule.
                                                                                         ## 
  let valid = call_402658406.validator(path, query, header, formData, body, _)
  let scheme = call_402658406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658406.makeUrl(scheme.get, call_402658406.host, call_402658406.base,
                                   call_402658406.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658406, uri, valid, _)

proc call*(call_402658407: Call_DisableTopicRule_402658395; ruleName: string): Recallable =
  ## disableTopicRule
  ## Disables the rule.
  ##   ruleName: string (required)
                       ##           : The name of the rule to disable.
  var path_402658408 = newJObject()
  add(path_402658408, "ruleName", newJString(ruleName))
  result = call_402658407.call(path_402658408, nil, nil, nil, nil)

var disableTopicRule* = Call_DisableTopicRule_402658395(
    name: "disableTopicRule", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/rules/{ruleName}/disable",
    validator: validate_DisableTopicRule_402658396, base: "/",
    makeUrl: url_DisableTopicRule_402658397,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_EnableTopicRule_402658409 = ref object of OpenApiRestCall_402656044
proc url_EnableTopicRule_402658411(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "ruleName" in path, "`ruleName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/rules/"),
                 (kind: VariableSegment, value: "ruleName"),
                 (kind: ConstantSegment, value: "/enable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_EnableTopicRule_402658410(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Enables the rule.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   ruleName: JString (required)
                                 ##           : The name of the topic rule to enable.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `ruleName` field"
  var valid_402658412 = path.getOrDefault("ruleName")
  valid_402658412 = validateParameter(valid_402658412, JString, required = true,
                                      default = nil)
  if valid_402658412 != nil:
    section.add "ruleName", valid_402658412
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658413 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658413 = validateParameter(valid_402658413, JString,
                                      required = false, default = nil)
  if valid_402658413 != nil:
    section.add "X-Amz-Security-Token", valid_402658413
  var valid_402658414 = header.getOrDefault("X-Amz-Signature")
  valid_402658414 = validateParameter(valid_402658414, JString,
                                      required = false, default = nil)
  if valid_402658414 != nil:
    section.add "X-Amz-Signature", valid_402658414
  var valid_402658415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658415 = validateParameter(valid_402658415, JString,
                                      required = false, default = nil)
  if valid_402658415 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658415
  var valid_402658416 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658416 = validateParameter(valid_402658416, JString,
                                      required = false, default = nil)
  if valid_402658416 != nil:
    section.add "X-Amz-Algorithm", valid_402658416
  var valid_402658417 = header.getOrDefault("X-Amz-Date")
  valid_402658417 = validateParameter(valid_402658417, JString,
                                      required = false, default = nil)
  if valid_402658417 != nil:
    section.add "X-Amz-Date", valid_402658417
  var valid_402658418 = header.getOrDefault("X-Amz-Credential")
  valid_402658418 = validateParameter(valid_402658418, JString,
                                      required = false, default = nil)
  if valid_402658418 != nil:
    section.add "X-Amz-Credential", valid_402658418
  var valid_402658419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658419 = validateParameter(valid_402658419, JString,
                                      required = false, default = nil)
  if valid_402658419 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658419
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658420: Call_EnableTopicRule_402658409; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Enables the rule.
                                                                                         ## 
  let valid = call_402658420.validator(path, query, header, formData, body, _)
  let scheme = call_402658420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658420.makeUrl(scheme.get, call_402658420.host, call_402658420.base,
                                   call_402658420.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658420, uri, valid, _)

proc call*(call_402658421: Call_EnableTopicRule_402658409; ruleName: string): Recallable =
  ## enableTopicRule
  ## Enables the rule.
  ##   ruleName: string (required)
                      ##           : The name of the topic rule to enable.
  var path_402658422 = newJObject()
  add(path_402658422, "ruleName", newJString(ruleName))
  result = call_402658421.call(path_402658422, nil, nil, nil, nil)

var enableTopicRule* = Call_EnableTopicRule_402658409(name: "enableTopicRule",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/rules/{ruleName}/enable", validator: validate_EnableTopicRule_402658410,
    base: "/", makeUrl: url_EnableTopicRule_402658411,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCardinality_402658423 = ref object of OpenApiRestCall_402656044
proc url_GetCardinality_402658425(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCardinality_402658424(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the approximate count of unique values that match the query.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658426 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658426 = validateParameter(valid_402658426, JString,
                                      required = false, default = nil)
  if valid_402658426 != nil:
    section.add "X-Amz-Security-Token", valid_402658426
  var valid_402658427 = header.getOrDefault("X-Amz-Signature")
  valid_402658427 = validateParameter(valid_402658427, JString,
                                      required = false, default = nil)
  if valid_402658427 != nil:
    section.add "X-Amz-Signature", valid_402658427
  var valid_402658428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658428 = validateParameter(valid_402658428, JString,
                                      required = false, default = nil)
  if valid_402658428 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658428
  var valid_402658429 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658429 = validateParameter(valid_402658429, JString,
                                      required = false, default = nil)
  if valid_402658429 != nil:
    section.add "X-Amz-Algorithm", valid_402658429
  var valid_402658430 = header.getOrDefault("X-Amz-Date")
  valid_402658430 = validateParameter(valid_402658430, JString,
                                      required = false, default = nil)
  if valid_402658430 != nil:
    section.add "X-Amz-Date", valid_402658430
  var valid_402658431 = header.getOrDefault("X-Amz-Credential")
  valid_402658431 = validateParameter(valid_402658431, JString,
                                      required = false, default = nil)
  if valid_402658431 != nil:
    section.add "X-Amz-Credential", valid_402658431
  var valid_402658432 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658432 = validateParameter(valid_402658432, JString,
                                      required = false, default = nil)
  if valid_402658432 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658432
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658434: Call_GetCardinality_402658423; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the approximate count of unique values that match the query.
                                                                                         ## 
  let valid = call_402658434.validator(path, query, header, formData, body, _)
  let scheme = call_402658434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658434.makeUrl(scheme.get, call_402658434.host, call_402658434.base,
                                   call_402658434.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658434, uri, valid, _)

proc call*(call_402658435: Call_GetCardinality_402658423; body: JsonNode): Recallable =
  ## getCardinality
  ## Returns the approximate count of unique values that match the query.
  ##   body: JObject 
                                                                         ## (required)
  var body_402658436 = newJObject()
  if body != nil:
    body_402658436 = body
  result = call_402658435.call(nil, nil, nil, nil, body_402658436)

var getCardinality* = Call_GetCardinality_402658423(name: "getCardinality",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/indices/cardinality", validator: validate_GetCardinality_402658424,
    base: "/", makeUrl: url_GetCardinality_402658425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEffectivePolicies_402658437 = ref object of OpenApiRestCall_402656044
proc url_GetEffectivePolicies_402658439(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEffectivePolicies_402658438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   thingName: JString
                                  ##            : The thing name.
  section = newJObject()
  var valid_402658440 = query.getOrDefault("thingName")
  valid_402658440 = validateParameter(valid_402658440, JString,
                                      required = false, default = nil)
  if valid_402658440 != nil:
    section.add "thingName", valid_402658440
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658441 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658441 = validateParameter(valid_402658441, JString,
                                      required = false, default = nil)
  if valid_402658441 != nil:
    section.add "X-Amz-Security-Token", valid_402658441
  var valid_402658442 = header.getOrDefault("X-Amz-Signature")
  valid_402658442 = validateParameter(valid_402658442, JString,
                                      required = false, default = nil)
  if valid_402658442 != nil:
    section.add "X-Amz-Signature", valid_402658442
  var valid_402658443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658443 = validateParameter(valid_402658443, JString,
                                      required = false, default = nil)
  if valid_402658443 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658443
  var valid_402658444 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658444 = validateParameter(valid_402658444, JString,
                                      required = false, default = nil)
  if valid_402658444 != nil:
    section.add "X-Amz-Algorithm", valid_402658444
  var valid_402658445 = header.getOrDefault("X-Amz-Date")
  valid_402658445 = validateParameter(valid_402658445, JString,
                                      required = false, default = nil)
  if valid_402658445 != nil:
    section.add "X-Amz-Date", valid_402658445
  var valid_402658446 = header.getOrDefault("X-Amz-Credential")
  valid_402658446 = validateParameter(valid_402658446, JString,
                                      required = false, default = nil)
  if valid_402658446 != nil:
    section.add "X-Amz-Credential", valid_402658446
  var valid_402658447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658447 = validateParameter(valid_402658447, JString,
                                      required = false, default = nil)
  if valid_402658447 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658447
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658449: Call_GetEffectivePolicies_402658437;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.
                                                                                         ## 
  let valid = call_402658449.validator(path, query, header, formData, body, _)
  let scheme = call_402658449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658449.makeUrl(scheme.get, call_402658449.host, call_402658449.base,
                                   call_402658449.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658449, uri, valid, _)

proc call*(call_402658450: Call_GetEffectivePolicies_402658437; body: JsonNode;
           thingName: string = ""): Recallable =
  ## getEffectivePolicies
  ## Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.
  ##   
                                                                                                                                                          ## thingName: string
                                                                                                                                                          ##            
                                                                                                                                                          ## : 
                                                                                                                                                          ## The 
                                                                                                                                                          ## thing 
                                                                                                                                                          ## name.
  ##   
                                                                                                                                                                  ## body: JObject (required)
  var query_402658451 = newJObject()
  var body_402658452 = newJObject()
  add(query_402658451, "thingName", newJString(thingName))
  if body != nil:
    body_402658452 = body
  result = call_402658450.call(nil, query_402658451, nil, nil, body_402658452)

var getEffectivePolicies* = Call_GetEffectivePolicies_402658437(
    name: "getEffectivePolicies", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/effective-policies",
    validator: validate_GetEffectivePolicies_402658438, base: "/",
    makeUrl: url_GetEffectivePolicies_402658439,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateIndexingConfiguration_402658465 = ref object of OpenApiRestCall_402656044
proc url_UpdateIndexingConfiguration_402658467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateIndexingConfiguration_402658466(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Updates the search configuration.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658468 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658468 = validateParameter(valid_402658468, JString,
                                      required = false, default = nil)
  if valid_402658468 != nil:
    section.add "X-Amz-Security-Token", valid_402658468
  var valid_402658469 = header.getOrDefault("X-Amz-Signature")
  valid_402658469 = validateParameter(valid_402658469, JString,
                                      required = false, default = nil)
  if valid_402658469 != nil:
    section.add "X-Amz-Signature", valid_402658469
  var valid_402658470 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658470 = validateParameter(valid_402658470, JString,
                                      required = false, default = nil)
  if valid_402658470 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658470
  var valid_402658471 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658471 = validateParameter(valid_402658471, JString,
                                      required = false, default = nil)
  if valid_402658471 != nil:
    section.add "X-Amz-Algorithm", valid_402658471
  var valid_402658472 = header.getOrDefault("X-Amz-Date")
  valid_402658472 = validateParameter(valid_402658472, JString,
                                      required = false, default = nil)
  if valid_402658472 != nil:
    section.add "X-Amz-Date", valid_402658472
  var valid_402658473 = header.getOrDefault("X-Amz-Credential")
  valid_402658473 = validateParameter(valid_402658473, JString,
                                      required = false, default = nil)
  if valid_402658473 != nil:
    section.add "X-Amz-Credential", valid_402658473
  var valid_402658474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658474 = validateParameter(valid_402658474, JString,
                                      required = false, default = nil)
  if valid_402658474 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658474
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658476: Call_UpdateIndexingConfiguration_402658465;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the search configuration.
                                                                                         ## 
  let valid = call_402658476.validator(path, query, header, formData, body, _)
  let scheme = call_402658476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658476.makeUrl(scheme.get, call_402658476.host, call_402658476.base,
                                   call_402658476.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658476, uri, valid, _)

proc call*(call_402658477: Call_UpdateIndexingConfiguration_402658465;
           body: JsonNode): Recallable =
  ## updateIndexingConfiguration
  ## Updates the search configuration.
  ##   body: JObject (required)
  var body_402658478 = newJObject()
  if body != nil:
    body_402658478 = body
  result = call_402658477.call(nil, nil, nil, nil, body_402658478)

var updateIndexingConfiguration* = Call_UpdateIndexingConfiguration_402658465(
    name: "updateIndexingConfiguration", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/indexing/config",
    validator: validate_UpdateIndexingConfiguration_402658466, base: "/",
    makeUrl: url_UpdateIndexingConfiguration_402658467,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIndexingConfiguration_402658453 = ref object of OpenApiRestCall_402656044
proc url_GetIndexingConfiguration_402658455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetIndexingConfiguration_402658454(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets the indexing configuration.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658456 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658456 = validateParameter(valid_402658456, JString,
                                      required = false, default = nil)
  if valid_402658456 != nil:
    section.add "X-Amz-Security-Token", valid_402658456
  var valid_402658457 = header.getOrDefault("X-Amz-Signature")
  valid_402658457 = validateParameter(valid_402658457, JString,
                                      required = false, default = nil)
  if valid_402658457 != nil:
    section.add "X-Amz-Signature", valid_402658457
  var valid_402658458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658458 = validateParameter(valid_402658458, JString,
                                      required = false, default = nil)
  if valid_402658458 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658458
  var valid_402658459 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658459 = validateParameter(valid_402658459, JString,
                                      required = false, default = nil)
  if valid_402658459 != nil:
    section.add "X-Amz-Algorithm", valid_402658459
  var valid_402658460 = header.getOrDefault("X-Amz-Date")
  valid_402658460 = validateParameter(valid_402658460, JString,
                                      required = false, default = nil)
  if valid_402658460 != nil:
    section.add "X-Amz-Date", valid_402658460
  var valid_402658461 = header.getOrDefault("X-Amz-Credential")
  valid_402658461 = validateParameter(valid_402658461, JString,
                                      required = false, default = nil)
  if valid_402658461 != nil:
    section.add "X-Amz-Credential", valid_402658461
  var valid_402658462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658462 = validateParameter(valid_402658462, JString,
                                      required = false, default = nil)
  if valid_402658462 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658462
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658463: Call_GetIndexingConfiguration_402658453;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the indexing configuration.
                                                                                         ## 
  let valid = call_402658463.validator(path, query, header, formData, body, _)
  let scheme = call_402658463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658463.makeUrl(scheme.get, call_402658463.host, call_402658463.base,
                                   call_402658463.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658463, uri, valid, _)

proc call*(call_402658464: Call_GetIndexingConfiguration_402658453): Recallable =
  ## getIndexingConfiguration
  ## Gets the indexing configuration.
  result = call_402658464.call(nil, nil, nil, nil, nil)

var getIndexingConfiguration* = Call_GetIndexingConfiguration_402658453(
    name: "getIndexingConfiguration", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/indexing/config",
    validator: validate_GetIndexingConfiguration_402658454, base: "/",
    makeUrl: url_GetIndexingConfiguration_402658455,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetJobDocument_402658479 = ref object of OpenApiRestCall_402656044
proc url_GetJobDocument_402658481(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId"),
                 (kind: ConstantSegment, value: "/job-document")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetJobDocument_402658480(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a job document.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402658482 = path.getOrDefault("jobId")
  valid_402658482 = validateParameter(valid_402658482, JString, required = true,
                                      default = nil)
  if valid_402658482 != nil:
    section.add "jobId", valid_402658482
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658483 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658483 = validateParameter(valid_402658483, JString,
                                      required = false, default = nil)
  if valid_402658483 != nil:
    section.add "X-Amz-Security-Token", valid_402658483
  var valid_402658484 = header.getOrDefault("X-Amz-Signature")
  valid_402658484 = validateParameter(valid_402658484, JString,
                                      required = false, default = nil)
  if valid_402658484 != nil:
    section.add "X-Amz-Signature", valid_402658484
  var valid_402658485 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658485 = validateParameter(valid_402658485, JString,
                                      required = false, default = nil)
  if valid_402658485 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658485
  var valid_402658486 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658486 = validateParameter(valid_402658486, JString,
                                      required = false, default = nil)
  if valid_402658486 != nil:
    section.add "X-Amz-Algorithm", valid_402658486
  var valid_402658487 = header.getOrDefault("X-Amz-Date")
  valid_402658487 = validateParameter(valid_402658487, JString,
                                      required = false, default = nil)
  if valid_402658487 != nil:
    section.add "X-Amz-Date", valid_402658487
  var valid_402658488 = header.getOrDefault("X-Amz-Credential")
  valid_402658488 = validateParameter(valid_402658488, JString,
                                      required = false, default = nil)
  if valid_402658488 != nil:
    section.add "X-Amz-Credential", valid_402658488
  var valid_402658489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658489 = validateParameter(valid_402658489, JString,
                                      required = false, default = nil)
  if valid_402658489 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658489
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658490: Call_GetJobDocument_402658479; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a job document.
                                                                                         ## 
  let valid = call_402658490.validator(path, query, header, formData, body, _)
  let scheme = call_402658490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658490.makeUrl(scheme.get, call_402658490.host, call_402658490.base,
                                   call_402658490.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658490, uri, valid, _)

proc call*(call_402658491: Call_GetJobDocument_402658479; jobId: string): Recallable =
  ## getJobDocument
  ## Gets a job document.
  ##   jobId: string (required)
                         ##        : The unique identifier you assigned to this job when it was created.
  var path_402658492 = newJObject()
  add(path_402658492, "jobId", newJString(jobId))
  result = call_402658491.call(path_402658492, nil, nil, nil, nil)

var getJobDocument* = Call_GetJobDocument_402658479(name: "getJobDocument",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/jobs/{jobId}/job-document", validator: validate_GetJobDocument_402658480,
    base: "/", makeUrl: url_GetJobDocument_402658481,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetLoggingOptions_402658505 = ref object of OpenApiRestCall_402656044
proc url_SetLoggingOptions_402658507(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetLoggingOptions_402658506(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658508 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658508 = validateParameter(valid_402658508, JString,
                                      required = false, default = nil)
  if valid_402658508 != nil:
    section.add "X-Amz-Security-Token", valid_402658508
  var valid_402658509 = header.getOrDefault("X-Amz-Signature")
  valid_402658509 = validateParameter(valid_402658509, JString,
                                      required = false, default = nil)
  if valid_402658509 != nil:
    section.add "X-Amz-Signature", valid_402658509
  var valid_402658510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658510 = validateParameter(valid_402658510, JString,
                                      required = false, default = nil)
  if valid_402658510 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658510
  var valid_402658511 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658511 = validateParameter(valid_402658511, JString,
                                      required = false, default = nil)
  if valid_402658511 != nil:
    section.add "X-Amz-Algorithm", valid_402658511
  var valid_402658512 = header.getOrDefault("X-Amz-Date")
  valid_402658512 = validateParameter(valid_402658512, JString,
                                      required = false, default = nil)
  if valid_402658512 != nil:
    section.add "X-Amz-Date", valid_402658512
  var valid_402658513 = header.getOrDefault("X-Amz-Credential")
  valid_402658513 = validateParameter(valid_402658513, JString,
                                      required = false, default = nil)
  if valid_402658513 != nil:
    section.add "X-Amz-Credential", valid_402658513
  var valid_402658514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658514 = validateParameter(valid_402658514, JString,
                                      required = false, default = nil)
  if valid_402658514 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658514
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658516: Call_SetLoggingOptions_402658505;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>
                                                                                         ## 
  let valid = call_402658516.validator(path, query, header, formData, body, _)
  let scheme = call_402658516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658516.makeUrl(scheme.get, call_402658516.host, call_402658516.base,
                                   call_402658516.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658516, uri, valid, _)

proc call*(call_402658517: Call_SetLoggingOptions_402658505; body: JsonNode): Recallable =
  ## setLoggingOptions
  ## <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>
  ##   
                                                                                                                                        ## body: JObject (required)
  var body_402658518 = newJObject()
  if body != nil:
    body_402658518 = body
  result = call_402658517.call(nil, nil, nil, nil, body_402658518)

var setLoggingOptions* = Call_SetLoggingOptions_402658505(
    name: "setLoggingOptions", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/loggingOptions",
    validator: validate_SetLoggingOptions_402658506, base: "/",
    makeUrl: url_SetLoggingOptions_402658507,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetLoggingOptions_402658493 = ref object of OpenApiRestCall_402656044
proc url_GetLoggingOptions_402658495(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetLoggingOptions_402658494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658496 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658496 = validateParameter(valid_402658496, JString,
                                      required = false, default = nil)
  if valid_402658496 != nil:
    section.add "X-Amz-Security-Token", valid_402658496
  var valid_402658497 = header.getOrDefault("X-Amz-Signature")
  valid_402658497 = validateParameter(valid_402658497, JString,
                                      required = false, default = nil)
  if valid_402658497 != nil:
    section.add "X-Amz-Signature", valid_402658497
  var valid_402658498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658498 = validateParameter(valid_402658498, JString,
                                      required = false, default = nil)
  if valid_402658498 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658498
  var valid_402658499 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658499 = validateParameter(valid_402658499, JString,
                                      required = false, default = nil)
  if valid_402658499 != nil:
    section.add "X-Amz-Algorithm", valid_402658499
  var valid_402658500 = header.getOrDefault("X-Amz-Date")
  valid_402658500 = validateParameter(valid_402658500, JString,
                                      required = false, default = nil)
  if valid_402658500 != nil:
    section.add "X-Amz-Date", valid_402658500
  var valid_402658501 = header.getOrDefault("X-Amz-Credential")
  valid_402658501 = validateParameter(valid_402658501, JString,
                                      required = false, default = nil)
  if valid_402658501 != nil:
    section.add "X-Amz-Credential", valid_402658501
  var valid_402658502 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658502 = validateParameter(valid_402658502, JString,
                                      required = false, default = nil)
  if valid_402658502 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658502
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658503: Call_GetLoggingOptions_402658493;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>
                                                                                         ## 
  let valid = call_402658503.validator(path, query, header, formData, body, _)
  let scheme = call_402658503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658503.makeUrl(scheme.get, call_402658503.host, call_402658503.base,
                                   call_402658503.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658503, uri, valid, _)

proc call*(call_402658504: Call_GetLoggingOptions_402658493): Recallable =
  ## getLoggingOptions
  ## <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>
  result = call_402658504.call(nil, nil, nil, nil, nil)

var getLoggingOptions* = Call_GetLoggingOptions_402658493(
    name: "getLoggingOptions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/loggingOptions",
    validator: validate_GetLoggingOptions_402658494, base: "/",
    makeUrl: url_GetLoggingOptions_402658495,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPercentiles_402658519 = ref object of OpenApiRestCall_402656044
proc url_GetPercentiles_402658521(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPercentiles_402658520(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658522 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658522 = validateParameter(valid_402658522, JString,
                                      required = false, default = nil)
  if valid_402658522 != nil:
    section.add "X-Amz-Security-Token", valid_402658522
  var valid_402658523 = header.getOrDefault("X-Amz-Signature")
  valid_402658523 = validateParameter(valid_402658523, JString,
                                      required = false, default = nil)
  if valid_402658523 != nil:
    section.add "X-Amz-Signature", valid_402658523
  var valid_402658524 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658524 = validateParameter(valid_402658524, JString,
                                      required = false, default = nil)
  if valid_402658524 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658524
  var valid_402658525 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658525 = validateParameter(valid_402658525, JString,
                                      required = false, default = nil)
  if valid_402658525 != nil:
    section.add "X-Amz-Algorithm", valid_402658525
  var valid_402658526 = header.getOrDefault("X-Amz-Date")
  valid_402658526 = validateParameter(valid_402658526, JString,
                                      required = false, default = nil)
  if valid_402658526 != nil:
    section.add "X-Amz-Date", valid_402658526
  var valid_402658527 = header.getOrDefault("X-Amz-Credential")
  valid_402658527 = validateParameter(valid_402658527, JString,
                                      required = false, default = nil)
  if valid_402658527 != nil:
    section.add "X-Amz-Credential", valid_402658527
  var valid_402658528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658528 = validateParameter(valid_402658528, JString,
                                      required = false, default = nil)
  if valid_402658528 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658528
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658530: Call_GetPercentiles_402658519; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.
                                                                                         ## 
  let valid = call_402658530.validator(path, query, header, formData, body, _)
  let scheme = call_402658530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658530.makeUrl(scheme.get, call_402658530.host, call_402658530.base,
                                   call_402658530.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658530, uri, valid, _)

proc call*(call_402658531: Call_GetPercentiles_402658519; body: JsonNode): Recallable =
  ## getPercentiles
  ## Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.
  ##   
body: JObject (required)
  var body_402658532 = newJObject()
  if body != nil:
    body_402658532 = body
  result = call_402658531.call(nil, nil, nil, nil, body_402658532)

var getPercentiles* = Call_GetPercentiles_402658519(name: "getPercentiles",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/indices/percentiles", validator: validate_GetPercentiles_402658520,
    base: "/", makeUrl: url_GetPercentiles_402658521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStatistics_402658533 = ref object of OpenApiRestCall_402656044
proc url_GetStatistics_402658535(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStatistics_402658534(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658536 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658536 = validateParameter(valid_402658536, JString,
                                      required = false, default = nil)
  if valid_402658536 != nil:
    section.add "X-Amz-Security-Token", valid_402658536
  var valid_402658537 = header.getOrDefault("X-Amz-Signature")
  valid_402658537 = validateParameter(valid_402658537, JString,
                                      required = false, default = nil)
  if valid_402658537 != nil:
    section.add "X-Amz-Signature", valid_402658537
  var valid_402658538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658538 = validateParameter(valid_402658538, JString,
                                      required = false, default = nil)
  if valid_402658538 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658538
  var valid_402658539 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658539 = validateParameter(valid_402658539, JString,
                                      required = false, default = nil)
  if valid_402658539 != nil:
    section.add "X-Amz-Algorithm", valid_402658539
  var valid_402658540 = header.getOrDefault("X-Amz-Date")
  valid_402658540 = validateParameter(valid_402658540, JString,
                                      required = false, default = nil)
  if valid_402658540 != nil:
    section.add "X-Amz-Date", valid_402658540
  var valid_402658541 = header.getOrDefault("X-Amz-Credential")
  valid_402658541 = validateParameter(valid_402658541, JString,
                                      required = false, default = nil)
  if valid_402658541 != nil:
    section.add "X-Amz-Credential", valid_402658541
  var valid_402658542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658542 = validateParameter(valid_402658542, JString,
                                      required = false, default = nil)
  if valid_402658542 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658542
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658544: Call_GetStatistics_402658533; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.
                                                                                         ## 
  let valid = call_402658544.validator(path, query, header, formData, body, _)
  let scheme = call_402658544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658544.makeUrl(scheme.get, call_402658544.host, call_402658544.base,
                                   call_402658544.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658544, uri, valid, _)

proc call*(call_402658545: Call_GetStatistics_402658533; body: JsonNode): Recallable =
  ## getStatistics
  ## Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.
  ##   
                                                                                                                                                                                                                                           ## body: JObject (required)
  var body_402658546 = newJObject()
  if body != nil:
    body_402658546 = body
  result = call_402658545.call(nil, nil, nil, nil, body_402658546)

var getStatistics* = Call_GetStatistics_402658533(name: "getStatistics",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/indices/statistics", validator: validate_GetStatistics_402658534,
    base: "/", makeUrl: url_GetStatistics_402658535,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetV2LoggingOptions_402658559 = ref object of OpenApiRestCall_402656044
proc url_SetV2LoggingOptions_402658561(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetV2LoggingOptions_402658560(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the logging options for the V2 logging service.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658562 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658562 = validateParameter(valid_402658562, JString,
                                      required = false, default = nil)
  if valid_402658562 != nil:
    section.add "X-Amz-Security-Token", valid_402658562
  var valid_402658563 = header.getOrDefault("X-Amz-Signature")
  valid_402658563 = validateParameter(valid_402658563, JString,
                                      required = false, default = nil)
  if valid_402658563 != nil:
    section.add "X-Amz-Signature", valid_402658563
  var valid_402658564 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658564 = validateParameter(valid_402658564, JString,
                                      required = false, default = nil)
  if valid_402658564 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658564
  var valid_402658565 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658565 = validateParameter(valid_402658565, JString,
                                      required = false, default = nil)
  if valid_402658565 != nil:
    section.add "X-Amz-Algorithm", valid_402658565
  var valid_402658566 = header.getOrDefault("X-Amz-Date")
  valid_402658566 = validateParameter(valid_402658566, JString,
                                      required = false, default = nil)
  if valid_402658566 != nil:
    section.add "X-Amz-Date", valid_402658566
  var valid_402658567 = header.getOrDefault("X-Amz-Credential")
  valid_402658567 = validateParameter(valid_402658567, JString,
                                      required = false, default = nil)
  if valid_402658567 != nil:
    section.add "X-Amz-Credential", valid_402658567
  var valid_402658568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658568 = validateParameter(valid_402658568, JString,
                                      required = false, default = nil)
  if valid_402658568 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658570: Call_SetV2LoggingOptions_402658559;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the logging options for the V2 logging service.
                                                                                         ## 
  let valid = call_402658570.validator(path, query, header, formData, body, _)
  let scheme = call_402658570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658570.makeUrl(scheme.get, call_402658570.host, call_402658570.base,
                                   call_402658570.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658570, uri, valid, _)

proc call*(call_402658571: Call_SetV2LoggingOptions_402658559; body: JsonNode): Recallable =
  ## setV2LoggingOptions
  ## Sets the logging options for the V2 logging service.
  ##   body: JObject (required)
  var body_402658572 = newJObject()
  if body != nil:
    body_402658572 = body
  result = call_402658571.call(nil, nil, nil, nil, body_402658572)

var setV2LoggingOptions* = Call_SetV2LoggingOptions_402658559(
    name: "setV2LoggingOptions", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/v2LoggingOptions",
    validator: validate_SetV2LoggingOptions_402658560, base: "/",
    makeUrl: url_SetV2LoggingOptions_402658561,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetV2LoggingOptions_402658547 = ref object of OpenApiRestCall_402656044
proc url_GetV2LoggingOptions_402658549(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetV2LoggingOptions_402658548(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the fine grained logging options.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658550 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658550 = validateParameter(valid_402658550, JString,
                                      required = false, default = nil)
  if valid_402658550 != nil:
    section.add "X-Amz-Security-Token", valid_402658550
  var valid_402658551 = header.getOrDefault("X-Amz-Signature")
  valid_402658551 = validateParameter(valid_402658551, JString,
                                      required = false, default = nil)
  if valid_402658551 != nil:
    section.add "X-Amz-Signature", valid_402658551
  var valid_402658552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658552 = validateParameter(valid_402658552, JString,
                                      required = false, default = nil)
  if valid_402658552 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658552
  var valid_402658553 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658553 = validateParameter(valid_402658553, JString,
                                      required = false, default = nil)
  if valid_402658553 != nil:
    section.add "X-Amz-Algorithm", valid_402658553
  var valid_402658554 = header.getOrDefault("X-Amz-Date")
  valid_402658554 = validateParameter(valid_402658554, JString,
                                      required = false, default = nil)
  if valid_402658554 != nil:
    section.add "X-Amz-Date", valid_402658554
  var valid_402658555 = header.getOrDefault("X-Amz-Credential")
  valid_402658555 = validateParameter(valid_402658555, JString,
                                      required = false, default = nil)
  if valid_402658555 != nil:
    section.add "X-Amz-Credential", valid_402658555
  var valid_402658556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658556 = validateParameter(valid_402658556, JString,
                                      required = false, default = nil)
  if valid_402658556 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658556
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658557: Call_GetV2LoggingOptions_402658547;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the fine grained logging options.
                                                                                         ## 
  let valid = call_402658557.validator(path, query, header, formData, body, _)
  let scheme = call_402658557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658557.makeUrl(scheme.get, call_402658557.host, call_402658557.base,
                                   call_402658557.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658557, uri, valid, _)

proc call*(call_402658558: Call_GetV2LoggingOptions_402658547): Recallable =
  ## getV2LoggingOptions
  ## Gets the fine grained logging options.
  result = call_402658558.call(nil, nil, nil, nil, nil)

var getV2LoggingOptions* = Call_GetV2LoggingOptions_402658547(
    name: "getV2LoggingOptions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/v2LoggingOptions",
    validator: validate_GetV2LoggingOptions_402658548, base: "/",
    makeUrl: url_GetV2LoggingOptions_402658549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListActiveViolations_402658573 = ref object of OpenApiRestCall_402656044
proc url_ListActiveViolations_402658575(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListActiveViolations_402658574(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the active violations for a given Device Defender security profile.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## for 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## thingName: JString
                                                                                                                  ##            
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## name 
                                                                                                                  ## of 
                                                                                                                  ## the 
                                                                                                                  ## thing 
                                                                                                                  ## whose 
                                                                                                                  ## active 
                                                                                                                  ## violations 
                                                                                                                  ## are 
                                                                                                                  ## listed.
  ##   
                                                                                                                            ## securityProfileName: JString
                                                                                                                            ##                      
                                                                                                                            ## : 
                                                                                                                            ## The 
                                                                                                                            ## name 
                                                                                                                            ## of 
                                                                                                                            ## the 
                                                                                                                            ## Device 
                                                                                                                            ## Defender 
                                                                                                                            ## security 
                                                                                                                            ## profile 
                                                                                                                            ## for 
                                                                                                                            ## which 
                                                                                                                            ## violations 
                                                                                                                            ## are 
                                                                                                                            ## listed.
  section = newJObject()
  var valid_402658576 = query.getOrDefault("maxResults")
  valid_402658576 = validateParameter(valid_402658576, JInt, required = false,
                                      default = nil)
  if valid_402658576 != nil:
    section.add "maxResults", valid_402658576
  var valid_402658577 = query.getOrDefault("nextToken")
  valid_402658577 = validateParameter(valid_402658577, JString,
                                      required = false, default = nil)
  if valid_402658577 != nil:
    section.add "nextToken", valid_402658577
  var valid_402658578 = query.getOrDefault("thingName")
  valid_402658578 = validateParameter(valid_402658578, JString,
                                      required = false, default = nil)
  if valid_402658578 != nil:
    section.add "thingName", valid_402658578
  var valid_402658579 = query.getOrDefault("securityProfileName")
  valid_402658579 = validateParameter(valid_402658579, JString,
                                      required = false, default = nil)
  if valid_402658579 != nil:
    section.add "securityProfileName", valid_402658579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658580 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658580 = validateParameter(valid_402658580, JString,
                                      required = false, default = nil)
  if valid_402658580 != nil:
    section.add "X-Amz-Security-Token", valid_402658580
  var valid_402658581 = header.getOrDefault("X-Amz-Signature")
  valid_402658581 = validateParameter(valid_402658581, JString,
                                      required = false, default = nil)
  if valid_402658581 != nil:
    section.add "X-Amz-Signature", valid_402658581
  var valid_402658582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658582 = validateParameter(valid_402658582, JString,
                                      required = false, default = nil)
  if valid_402658582 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658582
  var valid_402658583 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658583 = validateParameter(valid_402658583, JString,
                                      required = false, default = nil)
  if valid_402658583 != nil:
    section.add "X-Amz-Algorithm", valid_402658583
  var valid_402658584 = header.getOrDefault("X-Amz-Date")
  valid_402658584 = validateParameter(valid_402658584, JString,
                                      required = false, default = nil)
  if valid_402658584 != nil:
    section.add "X-Amz-Date", valid_402658584
  var valid_402658585 = header.getOrDefault("X-Amz-Credential")
  valid_402658585 = validateParameter(valid_402658585, JString,
                                      required = false, default = nil)
  if valid_402658585 != nil:
    section.add "X-Amz-Credential", valid_402658585
  var valid_402658586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658586 = validateParameter(valid_402658586, JString,
                                      required = false, default = nil)
  if valid_402658586 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658586
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658587: Call_ListActiveViolations_402658573;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the active violations for a given Device Defender security profile.
                                                                                         ## 
  let valid = call_402658587.validator(path, query, header, formData, body, _)
  let scheme = call_402658587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658587.makeUrl(scheme.get, call_402658587.host, call_402658587.base,
                                   call_402658587.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658587, uri, valid, _)

proc call*(call_402658588: Call_ListActiveViolations_402658573;
           maxResults: int = 0; nextToken: string = ""; thingName: string = "";
           securityProfileName: string = ""): Recallable =
  ## listActiveViolations
  ## Lists the active violations for a given Device Defender security profile.
  ##   
                                                                              ## maxResults: int
                                                                              ##             
                                                                              ## : 
                                                                              ## The 
                                                                              ## maximum 
                                                                              ## number 
                                                                              ## of 
                                                                              ## results 
                                                                              ## to 
                                                                              ## return 
                                                                              ## at 
                                                                              ## one 
                                                                              ## time.
  ##   
                                                                                      ## nextToken: string
                                                                                      ##            
                                                                                      ## : 
                                                                                      ## The 
                                                                                      ## token 
                                                                                      ## for 
                                                                                      ## the 
                                                                                      ## next 
                                                                                      ## set 
                                                                                      ## of 
                                                                                      ## results.
  ##   
                                                                                                 ## thingName: string
                                                                                                 ##            
                                                                                                 ## : 
                                                                                                 ## The 
                                                                                                 ## name 
                                                                                                 ## of 
                                                                                                 ## the 
                                                                                                 ## thing 
                                                                                                 ## whose 
                                                                                                 ## active 
                                                                                                 ## violations 
                                                                                                 ## are 
                                                                                                 ## listed.
  ##   
                                                                                                           ## securityProfileName: string
                                                                                                           ##                      
                                                                                                           ## : 
                                                                                                           ## The 
                                                                                                           ## name 
                                                                                                           ## of 
                                                                                                           ## the 
                                                                                                           ## Device 
                                                                                                           ## Defender 
                                                                                                           ## security 
                                                                                                           ## profile 
                                                                                                           ## for 
                                                                                                           ## which 
                                                                                                           ## violations 
                                                                                                           ## are 
                                                                                                           ## listed.
  var query_402658589 = newJObject()
  add(query_402658589, "maxResults", newJInt(maxResults))
  add(query_402658589, "nextToken", newJString(nextToken))
  add(query_402658589, "thingName", newJString(thingName))
  add(query_402658589, "securityProfileName", newJString(securityProfileName))
  result = call_402658588.call(nil, query_402658589, nil, nil, nil)

var listActiveViolations* = Call_ListActiveViolations_402658573(
    name: "listActiveViolations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/active-violations",
    validator: validate_ListActiveViolations_402658574, base: "/",
    makeUrl: url_ListActiveViolations_402658575,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAttachedPolicies_402658590 = ref object of OpenApiRestCall_402656044
proc url_ListAttachedPolicies_402658592(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "target" in path, "`target` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/attached-policies/"),
                 (kind: VariableSegment, value: "target")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListAttachedPolicies_402658591(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the policies attached to the specified thing group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   target: JString (required)
                                 ##         : The group or principal for which the policies will be listed.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `target` field"
  var valid_402658593 = path.getOrDefault("target")
  valid_402658593 = validateParameter(valid_402658593, JString, required = true,
                                      default = nil)
  if valid_402658593 != nil:
    section.add "target", valid_402658593
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The token to retrieve the next set of results.
  ##   
                                                                                             ## recursive: JBool
                                                                                             ##            
                                                                                             ## : 
                                                                                             ## When 
                                                                                             ## true, 
                                                                                             ## recursively 
                                                                                             ## list 
                                                                                             ## attached 
                                                                                             ## policies.
  ##   
                                                                                                         ## pageSize: JInt
                                                                                                         ##           
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## results 
                                                                                                         ## to 
                                                                                                         ## be 
                                                                                                         ## returned 
                                                                                                         ## per 
                                                                                                         ## request.
  section = newJObject()
  var valid_402658594 = query.getOrDefault("marker")
  valid_402658594 = validateParameter(valid_402658594, JString,
                                      required = false, default = nil)
  if valid_402658594 != nil:
    section.add "marker", valid_402658594
  var valid_402658595 = query.getOrDefault("recursive")
  valid_402658595 = validateParameter(valid_402658595, JBool, required = false,
                                      default = nil)
  if valid_402658595 != nil:
    section.add "recursive", valid_402658595
  var valid_402658596 = query.getOrDefault("pageSize")
  valid_402658596 = validateParameter(valid_402658596, JInt, required = false,
                                      default = nil)
  if valid_402658596 != nil:
    section.add "pageSize", valid_402658596
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658597 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658597 = validateParameter(valid_402658597, JString,
                                      required = false, default = nil)
  if valid_402658597 != nil:
    section.add "X-Amz-Security-Token", valid_402658597
  var valid_402658598 = header.getOrDefault("X-Amz-Signature")
  valid_402658598 = validateParameter(valid_402658598, JString,
                                      required = false, default = nil)
  if valid_402658598 != nil:
    section.add "X-Amz-Signature", valid_402658598
  var valid_402658599 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658599 = validateParameter(valid_402658599, JString,
                                      required = false, default = nil)
  if valid_402658599 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658599
  var valid_402658600 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658600 = validateParameter(valid_402658600, JString,
                                      required = false, default = nil)
  if valid_402658600 != nil:
    section.add "X-Amz-Algorithm", valid_402658600
  var valid_402658601 = header.getOrDefault("X-Amz-Date")
  valid_402658601 = validateParameter(valid_402658601, JString,
                                      required = false, default = nil)
  if valid_402658601 != nil:
    section.add "X-Amz-Date", valid_402658601
  var valid_402658602 = header.getOrDefault("X-Amz-Credential")
  valid_402658602 = validateParameter(valid_402658602, JString,
                                      required = false, default = nil)
  if valid_402658602 != nil:
    section.add "X-Amz-Credential", valid_402658602
  var valid_402658603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658603 = validateParameter(valid_402658603, JString,
                                      required = false, default = nil)
  if valid_402658603 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658603
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658604: Call_ListAttachedPolicies_402658590;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the policies attached to the specified thing group.
                                                                                         ## 
  let valid = call_402658604.validator(path, query, header, formData, body, _)
  let scheme = call_402658604.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658604.makeUrl(scheme.get, call_402658604.host, call_402658604.base,
                                   call_402658604.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658604, uri, valid, _)

proc call*(call_402658605: Call_ListAttachedPolicies_402658590; target: string;
           marker: string = ""; recursive: bool = false; pageSize: int = 0): Recallable =
  ## listAttachedPolicies
  ## Lists the policies attached to the specified thing group.
  ##   marker: string
                                                              ##         : The token to retrieve the next set of results.
  ##   
                                                                                                                         ## target: string (required)
                                                                                                                         ##         
                                                                                                                         ## : 
                                                                                                                         ## The 
                                                                                                                         ## group 
                                                                                                                         ## or 
                                                                                                                         ## principal 
                                                                                                                         ## for 
                                                                                                                         ## which 
                                                                                                                         ## the 
                                                                                                                         ## policies 
                                                                                                                         ## will 
                                                                                                                         ## be 
                                                                                                                         ## listed.
  ##   
                                                                                                                                   ## recursive: bool
                                                                                                                                   ##            
                                                                                                                                   ## : 
                                                                                                                                   ## When 
                                                                                                                                   ## true, 
                                                                                                                                   ## recursively 
                                                                                                                                   ## list 
                                                                                                                                   ## attached 
                                                                                                                                   ## policies.
  ##   
                                                                                                                                               ## pageSize: int
                                                                                                                                               ##           
                                                                                                                                               ## : 
                                                                                                                                               ## The 
                                                                                                                                               ## maximum 
                                                                                                                                               ## number 
                                                                                                                                               ## of 
                                                                                                                                               ## results 
                                                                                                                                               ## to 
                                                                                                                                               ## be 
                                                                                                                                               ## returned 
                                                                                                                                               ## per 
                                                                                                                                               ## request.
  var path_402658606 = newJObject()
  var query_402658607 = newJObject()
  add(query_402658607, "marker", newJString(marker))
  add(path_402658606, "target", newJString(target))
  add(query_402658607, "recursive", newJBool(recursive))
  add(query_402658607, "pageSize", newJInt(pageSize))
  result = call_402658605.call(path_402658606, query_402658607, nil, nil, nil)

var listAttachedPolicies* = Call_ListAttachedPolicies_402658590(
    name: "listAttachedPolicies", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/attached-policies/{target}",
    validator: validate_ListAttachedPolicies_402658591, base: "/",
    makeUrl: url_ListAttachedPolicies_402658592,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditFindings_402658608 = ref object of OpenApiRestCall_402656044
proc url_ListAuditFindings_402658610(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditFindings_402658609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658611 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658611 = validateParameter(valid_402658611, JString,
                                      required = false, default = nil)
  if valid_402658611 != nil:
    section.add "X-Amz-Security-Token", valid_402658611
  var valid_402658612 = header.getOrDefault("X-Amz-Signature")
  valid_402658612 = validateParameter(valid_402658612, JString,
                                      required = false, default = nil)
  if valid_402658612 != nil:
    section.add "X-Amz-Signature", valid_402658612
  var valid_402658613 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658613 = validateParameter(valid_402658613, JString,
                                      required = false, default = nil)
  if valid_402658613 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658613
  var valid_402658614 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658614 = validateParameter(valid_402658614, JString,
                                      required = false, default = nil)
  if valid_402658614 != nil:
    section.add "X-Amz-Algorithm", valid_402658614
  var valid_402658615 = header.getOrDefault("X-Amz-Date")
  valid_402658615 = validateParameter(valid_402658615, JString,
                                      required = false, default = nil)
  if valid_402658615 != nil:
    section.add "X-Amz-Date", valid_402658615
  var valid_402658616 = header.getOrDefault("X-Amz-Credential")
  valid_402658616 = validateParameter(valid_402658616, JString,
                                      required = false, default = nil)
  if valid_402658616 != nil:
    section.add "X-Amz-Credential", valid_402658616
  var valid_402658617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658617 = validateParameter(valid_402658617, JString,
                                      required = false, default = nil)
  if valid_402658617 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658617
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658619: Call_ListAuditFindings_402658608;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)
                                                                                         ## 
  let valid = call_402658619.validator(path, query, header, formData, body, _)
  let scheme = call_402658619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658619.makeUrl(scheme.get, call_402658619.host, call_402658619.base,
                                   call_402658619.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658619, uri, valid, _)

proc call*(call_402658620: Call_ListAuditFindings_402658608; body: JsonNode): Recallable =
  ## listAuditFindings
  ## Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)
  ##   
                                                                                                                                                             ## body: JObject (required)
  var body_402658621 = newJObject()
  if body != nil:
    body_402658621 = body
  result = call_402658620.call(nil, nil, nil, nil, body_402658621)

var listAuditFindings* = Call_ListAuditFindings_402658608(
    name: "listAuditFindings", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/audit/findings",
    validator: validate_ListAuditFindings_402658609, base: "/",
    makeUrl: url_ListAuditFindings_402658610,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditMitigationActionsExecutions_402658622 = ref object of OpenApiRestCall_402656044
proc url_ListAuditMitigationActionsExecutions_402658624(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditMitigationActionsExecutions_402658623(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets the status of audit mitigation action tasks that were executed.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   findingId: JString (required)
                                  ##            : Specify this filter to limit results to those that were applied to a specific audit finding.
  ##   
                                                                                                                                              ## maxResults: JInt
                                                                                                                                              ##             
                                                                                                                                              ## : 
                                                                                                                                              ## The 
                                                                                                                                              ## maximum 
                                                                                                                                              ## number 
                                                                                                                                              ## of 
                                                                                                                                              ## results 
                                                                                                                                              ## to 
                                                                                                                                              ## return 
                                                                                                                                              ## at 
                                                                                                                                              ## one 
                                                                                                                                              ## time. 
                                                                                                                                              ## The 
                                                                                                                                              ## default 
                                                                                                                                              ## is 
                                                                                                                                              ## 25.
  ##   
                                                                                                                                                    ## taskId: JString (required)
                                                                                                                                                    ##         
                                                                                                                                                    ## : 
                                                                                                                                                    ## Specify 
                                                                                                                                                    ## this 
                                                                                                                                                    ## filter 
                                                                                                                                                    ## to 
                                                                                                                                                    ## limit 
                                                                                                                                                    ## results 
                                                                                                                                                    ## to 
                                                                                                                                                    ## actions 
                                                                                                                                                    ## for 
                                                                                                                                                    ## a 
                                                                                                                                                    ## specific 
                                                                                                                                                    ## audit 
                                                                                                                                                    ## mitigation 
                                                                                                                                                    ## actions 
                                                                                                                                                    ## task.
  ##   
                                                                                                                                                            ## nextToken: JString
                                                                                                                                                            ##            
                                                                                                                                                            ## : 
                                                                                                                                                            ## The 
                                                                                                                                                            ## token 
                                                                                                                                                            ## for 
                                                                                                                                                            ## the 
                                                                                                                                                            ## next 
                                                                                                                                                            ## set 
                                                                                                                                                            ## of 
                                                                                                                                                            ## results.
  ##   
                                                                                                                                                                       ## actionStatus: JString
                                                                                                                                                                       ##               
                                                                                                                                                                       ## : 
                                                                                                                                                                       ## Specify 
                                                                                                                                                                       ## this 
                                                                                                                                                                       ## filter 
                                                                                                                                                                       ## to 
                                                                                                                                                                       ## limit 
                                                                                                                                                                       ## results 
                                                                                                                                                                       ## to 
                                                                                                                                                                       ## those 
                                                                                                                                                                       ## with 
                                                                                                                                                                       ## a 
                                                                                                                                                                       ## specific 
                                                                                                                                                                       ## status.
  section = newJObject()
  assert query != nil,
         "query argument is necessary due to required `findingId` field"
  var valid_402658625 = query.getOrDefault("findingId")
  valid_402658625 = validateParameter(valid_402658625, JString, required = true,
                                      default = nil)
  if valid_402658625 != nil:
    section.add "findingId", valid_402658625
  var valid_402658626 = query.getOrDefault("maxResults")
  valid_402658626 = validateParameter(valid_402658626, JInt, required = false,
                                      default = nil)
  if valid_402658626 != nil:
    section.add "maxResults", valid_402658626
  var valid_402658627 = query.getOrDefault("taskId")
  valid_402658627 = validateParameter(valid_402658627, JString, required = true,
                                      default = nil)
  if valid_402658627 != nil:
    section.add "taskId", valid_402658627
  var valid_402658628 = query.getOrDefault("nextToken")
  valid_402658628 = validateParameter(valid_402658628, JString,
                                      required = false, default = nil)
  if valid_402658628 != nil:
    section.add "nextToken", valid_402658628
  var valid_402658629 = query.getOrDefault("actionStatus")
  valid_402658629 = validateParameter(valid_402658629, JString,
                                      required = false,
                                      default = newJString("IN_PROGRESS"))
  if valid_402658629 != nil:
    section.add "actionStatus", valid_402658629
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658630 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658630 = validateParameter(valid_402658630, JString,
                                      required = false, default = nil)
  if valid_402658630 != nil:
    section.add "X-Amz-Security-Token", valid_402658630
  var valid_402658631 = header.getOrDefault("X-Amz-Signature")
  valid_402658631 = validateParameter(valid_402658631, JString,
                                      required = false, default = nil)
  if valid_402658631 != nil:
    section.add "X-Amz-Signature", valid_402658631
  var valid_402658632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658632 = validateParameter(valid_402658632, JString,
                                      required = false, default = nil)
  if valid_402658632 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658632
  var valid_402658633 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658633 = validateParameter(valid_402658633, JString,
                                      required = false, default = nil)
  if valid_402658633 != nil:
    section.add "X-Amz-Algorithm", valid_402658633
  var valid_402658634 = header.getOrDefault("X-Amz-Date")
  valid_402658634 = validateParameter(valid_402658634, JString,
                                      required = false, default = nil)
  if valid_402658634 != nil:
    section.add "X-Amz-Date", valid_402658634
  var valid_402658635 = header.getOrDefault("X-Amz-Credential")
  valid_402658635 = validateParameter(valid_402658635, JString,
                                      required = false, default = nil)
  if valid_402658635 != nil:
    section.add "X-Amz-Credential", valid_402658635
  var valid_402658636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658636 = validateParameter(valid_402658636, JString,
                                      required = false, default = nil)
  if valid_402658636 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658636
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658637: Call_ListAuditMitigationActionsExecutions_402658622;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the status of audit mitigation action tasks that were executed.
                                                                                         ## 
  let valid = call_402658637.validator(path, query, header, formData, body, _)
  let scheme = call_402658637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658637.makeUrl(scheme.get, call_402658637.host, call_402658637.base,
                                   call_402658637.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658637, uri, valid, _)

proc call*(call_402658638: Call_ListAuditMitigationActionsExecutions_402658622;
           findingId: string; taskId: string; maxResults: int = 0;
           nextToken: string = ""; actionStatus: string = "IN_PROGRESS"): Recallable =
  ## listAuditMitigationActionsExecutions
  ## Gets the status of audit mitigation action tasks that were executed.
  ##   
                                                                         ## findingId: string (required)
                                                                         ##            
                                                                         ## : 
                                                                         ## Specify 
                                                                         ## this 
                                                                         ## filter 
                                                                         ## to 
                                                                         ## limit 
                                                                         ## results 
                                                                         ## to 
                                                                         ## those 
                                                                         ## that 
                                                                         ## were 
                                                                         ## applied 
                                                                         ## to 
                                                                         ## a 
                                                                         ## specific 
                                                                         ## audit 
                                                                         ## finding.
  ##   
                                                                                    ## maxResults: int
                                                                                    ##             
                                                                                    ## : 
                                                                                    ## The 
                                                                                    ## maximum 
                                                                                    ## number 
                                                                                    ## of 
                                                                                    ## results 
                                                                                    ## to 
                                                                                    ## return 
                                                                                    ## at 
                                                                                    ## one 
                                                                                    ## time. 
                                                                                    ## The 
                                                                                    ## default 
                                                                                    ## is 
                                                                                    ## 25.
  ##   
                                                                                          ## taskId: string (required)
                                                                                          ##         
                                                                                          ## : 
                                                                                          ## Specify 
                                                                                          ## this 
                                                                                          ## filter 
                                                                                          ## to 
                                                                                          ## limit 
                                                                                          ## results 
                                                                                          ## to 
                                                                                          ## actions 
                                                                                          ## for 
                                                                                          ## a 
                                                                                          ## specific 
                                                                                          ## audit 
                                                                                          ## mitigation 
                                                                                          ## actions 
                                                                                          ## task.
  ##   
                                                                                                  ## nextToken: string
                                                                                                  ##            
                                                                                                  ## : 
                                                                                                  ## The 
                                                                                                  ## token 
                                                                                                  ## for 
                                                                                                  ## the 
                                                                                                  ## next 
                                                                                                  ## set 
                                                                                                  ## of 
                                                                                                  ## results.
  ##   
                                                                                                             ## actionStatus: string
                                                                                                             ##               
                                                                                                             ## : 
                                                                                                             ## Specify 
                                                                                                             ## this 
                                                                                                             ## filter 
                                                                                                             ## to 
                                                                                                             ## limit 
                                                                                                             ## results 
                                                                                                             ## to 
                                                                                                             ## those 
                                                                                                             ## with 
                                                                                                             ## a 
                                                                                                             ## specific 
                                                                                                             ## status.
  var query_402658639 = newJObject()
  add(query_402658639, "findingId", newJString(findingId))
  add(query_402658639, "maxResults", newJInt(maxResults))
  add(query_402658639, "taskId", newJString(taskId))
  add(query_402658639, "nextToken", newJString(nextToken))
  add(query_402658639, "actionStatus", newJString(actionStatus))
  result = call_402658638.call(nil, query_402658639, nil, nil, nil)

var listAuditMitigationActionsExecutions* = Call_ListAuditMitigationActionsExecutions_402658622(
    name: "listAuditMitigationActionsExecutions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/audit/mitigationactions/executions#taskId&findingId",
    validator: validate_ListAuditMitigationActionsExecutions_402658623,
    base: "/", makeUrl: url_ListAuditMitigationActionsExecutions_402658624,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditMitigationActionsTasks_402658640 = ref object of OpenApiRestCall_402656044
proc url_ListAuditMitigationActionsTasks_402658642(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditMitigationActionsTasks_402658641(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Gets a list of audit mitigation action tasks that match the specified filters.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   findingId: JString
                                  ##            : Specify this filter to limit results to tasks that were applied to a specific audit finding.
  ##   
                                                                                                                                              ## maxResults: JInt
                                                                                                                                              ##             
                                                                                                                                              ## : 
                                                                                                                                              ## The 
                                                                                                                                              ## maximum 
                                                                                                                                              ## number 
                                                                                                                                              ## of 
                                                                                                                                              ## results 
                                                                                                                                              ## to 
                                                                                                                                              ## return 
                                                                                                                                              ## at 
                                                                                                                                              ## one 
                                                                                                                                              ## time. 
                                                                                                                                              ## The 
                                                                                                                                              ## default 
                                                                                                                                              ## is 
                                                                                                                                              ## 25.
  ##   
                                                                                                                                                    ## auditTaskId: JString
                                                                                                                                                    ##              
                                                                                                                                                    ## : 
                                                                                                                                                    ## Specify 
                                                                                                                                                    ## this 
                                                                                                                                                    ## filter 
                                                                                                                                                    ## to 
                                                                                                                                                    ## limit 
                                                                                                                                                    ## results 
                                                                                                                                                    ## to 
                                                                                                                                                    ## tasks 
                                                                                                                                                    ## that 
                                                                                                                                                    ## were 
                                                                                                                                                    ## applied 
                                                                                                                                                    ## to 
                                                                                                                                                    ## results 
                                                                                                                                                    ## for 
                                                                                                                                                    ## a 
                                                                                                                                                    ## specific 
                                                                                                                                                    ## audit.
  ##   
                                                                                                                                                             ## nextToken: JString
                                                                                                                                                             ##            
                                                                                                                                                             ## : 
                                                                                                                                                             ## The 
                                                                                                                                                             ## token 
                                                                                                                                                             ## for 
                                                                                                                                                             ## the 
                                                                                                                                                             ## next 
                                                                                                                                                             ## set 
                                                                                                                                                             ## of 
                                                                                                                                                             ## results.
  ##   
                                                                                                                                                                        ## endTime: JString (required)
                                                                                                                                                                        ##          
                                                                                                                                                                        ## : 
                                                                                                                                                                        ## Specify 
                                                                                                                                                                        ## this 
                                                                                                                                                                        ## filter 
                                                                                                                                                                        ## to 
                                                                                                                                                                        ## limit 
                                                                                                                                                                        ## results 
                                                                                                                                                                        ## to 
                                                                                                                                                                        ## tasks 
                                                                                                                                                                        ## that 
                                                                                                                                                                        ## were 
                                                                                                                                                                        ## completed 
                                                                                                                                                                        ## or 
                                                                                                                                                                        ## canceled 
                                                                                                                                                                        ## on 
                                                                                                                                                                        ## or 
                                                                                                                                                                        ## before 
                                                                                                                                                                        ## a 
                                                                                                                                                                        ## specific 
                                                                                                                                                                        ## date 
                                                                                                                                                                        ## and 
                                                                                                                                                                        ## time.
  ##   
                                                                                                                                                                                ## startTime: JString (required)
                                                                                                                                                                                ##            
                                                                                                                                                                                ## : 
                                                                                                                                                                                ## Specify 
                                                                                                                                                                                ## this 
                                                                                                                                                                                ## filter 
                                                                                                                                                                                ## to 
                                                                                                                                                                                ## limit 
                                                                                                                                                                                ## results 
                                                                                                                                                                                ## to 
                                                                                                                                                                                ## tasks 
                                                                                                                                                                                ## that 
                                                                                                                                                                                ## began 
                                                                                                                                                                                ## on 
                                                                                                                                                                                ## or 
                                                                                                                                                                                ## after 
                                                                                                                                                                                ## a 
                                                                                                                                                                                ## specific 
                                                                                                                                                                                ## date 
                                                                                                                                                                                ## and 
                                                                                                                                                                                ## time.
  ##   
                                                                                                                                                                                        ## taskStatus: JString
                                                                                                                                                                                        ##             
                                                                                                                                                                                        ## : 
                                                                                                                                                                                        ## Specify 
                                                                                                                                                                                        ## this 
                                                                                                                                                                                        ## filter 
                                                                                                                                                                                        ## to 
                                                                                                                                                                                        ## limit 
                                                                                                                                                                                        ## results 
                                                                                                                                                                                        ## to 
                                                                                                                                                                                        ## tasks 
                                                                                                                                                                                        ## that 
                                                                                                                                                                                        ## are 
                                                                                                                                                                                        ## in 
                                                                                                                                                                                        ## a 
                                                                                                                                                                                        ## specific 
                                                                                                                                                                                        ## state.
  section = newJObject()
  var valid_402658643 = query.getOrDefault("findingId")
  valid_402658643 = validateParameter(valid_402658643, JString,
                                      required = false, default = nil)
  if valid_402658643 != nil:
    section.add "findingId", valid_402658643
  var valid_402658644 = query.getOrDefault("maxResults")
  valid_402658644 = validateParameter(valid_402658644, JInt, required = false,
                                      default = nil)
  if valid_402658644 != nil:
    section.add "maxResults", valid_402658644
  var valid_402658645 = query.getOrDefault("auditTaskId")
  valid_402658645 = validateParameter(valid_402658645, JString,
                                      required = false, default = nil)
  if valid_402658645 != nil:
    section.add "auditTaskId", valid_402658645
  var valid_402658646 = query.getOrDefault("nextToken")
  valid_402658646 = validateParameter(valid_402658646, JString,
                                      required = false, default = nil)
  if valid_402658646 != nil:
    section.add "nextToken", valid_402658646
  assert query != nil,
         "query argument is necessary due to required `endTime` field"
  var valid_402658647 = query.getOrDefault("endTime")
  valid_402658647 = validateParameter(valid_402658647, JString, required = true,
                                      default = nil)
  if valid_402658647 != nil:
    section.add "endTime", valid_402658647
  var valid_402658648 = query.getOrDefault("startTime")
  valid_402658648 = validateParameter(valid_402658648, JString, required = true,
                                      default = nil)
  if valid_402658648 != nil:
    section.add "startTime", valid_402658648
  var valid_402658649 = query.getOrDefault("taskStatus")
  valid_402658649 = validateParameter(valid_402658649, JString,
                                      required = false,
                                      default = newJString("IN_PROGRESS"))
  if valid_402658649 != nil:
    section.add "taskStatus", valid_402658649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658650 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658650 = validateParameter(valid_402658650, JString,
                                      required = false, default = nil)
  if valid_402658650 != nil:
    section.add "X-Amz-Security-Token", valid_402658650
  var valid_402658651 = header.getOrDefault("X-Amz-Signature")
  valid_402658651 = validateParameter(valid_402658651, JString,
                                      required = false, default = nil)
  if valid_402658651 != nil:
    section.add "X-Amz-Signature", valid_402658651
  var valid_402658652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658652 = validateParameter(valid_402658652, JString,
                                      required = false, default = nil)
  if valid_402658652 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658652
  var valid_402658653 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658653 = validateParameter(valid_402658653, JString,
                                      required = false, default = nil)
  if valid_402658653 != nil:
    section.add "X-Amz-Algorithm", valid_402658653
  var valid_402658654 = header.getOrDefault("X-Amz-Date")
  valid_402658654 = validateParameter(valid_402658654, JString,
                                      required = false, default = nil)
  if valid_402658654 != nil:
    section.add "X-Amz-Date", valid_402658654
  var valid_402658655 = header.getOrDefault("X-Amz-Credential")
  valid_402658655 = validateParameter(valid_402658655, JString,
                                      required = false, default = nil)
  if valid_402658655 != nil:
    section.add "X-Amz-Credential", valid_402658655
  var valid_402658656 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658656 = validateParameter(valid_402658656, JString,
                                      required = false, default = nil)
  if valid_402658656 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658656
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658657: Call_ListAuditMitigationActionsTasks_402658640;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a list of audit mitigation action tasks that match the specified filters.
                                                                                         ## 
  let valid = call_402658657.validator(path, query, header, formData, body, _)
  let scheme = call_402658657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658657.makeUrl(scheme.get, call_402658657.host, call_402658657.base,
                                   call_402658657.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658657, uri, valid, _)

proc call*(call_402658658: Call_ListAuditMitigationActionsTasks_402658640;
           endTime: string; startTime: string; findingId: string = "";
           maxResults: int = 0; auditTaskId: string = "";
           nextToken: string = ""; taskStatus: string = "IN_PROGRESS"): Recallable =
  ## listAuditMitigationActionsTasks
  ## Gets a list of audit mitigation action tasks that match the specified filters.
  ##   
                                                                                   ## findingId: string
                                                                                   ##            
                                                                                   ## : 
                                                                                   ## Specify 
                                                                                   ## this 
                                                                                   ## filter 
                                                                                   ## to 
                                                                                   ## limit 
                                                                                   ## results 
                                                                                   ## to 
                                                                                   ## tasks 
                                                                                   ## that 
                                                                                   ## were 
                                                                                   ## applied 
                                                                                   ## to 
                                                                                   ## a 
                                                                                   ## specific 
                                                                                   ## audit 
                                                                                   ## finding.
  ##   
                                                                                              ## maxResults: int
                                                                                              ##             
                                                                                              ## : 
                                                                                              ## The 
                                                                                              ## maximum 
                                                                                              ## number 
                                                                                              ## of 
                                                                                              ## results 
                                                                                              ## to 
                                                                                              ## return 
                                                                                              ## at 
                                                                                              ## one 
                                                                                              ## time. 
                                                                                              ## The 
                                                                                              ## default 
                                                                                              ## is 
                                                                                              ## 25.
  ##   
                                                                                                    ## auditTaskId: string
                                                                                                    ##              
                                                                                                    ## : 
                                                                                                    ## Specify 
                                                                                                    ## this 
                                                                                                    ## filter 
                                                                                                    ## to 
                                                                                                    ## limit 
                                                                                                    ## results 
                                                                                                    ## to 
                                                                                                    ## tasks 
                                                                                                    ## that 
                                                                                                    ## were 
                                                                                                    ## applied 
                                                                                                    ## to 
                                                                                                    ## results 
                                                                                                    ## for 
                                                                                                    ## a 
                                                                                                    ## specific 
                                                                                                    ## audit.
  ##   
                                                                                                             ## nextToken: string
                                                                                                             ##            
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## token 
                                                                                                             ## for 
                                                                                                             ## the 
                                                                                                             ## next 
                                                                                                             ## set 
                                                                                                             ## of 
                                                                                                             ## results.
  ##   
                                                                                                                        ## endTime: string (required)
                                                                                                                        ##          
                                                                                                                        ## : 
                                                                                                                        ## Specify 
                                                                                                                        ## this 
                                                                                                                        ## filter 
                                                                                                                        ## to 
                                                                                                                        ## limit 
                                                                                                                        ## results 
                                                                                                                        ## to 
                                                                                                                        ## tasks 
                                                                                                                        ## that 
                                                                                                                        ## were 
                                                                                                                        ## completed 
                                                                                                                        ## or 
                                                                                                                        ## canceled 
                                                                                                                        ## on 
                                                                                                                        ## or 
                                                                                                                        ## before 
                                                                                                                        ## a 
                                                                                                                        ## specific 
                                                                                                                        ## date 
                                                                                                                        ## and 
                                                                                                                        ## time.
  ##   
                                                                                                                                ## startTime: string (required)
                                                                                                                                ##            
                                                                                                                                ## : 
                                                                                                                                ## Specify 
                                                                                                                                ## this 
                                                                                                                                ## filter 
                                                                                                                                ## to 
                                                                                                                                ## limit 
                                                                                                                                ## results 
                                                                                                                                ## to 
                                                                                                                                ## tasks 
                                                                                                                                ## that 
                                                                                                                                ## began 
                                                                                                                                ## on 
                                                                                                                                ## or 
                                                                                                                                ## after 
                                                                                                                                ## a 
                                                                                                                                ## specific 
                                                                                                                                ## date 
                                                                                                                                ## and 
                                                                                                                                ## time.
  ##   
                                                                                                                                        ## taskStatus: string
                                                                                                                                        ##             
                                                                                                                                        ## : 
                                                                                                                                        ## Specify 
                                                                                                                                        ## this 
                                                                                                                                        ## filter 
                                                                                                                                        ## to 
                                                                                                                                        ## limit 
                                                                                                                                        ## results 
                                                                                                                                        ## to 
                                                                                                                                        ## tasks 
                                                                                                                                        ## that 
                                                                                                                                        ## are 
                                                                                                                                        ## in 
                                                                                                                                        ## a 
                                                                                                                                        ## specific 
                                                                                                                                        ## state.
  var query_402658659 = newJObject()
  add(query_402658659, "findingId", newJString(findingId))
  add(query_402658659, "maxResults", newJInt(maxResults))
  add(query_402658659, "auditTaskId", newJString(auditTaskId))
  add(query_402658659, "nextToken", newJString(nextToken))
  add(query_402658659, "endTime", newJString(endTime))
  add(query_402658659, "startTime", newJString(startTime))
  add(query_402658659, "taskStatus", newJString(taskStatus))
  result = call_402658658.call(nil, query_402658659, nil, nil, nil)

var listAuditMitigationActionsTasks* = Call_ListAuditMitigationActionsTasks_402658640(
    name: "listAuditMitigationActionsTasks", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/audit/mitigationactions/tasks#startTime&endTime",
    validator: validate_ListAuditMitigationActionsTasks_402658641, base: "/",
    makeUrl: url_ListAuditMitigationActionsTasks_402658642,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuditTasks_402658660 = ref object of OpenApiRestCall_402656044
proc url_ListAuditTasks_402658662(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuditTasks_402658661(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Device Defender audits that have been performed during a given time period.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   taskType: JString
                                  ##           : A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
  ##   
                                                                                                                                                                              ## maxResults: JInt
                                                                                                                                                                              ##             
                                                                                                                                                                              ## : 
                                                                                                                                                                              ## The 
                                                                                                                                                                              ## maximum 
                                                                                                                                                                              ## number 
                                                                                                                                                                              ## of 
                                                                                                                                                                              ## results 
                                                                                                                                                                              ## to 
                                                                                                                                                                              ## return 
                                                                                                                                                                              ## at 
                                                                                                                                                                              ## one 
                                                                                                                                                                              ## time. 
                                                                                                                                                                              ## The 
                                                                                                                                                                              ## default 
                                                                                                                                                                              ## is 
                                                                                                                                                                              ## 25.
  ##   
                                                                                                                                                                                    ## nextToken: JString
                                                                                                                                                                                    ##            
                                                                                                                                                                                    ## : 
                                                                                                                                                                                    ## The 
                                                                                                                                                                                    ## token 
                                                                                                                                                                                    ## for 
                                                                                                                                                                                    ## the 
                                                                                                                                                                                    ## next 
                                                                                                                                                                                    ## set 
                                                                                                                                                                                    ## of 
                                                                                                                                                                                    ## results.
  ##   
                                                                                                                                                                                               ## endTime: JString (required)
                                                                                                                                                                                               ##          
                                                                                                                                                                                               ## : 
                                                                                                                                                                                               ## The 
                                                                                                                                                                                               ## end 
                                                                                                                                                                                               ## of 
                                                                                                                                                                                               ## the 
                                                                                                                                                                                               ## time 
                                                                                                                                                                                               ## period.
  ##   
                                                                                                                                                                                                         ## startTime: JString (required)
                                                                                                                                                                                                         ##            
                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                         ## beginning 
                                                                                                                                                                                                         ## of 
                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                         ## time 
                                                                                                                                                                                                         ## period. 
                                                                                                                                                                                                         ## Audit 
                                                                                                                                                                                                         ## information 
                                                                                                                                                                                                         ## is 
                                                                                                                                                                                                         ## retained 
                                                                                                                                                                                                         ## for 
                                                                                                                                                                                                         ## a 
                                                                                                                                                                                                         ## limited 
                                                                                                                                                                                                         ## time 
                                                                                                                                                                                                         ## (180 
                                                                                                                                                                                                         ## days). 
                                                                                                                                                                                                         ## Requesting 
                                                                                                                                                                                                         ## a 
                                                                                                                                                                                                         ## start 
                                                                                                                                                                                                         ## time 
                                                                                                                                                                                                         ## prior 
                                                                                                                                                                                                         ## to 
                                                                                                                                                                                                         ## what 
                                                                                                                                                                                                         ## is 
                                                                                                                                                                                                         ## retained 
                                                                                                                                                                                                         ## results 
                                                                                                                                                                                                         ## in 
                                                                                                                                                                                                         ## an 
                                                                                                                                                                                                         ## "InvalidRequestException".
  ##   
                                                                                                                                                                                                                                      ## taskStatus: JString
                                                                                                                                                                                                                                      ##             
                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                      ## A 
                                                                                                                                                                                                                                      ## filter 
                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                      ## limit 
                                                                                                                                                                                                                                      ## the 
                                                                                                                                                                                                                                      ## output 
                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                      ## audits 
                                                                                                                                                                                                                                      ## with 
                                                                                                                                                                                                                                      ## the 
                                                                                                                                                                                                                                      ## specified 
                                                                                                                                                                                                                                      ## completion 
                                                                                                                                                                                                                                      ## status: 
                                                                                                                                                                                                                                      ## can 
                                                                                                                                                                                                                                      ## be 
                                                                                                                                                                                                                                      ## one 
                                                                                                                                                                                                                                      ## of 
                                                                                                                                                                                                                                      ## "IN_PROGRESS", 
                                                                                                                                                                                                                                      ## "COMPLETED", 
                                                                                                                                                                                                                                      ## "FAILED", 
                                                                                                                                                                                                                                      ## or 
                                                                                                                                                                                                                                      ## "CANCELED".
  section = newJObject()
  var valid_402658663 = query.getOrDefault("taskType")
  valid_402658663 = validateParameter(valid_402658663, JString,
                                      required = false, default = newJString(
      "ON_DEMAND_AUDIT_TASK"))
  if valid_402658663 != nil:
    section.add "taskType", valid_402658663
  var valid_402658664 = query.getOrDefault("maxResults")
  valid_402658664 = validateParameter(valid_402658664, JInt, required = false,
                                      default = nil)
  if valid_402658664 != nil:
    section.add "maxResults", valid_402658664
  var valid_402658665 = query.getOrDefault("nextToken")
  valid_402658665 = validateParameter(valid_402658665, JString,
                                      required = false, default = nil)
  if valid_402658665 != nil:
    section.add "nextToken", valid_402658665
  assert query != nil,
         "query argument is necessary due to required `endTime` field"
  var valid_402658666 = query.getOrDefault("endTime")
  valid_402658666 = validateParameter(valid_402658666, JString, required = true,
                                      default = nil)
  if valid_402658666 != nil:
    section.add "endTime", valid_402658666
  var valid_402658667 = query.getOrDefault("startTime")
  valid_402658667 = validateParameter(valid_402658667, JString, required = true,
                                      default = nil)
  if valid_402658667 != nil:
    section.add "startTime", valid_402658667
  var valid_402658668 = query.getOrDefault("taskStatus")
  valid_402658668 = validateParameter(valid_402658668, JString,
                                      required = false,
                                      default = newJString("IN_PROGRESS"))
  if valid_402658668 != nil:
    section.add "taskStatus", valid_402658668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658669 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658669 = validateParameter(valid_402658669, JString,
                                      required = false, default = nil)
  if valid_402658669 != nil:
    section.add "X-Amz-Security-Token", valid_402658669
  var valid_402658670 = header.getOrDefault("X-Amz-Signature")
  valid_402658670 = validateParameter(valid_402658670, JString,
                                      required = false, default = nil)
  if valid_402658670 != nil:
    section.add "X-Amz-Signature", valid_402658670
  var valid_402658671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658671 = validateParameter(valid_402658671, JString,
                                      required = false, default = nil)
  if valid_402658671 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658671
  var valid_402658672 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658672 = validateParameter(valid_402658672, JString,
                                      required = false, default = nil)
  if valid_402658672 != nil:
    section.add "X-Amz-Algorithm", valid_402658672
  var valid_402658673 = header.getOrDefault("X-Amz-Date")
  valid_402658673 = validateParameter(valid_402658673, JString,
                                      required = false, default = nil)
  if valid_402658673 != nil:
    section.add "X-Amz-Date", valid_402658673
  var valid_402658674 = header.getOrDefault("X-Amz-Credential")
  valid_402658674 = validateParameter(valid_402658674, JString,
                                      required = false, default = nil)
  if valid_402658674 != nil:
    section.add "X-Amz-Credential", valid_402658674
  var valid_402658675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658675 = validateParameter(valid_402658675, JString,
                                      required = false, default = nil)
  if valid_402658675 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658675
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658676: Call_ListAuditTasks_402658660; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender audits that have been performed during a given time period.
                                                                                         ## 
  let valid = call_402658676.validator(path, query, header, formData, body, _)
  let scheme = call_402658676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658676.makeUrl(scheme.get, call_402658676.host, call_402658676.base,
                                   call_402658676.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658676, uri, valid, _)

proc call*(call_402658677: Call_ListAuditTasks_402658660; endTime: string;
           startTime: string; taskType: string = "ON_DEMAND_AUDIT_TASK";
           maxResults: int = 0; nextToken: string = "";
           taskStatus: string = "IN_PROGRESS"): Recallable =
  ## listAuditTasks
  ## Lists the Device Defender audits that have been performed during a given time period.
  ##   
                                                                                          ## taskType: string
                                                                                          ##           
                                                                                          ## : 
                                                                                          ## A 
                                                                                          ## filter 
                                                                                          ## to 
                                                                                          ## limit 
                                                                                          ## the 
                                                                                          ## output 
                                                                                          ## to 
                                                                                          ## the 
                                                                                          ## specified 
                                                                                          ## type 
                                                                                          ## of 
                                                                                          ## audit: 
                                                                                          ## can 
                                                                                          ## be 
                                                                                          ## one 
                                                                                          ## of 
                                                                                          ## "ON_DEMAND_AUDIT_TASK" 
                                                                                          ## or 
                                                                                          ## "SCHEDULED__AUDIT_TASK".
  ##   
                                                                                                                     ## maxResults: int
                                                                                                                     ##             
                                                                                                                     ## : 
                                                                                                                     ## The 
                                                                                                                     ## maximum 
                                                                                                                     ## number 
                                                                                                                     ## of 
                                                                                                                     ## results 
                                                                                                                     ## to 
                                                                                                                     ## return 
                                                                                                                     ## at 
                                                                                                                     ## one 
                                                                                                                     ## time. 
                                                                                                                     ## The 
                                                                                                                     ## default 
                                                                                                                     ## is 
                                                                                                                     ## 25.
  ##   
                                                                                                                           ## nextToken: string
                                                                                                                           ##            
                                                                                                                           ## : 
                                                                                                                           ## The 
                                                                                                                           ## token 
                                                                                                                           ## for 
                                                                                                                           ## the 
                                                                                                                           ## next 
                                                                                                                           ## set 
                                                                                                                           ## of 
                                                                                                                           ## results.
  ##   
                                                                                                                                      ## endTime: string (required)
                                                                                                                                      ##          
                                                                                                                                      ## : 
                                                                                                                                      ## The 
                                                                                                                                      ## end 
                                                                                                                                      ## of 
                                                                                                                                      ## the 
                                                                                                                                      ## time 
                                                                                                                                      ## period.
  ##   
                                                                                                                                                ## startTime: string (required)
                                                                                                                                                ##            
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## beginning 
                                                                                                                                                ## of 
                                                                                                                                                ## the 
                                                                                                                                                ## time 
                                                                                                                                                ## period. 
                                                                                                                                                ## Audit 
                                                                                                                                                ## information 
                                                                                                                                                ## is 
                                                                                                                                                ## retained 
                                                                                                                                                ## for 
                                                                                                                                                ## a 
                                                                                                                                                ## limited 
                                                                                                                                                ## time 
                                                                                                                                                ## (180 
                                                                                                                                                ## days). 
                                                                                                                                                ## Requesting 
                                                                                                                                                ## a 
                                                                                                                                                ## start 
                                                                                                                                                ## time 
                                                                                                                                                ## prior 
                                                                                                                                                ## to 
                                                                                                                                                ## what 
                                                                                                                                                ## is 
                                                                                                                                                ## retained 
                                                                                                                                                ## results 
                                                                                                                                                ## in 
                                                                                                                                                ## an 
                                                                                                                                                ## "InvalidRequestException".
  ##   
                                                                                                                                                                             ## taskStatus: string
                                                                                                                                                                             ##             
                                                                                                                                                                             ## : 
                                                                                                                                                                             ## A 
                                                                                                                                                                             ## filter 
                                                                                                                                                                             ## to 
                                                                                                                                                                             ## limit 
                                                                                                                                                                             ## the 
                                                                                                                                                                             ## output 
                                                                                                                                                                             ## to 
                                                                                                                                                                             ## audits 
                                                                                                                                                                             ## with 
                                                                                                                                                                             ## the 
                                                                                                                                                                             ## specified 
                                                                                                                                                                             ## completion 
                                                                                                                                                                             ## status: 
                                                                                                                                                                             ## can 
                                                                                                                                                                             ## be 
                                                                                                                                                                             ## one 
                                                                                                                                                                             ## of 
                                                                                                                                                                             ## "IN_PROGRESS", 
                                                                                                                                                                             ## "COMPLETED", 
                                                                                                                                                                             ## "FAILED", 
                                                                                                                                                                             ## or 
                                                                                                                                                                             ## "CANCELED".
  var query_402658678 = newJObject()
  add(query_402658678, "taskType", newJString(taskType))
  add(query_402658678, "maxResults", newJInt(maxResults))
  add(query_402658678, "nextToken", newJString(nextToken))
  add(query_402658678, "endTime", newJString(endTime))
  add(query_402658678, "startTime", newJString(startTime))
  add(query_402658678, "taskStatus", newJString(taskStatus))
  result = call_402658677.call(nil, query_402658678, nil, nil, nil)

var listAuditTasks* = Call_ListAuditTasks_402658660(name: "listAuditTasks",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com",
    route: "/audit/tasks#startTime&endTime", validator: validate_ListAuditTasks_402658661,
    base: "/", makeUrl: url_ListAuditTasks_402658662,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAuthorizers_402658679 = ref object of OpenApiRestCall_402656044
proc url_ListAuthorizers_402658681(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAuthorizers_402658680(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the authorizers registered in your account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : A marker used to get the next set of results.
  ##   
                                                                                            ## status: JString
                                                                                            ##         
                                                                                            ## : 
                                                                                            ## The 
                                                                                            ## status 
                                                                                            ## of 
                                                                                            ## the 
                                                                                            ## list 
                                                                                            ## authorizers 
                                                                                            ## request.
  ##   
                                                                                                       ## isAscendingOrder: JBool
                                                                                                       ##                   
                                                                                                       ## : 
                                                                                                       ## Return 
                                                                                                       ## the 
                                                                                                       ## list 
                                                                                                       ## of 
                                                                                                       ## authorizers 
                                                                                                       ## in 
                                                                                                       ## ascending 
                                                                                                       ## alphabetical 
                                                                                                       ## order.
  ##   
                                                                                                                ## pageSize: JInt
                                                                                                                ##           
                                                                                                                ## : 
                                                                                                                ## The 
                                                                                                                ## maximum 
                                                                                                                ## number 
                                                                                                                ## of 
                                                                                                                ## results 
                                                                                                                ## to 
                                                                                                                ## return 
                                                                                                                ## at 
                                                                                                                ## one 
                                                                                                                ## time.
  section = newJObject()
  var valid_402658682 = query.getOrDefault("marker")
  valid_402658682 = validateParameter(valid_402658682, JString,
                                      required = false, default = nil)
  if valid_402658682 != nil:
    section.add "marker", valid_402658682
  var valid_402658683 = query.getOrDefault("status")
  valid_402658683 = validateParameter(valid_402658683, JString,
                                      required = false,
                                      default = newJString("ACTIVE"))
  if valid_402658683 != nil:
    section.add "status", valid_402658683
  var valid_402658684 = query.getOrDefault("isAscendingOrder")
  valid_402658684 = validateParameter(valid_402658684, JBool, required = false,
                                      default = nil)
  if valid_402658684 != nil:
    section.add "isAscendingOrder", valid_402658684
  var valid_402658685 = query.getOrDefault("pageSize")
  valid_402658685 = validateParameter(valid_402658685, JInt, required = false,
                                      default = nil)
  if valid_402658685 != nil:
    section.add "pageSize", valid_402658685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658686 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658686 = validateParameter(valid_402658686, JString,
                                      required = false, default = nil)
  if valid_402658686 != nil:
    section.add "X-Amz-Security-Token", valid_402658686
  var valid_402658687 = header.getOrDefault("X-Amz-Signature")
  valid_402658687 = validateParameter(valid_402658687, JString,
                                      required = false, default = nil)
  if valid_402658687 != nil:
    section.add "X-Amz-Signature", valid_402658687
  var valid_402658688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658688 = validateParameter(valid_402658688, JString,
                                      required = false, default = nil)
  if valid_402658688 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658688
  var valid_402658689 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658689 = validateParameter(valid_402658689, JString,
                                      required = false, default = nil)
  if valid_402658689 != nil:
    section.add "X-Amz-Algorithm", valid_402658689
  var valid_402658690 = header.getOrDefault("X-Amz-Date")
  valid_402658690 = validateParameter(valid_402658690, JString,
                                      required = false, default = nil)
  if valid_402658690 != nil:
    section.add "X-Amz-Date", valid_402658690
  var valid_402658691 = header.getOrDefault("X-Amz-Credential")
  valid_402658691 = validateParameter(valid_402658691, JString,
                                      required = false, default = nil)
  if valid_402658691 != nil:
    section.add "X-Amz-Credential", valid_402658691
  var valid_402658692 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658692 = validateParameter(valid_402658692, JString,
                                      required = false, default = nil)
  if valid_402658692 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658692
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658693: Call_ListAuthorizers_402658679; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the authorizers registered in your account.
                                                                                         ## 
  let valid = call_402658693.validator(path, query, header, formData, body, _)
  let scheme = call_402658693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658693.makeUrl(scheme.get, call_402658693.host, call_402658693.base,
                                   call_402658693.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658693, uri, valid, _)

proc call*(call_402658694: Call_ListAuthorizers_402658679; marker: string = "";
           status: string = "ACTIVE"; isAscendingOrder: bool = false;
           pageSize: int = 0): Recallable =
  ## listAuthorizers
  ## Lists the authorizers registered in your account.
  ##   marker: string
                                                      ##         : A marker used to get the next set of results.
  ##   
                                                                                                                ## status: string
                                                                                                                ##         
                                                                                                                ## : 
                                                                                                                ## The 
                                                                                                                ## status 
                                                                                                                ## of 
                                                                                                                ## the 
                                                                                                                ## list 
                                                                                                                ## authorizers 
                                                                                                                ## request.
  ##   
                                                                                                                           ## isAscendingOrder: bool
                                                                                                                           ##                   
                                                                                                                           ## : 
                                                                                                                           ## Return 
                                                                                                                           ## the 
                                                                                                                           ## list 
                                                                                                                           ## of 
                                                                                                                           ## authorizers 
                                                                                                                           ## in 
                                                                                                                           ## ascending 
                                                                                                                           ## alphabetical 
                                                                                                                           ## order.
  ##   
                                                                                                                                    ## pageSize: int
                                                                                                                                    ##           
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## maximum 
                                                                                                                                    ## number 
                                                                                                                                    ## of 
                                                                                                                                    ## results 
                                                                                                                                    ## to 
                                                                                                                                    ## return 
                                                                                                                                    ## at 
                                                                                                                                    ## one 
                                                                                                                                    ## time.
  var query_402658695 = newJObject()
  add(query_402658695, "marker", newJString(marker))
  add(query_402658695, "status", newJString(status))
  add(query_402658695, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658695, "pageSize", newJInt(pageSize))
  result = call_402658694.call(nil, query_402658695, nil, nil, nil)

var listAuthorizers* = Call_ListAuthorizers_402658679(name: "listAuthorizers",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/authorizers/",
    validator: validate_ListAuthorizers_402658680, base: "/",
    makeUrl: url_ListAuthorizers_402658681, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListBillingGroups_402658696 = ref object of OpenApiRestCall_402656044
proc url_ListBillingGroups_402658698(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListBillingGroups_402658697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the billing groups you have created.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return per request.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## namePrefixFilter: JString
                                                                                                                  ##                   
                                                                                                                  ## : 
                                                                                                                  ## Limit 
                                                                                                                  ## the 
                                                                                                                  ## results 
                                                                                                                  ## to 
                                                                                                                  ## billing 
                                                                                                                  ## groups 
                                                                                                                  ## whose 
                                                                                                                  ## names 
                                                                                                                  ## have 
                                                                                                                  ## the 
                                                                                                                  ## given 
                                                                                                                  ## prefix.
  section = newJObject()
  var valid_402658699 = query.getOrDefault("maxResults")
  valid_402658699 = validateParameter(valid_402658699, JInt, required = false,
                                      default = nil)
  if valid_402658699 != nil:
    section.add "maxResults", valid_402658699
  var valid_402658700 = query.getOrDefault("nextToken")
  valid_402658700 = validateParameter(valid_402658700, JString,
                                      required = false, default = nil)
  if valid_402658700 != nil:
    section.add "nextToken", valid_402658700
  var valid_402658701 = query.getOrDefault("namePrefixFilter")
  valid_402658701 = validateParameter(valid_402658701, JString,
                                      required = false, default = nil)
  if valid_402658701 != nil:
    section.add "namePrefixFilter", valid_402658701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658702 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658702 = validateParameter(valid_402658702, JString,
                                      required = false, default = nil)
  if valid_402658702 != nil:
    section.add "X-Amz-Security-Token", valid_402658702
  var valid_402658703 = header.getOrDefault("X-Amz-Signature")
  valid_402658703 = validateParameter(valid_402658703, JString,
                                      required = false, default = nil)
  if valid_402658703 != nil:
    section.add "X-Amz-Signature", valid_402658703
  var valid_402658704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658704 = validateParameter(valid_402658704, JString,
                                      required = false, default = nil)
  if valid_402658704 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658704
  var valid_402658705 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658705 = validateParameter(valid_402658705, JString,
                                      required = false, default = nil)
  if valid_402658705 != nil:
    section.add "X-Amz-Algorithm", valid_402658705
  var valid_402658706 = header.getOrDefault("X-Amz-Date")
  valid_402658706 = validateParameter(valid_402658706, JString,
                                      required = false, default = nil)
  if valid_402658706 != nil:
    section.add "X-Amz-Date", valid_402658706
  var valid_402658707 = header.getOrDefault("X-Amz-Credential")
  valid_402658707 = validateParameter(valid_402658707, JString,
                                      required = false, default = nil)
  if valid_402658707 != nil:
    section.add "X-Amz-Credential", valid_402658707
  var valid_402658708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658708 = validateParameter(valid_402658708, JString,
                                      required = false, default = nil)
  if valid_402658708 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658708
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658709: Call_ListBillingGroups_402658696;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the billing groups you have created.
                                                                                         ## 
  let valid = call_402658709.validator(path, query, header, formData, body, _)
  let scheme = call_402658709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658709.makeUrl(scheme.get, call_402658709.host, call_402658709.base,
                                   call_402658709.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658709, uri, valid, _)

proc call*(call_402658710: Call_ListBillingGroups_402658696;
           maxResults: int = 0; nextToken: string = "";
           namePrefixFilter: string = ""): Recallable =
  ## listBillingGroups
  ## Lists the billing groups you have created.
  ##   maxResults: int
                                               ##             : The maximum number of results to return per request.
  ##   
                                                                                                                    ## nextToken: string
                                                                                                                    ##            
                                                                                                                    ## : 
                                                                                                                    ## The 
                                                                                                                    ## token 
                                                                                                                    ## to 
                                                                                                                    ## retrieve 
                                                                                                                    ## the 
                                                                                                                    ## next 
                                                                                                                    ## set 
                                                                                                                    ## of 
                                                                                                                    ## results.
  ##   
                                                                                                                               ## namePrefixFilter: string
                                                                                                                               ##                   
                                                                                                                               ## : 
                                                                                                                               ## Limit 
                                                                                                                               ## the 
                                                                                                                               ## results 
                                                                                                                               ## to 
                                                                                                                               ## billing 
                                                                                                                               ## groups 
                                                                                                                               ## whose 
                                                                                                                               ## names 
                                                                                                                               ## have 
                                                                                                                               ## the 
                                                                                                                               ## given 
                                                                                                                               ## prefix.
  var query_402658711 = newJObject()
  add(query_402658711, "maxResults", newJInt(maxResults))
  add(query_402658711, "nextToken", newJString(nextToken))
  add(query_402658711, "namePrefixFilter", newJString(namePrefixFilter))
  result = call_402658710.call(nil, query_402658711, nil, nil, nil)

var listBillingGroups* = Call_ListBillingGroups_402658696(
    name: "listBillingGroups", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/billing-groups",
    validator: validate_ListBillingGroups_402658697, base: "/",
    makeUrl: url_ListBillingGroups_402658698,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListCACertificates_402658712 = ref object of OpenApiRestCall_402656044
proc url_ListCACertificates_402658714(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListCACertificates_402658713(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The marker for the next set of results.
  ##   
                                                                                      ## isAscendingOrder: JBool
                                                                                      ##                   
                                                                                      ## : 
                                                                                      ## Determines 
                                                                                      ## the 
                                                                                      ## order 
                                                                                      ## of 
                                                                                      ## the 
                                                                                      ## results.
  ##   
                                                                                                 ## pageSize: JInt
                                                                                                 ##           
                                                                                                 ## : 
                                                                                                 ## The 
                                                                                                 ## result 
                                                                                                 ## page 
                                                                                                 ## size.
  section = newJObject()
  var valid_402658715 = query.getOrDefault("marker")
  valid_402658715 = validateParameter(valid_402658715, JString,
                                      required = false, default = nil)
  if valid_402658715 != nil:
    section.add "marker", valid_402658715
  var valid_402658716 = query.getOrDefault("isAscendingOrder")
  valid_402658716 = validateParameter(valid_402658716, JBool, required = false,
                                      default = nil)
  if valid_402658716 != nil:
    section.add "isAscendingOrder", valid_402658716
  var valid_402658717 = query.getOrDefault("pageSize")
  valid_402658717 = validateParameter(valid_402658717, JInt, required = false,
                                      default = nil)
  if valid_402658717 != nil:
    section.add "pageSize", valid_402658717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658718 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658718 = validateParameter(valid_402658718, JString,
                                      required = false, default = nil)
  if valid_402658718 != nil:
    section.add "X-Amz-Security-Token", valid_402658718
  var valid_402658719 = header.getOrDefault("X-Amz-Signature")
  valid_402658719 = validateParameter(valid_402658719, JString,
                                      required = false, default = nil)
  if valid_402658719 != nil:
    section.add "X-Amz-Signature", valid_402658719
  var valid_402658720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658720 = validateParameter(valid_402658720, JString,
                                      required = false, default = nil)
  if valid_402658720 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658720
  var valid_402658721 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658721 = validateParameter(valid_402658721, JString,
                                      required = false, default = nil)
  if valid_402658721 != nil:
    section.add "X-Amz-Algorithm", valid_402658721
  var valid_402658722 = header.getOrDefault("X-Amz-Date")
  valid_402658722 = validateParameter(valid_402658722, JString,
                                      required = false, default = nil)
  if valid_402658722 != nil:
    section.add "X-Amz-Date", valid_402658722
  var valid_402658723 = header.getOrDefault("X-Amz-Credential")
  valid_402658723 = validateParameter(valid_402658723, JString,
                                      required = false, default = nil)
  if valid_402658723 != nil:
    section.add "X-Amz-Credential", valid_402658723
  var valid_402658724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658724 = validateParameter(valid_402658724, JString,
                                      required = false, default = nil)
  if valid_402658724 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658724
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658725: Call_ListCACertificates_402658712;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
                                                                                         ## 
  let valid = call_402658725.validator(path, query, header, formData, body, _)
  let scheme = call_402658725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658725.makeUrl(scheme.get, call_402658725.host, call_402658725.base,
                                   call_402658725.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658725, uri, valid, _)

proc call*(call_402658726: Call_ListCACertificates_402658712;
           marker: string = ""; isAscendingOrder: bool = false;
           pageSize: int = 0): Recallable =
  ## listCACertificates
  ## <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
  ##   
                                                                                                                                                                                                       ## marker: string
                                                                                                                                                                                                       ##         
                                                                                                                                                                                                       ## : 
                                                                                                                                                                                                       ## The 
                                                                                                                                                                                                       ## marker 
                                                                                                                                                                                                       ## for 
                                                                                                                                                                                                       ## the 
                                                                                                                                                                                                       ## next 
                                                                                                                                                                                                       ## set 
                                                                                                                                                                                                       ## of 
                                                                                                                                                                                                       ## results.
  ##   
                                                                                                                                                                                                                  ## isAscendingOrder: bool
                                                                                                                                                                                                                  ##                   
                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                  ## Determines 
                                                                                                                                                                                                                  ## the 
                                                                                                                                                                                                                  ## order 
                                                                                                                                                                                                                  ## of 
                                                                                                                                                                                                                  ## the 
                                                                                                                                                                                                                  ## results.
  ##   
                                                                                                                                                                                                                             ## pageSize: int
                                                                                                                                                                                                                             ##           
                                                                                                                                                                                                                             ## : 
                                                                                                                                                                                                                             ## The 
                                                                                                                                                                                                                             ## result 
                                                                                                                                                                                                                             ## page 
                                                                                                                                                                                                                             ## size.
  var query_402658727 = newJObject()
  add(query_402658727, "marker", newJString(marker))
  add(query_402658727, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658727, "pageSize", newJInt(pageSize))
  result = call_402658726.call(nil, query_402658727, nil, nil, nil)

var listCACertificates* = Call_ListCACertificates_402658712(
    name: "listCACertificates", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/cacertificates",
    validator: validate_ListCACertificates_402658713, base: "/",
    makeUrl: url_ListCACertificates_402658714,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListCertificatesByCA_402658728 = ref object of OpenApiRestCall_402656044
proc url_ListCertificatesByCA_402658730(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "caCertificateId" in path,
         "`caCertificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates-by-ca/"),
                 (kind: VariableSegment, value: "caCertificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListCertificatesByCA_402658729(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List the device certificates signed by the specified CA certificate.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   caCertificateId: JString (required)
                                 ##                  : The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `caCertificateId` field"
  var valid_402658731 = path.getOrDefault("caCertificateId")
  valid_402658731 = validateParameter(valid_402658731, JString, required = true,
                                      default = nil)
  if valid_402658731 != nil:
    section.add "caCertificateId", valid_402658731
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The marker for the next set of results.
  ##   
                                                                                      ## isAscendingOrder: JBool
                                                                                      ##                   
                                                                                      ## : 
                                                                                      ## Specifies 
                                                                                      ## the 
                                                                                      ## order 
                                                                                      ## for 
                                                                                      ## results. 
                                                                                      ## If 
                                                                                      ## True, 
                                                                                      ## the 
                                                                                      ## results 
                                                                                      ## are 
                                                                                      ## returned 
                                                                                      ## in 
                                                                                      ## ascending 
                                                                                      ## order, 
                                                                                      ## based 
                                                                                      ## on 
                                                                                      ## the 
                                                                                      ## creation 
                                                                                      ## date.
  ##   
                                                                                              ## pageSize: JInt
                                                                                              ##           
                                                                                              ## : 
                                                                                              ## The 
                                                                                              ## result 
                                                                                              ## page 
                                                                                              ## size.
  section = newJObject()
  var valid_402658732 = query.getOrDefault("marker")
  valid_402658732 = validateParameter(valid_402658732, JString,
                                      required = false, default = nil)
  if valid_402658732 != nil:
    section.add "marker", valid_402658732
  var valid_402658733 = query.getOrDefault("isAscendingOrder")
  valid_402658733 = validateParameter(valid_402658733, JBool, required = false,
                                      default = nil)
  if valid_402658733 != nil:
    section.add "isAscendingOrder", valid_402658733
  var valid_402658734 = query.getOrDefault("pageSize")
  valid_402658734 = validateParameter(valid_402658734, JInt, required = false,
                                      default = nil)
  if valid_402658734 != nil:
    section.add "pageSize", valid_402658734
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658735 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658735 = validateParameter(valid_402658735, JString,
                                      required = false, default = nil)
  if valid_402658735 != nil:
    section.add "X-Amz-Security-Token", valid_402658735
  var valid_402658736 = header.getOrDefault("X-Amz-Signature")
  valid_402658736 = validateParameter(valid_402658736, JString,
                                      required = false, default = nil)
  if valid_402658736 != nil:
    section.add "X-Amz-Signature", valid_402658736
  var valid_402658737 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658737 = validateParameter(valid_402658737, JString,
                                      required = false, default = nil)
  if valid_402658737 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658737
  var valid_402658738 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658738 = validateParameter(valid_402658738, JString,
                                      required = false, default = nil)
  if valid_402658738 != nil:
    section.add "X-Amz-Algorithm", valid_402658738
  var valid_402658739 = header.getOrDefault("X-Amz-Date")
  valid_402658739 = validateParameter(valid_402658739, JString,
                                      required = false, default = nil)
  if valid_402658739 != nil:
    section.add "X-Amz-Date", valid_402658739
  var valid_402658740 = header.getOrDefault("X-Amz-Credential")
  valid_402658740 = validateParameter(valid_402658740, JString,
                                      required = false, default = nil)
  if valid_402658740 != nil:
    section.add "X-Amz-Credential", valid_402658740
  var valid_402658741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658741 = validateParameter(valid_402658741, JString,
                                      required = false, default = nil)
  if valid_402658741 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658741
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658742: Call_ListCertificatesByCA_402658728;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## List the device certificates signed by the specified CA certificate.
                                                                                         ## 
  let valid = call_402658742.validator(path, query, header, formData, body, _)
  let scheme = call_402658742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658742.makeUrl(scheme.get, call_402658742.host, call_402658742.base,
                                   call_402658742.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658742, uri, valid, _)

proc call*(call_402658743: Call_ListCertificatesByCA_402658728;
           caCertificateId: string; marker: string = "";
           isAscendingOrder: bool = false; pageSize: int = 0): Recallable =
  ## listCertificatesByCA
  ## List the device certificates signed by the specified CA certificate.
  ##   
                                                                         ## caCertificateId: string (required)
                                                                         ##                  
                                                                         ## : 
                                                                         ## The ID of 
                                                                         ## the 
                                                                         ## CA 
                                                                         ## certificate. 
                                                                         ## This 
                                                                         ## operation 
                                                                         ## will 
                                                                         ## list 
                                                                         ## all 
                                                                         ## registered 
                                                                         ## device 
                                                                         ## certificate 
                                                                         ## that 
                                                                         ## were 
                                                                         ## signed 
                                                                         ## by 
                                                                         ## this 
                                                                         ## CA 
                                                                         ## certificate.
  ##   
                                                                                        ## marker: string
                                                                                        ##         
                                                                                        ## : 
                                                                                        ## The 
                                                                                        ## marker 
                                                                                        ## for 
                                                                                        ## the 
                                                                                        ## next 
                                                                                        ## set 
                                                                                        ## of 
                                                                                        ## results.
  ##   
                                                                                                   ## isAscendingOrder: bool
                                                                                                   ##                   
                                                                                                   ## : 
                                                                                                   ## Specifies 
                                                                                                   ## the 
                                                                                                   ## order 
                                                                                                   ## for 
                                                                                                   ## results. 
                                                                                                   ## If 
                                                                                                   ## True, 
                                                                                                   ## the 
                                                                                                   ## results 
                                                                                                   ## are 
                                                                                                   ## returned 
                                                                                                   ## in 
                                                                                                   ## ascending 
                                                                                                   ## order, 
                                                                                                   ## based 
                                                                                                   ## on 
                                                                                                   ## the 
                                                                                                   ## creation 
                                                                                                   ## date.
  ##   
                                                                                                           ## pageSize: int
                                                                                                           ##           
                                                                                                           ## : 
                                                                                                           ## The 
                                                                                                           ## result 
                                                                                                           ## page 
                                                                                                           ## size.
  var path_402658744 = newJObject()
  var query_402658745 = newJObject()
  add(path_402658744, "caCertificateId", newJString(caCertificateId))
  add(query_402658745, "marker", newJString(marker))
  add(query_402658745, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658745, "pageSize", newJInt(pageSize))
  result = call_402658743.call(path_402658744, query_402658745, nil, nil, nil)

var listCertificatesByCA* = Call_ListCertificatesByCA_402658728(
    name: "listCertificatesByCA", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/certificates-by-ca/{caCertificateId}",
    validator: validate_ListCertificatesByCA_402658729, base: "/",
    makeUrl: url_ListCertificatesByCA_402658730,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListDomainConfigurations_402658746 = ref object of OpenApiRestCall_402656044
proc url_ListDomainConfigurations_402658748(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListDomainConfigurations_402658747(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   serviceType: JString
                                  ##              : The type of service delivered by the endpoint.
  ##   
                                                                                                  ## marker: JString
                                                                                                  ##         
                                                                                                  ## : 
                                                                                                  ## The 
                                                                                                  ## marker 
                                                                                                  ## for 
                                                                                                  ## the 
                                                                                                  ## next 
                                                                                                  ## set 
                                                                                                  ## of 
                                                                                                  ## results.
  ##   
                                                                                                             ## pageSize: JInt
                                                                                                             ##           
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## result 
                                                                                                             ## page 
                                                                                                             ## size.
  section = newJObject()
  var valid_402658749 = query.getOrDefault("serviceType")
  valid_402658749 = validateParameter(valid_402658749, JString,
                                      required = false,
                                      default = newJString("DATA"))
  if valid_402658749 != nil:
    section.add "serviceType", valid_402658749
  var valid_402658750 = query.getOrDefault("marker")
  valid_402658750 = validateParameter(valid_402658750, JString,
                                      required = false, default = nil)
  if valid_402658750 != nil:
    section.add "marker", valid_402658750
  var valid_402658751 = query.getOrDefault("pageSize")
  valid_402658751 = validateParameter(valid_402658751, JInt, required = false,
                                      default = nil)
  if valid_402658751 != nil:
    section.add "pageSize", valid_402658751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658752 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658752 = validateParameter(valid_402658752, JString,
                                      required = false, default = nil)
  if valid_402658752 != nil:
    section.add "X-Amz-Security-Token", valid_402658752
  var valid_402658753 = header.getOrDefault("X-Amz-Signature")
  valid_402658753 = validateParameter(valid_402658753, JString,
                                      required = false, default = nil)
  if valid_402658753 != nil:
    section.add "X-Amz-Signature", valid_402658753
  var valid_402658754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658754 = validateParameter(valid_402658754, JString,
                                      required = false, default = nil)
  if valid_402658754 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658754
  var valid_402658755 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658755 = validateParameter(valid_402658755, JString,
                                      required = false, default = nil)
  if valid_402658755 != nil:
    section.add "X-Amz-Algorithm", valid_402658755
  var valid_402658756 = header.getOrDefault("X-Amz-Date")
  valid_402658756 = validateParameter(valid_402658756, JString,
                                      required = false, default = nil)
  if valid_402658756 != nil:
    section.add "X-Amz-Date", valid_402658756
  var valid_402658757 = header.getOrDefault("X-Amz-Credential")
  valid_402658757 = validateParameter(valid_402658757, JString,
                                      required = false, default = nil)
  if valid_402658757 != nil:
    section.add "X-Amz-Credential", valid_402658757
  var valid_402658758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658758 = validateParameter(valid_402658758, JString,
                                      required = false, default = nil)
  if valid_402658758 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658759: Call_ListDomainConfigurations_402658746;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
                                                                                         ## 
  let valid = call_402658759.validator(path, query, header, formData, body, _)
  let scheme = call_402658759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658759.makeUrl(scheme.get, call_402658759.host, call_402658759.base,
                                   call_402658759.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658759, uri, valid, _)

proc call*(call_402658760: Call_ListDomainConfigurations_402658746;
           serviceType: string = "DATA"; marker: string = ""; pageSize: int = 0): Recallable =
  ## listDomainConfigurations
  ## <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
  ##   
                                                                                                                                                                                                                                     ## serviceType: string
                                                                                                                                                                                                                                     ##              
                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                                     ## type 
                                                                                                                                                                                                                                     ## of 
                                                                                                                                                                                                                                     ## service 
                                                                                                                                                                                                                                     ## delivered 
                                                                                                                                                                                                                                     ## by 
                                                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                                                     ## endpoint.
  ##   
                                                                                                                                                                                                                                                 ## marker: string
                                                                                                                                                                                                                                                 ##         
                                                                                                                                                                                                                                                 ## : 
                                                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                                                 ## marker 
                                                                                                                                                                                                                                                 ## for 
                                                                                                                                                                                                                                                 ## the 
                                                                                                                                                                                                                                                 ## next 
                                                                                                                                                                                                                                                 ## set 
                                                                                                                                                                                                                                                 ## of 
                                                                                                                                                                                                                                                 ## results.
  ##   
                                                                                                                                                                                                                                                            ## pageSize: int
                                                                                                                                                                                                                                                            ##           
                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                            ## result 
                                                                                                                                                                                                                                                            ## page 
                                                                                                                                                                                                                                                            ## size.
  var query_402658761 = newJObject()
  add(query_402658761, "serviceType", newJString(serviceType))
  add(query_402658761, "marker", newJString(marker))
  add(query_402658761, "pageSize", newJInt(pageSize))
  result = call_402658760.call(nil, query_402658761, nil, nil, nil)

var listDomainConfigurations* = Call_ListDomainConfigurations_402658746(
    name: "listDomainConfigurations", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/domainConfigurations",
    validator: validate_ListDomainConfigurations_402658747, base: "/",
    makeUrl: url_ListDomainConfigurations_402658748,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListIndices_402658762 = ref object of OpenApiRestCall_402656044
proc url_ListIndices_402658764(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListIndices_402658763(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the search indices.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## used 
                                                                                                       ## to 
                                                                                                       ## get 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results, 
                                                                                                       ## or 
                                                                                                       ## <code>null</code> 
                                                                                                       ## if 
                                                                                                       ## there 
                                                                                                       ## are 
                                                                                                       ## no 
                                                                                                       ## additional 
                                                                                                       ## results.
  section = newJObject()
  var valid_402658765 = query.getOrDefault("maxResults")
  valid_402658765 = validateParameter(valid_402658765, JInt, required = false,
                                      default = nil)
  if valid_402658765 != nil:
    section.add "maxResults", valid_402658765
  var valid_402658766 = query.getOrDefault("nextToken")
  valid_402658766 = validateParameter(valid_402658766, JString,
                                      required = false, default = nil)
  if valid_402658766 != nil:
    section.add "nextToken", valid_402658766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658767 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658767 = validateParameter(valid_402658767, JString,
                                      required = false, default = nil)
  if valid_402658767 != nil:
    section.add "X-Amz-Security-Token", valid_402658767
  var valid_402658768 = header.getOrDefault("X-Amz-Signature")
  valid_402658768 = validateParameter(valid_402658768, JString,
                                      required = false, default = nil)
  if valid_402658768 != nil:
    section.add "X-Amz-Signature", valid_402658768
  var valid_402658769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658769 = validateParameter(valid_402658769, JString,
                                      required = false, default = nil)
  if valid_402658769 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658769
  var valid_402658770 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658770 = validateParameter(valid_402658770, JString,
                                      required = false, default = nil)
  if valid_402658770 != nil:
    section.add "X-Amz-Algorithm", valid_402658770
  var valid_402658771 = header.getOrDefault("X-Amz-Date")
  valid_402658771 = validateParameter(valid_402658771, JString,
                                      required = false, default = nil)
  if valid_402658771 != nil:
    section.add "X-Amz-Date", valid_402658771
  var valid_402658772 = header.getOrDefault("X-Amz-Credential")
  valid_402658772 = validateParameter(valid_402658772, JString,
                                      required = false, default = nil)
  if valid_402658772 != nil:
    section.add "X-Amz-Credential", valid_402658772
  var valid_402658773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658773 = validateParameter(valid_402658773, JString,
                                      required = false, default = nil)
  if valid_402658773 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658773
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658774: Call_ListIndices_402658762; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the search indices.
                                                                                         ## 
  let valid = call_402658774.validator(path, query, header, formData, body, _)
  let scheme = call_402658774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658774.makeUrl(scheme.get, call_402658774.host, call_402658774.base,
                                   call_402658774.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658774, uri, valid, _)

proc call*(call_402658775: Call_ListIndices_402658762; maxResults: int = 0;
           nextToken: string = ""): Recallable =
  ## listIndices
  ## Lists the search indices.
  ##   maxResults: int
                              ##             : The maximum number of results to return at one time.
  ##   
                                                                                                   ## nextToken: string
                                                                                                   ##            
                                                                                                   ## : 
                                                                                                   ## The 
                                                                                                   ## token 
                                                                                                   ## used 
                                                                                                   ## to 
                                                                                                   ## get 
                                                                                                   ## the 
                                                                                                   ## next 
                                                                                                   ## set 
                                                                                                   ## of 
                                                                                                   ## results, 
                                                                                                   ## or 
                                                                                                   ## <code>null</code> 
                                                                                                   ## if 
                                                                                                   ## there 
                                                                                                   ## are 
                                                                                                   ## no 
                                                                                                   ## additional 
                                                                                                   ## results.
  var query_402658776 = newJObject()
  add(query_402658776, "maxResults", newJInt(maxResults))
  add(query_402658776, "nextToken", newJString(nextToken))
  result = call_402658775.call(nil, query_402658776, nil, nil, nil)

var listIndices* = Call_ListIndices_402658762(name: "listIndices",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/indices",
    validator: validate_ListIndices_402658763, base: "/",
    makeUrl: url_ListIndices_402658764, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListJobExecutionsForJob_402658777 = ref object of OpenApiRestCall_402656044
proc url_ListJobExecutionsForJob_402658779(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "jobId" in path, "`jobId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/jobs/"),
                 (kind: VariableSegment, value: "jobId"),
                 (kind: ConstantSegment, value: "/things")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListJobExecutionsForJob_402658778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the job executions for a job.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   jobId: JString (required)
                                 ##        : The unique identifier you assigned to this job when it was created.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `jobId` field"
  var valid_402658780 = path.getOrDefault("jobId")
  valid_402658780 = validateParameter(valid_402658780, JString, required = true,
                                      default = nil)
  if valid_402658780 != nil:
    section.add "jobId", valid_402658780
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to be returned per request.
  ##   
                                                                                                            ## status: JString
                                                                                                            ##         
                                                                                                            ## : 
                                                                                                            ## The 
                                                                                                            ## status 
                                                                                                            ## of 
                                                                                                            ## the 
                                                                                                            ## job.
  ##   
                                                                                                                   ## nextToken: JString
                                                                                                                   ##            
                                                                                                                   ## : 
                                                                                                                   ## The 
                                                                                                                   ## token 
                                                                                                                   ## to 
                                                                                                                   ## retrieve 
                                                                                                                   ## the 
                                                                                                                   ## next 
                                                                                                                   ## set 
                                                                                                                   ## of 
                                                                                                                   ## results.
  section = newJObject()
  var valid_402658781 = query.getOrDefault("maxResults")
  valid_402658781 = validateParameter(valid_402658781, JInt, required = false,
                                      default = nil)
  if valid_402658781 != nil:
    section.add "maxResults", valid_402658781
  var valid_402658782 = query.getOrDefault("status")
  valid_402658782 = validateParameter(valid_402658782, JString,
                                      required = false,
                                      default = newJString("QUEUED"))
  if valid_402658782 != nil:
    section.add "status", valid_402658782
  var valid_402658783 = query.getOrDefault("nextToken")
  valid_402658783 = validateParameter(valid_402658783, JString,
                                      required = false, default = nil)
  if valid_402658783 != nil:
    section.add "nextToken", valid_402658783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658784 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658784 = validateParameter(valid_402658784, JString,
                                      required = false, default = nil)
  if valid_402658784 != nil:
    section.add "X-Amz-Security-Token", valid_402658784
  var valid_402658785 = header.getOrDefault("X-Amz-Signature")
  valid_402658785 = validateParameter(valid_402658785, JString,
                                      required = false, default = nil)
  if valid_402658785 != nil:
    section.add "X-Amz-Signature", valid_402658785
  var valid_402658786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658786 = validateParameter(valid_402658786, JString,
                                      required = false, default = nil)
  if valid_402658786 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658786
  var valid_402658787 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658787 = validateParameter(valid_402658787, JString,
                                      required = false, default = nil)
  if valid_402658787 != nil:
    section.add "X-Amz-Algorithm", valid_402658787
  var valid_402658788 = header.getOrDefault("X-Amz-Date")
  valid_402658788 = validateParameter(valid_402658788, JString,
                                      required = false, default = nil)
  if valid_402658788 != nil:
    section.add "X-Amz-Date", valid_402658788
  var valid_402658789 = header.getOrDefault("X-Amz-Credential")
  valid_402658789 = validateParameter(valid_402658789, JString,
                                      required = false, default = nil)
  if valid_402658789 != nil:
    section.add "X-Amz-Credential", valid_402658789
  var valid_402658790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658790 = validateParameter(valid_402658790, JString,
                                      required = false, default = nil)
  if valid_402658790 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658790
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658791: Call_ListJobExecutionsForJob_402658777;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the job executions for a job.
                                                                                         ## 
  let valid = call_402658791.validator(path, query, header, formData, body, _)
  let scheme = call_402658791.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658791.makeUrl(scheme.get, call_402658791.host, call_402658791.base,
                                   call_402658791.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658791, uri, valid, _)

proc call*(call_402658792: Call_ListJobExecutionsForJob_402658777;
           jobId: string; maxResults: int = 0; status: string = "QUEUED";
           nextToken: string = ""): Recallable =
  ## listJobExecutionsForJob
  ## Lists the job executions for a job.
  ##   jobId: string (required)
                                        ##        : The unique identifier you assigned to this job when it was created.
  ##   
                                                                                                                       ## maxResults: int
                                                                                                                       ##             
                                                                                                                       ## : 
                                                                                                                       ## The 
                                                                                                                       ## maximum 
                                                                                                                       ## number 
                                                                                                                       ## of 
                                                                                                                       ## results 
                                                                                                                       ## to 
                                                                                                                       ## be 
                                                                                                                       ## returned 
                                                                                                                       ## per 
                                                                                                                       ## request.
  ##   
                                                                                                                                  ## status: string
                                                                                                                                  ##         
                                                                                                                                  ## : 
                                                                                                                                  ## The 
                                                                                                                                  ## status 
                                                                                                                                  ## of 
                                                                                                                                  ## the 
                                                                                                                                  ## job.
  ##   
                                                                                                                                         ## nextToken: string
                                                                                                                                         ##            
                                                                                                                                         ## : 
                                                                                                                                         ## The 
                                                                                                                                         ## token 
                                                                                                                                         ## to 
                                                                                                                                         ## retrieve 
                                                                                                                                         ## the 
                                                                                                                                         ## next 
                                                                                                                                         ## set 
                                                                                                                                         ## of 
                                                                                                                                         ## results.
  var path_402658793 = newJObject()
  var query_402658794 = newJObject()
  add(path_402658793, "jobId", newJString(jobId))
  add(query_402658794, "maxResults", newJInt(maxResults))
  add(query_402658794, "status", newJString(status))
  add(query_402658794, "nextToken", newJString(nextToken))
  result = call_402658792.call(path_402658793, query_402658794, nil, nil, nil)

var listJobExecutionsForJob* = Call_ListJobExecutionsForJob_402658777(
    name: "listJobExecutionsForJob", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/jobs/{jobId}/things",
    validator: validate_ListJobExecutionsForJob_402658778, base: "/",
    makeUrl: url_ListJobExecutionsForJob_402658779,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListJobExecutionsForThing_402658795 = ref object of OpenApiRestCall_402656044
proc url_ListJobExecutionsForThing_402658797(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/jobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListJobExecutionsForThing_402658796(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the job executions for the specified thing.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The thing name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402658798 = path.getOrDefault("thingName")
  valid_402658798 = validateParameter(valid_402658798, JString, required = true,
                                      default = nil)
  if valid_402658798 != nil:
    section.add "thingName", valid_402658798
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to be returned per request.
  ##   
                                                                                                            ## status: JString
                                                                                                            ##         
                                                                                                            ## : 
                                                                                                            ## An 
                                                                                                            ## optional 
                                                                                                            ## filter 
                                                                                                            ## that 
                                                                                                            ## lets 
                                                                                                            ## you 
                                                                                                            ## search 
                                                                                                            ## for 
                                                                                                            ## jobs 
                                                                                                            ## that 
                                                                                                            ## have 
                                                                                                            ## the 
                                                                                                            ## specified 
                                                                                                            ## status.
  ##   
                                                                                                                      ## nextToken: JString
                                                                                                                      ##            
                                                                                                                      ## : 
                                                                                                                      ## The 
                                                                                                                      ## token 
                                                                                                                      ## to 
                                                                                                                      ## retrieve 
                                                                                                                      ## the 
                                                                                                                      ## next 
                                                                                                                      ## set 
                                                                                                                      ## of 
                                                                                                                      ## results.
  section = newJObject()
  var valid_402658799 = query.getOrDefault("maxResults")
  valid_402658799 = validateParameter(valid_402658799, JInt, required = false,
                                      default = nil)
  if valid_402658799 != nil:
    section.add "maxResults", valid_402658799
  var valid_402658800 = query.getOrDefault("status")
  valid_402658800 = validateParameter(valid_402658800, JString,
                                      required = false,
                                      default = newJString("QUEUED"))
  if valid_402658800 != nil:
    section.add "status", valid_402658800
  var valid_402658801 = query.getOrDefault("nextToken")
  valid_402658801 = validateParameter(valid_402658801, JString,
                                      required = false, default = nil)
  if valid_402658801 != nil:
    section.add "nextToken", valid_402658801
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658802 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658802 = validateParameter(valid_402658802, JString,
                                      required = false, default = nil)
  if valid_402658802 != nil:
    section.add "X-Amz-Security-Token", valid_402658802
  var valid_402658803 = header.getOrDefault("X-Amz-Signature")
  valid_402658803 = validateParameter(valid_402658803, JString,
                                      required = false, default = nil)
  if valid_402658803 != nil:
    section.add "X-Amz-Signature", valid_402658803
  var valid_402658804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658804 = validateParameter(valid_402658804, JString,
                                      required = false, default = nil)
  if valid_402658804 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658804
  var valid_402658805 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658805 = validateParameter(valid_402658805, JString,
                                      required = false, default = nil)
  if valid_402658805 != nil:
    section.add "X-Amz-Algorithm", valid_402658805
  var valid_402658806 = header.getOrDefault("X-Amz-Date")
  valid_402658806 = validateParameter(valid_402658806, JString,
                                      required = false, default = nil)
  if valid_402658806 != nil:
    section.add "X-Amz-Date", valid_402658806
  var valid_402658807 = header.getOrDefault("X-Amz-Credential")
  valid_402658807 = validateParameter(valid_402658807, JString,
                                      required = false, default = nil)
  if valid_402658807 != nil:
    section.add "X-Amz-Credential", valid_402658807
  var valid_402658808 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658808 = validateParameter(valid_402658808, JString,
                                      required = false, default = nil)
  if valid_402658808 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658808
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658809: Call_ListJobExecutionsForThing_402658795;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the job executions for the specified thing.
                                                                                         ## 
  let valid = call_402658809.validator(path, query, header, formData, body, _)
  let scheme = call_402658809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658809.makeUrl(scheme.get, call_402658809.host, call_402658809.base,
                                   call_402658809.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658809, uri, valid, _)

proc call*(call_402658810: Call_ListJobExecutionsForThing_402658795;
           thingName: string; maxResults: int = 0; status: string = "QUEUED";
           nextToken: string = ""): Recallable =
  ## listJobExecutionsForThing
  ## Lists the job executions for the specified thing.
  ##   maxResults: int
                                                      ##             : The maximum number of results to be returned per request.
  ##   
                                                                                                                                ## status: string
                                                                                                                                ##         
                                                                                                                                ## : 
                                                                                                                                ## An 
                                                                                                                                ## optional 
                                                                                                                                ## filter 
                                                                                                                                ## that 
                                                                                                                                ## lets 
                                                                                                                                ## you 
                                                                                                                                ## search 
                                                                                                                                ## for 
                                                                                                                                ## jobs 
                                                                                                                                ## that 
                                                                                                                                ## have 
                                                                                                                                ## the 
                                                                                                                                ## specified 
                                                                                                                                ## status.
  ##   
                                                                                                                                          ## nextToken: string
                                                                                                                                          ##            
                                                                                                                                          ## : 
                                                                                                                                          ## The 
                                                                                                                                          ## token 
                                                                                                                                          ## to 
                                                                                                                                          ## retrieve 
                                                                                                                                          ## the 
                                                                                                                                          ## next 
                                                                                                                                          ## set 
                                                                                                                                          ## of 
                                                                                                                                          ## results.
  ##   
                                                                                                                                                     ## thingName: string (required)
                                                                                                                                                     ##            
                                                                                                                                                     ## : 
                                                                                                                                                     ## The 
                                                                                                                                                     ## thing 
                                                                                                                                                     ## name.
  var path_402658811 = newJObject()
  var query_402658812 = newJObject()
  add(query_402658812, "maxResults", newJInt(maxResults))
  add(query_402658812, "status", newJString(status))
  add(query_402658812, "nextToken", newJString(nextToken))
  add(path_402658811, "thingName", newJString(thingName))
  result = call_402658810.call(path_402658811, query_402658812, nil, nil, nil)

var listJobExecutionsForThing* = Call_ListJobExecutionsForThing_402658795(
    name: "listJobExecutionsForThing", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/jobs",
    validator: validate_ListJobExecutionsForThing_402658796, base: "/",
    makeUrl: url_ListJobExecutionsForThing_402658797,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListJobs_402658813 = ref object of OpenApiRestCall_402656044
proc url_ListJobs_402658815(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListJobs_402658814(path: JsonNode; query: JsonNode;
                                 header: JsonNode; formData: JsonNode;
                                 body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists jobs.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return per request.
  ##   
                                                                                                       ## thingGroupName: JString
                                                                                                       ##                 
                                                                                                       ## : 
                                                                                                       ## A 
                                                                                                       ## filter 
                                                                                                       ## that 
                                                                                                       ## limits 
                                                                                                       ## the 
                                                                                                       ## returned 
                                                                                                       ## jobs 
                                                                                                       ## to 
                                                                                                       ## those 
                                                                                                       ## for 
                                                                                                       ## the 
                                                                                                       ## specified 
                                                                                                       ## group.
  ##   
                                                                                                                ## status: JString
                                                                                                                ##         
                                                                                                                ## : 
                                                                                                                ## An 
                                                                                                                ## optional 
                                                                                                                ## filter 
                                                                                                                ## that 
                                                                                                                ## lets 
                                                                                                                ## you 
                                                                                                                ## search 
                                                                                                                ## for 
                                                                                                                ## jobs 
                                                                                                                ## that 
                                                                                                                ## have 
                                                                                                                ## the 
                                                                                                                ## specified 
                                                                                                                ## status.
  ##   
                                                                                                                          ## nextToken: JString
                                                                                                                          ##            
                                                                                                                          ## : 
                                                                                                                          ## The 
                                                                                                                          ## token 
                                                                                                                          ## to 
                                                                                                                          ## retrieve 
                                                                                                                          ## the 
                                                                                                                          ## next 
                                                                                                                          ## set 
                                                                                                                          ## of 
                                                                                                                          ## results.
  ##   
                                                                                                                                     ## thingGroupId: JString
                                                                                                                                     ##               
                                                                                                                                     ## : 
                                                                                                                                     ## A 
                                                                                                                                     ## filter 
                                                                                                                                     ## that 
                                                                                                                                     ## limits 
                                                                                                                                     ## the 
                                                                                                                                     ## returned 
                                                                                                                                     ## jobs 
                                                                                                                                     ## to 
                                                                                                                                     ## those 
                                                                                                                                     ## for 
                                                                                                                                     ## the 
                                                                                                                                     ## specified 
                                                                                                                                     ## group.
  ##   
                                                                                                                                              ## targetSelection: JString
                                                                                                                                              ##                  
                                                                                                                                              ## : 
                                                                                                                                              ## Specifies 
                                                                                                                                              ## whether 
                                                                                                                                              ## the 
                                                                                                                                              ## job 
                                                                                                                                              ## will 
                                                                                                                                              ## continue 
                                                                                                                                              ## to 
                                                                                                                                              ## run 
                                                                                                                                              ## (CONTINUOUS), 
                                                                                                                                              ## or 
                                                                                                                                              ## will 
                                                                                                                                              ## be 
                                                                                                                                              ## complete 
                                                                                                                                              ## after 
                                                                                                                                              ## all 
                                                                                                                                              ## those 
                                                                                                                                              ## things 
                                                                                                                                              ## specified 
                                                                                                                                              ## as 
                                                                                                                                              ## targets 
                                                                                                                                              ## have 
                                                                                                                                              ## completed 
                                                                                                                                              ## the 
                                                                                                                                              ## job 
                                                                                                                                              ## (SNAPSHOT). 
                                                                                                                                              ## If 
                                                                                                                                              ## continuous, 
                                                                                                                                              ## the 
                                                                                                                                              ## job 
                                                                                                                                              ## may 
                                                                                                                                              ## also 
                                                                                                                                              ## be 
                                                                                                                                              ## run 
                                                                                                                                              ## on 
                                                                                                                                              ## a 
                                                                                                                                              ## thing 
                                                                                                                                              ## when 
                                                                                                                                              ## a 
                                                                                                                                              ## change 
                                                                                                                                              ## is 
                                                                                                                                              ## detected 
                                                                                                                                              ## in 
                                                                                                                                              ## a 
                                                                                                                                              ## target. 
                                                                                                                                              ## For 
                                                                                                                                              ## example, 
                                                                                                                                              ## a 
                                                                                                                                              ## job 
                                                                                                                                              ## will 
                                                                                                                                              ## run 
                                                                                                                                              ## on 
                                                                                                                                              ## a 
                                                                                                                                              ## thing 
                                                                                                                                              ## when 
                                                                                                                                              ## the 
                                                                                                                                              ## thing 
                                                                                                                                              ## is 
                                                                                                                                              ## added 
                                                                                                                                              ## to 
                                                                                                                                              ## a 
                                                                                                                                              ## target 
                                                                                                                                              ## group, 
                                                                                                                                              ## even 
                                                                                                                                              ## after 
                                                                                                                                              ## the 
                                                                                                                                              ## job 
                                                                                                                                              ## was 
                                                                                                                                              ## completed 
                                                                                                                                              ## by 
                                                                                                                                              ## all 
                                                                                                                                              ## things 
                                                                                                                                              ## originally 
                                                                                                                                              ## in 
                                                                                                                                              ## the 
                                                                                                                                              ## group. 
  section = newJObject()
  var valid_402658816 = query.getOrDefault("maxResults")
  valid_402658816 = validateParameter(valid_402658816, JInt, required = false,
                                      default = nil)
  if valid_402658816 != nil:
    section.add "maxResults", valid_402658816
  var valid_402658817 = query.getOrDefault("thingGroupName")
  valid_402658817 = validateParameter(valid_402658817, JString,
                                      required = false, default = nil)
  if valid_402658817 != nil:
    section.add "thingGroupName", valid_402658817
  var valid_402658818 = query.getOrDefault("status")
  valid_402658818 = validateParameter(valid_402658818, JString,
                                      required = false,
                                      default = newJString("IN_PROGRESS"))
  if valid_402658818 != nil:
    section.add "status", valid_402658818
  var valid_402658819 = query.getOrDefault("nextToken")
  valid_402658819 = validateParameter(valid_402658819, JString,
                                      required = false, default = nil)
  if valid_402658819 != nil:
    section.add "nextToken", valid_402658819
  var valid_402658820 = query.getOrDefault("thingGroupId")
  valid_402658820 = validateParameter(valid_402658820, JString,
                                      required = false, default = nil)
  if valid_402658820 != nil:
    section.add "thingGroupId", valid_402658820
  var valid_402658821 = query.getOrDefault("targetSelection")
  valid_402658821 = validateParameter(valid_402658821, JString,
                                      required = false,
                                      default = newJString("CONTINUOUS"))
  if valid_402658821 != nil:
    section.add "targetSelection", valid_402658821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658822 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658822 = validateParameter(valid_402658822, JString,
                                      required = false, default = nil)
  if valid_402658822 != nil:
    section.add "X-Amz-Security-Token", valid_402658822
  var valid_402658823 = header.getOrDefault("X-Amz-Signature")
  valid_402658823 = validateParameter(valid_402658823, JString,
                                      required = false, default = nil)
  if valid_402658823 != nil:
    section.add "X-Amz-Signature", valid_402658823
  var valid_402658824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658824 = validateParameter(valid_402658824, JString,
                                      required = false, default = nil)
  if valid_402658824 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658824
  var valid_402658825 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658825 = validateParameter(valid_402658825, JString,
                                      required = false, default = nil)
  if valid_402658825 != nil:
    section.add "X-Amz-Algorithm", valid_402658825
  var valid_402658826 = header.getOrDefault("X-Amz-Date")
  valid_402658826 = validateParameter(valid_402658826, JString,
                                      required = false, default = nil)
  if valid_402658826 != nil:
    section.add "X-Amz-Date", valid_402658826
  var valid_402658827 = header.getOrDefault("X-Amz-Credential")
  valid_402658827 = validateParameter(valid_402658827, JString,
                                      required = false, default = nil)
  if valid_402658827 != nil:
    section.add "X-Amz-Credential", valid_402658827
  var valid_402658828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658828 = validateParameter(valid_402658828, JString,
                                      required = false, default = nil)
  if valid_402658828 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658828
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658829: Call_ListJobs_402658813; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists jobs.
                                                                                         ## 
  let valid = call_402658829.validator(path, query, header, formData, body, _)
  let scheme = call_402658829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658829.makeUrl(scheme.get, call_402658829.host, call_402658829.base,
                                   call_402658829.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658829, uri, valid, _)

proc call*(call_402658830: Call_ListJobs_402658813; maxResults: int = 0;
           thingGroupName: string = ""; status: string = "IN_PROGRESS";
           nextToken: string = ""; thingGroupId: string = "";
           targetSelection: string = "CONTINUOUS"): Recallable =
  ## listJobs
  ## Lists jobs.
  ##   maxResults: int
                ##             : The maximum number of results to return per request.
  ##   
                                                                                     ## thingGroupName: string
                                                                                     ##                 
                                                                                     ## : 
                                                                                     ## A 
                                                                                     ## filter 
                                                                                     ## that 
                                                                                     ## limits 
                                                                                     ## the 
                                                                                     ## returned 
                                                                                     ## jobs 
                                                                                     ## to 
                                                                                     ## those 
                                                                                     ## for 
                                                                                     ## the 
                                                                                     ## specified 
                                                                                     ## group.
  ##   
                                                                                              ## status: string
                                                                                              ##         
                                                                                              ## : 
                                                                                              ## An 
                                                                                              ## optional 
                                                                                              ## filter 
                                                                                              ## that 
                                                                                              ## lets 
                                                                                              ## you 
                                                                                              ## search 
                                                                                              ## for 
                                                                                              ## jobs 
                                                                                              ## that 
                                                                                              ## have 
                                                                                              ## the 
                                                                                              ## specified 
                                                                                              ## status.
  ##   
                                                                                                        ## nextToken: string
                                                                                                        ##            
                                                                                                        ## : 
                                                                                                        ## The 
                                                                                                        ## token 
                                                                                                        ## to 
                                                                                                        ## retrieve 
                                                                                                        ## the 
                                                                                                        ## next 
                                                                                                        ## set 
                                                                                                        ## of 
                                                                                                        ## results.
  ##   
                                                                                                                   ## thingGroupId: string
                                                                                                                   ##               
                                                                                                                   ## : 
                                                                                                                   ## A 
                                                                                                                   ## filter 
                                                                                                                   ## that 
                                                                                                                   ## limits 
                                                                                                                   ## the 
                                                                                                                   ## returned 
                                                                                                                   ## jobs 
                                                                                                                   ## to 
                                                                                                                   ## those 
                                                                                                                   ## for 
                                                                                                                   ## the 
                                                                                                                   ## specified 
                                                                                                                   ## group.
  ##   
                                                                                                                            ## targetSelection: string
                                                                                                                            ##                  
                                                                                                                            ## : 
                                                                                                                            ## Specifies 
                                                                                                                            ## whether 
                                                                                                                            ## the 
                                                                                                                            ## job 
                                                                                                                            ## will 
                                                                                                                            ## continue 
                                                                                                                            ## to 
                                                                                                                            ## run 
                                                                                                                            ## (CONTINUOUS), 
                                                                                                                            ## or 
                                                                                                                            ## will 
                                                                                                                            ## be 
                                                                                                                            ## complete 
                                                                                                                            ## after 
                                                                                                                            ## all 
                                                                                                                            ## those 
                                                                                                                            ## things 
                                                                                                                            ## specified 
                                                                                                                            ## as 
                                                                                                                            ## targets 
                                                                                                                            ## have 
                                                                                                                            ## completed 
                                                                                                                            ## the 
                                                                                                                            ## job 
                                                                                                                            ## (SNAPSHOT). 
                                                                                                                            ## If 
                                                                                                                            ## continuous, 
                                                                                                                            ## the 
                                                                                                                            ## job 
                                                                                                                            ## may 
                                                                                                                            ## also 
                                                                                                                            ## be 
                                                                                                                            ## run 
                                                                                                                            ## on 
                                                                                                                            ## a 
                                                                                                                            ## thing 
                                                                                                                            ## when 
                                                                                                                            ## a 
                                                                                                                            ## change 
                                                                                                                            ## is 
                                                                                                                            ## detected 
                                                                                                                            ## in 
                                                                                                                            ## a 
                                                                                                                            ## target. 
                                                                                                                            ## For 
                                                                                                                            ## example, 
                                                                                                                            ## a 
                                                                                                                            ## job 
                                                                                                                            ## will 
                                                                                                                            ## run 
                                                                                                                            ## on 
                                                                                                                            ## a 
                                                                                                                            ## thing 
                                                                                                                            ## when 
                                                                                                                            ## the 
                                                                                                                            ## thing 
                                                                                                                            ## is 
                                                                                                                            ## added 
                                                                                                                            ## to 
                                                                                                                            ## a 
                                                                                                                            ## target 
                                                                                                                            ## group, 
                                                                                                                            ## even 
                                                                                                                            ## after 
                                                                                                                            ## the 
                                                                                                                            ## job 
                                                                                                                            ## was 
                                                                                                                            ## completed 
                                                                                                                            ## by 
                                                                                                                            ## all 
                                                                                                                            ## things 
                                                                                                                            ## originally 
                                                                                                                            ## in 
                                                                                                                            ## the 
                                                                                                                            ## group. 
  var query_402658831 = newJObject()
  add(query_402658831, "maxResults", newJInt(maxResults))
  add(query_402658831, "thingGroupName", newJString(thingGroupName))
  add(query_402658831, "status", newJString(status))
  add(query_402658831, "nextToken", newJString(nextToken))
  add(query_402658831, "thingGroupId", newJString(thingGroupId))
  add(query_402658831, "targetSelection", newJString(targetSelection))
  result = call_402658830.call(nil, query_402658831, nil, nil, nil)

var listJobs* = Call_ListJobs_402658813(name: "listJobs",
                                        meth: HttpMethod.HttpGet,
                                        host: "iot.amazonaws.com",
                                        route: "/jobs",
                                        validator: validate_ListJobs_402658814,
                                        base: "/", makeUrl: url_ListJobs_402658815,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListMitigationActions_402658832 = ref object of OpenApiRestCall_402656044
proc url_ListMitigationActions_402658834(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListMitigationActions_402658833(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a list of all mitigation actions that match the specified filter criteria.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time. The default is 25.
  ##   
                                                                                                                          ## actionType: JString
                                                                                                                          ##             
                                                                                                                          ## : 
                                                                                                                          ## Specify 
                                                                                                                          ## a 
                                                                                                                          ## value 
                                                                                                                          ## to 
                                                                                                                          ## limit 
                                                                                                                          ## the 
                                                                                                                          ## result 
                                                                                                                          ## to 
                                                                                                                          ## mitigation 
                                                                                                                          ## actions 
                                                                                                                          ## with 
                                                                                                                          ## a 
                                                                                                                          ## specific 
                                                                                                                          ## action 
                                                                                                                          ## type.
  ##   
                                                                                                                                  ## nextToken: JString
                                                                                                                                  ##            
                                                                                                                                  ## : 
                                                                                                                                  ## The 
                                                                                                                                  ## token 
                                                                                                                                  ## for 
                                                                                                                                  ## the 
                                                                                                                                  ## next 
                                                                                                                                  ## set 
                                                                                                                                  ## of 
                                                                                                                                  ## results.
  section = newJObject()
  var valid_402658835 = query.getOrDefault("maxResults")
  valid_402658835 = validateParameter(valid_402658835, JInt, required = false,
                                      default = nil)
  if valid_402658835 != nil:
    section.add "maxResults", valid_402658835
  var valid_402658836 = query.getOrDefault("actionType")
  valid_402658836 = validateParameter(valid_402658836, JString,
                                      required = false, default = newJString(
      "UPDATE_DEVICE_CERTIFICATE"))
  if valid_402658836 != nil:
    section.add "actionType", valid_402658836
  var valid_402658837 = query.getOrDefault("nextToken")
  valid_402658837 = validateParameter(valid_402658837, JString,
                                      required = false, default = nil)
  if valid_402658837 != nil:
    section.add "nextToken", valid_402658837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658838 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658838 = validateParameter(valid_402658838, JString,
                                      required = false, default = nil)
  if valid_402658838 != nil:
    section.add "X-Amz-Security-Token", valid_402658838
  var valid_402658839 = header.getOrDefault("X-Amz-Signature")
  valid_402658839 = validateParameter(valid_402658839, JString,
                                      required = false, default = nil)
  if valid_402658839 != nil:
    section.add "X-Amz-Signature", valid_402658839
  var valid_402658840 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658840 = validateParameter(valid_402658840, JString,
                                      required = false, default = nil)
  if valid_402658840 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658840
  var valid_402658841 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658841 = validateParameter(valid_402658841, JString,
                                      required = false, default = nil)
  if valid_402658841 != nil:
    section.add "X-Amz-Algorithm", valid_402658841
  var valid_402658842 = header.getOrDefault("X-Amz-Date")
  valid_402658842 = validateParameter(valid_402658842, JString,
                                      required = false, default = nil)
  if valid_402658842 != nil:
    section.add "X-Amz-Date", valid_402658842
  var valid_402658843 = header.getOrDefault("X-Amz-Credential")
  valid_402658843 = validateParameter(valid_402658843, JString,
                                      required = false, default = nil)
  if valid_402658843 != nil:
    section.add "X-Amz-Credential", valid_402658843
  var valid_402658844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658844 = validateParameter(valid_402658844, JString,
                                      required = false, default = nil)
  if valid_402658844 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658844
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658845: Call_ListMitigationActions_402658832;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a list of all mitigation actions that match the specified filter criteria.
                                                                                         ## 
  let valid = call_402658845.validator(path, query, header, formData, body, _)
  let scheme = call_402658845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658845.makeUrl(scheme.get, call_402658845.host, call_402658845.base,
                                   call_402658845.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658845, uri, valid, _)

proc call*(call_402658846: Call_ListMitigationActions_402658832;
           maxResults: int = 0;
           actionType: string = "UPDATE_DEVICE_CERTIFICATE";
           nextToken: string = ""): Recallable =
  ## listMitigationActions
  ## Gets a list of all mitigation actions that match the specified filter criteria.
  ##   
                                                                                    ## maxResults: int
                                                                                    ##             
                                                                                    ## : 
                                                                                    ## The 
                                                                                    ## maximum 
                                                                                    ## number 
                                                                                    ## of 
                                                                                    ## results 
                                                                                    ## to 
                                                                                    ## return 
                                                                                    ## at 
                                                                                    ## one 
                                                                                    ## time. 
                                                                                    ## The 
                                                                                    ## default 
                                                                                    ## is 
                                                                                    ## 25.
  ##   
                                                                                          ## actionType: string
                                                                                          ##             
                                                                                          ## : 
                                                                                          ## Specify 
                                                                                          ## a 
                                                                                          ## value 
                                                                                          ## to 
                                                                                          ## limit 
                                                                                          ## the 
                                                                                          ## result 
                                                                                          ## to 
                                                                                          ## mitigation 
                                                                                          ## actions 
                                                                                          ## with 
                                                                                          ## a 
                                                                                          ## specific 
                                                                                          ## action 
                                                                                          ## type.
  ##   
                                                                                                  ## nextToken: string
                                                                                                  ##            
                                                                                                  ## : 
                                                                                                  ## The 
                                                                                                  ## token 
                                                                                                  ## for 
                                                                                                  ## the 
                                                                                                  ## next 
                                                                                                  ## set 
                                                                                                  ## of 
                                                                                                  ## results.
  var query_402658847 = newJObject()
  add(query_402658847, "maxResults", newJInt(maxResults))
  add(query_402658847, "actionType", newJString(actionType))
  add(query_402658847, "nextToken", newJString(nextToken))
  result = call_402658846.call(nil, query_402658847, nil, nil, nil)

var listMitigationActions* = Call_ListMitigationActions_402658832(
    name: "listMitigationActions", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/mitigationactions/actions",
    validator: validate_ListMitigationActions_402658833, base: "/",
    makeUrl: url_ListMitigationActions_402658834,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListOTAUpdates_402658848 = ref object of OpenApiRestCall_402656044
proc url_ListOTAUpdates_402658850(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListOTAUpdates_402658849(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists OTA updates.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## A 
                                                                                                       ## token 
                                                                                                       ## used 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## otaUpdateStatus: JString
                                                                                                                  ##                  
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## OTA 
                                                                                                                  ## update 
                                                                                                                  ## job 
                                                                                                                  ## status.
  section = newJObject()
  var valid_402658851 = query.getOrDefault("maxResults")
  valid_402658851 = validateParameter(valid_402658851, JInt, required = false,
                                      default = nil)
  if valid_402658851 != nil:
    section.add "maxResults", valid_402658851
  var valid_402658852 = query.getOrDefault("nextToken")
  valid_402658852 = validateParameter(valid_402658852, JString,
                                      required = false, default = nil)
  if valid_402658852 != nil:
    section.add "nextToken", valid_402658852
  var valid_402658853 = query.getOrDefault("otaUpdateStatus")
  valid_402658853 = validateParameter(valid_402658853, JString,
                                      required = false,
                                      default = newJString("CREATE_PENDING"))
  if valid_402658853 != nil:
    section.add "otaUpdateStatus", valid_402658853
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658854 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658854 = validateParameter(valid_402658854, JString,
                                      required = false, default = nil)
  if valid_402658854 != nil:
    section.add "X-Amz-Security-Token", valid_402658854
  var valid_402658855 = header.getOrDefault("X-Amz-Signature")
  valid_402658855 = validateParameter(valid_402658855, JString,
                                      required = false, default = nil)
  if valid_402658855 != nil:
    section.add "X-Amz-Signature", valid_402658855
  var valid_402658856 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658856 = validateParameter(valid_402658856, JString,
                                      required = false, default = nil)
  if valid_402658856 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658856
  var valid_402658857 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658857 = validateParameter(valid_402658857, JString,
                                      required = false, default = nil)
  if valid_402658857 != nil:
    section.add "X-Amz-Algorithm", valid_402658857
  var valid_402658858 = header.getOrDefault("X-Amz-Date")
  valid_402658858 = validateParameter(valid_402658858, JString,
                                      required = false, default = nil)
  if valid_402658858 != nil:
    section.add "X-Amz-Date", valid_402658858
  var valid_402658859 = header.getOrDefault("X-Amz-Credential")
  valid_402658859 = validateParameter(valid_402658859, JString,
                                      required = false, default = nil)
  if valid_402658859 != nil:
    section.add "X-Amz-Credential", valid_402658859
  var valid_402658860 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658860 = validateParameter(valid_402658860, JString,
                                      required = false, default = nil)
  if valid_402658860 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658860
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658861: Call_ListOTAUpdates_402658848; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists OTA updates.
                                                                                         ## 
  let valid = call_402658861.validator(path, query, header, formData, body, _)
  let scheme = call_402658861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658861.makeUrl(scheme.get, call_402658861.host, call_402658861.base,
                                   call_402658861.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658861, uri, valid, _)

proc call*(call_402658862: Call_ListOTAUpdates_402658848; maxResults: int = 0;
           nextToken: string = ""; otaUpdateStatus: string = "CREATE_PENDING"): Recallable =
  ## listOTAUpdates
  ## Lists OTA updates.
  ##   maxResults: int
                       ##             : The maximum number of results to return at one time.
  ##   
                                                                                            ## nextToken: string
                                                                                            ##            
                                                                                            ## : 
                                                                                            ## A 
                                                                                            ## token 
                                                                                            ## used 
                                                                                            ## to 
                                                                                            ## retrieve 
                                                                                            ## the 
                                                                                            ## next 
                                                                                            ## set 
                                                                                            ## of 
                                                                                            ## results.
  ##   
                                                                                                       ## otaUpdateStatus: string
                                                                                                       ##                  
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## OTA 
                                                                                                       ## update 
                                                                                                       ## job 
                                                                                                       ## status.
  var query_402658863 = newJObject()
  add(query_402658863, "maxResults", newJInt(maxResults))
  add(query_402658863, "nextToken", newJString(nextToken))
  add(query_402658863, "otaUpdateStatus", newJString(otaUpdateStatus))
  result = call_402658862.call(nil, query_402658863, nil, nil, nil)

var listOTAUpdates* = Call_ListOTAUpdates_402658848(name: "listOTAUpdates",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/otaUpdates",
    validator: validate_ListOTAUpdates_402658849, base: "/",
    makeUrl: url_ListOTAUpdates_402658850, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListOutgoingCertificates_402658864 = ref object of OpenApiRestCall_402656044
proc url_ListOutgoingCertificates_402658866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListOutgoingCertificates_402658865(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists certificates that are being transferred but not yet accepted.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The marker for the next set of results.
  ##   
                                                                                      ## isAscendingOrder: JBool
                                                                                      ##                   
                                                                                      ## : 
                                                                                      ## Specifies 
                                                                                      ## the 
                                                                                      ## order 
                                                                                      ## for 
                                                                                      ## results. 
                                                                                      ## If 
                                                                                      ## True, 
                                                                                      ## the 
                                                                                      ## results 
                                                                                      ## are 
                                                                                      ## returned 
                                                                                      ## in 
                                                                                      ## ascending 
                                                                                      ## order, 
                                                                                      ## based 
                                                                                      ## on 
                                                                                      ## the 
                                                                                      ## creation 
                                                                                      ## date.
  ##   
                                                                                              ## pageSize: JInt
                                                                                              ##           
                                                                                              ## : 
                                                                                              ## The 
                                                                                              ## result 
                                                                                              ## page 
                                                                                              ## size.
  section = newJObject()
  var valid_402658867 = query.getOrDefault("marker")
  valid_402658867 = validateParameter(valid_402658867, JString,
                                      required = false, default = nil)
  if valid_402658867 != nil:
    section.add "marker", valid_402658867
  var valid_402658868 = query.getOrDefault("isAscendingOrder")
  valid_402658868 = validateParameter(valid_402658868, JBool, required = false,
                                      default = nil)
  if valid_402658868 != nil:
    section.add "isAscendingOrder", valid_402658868
  var valid_402658869 = query.getOrDefault("pageSize")
  valid_402658869 = validateParameter(valid_402658869, JInt, required = false,
                                      default = nil)
  if valid_402658869 != nil:
    section.add "pageSize", valid_402658869
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658870 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658870 = validateParameter(valid_402658870, JString,
                                      required = false, default = nil)
  if valid_402658870 != nil:
    section.add "X-Amz-Security-Token", valid_402658870
  var valid_402658871 = header.getOrDefault("X-Amz-Signature")
  valid_402658871 = validateParameter(valid_402658871, JString,
                                      required = false, default = nil)
  if valid_402658871 != nil:
    section.add "X-Amz-Signature", valid_402658871
  var valid_402658872 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658872 = validateParameter(valid_402658872, JString,
                                      required = false, default = nil)
  if valid_402658872 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658872
  var valid_402658873 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658873 = validateParameter(valid_402658873, JString,
                                      required = false, default = nil)
  if valid_402658873 != nil:
    section.add "X-Amz-Algorithm", valid_402658873
  var valid_402658874 = header.getOrDefault("X-Amz-Date")
  valid_402658874 = validateParameter(valid_402658874, JString,
                                      required = false, default = nil)
  if valid_402658874 != nil:
    section.add "X-Amz-Date", valid_402658874
  var valid_402658875 = header.getOrDefault("X-Amz-Credential")
  valid_402658875 = validateParameter(valid_402658875, JString,
                                      required = false, default = nil)
  if valid_402658875 != nil:
    section.add "X-Amz-Credential", valid_402658875
  var valid_402658876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658876 = validateParameter(valid_402658876, JString,
                                      required = false, default = nil)
  if valid_402658876 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658876
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658877: Call_ListOutgoingCertificates_402658864;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists certificates that are being transferred but not yet accepted.
                                                                                         ## 
  let valid = call_402658877.validator(path, query, header, formData, body, _)
  let scheme = call_402658877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658877.makeUrl(scheme.get, call_402658877.host, call_402658877.base,
                                   call_402658877.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658877, uri, valid, _)

proc call*(call_402658878: Call_ListOutgoingCertificates_402658864;
           marker: string = ""; isAscendingOrder: bool = false;
           pageSize: int = 0): Recallable =
  ## listOutgoingCertificates
  ## Lists certificates that are being transferred but not yet accepted.
  ##   marker: string
                                                                        ##         : The marker for the next set of results.
  ##   
                                                                                                                            ## isAscendingOrder: bool
                                                                                                                            ##                   
                                                                                                                            ## : 
                                                                                                                            ## Specifies 
                                                                                                                            ## the 
                                                                                                                            ## order 
                                                                                                                            ## for 
                                                                                                                            ## results. 
                                                                                                                            ## If 
                                                                                                                            ## True, 
                                                                                                                            ## the 
                                                                                                                            ## results 
                                                                                                                            ## are 
                                                                                                                            ## returned 
                                                                                                                            ## in 
                                                                                                                            ## ascending 
                                                                                                                            ## order, 
                                                                                                                            ## based 
                                                                                                                            ## on 
                                                                                                                            ## the 
                                                                                                                            ## creation 
                                                                                                                            ## date.
  ##   
                                                                                                                                    ## pageSize: int
                                                                                                                                    ##           
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## result 
                                                                                                                                    ## page 
                                                                                                                                    ## size.
  var query_402658879 = newJObject()
  add(query_402658879, "marker", newJString(marker))
  add(query_402658879, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658879, "pageSize", newJInt(pageSize))
  result = call_402658878.call(nil, query_402658879, nil, nil, nil)

var listOutgoingCertificates* = Call_ListOutgoingCertificates_402658864(
    name: "listOutgoingCertificates", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/certificates-out-going",
    validator: validate_ListOutgoingCertificates_402658865, base: "/",
    makeUrl: url_ListOutgoingCertificates_402658866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPolicies_402658880 = ref object of OpenApiRestCall_402656044
proc url_ListPolicies_402658882(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPolicies_402658881(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists your policies.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The marker for the next set of results.
  ##   
                                                                                      ## isAscendingOrder: JBool
                                                                                      ##                   
                                                                                      ## : 
                                                                                      ## Specifies 
                                                                                      ## the 
                                                                                      ## order 
                                                                                      ## for 
                                                                                      ## results. 
                                                                                      ## If 
                                                                                      ## true, 
                                                                                      ## the 
                                                                                      ## results 
                                                                                      ## are 
                                                                                      ## returned 
                                                                                      ## in 
                                                                                      ## ascending 
                                                                                      ## creation 
                                                                                      ## order.
  ##   
                                                                                               ## pageSize: JInt
                                                                                               ##           
                                                                                               ## : 
                                                                                               ## The 
                                                                                               ## result 
                                                                                               ## page 
                                                                                               ## size.
  section = newJObject()
  var valid_402658883 = query.getOrDefault("marker")
  valid_402658883 = validateParameter(valid_402658883, JString,
                                      required = false, default = nil)
  if valid_402658883 != nil:
    section.add "marker", valid_402658883
  var valid_402658884 = query.getOrDefault("isAscendingOrder")
  valid_402658884 = validateParameter(valid_402658884, JBool, required = false,
                                      default = nil)
  if valid_402658884 != nil:
    section.add "isAscendingOrder", valid_402658884
  var valid_402658885 = query.getOrDefault("pageSize")
  valid_402658885 = validateParameter(valid_402658885, JInt, required = false,
                                      default = nil)
  if valid_402658885 != nil:
    section.add "pageSize", valid_402658885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658886 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658886 = validateParameter(valid_402658886, JString,
                                      required = false, default = nil)
  if valid_402658886 != nil:
    section.add "X-Amz-Security-Token", valid_402658886
  var valid_402658887 = header.getOrDefault("X-Amz-Signature")
  valid_402658887 = validateParameter(valid_402658887, JString,
                                      required = false, default = nil)
  if valid_402658887 != nil:
    section.add "X-Amz-Signature", valid_402658887
  var valid_402658888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658888 = validateParameter(valid_402658888, JString,
                                      required = false, default = nil)
  if valid_402658888 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658888
  var valid_402658889 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658889 = validateParameter(valid_402658889, JString,
                                      required = false, default = nil)
  if valid_402658889 != nil:
    section.add "X-Amz-Algorithm", valid_402658889
  var valid_402658890 = header.getOrDefault("X-Amz-Date")
  valid_402658890 = validateParameter(valid_402658890, JString,
                                      required = false, default = nil)
  if valid_402658890 != nil:
    section.add "X-Amz-Date", valid_402658890
  var valid_402658891 = header.getOrDefault("X-Amz-Credential")
  valid_402658891 = validateParameter(valid_402658891, JString,
                                      required = false, default = nil)
  if valid_402658891 != nil:
    section.add "X-Amz-Credential", valid_402658891
  var valid_402658892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658892 = validateParameter(valid_402658892, JString,
                                      required = false, default = nil)
  if valid_402658892 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658893: Call_ListPolicies_402658880; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists your policies.
                                                                                         ## 
  let valid = call_402658893.validator(path, query, header, formData, body, _)
  let scheme = call_402658893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658893.makeUrl(scheme.get, call_402658893.host, call_402658893.base,
                                   call_402658893.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658893, uri, valid, _)

proc call*(call_402658894: Call_ListPolicies_402658880; marker: string = "";
           isAscendingOrder: bool = false; pageSize: int = 0): Recallable =
  ## listPolicies
  ## Lists your policies.
  ##   marker: string
                         ##         : The marker for the next set of results.
  ##   
                                                                             ## isAscendingOrder: bool
                                                                             ##                   
                                                                             ## : 
                                                                             ## Specifies 
                                                                             ## the 
                                                                             ## order 
                                                                             ## for 
                                                                             ## results. 
                                                                             ## If 
                                                                             ## true, 
                                                                             ## the 
                                                                             ## results 
                                                                             ## are 
                                                                             ## returned 
                                                                             ## in 
                                                                             ## ascending 
                                                                             ## creation 
                                                                             ## order.
  ##   
                                                                                      ## pageSize: int
                                                                                      ##           
                                                                                      ## : 
                                                                                      ## The 
                                                                                      ## result 
                                                                                      ## page 
                                                                                      ## size.
  var query_402658895 = newJObject()
  add(query_402658895, "marker", newJString(marker))
  add(query_402658895, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658895, "pageSize", newJInt(pageSize))
  result = call_402658894.call(nil, query_402658895, nil, nil, nil)

var listPolicies* = Call_ListPolicies_402658880(name: "listPolicies",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/policies",
    validator: validate_ListPolicies_402658881, base: "/",
    makeUrl: url_ListPolicies_402658882, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPolicyPrincipals_402658896 = ref object of OpenApiRestCall_402656044
proc url_ListPolicyPrincipals_402658898(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPolicyPrincipals_402658897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The marker for the next set of results.
  ##   
                                                                                      ## isAscendingOrder: JBool
                                                                                      ##                   
                                                                                      ## : 
                                                                                      ## Specifies 
                                                                                      ## the 
                                                                                      ## order 
                                                                                      ## for 
                                                                                      ## results. 
                                                                                      ## If 
                                                                                      ## true, 
                                                                                      ## the 
                                                                                      ## results 
                                                                                      ## are 
                                                                                      ## returned 
                                                                                      ## in 
                                                                                      ## ascending 
                                                                                      ## creation 
                                                                                      ## order.
  ##   
                                                                                               ## pageSize: JInt
                                                                                               ##           
                                                                                               ## : 
                                                                                               ## The 
                                                                                               ## result 
                                                                                               ## page 
                                                                                               ## size.
  section = newJObject()
  var valid_402658899 = query.getOrDefault("marker")
  valid_402658899 = validateParameter(valid_402658899, JString,
                                      required = false, default = nil)
  if valid_402658899 != nil:
    section.add "marker", valid_402658899
  var valid_402658900 = query.getOrDefault("isAscendingOrder")
  valid_402658900 = validateParameter(valid_402658900, JBool, required = false,
                                      default = nil)
  if valid_402658900 != nil:
    section.add "isAscendingOrder", valid_402658900
  var valid_402658901 = query.getOrDefault("pageSize")
  valid_402658901 = validateParameter(valid_402658901, JInt, required = false,
                                      default = nil)
  if valid_402658901 != nil:
    section.add "pageSize", valid_402658901
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amzn-iot-policy: JString (required)
                                   ##                    : The policy name.
  section = newJObject()
  var valid_402658902 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658902 = validateParameter(valid_402658902, JString,
                                      required = false, default = nil)
  if valid_402658902 != nil:
    section.add "X-Amz-Security-Token", valid_402658902
  var valid_402658903 = header.getOrDefault("X-Amz-Signature")
  valid_402658903 = validateParameter(valid_402658903, JString,
                                      required = false, default = nil)
  if valid_402658903 != nil:
    section.add "X-Amz-Signature", valid_402658903
  var valid_402658904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658904 = validateParameter(valid_402658904, JString,
                                      required = false, default = nil)
  if valid_402658904 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658904
  var valid_402658905 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658905 = validateParameter(valid_402658905, JString,
                                      required = false, default = nil)
  if valid_402658905 != nil:
    section.add "X-Amz-Algorithm", valid_402658905
  var valid_402658906 = header.getOrDefault("X-Amz-Date")
  valid_402658906 = validateParameter(valid_402658906, JString,
                                      required = false, default = nil)
  if valid_402658906 != nil:
    section.add "X-Amz-Date", valid_402658906
  var valid_402658907 = header.getOrDefault("X-Amz-Credential")
  valid_402658907 = validateParameter(valid_402658907, JString,
                                      required = false, default = nil)
  if valid_402658907 != nil:
    section.add "X-Amz-Credential", valid_402658907
  var valid_402658908 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658908 = validateParameter(valid_402658908, JString,
                                      required = false, default = nil)
  if valid_402658908 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658908
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-policy` field"
  var valid_402658909 = header.getOrDefault("x-amzn-iot-policy")
  valid_402658909 = validateParameter(valid_402658909, JString, required = true,
                                      default = nil)
  if valid_402658909 != nil:
    section.add "x-amzn-iot-policy", valid_402658909
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658910: Call_ListPolicyPrincipals_402658896;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
                                                                                         ## 
  let valid = call_402658910.validator(path, query, header, formData, body, _)
  let scheme = call_402658910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658910.makeUrl(scheme.get, call_402658910.host, call_402658910.base,
                                   call_402658910.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658910, uri, valid, _)

proc call*(call_402658911: Call_ListPolicyPrincipals_402658896;
           marker: string = ""; isAscendingOrder: bool = false;
           pageSize: int = 0): Recallable =
  ## listPolicyPrincipals
  ## <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
  ##   
                                                                                                                                                                   ## marker: string
                                                                                                                                                                   ##         
                                                                                                                                                                   ## : 
                                                                                                                                                                   ## The 
                                                                                                                                                                   ## marker 
                                                                                                                                                                   ## for 
                                                                                                                                                                   ## the 
                                                                                                                                                                   ## next 
                                                                                                                                                                   ## set 
                                                                                                                                                                   ## of 
                                                                                                                                                                   ## results.
  ##   
                                                                                                                                                                              ## isAscendingOrder: bool
                                                                                                                                                                              ##                   
                                                                                                                                                                              ## : 
                                                                                                                                                                              ## Specifies 
                                                                                                                                                                              ## the 
                                                                                                                                                                              ## order 
                                                                                                                                                                              ## for 
                                                                                                                                                                              ## results. 
                                                                                                                                                                              ## If 
                                                                                                                                                                              ## true, 
                                                                                                                                                                              ## the 
                                                                                                                                                                              ## results 
                                                                                                                                                                              ## are 
                                                                                                                                                                              ## returned 
                                                                                                                                                                              ## in 
                                                                                                                                                                              ## ascending 
                                                                                                                                                                              ## creation 
                                                                                                                                                                              ## order.
  ##   
                                                                                                                                                                                       ## pageSize: int
                                                                                                                                                                                       ##           
                                                                                                                                                                                       ## : 
                                                                                                                                                                                       ## The 
                                                                                                                                                                                       ## result 
                                                                                                                                                                                       ## page 
                                                                                                                                                                                       ## size.
  var query_402658912 = newJObject()
  add(query_402658912, "marker", newJString(marker))
  add(query_402658912, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658912, "pageSize", newJInt(pageSize))
  result = call_402658911.call(nil, query_402658912, nil, nil, nil)

var listPolicyPrincipals* = Call_ListPolicyPrincipals_402658896(
    name: "listPolicyPrincipals", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/policy-principals#x-amzn-iot-policy",
    validator: validate_ListPolicyPrincipals_402658897, base: "/",
    makeUrl: url_ListPolicyPrincipals_402658898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPrincipalPolicies_402658913 = ref object of OpenApiRestCall_402656044
proc url_ListPrincipalPolicies_402658915(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPrincipalPolicies_402658914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : The marker for the next set of results.
  ##   
                                                                                      ## isAscendingOrder: JBool
                                                                                      ##                   
                                                                                      ## : 
                                                                                      ## Specifies 
                                                                                      ## the 
                                                                                      ## order 
                                                                                      ## for 
                                                                                      ## results. 
                                                                                      ## If 
                                                                                      ## true, 
                                                                                      ## results 
                                                                                      ## are 
                                                                                      ## returned 
                                                                                      ## in 
                                                                                      ## ascending 
                                                                                      ## creation 
                                                                                      ## order.
  ##   
                                                                                               ## pageSize: JInt
                                                                                               ##           
                                                                                               ## : 
                                                                                               ## The 
                                                                                               ## result 
                                                                                               ## page 
                                                                                               ## size.
  section = newJObject()
  var valid_402658916 = query.getOrDefault("marker")
  valid_402658916 = validateParameter(valid_402658916, JString,
                                      required = false, default = nil)
  if valid_402658916 != nil:
    section.add "marker", valid_402658916
  var valid_402658917 = query.getOrDefault("isAscendingOrder")
  valid_402658917 = validateParameter(valid_402658917, JBool, required = false,
                                      default = nil)
  if valid_402658917 != nil:
    section.add "isAscendingOrder", valid_402658917
  var valid_402658918 = query.getOrDefault("pageSize")
  valid_402658918 = validateParameter(valid_402658918, JInt, required = false,
                                      default = nil)
  if valid_402658918 != nil:
    section.add "pageSize", valid_402658918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   x-amzn-iot-principal: JString (required)
                                    ##                       : The principal.
  ##   
                                                                             ## X-Amz-Signature: JString
  ##   
                                                                                                        ## X-Amz-Content-Sha256: JString
  ##   
                                                                                                                                        ## X-Amz-Algorithm: JString
  ##   
                                                                                                                                                                   ## X-Amz-Date: JString
  ##   
                                                                                                                                                                                         ## X-Amz-Credential: JString
  ##   
                                                                                                                                                                                                                     ## X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658919 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658919 = validateParameter(valid_402658919, JString,
                                      required = false, default = nil)
  if valid_402658919 != nil:
    section.add "X-Amz-Security-Token", valid_402658919
  assert header != nil, "header argument is necessary due to required `x-amzn-iot-principal` field"
  var valid_402658920 = header.getOrDefault("x-amzn-iot-principal")
  valid_402658920 = validateParameter(valid_402658920, JString, required = true,
                                      default = nil)
  if valid_402658920 != nil:
    section.add "x-amzn-iot-principal", valid_402658920
  var valid_402658921 = header.getOrDefault("X-Amz-Signature")
  valid_402658921 = validateParameter(valid_402658921, JString,
                                      required = false, default = nil)
  if valid_402658921 != nil:
    section.add "X-Amz-Signature", valid_402658921
  var valid_402658922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658922 = validateParameter(valid_402658922, JString,
                                      required = false, default = nil)
  if valid_402658922 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658922
  var valid_402658923 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658923 = validateParameter(valid_402658923, JString,
                                      required = false, default = nil)
  if valid_402658923 != nil:
    section.add "X-Amz-Algorithm", valid_402658923
  var valid_402658924 = header.getOrDefault("X-Amz-Date")
  valid_402658924 = validateParameter(valid_402658924, JString,
                                      required = false, default = nil)
  if valid_402658924 != nil:
    section.add "X-Amz-Date", valid_402658924
  var valid_402658925 = header.getOrDefault("X-Amz-Credential")
  valid_402658925 = validateParameter(valid_402658925, JString,
                                      required = false, default = nil)
  if valid_402658925 != nil:
    section.add "X-Amz-Credential", valid_402658925
  var valid_402658926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658926 = validateParameter(valid_402658926, JString,
                                      required = false, default = nil)
  if valid_402658926 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658926
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658927: Call_ListPrincipalPolicies_402658913;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
                                                                                         ## 
  let valid = call_402658927.validator(path, query, header, formData, body, _)
  let scheme = call_402658927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658927.makeUrl(scheme.get, call_402658927.host, call_402658927.base,
                                   call_402658927.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658927, uri, valid, _)

proc call*(call_402658928: Call_ListPrincipalPolicies_402658913;
           marker: string = ""; isAscendingOrder: bool = false;
           pageSize: int = 0): Recallable =
  ## listPrincipalPolicies
  ## <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                              ## marker: string
                                                                                                                                                                                                                                                                                                                                                                                                              ##         
                                                                                                                                                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                                                                                                                                                              ## marker 
                                                                                                                                                                                                                                                                                                                                                                                                              ## for 
                                                                                                                                                                                                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                                                                                                                                                                                                              ## next 
                                                                                                                                                                                                                                                                                                                                                                                                              ## set 
                                                                                                                                                                                                                                                                                                                                                                                                              ## of 
                                                                                                                                                                                                                                                                                                                                                                                                              ## results.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                         ## isAscendingOrder: bool
                                                                                                                                                                                                                                                                                                                                                                                                                         ##                   
                                                                                                                                                                                                                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## Specifies 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## order 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## for 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## results. 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## If 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## true, 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## results 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## are 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## returned 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## in 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## ascending 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## creation 
                                                                                                                                                                                                                                                                                                                                                                                                                         ## order.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                  ## pageSize: int
                                                                                                                                                                                                                                                                                                                                                                                                                                  ##           
                                                                                                                                                                                                                                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                  ## The 
                                                                                                                                                                                                                                                                                                                                                                                                                                  ## result 
                                                                                                                                                                                                                                                                                                                                                                                                                                  ## page 
                                                                                                                                                                                                                                                                                                                                                                                                                                  ## size.
  var query_402658929 = newJObject()
  add(query_402658929, "marker", newJString(marker))
  add(query_402658929, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658929, "pageSize", newJInt(pageSize))
  result = call_402658928.call(nil, query_402658929, nil, nil, nil)

var listPrincipalPolicies* = Call_ListPrincipalPolicies_402658913(
    name: "listPrincipalPolicies", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/principal-policies#x-amzn-iot-principal",
    validator: validate_ListPrincipalPolicies_402658914, base: "/",
    makeUrl: url_ListPrincipalPolicies_402658915,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPrincipalThings_402658930 = ref object of OpenApiRestCall_402656044
proc url_ListPrincipalThings_402658932(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPrincipalThings_402658931(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. 
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return in this operation.
  ##   
                                                                                                             ## nextToken: JString
                                                                                                             ##            
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## token 
                                                                                                             ## to 
                                                                                                             ## retrieve 
                                                                                                             ## the 
                                                                                                             ## next 
                                                                                                             ## set 
                                                                                                             ## of 
                                                                                                             ## results.
  section = newJObject()
  var valid_402658933 = query.getOrDefault("maxResults")
  valid_402658933 = validateParameter(valid_402658933, JInt, required = false,
                                      default = nil)
  if valid_402658933 != nil:
    section.add "maxResults", valid_402658933
  var valid_402658934 = query.getOrDefault("nextToken")
  valid_402658934 = validateParameter(valid_402658934, JString,
                                      required = false, default = nil)
  if valid_402658934 != nil:
    section.add "nextToken", valid_402658934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  ##   x-amzn-principal: JString (required)
                                   ##                   : The principal.
  section = newJObject()
  var valid_402658935 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658935 = validateParameter(valid_402658935, JString,
                                      required = false, default = nil)
  if valid_402658935 != nil:
    section.add "X-Amz-Security-Token", valid_402658935
  var valid_402658936 = header.getOrDefault("X-Amz-Signature")
  valid_402658936 = validateParameter(valid_402658936, JString,
                                      required = false, default = nil)
  if valid_402658936 != nil:
    section.add "X-Amz-Signature", valid_402658936
  var valid_402658937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658937 = validateParameter(valid_402658937, JString,
                                      required = false, default = nil)
  if valid_402658937 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658937
  var valid_402658938 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658938 = validateParameter(valid_402658938, JString,
                                      required = false, default = nil)
  if valid_402658938 != nil:
    section.add "X-Amz-Algorithm", valid_402658938
  var valid_402658939 = header.getOrDefault("X-Amz-Date")
  valid_402658939 = validateParameter(valid_402658939, JString,
                                      required = false, default = nil)
  if valid_402658939 != nil:
    section.add "X-Amz-Date", valid_402658939
  var valid_402658940 = header.getOrDefault("X-Amz-Credential")
  valid_402658940 = validateParameter(valid_402658940, JString,
                                      required = false, default = nil)
  if valid_402658940 != nil:
    section.add "X-Amz-Credential", valid_402658940
  var valid_402658941 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658941 = validateParameter(valid_402658941, JString,
                                      required = false, default = nil)
  if valid_402658941 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658941
  assert header != nil, "header argument is necessary due to required `x-amzn-principal` field"
  var valid_402658942 = header.getOrDefault("x-amzn-principal")
  valid_402658942 = validateParameter(valid_402658942, JString, required = true,
                                      default = nil)
  if valid_402658942 != nil:
    section.add "x-amzn-principal", valid_402658942
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658943: Call_ListPrincipalThings_402658930;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. 
                                                                                         ## 
  let valid = call_402658943.validator(path, query, header, formData, body, _)
  let scheme = call_402658943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658943.makeUrl(scheme.get, call_402658943.host, call_402658943.base,
                                   call_402658943.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658943, uri, valid, _)

proc call*(call_402658944: Call_ListPrincipalThings_402658930;
           maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listPrincipalThings
  ## Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. 
  ##   
                                                                                                                                                                                       ## maxResults: int
                                                                                                                                                                                       ##             
                                                                                                                                                                                       ## : 
                                                                                                                                                                                       ## The 
                                                                                                                                                                                       ## maximum 
                                                                                                                                                                                       ## number 
                                                                                                                                                                                       ## of 
                                                                                                                                                                                       ## results 
                                                                                                                                                                                       ## to 
                                                                                                                                                                                       ## return 
                                                                                                                                                                                       ## in 
                                                                                                                                                                                       ## this 
                                                                                                                                                                                       ## operation.
  ##   
                                                                                                                                                                                                    ## nextToken: string
                                                                                                                                                                                                    ##            
                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                    ## token 
                                                                                                                                                                                                    ## to 
                                                                                                                                                                                                    ## retrieve 
                                                                                                                                                                                                    ## the 
                                                                                                                                                                                                    ## next 
                                                                                                                                                                                                    ## set 
                                                                                                                                                                                                    ## of 
                                                                                                                                                                                                    ## results.
  var query_402658945 = newJObject()
  add(query_402658945, "maxResults", newJInt(maxResults))
  add(query_402658945, "nextToken", newJString(nextToken))
  result = call_402658944.call(nil, query_402658945, nil, nil, nil)

var listPrincipalThings* = Call_ListPrincipalThings_402658930(
    name: "listPrincipalThings", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/principals/things#x-amzn-principal",
    validator: validate_ListPrincipalThings_402658931, base: "/",
    makeUrl: url_ListPrincipalThings_402658932,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListRoleAliases_402658946 = ref object of OpenApiRestCall_402656044
proc url_ListRoleAliases_402658948(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListRoleAliases_402658947(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the role aliases registered in your account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : A marker used to get the next set of results.
  ##   
                                                                                            ## isAscendingOrder: JBool
                                                                                            ##                   
                                                                                            ## : 
                                                                                            ## Return 
                                                                                            ## the 
                                                                                            ## list 
                                                                                            ## of 
                                                                                            ## role 
                                                                                            ## aliases 
                                                                                            ## in 
                                                                                            ## ascending 
                                                                                            ## alphabetical 
                                                                                            ## order.
  ##   
                                                                                                     ## pageSize: JInt
                                                                                                     ##           
                                                                                                     ## : 
                                                                                                     ## The 
                                                                                                     ## maximum 
                                                                                                     ## number 
                                                                                                     ## of 
                                                                                                     ## results 
                                                                                                     ## to 
                                                                                                     ## return 
                                                                                                     ## at 
                                                                                                     ## one 
                                                                                                     ## time.
  section = newJObject()
  var valid_402658949 = query.getOrDefault("marker")
  valid_402658949 = validateParameter(valid_402658949, JString,
                                      required = false, default = nil)
  if valid_402658949 != nil:
    section.add "marker", valid_402658949
  var valid_402658950 = query.getOrDefault("isAscendingOrder")
  valid_402658950 = validateParameter(valid_402658950, JBool, required = false,
                                      default = nil)
  if valid_402658950 != nil:
    section.add "isAscendingOrder", valid_402658950
  var valid_402658951 = query.getOrDefault("pageSize")
  valid_402658951 = validateParameter(valid_402658951, JInt, required = false,
                                      default = nil)
  if valid_402658951 != nil:
    section.add "pageSize", valid_402658951
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658952 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658952 = validateParameter(valid_402658952, JString,
                                      required = false, default = nil)
  if valid_402658952 != nil:
    section.add "X-Amz-Security-Token", valid_402658952
  var valid_402658953 = header.getOrDefault("X-Amz-Signature")
  valid_402658953 = validateParameter(valid_402658953, JString,
                                      required = false, default = nil)
  if valid_402658953 != nil:
    section.add "X-Amz-Signature", valid_402658953
  var valid_402658954 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658954 = validateParameter(valid_402658954, JString,
                                      required = false, default = nil)
  if valid_402658954 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658954
  var valid_402658955 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658955 = validateParameter(valid_402658955, JString,
                                      required = false, default = nil)
  if valid_402658955 != nil:
    section.add "X-Amz-Algorithm", valid_402658955
  var valid_402658956 = header.getOrDefault("X-Amz-Date")
  valid_402658956 = validateParameter(valid_402658956, JString,
                                      required = false, default = nil)
  if valid_402658956 != nil:
    section.add "X-Amz-Date", valid_402658956
  var valid_402658957 = header.getOrDefault("X-Amz-Credential")
  valid_402658957 = validateParameter(valid_402658957, JString,
                                      required = false, default = nil)
  if valid_402658957 != nil:
    section.add "X-Amz-Credential", valid_402658957
  var valid_402658958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658958 = validateParameter(valid_402658958, JString,
                                      required = false, default = nil)
  if valid_402658958 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658958
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658959: Call_ListRoleAliases_402658946; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the role aliases registered in your account.
                                                                                         ## 
  let valid = call_402658959.validator(path, query, header, formData, body, _)
  let scheme = call_402658959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658959.makeUrl(scheme.get, call_402658959.host, call_402658959.base,
                                   call_402658959.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658959, uri, valid, _)

proc call*(call_402658960: Call_ListRoleAliases_402658946; marker: string = "";
           isAscendingOrder: bool = false; pageSize: int = 0): Recallable =
  ## listRoleAliases
  ## Lists the role aliases registered in your account.
  ##   marker: string
                                                       ##         : A marker used to get the next set of results.
  ##   
                                                                                                                 ## isAscendingOrder: bool
                                                                                                                 ##                   
                                                                                                                 ## : 
                                                                                                                 ## Return 
                                                                                                                 ## the 
                                                                                                                 ## list 
                                                                                                                 ## of 
                                                                                                                 ## role 
                                                                                                                 ## aliases 
                                                                                                                 ## in 
                                                                                                                 ## ascending 
                                                                                                                 ## alphabetical 
                                                                                                                 ## order.
  ##   
                                                                                                                          ## pageSize: int
                                                                                                                          ##           
                                                                                                                          ## : 
                                                                                                                          ## The 
                                                                                                                          ## maximum 
                                                                                                                          ## number 
                                                                                                                          ## of 
                                                                                                                          ## results 
                                                                                                                          ## to 
                                                                                                                          ## return 
                                                                                                                          ## at 
                                                                                                                          ## one 
                                                                                                                          ## time.
  var query_402658961 = newJObject()
  add(query_402658961, "marker", newJString(marker))
  add(query_402658961, "isAscendingOrder", newJBool(isAscendingOrder))
  add(query_402658961, "pageSize", newJInt(pageSize))
  result = call_402658960.call(nil, query_402658961, nil, nil, nil)

var listRoleAliases* = Call_ListRoleAliases_402658946(name: "listRoleAliases",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/role-aliases",
    validator: validate_ListRoleAliases_402658947, base: "/",
    makeUrl: url_ListRoleAliases_402658948, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListScheduledAudits_402658962 = ref object of OpenApiRestCall_402656044
proc url_ListScheduledAudits_402658964(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListScheduledAudits_402658963(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists all of your scheduled audits.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time. The default is 25.
  ##   
                                                                                                                          ## nextToken: JString
                                                                                                                          ##            
                                                                                                                          ## : 
                                                                                                                          ## The 
                                                                                                                          ## token 
                                                                                                                          ## for 
                                                                                                                          ## the 
                                                                                                                          ## next 
                                                                                                                          ## set 
                                                                                                                          ## of 
                                                                                                                          ## results.
  section = newJObject()
  var valid_402658965 = query.getOrDefault("maxResults")
  valid_402658965 = validateParameter(valid_402658965, JInt, required = false,
                                      default = nil)
  if valid_402658965 != nil:
    section.add "maxResults", valid_402658965
  var valid_402658966 = query.getOrDefault("nextToken")
  valid_402658966 = validateParameter(valid_402658966, JString,
                                      required = false, default = nil)
  if valid_402658966 != nil:
    section.add "nextToken", valid_402658966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658967 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658967 = validateParameter(valid_402658967, JString,
                                      required = false, default = nil)
  if valid_402658967 != nil:
    section.add "X-Amz-Security-Token", valid_402658967
  var valid_402658968 = header.getOrDefault("X-Amz-Signature")
  valid_402658968 = validateParameter(valid_402658968, JString,
                                      required = false, default = nil)
  if valid_402658968 != nil:
    section.add "X-Amz-Signature", valid_402658968
  var valid_402658969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658969 = validateParameter(valid_402658969, JString,
                                      required = false, default = nil)
  if valid_402658969 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658969
  var valid_402658970 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658970 = validateParameter(valid_402658970, JString,
                                      required = false, default = nil)
  if valid_402658970 != nil:
    section.add "X-Amz-Algorithm", valid_402658970
  var valid_402658971 = header.getOrDefault("X-Amz-Date")
  valid_402658971 = validateParameter(valid_402658971, JString,
                                      required = false, default = nil)
  if valid_402658971 != nil:
    section.add "X-Amz-Date", valid_402658971
  var valid_402658972 = header.getOrDefault("X-Amz-Credential")
  valid_402658972 = validateParameter(valid_402658972, JString,
                                      required = false, default = nil)
  if valid_402658972 != nil:
    section.add "X-Amz-Credential", valid_402658972
  var valid_402658973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658973 = validateParameter(valid_402658973, JString,
                                      required = false, default = nil)
  if valid_402658973 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658974: Call_ListScheduledAudits_402658962;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all of your scheduled audits.
                                                                                         ## 
  let valid = call_402658974.validator(path, query, header, formData, body, _)
  let scheme = call_402658974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658974.makeUrl(scheme.get, call_402658974.host, call_402658974.base,
                                   call_402658974.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658974, uri, valid, _)

proc call*(call_402658975: Call_ListScheduledAudits_402658962;
           maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listScheduledAudits
  ## Lists all of your scheduled audits.
  ##   maxResults: int
                                        ##             : The maximum number of results to return at one time. The default is 25.
  ##   
                                                                                                                                ## nextToken: string
                                                                                                                                ##            
                                                                                                                                ## : 
                                                                                                                                ## The 
                                                                                                                                ## token 
                                                                                                                                ## for 
                                                                                                                                ## the 
                                                                                                                                ## next 
                                                                                                                                ## set 
                                                                                                                                ## of 
                                                                                                                                ## results.
  var query_402658976 = newJObject()
  add(query_402658976, "maxResults", newJInt(maxResults))
  add(query_402658976, "nextToken", newJString(nextToken))
  result = call_402658975.call(nil, query_402658976, nil, nil, nil)

var listScheduledAudits* = Call_ListScheduledAudits_402658962(
    name: "listScheduledAudits", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/audit/scheduledaudits",
    validator: validate_ListScheduledAudits_402658963, base: "/",
    makeUrl: url_ListScheduledAudits_402658964,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListSecurityProfiles_402658977 = ref object of OpenApiRestCall_402656044
proc url_ListSecurityProfiles_402658979(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListSecurityProfiles_402658978(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## for 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  section = newJObject()
  var valid_402658980 = query.getOrDefault("maxResults")
  valid_402658980 = validateParameter(valid_402658980, JInt, required = false,
                                      default = nil)
  if valid_402658980 != nil:
    section.add "maxResults", valid_402658980
  var valid_402658981 = query.getOrDefault("nextToken")
  valid_402658981 = validateParameter(valid_402658981, JString,
                                      required = false, default = nil)
  if valid_402658981 != nil:
    section.add "nextToken", valid_402658981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658982 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658982 = validateParameter(valid_402658982, JString,
                                      required = false, default = nil)
  if valid_402658982 != nil:
    section.add "X-Amz-Security-Token", valid_402658982
  var valid_402658983 = header.getOrDefault("X-Amz-Signature")
  valid_402658983 = validateParameter(valid_402658983, JString,
                                      required = false, default = nil)
  if valid_402658983 != nil:
    section.add "X-Amz-Signature", valid_402658983
  var valid_402658984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658984 = validateParameter(valid_402658984, JString,
                                      required = false, default = nil)
  if valid_402658984 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658984
  var valid_402658985 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658985 = validateParameter(valid_402658985, JString,
                                      required = false, default = nil)
  if valid_402658985 != nil:
    section.add "X-Amz-Algorithm", valid_402658985
  var valid_402658986 = header.getOrDefault("X-Amz-Date")
  valid_402658986 = validateParameter(valid_402658986, JString,
                                      required = false, default = nil)
  if valid_402658986 != nil:
    section.add "X-Amz-Date", valid_402658986
  var valid_402658987 = header.getOrDefault("X-Amz-Credential")
  valid_402658987 = validateParameter(valid_402658987, JString,
                                      required = false, default = nil)
  if valid_402658987 != nil:
    section.add "X-Amz-Credential", valid_402658987
  var valid_402658988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658988 = validateParameter(valid_402658988, JString,
                                      required = false, default = nil)
  if valid_402658988 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658988
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658989: Call_ListSecurityProfiles_402658977;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.
                                                                                         ## 
  let valid = call_402658989.validator(path, query, header, formData, body, _)
  let scheme = call_402658989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658989.makeUrl(scheme.get, call_402658989.host, call_402658989.base,
                                   call_402658989.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658989, uri, valid, _)

proc call*(call_402658990: Call_ListSecurityProfiles_402658977;
           maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listSecurityProfiles
  ## Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.
  ##   
                                                                                                                                                                                                     ## maxResults: int
                                                                                                                                                                                                     ##             
                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                     ## maximum 
                                                                                                                                                                                                     ## number 
                                                                                                                                                                                                     ## of 
                                                                                                                                                                                                     ## results 
                                                                                                                                                                                                     ## to 
                                                                                                                                                                                                     ## return 
                                                                                                                                                                                                     ## at 
                                                                                                                                                                                                     ## one 
                                                                                                                                                                                                     ## time.
  ##   
                                                                                                                                                                                                             ## nextToken: string
                                                                                                                                                                                                             ##            
                                                                                                                                                                                                             ## : 
                                                                                                                                                                                                             ## The 
                                                                                                                                                                                                             ## token 
                                                                                                                                                                                                             ## for 
                                                                                                                                                                                                             ## the 
                                                                                                                                                                                                             ## next 
                                                                                                                                                                                                             ## set 
                                                                                                                                                                                                             ## of 
                                                                                                                                                                                                             ## results.
  var query_402658991 = newJObject()
  add(query_402658991, "maxResults", newJInt(maxResults))
  add(query_402658991, "nextToken", newJString(nextToken))
  result = call_402658990.call(nil, query_402658991, nil, nil, nil)

var listSecurityProfiles* = Call_ListSecurityProfiles_402658977(
    name: "listSecurityProfiles", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/security-profiles",
    validator: validate_ListSecurityProfiles_402658978, base: "/",
    makeUrl: url_ListSecurityProfiles_402658979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListSecurityProfilesForTarget_402658992 = ref object of OpenApiRestCall_402656044
proc url_ListSecurityProfilesForTarget_402658994(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListSecurityProfilesForTarget_402658993(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the Device Defender security profiles attached to a target (thing group).
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## for 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## recursive: JBool
                                                                                                                  ##            
                                                                                                                  ## : 
                                                                                                                  ## If 
                                                                                                                  ## true, 
                                                                                                                  ## return 
                                                                                                                  ## child 
                                                                                                                  ## groups 
                                                                                                                  ## too.
  ##   
                                                                                                                         ## securityProfileTargetArn: JString (required)
                                                                                                                         ##                           
                                                                                                                         ## : 
                                                                                                                         ## The 
                                                                                                                         ## ARN 
                                                                                                                         ## of 
                                                                                                                         ## the 
                                                                                                                         ## target 
                                                                                                                         ## (thing 
                                                                                                                         ## group) 
                                                                                                                         ## whose 
                                                                                                                         ## attached 
                                                                                                                         ## security 
                                                                                                                         ## profiles 
                                                                                                                         ## you 
                                                                                                                         ## want 
                                                                                                                         ## to 
                                                                                                                         ## get.
  section = newJObject()
  var valid_402658995 = query.getOrDefault("maxResults")
  valid_402658995 = validateParameter(valid_402658995, JInt, required = false,
                                      default = nil)
  if valid_402658995 != nil:
    section.add "maxResults", valid_402658995
  var valid_402658996 = query.getOrDefault("nextToken")
  valid_402658996 = validateParameter(valid_402658996, JString,
                                      required = false, default = nil)
  if valid_402658996 != nil:
    section.add "nextToken", valid_402658996
  var valid_402658997 = query.getOrDefault("recursive")
  valid_402658997 = validateParameter(valid_402658997, JBool, required = false,
                                      default = nil)
  if valid_402658997 != nil:
    section.add "recursive", valid_402658997
  assert query != nil, "query argument is necessary due to required `securityProfileTargetArn` field"
  var valid_402658998 = query.getOrDefault("securityProfileTargetArn")
  valid_402658998 = validateParameter(valid_402658998, JString, required = true,
                                      default = nil)
  if valid_402658998 != nil:
    section.add "securityProfileTargetArn", valid_402658998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658999 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658999 = validateParameter(valid_402658999, JString,
                                      required = false, default = nil)
  if valid_402658999 != nil:
    section.add "X-Amz-Security-Token", valid_402658999
  var valid_402659000 = header.getOrDefault("X-Amz-Signature")
  valid_402659000 = validateParameter(valid_402659000, JString,
                                      required = false, default = nil)
  if valid_402659000 != nil:
    section.add "X-Amz-Signature", valid_402659000
  var valid_402659001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659001 = validateParameter(valid_402659001, JString,
                                      required = false, default = nil)
  if valid_402659001 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659001
  var valid_402659002 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659002 = validateParameter(valid_402659002, JString,
                                      required = false, default = nil)
  if valid_402659002 != nil:
    section.add "X-Amz-Algorithm", valid_402659002
  var valid_402659003 = header.getOrDefault("X-Amz-Date")
  valid_402659003 = validateParameter(valid_402659003, JString,
                                      required = false, default = nil)
  if valid_402659003 != nil:
    section.add "X-Amz-Date", valid_402659003
  var valid_402659004 = header.getOrDefault("X-Amz-Credential")
  valid_402659004 = validateParameter(valid_402659004, JString,
                                      required = false, default = nil)
  if valid_402659004 != nil:
    section.add "X-Amz-Credential", valid_402659004
  var valid_402659005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659005 = validateParameter(valid_402659005, JString,
                                      required = false, default = nil)
  if valid_402659005 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659006: Call_ListSecurityProfilesForTarget_402658992;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender security profiles attached to a target (thing group).
                                                                                         ## 
  let valid = call_402659006.validator(path, query, header, formData, body, _)
  let scheme = call_402659006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659006.makeUrl(scheme.get, call_402659006.host, call_402659006.base,
                                   call_402659006.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659006, uri, valid, _)

proc call*(call_402659007: Call_ListSecurityProfilesForTarget_402658992;
           securityProfileTargetArn: string; maxResults: int = 0;
           nextToken: string = ""; recursive: bool = false): Recallable =
  ## listSecurityProfilesForTarget
  ## Lists the Device Defender security profiles attached to a target (thing group).
  ##   
                                                                                    ## maxResults: int
                                                                                    ##             
                                                                                    ## : 
                                                                                    ## The 
                                                                                    ## maximum 
                                                                                    ## number 
                                                                                    ## of 
                                                                                    ## results 
                                                                                    ## to 
                                                                                    ## return 
                                                                                    ## at 
                                                                                    ## one 
                                                                                    ## time.
  ##   
                                                                                            ## nextToken: string
                                                                                            ##            
                                                                                            ## : 
                                                                                            ## The 
                                                                                            ## token 
                                                                                            ## for 
                                                                                            ## the 
                                                                                            ## next 
                                                                                            ## set 
                                                                                            ## of 
                                                                                            ## results.
  ##   
                                                                                                       ## recursive: bool
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## If 
                                                                                                       ## true, 
                                                                                                       ## return 
                                                                                                       ## child 
                                                                                                       ## groups 
                                                                                                       ## too.
  ##   
                                                                                                              ## securityProfileTargetArn: string (required)
                                                                                                              ##                           
                                                                                                              ## : 
                                                                                                              ## The 
                                                                                                              ## ARN 
                                                                                                              ## of 
                                                                                                              ## the 
                                                                                                              ## target 
                                                                                                              ## (thing 
                                                                                                              ## group) 
                                                                                                              ## whose 
                                                                                                              ## attached 
                                                                                                              ## security 
                                                                                                              ## profiles 
                                                                                                              ## you 
                                                                                                              ## want 
                                                                                                              ## to 
                                                                                                              ## get.
  var query_402659008 = newJObject()
  add(query_402659008, "maxResults", newJInt(maxResults))
  add(query_402659008, "nextToken", newJString(nextToken))
  add(query_402659008, "recursive", newJBool(recursive))
  add(query_402659008, "securityProfileTargetArn",
      newJString(securityProfileTargetArn))
  result = call_402659007.call(nil, query_402659008, nil, nil, nil)

var listSecurityProfilesForTarget* = Call_ListSecurityProfilesForTarget_402658992(
    name: "listSecurityProfilesForTarget", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/security-profiles-for-target#securityProfileTargetArn",
    validator: validate_ListSecurityProfilesForTarget_402658993, base: "/",
    makeUrl: url_ListSecurityProfilesForTarget_402658994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListStreams_402659009 = ref object of OpenApiRestCall_402656044
proc url_ListStreams_402659011(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListStreams_402659010(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists all of the streams in your AWS account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at a time.
  ##   
                                                                                                     ## nextToken: JString
                                                                                                     ##            
                                                                                                     ## : 
                                                                                                     ## A 
                                                                                                     ## token 
                                                                                                     ## used 
                                                                                                     ## to 
                                                                                                     ## get 
                                                                                                     ## the 
                                                                                                     ## next 
                                                                                                     ## set 
                                                                                                     ## of 
                                                                                                     ## results.
  ##   
                                                                                                                ## isAscendingOrder: JBool
                                                                                                                ##                   
                                                                                                                ## : 
                                                                                                                ## Set 
                                                                                                                ## to 
                                                                                                                ## true 
                                                                                                                ## to 
                                                                                                                ## return 
                                                                                                                ## the 
                                                                                                                ## list 
                                                                                                                ## of 
                                                                                                                ## streams 
                                                                                                                ## in 
                                                                                                                ## ascending 
                                                                                                                ## order.
  section = newJObject()
  var valid_402659012 = query.getOrDefault("maxResults")
  valid_402659012 = validateParameter(valid_402659012, JInt, required = false,
                                      default = nil)
  if valid_402659012 != nil:
    section.add "maxResults", valid_402659012
  var valid_402659013 = query.getOrDefault("nextToken")
  valid_402659013 = validateParameter(valid_402659013, JString,
                                      required = false, default = nil)
  if valid_402659013 != nil:
    section.add "nextToken", valid_402659013
  var valid_402659014 = query.getOrDefault("isAscendingOrder")
  valid_402659014 = validateParameter(valid_402659014, JBool, required = false,
                                      default = nil)
  if valid_402659014 != nil:
    section.add "isAscendingOrder", valid_402659014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659015 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659015 = validateParameter(valid_402659015, JString,
                                      required = false, default = nil)
  if valid_402659015 != nil:
    section.add "X-Amz-Security-Token", valid_402659015
  var valid_402659016 = header.getOrDefault("X-Amz-Signature")
  valid_402659016 = validateParameter(valid_402659016, JString,
                                      required = false, default = nil)
  if valid_402659016 != nil:
    section.add "X-Amz-Signature", valid_402659016
  var valid_402659017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659017 = validateParameter(valid_402659017, JString,
                                      required = false, default = nil)
  if valid_402659017 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659017
  var valid_402659018 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659018 = validateParameter(valid_402659018, JString,
                                      required = false, default = nil)
  if valid_402659018 != nil:
    section.add "X-Amz-Algorithm", valid_402659018
  var valid_402659019 = header.getOrDefault("X-Amz-Date")
  valid_402659019 = validateParameter(valid_402659019, JString,
                                      required = false, default = nil)
  if valid_402659019 != nil:
    section.add "X-Amz-Date", valid_402659019
  var valid_402659020 = header.getOrDefault("X-Amz-Credential")
  valid_402659020 = validateParameter(valid_402659020, JString,
                                      required = false, default = nil)
  if valid_402659020 != nil:
    section.add "X-Amz-Credential", valid_402659020
  var valid_402659021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659021 = validateParameter(valid_402659021, JString,
                                      required = false, default = nil)
  if valid_402659021 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659022: Call_ListStreams_402659009; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all of the streams in your AWS account.
                                                                                         ## 
  let valid = call_402659022.validator(path, query, header, formData, body, _)
  let scheme = call_402659022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659022.makeUrl(scheme.get, call_402659022.host, call_402659022.base,
                                   call_402659022.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659022, uri, valid, _)

proc call*(call_402659023: Call_ListStreams_402659009; maxResults: int = 0;
           nextToken: string = ""; isAscendingOrder: bool = false): Recallable =
  ## listStreams
  ## Lists all of the streams in your AWS account.
  ##   maxResults: int
                                                  ##             : The maximum number of results to return at a time.
  ##   
                                                                                                                     ## nextToken: string
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## A 
                                                                                                                     ## token 
                                                                                                                     ## used 
                                                                                                                     ## to 
                                                                                                                     ## get 
                                                                                                                     ## the 
                                                                                                                     ## next 
                                                                                                                     ## set 
                                                                                                                     ## of 
                                                                                                                     ## results.
  ##   
                                                                                                                                ## isAscendingOrder: bool
                                                                                                                                ##                   
                                                                                                                                ## : 
                                                                                                                                ## Set 
                                                                                                                                ## to 
                                                                                                                                ## true 
                                                                                                                                ## to 
                                                                                                                                ## return 
                                                                                                                                ## the 
                                                                                                                                ## list 
                                                                                                                                ## of 
                                                                                                                                ## streams 
                                                                                                                                ## in 
                                                                                                                                ## ascending 
                                                                                                                                ## order.
  var query_402659024 = newJObject()
  add(query_402659024, "maxResults", newJInt(maxResults))
  add(query_402659024, "nextToken", newJString(nextToken))
  add(query_402659024, "isAscendingOrder", newJBool(isAscendingOrder))
  result = call_402659023.call(nil, query_402659024, nil, nil, nil)

var listStreams* = Call_ListStreams_402659009(name: "listStreams",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/streams",
    validator: validate_ListStreams_402659010, base: "/",
    makeUrl: url_ListStreams_402659011, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTagsForResource_402659025 = ref object of OpenApiRestCall_402656044
proc url_ListTagsForResource_402659027(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListTagsForResource_402659026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the tags (metadata) you have assigned to the resource.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   nextToken: JString
                                  ##            : The token to retrieve the next set of results.
  ##   
                                                                                                ## resourceArn: JString (required)
                                                                                                ##              
                                                                                                ## : 
                                                                                                ## The 
                                                                                                ## ARN 
                                                                                                ## of 
                                                                                                ## the 
                                                                                                ## resource.
  section = newJObject()
  var valid_402659028 = query.getOrDefault("nextToken")
  valid_402659028 = validateParameter(valid_402659028, JString,
                                      required = false, default = nil)
  if valid_402659028 != nil:
    section.add "nextToken", valid_402659028
  assert query != nil,
         "query argument is necessary due to required `resourceArn` field"
  var valid_402659029 = query.getOrDefault("resourceArn")
  valid_402659029 = validateParameter(valid_402659029, JString, required = true,
                                      default = nil)
  if valid_402659029 != nil:
    section.add "resourceArn", valid_402659029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659030 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659030 = validateParameter(valid_402659030, JString,
                                      required = false, default = nil)
  if valid_402659030 != nil:
    section.add "X-Amz-Security-Token", valid_402659030
  var valid_402659031 = header.getOrDefault("X-Amz-Signature")
  valid_402659031 = validateParameter(valid_402659031, JString,
                                      required = false, default = nil)
  if valid_402659031 != nil:
    section.add "X-Amz-Signature", valid_402659031
  var valid_402659032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659032 = validateParameter(valid_402659032, JString,
                                      required = false, default = nil)
  if valid_402659032 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659032
  var valid_402659033 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659033 = validateParameter(valid_402659033, JString,
                                      required = false, default = nil)
  if valid_402659033 != nil:
    section.add "X-Amz-Algorithm", valid_402659033
  var valid_402659034 = header.getOrDefault("X-Amz-Date")
  valid_402659034 = validateParameter(valid_402659034, JString,
                                      required = false, default = nil)
  if valid_402659034 != nil:
    section.add "X-Amz-Date", valid_402659034
  var valid_402659035 = header.getOrDefault("X-Amz-Credential")
  valid_402659035 = validateParameter(valid_402659035, JString,
                                      required = false, default = nil)
  if valid_402659035 != nil:
    section.add "X-Amz-Credential", valid_402659035
  var valid_402659036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659036 = validateParameter(valid_402659036, JString,
                                      required = false, default = nil)
  if valid_402659036 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659037: Call_ListTagsForResource_402659025;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the tags (metadata) you have assigned to the resource.
                                                                                         ## 
  let valid = call_402659037.validator(path, query, header, formData, body, _)
  let scheme = call_402659037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659037.makeUrl(scheme.get, call_402659037.host, call_402659037.base,
                                   call_402659037.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659037, uri, valid, _)

proc call*(call_402659038: Call_ListTagsForResource_402659025;
           resourceArn: string; nextToken: string = ""): Recallable =
  ## listTagsForResource
  ## Lists the tags (metadata) you have assigned to the resource.
  ##   nextToken: string
                                                                 ##            : The token to retrieve the next set of results.
  ##   
                                                                                                                               ## resourceArn: string (required)
                                                                                                                               ##              
                                                                                                                               ## : 
                                                                                                                               ## The 
                                                                                                                               ## ARN 
                                                                                                                               ## of 
                                                                                                                               ## the 
                                                                                                                               ## resource.
  var query_402659039 = newJObject()
  add(query_402659039, "nextToken", newJString(nextToken))
  add(query_402659039, "resourceArn", newJString(resourceArn))
  result = call_402659038.call(nil, query_402659039, nil, nil, nil)

var listTagsForResource* = Call_ListTagsForResource_402659025(
    name: "listTagsForResource", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/tags#resourceArn",
    validator: validate_ListTagsForResource_402659026, base: "/",
    makeUrl: url_ListTagsForResource_402659027,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTargetsForPolicy_402659040 = ref object of OpenApiRestCall_402656044
proc url_ListTargetsForPolicy_402659042(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "policyName" in path, "`policyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/policy-targets/"),
                 (kind: VariableSegment, value: "policyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListTargetsForPolicy_402659041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List targets for the specified policy.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   policyName: JString (required)
                                 ##             : The policy name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `policyName` field"
  var valid_402659043 = path.getOrDefault("policyName")
  valid_402659043 = validateParameter(valid_402659043, JString, required = true,
                                      default = nil)
  if valid_402659043 != nil:
    section.add "policyName", valid_402659043
  result.add "path", section
  ## parameters in `query` object:
  ##   marker: JString
                                  ##         : A marker used to get the next set of results.
  ##   
                                                                                            ## pageSize: JInt
                                                                                            ##           
                                                                                            ## : 
                                                                                            ## The 
                                                                                            ## maximum 
                                                                                            ## number 
                                                                                            ## of 
                                                                                            ## results 
                                                                                            ## to 
                                                                                            ## return 
                                                                                            ## at 
                                                                                            ## one 
                                                                                            ## time.
  section = newJObject()
  var valid_402659044 = query.getOrDefault("marker")
  valid_402659044 = validateParameter(valid_402659044, JString,
                                      required = false, default = nil)
  if valid_402659044 != nil:
    section.add "marker", valid_402659044
  var valid_402659045 = query.getOrDefault("pageSize")
  valid_402659045 = validateParameter(valid_402659045, JInt, required = false,
                                      default = nil)
  if valid_402659045 != nil:
    section.add "pageSize", valid_402659045
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659046 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659046 = validateParameter(valid_402659046, JString,
                                      required = false, default = nil)
  if valid_402659046 != nil:
    section.add "X-Amz-Security-Token", valid_402659046
  var valid_402659047 = header.getOrDefault("X-Amz-Signature")
  valid_402659047 = validateParameter(valid_402659047, JString,
                                      required = false, default = nil)
  if valid_402659047 != nil:
    section.add "X-Amz-Signature", valid_402659047
  var valid_402659048 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659048 = validateParameter(valid_402659048, JString,
                                      required = false, default = nil)
  if valid_402659048 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659048
  var valid_402659049 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659049 = validateParameter(valid_402659049, JString,
                                      required = false, default = nil)
  if valid_402659049 != nil:
    section.add "X-Amz-Algorithm", valid_402659049
  var valid_402659050 = header.getOrDefault("X-Amz-Date")
  valid_402659050 = validateParameter(valid_402659050, JString,
                                      required = false, default = nil)
  if valid_402659050 != nil:
    section.add "X-Amz-Date", valid_402659050
  var valid_402659051 = header.getOrDefault("X-Amz-Credential")
  valid_402659051 = validateParameter(valid_402659051, JString,
                                      required = false, default = nil)
  if valid_402659051 != nil:
    section.add "X-Amz-Credential", valid_402659051
  var valid_402659052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659052 = validateParameter(valid_402659052, JString,
                                      required = false, default = nil)
  if valid_402659052 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659052
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659053: Call_ListTargetsForPolicy_402659040;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## List targets for the specified policy.
                                                                                         ## 
  let valid = call_402659053.validator(path, query, header, formData, body, _)
  let scheme = call_402659053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659053.makeUrl(scheme.get, call_402659053.host, call_402659053.base,
                                   call_402659053.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659053, uri, valid, _)

proc call*(call_402659054: Call_ListTargetsForPolicy_402659040;
           policyName: string; marker: string = ""; pageSize: int = 0): Recallable =
  ## listTargetsForPolicy
  ## List targets for the specified policy.
  ##   marker: string
                                           ##         : A marker used to get the next set of results.
  ##   
                                                                                                     ## pageSize: int
                                                                                                     ##           
                                                                                                     ## : 
                                                                                                     ## The 
                                                                                                     ## maximum 
                                                                                                     ## number 
                                                                                                     ## of 
                                                                                                     ## results 
                                                                                                     ## to 
                                                                                                     ## return 
                                                                                                     ## at 
                                                                                                     ## one 
                                                                                                     ## time.
  ##   
                                                                                                             ## policyName: string (required)
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## policy 
                                                                                                             ## name.
  var path_402659055 = newJObject()
  var query_402659056 = newJObject()
  add(query_402659056, "marker", newJString(marker))
  add(query_402659056, "pageSize", newJInt(pageSize))
  add(path_402659055, "policyName", newJString(policyName))
  result = call_402659054.call(path_402659055, query_402659056, nil, nil, nil)

var listTargetsForPolicy* = Call_ListTargetsForPolicy_402659040(
    name: "listTargetsForPolicy", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/policy-targets/{policyName}",
    validator: validate_ListTargetsForPolicy_402659041, base: "/",
    makeUrl: url_ListTargetsForPolicy_402659042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTargetsForSecurityProfile_402659057 = ref object of OpenApiRestCall_402656044
proc url_ListTargetsForSecurityProfile_402659059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "securityProfileName" in path,
         "`securityProfileName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/security-profiles/"),
                 (kind: VariableSegment, value: "securityProfileName"),
                 (kind: ConstantSegment, value: "/targets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListTargetsForSecurityProfile_402659058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the targets (thing groups) associated with a given Device Defender security profile.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   securityProfileName: JString (required)
                                 ##                      : The security profile.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `securityProfileName` field"
  var valid_402659060 = path.getOrDefault("securityProfileName")
  valid_402659060 = validateParameter(valid_402659060, JString, required = true,
                                      default = nil)
  if valid_402659060 != nil:
    section.add "securityProfileName", valid_402659060
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## for 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  section = newJObject()
  var valid_402659061 = query.getOrDefault("maxResults")
  valid_402659061 = validateParameter(valid_402659061, JInt, required = false,
                                      default = nil)
  if valid_402659061 != nil:
    section.add "maxResults", valid_402659061
  var valid_402659062 = query.getOrDefault("nextToken")
  valid_402659062 = validateParameter(valid_402659062, JString,
                                      required = false, default = nil)
  if valid_402659062 != nil:
    section.add "nextToken", valid_402659062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659063 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659063 = validateParameter(valid_402659063, JString,
                                      required = false, default = nil)
  if valid_402659063 != nil:
    section.add "X-Amz-Security-Token", valid_402659063
  var valid_402659064 = header.getOrDefault("X-Amz-Signature")
  valid_402659064 = validateParameter(valid_402659064, JString,
                                      required = false, default = nil)
  if valid_402659064 != nil:
    section.add "X-Amz-Signature", valid_402659064
  var valid_402659065 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659065 = validateParameter(valid_402659065, JString,
                                      required = false, default = nil)
  if valid_402659065 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659065
  var valid_402659066 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659066 = validateParameter(valid_402659066, JString,
                                      required = false, default = nil)
  if valid_402659066 != nil:
    section.add "X-Amz-Algorithm", valid_402659066
  var valid_402659067 = header.getOrDefault("X-Amz-Date")
  valid_402659067 = validateParameter(valid_402659067, JString,
                                      required = false, default = nil)
  if valid_402659067 != nil:
    section.add "X-Amz-Date", valid_402659067
  var valid_402659068 = header.getOrDefault("X-Amz-Credential")
  valid_402659068 = validateParameter(valid_402659068, JString,
                                      required = false, default = nil)
  if valid_402659068 != nil:
    section.add "X-Amz-Credential", valid_402659068
  var valid_402659069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659069 = validateParameter(valid_402659069, JString,
                                      required = false, default = nil)
  if valid_402659069 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659070: Call_ListTargetsForSecurityProfile_402659057;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the targets (thing groups) associated with a given Device Defender security profile.
                                                                                         ## 
  let valid = call_402659070.validator(path, query, header, formData, body, _)
  let scheme = call_402659070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659070.makeUrl(scheme.get, call_402659070.host, call_402659070.base,
                                   call_402659070.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659070, uri, valid, _)

proc call*(call_402659071: Call_ListTargetsForSecurityProfile_402659057;
           securityProfileName: string; maxResults: int = 0;
           nextToken: string = ""): Recallable =
  ## listTargetsForSecurityProfile
  ## Lists the targets (thing groups) associated with a given Device Defender security profile.
  ##   
                                                                                               ## maxResults: int
                                                                                               ##             
                                                                                               ## : 
                                                                                               ## The 
                                                                                               ## maximum 
                                                                                               ## number 
                                                                                               ## of 
                                                                                               ## results 
                                                                                               ## to 
                                                                                               ## return 
                                                                                               ## at 
                                                                                               ## one 
                                                                                               ## time.
  ##   
                                                                                                       ## nextToken: string
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## for 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## securityProfileName: string (required)
                                                                                                                  ##                      
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## security 
                                                                                                                  ## profile.
  var path_402659072 = newJObject()
  var query_402659073 = newJObject()
  add(query_402659073, "maxResults", newJInt(maxResults))
  add(query_402659073, "nextToken", newJString(nextToken))
  add(path_402659072, "securityProfileName", newJString(securityProfileName))
  result = call_402659071.call(path_402659072, query_402659073, nil, nil, nil)

var listTargetsForSecurityProfile* = Call_ListTargetsForSecurityProfile_402659057(
    name: "listTargetsForSecurityProfile", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/security-profiles/{securityProfileName}/targets",
    validator: validate_ListTargetsForSecurityProfile_402659058, base: "/",
    makeUrl: url_ListTargetsForSecurityProfile_402659059,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingGroups_402659074 = ref object of OpenApiRestCall_402656044
proc url_ListThingGroups_402659076(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThingGroups_402659075(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List the thing groups in your account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## recursive: JBool
                                                                                                                  ##            
                                                                                                                  ## : 
                                                                                                                  ## If 
                                                                                                                  ## true, 
                                                                                                                  ## return 
                                                                                                                  ## child 
                                                                                                                  ## groups 
                                                                                                                  ## as 
                                                                                                                  ## well.
  ##   
                                                                                                                          ## parentGroup: JString
                                                                                                                          ##              
                                                                                                                          ## : 
                                                                                                                          ## A 
                                                                                                                          ## filter 
                                                                                                                          ## that 
                                                                                                                          ## limits 
                                                                                                                          ## the 
                                                                                                                          ## results 
                                                                                                                          ## to 
                                                                                                                          ## those 
                                                                                                                          ## with 
                                                                                                                          ## the 
                                                                                                                          ## specified 
                                                                                                                          ## parent 
                                                                                                                          ## group.
  ##   
                                                                                                                                   ## namePrefixFilter: JString
                                                                                                                                   ##                   
                                                                                                                                   ## : 
                                                                                                                                   ## A 
                                                                                                                                   ## filter 
                                                                                                                                   ## that 
                                                                                                                                   ## limits 
                                                                                                                                   ## the 
                                                                                                                                   ## results 
                                                                                                                                   ## to 
                                                                                                                                   ## those 
                                                                                                                                   ## with 
                                                                                                                                   ## the 
                                                                                                                                   ## specified 
                                                                                                                                   ## name 
                                                                                                                                   ## prefix.
  section = newJObject()
  var valid_402659077 = query.getOrDefault("maxResults")
  valid_402659077 = validateParameter(valid_402659077, JInt, required = false,
                                      default = nil)
  if valid_402659077 != nil:
    section.add "maxResults", valid_402659077
  var valid_402659078 = query.getOrDefault("nextToken")
  valid_402659078 = validateParameter(valid_402659078, JString,
                                      required = false, default = nil)
  if valid_402659078 != nil:
    section.add "nextToken", valid_402659078
  var valid_402659079 = query.getOrDefault("recursive")
  valid_402659079 = validateParameter(valid_402659079, JBool, required = false,
                                      default = nil)
  if valid_402659079 != nil:
    section.add "recursive", valid_402659079
  var valid_402659080 = query.getOrDefault("parentGroup")
  valid_402659080 = validateParameter(valid_402659080, JString,
                                      required = false, default = nil)
  if valid_402659080 != nil:
    section.add "parentGroup", valid_402659080
  var valid_402659081 = query.getOrDefault("namePrefixFilter")
  valid_402659081 = validateParameter(valid_402659081, JString,
                                      required = false, default = nil)
  if valid_402659081 != nil:
    section.add "namePrefixFilter", valid_402659081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659082 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659082 = validateParameter(valid_402659082, JString,
                                      required = false, default = nil)
  if valid_402659082 != nil:
    section.add "X-Amz-Security-Token", valid_402659082
  var valid_402659083 = header.getOrDefault("X-Amz-Signature")
  valid_402659083 = validateParameter(valid_402659083, JString,
                                      required = false, default = nil)
  if valid_402659083 != nil:
    section.add "X-Amz-Signature", valid_402659083
  var valid_402659084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659084 = validateParameter(valid_402659084, JString,
                                      required = false, default = nil)
  if valid_402659084 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659084
  var valid_402659085 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659085 = validateParameter(valid_402659085, JString,
                                      required = false, default = nil)
  if valid_402659085 != nil:
    section.add "X-Amz-Algorithm", valid_402659085
  var valid_402659086 = header.getOrDefault("X-Amz-Date")
  valid_402659086 = validateParameter(valid_402659086, JString,
                                      required = false, default = nil)
  if valid_402659086 != nil:
    section.add "X-Amz-Date", valid_402659086
  var valid_402659087 = header.getOrDefault("X-Amz-Credential")
  valid_402659087 = validateParameter(valid_402659087, JString,
                                      required = false, default = nil)
  if valid_402659087 != nil:
    section.add "X-Amz-Credential", valid_402659087
  var valid_402659088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659088 = validateParameter(valid_402659088, JString,
                                      required = false, default = nil)
  if valid_402659088 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659089: Call_ListThingGroups_402659074; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## List the thing groups in your account.
                                                                                         ## 
  let valid = call_402659089.validator(path, query, header, formData, body, _)
  let scheme = call_402659089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659089.makeUrl(scheme.get, call_402659089.host, call_402659089.base,
                                   call_402659089.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659089, uri, valid, _)

proc call*(call_402659090: Call_ListThingGroups_402659074; maxResults: int = 0;
           nextToken: string = ""; recursive: bool = false;
           parentGroup: string = ""; namePrefixFilter: string = ""): Recallable =
  ## listThingGroups
  ## List the thing groups in your account.
  ##   maxResults: int
                                           ##             : The maximum number of results to return at one time.
  ##   
                                                                                                                ## nextToken: string
                                                                                                                ##            
                                                                                                                ## : 
                                                                                                                ## The 
                                                                                                                ## token 
                                                                                                                ## to 
                                                                                                                ## retrieve 
                                                                                                                ## the 
                                                                                                                ## next 
                                                                                                                ## set 
                                                                                                                ## of 
                                                                                                                ## results.
  ##   
                                                                                                                           ## recursive: bool
                                                                                                                           ##            
                                                                                                                           ## : 
                                                                                                                           ## If 
                                                                                                                           ## true, 
                                                                                                                           ## return 
                                                                                                                           ## child 
                                                                                                                           ## groups 
                                                                                                                           ## as 
                                                                                                                           ## well.
  ##   
                                                                                                                                   ## parentGroup: string
                                                                                                                                   ##              
                                                                                                                                   ## : 
                                                                                                                                   ## A 
                                                                                                                                   ## filter 
                                                                                                                                   ## that 
                                                                                                                                   ## limits 
                                                                                                                                   ## the 
                                                                                                                                   ## results 
                                                                                                                                   ## to 
                                                                                                                                   ## those 
                                                                                                                                   ## with 
                                                                                                                                   ## the 
                                                                                                                                   ## specified 
                                                                                                                                   ## parent 
                                                                                                                                   ## group.
  ##   
                                                                                                                                            ## namePrefixFilter: string
                                                                                                                                            ##                   
                                                                                                                                            ## : 
                                                                                                                                            ## A 
                                                                                                                                            ## filter 
                                                                                                                                            ## that 
                                                                                                                                            ## limits 
                                                                                                                                            ## the 
                                                                                                                                            ## results 
                                                                                                                                            ## to 
                                                                                                                                            ## those 
                                                                                                                                            ## with 
                                                                                                                                            ## the 
                                                                                                                                            ## specified 
                                                                                                                                            ## name 
                                                                                                                                            ## prefix.
  var query_402659091 = newJObject()
  add(query_402659091, "maxResults", newJInt(maxResults))
  add(query_402659091, "nextToken", newJString(nextToken))
  add(query_402659091, "recursive", newJBool(recursive))
  add(query_402659091, "parentGroup", newJString(parentGroup))
  add(query_402659091, "namePrefixFilter", newJString(namePrefixFilter))
  result = call_402659090.call(nil, query_402659091, nil, nil, nil)

var listThingGroups* = Call_ListThingGroups_402659074(name: "listThingGroups",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/thing-groups",
    validator: validate_ListThingGroups_402659075, base: "/",
    makeUrl: url_ListThingGroups_402659076, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingGroupsForThing_402659092 = ref object of OpenApiRestCall_402656044
proc url_ListThingGroupsForThing_402659094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/thing-groups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingGroupsForThing_402659093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## List the thing groups to which the specified thing belongs.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The thing name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402659095 = path.getOrDefault("thingName")
  valid_402659095 = validateParameter(valid_402659095, JString, required = true,
                                      default = nil)
  if valid_402659095 != nil:
    section.add "thingName", valid_402659095
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  section = newJObject()
  var valid_402659096 = query.getOrDefault("maxResults")
  valid_402659096 = validateParameter(valid_402659096, JInt, required = false,
                                      default = nil)
  if valid_402659096 != nil:
    section.add "maxResults", valid_402659096
  var valid_402659097 = query.getOrDefault("nextToken")
  valid_402659097 = validateParameter(valid_402659097, JString,
                                      required = false, default = nil)
  if valid_402659097 != nil:
    section.add "nextToken", valid_402659097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659098 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659098 = validateParameter(valid_402659098, JString,
                                      required = false, default = nil)
  if valid_402659098 != nil:
    section.add "X-Amz-Security-Token", valid_402659098
  var valid_402659099 = header.getOrDefault("X-Amz-Signature")
  valid_402659099 = validateParameter(valid_402659099, JString,
                                      required = false, default = nil)
  if valid_402659099 != nil:
    section.add "X-Amz-Signature", valid_402659099
  var valid_402659100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659100 = validateParameter(valid_402659100, JString,
                                      required = false, default = nil)
  if valid_402659100 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659100
  var valid_402659101 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659101 = validateParameter(valid_402659101, JString,
                                      required = false, default = nil)
  if valid_402659101 != nil:
    section.add "X-Amz-Algorithm", valid_402659101
  var valid_402659102 = header.getOrDefault("X-Amz-Date")
  valid_402659102 = validateParameter(valid_402659102, JString,
                                      required = false, default = nil)
  if valid_402659102 != nil:
    section.add "X-Amz-Date", valid_402659102
  var valid_402659103 = header.getOrDefault("X-Amz-Credential")
  valid_402659103 = validateParameter(valid_402659103, JString,
                                      required = false, default = nil)
  if valid_402659103 != nil:
    section.add "X-Amz-Credential", valid_402659103
  var valid_402659104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659104 = validateParameter(valid_402659104, JString,
                                      required = false, default = nil)
  if valid_402659104 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659105: Call_ListThingGroupsForThing_402659092;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## List the thing groups to which the specified thing belongs.
                                                                                         ## 
  let valid = call_402659105.validator(path, query, header, formData, body, _)
  let scheme = call_402659105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659105.makeUrl(scheme.get, call_402659105.host, call_402659105.base,
                                   call_402659105.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659105, uri, valid, _)

proc call*(call_402659106: Call_ListThingGroupsForThing_402659092;
           thingName: string; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listThingGroupsForThing
  ## List the thing groups to which the specified thing belongs.
  ##   maxResults: int
                                                                ##             : The maximum number of results to return at one time.
  ##   
                                                                                                                                     ## nextToken: string
                                                                                                                                     ##            
                                                                                                                                     ## : 
                                                                                                                                     ## The 
                                                                                                                                     ## token 
                                                                                                                                     ## to 
                                                                                                                                     ## retrieve 
                                                                                                                                     ## the 
                                                                                                                                     ## next 
                                                                                                                                     ## set 
                                                                                                                                     ## of 
                                                                                                                                     ## results.
  ##   
                                                                                                                                                ## thingName: string (required)
                                                                                                                                                ##            
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## thing 
                                                                                                                                                ## name.
  var path_402659107 = newJObject()
  var query_402659108 = newJObject()
  add(query_402659108, "maxResults", newJInt(maxResults))
  add(query_402659108, "nextToken", newJString(nextToken))
  add(path_402659107, "thingName", newJString(thingName))
  result = call_402659106.call(path_402659107, query_402659108, nil, nil, nil)

var listThingGroupsForThing* = Call_ListThingGroupsForThing_402659092(
    name: "listThingGroupsForThing", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/thing-groups",
    validator: validate_ListThingGroupsForThing_402659093, base: "/",
    makeUrl: url_ListThingGroupsForThing_402659094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingPrincipals_402659109 = ref object of OpenApiRestCall_402656044
proc url_ListThingPrincipals_402659111(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingName" in path, "`thingName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/things/"),
                 (kind: VariableSegment, value: "thingName"),
                 (kind: ConstantSegment, value: "/principals")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingPrincipals_402659110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingName: JString (required)
                                 ##            : The name of the thing.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingName` field"
  var valid_402659112 = path.getOrDefault("thingName")
  valid_402659112 = validateParameter(valid_402659112, JString, required = true,
                                      default = nil)
  if valid_402659112 != nil:
    section.add "thingName", valid_402659112
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659113 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659113 = validateParameter(valid_402659113, JString,
                                      required = false, default = nil)
  if valid_402659113 != nil:
    section.add "X-Amz-Security-Token", valid_402659113
  var valid_402659114 = header.getOrDefault("X-Amz-Signature")
  valid_402659114 = validateParameter(valid_402659114, JString,
                                      required = false, default = nil)
  if valid_402659114 != nil:
    section.add "X-Amz-Signature", valid_402659114
  var valid_402659115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659115 = validateParameter(valid_402659115, JString,
                                      required = false, default = nil)
  if valid_402659115 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659115
  var valid_402659116 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659116 = validateParameter(valid_402659116, JString,
                                      required = false, default = nil)
  if valid_402659116 != nil:
    section.add "X-Amz-Algorithm", valid_402659116
  var valid_402659117 = header.getOrDefault("X-Amz-Date")
  valid_402659117 = validateParameter(valid_402659117, JString,
                                      required = false, default = nil)
  if valid_402659117 != nil:
    section.add "X-Amz-Date", valid_402659117
  var valid_402659118 = header.getOrDefault("X-Amz-Credential")
  valid_402659118 = validateParameter(valid_402659118, JString,
                                      required = false, default = nil)
  if valid_402659118 != nil:
    section.add "X-Amz-Credential", valid_402659118
  var valid_402659119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659119 = validateParameter(valid_402659119, JString,
                                      required = false, default = nil)
  if valid_402659119 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659119
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659120: Call_ListThingPrincipals_402659109;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
                                                                                         ## 
  let valid = call_402659120.validator(path, query, header, formData, body, _)
  let scheme = call_402659120.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659120.makeUrl(scheme.get, call_402659120.host, call_402659120.base,
                                   call_402659120.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659120, uri, valid, _)

proc call*(call_402659121: Call_ListThingPrincipals_402659109; thingName: string): Recallable =
  ## listThingPrincipals
  ## Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
  ##   
                                                                                                                                                                                      ## thingName: string (required)
                                                                                                                                                                                      ##            
                                                                                                                                                                                      ## : 
                                                                                                                                                                                      ## The 
                                                                                                                                                                                      ## name 
                                                                                                                                                                                      ## of 
                                                                                                                                                                                      ## the 
                                                                                                                                                                                      ## thing.
  var path_402659122 = newJObject()
  add(path_402659122, "thingName", newJString(thingName))
  result = call_402659121.call(path_402659122, nil, nil, nil, nil)

var listThingPrincipals* = Call_ListThingPrincipals_402659109(
    name: "listThingPrincipals", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/things/{thingName}/principals",
    validator: validate_ListThingPrincipals_402659110, base: "/",
    makeUrl: url_ListThingPrincipals_402659111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingRegistrationTaskReports_402659123 = ref object of OpenApiRestCall_402656044
proc url_ListThingRegistrationTaskReports_402659125(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-registration-tasks/"),
                 (kind: VariableSegment, value: "taskId"),
                 (kind: ConstantSegment, value: "/reports#reportType")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingRegistrationTaskReports_402659124(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Information about the thing registration tasks.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : The id of the task.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402659126 = path.getOrDefault("taskId")
  valid_402659126 = validateParameter(valid_402659126, JString, required = true,
                                      default = nil)
  if valid_402659126 != nil:
    section.add "taskId", valid_402659126
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return per request.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## reportType: JString (required)
                                                                                                                  ##             
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## type 
                                                                                                                  ## of 
                                                                                                                  ## task 
                                                                                                                  ## report.
  section = newJObject()
  var valid_402659127 = query.getOrDefault("maxResults")
  valid_402659127 = validateParameter(valid_402659127, JInt, required = false,
                                      default = nil)
  if valid_402659127 != nil:
    section.add "maxResults", valid_402659127
  var valid_402659128 = query.getOrDefault("nextToken")
  valid_402659128 = validateParameter(valid_402659128, JString,
                                      required = false, default = nil)
  if valid_402659128 != nil:
    section.add "nextToken", valid_402659128
  var valid_402659129 = query.getOrDefault("reportType")
  valid_402659129 = validateParameter(valid_402659129, JString, required = true,
                                      default = newJString("ERRORS"))
  if valid_402659129 != nil:
    section.add "reportType", valid_402659129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659130 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659130 = validateParameter(valid_402659130, JString,
                                      required = false, default = nil)
  if valid_402659130 != nil:
    section.add "X-Amz-Security-Token", valid_402659130
  var valid_402659131 = header.getOrDefault("X-Amz-Signature")
  valid_402659131 = validateParameter(valid_402659131, JString,
                                      required = false, default = nil)
  if valid_402659131 != nil:
    section.add "X-Amz-Signature", valid_402659131
  var valid_402659132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659132 = validateParameter(valid_402659132, JString,
                                      required = false, default = nil)
  if valid_402659132 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659132
  var valid_402659133 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659133 = validateParameter(valid_402659133, JString,
                                      required = false, default = nil)
  if valid_402659133 != nil:
    section.add "X-Amz-Algorithm", valid_402659133
  var valid_402659134 = header.getOrDefault("X-Amz-Date")
  valid_402659134 = validateParameter(valid_402659134, JString,
                                      required = false, default = nil)
  if valid_402659134 != nil:
    section.add "X-Amz-Date", valid_402659134
  var valid_402659135 = header.getOrDefault("X-Amz-Credential")
  valid_402659135 = validateParameter(valid_402659135, JString,
                                      required = false, default = nil)
  if valid_402659135 != nil:
    section.add "X-Amz-Credential", valid_402659135
  var valid_402659136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659136 = validateParameter(valid_402659136, JString,
                                      required = false, default = nil)
  if valid_402659136 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659136
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659137: Call_ListThingRegistrationTaskReports_402659123;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Information about the thing registration tasks.
                                                                                         ## 
  let valid = call_402659137.validator(path, query, header, formData, body, _)
  let scheme = call_402659137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659137.makeUrl(scheme.get, call_402659137.host, call_402659137.base,
                                   call_402659137.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659137, uri, valid, _)

proc call*(call_402659138: Call_ListThingRegistrationTaskReports_402659123;
           taskId: string; maxResults: int = 0; nextToken: string = "";
           reportType: string = "ERRORS"): Recallable =
  ## listThingRegistrationTaskReports
  ## Information about the thing registration tasks.
  ##   maxResults: int
                                                    ##             : The maximum number of results to return per request.
  ##   
                                                                                                                         ## nextToken: string
                                                                                                                         ##            
                                                                                                                         ## : 
                                                                                                                         ## The 
                                                                                                                         ## token 
                                                                                                                         ## to 
                                                                                                                         ## retrieve 
                                                                                                                         ## the 
                                                                                                                         ## next 
                                                                                                                         ## set 
                                                                                                                         ## of 
                                                                                                                         ## results.
  ##   
                                                                                                                                    ## reportType: string (required)
                                                                                                                                    ##             
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## type 
                                                                                                                                    ## of 
                                                                                                                                    ## task 
                                                                                                                                    ## report.
  ##   
                                                                                                                                              ## taskId: string (required)
                                                                                                                                              ##         
                                                                                                                                              ## : 
                                                                                                                                              ## The 
                                                                                                                                              ## id 
                                                                                                                                              ## of 
                                                                                                                                              ## the 
                                                                                                                                              ## task.
  var path_402659139 = newJObject()
  var query_402659140 = newJObject()
  add(query_402659140, "maxResults", newJInt(maxResults))
  add(query_402659140, "nextToken", newJString(nextToken))
  add(query_402659140, "reportType", newJString(reportType))
  add(path_402659139, "taskId", newJString(taskId))
  result = call_402659138.call(path_402659139, query_402659140, nil, nil, nil)

var listThingRegistrationTaskReports* = Call_ListThingRegistrationTaskReports_402659123(
    name: "listThingRegistrationTaskReports", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/thing-registration-tasks/{taskId}/reports#reportType",
    validator: validate_ListThingRegistrationTaskReports_402659124, base: "/",
    makeUrl: url_ListThingRegistrationTaskReports_402659125,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartThingRegistrationTask_402659157 = ref object of OpenApiRestCall_402656044
proc url_StartThingRegistrationTask_402659159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_StartThingRegistrationTask_402659158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Creates a bulk thing provisioning task.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659160 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659160 = validateParameter(valid_402659160, JString,
                                      required = false, default = nil)
  if valid_402659160 != nil:
    section.add "X-Amz-Security-Token", valid_402659160
  var valid_402659161 = header.getOrDefault("X-Amz-Signature")
  valid_402659161 = validateParameter(valid_402659161, JString,
                                      required = false, default = nil)
  if valid_402659161 != nil:
    section.add "X-Amz-Signature", valid_402659161
  var valid_402659162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659162 = validateParameter(valid_402659162, JString,
                                      required = false, default = nil)
  if valid_402659162 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659162
  var valid_402659163 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659163 = validateParameter(valid_402659163, JString,
                                      required = false, default = nil)
  if valid_402659163 != nil:
    section.add "X-Amz-Algorithm", valid_402659163
  var valid_402659164 = header.getOrDefault("X-Amz-Date")
  valid_402659164 = validateParameter(valid_402659164, JString,
                                      required = false, default = nil)
  if valid_402659164 != nil:
    section.add "X-Amz-Date", valid_402659164
  var valid_402659165 = header.getOrDefault("X-Amz-Credential")
  valid_402659165 = validateParameter(valid_402659165, JString,
                                      required = false, default = nil)
  if valid_402659165 != nil:
    section.add "X-Amz-Credential", valid_402659165
  var valid_402659166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659166 = validateParameter(valid_402659166, JString,
                                      required = false, default = nil)
  if valid_402659166 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659168: Call_StartThingRegistrationTask_402659157;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a bulk thing provisioning task.
                                                                                         ## 
  let valid = call_402659168.validator(path, query, header, formData, body, _)
  let scheme = call_402659168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659168.makeUrl(scheme.get, call_402659168.host, call_402659168.base,
                                   call_402659168.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659168, uri, valid, _)

proc call*(call_402659169: Call_StartThingRegistrationTask_402659157;
           body: JsonNode): Recallable =
  ## startThingRegistrationTask
  ## Creates a bulk thing provisioning task.
  ##   body: JObject (required)
  var body_402659170 = newJObject()
  if body != nil:
    body_402659170 = body
  result = call_402659169.call(nil, nil, nil, nil, body_402659170)

var startThingRegistrationTask* = Call_StartThingRegistrationTask_402659157(
    name: "startThingRegistrationTask", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/thing-registration-tasks",
    validator: validate_StartThingRegistrationTask_402659158, base: "/",
    makeUrl: url_StartThingRegistrationTask_402659159,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingRegistrationTasks_402659141 = ref object of OpenApiRestCall_402656044
proc url_ListThingRegistrationTasks_402659143(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThingRegistrationTasks_402659142(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## List bulk thing provisioning tasks.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## status: JString
                                                                                                                  ##         
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## status 
                                                                                                                  ## of 
                                                                                                                  ## the 
                                                                                                                  ## bulk 
                                                                                                                  ## thing 
                                                                                                                  ## provisioning 
                                                                                                                  ## task.
  section = newJObject()
  var valid_402659144 = query.getOrDefault("maxResults")
  valid_402659144 = validateParameter(valid_402659144, JInt, required = false,
                                      default = nil)
  if valid_402659144 != nil:
    section.add "maxResults", valid_402659144
  var valid_402659145 = query.getOrDefault("nextToken")
  valid_402659145 = validateParameter(valid_402659145, JString,
                                      required = false, default = nil)
  if valid_402659145 != nil:
    section.add "nextToken", valid_402659145
  var valid_402659146 = query.getOrDefault("status")
  valid_402659146 = validateParameter(valid_402659146, JString,
                                      required = false,
                                      default = newJString("InProgress"))
  if valid_402659146 != nil:
    section.add "status", valid_402659146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659147 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659147 = validateParameter(valid_402659147, JString,
                                      required = false, default = nil)
  if valid_402659147 != nil:
    section.add "X-Amz-Security-Token", valid_402659147
  var valid_402659148 = header.getOrDefault("X-Amz-Signature")
  valid_402659148 = validateParameter(valid_402659148, JString,
                                      required = false, default = nil)
  if valid_402659148 != nil:
    section.add "X-Amz-Signature", valid_402659148
  var valid_402659149 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659149 = validateParameter(valid_402659149, JString,
                                      required = false, default = nil)
  if valid_402659149 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659149
  var valid_402659150 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659150 = validateParameter(valid_402659150, JString,
                                      required = false, default = nil)
  if valid_402659150 != nil:
    section.add "X-Amz-Algorithm", valid_402659150
  var valid_402659151 = header.getOrDefault("X-Amz-Date")
  valid_402659151 = validateParameter(valid_402659151, JString,
                                      required = false, default = nil)
  if valid_402659151 != nil:
    section.add "X-Amz-Date", valid_402659151
  var valid_402659152 = header.getOrDefault("X-Amz-Credential")
  valid_402659152 = validateParameter(valid_402659152, JString,
                                      required = false, default = nil)
  if valid_402659152 != nil:
    section.add "X-Amz-Credential", valid_402659152
  var valid_402659153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659153 = validateParameter(valid_402659153, JString,
                                      required = false, default = nil)
  if valid_402659153 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659153
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659154: Call_ListThingRegistrationTasks_402659141;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## List bulk thing provisioning tasks.
                                                                                         ## 
  let valid = call_402659154.validator(path, query, header, formData, body, _)
  let scheme = call_402659154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659154.makeUrl(scheme.get, call_402659154.host, call_402659154.base,
                                   call_402659154.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659154, uri, valid, _)

proc call*(call_402659155: Call_ListThingRegistrationTasks_402659141;
           maxResults: int = 0; nextToken: string = "";
           status: string = "InProgress"): Recallable =
  ## listThingRegistrationTasks
  ## List bulk thing provisioning tasks.
  ##   maxResults: int
                                        ##             : The maximum number of results to return at one time.
  ##   
                                                                                                             ## nextToken: string
                                                                                                             ##            
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## token 
                                                                                                             ## to 
                                                                                                             ## retrieve 
                                                                                                             ## the 
                                                                                                             ## next 
                                                                                                             ## set 
                                                                                                             ## of 
                                                                                                             ## results.
  ##   
                                                                                                                        ## status: string
                                                                                                                        ##         
                                                                                                                        ## : 
                                                                                                                        ## The 
                                                                                                                        ## status 
                                                                                                                        ## of 
                                                                                                                        ## the 
                                                                                                                        ## bulk 
                                                                                                                        ## thing 
                                                                                                                        ## provisioning 
                                                                                                                        ## task.
  var query_402659156 = newJObject()
  add(query_402659156, "maxResults", newJInt(maxResults))
  add(query_402659156, "nextToken", newJString(nextToken))
  add(query_402659156, "status", newJString(status))
  result = call_402659155.call(nil, query_402659156, nil, nil, nil)

var listThingRegistrationTasks* = Call_ListThingRegistrationTasks_402659141(
    name: "listThingRegistrationTasks", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-registration-tasks",
    validator: validate_ListThingRegistrationTasks_402659142, base: "/",
    makeUrl: url_ListThingRegistrationTasks_402659143,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingTypes_402659171 = ref object of OpenApiRestCall_402656044
proc url_ListThingTypes_402659173(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThingTypes_402659172(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the existing thing types.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return in this operation.
  ##   
                                                                                                             ## thingTypeName: JString
                                                                                                             ##                
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## name 
                                                                                                             ## of 
                                                                                                             ## the 
                                                                                                             ## thing 
                                                                                                             ## type.
  ##   
                                                                                                                     ## nextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## The 
                                                                                                                     ## token 
                                                                                                                     ## to 
                                                                                                                     ## retrieve 
                                                                                                                     ## the 
                                                                                                                     ## next 
                                                                                                                     ## set 
                                                                                                                     ## of 
                                                                                                                     ## results.
  section = newJObject()
  var valid_402659174 = query.getOrDefault("maxResults")
  valid_402659174 = validateParameter(valid_402659174, JInt, required = false,
                                      default = nil)
  if valid_402659174 != nil:
    section.add "maxResults", valid_402659174
  var valid_402659175 = query.getOrDefault("thingTypeName")
  valid_402659175 = validateParameter(valid_402659175, JString,
                                      required = false, default = nil)
  if valid_402659175 != nil:
    section.add "thingTypeName", valid_402659175
  var valid_402659176 = query.getOrDefault("nextToken")
  valid_402659176 = validateParameter(valid_402659176, JString,
                                      required = false, default = nil)
  if valid_402659176 != nil:
    section.add "nextToken", valid_402659176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659177 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659177 = validateParameter(valid_402659177, JString,
                                      required = false, default = nil)
  if valid_402659177 != nil:
    section.add "X-Amz-Security-Token", valid_402659177
  var valid_402659178 = header.getOrDefault("X-Amz-Signature")
  valid_402659178 = validateParameter(valid_402659178, JString,
                                      required = false, default = nil)
  if valid_402659178 != nil:
    section.add "X-Amz-Signature", valid_402659178
  var valid_402659179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659179 = validateParameter(valid_402659179, JString,
                                      required = false, default = nil)
  if valid_402659179 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659179
  var valid_402659180 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659180 = validateParameter(valid_402659180, JString,
                                      required = false, default = nil)
  if valid_402659180 != nil:
    section.add "X-Amz-Algorithm", valid_402659180
  var valid_402659181 = header.getOrDefault("X-Amz-Date")
  valid_402659181 = validateParameter(valid_402659181, JString,
                                      required = false, default = nil)
  if valid_402659181 != nil:
    section.add "X-Amz-Date", valid_402659181
  var valid_402659182 = header.getOrDefault("X-Amz-Credential")
  valid_402659182 = validateParameter(valid_402659182, JString,
                                      required = false, default = nil)
  if valid_402659182 != nil:
    section.add "X-Amz-Credential", valid_402659182
  var valid_402659183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659183 = validateParameter(valid_402659183, JString,
                                      required = false, default = nil)
  if valid_402659183 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659184: Call_ListThingTypes_402659171; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the existing thing types.
                                                                                         ## 
  let valid = call_402659184.validator(path, query, header, formData, body, _)
  let scheme = call_402659184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659184.makeUrl(scheme.get, call_402659184.host, call_402659184.base,
                                   call_402659184.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659184, uri, valid, _)

proc call*(call_402659185: Call_ListThingTypes_402659171; maxResults: int = 0;
           thingTypeName: string = ""; nextToken: string = ""): Recallable =
  ## listThingTypes
  ## Lists the existing thing types.
  ##   maxResults: int
                                    ##             : The maximum number of results to return in this operation.
  ##   
                                                                                                               ## thingTypeName: string
                                                                                                               ##                
                                                                                                               ## : 
                                                                                                               ## The 
                                                                                                               ## name 
                                                                                                               ## of 
                                                                                                               ## the 
                                                                                                               ## thing 
                                                                                                               ## type.
  ##   
                                                                                                                       ## nextToken: string
                                                                                                                       ##            
                                                                                                                       ## : 
                                                                                                                       ## The 
                                                                                                                       ## token 
                                                                                                                       ## to 
                                                                                                                       ## retrieve 
                                                                                                                       ## the 
                                                                                                                       ## next 
                                                                                                                       ## set 
                                                                                                                       ## of 
                                                                                                                       ## results.
  var query_402659186 = newJObject()
  add(query_402659186, "maxResults", newJInt(maxResults))
  add(query_402659186, "thingTypeName", newJString(thingTypeName))
  add(query_402659186, "nextToken", newJString(nextToken))
  result = call_402659185.call(nil, query_402659186, nil, nil, nil)

var listThingTypes* = Call_ListThingTypes_402659171(name: "listThingTypes",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/thing-types",
    validator: validate_ListThingTypes_402659172, base: "/",
    makeUrl: url_ListThingTypes_402659173, schemes: {Scheme.Https, Scheme.Http})
type
  Call_RegisterThing_402659205 = ref object of OpenApiRestCall_402656044
proc url_RegisterThing_402659207(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RegisterThing_402659206(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Provisions a thing in the device registry. RegisterThing calls other AWS IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise your throttling limits if necessary.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659208 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659208 = validateParameter(valid_402659208, JString,
                                      required = false, default = nil)
  if valid_402659208 != nil:
    section.add "X-Amz-Security-Token", valid_402659208
  var valid_402659209 = header.getOrDefault("X-Amz-Signature")
  valid_402659209 = validateParameter(valid_402659209, JString,
                                      required = false, default = nil)
  if valid_402659209 != nil:
    section.add "X-Amz-Signature", valid_402659209
  var valid_402659210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659210 = validateParameter(valid_402659210, JString,
                                      required = false, default = nil)
  if valid_402659210 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659210
  var valid_402659211 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659211 = validateParameter(valid_402659211, JString,
                                      required = false, default = nil)
  if valid_402659211 != nil:
    section.add "X-Amz-Algorithm", valid_402659211
  var valid_402659212 = header.getOrDefault("X-Amz-Date")
  valid_402659212 = validateParameter(valid_402659212, JString,
                                      required = false, default = nil)
  if valid_402659212 != nil:
    section.add "X-Amz-Date", valid_402659212
  var valid_402659213 = header.getOrDefault("X-Amz-Credential")
  valid_402659213 = validateParameter(valid_402659213, JString,
                                      required = false, default = nil)
  if valid_402659213 != nil:
    section.add "X-Amz-Credential", valid_402659213
  var valid_402659214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659214 = validateParameter(valid_402659214, JString,
                                      required = false, default = nil)
  if valid_402659214 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659216: Call_RegisterThing_402659205; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Provisions a thing in the device registry. RegisterThing calls other AWS IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise your throttling limits if necessary.
                                                                                         ## 
  let valid = call_402659216.validator(path, query, header, formData, body, _)
  let scheme = call_402659216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659216.makeUrl(scheme.get, call_402659216.host, call_402659216.base,
                                   call_402659216.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659216, uri, valid, _)

proc call*(call_402659217: Call_RegisterThing_402659205; body: JsonNode): Recallable =
  ## registerThing
  ## Provisions a thing in the device registry. RegisterThing calls other AWS IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise your throttling limits if necessary.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## body: JObject (required)
  var body_402659218 = newJObject()
  if body != nil:
    body_402659218 = body
  result = call_402659217.call(nil, nil, nil, nil, body_402659218)

var registerThing* = Call_RegisterThing_402659205(name: "registerThing",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/things",
    validator: validate_RegisterThing_402659206, base: "/",
    makeUrl: url_RegisterThing_402659207, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThings_402659187 = ref object of OpenApiRestCall_402656044
proc url_ListThings_402659189(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListThings_402659188(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. 
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   attributeName: JString
                                  ##                : The attribute name used to search for things.
  ##   
                                                                                                   ## maxResults: JInt
                                                                                                   ##             
                                                                                                   ## : 
                                                                                                   ## The 
                                                                                                   ## maximum 
                                                                                                   ## number 
                                                                                                   ## of 
                                                                                                   ## results 
                                                                                                   ## to 
                                                                                                   ## return 
                                                                                                   ## in 
                                                                                                   ## this 
                                                                                                   ## operation.
  ##   
                                                                                                                ## thingTypeName: JString
                                                                                                                ##                
                                                                                                                ## : 
                                                                                                                ## The 
                                                                                                                ## name 
                                                                                                                ## of 
                                                                                                                ## the 
                                                                                                                ## thing 
                                                                                                                ## type 
                                                                                                                ## used 
                                                                                                                ## to 
                                                                                                                ## search 
                                                                                                                ## for 
                                                                                                                ## things.
  ##   
                                                                                                                          ## nextToken: JString
                                                                                                                          ##            
                                                                                                                          ## : 
                                                                                                                          ## The 
                                                                                                                          ## token 
                                                                                                                          ## to 
                                                                                                                          ## retrieve 
                                                                                                                          ## the 
                                                                                                                          ## next 
                                                                                                                          ## set 
                                                                                                                          ## of 
                                                                                                                          ## results.
  ##   
                                                                                                                                     ## attributeValue: JString
                                                                                                                                     ##                 
                                                                                                                                     ## : 
                                                                                                                                     ## The 
                                                                                                                                     ## attribute 
                                                                                                                                     ## value 
                                                                                                                                     ## used 
                                                                                                                                     ## to 
                                                                                                                                     ## search 
                                                                                                                                     ## for 
                                                                                                                                     ## things.
  section = newJObject()
  var valid_402659190 = query.getOrDefault("attributeName")
  valid_402659190 = validateParameter(valid_402659190, JString,
                                      required = false, default = nil)
  if valid_402659190 != nil:
    section.add "attributeName", valid_402659190
  var valid_402659191 = query.getOrDefault("maxResults")
  valid_402659191 = validateParameter(valid_402659191, JInt, required = false,
                                      default = nil)
  if valid_402659191 != nil:
    section.add "maxResults", valid_402659191
  var valid_402659192 = query.getOrDefault("thingTypeName")
  valid_402659192 = validateParameter(valid_402659192, JString,
                                      required = false, default = nil)
  if valid_402659192 != nil:
    section.add "thingTypeName", valid_402659192
  var valid_402659193 = query.getOrDefault("nextToken")
  valid_402659193 = validateParameter(valid_402659193, JString,
                                      required = false, default = nil)
  if valid_402659193 != nil:
    section.add "nextToken", valid_402659193
  var valid_402659194 = query.getOrDefault("attributeValue")
  valid_402659194 = validateParameter(valid_402659194, JString,
                                      required = false, default = nil)
  if valid_402659194 != nil:
    section.add "attributeValue", valid_402659194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659195 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659195 = validateParameter(valid_402659195, JString,
                                      required = false, default = nil)
  if valid_402659195 != nil:
    section.add "X-Amz-Security-Token", valid_402659195
  var valid_402659196 = header.getOrDefault("X-Amz-Signature")
  valid_402659196 = validateParameter(valid_402659196, JString,
                                      required = false, default = nil)
  if valid_402659196 != nil:
    section.add "X-Amz-Signature", valid_402659196
  var valid_402659197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659197 = validateParameter(valid_402659197, JString,
                                      required = false, default = nil)
  if valid_402659197 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659197
  var valid_402659198 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659198 = validateParameter(valid_402659198, JString,
                                      required = false, default = nil)
  if valid_402659198 != nil:
    section.add "X-Amz-Algorithm", valid_402659198
  var valid_402659199 = header.getOrDefault("X-Amz-Date")
  valid_402659199 = validateParameter(valid_402659199, JString,
                                      required = false, default = nil)
  if valid_402659199 != nil:
    section.add "X-Amz-Date", valid_402659199
  var valid_402659200 = header.getOrDefault("X-Amz-Credential")
  valid_402659200 = validateParameter(valid_402659200, JString,
                                      required = false, default = nil)
  if valid_402659200 != nil:
    section.add "X-Amz-Credential", valid_402659200
  var valid_402659201 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659201 = validateParameter(valid_402659201, JString,
                                      required = false, default = nil)
  if valid_402659201 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659201
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659202: Call_ListThings_402659187; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. 
                                                                                         ## 
  let valid = call_402659202.validator(path, query, header, formData, body, _)
  let scheme = call_402659202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659202.makeUrl(scheme.get, call_402659202.host, call_402659202.base,
                                   call_402659202.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659202, uri, valid, _)

proc call*(call_402659203: Call_ListThings_402659187;
           attributeName: string = ""; maxResults: int = 0;
           thingTypeName: string = ""; nextToken: string = "";
           attributeValue: string = ""): Recallable =
  ## listThings
  ## Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. 
  ##   
                                                                                                                                                                                                                                                                                                                     ## attributeName: string
                                                                                                                                                                                                                                                                                                                     ##                
                                                                                                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                                                                                                                     ## attribute 
                                                                                                                                                                                                                                                                                                                     ## name 
                                                                                                                                                                                                                                                                                                                     ## used 
                                                                                                                                                                                                                                                                                                                     ## to 
                                                                                                                                                                                                                                                                                                                     ## search 
                                                                                                                                                                                                                                                                                                                     ## for 
                                                                                                                                                                                                                                                                                                                     ## things.
  ##   
                                                                                                                                                                                                                                                                                                                               ## maxResults: int
                                                                                                                                                                                                                                                                                                                               ##             
                                                                                                                                                                                                                                                                                                                               ## : 
                                                                                                                                                                                                                                                                                                                               ## The 
                                                                                                                                                                                                                                                                                                                               ## maximum 
                                                                                                                                                                                                                                                                                                                               ## number 
                                                                                                                                                                                                                                                                                                                               ## of 
                                                                                                                                                                                                                                                                                                                               ## results 
                                                                                                                                                                                                                                                                                                                               ## to 
                                                                                                                                                                                                                                                                                                                               ## return 
                                                                                                                                                                                                                                                                                                                               ## in 
                                                                                                                                                                                                                                                                                                                               ## this 
                                                                                                                                                                                                                                                                                                                               ## operation.
  ##   
                                                                                                                                                                                                                                                                                                                                            ## thingTypeName: string
                                                                                                                                                                                                                                                                                                                                            ##                
                                                                                                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                                                                                                            ## name 
                                                                                                                                                                                                                                                                                                                                            ## of 
                                                                                                                                                                                                                                                                                                                                            ## the 
                                                                                                                                                                                                                                                                                                                                            ## thing 
                                                                                                                                                                                                                                                                                                                                            ## type 
                                                                                                                                                                                                                                                                                                                                            ## used 
                                                                                                                                                                                                                                                                                                                                            ## to 
                                                                                                                                                                                                                                                                                                                                            ## search 
                                                                                                                                                                                                                                                                                                                                            ## for 
                                                                                                                                                                                                                                                                                                                                            ## things.
  ##   
                                                                                                                                                                                                                                                                                                                                                      ## nextToken: string
                                                                                                                                                                                                                                                                                                                                                      ##            
                                                                                                                                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                                                                                                                                      ## The 
                                                                                                                                                                                                                                                                                                                                                      ## token 
                                                                                                                                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                                                                                                                                      ## retrieve 
                                                                                                                                                                                                                                                                                                                                                      ## the 
                                                                                                                                                                                                                                                                                                                                                      ## next 
                                                                                                                                                                                                                                                                                                                                                      ## set 
                                                                                                                                                                                                                                                                                                                                                      ## of 
                                                                                                                                                                                                                                                                                                                                                      ## results.
  ##   
                                                                                                                                                                                                                                                                                                                                                                 ## attributeValue: string
                                                                                                                                                                                                                                                                                                                                                                 ##                 
                                                                                                                                                                                                                                                                                                                                                                 ## : 
                                                                                                                                                                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                                                                                                                                                                 ## attribute 
                                                                                                                                                                                                                                                                                                                                                                 ## value 
                                                                                                                                                                                                                                                                                                                                                                 ## used 
                                                                                                                                                                                                                                                                                                                                                                 ## to 
                                                                                                                                                                                                                                                                                                                                                                 ## search 
                                                                                                                                                                                                                                                                                                                                                                 ## for 
                                                                                                                                                                                                                                                                                                                                                                 ## things.
  var query_402659204 = newJObject()
  add(query_402659204, "attributeName", newJString(attributeName))
  add(query_402659204, "maxResults", newJInt(maxResults))
  add(query_402659204, "thingTypeName", newJString(thingTypeName))
  add(query_402659204, "nextToken", newJString(nextToken))
  add(query_402659204, "attributeValue", newJString(attributeValue))
  result = call_402659203.call(nil, query_402659204, nil, nil, nil)

var listThings* = Call_ListThings_402659187(name: "listThings",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/things",
    validator: validate_ListThings_402659188, base: "/",
    makeUrl: url_ListThings_402659189, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingsInBillingGroup_402659219 = ref object of OpenApiRestCall_402656044
proc url_ListThingsInBillingGroup_402659221(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "billingGroupName" in path,
         "`billingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/billing-groups/"),
                 (kind: VariableSegment, value: "billingGroupName"),
                 (kind: ConstantSegment, value: "/things")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingsInBillingGroup_402659220(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the things you have added to the given billing group.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   billingGroupName: JString (required)
                                 ##                   : The name of the billing group.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `billingGroupName` field"
  var valid_402659222 = path.getOrDefault("billingGroupName")
  valid_402659222 = validateParameter(valid_402659222, JString, required = true,
                                      default = nil)
  if valid_402659222 != nil:
    section.add "billingGroupName", valid_402659222
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return per request.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  section = newJObject()
  var valid_402659223 = query.getOrDefault("maxResults")
  valid_402659223 = validateParameter(valid_402659223, JInt, required = false,
                                      default = nil)
  if valid_402659223 != nil:
    section.add "maxResults", valid_402659223
  var valid_402659224 = query.getOrDefault("nextToken")
  valid_402659224 = validateParameter(valid_402659224, JString,
                                      required = false, default = nil)
  if valid_402659224 != nil:
    section.add "nextToken", valid_402659224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659225 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659225 = validateParameter(valid_402659225, JString,
                                      required = false, default = nil)
  if valid_402659225 != nil:
    section.add "X-Amz-Security-Token", valid_402659225
  var valid_402659226 = header.getOrDefault("X-Amz-Signature")
  valid_402659226 = validateParameter(valid_402659226, JString,
                                      required = false, default = nil)
  if valid_402659226 != nil:
    section.add "X-Amz-Signature", valid_402659226
  var valid_402659227 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659227 = validateParameter(valid_402659227, JString,
                                      required = false, default = nil)
  if valid_402659227 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659227
  var valid_402659228 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659228 = validateParameter(valid_402659228, JString,
                                      required = false, default = nil)
  if valid_402659228 != nil:
    section.add "X-Amz-Algorithm", valid_402659228
  var valid_402659229 = header.getOrDefault("X-Amz-Date")
  valid_402659229 = validateParameter(valid_402659229, JString,
                                      required = false, default = nil)
  if valid_402659229 != nil:
    section.add "X-Amz-Date", valid_402659229
  var valid_402659230 = header.getOrDefault("X-Amz-Credential")
  valid_402659230 = validateParameter(valid_402659230, JString,
                                      required = false, default = nil)
  if valid_402659230 != nil:
    section.add "X-Amz-Credential", valid_402659230
  var valid_402659231 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659231 = validateParameter(valid_402659231, JString,
                                      required = false, default = nil)
  if valid_402659231 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659232: Call_ListThingsInBillingGroup_402659219;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the things you have added to the given billing group.
                                                                                         ## 
  let valid = call_402659232.validator(path, query, header, formData, body, _)
  let scheme = call_402659232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659232.makeUrl(scheme.get, call_402659232.host, call_402659232.base,
                                   call_402659232.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659232, uri, valid, _)

proc call*(call_402659233: Call_ListThingsInBillingGroup_402659219;
           billingGroupName: string; maxResults: int = 0; nextToken: string = ""): Recallable =
  ## listThingsInBillingGroup
  ## Lists the things you have added to the given billing group.
  ##   
                                                                ## billingGroupName: string (required)
                                                                ##                   
                                                                ## : 
                                                                ## The name of the billing group.
  ##   
                                                                                                 ## maxResults: int
                                                                                                 ##             
                                                                                                 ## : 
                                                                                                 ## The 
                                                                                                 ## maximum 
                                                                                                 ## number 
                                                                                                 ## of 
                                                                                                 ## results 
                                                                                                 ## to 
                                                                                                 ## return 
                                                                                                 ## per 
                                                                                                 ## request.
  ##   
                                                                                                            ## nextToken: string
                                                                                                            ##            
                                                                                                            ## : 
                                                                                                            ## The 
                                                                                                            ## token 
                                                                                                            ## to 
                                                                                                            ## retrieve 
                                                                                                            ## the 
                                                                                                            ## next 
                                                                                                            ## set 
                                                                                                            ## of 
                                                                                                            ## results.
  var path_402659234 = newJObject()
  var query_402659235 = newJObject()
  add(path_402659234, "billingGroupName", newJString(billingGroupName))
  add(query_402659235, "maxResults", newJInt(maxResults))
  add(query_402659235, "nextToken", newJString(nextToken))
  result = call_402659233.call(path_402659234, query_402659235, nil, nil, nil)

var listThingsInBillingGroup* = Call_ListThingsInBillingGroup_402659219(
    name: "listThingsInBillingGroup", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com",
    route: "/billing-groups/{billingGroupName}/things",
    validator: validate_ListThingsInBillingGroup_402659220, base: "/",
    makeUrl: url_ListThingsInBillingGroup_402659221,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListThingsInThingGroup_402659236 = ref object of OpenApiRestCall_402656044
proc url_ListThingsInThingGroup_402659238(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "thingGroupName" in path,
         "`thingGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-groups/"),
                 (kind: VariableSegment, value: "thingGroupName"),
                 (kind: ConstantSegment, value: "/things")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListThingsInThingGroup_402659237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the things in the specified group.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   thingGroupName: JString (required)
                                 ##                 : The thing group name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `thingGroupName` field"
  var valid_402659239 = path.getOrDefault("thingGroupName")
  valid_402659239 = validateParameter(valid_402659239, JString, required = true,
                                      default = nil)
  if valid_402659239 != nil:
    section.add "thingGroupName", valid_402659239
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## to 
                                                                                                       ## retrieve 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## recursive: JBool
                                                                                                                  ##            
                                                                                                                  ## : 
                                                                                                                  ## When 
                                                                                                                  ## true, 
                                                                                                                  ## list 
                                                                                                                  ## things 
                                                                                                                  ## in 
                                                                                                                  ## this 
                                                                                                                  ## thing 
                                                                                                                  ## group 
                                                                                                                  ## and 
                                                                                                                  ## in 
                                                                                                                  ## all 
                                                                                                                  ## child 
                                                                                                                  ## groups 
                                                                                                                  ## as 
                                                                                                                  ## well.
  section = newJObject()
  var valid_402659240 = query.getOrDefault("maxResults")
  valid_402659240 = validateParameter(valid_402659240, JInt, required = false,
                                      default = nil)
  if valid_402659240 != nil:
    section.add "maxResults", valid_402659240
  var valid_402659241 = query.getOrDefault("nextToken")
  valid_402659241 = validateParameter(valid_402659241, JString,
                                      required = false, default = nil)
  if valid_402659241 != nil:
    section.add "nextToken", valid_402659241
  var valid_402659242 = query.getOrDefault("recursive")
  valid_402659242 = validateParameter(valid_402659242, JBool, required = false,
                                      default = nil)
  if valid_402659242 != nil:
    section.add "recursive", valid_402659242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659243 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659243 = validateParameter(valid_402659243, JString,
                                      required = false, default = nil)
  if valid_402659243 != nil:
    section.add "X-Amz-Security-Token", valid_402659243
  var valid_402659244 = header.getOrDefault("X-Amz-Signature")
  valid_402659244 = validateParameter(valid_402659244, JString,
                                      required = false, default = nil)
  if valid_402659244 != nil:
    section.add "X-Amz-Signature", valid_402659244
  var valid_402659245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659245 = validateParameter(valid_402659245, JString,
                                      required = false, default = nil)
  if valid_402659245 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659245
  var valid_402659246 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659246 = validateParameter(valid_402659246, JString,
                                      required = false, default = nil)
  if valid_402659246 != nil:
    section.add "X-Amz-Algorithm", valid_402659246
  var valid_402659247 = header.getOrDefault("X-Amz-Date")
  valid_402659247 = validateParameter(valid_402659247, JString,
                                      required = false, default = nil)
  if valid_402659247 != nil:
    section.add "X-Amz-Date", valid_402659247
  var valid_402659248 = header.getOrDefault("X-Amz-Credential")
  valid_402659248 = validateParameter(valid_402659248, JString,
                                      required = false, default = nil)
  if valid_402659248 != nil:
    section.add "X-Amz-Credential", valid_402659248
  var valid_402659249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659249 = validateParameter(valid_402659249, JString,
                                      required = false, default = nil)
  if valid_402659249 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659250: Call_ListThingsInThingGroup_402659236;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the things in the specified group.
                                                                                         ## 
  let valid = call_402659250.validator(path, query, header, formData, body, _)
  let scheme = call_402659250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659250.makeUrl(scheme.get, call_402659250.host, call_402659250.base,
                                   call_402659250.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659250, uri, valid, _)

proc call*(call_402659251: Call_ListThingsInThingGroup_402659236;
           thingGroupName: string; maxResults: int = 0; nextToken: string = "";
           recursive: bool = false): Recallable =
  ## listThingsInThingGroup
  ## Lists the things in the specified group.
  ##   maxResults: int
                                             ##             : The maximum number of results to return at one time.
  ##   
                                                                                                                  ## thingGroupName: string (required)
                                                                                                                  ##                 
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## thing 
                                                                                                                  ## group 
                                                                                                                  ## name.
  ##   
                                                                                                                          ## nextToken: string
                                                                                                                          ##            
                                                                                                                          ## : 
                                                                                                                          ## The 
                                                                                                                          ## token 
                                                                                                                          ## to 
                                                                                                                          ## retrieve 
                                                                                                                          ## the 
                                                                                                                          ## next 
                                                                                                                          ## set 
                                                                                                                          ## of 
                                                                                                                          ## results.
  ##   
                                                                                                                                     ## recursive: bool
                                                                                                                                     ##            
                                                                                                                                     ## : 
                                                                                                                                     ## When 
                                                                                                                                     ## true, 
                                                                                                                                     ## list 
                                                                                                                                     ## things 
                                                                                                                                     ## in 
                                                                                                                                     ## this 
                                                                                                                                     ## thing 
                                                                                                                                     ## group 
                                                                                                                                     ## and 
                                                                                                                                     ## in 
                                                                                                                                     ## all 
                                                                                                                                     ## child 
                                                                                                                                     ## groups 
                                                                                                                                     ## as 
                                                                                                                                     ## well.
  var path_402659252 = newJObject()
  var query_402659253 = newJObject()
  add(query_402659253, "maxResults", newJInt(maxResults))
  add(path_402659252, "thingGroupName", newJString(thingGroupName))
  add(query_402659253, "nextToken", newJString(nextToken))
  add(query_402659253, "recursive", newJBool(recursive))
  result = call_402659251.call(path_402659252, query_402659253, nil, nil, nil)

var listThingsInThingGroup* = Call_ListThingsInThingGroup_402659236(
    name: "listThingsInThingGroup", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/thing-groups/{thingGroupName}/things",
    validator: validate_ListThingsInThingGroup_402659237, base: "/",
    makeUrl: url_ListThingsInThingGroup_402659238,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListTopicRules_402659254 = ref object of OpenApiRestCall_402656044
proc url_ListTopicRules_402659256(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListTopicRules_402659255(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the rules for the specific topic.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return.
  ##   
                                                                                           ## nextToken: JString
                                                                                           ##            
                                                                                           ## : 
                                                                                           ## A 
                                                                                           ## token 
                                                                                           ## used 
                                                                                           ## to 
                                                                                           ## retrieve 
                                                                                           ## the 
                                                                                           ## next 
                                                                                           ## value.
  ##   
                                                                                                    ## ruleDisabled: JBool
                                                                                                    ##               
                                                                                                    ## : 
                                                                                                    ## Specifies 
                                                                                                    ## whether 
                                                                                                    ## the 
                                                                                                    ## rule 
                                                                                                    ## is 
                                                                                                    ## disabled.
  ##   
                                                                                                                ## topic: JString
                                                                                                                ##        
                                                                                                                ## : 
                                                                                                                ## The 
                                                                                                                ## topic.
  section = newJObject()
  var valid_402659257 = query.getOrDefault("maxResults")
  valid_402659257 = validateParameter(valid_402659257, JInt, required = false,
                                      default = nil)
  if valid_402659257 != nil:
    section.add "maxResults", valid_402659257
  var valid_402659258 = query.getOrDefault("nextToken")
  valid_402659258 = validateParameter(valid_402659258, JString,
                                      required = false, default = nil)
  if valid_402659258 != nil:
    section.add "nextToken", valid_402659258
  var valid_402659259 = query.getOrDefault("ruleDisabled")
  valid_402659259 = validateParameter(valid_402659259, JBool, required = false,
                                      default = nil)
  if valid_402659259 != nil:
    section.add "ruleDisabled", valid_402659259
  var valid_402659260 = query.getOrDefault("topic")
  valid_402659260 = validateParameter(valid_402659260, JString,
                                      required = false, default = nil)
  if valid_402659260 != nil:
    section.add "topic", valid_402659260
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659261 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659261 = validateParameter(valid_402659261, JString,
                                      required = false, default = nil)
  if valid_402659261 != nil:
    section.add "X-Amz-Security-Token", valid_402659261
  var valid_402659262 = header.getOrDefault("X-Amz-Signature")
  valid_402659262 = validateParameter(valid_402659262, JString,
                                      required = false, default = nil)
  if valid_402659262 != nil:
    section.add "X-Amz-Signature", valid_402659262
  var valid_402659263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659263 = validateParameter(valid_402659263, JString,
                                      required = false, default = nil)
  if valid_402659263 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659263
  var valid_402659264 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659264 = validateParameter(valid_402659264, JString,
                                      required = false, default = nil)
  if valid_402659264 != nil:
    section.add "X-Amz-Algorithm", valid_402659264
  var valid_402659265 = header.getOrDefault("X-Amz-Date")
  valid_402659265 = validateParameter(valid_402659265, JString,
                                      required = false, default = nil)
  if valid_402659265 != nil:
    section.add "X-Amz-Date", valid_402659265
  var valid_402659266 = header.getOrDefault("X-Amz-Credential")
  valid_402659266 = validateParameter(valid_402659266, JString,
                                      required = false, default = nil)
  if valid_402659266 != nil:
    section.add "X-Amz-Credential", valid_402659266
  var valid_402659267 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659267 = validateParameter(valid_402659267, JString,
                                      required = false, default = nil)
  if valid_402659267 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659267
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659268: Call_ListTopicRules_402659254; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the rules for the specific topic.
                                                                                         ## 
  let valid = call_402659268.validator(path, query, header, formData, body, _)
  let scheme = call_402659268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659268.makeUrl(scheme.get, call_402659268.host, call_402659268.base,
                                   call_402659268.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659268, uri, valid, _)

proc call*(call_402659269: Call_ListTopicRules_402659254; maxResults: int = 0;
           nextToken: string = ""; ruleDisabled: bool = false;
           topic: string = ""): Recallable =
  ## listTopicRules
  ## Lists the rules for the specific topic.
  ##   maxResults: int
                                            ##             : The maximum number of results to return.
  ##   
                                                                                                     ## nextToken: string
                                                                                                     ##            
                                                                                                     ## : 
                                                                                                     ## A 
                                                                                                     ## token 
                                                                                                     ## used 
                                                                                                     ## to 
                                                                                                     ## retrieve 
                                                                                                     ## the 
                                                                                                     ## next 
                                                                                                     ## value.
  ##   
                                                                                                              ## ruleDisabled: bool
                                                                                                              ##               
                                                                                                              ## : 
                                                                                                              ## Specifies 
                                                                                                              ## whether 
                                                                                                              ## the 
                                                                                                              ## rule 
                                                                                                              ## is 
                                                                                                              ## disabled.
  ##   
                                                                                                                          ## topic: string
                                                                                                                          ##        
                                                                                                                          ## : 
                                                                                                                          ## The 
                                                                                                                          ## topic.
  var query_402659270 = newJObject()
  add(query_402659270, "maxResults", newJInt(maxResults))
  add(query_402659270, "nextToken", newJString(nextToken))
  add(query_402659270, "ruleDisabled", newJBool(ruleDisabled))
  add(query_402659270, "topic", newJString(topic))
  result = call_402659269.call(nil, query_402659270, nil, nil, nil)

var listTopicRules* = Call_ListTopicRules_402659254(name: "listTopicRules",
    meth: HttpMethod.HttpGet, host: "iot.amazonaws.com", route: "/rules",
    validator: validate_ListTopicRules_402659255, base: "/",
    makeUrl: url_ListTopicRules_402659256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_SetV2LoggingLevel_402659287 = ref object of OpenApiRestCall_402656044
proc url_SetV2LoggingLevel_402659289(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SetV2LoggingLevel_402659288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets the logging level.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659290 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659290 = validateParameter(valid_402659290, JString,
                                      required = false, default = nil)
  if valid_402659290 != nil:
    section.add "X-Amz-Security-Token", valid_402659290
  var valid_402659291 = header.getOrDefault("X-Amz-Signature")
  valid_402659291 = validateParameter(valid_402659291, JString,
                                      required = false, default = nil)
  if valid_402659291 != nil:
    section.add "X-Amz-Signature", valid_402659291
  var valid_402659292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659292 = validateParameter(valid_402659292, JString,
                                      required = false, default = nil)
  if valid_402659292 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659292
  var valid_402659293 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659293 = validateParameter(valid_402659293, JString,
                                      required = false, default = nil)
  if valid_402659293 != nil:
    section.add "X-Amz-Algorithm", valid_402659293
  var valid_402659294 = header.getOrDefault("X-Amz-Date")
  valid_402659294 = validateParameter(valid_402659294, JString,
                                      required = false, default = nil)
  if valid_402659294 != nil:
    section.add "X-Amz-Date", valid_402659294
  var valid_402659295 = header.getOrDefault("X-Amz-Credential")
  valid_402659295 = validateParameter(valid_402659295, JString,
                                      required = false, default = nil)
  if valid_402659295 != nil:
    section.add "X-Amz-Credential", valid_402659295
  var valid_402659296 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659296 = validateParameter(valid_402659296, JString,
                                      required = false, default = nil)
  if valid_402659296 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659296
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659298: Call_SetV2LoggingLevel_402659287;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the logging level.
                                                                                         ## 
  let valid = call_402659298.validator(path, query, header, formData, body, _)
  let scheme = call_402659298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659298.makeUrl(scheme.get, call_402659298.host, call_402659298.base,
                                   call_402659298.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659298, uri, valid, _)

proc call*(call_402659299: Call_SetV2LoggingLevel_402659287; body: JsonNode): Recallable =
  ## setV2LoggingLevel
  ## Sets the logging level.
  ##   body: JObject (required)
  var body_402659300 = newJObject()
  if body != nil:
    body_402659300 = body
  result = call_402659299.call(nil, nil, nil, nil, body_402659300)

var setV2LoggingLevel* = Call_SetV2LoggingLevel_402659287(
    name: "setV2LoggingLevel", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/v2LoggingLevel",
    validator: validate_SetV2LoggingLevel_402659288, base: "/",
    makeUrl: url_SetV2LoggingLevel_402659289,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListV2LoggingLevels_402659271 = ref object of OpenApiRestCall_402656044
proc url_ListV2LoggingLevels_402659273(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListV2LoggingLevels_402659272(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists logging levels.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   targetType: JString
                                  ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   
                                                                                                                                                ## maxResults: JInt
                                                                                                                                                ##             
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## maximum 
                                                                                                                                                ## number 
                                                                                                                                                ## of 
                                                                                                                                                ## results 
                                                                                                                                                ## to 
                                                                                                                                                ## return 
                                                                                                                                                ## at 
                                                                                                                                                ## one 
                                                                                                                                                ## time.
  ##   
                                                                                                                                                        ## nextToken: JString
                                                                                                                                                        ##            
                                                                                                                                                        ## : 
                                                                                                                                                        ## The 
                                                                                                                                                        ## token 
                                                                                                                                                        ## used 
                                                                                                                                                        ## to 
                                                                                                                                                        ## get 
                                                                                                                                                        ## the 
                                                                                                                                                        ## next 
                                                                                                                                                        ## set 
                                                                                                                                                        ## of 
                                                                                                                                                        ## results, 
                                                                                                                                                        ## or 
                                                                                                                                                        ## <b>null</b> 
                                                                                                                                                        ## if 
                                                                                                                                                        ## there 
                                                                                                                                                        ## are 
                                                                                                                                                        ## no 
                                                                                                                                                        ## additional 
                                                                                                                                                        ## results.
  section = newJObject()
  var valid_402659274 = query.getOrDefault("targetType")
  valid_402659274 = validateParameter(valid_402659274, JString,
                                      required = false,
                                      default = newJString("DEFAULT"))
  if valid_402659274 != nil:
    section.add "targetType", valid_402659274
  var valid_402659275 = query.getOrDefault("maxResults")
  valid_402659275 = validateParameter(valid_402659275, JInt, required = false,
                                      default = nil)
  if valid_402659275 != nil:
    section.add "maxResults", valid_402659275
  var valid_402659276 = query.getOrDefault("nextToken")
  valid_402659276 = validateParameter(valid_402659276, JString,
                                      required = false, default = nil)
  if valid_402659276 != nil:
    section.add "nextToken", valid_402659276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659277 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659277 = validateParameter(valid_402659277, JString,
                                      required = false, default = nil)
  if valid_402659277 != nil:
    section.add "X-Amz-Security-Token", valid_402659277
  var valid_402659278 = header.getOrDefault("X-Amz-Signature")
  valid_402659278 = validateParameter(valid_402659278, JString,
                                      required = false, default = nil)
  if valid_402659278 != nil:
    section.add "X-Amz-Signature", valid_402659278
  var valid_402659279 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659279 = validateParameter(valid_402659279, JString,
                                      required = false, default = nil)
  if valid_402659279 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659279
  var valid_402659280 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659280 = validateParameter(valid_402659280, JString,
                                      required = false, default = nil)
  if valid_402659280 != nil:
    section.add "X-Amz-Algorithm", valid_402659280
  var valid_402659281 = header.getOrDefault("X-Amz-Date")
  valid_402659281 = validateParameter(valid_402659281, JString,
                                      required = false, default = nil)
  if valid_402659281 != nil:
    section.add "X-Amz-Date", valid_402659281
  var valid_402659282 = header.getOrDefault("X-Amz-Credential")
  valid_402659282 = validateParameter(valid_402659282, JString,
                                      required = false, default = nil)
  if valid_402659282 != nil:
    section.add "X-Amz-Credential", valid_402659282
  var valid_402659283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659283 = validateParameter(valid_402659283, JString,
                                      required = false, default = nil)
  if valid_402659283 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659283
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659284: Call_ListV2LoggingLevels_402659271;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists logging levels.
                                                                                         ## 
  let valid = call_402659284.validator(path, query, header, formData, body, _)
  let scheme = call_402659284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659284.makeUrl(scheme.get, call_402659284.host, call_402659284.base,
                                   call_402659284.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659284, uri, valid, _)

proc call*(call_402659285: Call_ListV2LoggingLevels_402659271;
           targetType: string = "DEFAULT"; maxResults: int = 0;
           nextToken: string = ""): Recallable =
  ## listV2LoggingLevels
  ## Lists logging levels.
  ##   targetType: string
                          ##             : The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
  ##   
                                                                                                                                        ## maxResults: int
                                                                                                                                        ##             
                                                                                                                                        ## : 
                                                                                                                                        ## The 
                                                                                                                                        ## maximum 
                                                                                                                                        ## number 
                                                                                                                                        ## of 
                                                                                                                                        ## results 
                                                                                                                                        ## to 
                                                                                                                                        ## return 
                                                                                                                                        ## at 
                                                                                                                                        ## one 
                                                                                                                                        ## time.
  ##   
                                                                                                                                                ## nextToken: string
                                                                                                                                                ##            
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## token 
                                                                                                                                                ## used 
                                                                                                                                                ## to 
                                                                                                                                                ## get 
                                                                                                                                                ## the 
                                                                                                                                                ## next 
                                                                                                                                                ## set 
                                                                                                                                                ## of 
                                                                                                                                                ## results, 
                                                                                                                                                ## or 
                                                                                                                                                ## <b>null</b> 
                                                                                                                                                ## if 
                                                                                                                                                ## there 
                                                                                                                                                ## are 
                                                                                                                                                ## no 
                                                                                                                                                ## additional 
                                                                                                                                                ## results.
  var query_402659286 = newJObject()
  add(query_402659286, "targetType", newJString(targetType))
  add(query_402659286, "maxResults", newJInt(maxResults))
  add(query_402659286, "nextToken", newJString(nextToken))
  result = call_402659285.call(nil, query_402659286, nil, nil, nil)

var listV2LoggingLevels* = Call_ListV2LoggingLevels_402659271(
    name: "listV2LoggingLevels", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/v2LoggingLevel",
    validator: validate_ListV2LoggingLevels_402659272, base: "/",
    makeUrl: url_ListV2LoggingLevels_402659273,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListViolationEvents_402659301 = ref object of OpenApiRestCall_402656044
proc url_ListViolationEvents_402659303(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListViolationEvents_402659302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   maxResults: JInt
                                  ##             : The maximum number of results to return at one time.
  ##   
                                                                                                       ## nextToken: JString
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## The 
                                                                                                       ## token 
                                                                                                       ## for 
                                                                                                       ## the 
                                                                                                       ## next 
                                                                                                       ## set 
                                                                                                       ## of 
                                                                                                       ## results.
  ##   
                                                                                                                  ## thingName: JString
                                                                                                                  ##            
                                                                                                                  ## : 
                                                                                                                  ## A 
                                                                                                                  ## filter 
                                                                                                                  ## to 
                                                                                                                  ## limit 
                                                                                                                  ## results 
                                                                                                                  ## to 
                                                                                                                  ## those 
                                                                                                                  ## alerts 
                                                                                                                  ## caused 
                                                                                                                  ## by 
                                                                                                                  ## the 
                                                                                                                  ## specified 
                                                                                                                  ## thing.
  ##   
                                                                                                                           ## endTime: JString (required)
                                                                                                                           ##          
                                                                                                                           ## : 
                                                                                                                           ## The 
                                                                                                                           ## end 
                                                                                                                           ## time 
                                                                                                                           ## for 
                                                                                                                           ## the 
                                                                                                                           ## alerts 
                                                                                                                           ## to 
                                                                                                                           ## be 
                                                                                                                           ## listed.
  ##   
                                                                                                                                     ## startTime: JString (required)
                                                                                                                                     ##            
                                                                                                                                     ## : 
                                                                                                                                     ## The 
                                                                                                                                     ## start 
                                                                                                                                     ## time 
                                                                                                                                     ## for 
                                                                                                                                     ## the 
                                                                                                                                     ## alerts 
                                                                                                                                     ## to 
                                                                                                                                     ## be 
                                                                                                                                     ## listed.
  ##   
                                                                                                                                               ## securityProfileName: JString
                                                                                                                                               ##                      
                                                                                                                                               ## : 
                                                                                                                                               ## A 
                                                                                                                                               ## filter 
                                                                                                                                               ## to 
                                                                                                                                               ## limit 
                                                                                                                                               ## results 
                                                                                                                                               ## to 
                                                                                                                                               ## those 
                                                                                                                                               ## alerts 
                                                                                                                                               ## generated 
                                                                                                                                               ## by 
                                                                                                                                               ## the 
                                                                                                                                               ## specified 
                                                                                                                                               ## security 
                                                                                                                                               ## profile.
  section = newJObject()
  var valid_402659304 = query.getOrDefault("maxResults")
  valid_402659304 = validateParameter(valid_402659304, JInt, required = false,
                                      default = nil)
  if valid_402659304 != nil:
    section.add "maxResults", valid_402659304
  var valid_402659305 = query.getOrDefault("nextToken")
  valid_402659305 = validateParameter(valid_402659305, JString,
                                      required = false, default = nil)
  if valid_402659305 != nil:
    section.add "nextToken", valid_402659305
  var valid_402659306 = query.getOrDefault("thingName")
  valid_402659306 = validateParameter(valid_402659306, JString,
                                      required = false, default = nil)
  if valid_402659306 != nil:
    section.add "thingName", valid_402659306
  assert query != nil,
         "query argument is necessary due to required `endTime` field"
  var valid_402659307 = query.getOrDefault("endTime")
  valid_402659307 = validateParameter(valid_402659307, JString, required = true,
                                      default = nil)
  if valid_402659307 != nil:
    section.add "endTime", valid_402659307
  var valid_402659308 = query.getOrDefault("startTime")
  valid_402659308 = validateParameter(valid_402659308, JString, required = true,
                                      default = nil)
  if valid_402659308 != nil:
    section.add "startTime", valid_402659308
  var valid_402659309 = query.getOrDefault("securityProfileName")
  valid_402659309 = validateParameter(valid_402659309, JString,
                                      required = false, default = nil)
  if valid_402659309 != nil:
    section.add "securityProfileName", valid_402659309
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659310 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659310 = validateParameter(valid_402659310, JString,
                                      required = false, default = nil)
  if valid_402659310 != nil:
    section.add "X-Amz-Security-Token", valid_402659310
  var valid_402659311 = header.getOrDefault("X-Amz-Signature")
  valid_402659311 = validateParameter(valid_402659311, JString,
                                      required = false, default = nil)
  if valid_402659311 != nil:
    section.add "X-Amz-Signature", valid_402659311
  var valid_402659312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659312 = validateParameter(valid_402659312, JString,
                                      required = false, default = nil)
  if valid_402659312 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659312
  var valid_402659313 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659313 = validateParameter(valid_402659313, JString,
                                      required = false, default = nil)
  if valid_402659313 != nil:
    section.add "X-Amz-Algorithm", valid_402659313
  var valid_402659314 = header.getOrDefault("X-Amz-Date")
  valid_402659314 = validateParameter(valid_402659314, JString,
                                      required = false, default = nil)
  if valid_402659314 != nil:
    section.add "X-Amz-Date", valid_402659314
  var valid_402659315 = header.getOrDefault("X-Amz-Credential")
  valid_402659315 = validateParameter(valid_402659315, JString,
                                      required = false, default = nil)
  if valid_402659315 != nil:
    section.add "X-Amz-Credential", valid_402659315
  var valid_402659316 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659316 = validateParameter(valid_402659316, JString,
                                      required = false, default = nil)
  if valid_402659316 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659316
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659317: Call_ListViolationEvents_402659301;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
                                                                                         ## 
  let valid = call_402659317.validator(path, query, header, formData, body, _)
  let scheme = call_402659317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659317.makeUrl(scheme.get, call_402659317.host, call_402659317.base,
                                   call_402659317.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659317, uri, valid, _)

proc call*(call_402659318: Call_ListViolationEvents_402659301; endTime: string;
           startTime: string; maxResults: int = 0; nextToken: string = "";
           thingName: string = ""; securityProfileName: string = ""): Recallable =
  ## listViolationEvents
  ## Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
  ##   
                                                                                                                                                                                                                                   ## maxResults: int
                                                                                                                                                                                                                                   ##             
                                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                                                   ## maximum 
                                                                                                                                                                                                                                   ## number 
                                                                                                                                                                                                                                   ## of 
                                                                                                                                                                                                                                   ## results 
                                                                                                                                                                                                                                   ## to 
                                                                                                                                                                                                                                   ## return 
                                                                                                                                                                                                                                   ## at 
                                                                                                                                                                                                                                   ## one 
                                                                                                                                                                                                                                   ## time.
  ##   
                                                                                                                                                                                                                                           ## nextToken: string
                                                                                                                                                                                                                                           ##            
                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                                           ## token 
                                                                                                                                                                                                                                           ## for 
                                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                                           ## next 
                                                                                                                                                                                                                                           ## set 
                                                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                                                           ## results.
  ##   
                                                                                                                                                                                                                                                      ## thingName: string
                                                                                                                                                                                                                                                      ##            
                                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                                      ## A 
                                                                                                                                                                                                                                                      ## filter 
                                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                                      ## limit 
                                                                                                                                                                                                                                                      ## results 
                                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                                      ## those 
                                                                                                                                                                                                                                                      ## alerts 
                                                                                                                                                                                                                                                      ## caused 
                                                                                                                                                                                                                                                      ## by 
                                                                                                                                                                                                                                                      ## the 
                                                                                                                                                                                                                                                      ## specified 
                                                                                                                                                                                                                                                      ## thing.
  ##   
                                                                                                                                                                                                                                                               ## endTime: string (required)
                                                                                                                                                                                                                                                               ##          
                                                                                                                                                                                                                                                               ## : 
                                                                                                                                                                                                                                                               ## The 
                                                                                                                                                                                                                                                               ## end 
                                                                                                                                                                                                                                                               ## time 
                                                                                                                                                                                                                                                               ## for 
                                                                                                                                                                                                                                                               ## the 
                                                                                                                                                                                                                                                               ## alerts 
                                                                                                                                                                                                                                                               ## to 
                                                                                                                                                                                                                                                               ## be 
                                                                                                                                                                                                                                                               ## listed.
  ##   
                                                                                                                                                                                                                                                                         ## startTime: string (required)
                                                                                                                                                                                                                                                                         ##            
                                                                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                                                                         ## start 
                                                                                                                                                                                                                                                                         ## time 
                                                                                                                                                                                                                                                                         ## for 
                                                                                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                                                                                         ## alerts 
                                                                                                                                                                                                                                                                         ## to 
                                                                                                                                                                                                                                                                         ## be 
                                                                                                                                                                                                                                                                         ## listed.
  ##   
                                                                                                                                                                                                                                                                                   ## securityProfileName: string
                                                                                                                                                                                                                                                                                   ##                      
                                                                                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                                                                                   ## A 
                                                                                                                                                                                                                                                                                   ## filter 
                                                                                                                                                                                                                                                                                   ## to 
                                                                                                                                                                                                                                                                                   ## limit 
                                                                                                                                                                                                                                                                                   ## results 
                                                                                                                                                                                                                                                                                   ## to 
                                                                                                                                                                                                                                                                                   ## those 
                                                                                                                                                                                                                                                                                   ## alerts 
                                                                                                                                                                                                                                                                                   ## generated 
                                                                                                                                                                                                                                                                                   ## by 
                                                                                                                                                                                                                                                                                   ## the 
                                                                                                                                                                                                                                                                                   ## specified 
                                                                                                                                                                                                                                                                                   ## security 
                                                                                                                                                                                                                                                                                   ## profile.
  var query_402659319 = newJObject()
  add(query_402659319, "maxResults", newJInt(maxResults))
  add(query_402659319, "nextToken", newJString(nextToken))
  add(query_402659319, "thingName", newJString(thingName))
  add(query_402659319, "endTime", newJString(endTime))
  add(query_402659319, "startTime", newJString(startTime))
  add(query_402659319, "securityProfileName", newJString(securityProfileName))
  result = call_402659318.call(nil, query_402659319, nil, nil, nil)

var listViolationEvents* = Call_ListViolationEvents_402659301(
    name: "listViolationEvents", meth: HttpMethod.HttpGet,
    host: "iot.amazonaws.com", route: "/violation-events#startTime&endTime",
    validator: validate_ListViolationEvents_402659302, base: "/",
    makeUrl: url_ListViolationEvents_402659303,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RegisterCACertificate_402659320 = ref object of OpenApiRestCall_402656044
proc url_RegisterCACertificate_402659322(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RegisterCACertificate_402659321(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
                                  ##              : A boolean value that specifies if the CA certificate is set to active.
  ##   
                                                                                                                          ## allowAutoRegistration: JBool
                                                                                                                          ##                        
                                                                                                                          ## : 
                                                                                                                          ## Allows 
                                                                                                                          ## this 
                                                                                                                          ## CA 
                                                                                                                          ## certificate 
                                                                                                                          ## to 
                                                                                                                          ## be 
                                                                                                                          ## used 
                                                                                                                          ## for 
                                                                                                                          ## auto 
                                                                                                                          ## registration 
                                                                                                                          ## of 
                                                                                                                          ## device 
                                                                                                                          ## certificates.
  section = newJObject()
  var valid_402659323 = query.getOrDefault("setAsActive")
  valid_402659323 = validateParameter(valid_402659323, JBool, required = false,
                                      default = nil)
  if valid_402659323 != nil:
    section.add "setAsActive", valid_402659323
  var valid_402659324 = query.getOrDefault("allowAutoRegistration")
  valid_402659324 = validateParameter(valid_402659324, JBool, required = false,
                                      default = nil)
  if valid_402659324 != nil:
    section.add "allowAutoRegistration", valid_402659324
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659325 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659325 = validateParameter(valid_402659325, JString,
                                      required = false, default = nil)
  if valid_402659325 != nil:
    section.add "X-Amz-Security-Token", valid_402659325
  var valid_402659326 = header.getOrDefault("X-Amz-Signature")
  valid_402659326 = validateParameter(valid_402659326, JString,
                                      required = false, default = nil)
  if valid_402659326 != nil:
    section.add "X-Amz-Signature", valid_402659326
  var valid_402659327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659327 = validateParameter(valid_402659327, JString,
                                      required = false, default = nil)
  if valid_402659327 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659327
  var valid_402659328 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659328 = validateParameter(valid_402659328, JString,
                                      required = false, default = nil)
  if valid_402659328 != nil:
    section.add "X-Amz-Algorithm", valid_402659328
  var valid_402659329 = header.getOrDefault("X-Amz-Date")
  valid_402659329 = validateParameter(valid_402659329, JString,
                                      required = false, default = nil)
  if valid_402659329 != nil:
    section.add "X-Amz-Date", valid_402659329
  var valid_402659330 = header.getOrDefault("X-Amz-Credential")
  valid_402659330 = validateParameter(valid_402659330, JString,
                                      required = false, default = nil)
  if valid_402659330 != nil:
    section.add "X-Amz-Credential", valid_402659330
  var valid_402659331 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659331 = validateParameter(valid_402659331, JString,
                                      required = false, default = nil)
  if valid_402659331 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659331
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659333: Call_RegisterCACertificate_402659320;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
                                                                                         ## 
  let valid = call_402659333.validator(path, query, header, formData, body, _)
  let scheme = call_402659333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659333.makeUrl(scheme.get, call_402659333.host, call_402659333.base,
                                   call_402659333.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659333, uri, valid, _)

proc call*(call_402659334: Call_RegisterCACertificate_402659320; body: JsonNode;
           setAsActive: bool = false; allowAutoRegistration: bool = false): Recallable =
  ## registerCACertificate
  ## Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
  ##   
setAsActive: bool



boolean 
value 
that 
specifies 
if 
the 

certificate 
is 
set 
to 
active.
  ##   
allowAutoRegistration: bool


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ## Allows 
this 

certificate 
to 
be 
used 
for 
auto 
registration 
of 
device 
certificates.
  ##   
body: JObject (required)
  var query_402659335 = newJObject()
  var body_402659336 = newJObject()
  add(query_402659335, "setAsActive", newJBool(setAsActive))
  add(query_402659335, "allowAutoRegistration", newJBool(allowAutoRegistration))
  if body != nil:
    body_402659336 = body
  result = call_402659334.call(nil, query_402659335, nil, nil, body_402659336)

var registerCACertificate* = Call_RegisterCACertificate_402659320(
    name: "registerCACertificate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/cacertificate",
    validator: validate_RegisterCACertificate_402659321, base: "/",
    makeUrl: url_RegisterCACertificate_402659322,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RegisterCertificate_402659337 = ref object of OpenApiRestCall_402656044
proc url_RegisterCertificate_402659339(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RegisterCertificate_402659338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   setAsActive: JBool
                                  ##              : A boolean value that specifies if the certificate is set to active.
  section = newJObject()
  var valid_402659340 = query.getOrDefault("setAsActive")
  valid_402659340 = validateParameter(valid_402659340, JBool, required = false,
                                      default = nil)
  if valid_402659340 != nil:
    section.add "setAsActive", valid_402659340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659341 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659341 = validateParameter(valid_402659341, JString,
                                      required = false, default = nil)
  if valid_402659341 != nil:
    section.add "X-Amz-Security-Token", valid_402659341
  var valid_402659342 = header.getOrDefault("X-Amz-Signature")
  valid_402659342 = validateParameter(valid_402659342, JString,
                                      required = false, default = nil)
  if valid_402659342 != nil:
    section.add "X-Amz-Signature", valid_402659342
  var valid_402659343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659343 = validateParameter(valid_402659343, JString,
                                      required = false, default = nil)
  if valid_402659343 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659343
  var valid_402659344 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659344 = validateParameter(valid_402659344, JString,
                                      required = false, default = nil)
  if valid_402659344 != nil:
    section.add "X-Amz-Algorithm", valid_402659344
  var valid_402659345 = header.getOrDefault("X-Amz-Date")
  valid_402659345 = validateParameter(valid_402659345, JString,
                                      required = false, default = nil)
  if valid_402659345 != nil:
    section.add "X-Amz-Date", valid_402659345
  var valid_402659346 = header.getOrDefault("X-Amz-Credential")
  valid_402659346 = validateParameter(valid_402659346, JString,
                                      required = false, default = nil)
  if valid_402659346 != nil:
    section.add "X-Amz-Credential", valid_402659346
  var valid_402659347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659347 = validateParameter(valid_402659347, JString,
                                      required = false, default = nil)
  if valid_402659347 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659349: Call_RegisterCertificate_402659337;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
                                                                                         ## 
  let valid = call_402659349.validator(path, query, header, formData, body, _)
  let scheme = call_402659349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659349.makeUrl(scheme.get, call_402659349.host, call_402659349.base,
                                   call_402659349.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659349, uri, valid, _)

proc call*(call_402659350: Call_RegisterCertificate_402659337; body: JsonNode;
           setAsActive: bool = false): Recallable =
  ## registerCertificate
  ## Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
  ##   
                                                                                                                                                                                                                              ## setAsActive: bool
                                                                                                                                                                                                                              ##              
                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                              ## A 
                                                                                                                                                                                                                              ## boolean 
                                                                                                                                                                                                                              ## value 
                                                                                                                                                                                                                              ## that 
                                                                                                                                                                                                                              ## specifies 
                                                                                                                                                                                                                              ## if 
                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                              ## certificate 
                                                                                                                                                                                                                              ## is 
                                                                                                                                                                                                                              ## set 
                                                                                                                                                                                                                              ## to 
                                                                                                                                                                                                                              ## active.
  ##   
                                                                                                                                                                                                                                        ## body: JObject (required)
  var query_402659351 = newJObject()
  var body_402659352 = newJObject()
  add(query_402659351, "setAsActive", newJBool(setAsActive))
  if body != nil:
    body_402659352 = body
  result = call_402659350.call(nil, query_402659351, nil, nil, body_402659352)

var registerCertificate* = Call_RegisterCertificate_402659337(
    name: "registerCertificate", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/certificate/register",
    validator: validate_RegisterCertificate_402659338, base: "/",
    makeUrl: url_RegisterCertificate_402659339,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RejectCertificateTransfer_402659353 = ref object of OpenApiRestCall_402656044
proc url_RejectCertificateTransfer_402659355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/reject-certificate-transfer/"),
                 (kind: VariableSegment, value: "certificateId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_RejectCertificateTransfer_402659354(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
                                 ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `certificateId` field"
  var valid_402659356 = path.getOrDefault("certificateId")
  valid_402659356 = validateParameter(valid_402659356, JString, required = true,
                                      default = nil)
  if valid_402659356 != nil:
    section.add "certificateId", valid_402659356
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659357 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659357 = validateParameter(valid_402659357, JString,
                                      required = false, default = nil)
  if valid_402659357 != nil:
    section.add "X-Amz-Security-Token", valid_402659357
  var valid_402659358 = header.getOrDefault("X-Amz-Signature")
  valid_402659358 = validateParameter(valid_402659358, JString,
                                      required = false, default = nil)
  if valid_402659358 != nil:
    section.add "X-Amz-Signature", valid_402659358
  var valid_402659359 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659359 = validateParameter(valid_402659359, JString,
                                      required = false, default = nil)
  if valid_402659359 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659359
  var valid_402659360 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659360 = validateParameter(valid_402659360, JString,
                                      required = false, default = nil)
  if valid_402659360 != nil:
    section.add "X-Amz-Algorithm", valid_402659360
  var valid_402659361 = header.getOrDefault("X-Amz-Date")
  valid_402659361 = validateParameter(valid_402659361, JString,
                                      required = false, default = nil)
  if valid_402659361 != nil:
    section.add "X-Amz-Date", valid_402659361
  var valid_402659362 = header.getOrDefault("X-Amz-Credential")
  valid_402659362 = validateParameter(valid_402659362, JString,
                                      required = false, default = nil)
  if valid_402659362 != nil:
    section.add "X-Amz-Credential", valid_402659362
  var valid_402659363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659363 = validateParameter(valid_402659363, JString,
                                      required = false, default = nil)
  if valid_402659363 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659363
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659365: Call_RejectCertificateTransfer_402659353;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>
                                                                                         ## 
  let valid = call_402659365.validator(path, query, header, formData, body, _)
  let scheme = call_402659365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659365.makeUrl(scheme.get, call_402659365.host, call_402659365.base,
                                   call_402659365.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659365, uri, valid, _)

proc call*(call_402659366: Call_RejectCertificateTransfer_402659353;
           certificateId: string; body: JsonNode): Recallable =
  ## rejectCertificateTransfer
  ## <p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## certificateId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ##                
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## ID 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## certificate. 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## (The 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## last 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## part 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## certificate 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## ARN 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## contains 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## certificate 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## ID.)
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ## body: JObject (required)
  var path_402659367 = newJObject()
  var body_402659368 = newJObject()
  add(path_402659367, "certificateId", newJString(certificateId))
  if body != nil:
    body_402659368 = body
  result = call_402659366.call(path_402659367, nil, nil, nil, body_402659368)

var rejectCertificateTransfer* = Call_RejectCertificateTransfer_402659353(
    name: "rejectCertificateTransfer", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/reject-certificate-transfer/{certificateId}",
    validator: validate_RejectCertificateTransfer_402659354, base: "/",
    makeUrl: url_RejectCertificateTransfer_402659355,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveThingFromBillingGroup_402659369 = ref object of OpenApiRestCall_402656044
proc url_RemoveThingFromBillingGroup_402659371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RemoveThingFromBillingGroup_402659370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Removes the given thing from the billing group.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659372 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659372 = validateParameter(valid_402659372, JString,
                                      required = false, default = nil)
  if valid_402659372 != nil:
    section.add "X-Amz-Security-Token", valid_402659372
  var valid_402659373 = header.getOrDefault("X-Amz-Signature")
  valid_402659373 = validateParameter(valid_402659373, JString,
                                      required = false, default = nil)
  if valid_402659373 != nil:
    section.add "X-Amz-Signature", valid_402659373
  var valid_402659374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659374 = validateParameter(valid_402659374, JString,
                                      required = false, default = nil)
  if valid_402659374 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659374
  var valid_402659375 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659375 = validateParameter(valid_402659375, JString,
                                      required = false, default = nil)
  if valid_402659375 != nil:
    section.add "X-Amz-Algorithm", valid_402659375
  var valid_402659376 = header.getOrDefault("X-Amz-Date")
  valid_402659376 = validateParameter(valid_402659376, JString,
                                      required = false, default = nil)
  if valid_402659376 != nil:
    section.add "X-Amz-Date", valid_402659376
  var valid_402659377 = header.getOrDefault("X-Amz-Credential")
  valid_402659377 = validateParameter(valid_402659377, JString,
                                      required = false, default = nil)
  if valid_402659377 != nil:
    section.add "X-Amz-Credential", valid_402659377
  var valid_402659378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659378 = validateParameter(valid_402659378, JString,
                                      required = false, default = nil)
  if valid_402659378 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659378
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659380: Call_RemoveThingFromBillingGroup_402659369;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the given thing from the billing group.
                                                                                         ## 
  let valid = call_402659380.validator(path, query, header, formData, body, _)
  let scheme = call_402659380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659380.makeUrl(scheme.get, call_402659380.host, call_402659380.base,
                                   call_402659380.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659380, uri, valid, _)

proc call*(call_402659381: Call_RemoveThingFromBillingGroup_402659369;
           body: JsonNode): Recallable =
  ## removeThingFromBillingGroup
  ## Removes the given thing from the billing group.
  ##   body: JObject (required)
  var body_402659382 = newJObject()
  if body != nil:
    body_402659382 = body
  result = call_402659381.call(nil, nil, nil, nil, body_402659382)

var removeThingFromBillingGroup* = Call_RemoveThingFromBillingGroup_402659369(
    name: "removeThingFromBillingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/billing-groups/removeThingFromBillingGroup",
    validator: validate_RemoveThingFromBillingGroup_402659370, base: "/",
    makeUrl: url_RemoveThingFromBillingGroup_402659371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RemoveThingFromThingGroup_402659383 = ref object of OpenApiRestCall_402656044
proc url_RemoveThingFromThingGroup_402659385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_RemoveThingFromThingGroup_402659384(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Remove the specified thing from the specified group.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659386 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659386 = validateParameter(valid_402659386, JString,
                                      required = false, default = nil)
  if valid_402659386 != nil:
    section.add "X-Amz-Security-Token", valid_402659386
  var valid_402659387 = header.getOrDefault("X-Amz-Signature")
  valid_402659387 = validateParameter(valid_402659387, JString,
                                      required = false, default = nil)
  if valid_402659387 != nil:
    section.add "X-Amz-Signature", valid_402659387
  var valid_402659388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659388 = validateParameter(valid_402659388, JString,
                                      required = false, default = nil)
  if valid_402659388 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659388
  var valid_402659389 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659389 = validateParameter(valid_402659389, JString,
                                      required = false, default = nil)
  if valid_402659389 != nil:
    section.add "X-Amz-Algorithm", valid_402659389
  var valid_402659390 = header.getOrDefault("X-Amz-Date")
  valid_402659390 = validateParameter(valid_402659390, JString,
                                      required = false, default = nil)
  if valid_402659390 != nil:
    section.add "X-Amz-Date", valid_402659390
  var valid_402659391 = header.getOrDefault("X-Amz-Credential")
  valid_402659391 = validateParameter(valid_402659391, JString,
                                      required = false, default = nil)
  if valid_402659391 != nil:
    section.add "X-Amz-Credential", valid_402659391
  var valid_402659392 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659392 = validateParameter(valid_402659392, JString,
                                      required = false, default = nil)
  if valid_402659392 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659392
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659394: Call_RemoveThingFromThingGroup_402659383;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Remove the specified thing from the specified group.
                                                                                         ## 
  let valid = call_402659394.validator(path, query, header, formData, body, _)
  let scheme = call_402659394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659394.makeUrl(scheme.get, call_402659394.host, call_402659394.base,
                                   call_402659394.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659394, uri, valid, _)

proc call*(call_402659395: Call_RemoveThingFromThingGroup_402659383;
           body: JsonNode): Recallable =
  ## removeThingFromThingGroup
  ## Remove the specified thing from the specified group.
  ##   body: JObject (required)
  var body_402659396 = newJObject()
  if body != nil:
    body_402659396 = body
  result = call_402659395.call(nil, nil, nil, nil, body_402659396)

var removeThingFromThingGroup* = Call_RemoveThingFromThingGroup_402659383(
    name: "removeThingFromThingGroup", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/thing-groups/removeThingFromThingGroup",
    validator: validate_RemoveThingFromThingGroup_402659384, base: "/",
    makeUrl: url_RemoveThingFromThingGroup_402659385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SearchIndex_402659397 = ref object of OpenApiRestCall_402656044
proc url_SearchIndex_402659399(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SearchIndex_402659398(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## The query search index.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659400 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659400 = validateParameter(valid_402659400, JString,
                                      required = false, default = nil)
  if valid_402659400 != nil:
    section.add "X-Amz-Security-Token", valid_402659400
  var valid_402659401 = header.getOrDefault("X-Amz-Signature")
  valid_402659401 = validateParameter(valid_402659401, JString,
                                      required = false, default = nil)
  if valid_402659401 != nil:
    section.add "X-Amz-Signature", valid_402659401
  var valid_402659402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659402 = validateParameter(valid_402659402, JString,
                                      required = false, default = nil)
  if valid_402659402 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659402
  var valid_402659403 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659403 = validateParameter(valid_402659403, JString,
                                      required = false, default = nil)
  if valid_402659403 != nil:
    section.add "X-Amz-Algorithm", valid_402659403
  var valid_402659404 = header.getOrDefault("X-Amz-Date")
  valid_402659404 = validateParameter(valid_402659404, JString,
                                      required = false, default = nil)
  if valid_402659404 != nil:
    section.add "X-Amz-Date", valid_402659404
  var valid_402659405 = header.getOrDefault("X-Amz-Credential")
  valid_402659405 = validateParameter(valid_402659405, JString,
                                      required = false, default = nil)
  if valid_402659405 != nil:
    section.add "X-Amz-Credential", valid_402659405
  var valid_402659406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659406 = validateParameter(valid_402659406, JString,
                                      required = false, default = nil)
  if valid_402659406 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659406
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659408: Call_SearchIndex_402659397; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## The query search index.
                                                                                         ## 
  let valid = call_402659408.validator(path, query, header, formData, body, _)
  let scheme = call_402659408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659408.makeUrl(scheme.get, call_402659408.host, call_402659408.base,
                                   call_402659408.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659408, uri, valid, _)

proc call*(call_402659409: Call_SearchIndex_402659397; body: JsonNode): Recallable =
  ## searchIndex
  ## The query search index.
  ##   body: JObject (required)
  var body_402659410 = newJObject()
  if body != nil:
    body_402659410 = body
  result = call_402659409.call(nil, nil, nil, nil, body_402659410)

var searchIndex* = Call_SearchIndex_402659397(name: "searchIndex",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com",
    route: "/indices/search", validator: validate_SearchIndex_402659398,
    base: "/", makeUrl: url_SearchIndex_402659399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StartOnDemandAuditTask_402659411 = ref object of OpenApiRestCall_402656044
proc url_StartOnDemandAuditTask_402659413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_StartOnDemandAuditTask_402659412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts an on-demand Device Defender audit.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659414 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659414 = validateParameter(valid_402659414, JString,
                                      required = false, default = nil)
  if valid_402659414 != nil:
    section.add "X-Amz-Security-Token", valid_402659414
  var valid_402659415 = header.getOrDefault("X-Amz-Signature")
  valid_402659415 = validateParameter(valid_402659415, JString,
                                      required = false, default = nil)
  if valid_402659415 != nil:
    section.add "X-Amz-Signature", valid_402659415
  var valid_402659416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659416 = validateParameter(valid_402659416, JString,
                                      required = false, default = nil)
  if valid_402659416 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659416
  var valid_402659417 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659417 = validateParameter(valid_402659417, JString,
                                      required = false, default = nil)
  if valid_402659417 != nil:
    section.add "X-Amz-Algorithm", valid_402659417
  var valid_402659418 = header.getOrDefault("X-Amz-Date")
  valid_402659418 = validateParameter(valid_402659418, JString,
                                      required = false, default = nil)
  if valid_402659418 != nil:
    section.add "X-Amz-Date", valid_402659418
  var valid_402659419 = header.getOrDefault("X-Amz-Credential")
  valid_402659419 = validateParameter(valid_402659419, JString,
                                      required = false, default = nil)
  if valid_402659419 != nil:
    section.add "X-Amz-Credential", valid_402659419
  var valid_402659420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659420 = validateParameter(valid_402659420, JString,
                                      required = false, default = nil)
  if valid_402659420 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659420
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659422: Call_StartOnDemandAuditTask_402659411;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts an on-demand Device Defender audit.
                                                                                         ## 
  let valid = call_402659422.validator(path, query, header, formData, body, _)
  let scheme = call_402659422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659422.makeUrl(scheme.get, call_402659422.host, call_402659422.base,
                                   call_402659422.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659422, uri, valid, _)

proc call*(call_402659423: Call_StartOnDemandAuditTask_402659411; body: JsonNode): Recallable =
  ## startOnDemandAuditTask
  ## Starts an on-demand Device Defender audit.
  ##   body: JObject (required)
  var body_402659424 = newJObject()
  if body != nil:
    body_402659424 = body
  result = call_402659423.call(nil, nil, nil, nil, body_402659424)

var startOnDemandAuditTask* = Call_StartOnDemandAuditTask_402659411(
    name: "startOnDemandAuditTask", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/audit/tasks",
    validator: validate_StartOnDemandAuditTask_402659412, base: "/",
    makeUrl: url_StartOnDemandAuditTask_402659413,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_StopThingRegistrationTask_402659425 = ref object of OpenApiRestCall_402656044
proc url_StopThingRegistrationTask_402659427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "taskId" in path, "`taskId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/thing-registration-tasks/"),
                 (kind: VariableSegment, value: "taskId"),
                 (kind: ConstantSegment, value: "/cancel")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_StopThingRegistrationTask_402659426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Cancels a bulk thing provisioning task.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   taskId: JString (required)
                                 ##         : The bulk thing provisioning task ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `taskId` field"
  var valid_402659428 = path.getOrDefault("taskId")
  valid_402659428 = validateParameter(valid_402659428, JString, required = true,
                                      default = nil)
  if valid_402659428 != nil:
    section.add "taskId", valid_402659428
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659429 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659429 = validateParameter(valid_402659429, JString,
                                      required = false, default = nil)
  if valid_402659429 != nil:
    section.add "X-Amz-Security-Token", valid_402659429
  var valid_402659430 = header.getOrDefault("X-Amz-Signature")
  valid_402659430 = validateParameter(valid_402659430, JString,
                                      required = false, default = nil)
  if valid_402659430 != nil:
    section.add "X-Amz-Signature", valid_402659430
  var valid_402659431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659431 = validateParameter(valid_402659431, JString,
                                      required = false, default = nil)
  if valid_402659431 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659431
  var valid_402659432 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659432 = validateParameter(valid_402659432, JString,
                                      required = false, default = nil)
  if valid_402659432 != nil:
    section.add "X-Amz-Algorithm", valid_402659432
  var valid_402659433 = header.getOrDefault("X-Amz-Date")
  valid_402659433 = validateParameter(valid_402659433, JString,
                                      required = false, default = nil)
  if valid_402659433 != nil:
    section.add "X-Amz-Date", valid_402659433
  var valid_402659434 = header.getOrDefault("X-Amz-Credential")
  valid_402659434 = validateParameter(valid_402659434, JString,
                                      required = false, default = nil)
  if valid_402659434 != nil:
    section.add "X-Amz-Credential", valid_402659434
  var valid_402659435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659435 = validateParameter(valid_402659435, JString,
                                      required = false, default = nil)
  if valid_402659435 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659436: Call_StopThingRegistrationTask_402659425;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a bulk thing provisioning task.
                                                                                         ## 
  let valid = call_402659436.validator(path, query, header, formData, body, _)
  let scheme = call_402659436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659436.makeUrl(scheme.get, call_402659436.host, call_402659436.base,
                                   call_402659436.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659436, uri, valid, _)

proc call*(call_402659437: Call_StopThingRegistrationTask_402659425;
           taskId: string): Recallable =
  ## stopThingRegistrationTask
  ## Cancels a bulk thing provisioning task.
  ##   taskId: string (required)
                                            ##         : The bulk thing provisioning task ID.
  var path_402659438 = newJObject()
  add(path_402659438, "taskId", newJString(taskId))
  result = call_402659437.call(path_402659438, nil, nil, nil, nil)

var stopThingRegistrationTask* = Call_StopThingRegistrationTask_402659425(
    name: "stopThingRegistrationTask", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com",
    route: "/thing-registration-tasks/{taskId}/cancel",
    validator: validate_StopThingRegistrationTask_402659426, base: "/",
    makeUrl: url_StopThingRegistrationTask_402659427,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TagResource_402659439 = ref object of OpenApiRestCall_402656044
proc url_TagResource_402659441(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_TagResource_402659440(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659442 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659442 = validateParameter(valid_402659442, JString,
                                      required = false, default = nil)
  if valid_402659442 != nil:
    section.add "X-Amz-Security-Token", valid_402659442
  var valid_402659443 = header.getOrDefault("X-Amz-Signature")
  valid_402659443 = validateParameter(valid_402659443, JString,
                                      required = false, default = nil)
  if valid_402659443 != nil:
    section.add "X-Amz-Signature", valid_402659443
  var valid_402659444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659444 = validateParameter(valid_402659444, JString,
                                      required = false, default = nil)
  if valid_402659444 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659444
  var valid_402659445 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659445 = validateParameter(valid_402659445, JString,
                                      required = false, default = nil)
  if valid_402659445 != nil:
    section.add "X-Amz-Algorithm", valid_402659445
  var valid_402659446 = header.getOrDefault("X-Amz-Date")
  valid_402659446 = validateParameter(valid_402659446, JString,
                                      required = false, default = nil)
  if valid_402659446 != nil:
    section.add "X-Amz-Date", valid_402659446
  var valid_402659447 = header.getOrDefault("X-Amz-Credential")
  valid_402659447 = validateParameter(valid_402659447, JString,
                                      required = false, default = nil)
  if valid_402659447 != nil:
    section.add "X-Amz-Credential", valid_402659447
  var valid_402659448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659448 = validateParameter(valid_402659448, JString,
                                      required = false, default = nil)
  if valid_402659448 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659450: Call_TagResource_402659439; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
                                                                                         ## 
  let valid = call_402659450.validator(path, query, header, formData, body, _)
  let scheme = call_402659450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659450.makeUrl(scheme.get, call_402659450.host, call_402659450.base,
                                   call_402659450.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659450, uri, valid, _)

proc call*(call_402659451: Call_TagResource_402659439; body: JsonNode): Recallable =
  ## tagResource
  ## Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
  ##   
                                                                                                                  ## body: JObject (required)
  var body_402659452 = newJObject()
  if body != nil:
    body_402659452 = body
  result = call_402659451.call(nil, nil, nil, nil, body_402659452)

var tagResource* = Call_TagResource_402659439(name: "tagResource",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/tags",
    validator: validate_TagResource_402659440, base: "/",
    makeUrl: url_TagResource_402659441, schemes: {Scheme.Https, Scheme.Http})
type
  Call_TestAuthorization_402659453 = ref object of OpenApiRestCall_402656044
proc url_TestAuthorization_402659455(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_TestAuthorization_402659454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   clientId: JString
                                  ##           : The MQTT client ID.
  section = newJObject()
  var valid_402659456 = query.getOrDefault("clientId")
  valid_402659456 = validateParameter(valid_402659456, JString,
                                      required = false, default = nil)
  if valid_402659456 != nil:
    section.add "clientId", valid_402659456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659457 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659457 = validateParameter(valid_402659457, JString,
                                      required = false, default = nil)
  if valid_402659457 != nil:
    section.add "X-Amz-Security-Token", valid_402659457
  var valid_402659458 = header.getOrDefault("X-Amz-Signature")
  valid_402659458 = validateParameter(valid_402659458, JString,
                                      required = false, default = nil)
  if valid_402659458 != nil:
    section.add "X-Amz-Signature", valid_402659458
  var valid_402659459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659459 = validateParameter(valid_402659459, JString,
                                      required = false, default = nil)
  if valid_402659459 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659459
  var valid_402659460 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659460 = validateParameter(valid_402659460, JString,
                                      required = false, default = nil)
  if valid_402659460 != nil:
    section.add "X-Amz-Algorithm", valid_402659460
  var valid_402659461 = header.getOrDefault("X-Amz-Date")
  valid_402659461 = validateParameter(valid_402659461, JString,
                                      required = false, default = nil)
  if valid_402659461 != nil:
    section.add "X-Amz-Date", valid_402659461
  var valid_402659462 = header.getOrDefault("X-Amz-Credential")
  valid_402659462 = validateParameter(valid_402659462, JString,
                                      required = false, default = nil)
  if valid_402659462 != nil:
    section.add "X-Amz-Credential", valid_402659462
  var valid_402659463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659463 = validateParameter(valid_402659463, JString,
                                      required = false, default = nil)
  if valid_402659463 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659465: Call_TestAuthorization_402659453;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.
                                                                                         ## 
  let valid = call_402659465.validator(path, query, header, formData, body, _)
  let scheme = call_402659465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659465.makeUrl(scheme.get, call_402659465.host, call_402659465.base,
                                   call_402659465.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659465, uri, valid, _)

proc call*(call_402659466: Call_TestAuthorization_402659453; body: JsonNode;
           clientId: string = ""): Recallable =
  ## testAuthorization
  ## Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.
  ##   
                                                                                                                                                                                                                    ## clientId: string
                                                                                                                                                                                                                    ##           
                                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                                    ## MQTT 
                                                                                                                                                                                                                    ## client 
                                                                                                                                                                                                                    ## ID.
  ##   
                                                                                                                                                                                                                          ## body: JObject (required)
  var query_402659467 = newJObject()
  var body_402659468 = newJObject()
  add(query_402659467, "clientId", newJString(clientId))
  if body != nil:
    body_402659468 = body
  result = call_402659466.call(nil, query_402659467, nil, nil, body_402659468)

var testAuthorization* = Call_TestAuthorization_402659453(
    name: "testAuthorization", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/test-authorization",
    validator: validate_TestAuthorization_402659454, base: "/",
    makeUrl: url_TestAuthorization_402659455,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TestInvokeAuthorizer_402659469 = ref object of OpenApiRestCall_402656044
proc url_TestInvokeAuthorizer_402659471(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "authorizerName" in path,
         "`authorizerName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/authorizer/"),
                 (kind: VariableSegment, value: "authorizerName"),
                 (kind: ConstantSegment, value: "/test")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_TestInvokeAuthorizer_402659470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizerName: JString (required)
                                 ##                 : The custom authorizer name.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizerName` field"
  var valid_402659472 = path.getOrDefault("authorizerName")
  valid_402659472 = validateParameter(valid_402659472, JString, required = true,
                                      default = nil)
  if valid_402659472 != nil:
    section.add "authorizerName", valid_402659472
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659473 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659473 = validateParameter(valid_402659473, JString,
                                      required = false, default = nil)
  if valid_402659473 != nil:
    section.add "X-Amz-Security-Token", valid_402659473
  var valid_402659474 = header.getOrDefault("X-Amz-Signature")
  valid_402659474 = validateParameter(valid_402659474, JString,
                                      required = false, default = nil)
  if valid_402659474 != nil:
    section.add "X-Amz-Signature", valid_402659474
  var valid_402659475 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659475 = validateParameter(valid_402659475, JString,
                                      required = false, default = nil)
  if valid_402659475 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659475
  var valid_402659476 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659476 = validateParameter(valid_402659476, JString,
                                      required = false, default = nil)
  if valid_402659476 != nil:
    section.add "X-Amz-Algorithm", valid_402659476
  var valid_402659477 = header.getOrDefault("X-Amz-Date")
  valid_402659477 = validateParameter(valid_402659477, JString,
                                      required = false, default = nil)
  if valid_402659477 != nil:
    section.add "X-Amz-Date", valid_402659477
  var valid_402659478 = header.getOrDefault("X-Amz-Credential")
  valid_402659478 = validateParameter(valid_402659478, JString,
                                      required = false, default = nil)
  if valid_402659478 != nil:
    section.add "X-Amz-Credential", valid_402659478
  var valid_402659479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659479 = validateParameter(valid_402659479, JString,
                                      required = false, default = nil)
  if valid_402659479 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659479
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659481: Call_TestInvokeAuthorizer_402659469;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.
                                                                                         ## 
  let valid = call_402659481.validator(path, query, header, formData, body, _)
  let scheme = call_402659481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659481.makeUrl(scheme.get, call_402659481.host, call_402659481.base,
                                   call_402659481.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659481, uri, valid, _)

proc call*(call_402659482: Call_TestInvokeAuthorizer_402659469; body: JsonNode;
           authorizerName: string): Recallable =
  ## testInvokeAuthorizer
  ## Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.
  ##   
                                                                                                                                                                                                         ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                    ## authorizerName: string (required)
                                                                                                                                                                                                                                    ##                 
                                                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                                                    ## custom 
                                                                                                                                                                                                                                    ## authorizer 
                                                                                                                                                                                                                                    ## name.
  var path_402659483 = newJObject()
  var body_402659484 = newJObject()
  if body != nil:
    body_402659484 = body
  add(path_402659483, "authorizerName", newJString(authorizerName))
  result = call_402659482.call(path_402659483, nil, nil, nil, body_402659484)

var testInvokeAuthorizer* = Call_TestInvokeAuthorizer_402659469(
    name: "testInvokeAuthorizer", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/authorizer/{authorizerName}/test",
    validator: validate_TestInvokeAuthorizer_402659470, base: "/",
    makeUrl: url_TestInvokeAuthorizer_402659471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TransferCertificate_402659485 = ref object of OpenApiRestCall_402656044
proc url_TransferCertificate_402659487(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/transfer-certificate/"),
                 (kind: VariableSegment, value: "certificateId"),
                 (kind: ConstantSegment, value: "#targetAwsAccount")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_TransferCertificate_402659486(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
                                 ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `certificateId` field"
  var valid_402659488 = path.getOrDefault("certificateId")
  valid_402659488 = validateParameter(valid_402659488, JString, required = true,
                                      default = nil)
  if valid_402659488 != nil:
    section.add "certificateId", valid_402659488
  result.add "path", section
  ## parameters in `query` object:
  ##   targetAwsAccount: JString (required)
                                  ##                   : The AWS account.
  section = newJObject()
  assert query != nil,
         "query argument is necessary due to required `targetAwsAccount` field"
  var valid_402659489 = query.getOrDefault("targetAwsAccount")
  valid_402659489 = validateParameter(valid_402659489, JString, required = true,
                                      default = nil)
  if valid_402659489 != nil:
    section.add "targetAwsAccount", valid_402659489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659490 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659490 = validateParameter(valid_402659490, JString,
                                      required = false, default = nil)
  if valid_402659490 != nil:
    section.add "X-Amz-Security-Token", valid_402659490
  var valid_402659491 = header.getOrDefault("X-Amz-Signature")
  valid_402659491 = validateParameter(valid_402659491, JString,
                                      required = false, default = nil)
  if valid_402659491 != nil:
    section.add "X-Amz-Signature", valid_402659491
  var valid_402659492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659492 = validateParameter(valid_402659492, JString,
                                      required = false, default = nil)
  if valid_402659492 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659492
  var valid_402659493 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659493 = validateParameter(valid_402659493, JString,
                                      required = false, default = nil)
  if valid_402659493 != nil:
    section.add "X-Amz-Algorithm", valid_402659493
  var valid_402659494 = header.getOrDefault("X-Amz-Date")
  valid_402659494 = validateParameter(valid_402659494, JString,
                                      required = false, default = nil)
  if valid_402659494 != nil:
    section.add "X-Amz-Date", valid_402659494
  var valid_402659495 = header.getOrDefault("X-Amz-Credential")
  valid_402659495 = validateParameter(valid_402659495, JString,
                                      required = false, default = nil)
  if valid_402659495 != nil:
    section.add "X-Amz-Credential", valid_402659495
  var valid_402659496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659496 = validateParameter(valid_402659496, JString,
                                      required = false, default = nil)
  if valid_402659496 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659498: Call_TransferCertificate_402659485;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>
                                                                                         ## 
  let valid = call_402659498.validator(path, query, header, formData, body, _)
  let scheme = call_402659498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659498.makeUrl(scheme.get, call_402659498.host, call_402659498.base,
                                   call_402659498.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659498, uri, valid, _)

proc call*(call_402659499: Call_TransferCertificate_402659485;
           certificateId: string; targetAwsAccount: string; body: JsonNode): Recallable =
  ## transferCertificate
  ## <p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>
  ##   
certificateId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ##                

he 

of 
the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## certificate. 
he 
last 
part 
of 
the 
certificate 

contains 
the 
certificate 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## ID.)
  ##   
targetAwsAccount: string (required)


he 

account.
  ##   
body: JObject (required)
  var path_402659500 = newJObject()
  var query_402659501 = newJObject()
  var body_402659502 = newJObject()
  add(path_402659500, "certificateId", newJString(certificateId))
  add(query_402659501, "targetAwsAccount", newJString(targetAwsAccount))
  if body != nil:
    body_402659502 = body
  result = call_402659499.call(path_402659500, query_402659501, nil, nil, body_402659502)

var transferCertificate* = Call_TransferCertificate_402659485(
    name: "transferCertificate", meth: HttpMethod.HttpPatch,
    host: "iot.amazonaws.com",
    route: "/transfer-certificate/{certificateId}#targetAwsAccount",
    validator: validate_TransferCertificate_402659486, base: "/",
    makeUrl: url_TransferCertificate_402659487,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UntagResource_402659503 = ref object of OpenApiRestCall_402656044
proc url_UntagResource_402659505(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UntagResource_402659504(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes the given tags (metadata) from the resource.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659506 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659506 = validateParameter(valid_402659506, JString,
                                      required = false, default = nil)
  if valid_402659506 != nil:
    section.add "X-Amz-Security-Token", valid_402659506
  var valid_402659507 = header.getOrDefault("X-Amz-Signature")
  valid_402659507 = validateParameter(valid_402659507, JString,
                                      required = false, default = nil)
  if valid_402659507 != nil:
    section.add "X-Amz-Signature", valid_402659507
  var valid_402659508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659508 = validateParameter(valid_402659508, JString,
                                      required = false, default = nil)
  if valid_402659508 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659508
  var valid_402659509 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659509 = validateParameter(valid_402659509, JString,
                                      required = false, default = nil)
  if valid_402659509 != nil:
    section.add "X-Amz-Algorithm", valid_402659509
  var valid_402659510 = header.getOrDefault("X-Amz-Date")
  valid_402659510 = validateParameter(valid_402659510, JString,
                                      required = false, default = nil)
  if valid_402659510 != nil:
    section.add "X-Amz-Date", valid_402659510
  var valid_402659511 = header.getOrDefault("X-Amz-Credential")
  valid_402659511 = validateParameter(valid_402659511, JString,
                                      required = false, default = nil)
  if valid_402659511 != nil:
    section.add "X-Amz-Credential", valid_402659511
  var valid_402659512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659512 = validateParameter(valid_402659512, JString,
                                      required = false, default = nil)
  if valid_402659512 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659514: Call_UntagResource_402659503; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the given tags (metadata) from the resource.
                                                                                         ## 
  let valid = call_402659514.validator(path, query, header, formData, body, _)
  let scheme = call_402659514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659514.makeUrl(scheme.get, call_402659514.host, call_402659514.base,
                                   call_402659514.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659514, uri, valid, _)

proc call*(call_402659515: Call_UntagResource_402659503; body: JsonNode): Recallable =
  ## untagResource
  ## Removes the given tags (metadata) from the resource.
  ##   body: JObject (required)
  var body_402659516 = newJObject()
  if body != nil:
    body_402659516 = body
  result = call_402659515.call(nil, nil, nil, nil, body_402659516)

var untagResource* = Call_UntagResource_402659503(name: "untagResource",
    meth: HttpMethod.HttpPost, host: "iot.amazonaws.com", route: "/untag",
    validator: validate_UntagResource_402659504, base: "/",
    makeUrl: url_UntagResource_402659505, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateCertificate_402659517 = ref object of OpenApiRestCall_402656044
proc url_UpdateCertificate_402659519(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "certificateId" in path, "`certificateId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/certificates/"),
                 (kind: VariableSegment, value: "certificateId"),
                 (kind: ConstantSegment, value: "#newStatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateCertificate_402659518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   certificateId: JString (required)
                                 ##                : The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `certificateId` field"
  var valid_402659520 = path.getOrDefault("certificateId")
  valid_402659520 = validateParameter(valid_402659520, JString, required = true,
                                      default = nil)
  if valid_402659520 != nil:
    section.add "certificateId", valid_402659520
  result.add "path", section
  ## parameters in `query` object:
  ##   newStatus: JString (required)
                                  ##            : <p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER will result in an exception being thrown. PENDING_TRANSFER is a status used internally by AWS IoT. It is not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
  section = newJObject()
  var valid_402659521 = query.getOrDefault("newStatus")
  valid_402659521 = validateParameter(valid_402659521, JString, required = true,
                                      default = newJString("ACTIVE"))
  if valid_402659521 != nil:
    section.add "newStatus", valid_402659521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659522 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659522 = validateParameter(valid_402659522, JString,
                                      required = false, default = nil)
  if valid_402659522 != nil:
    section.add "X-Amz-Security-Token", valid_402659522
  var valid_402659523 = header.getOrDefault("X-Amz-Signature")
  valid_402659523 = validateParameter(valid_402659523, JString,
                                      required = false, default = nil)
  if valid_402659523 != nil:
    section.add "X-Amz-Signature", valid_402659523
  var valid_402659524 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659524 = validateParameter(valid_402659524, JString,
                                      required = false, default = nil)
  if valid_402659524 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659524
  var valid_402659525 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659525 = validateParameter(valid_402659525, JString,
                                      required = false, default = nil)
  if valid_402659525 != nil:
    section.add "X-Amz-Algorithm", valid_402659525
  var valid_402659526 = header.getOrDefault("X-Amz-Date")
  valid_402659526 = validateParameter(valid_402659526, JString,
                                      required = false, default = nil)
  if valid_402659526 != nil:
    section.add "X-Amz-Date", valid_402659526
  var valid_402659527 = header.getOrDefault("X-Amz-Credential")
  valid_402659527 = validateParameter(valid_402659527, JString,
                                      required = false, default = nil)
  if valid_402659527 != nil:
    section.add "X-Amz-Credential", valid_402659527
  var valid_402659528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659528 = validateParameter(valid_402659528, JString,
                                      required = false, default = nil)
  if valid_402659528 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659528
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402659529: Call_UpdateCertificate_402659517;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
                                                                                         ## 
  let valid = call_402659529.validator(path, query, header, formData, body, _)
  let scheme = call_402659529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659529.makeUrl(scheme.get, call_402659529.host, call_402659529.base,
                                   call_402659529.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659529, uri, valid, _)

proc call*(call_402659530: Call_UpdateCertificate_402659517;
           certificateId: string; newStatus: string = "ACTIVE"): Recallable =
  ## updateCertificate
  ## <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                       ## certificateId: string (required)
                                                                                                                                                                                                                                                                                                                                                                       ##                
                                                                                                                                                                                                                                                                                                                                                                       ## : 
                                                                                                                                                                                                                                                                                                                                                                       ## The 
                                                                                                                                                                                                                                                                                                                                                                       ## ID 
                                                                                                                                                                                                                                                                                                                                                                       ## of 
                                                                                                                                                                                                                                                                                                                                                                       ## the 
                                                                                                                                                                                                                                                                                                                                                                       ## certificate. 
                                                                                                                                                                                                                                                                                                                                                                       ## (The 
                                                                                                                                                                                                                                                                                                                                                                       ## last 
                                                                                                                                                                                                                                                                                                                                                                       ## part 
                                                                                                                                                                                                                                                                                                                                                                       ## of 
                                                                                                                                                                                                                                                                                                                                                                       ## the 
                                                                                                                                                                                                                                                                                                                                                                       ## certificate 
                                                                                                                                                                                                                                                                                                                                                                       ## ARN 
                                                                                                                                                                                                                                                                                                                                                                       ## contains 
                                                                                                                                                                                                                                                                                                                                                                       ## the 
                                                                                                                                                                                                                                                                                                                                                                       ## certificate 
                                                                                                                                                                                                                                                                                                                                                                       ## ID.)
  ##   
                                                                                                                                                                                                                                                                                                                                                                              ## newStatus: string (required)
                                                                                                                                                                                                                                                                                                                                                                              ##            
                                                                                                                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                                                                                                                              ## <p>The 
                                                                                                                                                                                                                                                                                                                                                                              ## new 
                                                                                                                                                                                                                                                                                                                                                                              ## status.</p> 
                                                                                                                                                                                                                                                                                                                                                                              ## <p> 
                                                                                                                                                                                                                                                                                                                                                                              ## <b>Note:</b> 
                                                                                                                                                                                                                                                                                                                                                                              ## Setting 
                                                                                                                                                                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                                                                                                                                                                              ## status 
                                                                                                                                                                                                                                                                                                                                                                              ## to 
                                                                                                                                                                                                                                                                                                                                                                              ## PENDING_TRANSFER 
                                                                                                                                                                                                                                                                                                                                                                              ## will 
                                                                                                                                                                                                                                                                                                                                                                              ## result 
                                                                                                                                                                                                                                                                                                                                                                              ## in 
                                                                                                                                                                                                                                                                                                                                                                              ## an 
                                                                                                                                                                                                                                                                                                                                                                              ## exception 
                                                                                                                                                                                                                                                                                                                                                                              ## being 
                                                                                                                                                                                                                                                                                                                                                                              ## thrown. 
                                                                                                                                                                                                                                                                                                                                                                              ## PENDING_TRANSFER 
                                                                                                                                                                                                                                                                                                                                                                              ## is 
                                                                                                                                                                                                                                                                                                                                                                              ## a 
                                                                                                                                                                                                                                                                                                                                                                              ## status 
                                                                                                                                                                                                                                                                                                                                                                              ## used 
                                                                                                                                                                                                                                                                                                                                                                              ## internally 
                                                                                                                                                                                                                                                                                                                                                                              ## by 
                                                                                                                                                                                                                                                                                                                                                                              ## AWS 
                                                                                                                                                                                                                                                                                                                                                                              ## IoT. 
                                                                                                                                                                                                                                                                                                                                                                              ## It 
                                                                                                                                                                                                                                                                                                                                                                              ## is 
                                                                                                                                                                                                                                                                                                                                                                              ## not 
                                                                                                                                                                                                                                                                                                                                                                              ## intended 
                                                                                                                                                                                                                                                                                                                                                                              ## for 
                                                                                                                                                                                                                                                                                                                                                                              ## developer 
                                                                                                                                                                                                                                                                                                                                                                              ## use.</p> 
                                                                                                                                                                                                                                                                                                                                                                              ## <p> 
                                                                                                                                                                                                                                                                                                                                                                              ## <b>Note:</b> 
                                                                                                                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                                                                                                                              ## status 
                                                                                                                                                                                                                                                                                                                                                                              ## value 
                                                                                                                                                                                                                                                                                                                                                                              ## REGISTER_INACTIVE 
                                                                                                                                                                                                                                                                                                                                                                              ## is 
                                                                                                                                                                                                                                                                                                                                                                              ## deprecated 
                                                                                                                                                                                                                                                                                                                                                                              ## and 
                                                                                                                                                                                                                                                                                                                                                                              ## should 
                                                                                                                                                                                                                                                                                                                                                                              ## not 
                                                                                                                                                                                                                                                                                                                                                                              ## be 
                                                                                                                                                                                                                                                                                                                                                                              ## used.</p>
  var path_402659531 = newJObject()
  var query_402659532 = newJObject()
  add(path_402659531, "certificateId", newJString(certificateId))
  add(query_402659532, "newStatus", newJString(newStatus))
  result = call_402659530.call(path_402659531, query_402659532, nil, nil, nil)

var updateCertificate* = Call_UpdateCertificate_402659517(
    name: "updateCertificate", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/certificates/{certificateId}#newStatus",
    validator: validate_UpdateCertificate_402659518, base: "/",
    makeUrl: url_UpdateCertificate_402659519,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateThingGroupsForThing_402659533 = ref object of OpenApiRestCall_402656044
proc url_UpdateThingGroupsForThing_402659535(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateThingGroupsForThing_402659534(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Updates the groups to which the thing belongs.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659536 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659536 = validateParameter(valid_402659536, JString,
                                      required = false, default = nil)
  if valid_402659536 != nil:
    section.add "X-Amz-Security-Token", valid_402659536
  var valid_402659537 = header.getOrDefault("X-Amz-Signature")
  valid_402659537 = validateParameter(valid_402659537, JString,
                                      required = false, default = nil)
  if valid_402659537 != nil:
    section.add "X-Amz-Signature", valid_402659537
  var valid_402659538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659538 = validateParameter(valid_402659538, JString,
                                      required = false, default = nil)
  if valid_402659538 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659538
  var valid_402659539 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659539 = validateParameter(valid_402659539, JString,
                                      required = false, default = nil)
  if valid_402659539 != nil:
    section.add "X-Amz-Algorithm", valid_402659539
  var valid_402659540 = header.getOrDefault("X-Amz-Date")
  valid_402659540 = validateParameter(valid_402659540, JString,
                                      required = false, default = nil)
  if valid_402659540 != nil:
    section.add "X-Amz-Date", valid_402659540
  var valid_402659541 = header.getOrDefault("X-Amz-Credential")
  valid_402659541 = validateParameter(valid_402659541, JString,
                                      required = false, default = nil)
  if valid_402659541 != nil:
    section.add "X-Amz-Credential", valid_402659541
  var valid_402659542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659542 = validateParameter(valid_402659542, JString,
                                      required = false, default = nil)
  if valid_402659542 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659542
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659544: Call_UpdateThingGroupsForThing_402659533;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the groups to which the thing belongs.
                                                                                         ## 
  let valid = call_402659544.validator(path, query, header, formData, body, _)
  let scheme = call_402659544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659544.makeUrl(scheme.get, call_402659544.host, call_402659544.base,
                                   call_402659544.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659544, uri, valid, _)

proc call*(call_402659545: Call_UpdateThingGroupsForThing_402659533;
           body: JsonNode): Recallable =
  ## updateThingGroupsForThing
  ## Updates the groups to which the thing belongs.
  ##   body: JObject (required)
  var body_402659546 = newJObject()
  if body != nil:
    body_402659546 = body
  result = call_402659545.call(nil, nil, nil, nil, body_402659546)

var updateThingGroupsForThing* = Call_UpdateThingGroupsForThing_402659533(
    name: "updateThingGroupsForThing", meth: HttpMethod.HttpPut,
    host: "iot.amazonaws.com", route: "/thing-groups/updateThingGroupsForThing",
    validator: validate_UpdateThingGroupsForThing_402659534, base: "/",
    makeUrl: url_UpdateThingGroupsForThing_402659535,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ValidateSecurityProfileBehaviors_402659547 = ref object of OpenApiRestCall_402656044
proc url_ValidateSecurityProfileBehaviors_402659549(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ValidateSecurityProfileBehaviors_402659548(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Validates a Device Defender security profile behaviors specification.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402659550 = header.getOrDefault("X-Amz-Security-Token")
  valid_402659550 = validateParameter(valid_402659550, JString,
                                      required = false, default = nil)
  if valid_402659550 != nil:
    section.add "X-Amz-Security-Token", valid_402659550
  var valid_402659551 = header.getOrDefault("X-Amz-Signature")
  valid_402659551 = validateParameter(valid_402659551, JString,
                                      required = false, default = nil)
  if valid_402659551 != nil:
    section.add "X-Amz-Signature", valid_402659551
  var valid_402659552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402659552 = validateParameter(valid_402659552, JString,
                                      required = false, default = nil)
  if valid_402659552 != nil:
    section.add "X-Amz-Content-Sha256", valid_402659552
  var valid_402659553 = header.getOrDefault("X-Amz-Algorithm")
  valid_402659553 = validateParameter(valid_402659553, JString,
                                      required = false, default = nil)
  if valid_402659553 != nil:
    section.add "X-Amz-Algorithm", valid_402659553
  var valid_402659554 = header.getOrDefault("X-Amz-Date")
  valid_402659554 = validateParameter(valid_402659554, JString,
                                      required = false, default = nil)
  if valid_402659554 != nil:
    section.add "X-Amz-Date", valid_402659554
  var valid_402659555 = header.getOrDefault("X-Amz-Credential")
  valid_402659555 = validateParameter(valid_402659555, JString,
                                      required = false, default = nil)
  if valid_402659555 != nil:
    section.add "X-Amz-Credential", valid_402659555
  var valid_402659556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402659556 = validateParameter(valid_402659556, JString,
                                      required = false, default = nil)
  if valid_402659556 != nil:
    section.add "X-Amz-SignedHeaders", valid_402659556
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402659558: Call_ValidateSecurityProfileBehaviors_402659547;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Validates a Device Defender security profile behaviors specification.
                                                                                         ## 
  let valid = call_402659558.validator(path, query, header, formData, body, _)
  let scheme = call_402659558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402659558.makeUrl(scheme.get, call_402659558.host, call_402659558.base,
                                   call_402659558.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402659558, uri, valid, _)

proc call*(call_402659559: Call_ValidateSecurityProfileBehaviors_402659547;
           body: JsonNode): Recallable =
  ## validateSecurityProfileBehaviors
  ## Validates a Device Defender security profile behaviors specification.
  ##   body: 
                                                                          ## JObject (required)
  var body_402659560 = newJObject()
  if body != nil:
    body_402659560 = body
  result = call_402659559.call(nil, nil, nil, nil, body_402659560)

var validateSecurityProfileBehaviors* = Call_ValidateSecurityProfileBehaviors_402659547(
    name: "validateSecurityProfileBehaviors", meth: HttpMethod.HttpPost,
    host: "iot.amazonaws.com", route: "/security-profile-behaviors/validate",
    validator: validate_ValidateSecurityProfileBehaviors_402659548, base: "/",
    makeUrl: url_ValidateSecurityProfileBehaviors_402659549,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token",
    ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode;
              algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName,
                            date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers,
                               recall.body, normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date,
                                   region = region, service = awsServiceName,
                                   sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}