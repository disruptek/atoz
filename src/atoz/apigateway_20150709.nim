
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5,
  base64, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon API Gateway
## version: 2015-07-09
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/apigateway/
type
  Scheme* {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                             header: JsonNode = nil; formData: JsonNode = nil;
                             body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                    path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_402656035 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_402656035](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base,
             route: t.route, schemes: t.schemes, validator: t.validator,
             url: t.url)

proc pickScheme(t: OpenApiRestCall_402656035): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                       default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
                                                            ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.
    used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Https: {"ap-northeast-1": "apigateway.ap-northeast-1.amazonaws.com", "ap-southeast-1": "apigateway.ap-southeast-1.amazonaws.com", "us-west-2": "apigateway.us-west-2.amazonaws.com", "eu-west-2": "apigateway.eu-west-2.amazonaws.com", "ap-northeast-3": "apigateway.ap-northeast-3.amazonaws.com", "eu-central-1": "apigateway.eu-central-1.amazonaws.com", "us-east-2": "apigateway.us-east-2.amazonaws.com", "us-east-1": "apigateway.us-east-1.amazonaws.com", "cn-northwest-1": "apigateway.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "apigateway.ap-south-1.amazonaws.com", "eu-north-1": "apigateway.eu-north-1.amazonaws.com", "ap-northeast-2": "apigateway.ap-northeast-2.amazonaws.com", "us-west-1": "apigateway.us-west-1.amazonaws.com", "us-gov-east-1": "apigateway.us-gov-east-1.amazonaws.com", "eu-west-3": "apigateway.eu-west-3.amazonaws.com", "cn-north-1": "apigateway.cn-north-1.amazonaws.com.cn", "sa-east-1": "apigateway.sa-east-1.amazonaws.com", "eu-west-1": "apigateway.eu-west-1.amazonaws.com", "us-gov-west-1": "apigateway.us-gov-west-1.amazonaws.com", "ap-southeast-2": "apigateway.ap-southeast-2.amazonaws.com", "ca-central-1": "apigateway.ca-central-1.amazonaws.com"}.toTable, Scheme.Http: {
      "ap-northeast-1": "apigateway.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "apigateway.ap-southeast-1.amazonaws.com",
      "us-west-2": "apigateway.us-west-2.amazonaws.com",
      "eu-west-2": "apigateway.eu-west-2.amazonaws.com",
      "ap-northeast-3": "apigateway.ap-northeast-3.amazonaws.com",
      "eu-central-1": "apigateway.eu-central-1.amazonaws.com",
      "us-east-2": "apigateway.us-east-2.amazonaws.com",
      "us-east-1": "apigateway.us-east-1.amazonaws.com",
      "cn-northwest-1": "apigateway.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "apigateway.ap-south-1.amazonaws.com",
      "eu-north-1": "apigateway.eu-north-1.amazonaws.com",
      "ap-northeast-2": "apigateway.ap-northeast-2.amazonaws.com",
      "us-west-1": "apigateway.us-west-1.amazonaws.com",
      "us-gov-east-1": "apigateway.us-gov-east-1.amazonaws.com",
      "eu-west-3": "apigateway.eu-west-3.amazonaws.com",
      "cn-north-1": "apigateway.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "apigateway.sa-east-1.amazonaws.com",
      "eu-west-1": "apigateway.eu-west-1.amazonaws.com",
      "us-gov-west-1": "apigateway.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "apigateway.ap-southeast-2.amazonaws.com",
      "ca-central-1": "apigateway.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "apigateway"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode;
                body: string = ""): Recallable {.base.}
type
  Call_CreateApiKey_402656471 = ref object of OpenApiRestCall_402656035
proc url_CreateApiKey_402656473(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateApiKey_402656472(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Create an <a>ApiKey</a> resource. </p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html">AWS CLI</a></div>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656474 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656474 = validateParameter(valid_402656474, JString,
                                      required = false, default = nil)
  if valid_402656474 != nil:
    section.add "X-Amz-Security-Token", valid_402656474
  var valid_402656475 = header.getOrDefault("X-Amz-Signature")
  valid_402656475 = validateParameter(valid_402656475, JString,
                                      required = false, default = nil)
  if valid_402656475 != nil:
    section.add "X-Amz-Signature", valid_402656475
  var valid_402656476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656476 = validateParameter(valid_402656476, JString,
                                      required = false, default = nil)
  if valid_402656476 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656476
  var valid_402656477 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656477 = validateParameter(valid_402656477, JString,
                                      required = false, default = nil)
  if valid_402656477 != nil:
    section.add "X-Amz-Algorithm", valid_402656477
  var valid_402656478 = header.getOrDefault("X-Amz-Date")
  valid_402656478 = validateParameter(valid_402656478, JString,
                                      required = false, default = nil)
  if valid_402656478 != nil:
    section.add "X-Amz-Date", valid_402656478
  var valid_402656479 = header.getOrDefault("X-Amz-Credential")
  valid_402656479 = validateParameter(valid_402656479, JString,
                                      required = false, default = nil)
  if valid_402656479 != nil:
    section.add "X-Amz-Credential", valid_402656479
  var valid_402656480 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656480 = validateParameter(valid_402656480, JString,
                                      required = false, default = nil)
  if valid_402656480 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656480
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656482: Call_CreateApiKey_402656471; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Create an <a>ApiKey</a> resource. </p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html">AWS CLI</a></div>
                                                                                         ## 
  let valid = call_402656482.validator(path, query, header, formData, body, _)
  let scheme = call_402656482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656482.makeUrl(scheme.get, call_402656482.host, call_402656482.base,
                                   call_402656482.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656482, uri, valid, _)

proc call*(call_402656483: Call_CreateApiKey_402656471; body: JsonNode): Recallable =
  ## createApiKey
  ## <p>Create an <a>ApiKey</a> resource. </p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html">AWS CLI</a></div>
  ##   
                                                                                                                                                                               ## body: JObject (required)
  var body_402656484 = newJObject()
  if body != nil:
    body_402656484 = body
  result = call_402656483.call(nil, nil, nil, nil, body_402656484)

var createApiKey* = Call_CreateApiKey_402656471(name: "createApiKey",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/apikeys", validator: validate_CreateApiKey_402656472, base: "/",
    makeUrl: url_CreateApiKey_402656473, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApiKeys_402656285 = ref object of OpenApiRestCall_402656035
proc url_GetApiKeys_402656287(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApiKeys_402656286(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the current <a>ApiKeys</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## includeValues: JBool
                                                                                                         ##                
                                                                                                         ## : 
                                                                                                         ## A 
                                                                                                         ## boolean 
                                                                                                         ## flag 
                                                                                                         ## to 
                                                                                                         ## specify 
                                                                                                         ## whether 
                                                                                                         ## (<code>true</code>) 
                                                                                                         ## or 
                                                                                                         ## not 
                                                                                                         ## (<code>false</code>) 
                                                                                                         ## the 
                                                                                                         ## result 
                                                                                                         ## contains 
                                                                                                         ## key 
                                                                                                         ## values.
  ##   
                                                                                                                   ## name: JString
                                                                                                                   ##       
                                                                                                                   ## : 
                                                                                                                   ## The 
                                                                                                                   ## name 
                                                                                                                   ## of 
                                                                                                                   ## queried 
                                                                                                                   ## API 
                                                                                                                   ## keys.
  ##   
                                                                                                                           ## limit: JInt
                                                                                                                           ##        
                                                                                                                           ## : 
                                                                                                                           ## The 
                                                                                                                           ## maximum 
                                                                                                                           ## number 
                                                                                                                           ## of 
                                                                                                                           ## returned 
                                                                                                                           ## results 
                                                                                                                           ## per 
                                                                                                                           ## page. 
                                                                                                                           ## The 
                                                                                                                           ## default 
                                                                                                                           ## value 
                                                                                                                           ## is 
                                                                                                                           ## 25 
                                                                                                                           ## and 
                                                                                                                           ## the 
                                                                                                                           ## maximum 
                                                                                                                           ## value 
                                                                                                                           ## is 
                                                                                                                           ## 500.
  ##   
                                                                                                                                  ## customerId: JString
                                                                                                                                  ##             
                                                                                                                                  ## : 
                                                                                                                                  ## The 
                                                                                                                                  ## identifier 
                                                                                                                                  ## of 
                                                                                                                                  ## a 
                                                                                                                                  ## customer 
                                                                                                                                  ## in 
                                                                                                                                  ## AWS 
                                                                                                                                  ## Marketplace 
                                                                                                                                  ## or 
                                                                                                                                  ## an 
                                                                                                                                  ## external 
                                                                                                                                  ## system, 
                                                                                                                                  ## such 
                                                                                                                                  ## as 
                                                                                                                                  ## a 
                                                                                                                                  ## developer 
                                                                                                                                  ## portal.
  section = newJObject()
  var valid_402656369 = query.getOrDefault("position")
  valid_402656369 = validateParameter(valid_402656369, JString,
                                      required = false, default = nil)
  if valid_402656369 != nil:
    section.add "position", valid_402656369
  var valid_402656370 = query.getOrDefault("includeValues")
  valid_402656370 = validateParameter(valid_402656370, JBool, required = false,
                                      default = nil)
  if valid_402656370 != nil:
    section.add "includeValues", valid_402656370
  var valid_402656371 = query.getOrDefault("name")
  valid_402656371 = validateParameter(valid_402656371, JString,
                                      required = false, default = nil)
  if valid_402656371 != nil:
    section.add "name", valid_402656371
  var valid_402656372 = query.getOrDefault("limit")
  valid_402656372 = validateParameter(valid_402656372, JInt, required = false,
                                      default = nil)
  if valid_402656372 != nil:
    section.add "limit", valid_402656372
  var valid_402656373 = query.getOrDefault("customerId")
  valid_402656373 = validateParameter(valid_402656373, JString,
                                      required = false, default = nil)
  if valid_402656373 != nil:
    section.add "customerId", valid_402656373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656374 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656374 = validateParameter(valid_402656374, JString,
                                      required = false, default = nil)
  if valid_402656374 != nil:
    section.add "X-Amz-Security-Token", valid_402656374
  var valid_402656375 = header.getOrDefault("X-Amz-Signature")
  valid_402656375 = validateParameter(valid_402656375, JString,
                                      required = false, default = nil)
  if valid_402656375 != nil:
    section.add "X-Amz-Signature", valid_402656375
  var valid_402656376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656376 = validateParameter(valid_402656376, JString,
                                      required = false, default = nil)
  if valid_402656376 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656376
  var valid_402656377 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656377 = validateParameter(valid_402656377, JString,
                                      required = false, default = nil)
  if valid_402656377 != nil:
    section.add "X-Amz-Algorithm", valid_402656377
  var valid_402656378 = header.getOrDefault("X-Amz-Date")
  valid_402656378 = validateParameter(valid_402656378, JString,
                                      required = false, default = nil)
  if valid_402656378 != nil:
    section.add "X-Amz-Date", valid_402656378
  var valid_402656379 = header.getOrDefault("X-Amz-Credential")
  valid_402656379 = validateParameter(valid_402656379, JString,
                                      required = false, default = nil)
  if valid_402656379 != nil:
    section.add "X-Amz-Credential", valid_402656379
  var valid_402656380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656380 = validateParameter(valid_402656380, JString,
                                      required = false, default = nil)
  if valid_402656380 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656380
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656394: Call_GetApiKeys_402656285; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the current <a>ApiKeys</a> resource.
                                                                                         ## 
  let valid = call_402656394.validator(path, query, header, formData, body, _)
  let scheme = call_402656394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656394.makeUrl(scheme.get, call_402656394.host, call_402656394.base,
                                   call_402656394.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656394, uri, valid, _)

proc call*(call_402656443: Call_GetApiKeys_402656285; position: string = "";
           includeValues: bool = false; name: string = ""; limit: int = 0;
           customerId: string = ""): Recallable =
  ## getApiKeys
  ## Gets information about the current <a>ApiKeys</a> resource.
  ##   position: string
                                                                ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                       ## includeValues: bool
                                                                                                                                       ##                
                                                                                                                                       ## : 
                                                                                                                                       ## A 
                                                                                                                                       ## boolean 
                                                                                                                                       ## flag 
                                                                                                                                       ## to 
                                                                                                                                       ## specify 
                                                                                                                                       ## whether 
                                                                                                                                       ## (<code>true</code>) 
                                                                                                                                       ## or 
                                                                                                                                       ## not 
                                                                                                                                       ## (<code>false</code>) 
                                                                                                                                       ## the 
                                                                                                                                       ## result 
                                                                                                                                       ## contains 
                                                                                                                                       ## key 
                                                                                                                                       ## values.
  ##   
                                                                                                                                                 ## name: string
                                                                                                                                                 ##       
                                                                                                                                                 ## : 
                                                                                                                                                 ## The 
                                                                                                                                                 ## name 
                                                                                                                                                 ## of 
                                                                                                                                                 ## queried 
                                                                                                                                                 ## API 
                                                                                                                                                 ## keys.
  ##   
                                                                                                                                                         ## limit: int
                                                                                                                                                         ##        
                                                                                                                                                         ## : 
                                                                                                                                                         ## The 
                                                                                                                                                         ## maximum 
                                                                                                                                                         ## number 
                                                                                                                                                         ## of 
                                                                                                                                                         ## returned 
                                                                                                                                                         ## results 
                                                                                                                                                         ## per 
                                                                                                                                                         ## page. 
                                                                                                                                                         ## The 
                                                                                                                                                         ## default 
                                                                                                                                                         ## value 
                                                                                                                                                         ## is 
                                                                                                                                                         ## 25 
                                                                                                                                                         ## and 
                                                                                                                                                         ## the 
                                                                                                                                                         ## maximum 
                                                                                                                                                         ## value 
                                                                                                                                                         ## is 
                                                                                                                                                         ## 500.
  ##   
                                                                                                                                                                ## customerId: string
                                                                                                                                                                ##             
                                                                                                                                                                ## : 
                                                                                                                                                                ## The 
                                                                                                                                                                ## identifier 
                                                                                                                                                                ## of 
                                                                                                                                                                ## a 
                                                                                                                                                                ## customer 
                                                                                                                                                                ## in 
                                                                                                                                                                ## AWS 
                                                                                                                                                                ## Marketplace 
                                                                                                                                                                ## or 
                                                                                                                                                                ## an 
                                                                                                                                                                ## external 
                                                                                                                                                                ## system, 
                                                                                                                                                                ## such 
                                                                                                                                                                ## as 
                                                                                                                                                                ## a 
                                                                                                                                                                ## developer 
                                                                                                                                                                ## portal.
  var query_402656444 = newJObject()
  add(query_402656444, "position", newJString(position))
  add(query_402656444, "includeValues", newJBool(includeValues))
  add(query_402656444, "name", newJString(name))
  add(query_402656444, "limit", newJInt(limit))
  add(query_402656444, "customerId", newJString(customerId))
  result = call_402656443.call(nil, query_402656444, nil, nil, nil)

var getApiKeys* = Call_GetApiKeys_402656285(name: "getApiKeys",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/apikeys", validator: validate_GetApiKeys_402656286, base: "/",
    makeUrl: url_GetApiKeys_402656287, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateAuthorizer_402656513 = ref object of OpenApiRestCall_402656035
proc url_CreateAuthorizer_402656515(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/authorizers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateAuthorizer_402656514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds a new <a>Authorizer</a> resource to an existing <a>RestApi</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-authorizer.html">AWS CLI</a></div>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656516 = path.getOrDefault("restapi_id")
  valid_402656516 = validateParameter(valid_402656516, JString, required = true,
                                      default = nil)
  if valid_402656516 != nil:
    section.add "restapi_id", valid_402656516
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656517 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656517 = validateParameter(valid_402656517, JString,
                                      required = false, default = nil)
  if valid_402656517 != nil:
    section.add "X-Amz-Security-Token", valid_402656517
  var valid_402656518 = header.getOrDefault("X-Amz-Signature")
  valid_402656518 = validateParameter(valid_402656518, JString,
                                      required = false, default = nil)
  if valid_402656518 != nil:
    section.add "X-Amz-Signature", valid_402656518
  var valid_402656519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656519 = validateParameter(valid_402656519, JString,
                                      required = false, default = nil)
  if valid_402656519 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656519
  var valid_402656520 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656520 = validateParameter(valid_402656520, JString,
                                      required = false, default = nil)
  if valid_402656520 != nil:
    section.add "X-Amz-Algorithm", valid_402656520
  var valid_402656521 = header.getOrDefault("X-Amz-Date")
  valid_402656521 = validateParameter(valid_402656521, JString,
                                      required = false, default = nil)
  if valid_402656521 != nil:
    section.add "X-Amz-Date", valid_402656521
  var valid_402656522 = header.getOrDefault("X-Amz-Credential")
  valid_402656522 = validateParameter(valid_402656522, JString,
                                      required = false, default = nil)
  if valid_402656522 != nil:
    section.add "X-Amz-Credential", valid_402656522
  var valid_402656523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656523 = validateParameter(valid_402656523, JString,
                                      required = false, default = nil)
  if valid_402656523 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656523
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656525: Call_CreateAuthorizer_402656513;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds a new <a>Authorizer</a> resource to an existing <a>RestApi</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-authorizer.html">AWS CLI</a></div>
                                                                                         ## 
  let valid = call_402656525.validator(path, query, header, formData, body, _)
  let scheme = call_402656525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656525.makeUrl(scheme.get, call_402656525.host, call_402656525.base,
                                   call_402656525.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656525, uri, valid, _)

proc call*(call_402656526: Call_CreateAuthorizer_402656513; restapiId: string;
           body: JsonNode): Recallable =
  ## createAuthorizer
  ## <p>Adds a new <a>Authorizer</a> resource to an existing <a>RestApi</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-authorizer.html">AWS CLI</a></div>
  ##   
                                                                                                                                                                                                                             ## restapiId: string (required)
                                                                                                                                                                                                                             ##            
                                                                                                                                                                                                                             ## : 
                                                                                                                                                                                                                             ## [Required] 
                                                                                                                                                                                                                             ## The 
                                                                                                                                                                                                                             ## string 
                                                                                                                                                                                                                             ## identifier 
                                                                                                                                                                                                                             ## of 
                                                                                                                                                                                                                             ## the 
                                                                                                                                                                                                                             ## associated 
                                                                                                                                                                                                                             ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                                               ## body: JObject (required)
  var path_402656527 = newJObject()
  var body_402656528 = newJObject()
  add(path_402656527, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656528 = body
  result = call_402656526.call(path_402656527, nil, nil, nil, body_402656528)

var createAuthorizer* = Call_CreateAuthorizer_402656513(
    name: "createAuthorizer", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/authorizers",
    validator: validate_CreateAuthorizer_402656514, base: "/",
    makeUrl: url_CreateAuthorizer_402656515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizers_402656485 = ref object of OpenApiRestCall_402656035
proc url_GetAuthorizers_402656487(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/authorizers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetAuthorizers_402656486(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Describe an existing <a>Authorizers</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizers.html">AWS CLI</a></div>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656499 = path.getOrDefault("restapi_id")
  valid_402656499 = validateParameter(valid_402656499, JString, required = true,
                                      default = nil)
  if valid_402656499 != nil:
    section.add "restapi_id", valid_402656499
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656500 = query.getOrDefault("position")
  valid_402656500 = validateParameter(valid_402656500, JString,
                                      required = false, default = nil)
  if valid_402656500 != nil:
    section.add "position", valid_402656500
  var valid_402656501 = query.getOrDefault("limit")
  valid_402656501 = validateParameter(valid_402656501, JInt, required = false,
                                      default = nil)
  if valid_402656501 != nil:
    section.add "limit", valid_402656501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656502 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656502 = validateParameter(valid_402656502, JString,
                                      required = false, default = nil)
  if valid_402656502 != nil:
    section.add "X-Amz-Security-Token", valid_402656502
  var valid_402656503 = header.getOrDefault("X-Amz-Signature")
  valid_402656503 = validateParameter(valid_402656503, JString,
                                      required = false, default = nil)
  if valid_402656503 != nil:
    section.add "X-Amz-Signature", valid_402656503
  var valid_402656504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656504 = validateParameter(valid_402656504, JString,
                                      required = false, default = nil)
  if valid_402656504 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656504
  var valid_402656505 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656505 = validateParameter(valid_402656505, JString,
                                      required = false, default = nil)
  if valid_402656505 != nil:
    section.add "X-Amz-Algorithm", valid_402656505
  var valid_402656506 = header.getOrDefault("X-Amz-Date")
  valid_402656506 = validateParameter(valid_402656506, JString,
                                      required = false, default = nil)
  if valid_402656506 != nil:
    section.add "X-Amz-Date", valid_402656506
  var valid_402656507 = header.getOrDefault("X-Amz-Credential")
  valid_402656507 = validateParameter(valid_402656507, JString,
                                      required = false, default = nil)
  if valid_402656507 != nil:
    section.add "X-Amz-Credential", valid_402656507
  var valid_402656508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656508 = validateParameter(valid_402656508, JString,
                                      required = false, default = nil)
  if valid_402656508 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656509: Call_GetAuthorizers_402656485; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Describe an existing <a>Authorizers</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizers.html">AWS CLI</a></div>
                                                                                         ## 
  let valid = call_402656509.validator(path, query, header, formData, body, _)
  let scheme = call_402656509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656509.makeUrl(scheme.get, call_402656509.host, call_402656509.base,
                                   call_402656509.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656509, uri, valid, _)

proc call*(call_402656510: Call_GetAuthorizers_402656485; restapiId: string;
           position: string = ""; limit: int = 0): Recallable =
  ## getAuthorizers
  ## <p>Describe an existing <a>Authorizers</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizers.html">AWS CLI</a></div>
  ##   
                                                                                                                                                                                               ## position: string
                                                                                                                                                                                               ##           
                                                                                                                                                                                               ## : 
                                                                                                                                                                                               ## The 
                                                                                                                                                                                               ## current 
                                                                                                                                                                                               ## pagination 
                                                                                                                                                                                               ## position 
                                                                                                                                                                                               ## in 
                                                                                                                                                                                               ## the 
                                                                                                                                                                                               ## paged 
                                                                                                                                                                                               ## result 
                                                                                                                                                                                               ## set.
  ##   
                                                                                                                                                                                                      ## restapiId: string (required)
                                                                                                                                                                                                      ##            
                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                      ## [Required] 
                                                                                                                                                                                                      ## The 
                                                                                                                                                                                                      ## string 
                                                                                                                                                                                                      ## identifier 
                                                                                                                                                                                                      ## of 
                                                                                                                                                                                                      ## the 
                                                                                                                                                                                                      ## associated 
                                                                                                                                                                                                      ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                        ## limit: int
                                                                                                                                                                                                                        ##        
                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                        ## maximum 
                                                                                                                                                                                                                        ## number 
                                                                                                                                                                                                                        ## of 
                                                                                                                                                                                                                        ## returned 
                                                                                                                                                                                                                        ## results 
                                                                                                                                                                                                                        ## per 
                                                                                                                                                                                                                        ## page. 
                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                        ## default 
                                                                                                                                                                                                                        ## value 
                                                                                                                                                                                                                        ## is 
                                                                                                                                                                                                                        ## 25 
                                                                                                                                                                                                                        ## and 
                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                        ## maximum 
                                                                                                                                                                                                                        ## value 
                                                                                                                                                                                                                        ## is 
                                                                                                                                                                                                                        ## 500.
  var path_402656511 = newJObject()
  var query_402656512 = newJObject()
  add(query_402656512, "position", newJString(position))
  add(path_402656511, "restapi_id", newJString(restapiId))
  add(query_402656512, "limit", newJInt(limit))
  result = call_402656510.call(path_402656511, query_402656512, nil, nil, nil)

var getAuthorizers* = Call_GetAuthorizers_402656485(name: "getAuthorizers",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/authorizers",
    validator: validate_GetAuthorizers_402656486, base: "/",
    makeUrl: url_GetAuthorizers_402656487, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBasePathMapping_402656546 = ref object of OpenApiRestCall_402656035
proc url_CreateBasePathMapping_402656548(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name"),
                 (kind: ConstantSegment, value: "/basepathmappings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateBasePathMapping_402656547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new <a>BasePathMapping</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domain_name: JString (required)
                                 ##              : [Required] The domain name of the <a>BasePathMapping</a> resource to create.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `domain_name` field"
  var valid_402656549 = path.getOrDefault("domain_name")
  valid_402656549 = validateParameter(valid_402656549, JString, required = true,
                                      default = nil)
  if valid_402656549 != nil:
    section.add "domain_name", valid_402656549
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656550 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656550 = validateParameter(valid_402656550, JString,
                                      required = false, default = nil)
  if valid_402656550 != nil:
    section.add "X-Amz-Security-Token", valid_402656550
  var valid_402656551 = header.getOrDefault("X-Amz-Signature")
  valid_402656551 = validateParameter(valid_402656551, JString,
                                      required = false, default = nil)
  if valid_402656551 != nil:
    section.add "X-Amz-Signature", valid_402656551
  var valid_402656552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656552 = validateParameter(valid_402656552, JString,
                                      required = false, default = nil)
  if valid_402656552 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656552
  var valid_402656553 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656553 = validateParameter(valid_402656553, JString,
                                      required = false, default = nil)
  if valid_402656553 != nil:
    section.add "X-Amz-Algorithm", valid_402656553
  var valid_402656554 = header.getOrDefault("X-Amz-Date")
  valid_402656554 = validateParameter(valid_402656554, JString,
                                      required = false, default = nil)
  if valid_402656554 != nil:
    section.add "X-Amz-Date", valid_402656554
  var valid_402656555 = header.getOrDefault("X-Amz-Credential")
  valid_402656555 = validateParameter(valid_402656555, JString,
                                      required = false, default = nil)
  if valid_402656555 != nil:
    section.add "X-Amz-Credential", valid_402656555
  var valid_402656556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656556 = validateParameter(valid_402656556, JString,
                                      required = false, default = nil)
  if valid_402656556 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656556
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656558: Call_CreateBasePathMapping_402656546;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new <a>BasePathMapping</a> resource.
                                                                                         ## 
  let valid = call_402656558.validator(path, query, header, formData, body, _)
  let scheme = call_402656558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656558.makeUrl(scheme.get, call_402656558.host, call_402656558.base,
                                   call_402656558.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656558, uri, valid, _)

proc call*(call_402656559: Call_CreateBasePathMapping_402656546;
           domainName: string; body: JsonNode): Recallable =
  ## createBasePathMapping
  ## Creates a new <a>BasePathMapping</a> resource.
  ##   domainName: string (required)
                                                   ##             : [Required] The domain name of the <a>BasePathMapping</a> resource to create.
  ##   
                                                                                                                                                ## body: JObject (required)
  var path_402656560 = newJObject()
  var body_402656561 = newJObject()
  add(path_402656560, "domain_name", newJString(domainName))
  if body != nil:
    body_402656561 = body
  result = call_402656559.call(path_402656560, nil, nil, nil, body_402656561)

var createBasePathMapping* = Call_CreateBasePathMapping_402656546(
    name: "createBasePathMapping", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com",
    route: "/domainnames/{domain_name}/basepathmappings",
    validator: validate_CreateBasePathMapping_402656547, base: "/",
    makeUrl: url_CreateBasePathMapping_402656548,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBasePathMappings_402656529 = ref object of OpenApiRestCall_402656035
proc url_GetBasePathMappings_402656531(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name"),
                 (kind: ConstantSegment, value: "/basepathmappings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetBasePathMappings_402656530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Represents a collection of <a>BasePathMapping</a> resources.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domain_name: JString (required)
                                 ##              : [Required] The domain name of a <a>BasePathMapping</a> resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `domain_name` field"
  var valid_402656532 = path.getOrDefault("domain_name")
  valid_402656532 = validateParameter(valid_402656532, JString, required = true,
                                      default = nil)
  if valid_402656532 != nil:
    section.add "domain_name", valid_402656532
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656533 = query.getOrDefault("position")
  valid_402656533 = validateParameter(valid_402656533, JString,
                                      required = false, default = nil)
  if valid_402656533 != nil:
    section.add "position", valid_402656533
  var valid_402656534 = query.getOrDefault("limit")
  valid_402656534 = validateParameter(valid_402656534, JInt, required = false,
                                      default = nil)
  if valid_402656534 != nil:
    section.add "limit", valid_402656534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656535 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656535 = validateParameter(valid_402656535, JString,
                                      required = false, default = nil)
  if valid_402656535 != nil:
    section.add "X-Amz-Security-Token", valid_402656535
  var valid_402656536 = header.getOrDefault("X-Amz-Signature")
  valid_402656536 = validateParameter(valid_402656536, JString,
                                      required = false, default = nil)
  if valid_402656536 != nil:
    section.add "X-Amz-Signature", valid_402656536
  var valid_402656537 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656537 = validateParameter(valid_402656537, JString,
                                      required = false, default = nil)
  if valid_402656537 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656537
  var valid_402656538 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656538 = validateParameter(valid_402656538, JString,
                                      required = false, default = nil)
  if valid_402656538 != nil:
    section.add "X-Amz-Algorithm", valid_402656538
  var valid_402656539 = header.getOrDefault("X-Amz-Date")
  valid_402656539 = validateParameter(valid_402656539, JString,
                                      required = false, default = nil)
  if valid_402656539 != nil:
    section.add "X-Amz-Date", valid_402656539
  var valid_402656540 = header.getOrDefault("X-Amz-Credential")
  valid_402656540 = validateParameter(valid_402656540, JString,
                                      required = false, default = nil)
  if valid_402656540 != nil:
    section.add "X-Amz-Credential", valid_402656540
  var valid_402656541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656541 = validateParameter(valid_402656541, JString,
                                      required = false, default = nil)
  if valid_402656541 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656542: Call_GetBasePathMappings_402656529;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents a collection of <a>BasePathMapping</a> resources.
                                                                                         ## 
  let valid = call_402656542.validator(path, query, header, formData, body, _)
  let scheme = call_402656542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656542.makeUrl(scheme.get, call_402656542.host, call_402656542.base,
                                   call_402656542.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656542, uri, valid, _)

proc call*(call_402656543: Call_GetBasePathMappings_402656529;
           domainName: string; position: string = ""; limit: int = 0): Recallable =
  ## getBasePathMappings
  ## Represents a collection of <a>BasePathMapping</a> resources.
  ##   position: string
                                                                 ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                        ## domainName: string (required)
                                                                                                                                        ##             
                                                                                                                                        ## : 
                                                                                                                                        ## [Required] 
                                                                                                                                        ## The 
                                                                                                                                        ## domain 
                                                                                                                                        ## name 
                                                                                                                                        ## of 
                                                                                                                                        ## a 
                                                                                                                                        ## <a>BasePathMapping</a> 
                                                                                                                                        ## resource.
  ##   
                                                                                                                                                    ## limit: int
                                                                                                                                                    ##        
                                                                                                                                                    ## : 
                                                                                                                                                    ## The 
                                                                                                                                                    ## maximum 
                                                                                                                                                    ## number 
                                                                                                                                                    ## of 
                                                                                                                                                    ## returned 
                                                                                                                                                    ## results 
                                                                                                                                                    ## per 
                                                                                                                                                    ## page. 
                                                                                                                                                    ## The 
                                                                                                                                                    ## default 
                                                                                                                                                    ## value 
                                                                                                                                                    ## is 
                                                                                                                                                    ## 25 
                                                                                                                                                    ## and 
                                                                                                                                                    ## the 
                                                                                                                                                    ## maximum 
                                                                                                                                                    ## value 
                                                                                                                                                    ## is 
                                                                                                                                                    ## 500.
  var path_402656544 = newJObject()
  var query_402656545 = newJObject()
  add(query_402656545, "position", newJString(position))
  add(path_402656544, "domain_name", newJString(domainName))
  add(query_402656545, "limit", newJInt(limit))
  result = call_402656543.call(path_402656544, query_402656545, nil, nil, nil)

var getBasePathMappings* = Call_GetBasePathMappings_402656529(
    name: "getBasePathMappings", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/domainnames/{domain_name}/basepathmappings",
    validator: validate_GetBasePathMappings_402656530, base: "/",
    makeUrl: url_GetBasePathMappings_402656531,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDeployment_402656579 = ref object of OpenApiRestCall_402656035
proc url_CreateDeployment_402656581(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateDeployment_402656580(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a <a>Deployment</a> resource, which makes a specified <a>RestApi</a> callable over the internet.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656582 = path.getOrDefault("restapi_id")
  valid_402656582 = validateParameter(valid_402656582, JString, required = true,
                                      default = nil)
  if valid_402656582 != nil:
    section.add "restapi_id", valid_402656582
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656583 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656583 = validateParameter(valid_402656583, JString,
                                      required = false, default = nil)
  if valid_402656583 != nil:
    section.add "X-Amz-Security-Token", valid_402656583
  var valid_402656584 = header.getOrDefault("X-Amz-Signature")
  valid_402656584 = validateParameter(valid_402656584, JString,
                                      required = false, default = nil)
  if valid_402656584 != nil:
    section.add "X-Amz-Signature", valid_402656584
  var valid_402656585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656585 = validateParameter(valid_402656585, JString,
                                      required = false, default = nil)
  if valid_402656585 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656585
  var valid_402656586 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656586 = validateParameter(valid_402656586, JString,
                                      required = false, default = nil)
  if valid_402656586 != nil:
    section.add "X-Amz-Algorithm", valid_402656586
  var valid_402656587 = header.getOrDefault("X-Amz-Date")
  valid_402656587 = validateParameter(valid_402656587, JString,
                                      required = false, default = nil)
  if valid_402656587 != nil:
    section.add "X-Amz-Date", valid_402656587
  var valid_402656588 = header.getOrDefault("X-Amz-Credential")
  valid_402656588 = validateParameter(valid_402656588, JString,
                                      required = false, default = nil)
  if valid_402656588 != nil:
    section.add "X-Amz-Credential", valid_402656588
  var valid_402656589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656589 = validateParameter(valid_402656589, JString,
                                      required = false, default = nil)
  if valid_402656589 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656589
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656591: Call_CreateDeployment_402656579;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a <a>Deployment</a> resource, which makes a specified <a>RestApi</a> callable over the internet.
                                                                                         ## 
  let valid = call_402656591.validator(path, query, header, formData, body, _)
  let scheme = call_402656591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656591.makeUrl(scheme.get, call_402656591.host, call_402656591.base,
                                   call_402656591.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656591, uri, valid, _)

proc call*(call_402656592: Call_CreateDeployment_402656579; restapiId: string;
           body: JsonNode): Recallable =
  ## createDeployment
  ## Creates a <a>Deployment</a> resource, which makes a specified <a>RestApi</a> callable over the internet.
  ##   
                                                                                                             ## restapiId: string (required)
                                                                                                             ##            
                                                                                                             ## : 
                                                                                                             ## [Required] 
                                                                                                             ## The 
                                                                                                             ## string 
                                                                                                             ## identifier 
                                                                                                             ## of 
                                                                                                             ## the 
                                                                                                             ## associated 
                                                                                                             ## <a>RestApi</a>.
  ##   
                                                                                                                               ## body: JObject (required)
  var path_402656593 = newJObject()
  var body_402656594 = newJObject()
  add(path_402656593, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656594 = body
  result = call_402656592.call(path_402656593, nil, nil, nil, body_402656594)

var createDeployment* = Call_CreateDeployment_402656579(
    name: "createDeployment", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/deployments",
    validator: validate_CreateDeployment_402656580, base: "/",
    makeUrl: url_CreateDeployment_402656581,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployments_402656562 = ref object of OpenApiRestCall_402656035
proc url_GetDeployments_402656564(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetDeployments_402656563(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a <a>Deployments</a> collection.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656565 = path.getOrDefault("restapi_id")
  valid_402656565 = validateParameter(valid_402656565, JString, required = true,
                                      default = nil)
  if valid_402656565 != nil:
    section.add "restapi_id", valid_402656565
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656566 = query.getOrDefault("position")
  valid_402656566 = validateParameter(valid_402656566, JString,
                                      required = false, default = nil)
  if valid_402656566 != nil:
    section.add "position", valid_402656566
  var valid_402656567 = query.getOrDefault("limit")
  valid_402656567 = validateParameter(valid_402656567, JInt, required = false,
                                      default = nil)
  if valid_402656567 != nil:
    section.add "limit", valid_402656567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656568 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656568 = validateParameter(valid_402656568, JString,
                                      required = false, default = nil)
  if valid_402656568 != nil:
    section.add "X-Amz-Security-Token", valid_402656568
  var valid_402656569 = header.getOrDefault("X-Amz-Signature")
  valid_402656569 = validateParameter(valid_402656569, JString,
                                      required = false, default = nil)
  if valid_402656569 != nil:
    section.add "X-Amz-Signature", valid_402656569
  var valid_402656570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656570 = validateParameter(valid_402656570, JString,
                                      required = false, default = nil)
  if valid_402656570 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656570
  var valid_402656571 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656571 = validateParameter(valid_402656571, JString,
                                      required = false, default = nil)
  if valid_402656571 != nil:
    section.add "X-Amz-Algorithm", valid_402656571
  var valid_402656572 = header.getOrDefault("X-Amz-Date")
  valid_402656572 = validateParameter(valid_402656572, JString,
                                      required = false, default = nil)
  if valid_402656572 != nil:
    section.add "X-Amz-Date", valid_402656572
  var valid_402656573 = header.getOrDefault("X-Amz-Credential")
  valid_402656573 = validateParameter(valid_402656573, JString,
                                      required = false, default = nil)
  if valid_402656573 != nil:
    section.add "X-Amz-Credential", valid_402656573
  var valid_402656574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656574 = validateParameter(valid_402656574, JString,
                                      required = false, default = nil)
  if valid_402656574 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656575: Call_GetDeployments_402656562; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a <a>Deployments</a> collection.
                                                                                         ## 
  let valid = call_402656575.validator(path, query, header, formData, body, _)
  let scheme = call_402656575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656575.makeUrl(scheme.get, call_402656575.host, call_402656575.base,
                                   call_402656575.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656575, uri, valid, _)

proc call*(call_402656576: Call_GetDeployments_402656562; restapiId: string;
           position: string = ""; limit: int = 0): Recallable =
  ## getDeployments
  ## Gets information about a <a>Deployments</a> collection.
  ##   position: string
                                                            ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                   ## restapiId: string (required)
                                                                                                                                   ##            
                                                                                                                                   ## : 
                                                                                                                                   ## [Required] 
                                                                                                                                   ## The 
                                                                                                                                   ## string 
                                                                                                                                   ## identifier 
                                                                                                                                   ## of 
                                                                                                                                   ## the 
                                                                                                                                   ## associated 
                                                                                                                                   ## <a>RestApi</a>.
  ##   
                                                                                                                                                     ## limit: int
                                                                                                                                                     ##        
                                                                                                                                                     ## : 
                                                                                                                                                     ## The 
                                                                                                                                                     ## maximum 
                                                                                                                                                     ## number 
                                                                                                                                                     ## of 
                                                                                                                                                     ## returned 
                                                                                                                                                     ## results 
                                                                                                                                                     ## per 
                                                                                                                                                     ## page. 
                                                                                                                                                     ## The 
                                                                                                                                                     ## default 
                                                                                                                                                     ## value 
                                                                                                                                                     ## is 
                                                                                                                                                     ## 25 
                                                                                                                                                     ## and 
                                                                                                                                                     ## the 
                                                                                                                                                     ## maximum 
                                                                                                                                                     ## value 
                                                                                                                                                     ## is 
                                                                                                                                                     ## 500.
  var path_402656577 = newJObject()
  var query_402656578 = newJObject()
  add(query_402656578, "position", newJString(position))
  add(path_402656577, "restapi_id", newJString(restapiId))
  add(query_402656578, "limit", newJInt(limit))
  result = call_402656576.call(path_402656577, query_402656578, nil, nil, nil)

var getDeployments* = Call_GetDeployments_402656562(name: "getDeployments",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/deployments",
    validator: validate_GetDeployments_402656563, base: "/",
    makeUrl: url_GetDeployments_402656564, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ImportDocumentationParts_402656628 = ref object of OpenApiRestCall_402656035
proc url_ImportDocumentationParts_402656630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/parts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ImportDocumentationParts_402656629(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656631 = path.getOrDefault("restapi_id")
  valid_402656631 = validateParameter(valid_402656631, JString, required = true,
                                      default = nil)
  if valid_402656631 != nil:
    section.add "restapi_id", valid_402656631
  result.add "path", section
  ## parameters in `query` object:
  ##   failonwarnings: JBool
                                  ##                 : A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
  ##   
                                                                                                                                                                                                                                                             ## mode: JString
                                                                                                                                                                                                                                                             ##       
                                                                                                                                                                                                                                                             ## : 
                                                                                                                                                                                                                                                             ## A 
                                                                                                                                                                                                                                                             ## query 
                                                                                                                                                                                                                                                             ## parameter 
                                                                                                                                                                                                                                                             ## to 
                                                                                                                                                                                                                                                             ## indicate 
                                                                                                                                                                                                                                                             ## whether 
                                                                                                                                                                                                                                                             ## to 
                                                                                                                                                                                                                                                             ## overwrite 
                                                                                                                                                                                                                                                             ## (<code>OVERWRITE</code>) 
                                                                                                                                                                                                                                                             ## any 
                                                                                                                                                                                                                                                             ## existing 
                                                                                                                                                                                                                                                             ## <a>DocumentationParts</a> 
                                                                                                                                                                                                                                                             ## definition 
                                                                                                                                                                                                                                                             ## or 
                                                                                                                                                                                                                                                             ## to 
                                                                                                                                                                                                                                                             ## merge 
                                                                                                                                                                                                                                                             ## (<code>MERGE</code>) 
                                                                                                                                                                                                                                                             ## the 
                                                                                                                                                                                                                                                             ## new 
                                                                                                                                                                                                                                                             ## definition 
                                                                                                                                                                                                                                                             ## into 
                                                                                                                                                                                                                                                             ## the 
                                                                                                                                                                                                                                                             ## existing 
                                                                                                                                                                                                                                                             ## one. 
                                                                                                                                                                                                                                                             ## The 
                                                                                                                                                                                                                                                             ## default 
                                                                                                                                                                                                                                                             ## value 
                                                                                                                                                                                                                                                             ## is 
                                                                                                                                                                                                                                                             ## <code>MERGE</code>.
  section = newJObject()
  var valid_402656632 = query.getOrDefault("failonwarnings")
  valid_402656632 = validateParameter(valid_402656632, JBool, required = false,
                                      default = nil)
  if valid_402656632 != nil:
    section.add "failonwarnings", valid_402656632
  var valid_402656633 = query.getOrDefault("mode")
  valid_402656633 = validateParameter(valid_402656633, JString,
                                      required = false,
                                      default = newJString("merge"))
  if valid_402656633 != nil:
    section.add "mode", valid_402656633
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656634 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656634 = validateParameter(valid_402656634, JString,
                                      required = false, default = nil)
  if valid_402656634 != nil:
    section.add "X-Amz-Security-Token", valid_402656634
  var valid_402656635 = header.getOrDefault("X-Amz-Signature")
  valid_402656635 = validateParameter(valid_402656635, JString,
                                      required = false, default = nil)
  if valid_402656635 != nil:
    section.add "X-Amz-Signature", valid_402656635
  var valid_402656636 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656636 = validateParameter(valid_402656636, JString,
                                      required = false, default = nil)
  if valid_402656636 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656636
  var valid_402656637 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656637 = validateParameter(valid_402656637, JString,
                                      required = false, default = nil)
  if valid_402656637 != nil:
    section.add "X-Amz-Algorithm", valid_402656637
  var valid_402656638 = header.getOrDefault("X-Amz-Date")
  valid_402656638 = validateParameter(valid_402656638, JString,
                                      required = false, default = nil)
  if valid_402656638 != nil:
    section.add "X-Amz-Date", valid_402656638
  var valid_402656639 = header.getOrDefault("X-Amz-Credential")
  valid_402656639 = validateParameter(valid_402656639, JString,
                                      required = false, default = nil)
  if valid_402656639 != nil:
    section.add "X-Amz-Credential", valid_402656639
  var valid_402656640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656640 = validateParameter(valid_402656640, JString,
                                      required = false, default = nil)
  if valid_402656640 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656640
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656642: Call_ImportDocumentationParts_402656628;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402656642.validator(path, query, header, formData, body, _)
  let scheme = call_402656642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656642.makeUrl(scheme.get, call_402656642.host, call_402656642.base,
                                   call_402656642.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656642, uri, valid, _)

proc call*(call_402656643: Call_ImportDocumentationParts_402656628;
           restapiId: string; body: JsonNode; failonwarnings: bool = false;
           mode: string = "merge"): Recallable =
  ## importDocumentationParts
  ##   failonwarnings: bool
                             ##                 : A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
  ##   
                                                                                                                                                                                                                                                        ## mode: string
                                                                                                                                                                                                                                                        ##       
                                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                                        ## A 
                                                                                                                                                                                                                                                        ## query 
                                                                                                                                                                                                                                                        ## parameter 
                                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                                        ## indicate 
                                                                                                                                                                                                                                                        ## whether 
                                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                                        ## overwrite 
                                                                                                                                                                                                                                                        ## (<code>OVERWRITE</code>) 
                                                                                                                                                                                                                                                        ## any 
                                                                                                                                                                                                                                                        ## existing 
                                                                                                                                                                                                                                                        ## <a>DocumentationParts</a> 
                                                                                                                                                                                                                                                        ## definition 
                                                                                                                                                                                                                                                        ## or 
                                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                                        ## merge 
                                                                                                                                                                                                                                                        ## (<code>MERGE</code>) 
                                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                                        ## new 
                                                                                                                                                                                                                                                        ## definition 
                                                                                                                                                                                                                                                        ## into 
                                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                                        ## existing 
                                                                                                                                                                                                                                                        ## one. 
                                                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                                                        ## default 
                                                                                                                                                                                                                                                        ## value 
                                                                                                                                                                                                                                                        ## is 
                                                                                                                                                                                                                                                        ## <code>MERGE</code>.
  ##   
                                                                                                                                                                                                                                                                              ## restapiId: string (required)
                                                                                                                                                                                                                                                                              ##            
                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                              ## [Required] 
                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                              ## string 
                                                                                                                                                                                                                                                                              ## identifier 
                                                                                                                                                                                                                                                                              ## of 
                                                                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                                                                              ## associated 
                                                                                                                                                                                                                                                                              ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                                                                                                ## body: JObject (required)
  var path_402656644 = newJObject()
  var query_402656645 = newJObject()
  var body_402656646 = newJObject()
  add(query_402656645, "failonwarnings", newJBool(failonwarnings))
  add(query_402656645, "mode", newJString(mode))
  add(path_402656644, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656646 = body
  result = call_402656643.call(path_402656644, query_402656645, nil, nil, body_402656646)

var importDocumentationParts* = Call_ImportDocumentationParts_402656628(
    name: "importDocumentationParts", meth: HttpMethod.HttpPut,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/parts",
    validator: validate_ImportDocumentationParts_402656629, base: "/",
    makeUrl: url_ImportDocumentationParts_402656630,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDocumentationPart_402656647 = ref object of OpenApiRestCall_402656035
proc url_CreateDocumentationPart_402656649(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/parts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateDocumentationPart_402656648(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656650 = path.getOrDefault("restapi_id")
  valid_402656650 = validateParameter(valid_402656650, JString, required = true,
                                      default = nil)
  if valid_402656650 != nil:
    section.add "restapi_id", valid_402656650
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656651 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656651 = validateParameter(valid_402656651, JString,
                                      required = false, default = nil)
  if valid_402656651 != nil:
    section.add "X-Amz-Security-Token", valid_402656651
  var valid_402656652 = header.getOrDefault("X-Amz-Signature")
  valid_402656652 = validateParameter(valid_402656652, JString,
                                      required = false, default = nil)
  if valid_402656652 != nil:
    section.add "X-Amz-Signature", valid_402656652
  var valid_402656653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656653 = validateParameter(valid_402656653, JString,
                                      required = false, default = nil)
  if valid_402656653 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656653
  var valid_402656654 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656654 = validateParameter(valid_402656654, JString,
                                      required = false, default = nil)
  if valid_402656654 != nil:
    section.add "X-Amz-Algorithm", valid_402656654
  var valid_402656655 = header.getOrDefault("X-Amz-Date")
  valid_402656655 = validateParameter(valid_402656655, JString,
                                      required = false, default = nil)
  if valid_402656655 != nil:
    section.add "X-Amz-Date", valid_402656655
  var valid_402656656 = header.getOrDefault("X-Amz-Credential")
  valid_402656656 = validateParameter(valid_402656656, JString,
                                      required = false, default = nil)
  if valid_402656656 != nil:
    section.add "X-Amz-Credential", valid_402656656
  var valid_402656657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656657 = validateParameter(valid_402656657, JString,
                                      required = false, default = nil)
  if valid_402656657 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656659: Call_CreateDocumentationPart_402656647;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402656659.validator(path, query, header, formData, body, _)
  let scheme = call_402656659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656659.makeUrl(scheme.get, call_402656659.host, call_402656659.base,
                                   call_402656659.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656659, uri, valid, _)

proc call*(call_402656660: Call_CreateDocumentationPart_402656647;
           restapiId: string; body: JsonNode): Recallable =
  ## createDocumentationPart
  ##   restapiId: string (required)
                            ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                              ## body: JObject (required)
  var path_402656661 = newJObject()
  var body_402656662 = newJObject()
  add(path_402656661, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656662 = body
  result = call_402656660.call(path_402656661, nil, nil, nil, body_402656662)

var createDocumentationPart* = Call_CreateDocumentationPart_402656647(
    name: "createDocumentationPart", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/parts",
    validator: validate_CreateDocumentationPart_402656648, base: "/",
    makeUrl: url_CreateDocumentationPart_402656649,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDocumentationParts_402656595 = ref object of OpenApiRestCall_402656035
proc url_GetDocumentationParts_402656597(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/parts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetDocumentationParts_402656596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656598 = path.getOrDefault("restapi_id")
  valid_402656598 = validateParameter(valid_402656598, JString, required = true,
                                      default = nil)
  if valid_402656598 != nil:
    section.add "restapi_id", valid_402656598
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## path: JString
                                                                                                         ##       
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## path 
                                                                                                         ## of 
                                                                                                         ## API 
                                                                                                         ## entities 
                                                                                                         ## of 
                                                                                                         ## the 
                                                                                                         ## to-be-retrieved 
                                                                                                         ## documentation 
                                                                                                         ## parts.
  ##   
                                                                                                                  ## locationStatus: JString
                                                                                                                  ##                 
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## status 
                                                                                                                  ## of 
                                                                                                                  ## the 
                                                                                                                  ## API 
                                                                                                                  ## documentation 
                                                                                                                  ## parts 
                                                                                                                  ## to 
                                                                                                                  ## retrieve. 
                                                                                                                  ## Valid 
                                                                                                                  ## values 
                                                                                                                  ## are 
                                                                                                                  ## <code>DOCUMENTED</code> 
                                                                                                                  ## for 
                                                                                                                  ## retrieving 
                                                                                                                  ## <a>DocumentationPart</a> 
                                                                                                                  ## resources 
                                                                                                                  ## with 
                                                                                                                  ## content 
                                                                                                                  ## and 
                                                                                                                  ## <code>UNDOCUMENTED</code> 
                                                                                                                  ## for 
                                                                                                                  ## <a>DocumentationPart</a> 
                                                                                                                  ## resources 
                                                                                                                  ## without 
                                                                                                                  ## content.
  ##   
                                                                                                                             ## name: JString
                                                                                                                             ##       
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## name 
                                                                                                                             ## of 
                                                                                                                             ## API 
                                                                                                                             ## entities 
                                                                                                                             ## of 
                                                                                                                             ## the 
                                                                                                                             ## to-be-retrieved 
                                                                                                                             ## documentation 
                                                                                                                             ## parts.
  ##   
                                                                                                                                      ## limit: JInt
                                                                                                                                      ##        
                                                                                                                                      ## : 
                                                                                                                                      ## The 
                                                                                                                                      ## maximum 
                                                                                                                                      ## number 
                                                                                                                                      ## of 
                                                                                                                                      ## returned 
                                                                                                                                      ## results 
                                                                                                                                      ## per 
                                                                                                                                      ## page. 
                                                                                                                                      ## The 
                                                                                                                                      ## default 
                                                                                                                                      ## value 
                                                                                                                                      ## is 
                                                                                                                                      ## 25 
                                                                                                                                      ## and 
                                                                                                                                      ## the 
                                                                                                                                      ## maximum 
                                                                                                                                      ## value 
                                                                                                                                      ## is 
                                                                                                                                      ## 500.
  ##   
                                                                                                                                             ## type: JString
                                                                                                                                             ##       
                                                                                                                                             ## : 
                                                                                                                                             ## The 
                                                                                                                                             ## type 
                                                                                                                                             ## of 
                                                                                                                                             ## API 
                                                                                                                                             ## entities 
                                                                                                                                             ## of 
                                                                                                                                             ## the 
                                                                                                                                             ## to-be-retrieved 
                                                                                                                                             ## documentation 
                                                                                                                                             ## parts. 
  section = newJObject()
  var valid_402656599 = query.getOrDefault("position")
  valid_402656599 = validateParameter(valid_402656599, JString,
                                      required = false, default = nil)
  if valid_402656599 != nil:
    section.add "position", valid_402656599
  var valid_402656600 = query.getOrDefault("path")
  valid_402656600 = validateParameter(valid_402656600, JString,
                                      required = false, default = nil)
  if valid_402656600 != nil:
    section.add "path", valid_402656600
  var valid_402656613 = query.getOrDefault("locationStatus")
  valid_402656613 = validateParameter(valid_402656613, JString,
                                      required = false,
                                      default = newJString("DOCUMENTED"))
  if valid_402656613 != nil:
    section.add "locationStatus", valid_402656613
  var valid_402656614 = query.getOrDefault("name")
  valid_402656614 = validateParameter(valid_402656614, JString,
                                      required = false, default = nil)
  if valid_402656614 != nil:
    section.add "name", valid_402656614
  var valid_402656615 = query.getOrDefault("limit")
  valid_402656615 = validateParameter(valid_402656615, JInt, required = false,
                                      default = nil)
  if valid_402656615 != nil:
    section.add "limit", valid_402656615
  var valid_402656616 = query.getOrDefault("type")
  valid_402656616 = validateParameter(valid_402656616, JString,
                                      required = false,
                                      default = newJString("API"))
  if valid_402656616 != nil:
    section.add "type", valid_402656616
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656617 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656617 = validateParameter(valid_402656617, JString,
                                      required = false, default = nil)
  if valid_402656617 != nil:
    section.add "X-Amz-Security-Token", valid_402656617
  var valid_402656618 = header.getOrDefault("X-Amz-Signature")
  valid_402656618 = validateParameter(valid_402656618, JString,
                                      required = false, default = nil)
  if valid_402656618 != nil:
    section.add "X-Amz-Signature", valid_402656618
  var valid_402656619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656619 = validateParameter(valid_402656619, JString,
                                      required = false, default = nil)
  if valid_402656619 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656619
  var valid_402656620 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656620 = validateParameter(valid_402656620, JString,
                                      required = false, default = nil)
  if valid_402656620 != nil:
    section.add "X-Amz-Algorithm", valid_402656620
  var valid_402656621 = header.getOrDefault("X-Amz-Date")
  valid_402656621 = validateParameter(valid_402656621, JString,
                                      required = false, default = nil)
  if valid_402656621 != nil:
    section.add "X-Amz-Date", valid_402656621
  var valid_402656622 = header.getOrDefault("X-Amz-Credential")
  valid_402656622 = validateParameter(valid_402656622, JString,
                                      required = false, default = nil)
  if valid_402656622 != nil:
    section.add "X-Amz-Credential", valid_402656622
  var valid_402656623 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656623 = validateParameter(valid_402656623, JString,
                                      required = false, default = nil)
  if valid_402656623 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656623
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656624: Call_GetDocumentationParts_402656595;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402656624.validator(path, query, header, formData, body, _)
  let scheme = call_402656624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656624.makeUrl(scheme.get, call_402656624.host, call_402656624.base,
                                   call_402656624.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656624, uri, valid, _)

proc call*(call_402656625: Call_GetDocumentationParts_402656595;
           restapiId: string; position: string = ""; path: string = "";
           locationStatus: string = "DOCUMENTED"; name: string = "";
           limit: int = 0; `type`: string = "API"): Recallable =
  ## getDocumentationParts
  ##   position: string
                          ##           : The current pagination position in the paged result set.
  ##   
                                                                                                 ## path: string
                                                                                                 ##       
                                                                                                 ## : 
                                                                                                 ## The 
                                                                                                 ## path 
                                                                                                 ## of 
                                                                                                 ## API 
                                                                                                 ## entities 
                                                                                                 ## of 
                                                                                                 ## the 
                                                                                                 ## to-be-retrieved 
                                                                                                 ## documentation 
                                                                                                 ## parts.
  ##   
                                                                                                          ## restapiId: string (required)
                                                                                                          ##            
                                                                                                          ## : 
                                                                                                          ## [Required] 
                                                                                                          ## The 
                                                                                                          ## string 
                                                                                                          ## identifier 
                                                                                                          ## of 
                                                                                                          ## the 
                                                                                                          ## associated 
                                                                                                          ## <a>RestApi</a>.
  ##   
                                                                                                                            ## locationStatus: string
                                                                                                                            ##                 
                                                                                                                            ## : 
                                                                                                                            ## The 
                                                                                                                            ## status 
                                                                                                                            ## of 
                                                                                                                            ## the 
                                                                                                                            ## API 
                                                                                                                            ## documentation 
                                                                                                                            ## parts 
                                                                                                                            ## to 
                                                                                                                            ## retrieve. 
                                                                                                                            ## Valid 
                                                                                                                            ## values 
                                                                                                                            ## are 
                                                                                                                            ## <code>DOCUMENTED</code> 
                                                                                                                            ## for 
                                                                                                                            ## retrieving 
                                                                                                                            ## <a>DocumentationPart</a> 
                                                                                                                            ## resources 
                                                                                                                            ## with 
                                                                                                                            ## content 
                                                                                                                            ## and 
                                                                                                                            ## <code>UNDOCUMENTED</code> 
                                                                                                                            ## for 
                                                                                                                            ## <a>DocumentationPart</a> 
                                                                                                                            ## resources 
                                                                                                                            ## without 
                                                                                                                            ## content.
  ##   
                                                                                                                                       ## name: string
                                                                                                                                       ##       
                                                                                                                                       ## : 
                                                                                                                                       ## The 
                                                                                                                                       ## name 
                                                                                                                                       ## of 
                                                                                                                                       ## API 
                                                                                                                                       ## entities 
                                                                                                                                       ## of 
                                                                                                                                       ## the 
                                                                                                                                       ## to-be-retrieved 
                                                                                                                                       ## documentation 
                                                                                                                                       ## parts.
  ##   
                                                                                                                                                ## limit: int
                                                                                                                                                ##        
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## maximum 
                                                                                                                                                ## number 
                                                                                                                                                ## of 
                                                                                                                                                ## returned 
                                                                                                                                                ## results 
                                                                                                                                                ## per 
                                                                                                                                                ## page. 
                                                                                                                                                ## The 
                                                                                                                                                ## default 
                                                                                                                                                ## value 
                                                                                                                                                ## is 
                                                                                                                                                ## 25 
                                                                                                                                                ## and 
                                                                                                                                                ## the 
                                                                                                                                                ## maximum 
                                                                                                                                                ## value 
                                                                                                                                                ## is 
                                                                                                                                                ## 500.
  ##   
                                                                                                                                                       ## type: string
                                                                                                                                                       ##       
                                                                                                                                                       ## : 
                                                                                                                                                       ## The 
                                                                                                                                                       ## type 
                                                                                                                                                       ## of 
                                                                                                                                                       ## API 
                                                                                                                                                       ## entities 
                                                                                                                                                       ## of 
                                                                                                                                                       ## the 
                                                                                                                                                       ## to-be-retrieved 
                                                                                                                                                       ## documentation 
                                                                                                                                                       ## parts. 
  var path_402656626 = newJObject()
  var query_402656627 = newJObject()
  add(query_402656627, "position", newJString(position))
  add(query_402656627, "path", newJString(path))
  add(path_402656626, "restapi_id", newJString(restapiId))
  add(query_402656627, "locationStatus", newJString(locationStatus))
  add(query_402656627, "name", newJString(name))
  add(query_402656627, "limit", newJInt(limit))
  add(query_402656627, "type", newJString(`type`))
  result = call_402656625.call(path_402656626, query_402656627, nil, nil, nil)

var getDocumentationParts* = Call_GetDocumentationParts_402656595(
    name: "getDocumentationParts", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/parts",
    validator: validate_GetDocumentationParts_402656596, base: "/",
    makeUrl: url_GetDocumentationParts_402656597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDocumentationVersion_402656680 = ref object of OpenApiRestCall_402656035
proc url_CreateDocumentationVersion_402656682(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/versions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateDocumentationVersion_402656681(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656683 = path.getOrDefault("restapi_id")
  valid_402656683 = validateParameter(valid_402656683, JString, required = true,
                                      default = nil)
  if valid_402656683 != nil:
    section.add "restapi_id", valid_402656683
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656684 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656684 = validateParameter(valid_402656684, JString,
                                      required = false, default = nil)
  if valid_402656684 != nil:
    section.add "X-Amz-Security-Token", valid_402656684
  var valid_402656685 = header.getOrDefault("X-Amz-Signature")
  valid_402656685 = validateParameter(valid_402656685, JString,
                                      required = false, default = nil)
  if valid_402656685 != nil:
    section.add "X-Amz-Signature", valid_402656685
  var valid_402656686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656686 = validateParameter(valid_402656686, JString,
                                      required = false, default = nil)
  if valid_402656686 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656686
  var valid_402656687 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656687 = validateParameter(valid_402656687, JString,
                                      required = false, default = nil)
  if valid_402656687 != nil:
    section.add "X-Amz-Algorithm", valid_402656687
  var valid_402656688 = header.getOrDefault("X-Amz-Date")
  valid_402656688 = validateParameter(valid_402656688, JString,
                                      required = false, default = nil)
  if valid_402656688 != nil:
    section.add "X-Amz-Date", valid_402656688
  var valid_402656689 = header.getOrDefault("X-Amz-Credential")
  valid_402656689 = validateParameter(valid_402656689, JString,
                                      required = false, default = nil)
  if valid_402656689 != nil:
    section.add "X-Amz-Credential", valid_402656689
  var valid_402656690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656690 = validateParameter(valid_402656690, JString,
                                      required = false, default = nil)
  if valid_402656690 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656690
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656692: Call_CreateDocumentationVersion_402656680;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402656692.validator(path, query, header, formData, body, _)
  let scheme = call_402656692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656692.makeUrl(scheme.get, call_402656692.host, call_402656692.base,
                                   call_402656692.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656692, uri, valid, _)

proc call*(call_402656693: Call_CreateDocumentationVersion_402656680;
           restapiId: string; body: JsonNode): Recallable =
  ## createDocumentationVersion
  ##   restapiId: string (required)
                               ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                 ## body: JObject (required)
  var path_402656694 = newJObject()
  var body_402656695 = newJObject()
  add(path_402656694, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656695 = body
  result = call_402656693.call(path_402656694, nil, nil, nil, body_402656695)

var createDocumentationVersion* = Call_CreateDocumentationVersion_402656680(
    name: "createDocumentationVersion", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/versions",
    validator: validate_CreateDocumentationVersion_402656681, base: "/",
    makeUrl: url_CreateDocumentationVersion_402656682,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDocumentationVersions_402656663 = ref object of OpenApiRestCall_402656035
proc url_GetDocumentationVersions_402656665(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/versions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetDocumentationVersions_402656664(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656666 = path.getOrDefault("restapi_id")
  valid_402656666 = validateParameter(valid_402656666, JString, required = true,
                                      default = nil)
  if valid_402656666 != nil:
    section.add "restapi_id", valid_402656666
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656667 = query.getOrDefault("position")
  valid_402656667 = validateParameter(valid_402656667, JString,
                                      required = false, default = nil)
  if valid_402656667 != nil:
    section.add "position", valid_402656667
  var valid_402656668 = query.getOrDefault("limit")
  valid_402656668 = validateParameter(valid_402656668, JInt, required = false,
                                      default = nil)
  if valid_402656668 != nil:
    section.add "limit", valid_402656668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656669 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656669 = validateParameter(valid_402656669, JString,
                                      required = false, default = nil)
  if valid_402656669 != nil:
    section.add "X-Amz-Security-Token", valid_402656669
  var valid_402656670 = header.getOrDefault("X-Amz-Signature")
  valid_402656670 = validateParameter(valid_402656670, JString,
                                      required = false, default = nil)
  if valid_402656670 != nil:
    section.add "X-Amz-Signature", valid_402656670
  var valid_402656671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656671 = validateParameter(valid_402656671, JString,
                                      required = false, default = nil)
  if valid_402656671 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656671
  var valid_402656672 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656672 = validateParameter(valid_402656672, JString,
                                      required = false, default = nil)
  if valid_402656672 != nil:
    section.add "X-Amz-Algorithm", valid_402656672
  var valid_402656673 = header.getOrDefault("X-Amz-Date")
  valid_402656673 = validateParameter(valid_402656673, JString,
                                      required = false, default = nil)
  if valid_402656673 != nil:
    section.add "X-Amz-Date", valid_402656673
  var valid_402656674 = header.getOrDefault("X-Amz-Credential")
  valid_402656674 = validateParameter(valid_402656674, JString,
                                      required = false, default = nil)
  if valid_402656674 != nil:
    section.add "X-Amz-Credential", valid_402656674
  var valid_402656675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656675 = validateParameter(valid_402656675, JString,
                                      required = false, default = nil)
  if valid_402656675 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656675
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656676: Call_GetDocumentationVersions_402656663;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402656676.validator(path, query, header, formData, body, _)
  let scheme = call_402656676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656676.makeUrl(scheme.get, call_402656676.host, call_402656676.base,
                                   call_402656676.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656676, uri, valid, _)

proc call*(call_402656677: Call_GetDocumentationVersions_402656663;
           restapiId: string; position: string = ""; limit: int = 0): Recallable =
  ## getDocumentationVersions
  ##   position: string
                             ##           : The current pagination position in the paged result set.
  ##   
                                                                                                    ## restapiId: string (required)
                                                                                                    ##            
                                                                                                    ## : 
                                                                                                    ## [Required] 
                                                                                                    ## The 
                                                                                                    ## string 
                                                                                                    ## identifier 
                                                                                                    ## of 
                                                                                                    ## the 
                                                                                                    ## associated 
                                                                                                    ## <a>RestApi</a>.
  ##   
                                                                                                                      ## limit: int
                                                                                                                      ##        
                                                                                                                      ## : 
                                                                                                                      ## The 
                                                                                                                      ## maximum 
                                                                                                                      ## number 
                                                                                                                      ## of 
                                                                                                                      ## returned 
                                                                                                                      ## results 
                                                                                                                      ## per 
                                                                                                                      ## page. 
                                                                                                                      ## The 
                                                                                                                      ## default 
                                                                                                                      ## value 
                                                                                                                      ## is 
                                                                                                                      ## 25 
                                                                                                                      ## and 
                                                                                                                      ## the 
                                                                                                                      ## maximum 
                                                                                                                      ## value 
                                                                                                                      ## is 
                                                                                                                      ## 500.
  var path_402656678 = newJObject()
  var query_402656679 = newJObject()
  add(query_402656679, "position", newJString(position))
  add(path_402656678, "restapi_id", newJString(restapiId))
  add(query_402656679, "limit", newJInt(limit))
  result = call_402656677.call(path_402656678, query_402656679, nil, nil, nil)

var getDocumentationVersions* = Call_GetDocumentationVersions_402656663(
    name: "getDocumentationVersions", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/versions",
    validator: validate_GetDocumentationVersions_402656664, base: "/",
    makeUrl: url_GetDocumentationVersions_402656665,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateDomainName_402656711 = ref object of OpenApiRestCall_402656035
proc url_CreateDomainName_402656713(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateDomainName_402656712(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new domain name.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656714 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656714 = validateParameter(valid_402656714, JString,
                                      required = false, default = nil)
  if valid_402656714 != nil:
    section.add "X-Amz-Security-Token", valid_402656714
  var valid_402656715 = header.getOrDefault("X-Amz-Signature")
  valid_402656715 = validateParameter(valid_402656715, JString,
                                      required = false, default = nil)
  if valid_402656715 != nil:
    section.add "X-Amz-Signature", valid_402656715
  var valid_402656716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656716 = validateParameter(valid_402656716, JString,
                                      required = false, default = nil)
  if valid_402656716 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656716
  var valid_402656717 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656717 = validateParameter(valid_402656717, JString,
                                      required = false, default = nil)
  if valid_402656717 != nil:
    section.add "X-Amz-Algorithm", valid_402656717
  var valid_402656718 = header.getOrDefault("X-Amz-Date")
  valid_402656718 = validateParameter(valid_402656718, JString,
                                      required = false, default = nil)
  if valid_402656718 != nil:
    section.add "X-Amz-Date", valid_402656718
  var valid_402656719 = header.getOrDefault("X-Amz-Credential")
  valid_402656719 = validateParameter(valid_402656719, JString,
                                      required = false, default = nil)
  if valid_402656719 != nil:
    section.add "X-Amz-Credential", valid_402656719
  var valid_402656720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656720 = validateParameter(valid_402656720, JString,
                                      required = false, default = nil)
  if valid_402656720 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656720
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656722: Call_CreateDomainName_402656711;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new domain name.
                                                                                         ## 
  let valid = call_402656722.validator(path, query, header, formData, body, _)
  let scheme = call_402656722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656722.makeUrl(scheme.get, call_402656722.host, call_402656722.base,
                                   call_402656722.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656722, uri, valid, _)

proc call*(call_402656723: Call_CreateDomainName_402656711; body: JsonNode): Recallable =
  ## createDomainName
  ## Creates a new domain name.
  ##   body: JObject (required)
  var body_402656724 = newJObject()
  if body != nil:
    body_402656724 = body
  result = call_402656723.call(nil, nil, nil, nil, body_402656724)

var createDomainName* = Call_CreateDomainName_402656711(
    name: "createDomainName", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com", route: "/domainnames",
    validator: validate_CreateDomainName_402656712, base: "/",
    makeUrl: url_CreateDomainName_402656713,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDomainNames_402656696 = ref object of OpenApiRestCall_402656035
proc url_GetDomainNames_402656698(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDomainNames_402656697(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Represents a collection of <a>DomainName</a> resources.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656699 = query.getOrDefault("position")
  valid_402656699 = validateParameter(valid_402656699, JString,
                                      required = false, default = nil)
  if valid_402656699 != nil:
    section.add "position", valid_402656699
  var valid_402656700 = query.getOrDefault("limit")
  valid_402656700 = validateParameter(valid_402656700, JInt, required = false,
                                      default = nil)
  if valid_402656700 != nil:
    section.add "limit", valid_402656700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656701 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656701 = validateParameter(valid_402656701, JString,
                                      required = false, default = nil)
  if valid_402656701 != nil:
    section.add "X-Amz-Security-Token", valid_402656701
  var valid_402656702 = header.getOrDefault("X-Amz-Signature")
  valid_402656702 = validateParameter(valid_402656702, JString,
                                      required = false, default = nil)
  if valid_402656702 != nil:
    section.add "X-Amz-Signature", valid_402656702
  var valid_402656703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656703 = validateParameter(valid_402656703, JString,
                                      required = false, default = nil)
  if valid_402656703 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656703
  var valid_402656704 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656704 = validateParameter(valid_402656704, JString,
                                      required = false, default = nil)
  if valid_402656704 != nil:
    section.add "X-Amz-Algorithm", valid_402656704
  var valid_402656705 = header.getOrDefault("X-Amz-Date")
  valid_402656705 = validateParameter(valid_402656705, JString,
                                      required = false, default = nil)
  if valid_402656705 != nil:
    section.add "X-Amz-Date", valid_402656705
  var valid_402656706 = header.getOrDefault("X-Amz-Credential")
  valid_402656706 = validateParameter(valid_402656706, JString,
                                      required = false, default = nil)
  if valid_402656706 != nil:
    section.add "X-Amz-Credential", valid_402656706
  var valid_402656707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656707 = validateParameter(valid_402656707, JString,
                                      required = false, default = nil)
  if valid_402656707 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656707
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656708: Call_GetDomainNames_402656696; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents a collection of <a>DomainName</a> resources.
                                                                                         ## 
  let valid = call_402656708.validator(path, query, header, formData, body, _)
  let scheme = call_402656708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656708.makeUrl(scheme.get, call_402656708.host, call_402656708.base,
                                   call_402656708.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656708, uri, valid, _)

proc call*(call_402656709: Call_GetDomainNames_402656696; position: string = "";
           limit: int = 0): Recallable =
  ## getDomainNames
  ## Represents a collection of <a>DomainName</a> resources.
  ##   position: string
                                                            ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                   ## limit: int
                                                                                                                                   ##        
                                                                                                                                   ## : 
                                                                                                                                   ## The 
                                                                                                                                   ## maximum 
                                                                                                                                   ## number 
                                                                                                                                   ## of 
                                                                                                                                   ## returned 
                                                                                                                                   ## results 
                                                                                                                                   ## per 
                                                                                                                                   ## page. 
                                                                                                                                   ## The 
                                                                                                                                   ## default 
                                                                                                                                   ## value 
                                                                                                                                   ## is 
                                                                                                                                   ## 25 
                                                                                                                                   ## and 
                                                                                                                                   ## the 
                                                                                                                                   ## maximum 
                                                                                                                                   ## value 
                                                                                                                                   ## is 
                                                                                                                                   ## 500.
  var query_402656710 = newJObject()
  add(query_402656710, "position", newJString(position))
  add(query_402656710, "limit", newJInt(limit))
  result = call_402656709.call(nil, query_402656710, nil, nil, nil)

var getDomainNames* = Call_GetDomainNames_402656696(name: "getDomainNames",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/domainnames", validator: validate_GetDomainNames_402656697,
    base: "/", makeUrl: url_GetDomainNames_402656698,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateModel_402656742 = ref object of OpenApiRestCall_402656035
proc url_CreateModel_402656744(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/models")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateModel_402656743(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds a new <a>Model</a> resource to an existing <a>RestApi</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The <a>RestApi</a> identifier under which the <a>Model</a> will be created.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656745 = path.getOrDefault("restapi_id")
  valid_402656745 = validateParameter(valid_402656745, JString, required = true,
                                      default = nil)
  if valid_402656745 != nil:
    section.add "restapi_id", valid_402656745
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656746 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656746 = validateParameter(valid_402656746, JString,
                                      required = false, default = nil)
  if valid_402656746 != nil:
    section.add "X-Amz-Security-Token", valid_402656746
  var valid_402656747 = header.getOrDefault("X-Amz-Signature")
  valid_402656747 = validateParameter(valid_402656747, JString,
                                      required = false, default = nil)
  if valid_402656747 != nil:
    section.add "X-Amz-Signature", valid_402656747
  var valid_402656748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656748 = validateParameter(valid_402656748, JString,
                                      required = false, default = nil)
  if valid_402656748 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656748
  var valid_402656749 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656749 = validateParameter(valid_402656749, JString,
                                      required = false, default = nil)
  if valid_402656749 != nil:
    section.add "X-Amz-Algorithm", valid_402656749
  var valid_402656750 = header.getOrDefault("X-Amz-Date")
  valid_402656750 = validateParameter(valid_402656750, JString,
                                      required = false, default = nil)
  if valid_402656750 != nil:
    section.add "X-Amz-Date", valid_402656750
  var valid_402656751 = header.getOrDefault("X-Amz-Credential")
  valid_402656751 = validateParameter(valid_402656751, JString,
                                      required = false, default = nil)
  if valid_402656751 != nil:
    section.add "X-Amz-Credential", valid_402656751
  var valid_402656752 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656752 = validateParameter(valid_402656752, JString,
                                      required = false, default = nil)
  if valid_402656752 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656752
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656754: Call_CreateModel_402656742; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a new <a>Model</a> resource to an existing <a>RestApi</a> resource.
                                                                                         ## 
  let valid = call_402656754.validator(path, query, header, formData, body, _)
  let scheme = call_402656754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656754.makeUrl(scheme.get, call_402656754.host, call_402656754.base,
                                   call_402656754.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656754, uri, valid, _)

proc call*(call_402656755: Call_CreateModel_402656742; restapiId: string;
           body: JsonNode): Recallable =
  ## createModel
  ## Adds a new <a>Model</a> resource to an existing <a>RestApi</a> resource.
  ##   
                                                                             ## restapiId: string (required)
                                                                             ##            
                                                                             ## : 
                                                                             ## [Required] 
                                                                             ## The 
                                                                             ## <a>RestApi</a> 
                                                                             ## identifier 
                                                                             ## under 
                                                                             ## which 
                                                                             ## the 
                                                                             ## <a>Model</a> 
                                                                             ## will 
                                                                             ## be 
                                                                             ## created.
  ##   
                                                                                        ## body: JObject (required)
  var path_402656756 = newJObject()
  var body_402656757 = newJObject()
  add(path_402656756, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656757 = body
  result = call_402656755.call(path_402656756, nil, nil, nil, body_402656757)

var createModel* = Call_CreateModel_402656742(name: "createModel",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/models", validator: validate_CreateModel_402656743,
    base: "/", makeUrl: url_CreateModel_402656744,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModels_402656725 = ref object of OpenApiRestCall_402656035
proc url_GetModels_402656727(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/models")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetModels_402656726(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes existing <a>Models</a> defined for a <a>RestApi</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656728 = path.getOrDefault("restapi_id")
  valid_402656728 = validateParameter(valid_402656728, JString, required = true,
                                      default = nil)
  if valid_402656728 != nil:
    section.add "restapi_id", valid_402656728
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656729 = query.getOrDefault("position")
  valid_402656729 = validateParameter(valid_402656729, JString,
                                      required = false, default = nil)
  if valid_402656729 != nil:
    section.add "position", valid_402656729
  var valid_402656730 = query.getOrDefault("limit")
  valid_402656730 = validateParameter(valid_402656730, JInt, required = false,
                                      default = nil)
  if valid_402656730 != nil:
    section.add "limit", valid_402656730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656731 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656731 = validateParameter(valid_402656731, JString,
                                      required = false, default = nil)
  if valid_402656731 != nil:
    section.add "X-Amz-Security-Token", valid_402656731
  var valid_402656732 = header.getOrDefault("X-Amz-Signature")
  valid_402656732 = validateParameter(valid_402656732, JString,
                                      required = false, default = nil)
  if valid_402656732 != nil:
    section.add "X-Amz-Signature", valid_402656732
  var valid_402656733 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656733 = validateParameter(valid_402656733, JString,
                                      required = false, default = nil)
  if valid_402656733 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656733
  var valid_402656734 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656734 = validateParameter(valid_402656734, JString,
                                      required = false, default = nil)
  if valid_402656734 != nil:
    section.add "X-Amz-Algorithm", valid_402656734
  var valid_402656735 = header.getOrDefault("X-Amz-Date")
  valid_402656735 = validateParameter(valid_402656735, JString,
                                      required = false, default = nil)
  if valid_402656735 != nil:
    section.add "X-Amz-Date", valid_402656735
  var valid_402656736 = header.getOrDefault("X-Amz-Credential")
  valid_402656736 = validateParameter(valid_402656736, JString,
                                      required = false, default = nil)
  if valid_402656736 != nil:
    section.add "X-Amz-Credential", valid_402656736
  var valid_402656737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656737 = validateParameter(valid_402656737, JString,
                                      required = false, default = nil)
  if valid_402656737 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656737
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656738: Call_GetModels_402656725; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes existing <a>Models</a> defined for a <a>RestApi</a> resource.
                                                                                         ## 
  let valid = call_402656738.validator(path, query, header, formData, body, _)
  let scheme = call_402656738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656738.makeUrl(scheme.get, call_402656738.host, call_402656738.base,
                                   call_402656738.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656738, uri, valid, _)

proc call*(call_402656739: Call_GetModels_402656725; restapiId: string;
           position: string = ""; limit: int = 0): Recallable =
  ## getModels
  ## Describes existing <a>Models</a> defined for a <a>RestApi</a> resource.
  ##   
                                                                            ## position: string
                                                                            ##           
                                                                            ## : 
                                                                            ## The 
                                                                            ## current 
                                                                            ## pagination 
                                                                            ## position 
                                                                            ## in 
                                                                            ## the 
                                                                            ## paged 
                                                                            ## result 
                                                                            ## set.
  ##   
                                                                                   ## restapiId: string (required)
                                                                                   ##            
                                                                                   ## : 
                                                                                   ## [Required] 
                                                                                   ## The 
                                                                                   ## string 
                                                                                   ## identifier 
                                                                                   ## of 
                                                                                   ## the 
                                                                                   ## associated 
                                                                                   ## <a>RestApi</a>.
  ##   
                                                                                                     ## limit: int
                                                                                                     ##        
                                                                                                     ## : 
                                                                                                     ## The 
                                                                                                     ## maximum 
                                                                                                     ## number 
                                                                                                     ## of 
                                                                                                     ## returned 
                                                                                                     ## results 
                                                                                                     ## per 
                                                                                                     ## page. 
                                                                                                     ## The 
                                                                                                     ## default 
                                                                                                     ## value 
                                                                                                     ## is 
                                                                                                     ## 25 
                                                                                                     ## and 
                                                                                                     ## the 
                                                                                                     ## maximum 
                                                                                                     ## value 
                                                                                                     ## is 
                                                                                                     ## 500.
  var path_402656740 = newJObject()
  var query_402656741 = newJObject()
  add(query_402656741, "position", newJString(position))
  add(path_402656740, "restapi_id", newJString(restapiId))
  add(query_402656741, "limit", newJInt(limit))
  result = call_402656739.call(path_402656740, query_402656741, nil, nil, nil)

var getModels* = Call_GetModels_402656725(name: "getModels",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/models", validator: validate_GetModels_402656726,
    base: "/", makeUrl: url_GetModels_402656727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRequestValidator_402656775 = ref object of OpenApiRestCall_402656035
proc url_CreateRequestValidator_402656777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/requestvalidators")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateRequestValidator_402656776(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a <a>ReqeustValidator</a> of a given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656778 = path.getOrDefault("restapi_id")
  valid_402656778 = validateParameter(valid_402656778, JString, required = true,
                                      default = nil)
  if valid_402656778 != nil:
    section.add "restapi_id", valid_402656778
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656779 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656779 = validateParameter(valid_402656779, JString,
                                      required = false, default = nil)
  if valid_402656779 != nil:
    section.add "X-Amz-Security-Token", valid_402656779
  var valid_402656780 = header.getOrDefault("X-Amz-Signature")
  valid_402656780 = validateParameter(valid_402656780, JString,
                                      required = false, default = nil)
  if valid_402656780 != nil:
    section.add "X-Amz-Signature", valid_402656780
  var valid_402656781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656781 = validateParameter(valid_402656781, JString,
                                      required = false, default = nil)
  if valid_402656781 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656781
  var valid_402656782 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656782 = validateParameter(valid_402656782, JString,
                                      required = false, default = nil)
  if valid_402656782 != nil:
    section.add "X-Amz-Algorithm", valid_402656782
  var valid_402656783 = header.getOrDefault("X-Amz-Date")
  valid_402656783 = validateParameter(valid_402656783, JString,
                                      required = false, default = nil)
  if valid_402656783 != nil:
    section.add "X-Amz-Date", valid_402656783
  var valid_402656784 = header.getOrDefault("X-Amz-Credential")
  valid_402656784 = validateParameter(valid_402656784, JString,
                                      required = false, default = nil)
  if valid_402656784 != nil:
    section.add "X-Amz-Credential", valid_402656784
  var valid_402656785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656785 = validateParameter(valid_402656785, JString,
                                      required = false, default = nil)
  if valid_402656785 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656785
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656787: Call_CreateRequestValidator_402656775;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a <a>ReqeustValidator</a> of a given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402656787.validator(path, query, header, formData, body, _)
  let scheme = call_402656787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656787.makeUrl(scheme.get, call_402656787.host, call_402656787.base,
                                   call_402656787.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656787, uri, valid, _)

proc call*(call_402656788: Call_CreateRequestValidator_402656775;
           restapiId: string; body: JsonNode): Recallable =
  ## createRequestValidator
  ## Creates a <a>ReqeustValidator</a> of a given <a>RestApi</a>.
  ##   restapiId: string (required)
                                                                 ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                                   ## body: JObject (required)
  var path_402656789 = newJObject()
  var body_402656790 = newJObject()
  add(path_402656789, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656790 = body
  result = call_402656788.call(path_402656789, nil, nil, nil, body_402656790)

var createRequestValidator* = Call_CreateRequestValidator_402656775(
    name: "createRequestValidator", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/requestvalidators",
    validator: validate_CreateRequestValidator_402656776, base: "/",
    makeUrl: url_CreateRequestValidator_402656777,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRequestValidators_402656758 = ref object of OpenApiRestCall_402656035
proc url_GetRequestValidators_402656760(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/requestvalidators")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetRequestValidators_402656759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the <a>RequestValidators</a> collection of a given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656761 = path.getOrDefault("restapi_id")
  valid_402656761 = validateParameter(valid_402656761, JString, required = true,
                                      default = nil)
  if valid_402656761 != nil:
    section.add "restapi_id", valid_402656761
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656762 = query.getOrDefault("position")
  valid_402656762 = validateParameter(valid_402656762, JString,
                                      required = false, default = nil)
  if valid_402656762 != nil:
    section.add "position", valid_402656762
  var valid_402656763 = query.getOrDefault("limit")
  valid_402656763 = validateParameter(valid_402656763, JInt, required = false,
                                      default = nil)
  if valid_402656763 != nil:
    section.add "limit", valid_402656763
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656764 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656764 = validateParameter(valid_402656764, JString,
                                      required = false, default = nil)
  if valid_402656764 != nil:
    section.add "X-Amz-Security-Token", valid_402656764
  var valid_402656765 = header.getOrDefault("X-Amz-Signature")
  valid_402656765 = validateParameter(valid_402656765, JString,
                                      required = false, default = nil)
  if valid_402656765 != nil:
    section.add "X-Amz-Signature", valid_402656765
  var valid_402656766 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656766 = validateParameter(valid_402656766, JString,
                                      required = false, default = nil)
  if valid_402656766 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656766
  var valid_402656767 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656767 = validateParameter(valid_402656767, JString,
                                      required = false, default = nil)
  if valid_402656767 != nil:
    section.add "X-Amz-Algorithm", valid_402656767
  var valid_402656768 = header.getOrDefault("X-Amz-Date")
  valid_402656768 = validateParameter(valid_402656768, JString,
                                      required = false, default = nil)
  if valid_402656768 != nil:
    section.add "X-Amz-Date", valid_402656768
  var valid_402656769 = header.getOrDefault("X-Amz-Credential")
  valid_402656769 = validateParameter(valid_402656769, JString,
                                      required = false, default = nil)
  if valid_402656769 != nil:
    section.add "X-Amz-Credential", valid_402656769
  var valid_402656770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656770 = validateParameter(valid_402656770, JString,
                                      required = false, default = nil)
  if valid_402656770 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656770
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656771: Call_GetRequestValidators_402656758;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the <a>RequestValidators</a> collection of a given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402656771.validator(path, query, header, formData, body, _)
  let scheme = call_402656771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656771.makeUrl(scheme.get, call_402656771.host, call_402656771.base,
                                   call_402656771.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656771, uri, valid, _)

proc call*(call_402656772: Call_GetRequestValidators_402656758;
           restapiId: string; position: string = ""; limit: int = 0): Recallable =
  ## getRequestValidators
  ## Gets the <a>RequestValidators</a> collection of a given <a>RestApi</a>.
  ##   
                                                                            ## position: string
                                                                            ##           
                                                                            ## : 
                                                                            ## The 
                                                                            ## current 
                                                                            ## pagination 
                                                                            ## position 
                                                                            ## in 
                                                                            ## the 
                                                                            ## paged 
                                                                            ## result 
                                                                            ## set.
  ##   
                                                                                   ## restapiId: string (required)
                                                                                   ##            
                                                                                   ## : 
                                                                                   ## [Required] 
                                                                                   ## The 
                                                                                   ## string 
                                                                                   ## identifier 
                                                                                   ## of 
                                                                                   ## the 
                                                                                   ## associated 
                                                                                   ## <a>RestApi</a>.
  ##   
                                                                                                     ## limit: int
                                                                                                     ##        
                                                                                                     ## : 
                                                                                                     ## The 
                                                                                                     ## maximum 
                                                                                                     ## number 
                                                                                                     ## of 
                                                                                                     ## returned 
                                                                                                     ## results 
                                                                                                     ## per 
                                                                                                     ## page. 
                                                                                                     ## The 
                                                                                                     ## default 
                                                                                                     ## value 
                                                                                                     ## is 
                                                                                                     ## 25 
                                                                                                     ## and 
                                                                                                     ## the 
                                                                                                     ## maximum 
                                                                                                     ## value 
                                                                                                     ## is 
                                                                                                     ## 500.
  var path_402656773 = newJObject()
  var query_402656774 = newJObject()
  add(query_402656774, "position", newJString(position))
  add(path_402656773, "restapi_id", newJString(restapiId))
  add(query_402656774, "limit", newJInt(limit))
  result = call_402656772.call(path_402656773, query_402656774, nil, nil, nil)

var getRequestValidators* = Call_GetRequestValidators_402656758(
    name: "getRequestValidators", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/requestvalidators",
    validator: validate_GetRequestValidators_402656759, base: "/",
    makeUrl: url_GetRequestValidators_402656760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateResource_402656791 = ref object of OpenApiRestCall_402656035
proc url_CreateResource_402656793(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "parent_id" in path, "`parent_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "parent_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateResource_402656792(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a <a>Resource</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   parent_id: JString (required)
                                 ##            : [Required] The parent resource's identifier.
  ##   
                                                                                             ## restapi_id: JString (required)
                                                                                             ##             
                                                                                             ## : 
                                                                                             ## [Required] 
                                                                                             ## The 
                                                                                             ## string 
                                                                                             ## identifier 
                                                                                             ## of 
                                                                                             ## the 
                                                                                             ## associated 
                                                                                             ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `parent_id` field"
  var valid_402656794 = path.getOrDefault("parent_id")
  valid_402656794 = validateParameter(valid_402656794, JString, required = true,
                                      default = nil)
  if valid_402656794 != nil:
    section.add "parent_id", valid_402656794
  var valid_402656795 = path.getOrDefault("restapi_id")
  valid_402656795 = validateParameter(valid_402656795, JString, required = true,
                                      default = nil)
  if valid_402656795 != nil:
    section.add "restapi_id", valid_402656795
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656796 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656796 = validateParameter(valid_402656796, JString,
                                      required = false, default = nil)
  if valid_402656796 != nil:
    section.add "X-Amz-Security-Token", valid_402656796
  var valid_402656797 = header.getOrDefault("X-Amz-Signature")
  valid_402656797 = validateParameter(valid_402656797, JString,
                                      required = false, default = nil)
  if valid_402656797 != nil:
    section.add "X-Amz-Signature", valid_402656797
  var valid_402656798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656798 = validateParameter(valid_402656798, JString,
                                      required = false, default = nil)
  if valid_402656798 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656798
  var valid_402656799 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656799 = validateParameter(valid_402656799, JString,
                                      required = false, default = nil)
  if valid_402656799 != nil:
    section.add "X-Amz-Algorithm", valid_402656799
  var valid_402656800 = header.getOrDefault("X-Amz-Date")
  valid_402656800 = validateParameter(valid_402656800, JString,
                                      required = false, default = nil)
  if valid_402656800 != nil:
    section.add "X-Amz-Date", valid_402656800
  var valid_402656801 = header.getOrDefault("X-Amz-Credential")
  valid_402656801 = validateParameter(valid_402656801, JString,
                                      required = false, default = nil)
  if valid_402656801 != nil:
    section.add "X-Amz-Credential", valid_402656801
  var valid_402656802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656802 = validateParameter(valid_402656802, JString,
                                      required = false, default = nil)
  if valid_402656802 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656802
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656804: Call_CreateResource_402656791; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a <a>Resource</a> resource.
                                                                                         ## 
  let valid = call_402656804.validator(path, query, header, formData, body, _)
  let scheme = call_402656804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656804.makeUrl(scheme.get, call_402656804.host, call_402656804.base,
                                   call_402656804.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656804, uri, valid, _)

proc call*(call_402656805: Call_CreateResource_402656791; parentId: string;
           restapiId: string; body: JsonNode): Recallable =
  ## createResource
  ## Creates a <a>Resource</a> resource.
  ##   parentId: string (required)
                                        ##           : [Required] The parent resource's identifier.
  ##   
                                                                                                   ## restapiId: string (required)
                                                                                                   ##            
                                                                                                   ## : 
                                                                                                   ## [Required] 
                                                                                                   ## The 
                                                                                                   ## string 
                                                                                                   ## identifier 
                                                                                                   ## of 
                                                                                                   ## the 
                                                                                                   ## associated 
                                                                                                   ## <a>RestApi</a>.
  ##   
                                                                                                                     ## body: JObject (required)
  var path_402656806 = newJObject()
  var body_402656807 = newJObject()
  add(path_402656806, "parent_id", newJString(parentId))
  add(path_402656806, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656807 = body
  result = call_402656805.call(path_402656806, nil, nil, nil, body_402656807)

var createResource* = Call_CreateResource_402656791(name: "createResource",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/resources/{parent_id}",
    validator: validate_CreateResource_402656792, base: "/",
    makeUrl: url_CreateResource_402656793, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRestApi_402656823 = ref object of OpenApiRestCall_402656035
proc url_CreateRestApi_402656825(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateRestApi_402656824(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new <a>RestApi</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656826 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656826 = validateParameter(valid_402656826, JString,
                                      required = false, default = nil)
  if valid_402656826 != nil:
    section.add "X-Amz-Security-Token", valid_402656826
  var valid_402656827 = header.getOrDefault("X-Amz-Signature")
  valid_402656827 = validateParameter(valid_402656827, JString,
                                      required = false, default = nil)
  if valid_402656827 != nil:
    section.add "X-Amz-Signature", valid_402656827
  var valid_402656828 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656828 = validateParameter(valid_402656828, JString,
                                      required = false, default = nil)
  if valid_402656828 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656828
  var valid_402656829 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656829 = validateParameter(valid_402656829, JString,
                                      required = false, default = nil)
  if valid_402656829 != nil:
    section.add "X-Amz-Algorithm", valid_402656829
  var valid_402656830 = header.getOrDefault("X-Amz-Date")
  valid_402656830 = validateParameter(valid_402656830, JString,
                                      required = false, default = nil)
  if valid_402656830 != nil:
    section.add "X-Amz-Date", valid_402656830
  var valid_402656831 = header.getOrDefault("X-Amz-Credential")
  valid_402656831 = validateParameter(valid_402656831, JString,
                                      required = false, default = nil)
  if valid_402656831 != nil:
    section.add "X-Amz-Credential", valid_402656831
  var valid_402656832 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656832 = validateParameter(valid_402656832, JString,
                                      required = false, default = nil)
  if valid_402656832 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656832
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656834: Call_CreateRestApi_402656823; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new <a>RestApi</a> resource.
                                                                                         ## 
  let valid = call_402656834.validator(path, query, header, formData, body, _)
  let scheme = call_402656834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656834.makeUrl(scheme.get, call_402656834.host, call_402656834.base,
                                   call_402656834.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656834, uri, valid, _)

proc call*(call_402656835: Call_CreateRestApi_402656823; body: JsonNode): Recallable =
  ## createRestApi
  ## Creates a new <a>RestApi</a> resource.
  ##   body: JObject (required)
  var body_402656836 = newJObject()
  if body != nil:
    body_402656836 = body
  result = call_402656835.call(nil, nil, nil, nil, body_402656836)

var createRestApi* = Call_CreateRestApi_402656823(name: "createRestApi",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/restapis", validator: validate_CreateRestApi_402656824, base: "/",
    makeUrl: url_CreateRestApi_402656825, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestApis_402656808 = ref object of OpenApiRestCall_402656035
proc url_GetRestApis_402656810(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestApis_402656809(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the <a>RestApis</a> resources for your collection.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656811 = query.getOrDefault("position")
  valid_402656811 = validateParameter(valid_402656811, JString,
                                      required = false, default = nil)
  if valid_402656811 != nil:
    section.add "position", valid_402656811
  var valid_402656812 = query.getOrDefault("limit")
  valid_402656812 = validateParameter(valid_402656812, JInt, required = false,
                                      default = nil)
  if valid_402656812 != nil:
    section.add "limit", valid_402656812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656813 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656813 = validateParameter(valid_402656813, JString,
                                      required = false, default = nil)
  if valid_402656813 != nil:
    section.add "X-Amz-Security-Token", valid_402656813
  var valid_402656814 = header.getOrDefault("X-Amz-Signature")
  valid_402656814 = validateParameter(valid_402656814, JString,
                                      required = false, default = nil)
  if valid_402656814 != nil:
    section.add "X-Amz-Signature", valid_402656814
  var valid_402656815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656815 = validateParameter(valid_402656815, JString,
                                      required = false, default = nil)
  if valid_402656815 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656815
  var valid_402656816 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656816 = validateParameter(valid_402656816, JString,
                                      required = false, default = nil)
  if valid_402656816 != nil:
    section.add "X-Amz-Algorithm", valid_402656816
  var valid_402656817 = header.getOrDefault("X-Amz-Date")
  valid_402656817 = validateParameter(valid_402656817, JString,
                                      required = false, default = nil)
  if valid_402656817 != nil:
    section.add "X-Amz-Date", valid_402656817
  var valid_402656818 = header.getOrDefault("X-Amz-Credential")
  valid_402656818 = validateParameter(valid_402656818, JString,
                                      required = false, default = nil)
  if valid_402656818 != nil:
    section.add "X-Amz-Credential", valid_402656818
  var valid_402656819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656819 = validateParameter(valid_402656819, JString,
                                      required = false, default = nil)
  if valid_402656819 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656819
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656820: Call_GetRestApis_402656808; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the <a>RestApis</a> resources for your collection.
                                                                                         ## 
  let valid = call_402656820.validator(path, query, header, formData, body, _)
  let scheme = call_402656820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656820.makeUrl(scheme.get, call_402656820.host, call_402656820.base,
                                   call_402656820.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656820, uri, valid, _)

proc call*(call_402656821: Call_GetRestApis_402656808; position: string = "";
           limit: int = 0): Recallable =
  ## getRestApis
  ## Lists the <a>RestApis</a> resources for your collection.
  ##   position: string
                                                             ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                    ## limit: int
                                                                                                                                    ##        
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## maximum 
                                                                                                                                    ## number 
                                                                                                                                    ## of 
                                                                                                                                    ## returned 
                                                                                                                                    ## results 
                                                                                                                                    ## per 
                                                                                                                                    ## page. 
                                                                                                                                    ## The 
                                                                                                                                    ## default 
                                                                                                                                    ## value 
                                                                                                                                    ## is 
                                                                                                                                    ## 25 
                                                                                                                                    ## and 
                                                                                                                                    ## the 
                                                                                                                                    ## maximum 
                                                                                                                                    ## value 
                                                                                                                                    ## is 
                                                                                                                                    ## 500.
  var query_402656822 = newJObject()
  add(query_402656822, "position", newJString(position))
  add(query_402656822, "limit", newJInt(limit))
  result = call_402656821.call(nil, query_402656822, nil, nil, nil)

var getRestApis* = Call_GetRestApis_402656808(name: "getRestApis",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis", validator: validate_GetRestApis_402656809, base: "/",
    makeUrl: url_GetRestApis_402656810, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateStage_402656853 = ref object of OpenApiRestCall_402656035
proc url_CreateStage_402656855(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateStage_402656854(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new <a>Stage</a> resource that references a pre-existing <a>Deployment</a> for the API. 
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656856 = path.getOrDefault("restapi_id")
  valid_402656856 = validateParameter(valid_402656856, JString, required = true,
                                      default = nil)
  if valid_402656856 != nil:
    section.add "restapi_id", valid_402656856
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656857 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656857 = validateParameter(valid_402656857, JString,
                                      required = false, default = nil)
  if valid_402656857 != nil:
    section.add "X-Amz-Security-Token", valid_402656857
  var valid_402656858 = header.getOrDefault("X-Amz-Signature")
  valid_402656858 = validateParameter(valid_402656858, JString,
                                      required = false, default = nil)
  if valid_402656858 != nil:
    section.add "X-Amz-Signature", valid_402656858
  var valid_402656859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656859 = validateParameter(valid_402656859, JString,
                                      required = false, default = nil)
  if valid_402656859 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656859
  var valid_402656860 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656860 = validateParameter(valid_402656860, JString,
                                      required = false, default = nil)
  if valid_402656860 != nil:
    section.add "X-Amz-Algorithm", valid_402656860
  var valid_402656861 = header.getOrDefault("X-Amz-Date")
  valid_402656861 = validateParameter(valid_402656861, JString,
                                      required = false, default = nil)
  if valid_402656861 != nil:
    section.add "X-Amz-Date", valid_402656861
  var valid_402656862 = header.getOrDefault("X-Amz-Credential")
  valid_402656862 = validateParameter(valid_402656862, JString,
                                      required = false, default = nil)
  if valid_402656862 != nil:
    section.add "X-Amz-Credential", valid_402656862
  var valid_402656863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656863 = validateParameter(valid_402656863, JString,
                                      required = false, default = nil)
  if valid_402656863 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656865: Call_CreateStage_402656853; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new <a>Stage</a> resource that references a pre-existing <a>Deployment</a> for the API. 
                                                                                         ## 
  let valid = call_402656865.validator(path, query, header, formData, body, _)
  let scheme = call_402656865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656865.makeUrl(scheme.get, call_402656865.host, call_402656865.base,
                                   call_402656865.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656865, uri, valid, _)

proc call*(call_402656866: Call_CreateStage_402656853; restapiId: string;
           body: JsonNode): Recallable =
  ## createStage
  ## Creates a new <a>Stage</a> resource that references a pre-existing <a>Deployment</a> for the API. 
  ##   
                                                                                                       ## restapiId: string (required)
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## [Required] 
                                                                                                       ## The 
                                                                                                       ## string 
                                                                                                       ## identifier 
                                                                                                       ## of 
                                                                                                       ## the 
                                                                                                       ## associated 
                                                                                                       ## <a>RestApi</a>.
  ##   
                                                                                                                         ## body: JObject (required)
  var path_402656867 = newJObject()
  var body_402656868 = newJObject()
  add(path_402656867, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402656868 = body
  result = call_402656866.call(path_402656867, nil, nil, nil, body_402656868)

var createStage* = Call_CreateStage_402656853(name: "createStage",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/stages", validator: validate_CreateStage_402656854,
    base: "/", makeUrl: url_CreateStage_402656855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStages_402656837 = ref object of OpenApiRestCall_402656035
proc url_GetStages_402656839(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetStages_402656838(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about one or more <a>Stage</a> resources.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402656840 = path.getOrDefault("restapi_id")
  valid_402656840 = validateParameter(valid_402656840, JString, required = true,
                                      default = nil)
  if valid_402656840 != nil:
    section.add "restapi_id", valid_402656840
  result.add "path", section
  ## parameters in `query` object:
  ##   deploymentId: JString
                                  ##               : The stages' deployment identifiers.
  section = newJObject()
  var valid_402656841 = query.getOrDefault("deploymentId")
  valid_402656841 = validateParameter(valid_402656841, JString,
                                      required = false, default = nil)
  if valid_402656841 != nil:
    section.add "deploymentId", valid_402656841
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656842 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656842 = validateParameter(valid_402656842, JString,
                                      required = false, default = nil)
  if valid_402656842 != nil:
    section.add "X-Amz-Security-Token", valid_402656842
  var valid_402656843 = header.getOrDefault("X-Amz-Signature")
  valid_402656843 = validateParameter(valid_402656843, JString,
                                      required = false, default = nil)
  if valid_402656843 != nil:
    section.add "X-Amz-Signature", valid_402656843
  var valid_402656844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656844 = validateParameter(valid_402656844, JString,
                                      required = false, default = nil)
  if valid_402656844 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656844
  var valid_402656845 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656845 = validateParameter(valid_402656845, JString,
                                      required = false, default = nil)
  if valid_402656845 != nil:
    section.add "X-Amz-Algorithm", valid_402656845
  var valid_402656846 = header.getOrDefault("X-Amz-Date")
  valid_402656846 = validateParameter(valid_402656846, JString,
                                      required = false, default = nil)
  if valid_402656846 != nil:
    section.add "X-Amz-Date", valid_402656846
  var valid_402656847 = header.getOrDefault("X-Amz-Credential")
  valid_402656847 = validateParameter(valid_402656847, JString,
                                      required = false, default = nil)
  if valid_402656847 != nil:
    section.add "X-Amz-Credential", valid_402656847
  var valid_402656848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656848 = validateParameter(valid_402656848, JString,
                                      required = false, default = nil)
  if valid_402656848 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656848
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656849: Call_GetStages_402656837; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about one or more <a>Stage</a> resources.
                                                                                         ## 
  let valid = call_402656849.validator(path, query, header, formData, body, _)
  let scheme = call_402656849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656849.makeUrl(scheme.get, call_402656849.host, call_402656849.base,
                                   call_402656849.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656849, uri, valid, _)

proc call*(call_402656850: Call_GetStages_402656837; restapiId: string;
           deploymentId: string = ""): Recallable =
  ## getStages
  ## Gets information about one or more <a>Stage</a> resources.
  ##   deploymentId: string
                                                               ##               : The stages' deployment identifiers.
  ##   
                                                                                                                     ## restapiId: string (required)
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## [Required] 
                                                                                                                     ## The 
                                                                                                                     ## string 
                                                                                                                     ## identifier 
                                                                                                                     ## of 
                                                                                                                     ## the 
                                                                                                                     ## associated 
                                                                                                                     ## <a>RestApi</a>.
  var path_402656851 = newJObject()
  var query_402656852 = newJObject()
  add(query_402656852, "deploymentId", newJString(deploymentId))
  add(path_402656851, "restapi_id", newJString(restapiId))
  result = call_402656850.call(path_402656851, query_402656852, nil, nil, nil)

var getStages* = Call_GetStages_402656837(name: "getStages",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/stages", validator: validate_GetStages_402656838,
    base: "/", makeUrl: url_GetStages_402656839,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateUsagePlan_402656885 = ref object of OpenApiRestCall_402656035
proc url_CreateUsagePlan_402656887(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateUsagePlan_402656886(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. 
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656888 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656888 = validateParameter(valid_402656888, JString,
                                      required = false, default = nil)
  if valid_402656888 != nil:
    section.add "X-Amz-Security-Token", valid_402656888
  var valid_402656889 = header.getOrDefault("X-Amz-Signature")
  valid_402656889 = validateParameter(valid_402656889, JString,
                                      required = false, default = nil)
  if valid_402656889 != nil:
    section.add "X-Amz-Signature", valid_402656889
  var valid_402656890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656890 = validateParameter(valid_402656890, JString,
                                      required = false, default = nil)
  if valid_402656890 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656890
  var valid_402656891 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656891 = validateParameter(valid_402656891, JString,
                                      required = false, default = nil)
  if valid_402656891 != nil:
    section.add "X-Amz-Algorithm", valid_402656891
  var valid_402656892 = header.getOrDefault("X-Amz-Date")
  valid_402656892 = validateParameter(valid_402656892, JString,
                                      required = false, default = nil)
  if valid_402656892 != nil:
    section.add "X-Amz-Date", valid_402656892
  var valid_402656893 = header.getOrDefault("X-Amz-Credential")
  valid_402656893 = validateParameter(valid_402656893, JString,
                                      required = false, default = nil)
  if valid_402656893 != nil:
    section.add "X-Amz-Credential", valid_402656893
  var valid_402656894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656894 = validateParameter(valid_402656894, JString,
                                      required = false, default = nil)
  if valid_402656894 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656894
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656896: Call_CreateUsagePlan_402656885; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. 
                                                                                         ## 
  let valid = call_402656896.validator(path, query, header, formData, body, _)
  let scheme = call_402656896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656896.makeUrl(scheme.get, call_402656896.host, call_402656896.base,
                                   call_402656896.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656896, uri, valid, _)

proc call*(call_402656897: Call_CreateUsagePlan_402656885; body: JsonNode): Recallable =
  ## createUsagePlan
  ## Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. 
  ##   
                                                                                                                              ## body: JObject (required)
  var body_402656898 = newJObject()
  if body != nil:
    body_402656898 = body
  result = call_402656897.call(nil, nil, nil, nil, body_402656898)

var createUsagePlan* = Call_CreateUsagePlan_402656885(name: "createUsagePlan",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/usageplans", validator: validate_CreateUsagePlan_402656886,
    base: "/", makeUrl: url_CreateUsagePlan_402656887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUsagePlans_402656869 = ref object of OpenApiRestCall_402656035
proc url_GetUsagePlans_402656871(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUsagePlans_402656870(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets all the usage plans of the caller's account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## keyId: JString
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## identifier 
                                                                                                         ## of 
                                                                                                         ## the 
                                                                                                         ## API 
                                                                                                         ## key 
                                                                                                         ## associated 
                                                                                                         ## with 
                                                                                                         ## the 
                                                                                                         ## usage 
                                                                                                         ## plans.
  ##   
                                                                                                                  ## limit: JInt
                                                                                                                  ##        
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## maximum 
                                                                                                                  ## number 
                                                                                                                  ## of 
                                                                                                                  ## returned 
                                                                                                                  ## results 
                                                                                                                  ## per 
                                                                                                                  ## page. 
                                                                                                                  ## The 
                                                                                                                  ## default 
                                                                                                                  ## value 
                                                                                                                  ## is 
                                                                                                                  ## 25 
                                                                                                                  ## and 
                                                                                                                  ## the 
                                                                                                                  ## maximum 
                                                                                                                  ## value 
                                                                                                                  ## is 
                                                                                                                  ## 500.
  section = newJObject()
  var valid_402656872 = query.getOrDefault("position")
  valid_402656872 = validateParameter(valid_402656872, JString,
                                      required = false, default = nil)
  if valid_402656872 != nil:
    section.add "position", valid_402656872
  var valid_402656873 = query.getOrDefault("keyId")
  valid_402656873 = validateParameter(valid_402656873, JString,
                                      required = false, default = nil)
  if valid_402656873 != nil:
    section.add "keyId", valid_402656873
  var valid_402656874 = query.getOrDefault("limit")
  valid_402656874 = validateParameter(valid_402656874, JInt, required = false,
                                      default = nil)
  if valid_402656874 != nil:
    section.add "limit", valid_402656874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656875 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656875 = validateParameter(valid_402656875, JString,
                                      required = false, default = nil)
  if valid_402656875 != nil:
    section.add "X-Amz-Security-Token", valid_402656875
  var valid_402656876 = header.getOrDefault("X-Amz-Signature")
  valid_402656876 = validateParameter(valid_402656876, JString,
                                      required = false, default = nil)
  if valid_402656876 != nil:
    section.add "X-Amz-Signature", valid_402656876
  var valid_402656877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656877 = validateParameter(valid_402656877, JString,
                                      required = false, default = nil)
  if valid_402656877 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656877
  var valid_402656878 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656878 = validateParameter(valid_402656878, JString,
                                      required = false, default = nil)
  if valid_402656878 != nil:
    section.add "X-Amz-Algorithm", valid_402656878
  var valid_402656879 = header.getOrDefault("X-Amz-Date")
  valid_402656879 = validateParameter(valid_402656879, JString,
                                      required = false, default = nil)
  if valid_402656879 != nil:
    section.add "X-Amz-Date", valid_402656879
  var valid_402656880 = header.getOrDefault("X-Amz-Credential")
  valid_402656880 = validateParameter(valid_402656880, JString,
                                      required = false, default = nil)
  if valid_402656880 != nil:
    section.add "X-Amz-Credential", valid_402656880
  var valid_402656881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656881 = validateParameter(valid_402656881, JString,
                                      required = false, default = nil)
  if valid_402656881 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656881
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656882: Call_GetUsagePlans_402656869; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets all the usage plans of the caller's account.
                                                                                         ## 
  let valid = call_402656882.validator(path, query, header, formData, body, _)
  let scheme = call_402656882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656882.makeUrl(scheme.get, call_402656882.host, call_402656882.base,
                                   call_402656882.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656882, uri, valid, _)

proc call*(call_402656883: Call_GetUsagePlans_402656869; position: string = "";
           keyId: string = ""; limit: int = 0): Recallable =
  ## getUsagePlans
  ## Gets all the usage plans of the caller's account.
  ##   position: string
                                                      ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                             ## keyId: string
                                                                                                                             ##        
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## identifier 
                                                                                                                             ## of 
                                                                                                                             ## the 
                                                                                                                             ## API 
                                                                                                                             ## key 
                                                                                                                             ## associated 
                                                                                                                             ## with 
                                                                                                                             ## the 
                                                                                                                             ## usage 
                                                                                                                             ## plans.
  ##   
                                                                                                                                      ## limit: int
                                                                                                                                      ##        
                                                                                                                                      ## : 
                                                                                                                                      ## The 
                                                                                                                                      ## maximum 
                                                                                                                                      ## number 
                                                                                                                                      ## of 
                                                                                                                                      ## returned 
                                                                                                                                      ## results 
                                                                                                                                      ## per 
                                                                                                                                      ## page. 
                                                                                                                                      ## The 
                                                                                                                                      ## default 
                                                                                                                                      ## value 
                                                                                                                                      ## is 
                                                                                                                                      ## 25 
                                                                                                                                      ## and 
                                                                                                                                      ## the 
                                                                                                                                      ## maximum 
                                                                                                                                      ## value 
                                                                                                                                      ## is 
                                                                                                                                      ## 500.
  var query_402656884 = newJObject()
  add(query_402656884, "position", newJString(position))
  add(query_402656884, "keyId", newJString(keyId))
  add(query_402656884, "limit", newJInt(limit))
  result = call_402656883.call(nil, query_402656884, nil, nil, nil)

var getUsagePlans* = Call_GetUsagePlans_402656869(name: "getUsagePlans",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/usageplans", validator: validate_GetUsagePlans_402656870,
    base: "/", makeUrl: url_GetUsagePlans_402656871,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateUsagePlanKey_402656917 = ref object of OpenApiRestCall_402656035
proc url_CreateUsagePlanKey_402656919(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId"),
                 (kind: ConstantSegment, value: "/keys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateUsagePlanKey_402656918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a usage plan key for adding an existing API key to a usage plan.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-created <a>UsagePlanKey</a> resource representing a plan customer.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402656920 = path.getOrDefault("usageplanId")
  valid_402656920 = validateParameter(valid_402656920, JString, required = true,
                                      default = nil)
  if valid_402656920 != nil:
    section.add "usageplanId", valid_402656920
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656921 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656921 = validateParameter(valid_402656921, JString,
                                      required = false, default = nil)
  if valid_402656921 != nil:
    section.add "X-Amz-Security-Token", valid_402656921
  var valid_402656922 = header.getOrDefault("X-Amz-Signature")
  valid_402656922 = validateParameter(valid_402656922, JString,
                                      required = false, default = nil)
  if valid_402656922 != nil:
    section.add "X-Amz-Signature", valid_402656922
  var valid_402656923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656923 = validateParameter(valid_402656923, JString,
                                      required = false, default = nil)
  if valid_402656923 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656923
  var valid_402656924 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656924 = validateParameter(valid_402656924, JString,
                                      required = false, default = nil)
  if valid_402656924 != nil:
    section.add "X-Amz-Algorithm", valid_402656924
  var valid_402656925 = header.getOrDefault("X-Amz-Date")
  valid_402656925 = validateParameter(valid_402656925, JString,
                                      required = false, default = nil)
  if valid_402656925 != nil:
    section.add "X-Amz-Date", valid_402656925
  var valid_402656926 = header.getOrDefault("X-Amz-Credential")
  valid_402656926 = validateParameter(valid_402656926, JString,
                                      required = false, default = nil)
  if valid_402656926 != nil:
    section.add "X-Amz-Credential", valid_402656926
  var valid_402656927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656927 = validateParameter(valid_402656927, JString,
                                      required = false, default = nil)
  if valid_402656927 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656927
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656929: Call_CreateUsagePlanKey_402656917;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a usage plan key for adding an existing API key to a usage plan.
                                                                                         ## 
  let valid = call_402656929.validator(path, query, header, formData, body, _)
  let scheme = call_402656929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656929.makeUrl(scheme.get, call_402656929.host, call_402656929.base,
                                   call_402656929.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656929, uri, valid, _)

proc call*(call_402656930: Call_CreateUsagePlanKey_402656917;
           usageplanId: string; body: JsonNode): Recallable =
  ## createUsagePlanKey
  ## Creates a usage plan key for adding an existing API key to a usage plan.
  ##   
                                                                             ## usageplanId: string (required)
                                                                             ##              
                                                                             ## : 
                                                                             ## [Required] 
                                                                             ## The 
                                                                             ## Id 
                                                                             ## of 
                                                                             ## the 
                                                                             ## <a>UsagePlan</a> 
                                                                             ## resource 
                                                                             ## representing 
                                                                             ## the 
                                                                             ## usage 
                                                                             ## plan 
                                                                             ## containing 
                                                                             ## the 
                                                                             ## to-be-created 
                                                                             ## <a>UsagePlanKey</a> 
                                                                             ## resource 
                                                                             ## representing 
                                                                             ## a 
                                                                             ## plan 
                                                                             ## customer.
  ##   
                                                                                         ## body: JObject (required)
  var path_402656931 = newJObject()
  var body_402656932 = newJObject()
  add(path_402656931, "usageplanId", newJString(usageplanId))
  if body != nil:
    body_402656932 = body
  result = call_402656930.call(path_402656931, nil, nil, nil, body_402656932)

var createUsagePlanKey* = Call_CreateUsagePlanKey_402656917(
    name: "createUsagePlanKey", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com", route: "/usageplans/{usageplanId}/keys",
    validator: validate_CreateUsagePlanKey_402656918, base: "/",
    makeUrl: url_CreateUsagePlanKey_402656919,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUsagePlanKeys_402656899 = ref object of OpenApiRestCall_402656035
proc url_GetUsagePlanKeys_402656901(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId"),
                 (kind: ConstantSegment, value: "/keys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetUsagePlanKeys_402656900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets all the usage plan keys representing the API keys added to a specified usage plan.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402656902 = path.getOrDefault("usageplanId")
  valid_402656902 = validateParameter(valid_402656902, JString, required = true,
                                      default = nil)
  if valid_402656902 != nil:
    section.add "usageplanId", valid_402656902
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## name: JString
                                                                                                         ##       
                                                                                                         ## : 
                                                                                                         ## A 
                                                                                                         ## query 
                                                                                                         ## parameter 
                                                                                                         ## specifying 
                                                                                                         ## the 
                                                                                                         ## name 
                                                                                                         ## of 
                                                                                                         ## the 
                                                                                                         ## to-be-returned 
                                                                                                         ## usage 
                                                                                                         ## plan 
                                                                                                         ## keys.
  ##   
                                                                                                                 ## limit: JInt
                                                                                                                 ##        
                                                                                                                 ## : 
                                                                                                                 ## The 
                                                                                                                 ## maximum 
                                                                                                                 ## number 
                                                                                                                 ## of 
                                                                                                                 ## returned 
                                                                                                                 ## results 
                                                                                                                 ## per 
                                                                                                                 ## page. 
                                                                                                                 ## The 
                                                                                                                 ## default 
                                                                                                                 ## value 
                                                                                                                 ## is 
                                                                                                                 ## 25 
                                                                                                                 ## and 
                                                                                                                 ## the 
                                                                                                                 ## maximum 
                                                                                                                 ## value 
                                                                                                                 ## is 
                                                                                                                 ## 500.
  section = newJObject()
  var valid_402656903 = query.getOrDefault("position")
  valid_402656903 = validateParameter(valid_402656903, JString,
                                      required = false, default = nil)
  if valid_402656903 != nil:
    section.add "position", valid_402656903
  var valid_402656904 = query.getOrDefault("name")
  valid_402656904 = validateParameter(valid_402656904, JString,
                                      required = false, default = nil)
  if valid_402656904 != nil:
    section.add "name", valid_402656904
  var valid_402656905 = query.getOrDefault("limit")
  valid_402656905 = validateParameter(valid_402656905, JInt, required = false,
                                      default = nil)
  if valid_402656905 != nil:
    section.add "limit", valid_402656905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656906 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656906 = validateParameter(valid_402656906, JString,
                                      required = false, default = nil)
  if valid_402656906 != nil:
    section.add "X-Amz-Security-Token", valid_402656906
  var valid_402656907 = header.getOrDefault("X-Amz-Signature")
  valid_402656907 = validateParameter(valid_402656907, JString,
                                      required = false, default = nil)
  if valid_402656907 != nil:
    section.add "X-Amz-Signature", valid_402656907
  var valid_402656908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656908 = validateParameter(valid_402656908, JString,
                                      required = false, default = nil)
  if valid_402656908 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656908
  var valid_402656909 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656909 = validateParameter(valid_402656909, JString,
                                      required = false, default = nil)
  if valid_402656909 != nil:
    section.add "X-Amz-Algorithm", valid_402656909
  var valid_402656910 = header.getOrDefault("X-Amz-Date")
  valid_402656910 = validateParameter(valid_402656910, JString,
                                      required = false, default = nil)
  if valid_402656910 != nil:
    section.add "X-Amz-Date", valid_402656910
  var valid_402656911 = header.getOrDefault("X-Amz-Credential")
  valid_402656911 = validateParameter(valid_402656911, JString,
                                      required = false, default = nil)
  if valid_402656911 != nil:
    section.add "X-Amz-Credential", valid_402656911
  var valid_402656912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656912 = validateParameter(valid_402656912, JString,
                                      required = false, default = nil)
  if valid_402656912 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656913: Call_GetUsagePlanKeys_402656899;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets all the usage plan keys representing the API keys added to a specified usage plan.
                                                                                         ## 
  let valid = call_402656913.validator(path, query, header, formData, body, _)
  let scheme = call_402656913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656913.makeUrl(scheme.get, call_402656913.host, call_402656913.base,
                                   call_402656913.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656913, uri, valid, _)

proc call*(call_402656914: Call_GetUsagePlanKeys_402656899; usageplanId: string;
           position: string = ""; name: string = ""; limit: int = 0): Recallable =
  ## getUsagePlanKeys
  ## Gets all the usage plan keys representing the API keys added to a specified usage plan.
  ##   
                                                                                            ## position: string
                                                                                            ##           
                                                                                            ## : 
                                                                                            ## The 
                                                                                            ## current 
                                                                                            ## pagination 
                                                                                            ## position 
                                                                                            ## in 
                                                                                            ## the 
                                                                                            ## paged 
                                                                                            ## result 
                                                                                            ## set.
  ##   
                                                                                                   ## usageplanId: string (required)
                                                                                                   ##              
                                                                                                   ## : 
                                                                                                   ## [Required] 
                                                                                                   ## The 
                                                                                                   ## Id 
                                                                                                   ## of 
                                                                                                   ## the 
                                                                                                   ## <a>UsagePlan</a> 
                                                                                                   ## resource 
                                                                                                   ## representing 
                                                                                                   ## the 
                                                                                                   ## usage 
                                                                                                   ## plan 
                                                                                                   ## containing 
                                                                                                   ## the 
                                                                                                   ## to-be-retrieved 
                                                                                                   ## <a>UsagePlanKey</a> 
                                                                                                   ## resource 
                                                                                                   ## representing 
                                                                                                   ## a 
                                                                                                   ## plan 
                                                                                                   ## customer.
  ##   
                                                                                                               ## name: string
                                                                                                               ##       
                                                                                                               ## : 
                                                                                                               ## A 
                                                                                                               ## query 
                                                                                                               ## parameter 
                                                                                                               ## specifying 
                                                                                                               ## the 
                                                                                                               ## name 
                                                                                                               ## of 
                                                                                                               ## the 
                                                                                                               ## to-be-returned 
                                                                                                               ## usage 
                                                                                                               ## plan 
                                                                                                               ## keys.
  ##   
                                                                                                                       ## limit: int
                                                                                                                       ##        
                                                                                                                       ## : 
                                                                                                                       ## The 
                                                                                                                       ## maximum 
                                                                                                                       ## number 
                                                                                                                       ## of 
                                                                                                                       ## returned 
                                                                                                                       ## results 
                                                                                                                       ## per 
                                                                                                                       ## page. 
                                                                                                                       ## The 
                                                                                                                       ## default 
                                                                                                                       ## value 
                                                                                                                       ## is 
                                                                                                                       ## 25 
                                                                                                                       ## and 
                                                                                                                       ## the 
                                                                                                                       ## maximum 
                                                                                                                       ## value 
                                                                                                                       ## is 
                                                                                                                       ## 500.
  var path_402656915 = newJObject()
  var query_402656916 = newJObject()
  add(query_402656916, "position", newJString(position))
  add(path_402656915, "usageplanId", newJString(usageplanId))
  add(query_402656916, "name", newJString(name))
  add(query_402656916, "limit", newJInt(limit))
  result = call_402656914.call(path_402656915, query_402656916, nil, nil, nil)

var getUsagePlanKeys* = Call_GetUsagePlanKeys_402656899(
    name: "getUsagePlanKeys", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com", route: "/usageplans/{usageplanId}/keys",
    validator: validate_GetUsagePlanKeys_402656900, base: "/",
    makeUrl: url_GetUsagePlanKeys_402656901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateVpcLink_402656948 = ref object of OpenApiRestCall_402656035
proc url_CreateVpcLink_402656950(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateVpcLink_402656949(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656951 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656951 = validateParameter(valid_402656951, JString,
                                      required = false, default = nil)
  if valid_402656951 != nil:
    section.add "X-Amz-Security-Token", valid_402656951
  var valid_402656952 = header.getOrDefault("X-Amz-Signature")
  valid_402656952 = validateParameter(valid_402656952, JString,
                                      required = false, default = nil)
  if valid_402656952 != nil:
    section.add "X-Amz-Signature", valid_402656952
  var valid_402656953 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656953 = validateParameter(valid_402656953, JString,
                                      required = false, default = nil)
  if valid_402656953 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656953
  var valid_402656954 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656954 = validateParameter(valid_402656954, JString,
                                      required = false, default = nil)
  if valid_402656954 != nil:
    section.add "X-Amz-Algorithm", valid_402656954
  var valid_402656955 = header.getOrDefault("X-Amz-Date")
  valid_402656955 = validateParameter(valid_402656955, JString,
                                      required = false, default = nil)
  if valid_402656955 != nil:
    section.add "X-Amz-Date", valid_402656955
  var valid_402656956 = header.getOrDefault("X-Amz-Credential")
  valid_402656956 = validateParameter(valid_402656956, JString,
                                      required = false, default = nil)
  if valid_402656956 != nil:
    section.add "X-Amz-Credential", valid_402656956
  var valid_402656957 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656957 = validateParameter(valid_402656957, JString,
                                      required = false, default = nil)
  if valid_402656957 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656957
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656959: Call_CreateVpcLink_402656948; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
                                                                                         ## 
  let valid = call_402656959.validator(path, query, header, formData, body, _)
  let scheme = call_402656959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656959.makeUrl(scheme.get, call_402656959.host, call_402656959.base,
                                   call_402656959.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656959, uri, valid, _)

proc call*(call_402656960: Call_CreateVpcLink_402656948; body: JsonNode): Recallable =
  ## createVpcLink
  ## Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
  ##   
                                                                                                                                                                                                                                                        ## body: JObject (required)
  var body_402656961 = newJObject()
  if body != nil:
    body_402656961 = body
  result = call_402656960.call(nil, nil, nil, nil, body_402656961)

var createVpcLink* = Call_CreateVpcLink_402656948(name: "createVpcLink",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/vpclinks", validator: validate_CreateVpcLink_402656949, base: "/",
    makeUrl: url_CreateVpcLink_402656950, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVpcLinks_402656933 = ref object of OpenApiRestCall_402656035
proc url_GetVpcLinks_402656935(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVpcLinks_402656934(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the <a>VpcLinks</a> collection under the caller's account in a selected region.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402656936 = query.getOrDefault("position")
  valid_402656936 = validateParameter(valid_402656936, JString,
                                      required = false, default = nil)
  if valid_402656936 != nil:
    section.add "position", valid_402656936
  var valid_402656937 = query.getOrDefault("limit")
  valid_402656937 = validateParameter(valid_402656937, JInt, required = false,
                                      default = nil)
  if valid_402656937 != nil:
    section.add "limit", valid_402656937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656938 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656938 = validateParameter(valid_402656938, JString,
                                      required = false, default = nil)
  if valid_402656938 != nil:
    section.add "X-Amz-Security-Token", valid_402656938
  var valid_402656939 = header.getOrDefault("X-Amz-Signature")
  valid_402656939 = validateParameter(valid_402656939, JString,
                                      required = false, default = nil)
  if valid_402656939 != nil:
    section.add "X-Amz-Signature", valid_402656939
  var valid_402656940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656940 = validateParameter(valid_402656940, JString,
                                      required = false, default = nil)
  if valid_402656940 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656940
  var valid_402656941 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656941 = validateParameter(valid_402656941, JString,
                                      required = false, default = nil)
  if valid_402656941 != nil:
    section.add "X-Amz-Algorithm", valid_402656941
  var valid_402656942 = header.getOrDefault("X-Amz-Date")
  valid_402656942 = validateParameter(valid_402656942, JString,
                                      required = false, default = nil)
  if valid_402656942 != nil:
    section.add "X-Amz-Date", valid_402656942
  var valid_402656943 = header.getOrDefault("X-Amz-Credential")
  valid_402656943 = validateParameter(valid_402656943, JString,
                                      required = false, default = nil)
  if valid_402656943 != nil:
    section.add "X-Amz-Credential", valid_402656943
  var valid_402656944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656944 = validateParameter(valid_402656944, JString,
                                      required = false, default = nil)
  if valid_402656944 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656944
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656945: Call_GetVpcLinks_402656933; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the <a>VpcLinks</a> collection under the caller's account in a selected region.
                                                                                         ## 
  let valid = call_402656945.validator(path, query, header, formData, body, _)
  let scheme = call_402656945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656945.makeUrl(scheme.get, call_402656945.host, call_402656945.base,
                                   call_402656945.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656945, uri, valid, _)

proc call*(call_402656946: Call_GetVpcLinks_402656933; position: string = "";
           limit: int = 0): Recallable =
  ## getVpcLinks
  ## Gets the <a>VpcLinks</a> collection under the caller's account in a selected region.
  ##   
                                                                                         ## position: string
                                                                                         ##           
                                                                                         ## : 
                                                                                         ## The 
                                                                                         ## current 
                                                                                         ## pagination 
                                                                                         ## position 
                                                                                         ## in 
                                                                                         ## the 
                                                                                         ## paged 
                                                                                         ## result 
                                                                                         ## set.
  ##   
                                                                                                ## limit: int
                                                                                                ##        
                                                                                                ## : 
                                                                                                ## The 
                                                                                                ## maximum 
                                                                                                ## number 
                                                                                                ## of 
                                                                                                ## returned 
                                                                                                ## results 
                                                                                                ## per 
                                                                                                ## page. 
                                                                                                ## The 
                                                                                                ## default 
                                                                                                ## value 
                                                                                                ## is 
                                                                                                ## 25 
                                                                                                ## and 
                                                                                                ## the 
                                                                                                ## maximum 
                                                                                                ## value 
                                                                                                ## is 
                                                                                                ## 500.
  var query_402656947 = newJObject()
  add(query_402656947, "position", newJString(position))
  add(query_402656947, "limit", newJInt(limit))
  result = call_402656946.call(nil, query_402656947, nil, nil, nil)

var getVpcLinks* = Call_GetVpcLinks_402656933(name: "getVpcLinks",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/vpclinks", validator: validate_GetVpcLinks_402656934, base: "/",
    makeUrl: url_GetVpcLinks_402656935, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApiKey_402656962 = ref object of OpenApiRestCall_402656035
proc url_GetApiKey_402656964(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "api_Key" in path, "`api_Key` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/apikeys/"),
                 (kind: VariableSegment, value: "api_Key")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetApiKey_402656963(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the current <a>ApiKey</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   api_Key: JString (required)
                                 ##          : [Required] The identifier of the <a>ApiKey</a> resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `api_Key` field"
  var valid_402656965 = path.getOrDefault("api_Key")
  valid_402656965 = validateParameter(valid_402656965, JString, required = true,
                                      default = nil)
  if valid_402656965 != nil:
    section.add "api_Key", valid_402656965
  result.add "path", section
  ## parameters in `query` object:
  ##   includeValue: JBool
                                  ##               : A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains the key value.
  section = newJObject()
  var valid_402656966 = query.getOrDefault("includeValue")
  valid_402656966 = validateParameter(valid_402656966, JBool, required = false,
                                      default = nil)
  if valid_402656966 != nil:
    section.add "includeValue", valid_402656966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656967 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656967 = validateParameter(valid_402656967, JString,
                                      required = false, default = nil)
  if valid_402656967 != nil:
    section.add "X-Amz-Security-Token", valid_402656967
  var valid_402656968 = header.getOrDefault("X-Amz-Signature")
  valid_402656968 = validateParameter(valid_402656968, JString,
                                      required = false, default = nil)
  if valid_402656968 != nil:
    section.add "X-Amz-Signature", valid_402656968
  var valid_402656969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656969 = validateParameter(valid_402656969, JString,
                                      required = false, default = nil)
  if valid_402656969 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656969
  var valid_402656970 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656970 = validateParameter(valid_402656970, JString,
                                      required = false, default = nil)
  if valid_402656970 != nil:
    section.add "X-Amz-Algorithm", valid_402656970
  var valid_402656971 = header.getOrDefault("X-Amz-Date")
  valid_402656971 = validateParameter(valid_402656971, JString,
                                      required = false, default = nil)
  if valid_402656971 != nil:
    section.add "X-Amz-Date", valid_402656971
  var valid_402656972 = header.getOrDefault("X-Amz-Credential")
  valid_402656972 = validateParameter(valid_402656972, JString,
                                      required = false, default = nil)
  if valid_402656972 != nil:
    section.add "X-Amz-Credential", valid_402656972
  var valid_402656973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656973 = validateParameter(valid_402656973, JString,
                                      required = false, default = nil)
  if valid_402656973 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656974: Call_GetApiKey_402656962; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the current <a>ApiKey</a> resource.
                                                                                         ## 
  let valid = call_402656974.validator(path, query, header, formData, body, _)
  let scheme = call_402656974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656974.makeUrl(scheme.get, call_402656974.host, call_402656974.base,
                                   call_402656974.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656974, uri, valid, _)

proc call*(call_402656975: Call_GetApiKey_402656962; apiKey: string;
           includeValue: bool = false): Recallable =
  ## getApiKey
  ## Gets information about the current <a>ApiKey</a> resource.
  ##   apiKey: string (required)
                                                               ##         : [Required] The identifier of the <a>ApiKey</a> resource.
  ##   
                                                                                                                                    ## includeValue: bool
                                                                                                                                    ##               
                                                                                                                                    ## : 
                                                                                                                                    ## A 
                                                                                                                                    ## boolean 
                                                                                                                                    ## flag 
                                                                                                                                    ## to 
                                                                                                                                    ## specify 
                                                                                                                                    ## whether 
                                                                                                                                    ## (<code>true</code>) 
                                                                                                                                    ## or 
                                                                                                                                    ## not 
                                                                                                                                    ## (<code>false</code>) 
                                                                                                                                    ## the 
                                                                                                                                    ## result 
                                                                                                                                    ## contains 
                                                                                                                                    ## the 
                                                                                                                                    ## key 
                                                                                                                                    ## value.
  var path_402656976 = newJObject()
  var query_402656977 = newJObject()
  add(path_402656976, "api_Key", newJString(apiKey))
  add(query_402656977, "includeValue", newJBool(includeValue))
  result = call_402656975.call(path_402656976, query_402656977, nil, nil, nil)

var getApiKey* = Call_GetApiKey_402656962(name: "getApiKey",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/apikeys/{api_Key}", validator: validate_GetApiKey_402656963,
    base: "/", makeUrl: url_GetApiKey_402656964,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateApiKey_402656992 = ref object of OpenApiRestCall_402656035
proc url_UpdateApiKey_402656994(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "api_Key" in path, "`api_Key` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/apikeys/"),
                 (kind: VariableSegment, value: "api_Key")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateApiKey_402656993(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about an <a>ApiKey</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   api_Key: JString (required)
                                 ##          : [Required] The identifier of the <a>ApiKey</a> resource to be updated.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `api_Key` field"
  var valid_402656995 = path.getOrDefault("api_Key")
  valid_402656995 = validateParameter(valid_402656995, JString, required = true,
                                      default = nil)
  if valid_402656995 != nil:
    section.add "api_Key", valid_402656995
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656996 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656996 = validateParameter(valid_402656996, JString,
                                      required = false, default = nil)
  if valid_402656996 != nil:
    section.add "X-Amz-Security-Token", valid_402656996
  var valid_402656997 = header.getOrDefault("X-Amz-Signature")
  valid_402656997 = validateParameter(valid_402656997, JString,
                                      required = false, default = nil)
  if valid_402656997 != nil:
    section.add "X-Amz-Signature", valid_402656997
  var valid_402656998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656998 = validateParameter(valid_402656998, JString,
                                      required = false, default = nil)
  if valid_402656998 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656998
  var valid_402656999 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656999 = validateParameter(valid_402656999, JString,
                                      required = false, default = nil)
  if valid_402656999 != nil:
    section.add "X-Amz-Algorithm", valid_402656999
  var valid_402657000 = header.getOrDefault("X-Amz-Date")
  valid_402657000 = validateParameter(valid_402657000, JString,
                                      required = false, default = nil)
  if valid_402657000 != nil:
    section.add "X-Amz-Date", valid_402657000
  var valid_402657001 = header.getOrDefault("X-Amz-Credential")
  valid_402657001 = validateParameter(valid_402657001, JString,
                                      required = false, default = nil)
  if valid_402657001 != nil:
    section.add "X-Amz-Credential", valid_402657001
  var valid_402657002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657002 = validateParameter(valid_402657002, JString,
                                      required = false, default = nil)
  if valid_402657002 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657002
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657004: Call_UpdateApiKey_402656992; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about an <a>ApiKey</a> resource.
                                                                                         ## 
  let valid = call_402657004.validator(path, query, header, formData, body, _)
  let scheme = call_402657004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657004.makeUrl(scheme.get, call_402657004.host, call_402657004.base,
                                   call_402657004.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657004, uri, valid, _)

proc call*(call_402657005: Call_UpdateApiKey_402656992; apiKey: string;
           body: JsonNode): Recallable =
  ## updateApiKey
  ## Changes information about an <a>ApiKey</a> resource.
  ##   apiKey: string (required)
                                                         ##         : [Required] The identifier of the <a>ApiKey</a> resource to be updated.
  ##   
                                                                                                                                            ## body: JObject (required)
  var path_402657006 = newJObject()
  var body_402657007 = newJObject()
  add(path_402657006, "api_Key", newJString(apiKey))
  if body != nil:
    body_402657007 = body
  result = call_402657005.call(path_402657006, nil, nil, nil, body_402657007)

var updateApiKey* = Call_UpdateApiKey_402656992(name: "updateApiKey",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/apikeys/{api_Key}", validator: validate_UpdateApiKey_402656993,
    base: "/", makeUrl: url_UpdateApiKey_402656994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteApiKey_402656978 = ref object of OpenApiRestCall_402656035
proc url_DeleteApiKey_402656980(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "api_Key" in path, "`api_Key` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/apikeys/"),
                 (kind: VariableSegment, value: "api_Key")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteApiKey_402656979(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the <a>ApiKey</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   api_Key: JString (required)
                                 ##          : [Required] The identifier of the <a>ApiKey</a> resource to be deleted.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `api_Key` field"
  var valid_402656981 = path.getOrDefault("api_Key")
  valid_402656981 = validateParameter(valid_402656981, JString, required = true,
                                      default = nil)
  if valid_402656981 != nil:
    section.add "api_Key", valid_402656981
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656982 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656982 = validateParameter(valid_402656982, JString,
                                      required = false, default = nil)
  if valid_402656982 != nil:
    section.add "X-Amz-Security-Token", valid_402656982
  var valid_402656983 = header.getOrDefault("X-Amz-Signature")
  valid_402656983 = validateParameter(valid_402656983, JString,
                                      required = false, default = nil)
  if valid_402656983 != nil:
    section.add "X-Amz-Signature", valid_402656983
  var valid_402656984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656984 = validateParameter(valid_402656984, JString,
                                      required = false, default = nil)
  if valid_402656984 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656984
  var valid_402656985 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656985 = validateParameter(valid_402656985, JString,
                                      required = false, default = nil)
  if valid_402656985 != nil:
    section.add "X-Amz-Algorithm", valid_402656985
  var valid_402656986 = header.getOrDefault("X-Amz-Date")
  valid_402656986 = validateParameter(valid_402656986, JString,
                                      required = false, default = nil)
  if valid_402656986 != nil:
    section.add "X-Amz-Date", valid_402656986
  var valid_402656987 = header.getOrDefault("X-Amz-Credential")
  valid_402656987 = validateParameter(valid_402656987, JString,
                                      required = false, default = nil)
  if valid_402656987 != nil:
    section.add "X-Amz-Credential", valid_402656987
  var valid_402656988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656988 = validateParameter(valid_402656988, JString,
                                      required = false, default = nil)
  if valid_402656988 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656988
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656989: Call_DeleteApiKey_402656978; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the <a>ApiKey</a> resource.
                                                                                         ## 
  let valid = call_402656989.validator(path, query, header, formData, body, _)
  let scheme = call_402656989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656989.makeUrl(scheme.get, call_402656989.host, call_402656989.base,
                                   call_402656989.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656989, uri, valid, _)

proc call*(call_402656990: Call_DeleteApiKey_402656978; apiKey: string): Recallable =
  ## deleteApiKey
  ## Deletes the <a>ApiKey</a> resource.
  ##   apiKey: string (required)
                                        ##         : [Required] The identifier of the <a>ApiKey</a> resource to be deleted.
  var path_402656991 = newJObject()
  add(path_402656991, "api_Key", newJString(apiKey))
  result = call_402656990.call(path_402656991, nil, nil, nil, nil)

var deleteApiKey* = Call_DeleteApiKey_402656978(name: "deleteApiKey",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/apikeys/{api_Key}", validator: validate_DeleteApiKey_402656979,
    base: "/", makeUrl: url_DeleteApiKey_402656980,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TestInvokeAuthorizer_402657023 = ref object of OpenApiRestCall_402656035
proc url_TestInvokeAuthorizer_402657025(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "authorizer_id" in path, "`authorizer_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/authorizers/"),
                 (kind: VariableSegment, value: "authorizer_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_TestInvokeAuthorizer_402657024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Simulate the execution of an <a>Authorizer</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizer_id: JString (required)
                                 ##                : [Required] Specifies a test invoke authorizer request's <a>Authorizer</a> ID.
  ##   
                                                                                                                                  ## restapi_id: JString (required)
                                                                                                                                  ##             
                                                                                                                                  ## : 
                                                                                                                                  ## [Required] 
                                                                                                                                  ## The 
                                                                                                                                  ## string 
                                                                                                                                  ## identifier 
                                                                                                                                  ## of 
                                                                                                                                  ## the 
                                                                                                                                  ## associated 
                                                                                                                                  ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizer_id` field"
  var valid_402657026 = path.getOrDefault("authorizer_id")
  valid_402657026 = validateParameter(valid_402657026, JString, required = true,
                                      default = nil)
  if valid_402657026 != nil:
    section.add "authorizer_id", valid_402657026
  var valid_402657027 = path.getOrDefault("restapi_id")
  valid_402657027 = validateParameter(valid_402657027, JString, required = true,
                                      default = nil)
  if valid_402657027 != nil:
    section.add "restapi_id", valid_402657027
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657028 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657028 = validateParameter(valid_402657028, JString,
                                      required = false, default = nil)
  if valid_402657028 != nil:
    section.add "X-Amz-Security-Token", valid_402657028
  var valid_402657029 = header.getOrDefault("X-Amz-Signature")
  valid_402657029 = validateParameter(valid_402657029, JString,
                                      required = false, default = nil)
  if valid_402657029 != nil:
    section.add "X-Amz-Signature", valid_402657029
  var valid_402657030 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657030 = validateParameter(valid_402657030, JString,
                                      required = false, default = nil)
  if valid_402657030 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657030
  var valid_402657031 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657031 = validateParameter(valid_402657031, JString,
                                      required = false, default = nil)
  if valid_402657031 != nil:
    section.add "X-Amz-Algorithm", valid_402657031
  var valid_402657032 = header.getOrDefault("X-Amz-Date")
  valid_402657032 = validateParameter(valid_402657032, JString,
                                      required = false, default = nil)
  if valid_402657032 != nil:
    section.add "X-Amz-Date", valid_402657032
  var valid_402657033 = header.getOrDefault("X-Amz-Credential")
  valid_402657033 = validateParameter(valid_402657033, JString,
                                      required = false, default = nil)
  if valid_402657033 != nil:
    section.add "X-Amz-Credential", valid_402657033
  var valid_402657034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657034 = validateParameter(valid_402657034, JString,
                                      required = false, default = nil)
  if valid_402657034 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657034
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657036: Call_TestInvokeAuthorizer_402657023;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Simulate the execution of an <a>Authorizer</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>
                                                                                         ## 
  let valid = call_402657036.validator(path, query, header, formData, body, _)
  let scheme = call_402657036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657036.makeUrl(scheme.get, call_402657036.host, call_402657036.base,
                                   call_402657036.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657036, uri, valid, _)

proc call*(call_402657037: Call_TestInvokeAuthorizer_402657023;
           authorizerId: string; restapiId: string; body: JsonNode): Recallable =
  ## testInvokeAuthorizer
  ## <p>Simulate the execution of an <a>Authorizer</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## authorizerId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ##               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## [Required] 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## Specifies 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## a 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## test 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## invoke 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## authorizer 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## request's 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## <a>Authorizer</a> 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ## ID.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## restapiId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ##            
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## [Required] 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## string 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## identifier 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## of 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## associated 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ## body: JObject (required)
  var path_402657038 = newJObject()
  var body_402657039 = newJObject()
  add(path_402657038, "authorizer_id", newJString(authorizerId))
  add(path_402657038, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657039 = body
  result = call_402657037.call(path_402657038, nil, nil, nil, body_402657039)

var testInvokeAuthorizer* = Call_TestInvokeAuthorizer_402657023(
    name: "testInvokeAuthorizer", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/authorizers/{authorizer_id}",
    validator: validate_TestInvokeAuthorizer_402657024, base: "/",
    makeUrl: url_TestInvokeAuthorizer_402657025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizer_402657008 = ref object of OpenApiRestCall_402656035
proc url_GetAuthorizer_402657010(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "authorizer_id" in path, "`authorizer_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/authorizers/"),
                 (kind: VariableSegment, value: "authorizer_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetAuthorizer_402657009(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Describe an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizer.html">AWS CLI</a></div>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizer_id: JString (required)
                                 ##                : [Required] The identifier of the <a>Authorizer</a> resource.
  ##   
                                                                                                                 ## restapi_id: JString (required)
                                                                                                                 ##             
                                                                                                                 ## : 
                                                                                                                 ## [Required] 
                                                                                                                 ## The 
                                                                                                                 ## string 
                                                                                                                 ## identifier 
                                                                                                                 ## of 
                                                                                                                 ## the 
                                                                                                                 ## associated 
                                                                                                                 ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizer_id` field"
  var valid_402657011 = path.getOrDefault("authorizer_id")
  valid_402657011 = validateParameter(valid_402657011, JString, required = true,
                                      default = nil)
  if valid_402657011 != nil:
    section.add "authorizer_id", valid_402657011
  var valid_402657012 = path.getOrDefault("restapi_id")
  valid_402657012 = validateParameter(valid_402657012, JString, required = true,
                                      default = nil)
  if valid_402657012 != nil:
    section.add "restapi_id", valid_402657012
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657013 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657013 = validateParameter(valid_402657013, JString,
                                      required = false, default = nil)
  if valid_402657013 != nil:
    section.add "X-Amz-Security-Token", valid_402657013
  var valid_402657014 = header.getOrDefault("X-Amz-Signature")
  valid_402657014 = validateParameter(valid_402657014, JString,
                                      required = false, default = nil)
  if valid_402657014 != nil:
    section.add "X-Amz-Signature", valid_402657014
  var valid_402657015 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657015 = validateParameter(valid_402657015, JString,
                                      required = false, default = nil)
  if valid_402657015 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657015
  var valid_402657016 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657016 = validateParameter(valid_402657016, JString,
                                      required = false, default = nil)
  if valid_402657016 != nil:
    section.add "X-Amz-Algorithm", valid_402657016
  var valid_402657017 = header.getOrDefault("X-Amz-Date")
  valid_402657017 = validateParameter(valid_402657017, JString,
                                      required = false, default = nil)
  if valid_402657017 != nil:
    section.add "X-Amz-Date", valid_402657017
  var valid_402657018 = header.getOrDefault("X-Amz-Credential")
  valid_402657018 = validateParameter(valid_402657018, JString,
                                      required = false, default = nil)
  if valid_402657018 != nil:
    section.add "X-Amz-Credential", valid_402657018
  var valid_402657019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657019 = validateParameter(valid_402657019, JString,
                                      required = false, default = nil)
  if valid_402657019 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657019
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657020: Call_GetAuthorizer_402657008; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Describe an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizer.html">AWS CLI</a></div>
                                                                                         ## 
  let valid = call_402657020.validator(path, query, header, formData, body, _)
  let scheme = call_402657020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657020.makeUrl(scheme.get, call_402657020.host, call_402657020.base,
                                   call_402657020.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657020, uri, valid, _)

proc call*(call_402657021: Call_GetAuthorizer_402657008; authorizerId: string;
           restapiId: string): Recallable =
  ## getAuthorizer
  ## <p>Describe an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizer.html">AWS CLI</a></div>
  ##   
                                                                                                                                                                                             ## authorizerId: string (required)
                                                                                                                                                                                             ##               
                                                                                                                                                                                             ## : 
                                                                                                                                                                                             ## [Required] 
                                                                                                                                                                                             ## The 
                                                                                                                                                                                             ## identifier 
                                                                                                                                                                                             ## of 
                                                                                                                                                                                             ## the 
                                                                                                                                                                                             ## <a>Authorizer</a> 
                                                                                                                                                                                             ## resource.
  ##   
                                                                                                                                                                                                         ## restapiId: string (required)
                                                                                                                                                                                                         ##            
                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                         ## [Required] 
                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                         ## string 
                                                                                                                                                                                                         ## identifier 
                                                                                                                                                                                                         ## of 
                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                         ## associated 
                                                                                                                                                                                                         ## <a>RestApi</a>.
  var path_402657022 = newJObject()
  add(path_402657022, "authorizer_id", newJString(authorizerId))
  add(path_402657022, "restapi_id", newJString(restapiId))
  result = call_402657021.call(path_402657022, nil, nil, nil, nil)

var getAuthorizer* = Call_GetAuthorizer_402657008(name: "getAuthorizer",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/authorizers/{authorizer_id}",
    validator: validate_GetAuthorizer_402657009, base: "/",
    makeUrl: url_GetAuthorizer_402657010, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAuthorizer_402657055 = ref object of OpenApiRestCall_402656035
proc url_UpdateAuthorizer_402657057(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "authorizer_id" in path, "`authorizer_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/authorizers/"),
                 (kind: VariableSegment, value: "authorizer_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateAuthorizer_402657056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/update-authorizer.html">AWS CLI</a></div>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizer_id: JString (required)
                                 ##                : [Required] The identifier of the <a>Authorizer</a> resource.
  ##   
                                                                                                                 ## restapi_id: JString (required)
                                                                                                                 ##             
                                                                                                                 ## : 
                                                                                                                 ## [Required] 
                                                                                                                 ## The 
                                                                                                                 ## string 
                                                                                                                 ## identifier 
                                                                                                                 ## of 
                                                                                                                 ## the 
                                                                                                                 ## associated 
                                                                                                                 ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizer_id` field"
  var valid_402657058 = path.getOrDefault("authorizer_id")
  valid_402657058 = validateParameter(valid_402657058, JString, required = true,
                                      default = nil)
  if valid_402657058 != nil:
    section.add "authorizer_id", valid_402657058
  var valid_402657059 = path.getOrDefault("restapi_id")
  valid_402657059 = validateParameter(valid_402657059, JString, required = true,
                                      default = nil)
  if valid_402657059 != nil:
    section.add "restapi_id", valid_402657059
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657060 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657060 = validateParameter(valid_402657060, JString,
                                      required = false, default = nil)
  if valid_402657060 != nil:
    section.add "X-Amz-Security-Token", valid_402657060
  var valid_402657061 = header.getOrDefault("X-Amz-Signature")
  valid_402657061 = validateParameter(valid_402657061, JString,
                                      required = false, default = nil)
  if valid_402657061 != nil:
    section.add "X-Amz-Signature", valid_402657061
  var valid_402657062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657062 = validateParameter(valid_402657062, JString,
                                      required = false, default = nil)
  if valid_402657062 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657062
  var valid_402657063 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657063 = validateParameter(valid_402657063, JString,
                                      required = false, default = nil)
  if valid_402657063 != nil:
    section.add "X-Amz-Algorithm", valid_402657063
  var valid_402657064 = header.getOrDefault("X-Amz-Date")
  valid_402657064 = validateParameter(valid_402657064, JString,
                                      required = false, default = nil)
  if valid_402657064 != nil:
    section.add "X-Amz-Date", valid_402657064
  var valid_402657065 = header.getOrDefault("X-Amz-Credential")
  valid_402657065 = validateParameter(valid_402657065, JString,
                                      required = false, default = nil)
  if valid_402657065 != nil:
    section.add "X-Amz-Credential", valid_402657065
  var valid_402657066 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657066 = validateParameter(valid_402657066, JString,
                                      required = false, default = nil)
  if valid_402657066 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657066
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657068: Call_UpdateAuthorizer_402657055;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/update-authorizer.html">AWS CLI</a></div>
                                                                                         ## 
  let valid = call_402657068.validator(path, query, header, formData, body, _)
  let scheme = call_402657068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657068.makeUrl(scheme.get, call_402657068.host, call_402657068.base,
                                   call_402657068.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657068, uri, valid, _)

proc call*(call_402657069: Call_UpdateAuthorizer_402657055;
           authorizerId: string; restapiId: string; body: JsonNode): Recallable =
  ## updateAuthorizer
  ## <p>Updates an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/update-authorizer.html">AWS CLI</a></div>
  ##   
                                                                                                                                                                                               ## authorizerId: string (required)
                                                                                                                                                                                               ##               
                                                                                                                                                                                               ## : 
                                                                                                                                                                                               ## [Required] 
                                                                                                                                                                                               ## The 
                                                                                                                                                                                               ## identifier 
                                                                                                                                                                                               ## of 
                                                                                                                                                                                               ## the 
                                                                                                                                                                                               ## <a>Authorizer</a> 
                                                                                                                                                                                               ## resource.
  ##   
                                                                                                                                                                                                           ## restapiId: string (required)
                                                                                                                                                                                                           ##            
                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                           ## [Required] 
                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                           ## string 
                                                                                                                                                                                                           ## identifier 
                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                           ## associated 
                                                                                                                                                                                                           ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                             ## body: JObject (required)
  var path_402657070 = newJObject()
  var body_402657071 = newJObject()
  add(path_402657070, "authorizer_id", newJString(authorizerId))
  add(path_402657070, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657071 = body
  result = call_402657069.call(path_402657070, nil, nil, nil, body_402657071)

var updateAuthorizer* = Call_UpdateAuthorizer_402657055(
    name: "updateAuthorizer", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/authorizers/{authorizer_id}",
    validator: validate_UpdateAuthorizer_402657056, base: "/",
    makeUrl: url_UpdateAuthorizer_402657057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteAuthorizer_402657040 = ref object of OpenApiRestCall_402656035
proc url_DeleteAuthorizer_402657042(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "authorizer_id" in path, "`authorizer_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/authorizers/"),
                 (kind: VariableSegment, value: "authorizer_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteAuthorizer_402657041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html">AWS CLI</a></div>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   authorizer_id: JString (required)
                                 ##                : [Required] The identifier of the <a>Authorizer</a> resource.
  ##   
                                                                                                                 ## restapi_id: JString (required)
                                                                                                                 ##             
                                                                                                                 ## : 
                                                                                                                 ## [Required] 
                                                                                                                 ## The 
                                                                                                                 ## string 
                                                                                                                 ## identifier 
                                                                                                                 ## of 
                                                                                                                 ## the 
                                                                                                                 ## associated 
                                                                                                                 ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `authorizer_id` field"
  var valid_402657043 = path.getOrDefault("authorizer_id")
  valid_402657043 = validateParameter(valid_402657043, JString, required = true,
                                      default = nil)
  if valid_402657043 != nil:
    section.add "authorizer_id", valid_402657043
  var valid_402657044 = path.getOrDefault("restapi_id")
  valid_402657044 = validateParameter(valid_402657044, JString, required = true,
                                      default = nil)
  if valid_402657044 != nil:
    section.add "restapi_id", valid_402657044
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657045 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657045 = validateParameter(valid_402657045, JString,
                                      required = false, default = nil)
  if valid_402657045 != nil:
    section.add "X-Amz-Security-Token", valid_402657045
  var valid_402657046 = header.getOrDefault("X-Amz-Signature")
  valid_402657046 = validateParameter(valid_402657046, JString,
                                      required = false, default = nil)
  if valid_402657046 != nil:
    section.add "X-Amz-Signature", valid_402657046
  var valid_402657047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657047 = validateParameter(valid_402657047, JString,
                                      required = false, default = nil)
  if valid_402657047 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657047
  var valid_402657048 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657048 = validateParameter(valid_402657048, JString,
                                      required = false, default = nil)
  if valid_402657048 != nil:
    section.add "X-Amz-Algorithm", valid_402657048
  var valid_402657049 = header.getOrDefault("X-Amz-Date")
  valid_402657049 = validateParameter(valid_402657049, JString,
                                      required = false, default = nil)
  if valid_402657049 != nil:
    section.add "X-Amz-Date", valid_402657049
  var valid_402657050 = header.getOrDefault("X-Amz-Credential")
  valid_402657050 = validateParameter(valid_402657050, JString,
                                      required = false, default = nil)
  if valid_402657050 != nil:
    section.add "X-Amz-Credential", valid_402657050
  var valid_402657051 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657051 = validateParameter(valid_402657051, JString,
                                      required = false, default = nil)
  if valid_402657051 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657051
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657052: Call_DeleteAuthorizer_402657040;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html">AWS CLI</a></div>
                                                                                         ## 
  let valid = call_402657052.validator(path, query, header, formData, body, _)
  let scheme = call_402657052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657052.makeUrl(scheme.get, call_402657052.host, call_402657052.base,
                                   call_402657052.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657052, uri, valid, _)

proc call*(call_402657053: Call_DeleteAuthorizer_402657040;
           authorizerId: string; restapiId: string): Recallable =
  ## deleteAuthorizer
  ## <p>Deletes an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html">AWS CLI</a></div>
  ##   
                                                                                                                                                                                               ## authorizerId: string (required)
                                                                                                                                                                                               ##               
                                                                                                                                                                                               ## : 
                                                                                                                                                                                               ## [Required] 
                                                                                                                                                                                               ## The 
                                                                                                                                                                                               ## identifier 
                                                                                                                                                                                               ## of 
                                                                                                                                                                                               ## the 
                                                                                                                                                                                               ## <a>Authorizer</a> 
                                                                                                                                                                                               ## resource.
  ##   
                                                                                                                                                                                                           ## restapiId: string (required)
                                                                                                                                                                                                           ##            
                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                           ## [Required] 
                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                           ## string 
                                                                                                                                                                                                           ## identifier 
                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                           ## associated 
                                                                                                                                                                                                           ## <a>RestApi</a>.
  var path_402657054 = newJObject()
  add(path_402657054, "authorizer_id", newJString(authorizerId))
  add(path_402657054, "restapi_id", newJString(restapiId))
  result = call_402657053.call(path_402657054, nil, nil, nil, nil)

var deleteAuthorizer* = Call_DeleteAuthorizer_402657040(
    name: "deleteAuthorizer", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/authorizers/{authorizer_id}",
    validator: validate_DeleteAuthorizer_402657041, base: "/",
    makeUrl: url_DeleteAuthorizer_402657042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBasePathMapping_402657072 = ref object of OpenApiRestCall_402656035
proc url_GetBasePathMapping_402657074(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  assert "base_path" in path, "`base_path` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name"),
                 (kind: ConstantSegment, value: "/basepathmappings/"),
                 (kind: VariableSegment, value: "base_path")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetBasePathMapping_402657073(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describe a <a>BasePathMapping</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   base_path: JString (required)
                                 ##            : [Required] The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify any base path name after the domain name.
  ##   
                                                                                                                                                                                                                                                                                                                                     ## domain_name: JString (required)
                                                                                                                                                                                                                                                                                                                                     ##              
                                                                                                                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                                                                                                                     ## [Required] 
                                                                                                                                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                                                                                                                                     ## domain 
                                                                                                                                                                                                                                                                                                                                     ## name 
                                                                                                                                                                                                                                                                                                                                     ## of 
                                                                                                                                                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                                                                                                                                                     ## <a>BasePathMapping</a> 
                                                                                                                                                                                                                                                                                                                                     ## resource 
                                                                                                                                                                                                                                                                                                                                     ## to 
                                                                                                                                                                                                                                                                                                                                     ## be 
                                                                                                                                                                                                                                                                                                                                     ## described.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `base_path` field"
  var valid_402657075 = path.getOrDefault("base_path")
  valid_402657075 = validateParameter(valid_402657075, JString, required = true,
                                      default = nil)
  if valid_402657075 != nil:
    section.add "base_path", valid_402657075
  var valid_402657076 = path.getOrDefault("domain_name")
  valid_402657076 = validateParameter(valid_402657076, JString, required = true,
                                      default = nil)
  if valid_402657076 != nil:
    section.add "domain_name", valid_402657076
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657077 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657077 = validateParameter(valid_402657077, JString,
                                      required = false, default = nil)
  if valid_402657077 != nil:
    section.add "X-Amz-Security-Token", valid_402657077
  var valid_402657078 = header.getOrDefault("X-Amz-Signature")
  valid_402657078 = validateParameter(valid_402657078, JString,
                                      required = false, default = nil)
  if valid_402657078 != nil:
    section.add "X-Amz-Signature", valid_402657078
  var valid_402657079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657079 = validateParameter(valid_402657079, JString,
                                      required = false, default = nil)
  if valid_402657079 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657079
  var valid_402657080 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657080 = validateParameter(valid_402657080, JString,
                                      required = false, default = nil)
  if valid_402657080 != nil:
    section.add "X-Amz-Algorithm", valid_402657080
  var valid_402657081 = header.getOrDefault("X-Amz-Date")
  valid_402657081 = validateParameter(valid_402657081, JString,
                                      required = false, default = nil)
  if valid_402657081 != nil:
    section.add "X-Amz-Date", valid_402657081
  var valid_402657082 = header.getOrDefault("X-Amz-Credential")
  valid_402657082 = validateParameter(valid_402657082, JString,
                                      required = false, default = nil)
  if valid_402657082 != nil:
    section.add "X-Amz-Credential", valid_402657082
  var valid_402657083 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657083 = validateParameter(valid_402657083, JString,
                                      required = false, default = nil)
  if valid_402657083 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657083
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657084: Call_GetBasePathMapping_402657072;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describe a <a>BasePathMapping</a> resource.
                                                                                         ## 
  let valid = call_402657084.validator(path, query, header, formData, body, _)
  let scheme = call_402657084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657084.makeUrl(scheme.get, call_402657084.host, call_402657084.base,
                                   call_402657084.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657084, uri, valid, _)

proc call*(call_402657085: Call_GetBasePathMapping_402657072; basePath: string;
           domainName: string): Recallable =
  ## getBasePathMapping
  ## Describe a <a>BasePathMapping</a> resource.
  ##   basePath: string (required)
                                                ##           : [Required] The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify any base path name after the domain name.
  ##   
                                                                                                                                                                                                                                                                                                                                                   ## domainName: string (required)
                                                                                                                                                                                                                                                                                                                                                   ##             
                                                                                                                                                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                                                                                                                                                   ## [Required] 
                                                                                                                                                                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                                                                                                                                                                   ## domain 
                                                                                                                                                                                                                                                                                                                                                   ## name 
                                                                                                                                                                                                                                                                                                                                                   ## of 
                                                                                                                                                                                                                                                                                                                                                   ## the 
                                                                                                                                                                                                                                                                                                                                                   ## <a>BasePathMapping</a> 
                                                                                                                                                                                                                                                                                                                                                   ## resource 
                                                                                                                                                                                                                                                                                                                                                   ## to 
                                                                                                                                                                                                                                                                                                                                                   ## be 
                                                                                                                                                                                                                                                                                                                                                   ## described.
  var path_402657086 = newJObject()
  add(path_402657086, "base_path", newJString(basePath))
  add(path_402657086, "domain_name", newJString(domainName))
  result = call_402657085.call(path_402657086, nil, nil, nil, nil)

var getBasePathMapping* = Call_GetBasePathMapping_402657072(
    name: "getBasePathMapping", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/domainnames/{domain_name}/basepathmappings/{base_path}",
    validator: validate_GetBasePathMapping_402657073, base: "/",
    makeUrl: url_GetBasePathMapping_402657074,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBasePathMapping_402657102 = ref object of OpenApiRestCall_402656035
proc url_UpdateBasePathMapping_402657104(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  assert "base_path" in path, "`base_path` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name"),
                 (kind: ConstantSegment, value: "/basepathmappings/"),
                 (kind: VariableSegment, value: "base_path")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateBasePathMapping_402657103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about the <a>BasePathMapping</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   base_path: JString (required)
                                 ##            : <p>[Required] The base path of the <a>BasePathMapping</a> resource to change.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
  ##   
                                                                                                                                                                                                                     ## domain_name: JString (required)
                                                                                                                                                                                                                     ##              
                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                     ## [Required] 
                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                     ## domain 
                                                                                                                                                                                                                     ## name 
                                                                                                                                                                                                                     ## of 
                                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                                     ## <a>BasePathMapping</a> 
                                                                                                                                                                                                                     ## resource 
                                                                                                                                                                                                                     ## to 
                                                                                                                                                                                                                     ## change.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `base_path` field"
  var valid_402657105 = path.getOrDefault("base_path")
  valid_402657105 = validateParameter(valid_402657105, JString, required = true,
                                      default = nil)
  if valid_402657105 != nil:
    section.add "base_path", valid_402657105
  var valid_402657106 = path.getOrDefault("domain_name")
  valid_402657106 = validateParameter(valid_402657106, JString, required = true,
                                      default = nil)
  if valid_402657106 != nil:
    section.add "domain_name", valid_402657106
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657107 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657107 = validateParameter(valid_402657107, JString,
                                      required = false, default = nil)
  if valid_402657107 != nil:
    section.add "X-Amz-Security-Token", valid_402657107
  var valid_402657108 = header.getOrDefault("X-Amz-Signature")
  valid_402657108 = validateParameter(valid_402657108, JString,
                                      required = false, default = nil)
  if valid_402657108 != nil:
    section.add "X-Amz-Signature", valid_402657108
  var valid_402657109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657109 = validateParameter(valid_402657109, JString,
                                      required = false, default = nil)
  if valid_402657109 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657109
  var valid_402657110 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657110 = validateParameter(valid_402657110, JString,
                                      required = false, default = nil)
  if valid_402657110 != nil:
    section.add "X-Amz-Algorithm", valid_402657110
  var valid_402657111 = header.getOrDefault("X-Amz-Date")
  valid_402657111 = validateParameter(valid_402657111, JString,
                                      required = false, default = nil)
  if valid_402657111 != nil:
    section.add "X-Amz-Date", valid_402657111
  var valid_402657112 = header.getOrDefault("X-Amz-Credential")
  valid_402657112 = validateParameter(valid_402657112, JString,
                                      required = false, default = nil)
  if valid_402657112 != nil:
    section.add "X-Amz-Credential", valid_402657112
  var valid_402657113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657113 = validateParameter(valid_402657113, JString,
                                      required = false, default = nil)
  if valid_402657113 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657113
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657115: Call_UpdateBasePathMapping_402657102;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about the <a>BasePathMapping</a> resource.
                                                                                         ## 
  let valid = call_402657115.validator(path, query, header, formData, body, _)
  let scheme = call_402657115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657115.makeUrl(scheme.get, call_402657115.host, call_402657115.base,
                                   call_402657115.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657115, uri, valid, _)

proc call*(call_402657116: Call_UpdateBasePathMapping_402657102;
           basePath: string; domainName: string; body: JsonNode): Recallable =
  ## updateBasePathMapping
  ## Changes information about the <a>BasePathMapping</a> resource.
  ##   basePath: string (required)
                                                                   ##           : <p>[Required] The base path of the <a>BasePathMapping</a> resource to change.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
  ##   
                                                                                                                                                                                                                                                      ## domainName: string (required)
                                                                                                                                                                                                                                                      ##             
                                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                                      ## [Required] 
                                                                                                                                                                                                                                                      ## The 
                                                                                                                                                                                                                                                      ## domain 
                                                                                                                                                                                                                                                      ## name 
                                                                                                                                                                                                                                                      ## of 
                                                                                                                                                                                                                                                      ## the 
                                                                                                                                                                                                                                                      ## <a>BasePathMapping</a> 
                                                                                                                                                                                                                                                      ## resource 
                                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                                      ## change.
  ##   
                                                                                                                                                                                                                                                                ## body: JObject (required)
  var path_402657117 = newJObject()
  var body_402657118 = newJObject()
  add(path_402657117, "base_path", newJString(basePath))
  add(path_402657117, "domain_name", newJString(domainName))
  if body != nil:
    body_402657118 = body
  result = call_402657116.call(path_402657117, nil, nil, nil, body_402657118)

var updateBasePathMapping* = Call_UpdateBasePathMapping_402657102(
    name: "updateBasePathMapping", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/domainnames/{domain_name}/basepathmappings/{base_path}",
    validator: validate_UpdateBasePathMapping_402657103, base: "/",
    makeUrl: url_UpdateBasePathMapping_402657104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteBasePathMapping_402657087 = ref object of OpenApiRestCall_402656035
proc url_DeleteBasePathMapping_402657089(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  assert "base_path" in path, "`base_path` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name"),
                 (kind: ConstantSegment, value: "/basepathmappings/"),
                 (kind: VariableSegment, value: "base_path")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteBasePathMapping_402657088(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the <a>BasePathMapping</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   base_path: JString (required)
                                 ##            : <p>[Required] The base path name of the <a>BasePathMapping</a> resource to delete.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
  ##   
                                                                                                                                                                                                                          ## domain_name: JString (required)
                                                                                                                                                                                                                          ##              
                                                                                                                                                                                                                          ## : 
                                                                                                                                                                                                                          ## [Required] 
                                                                                                                                                                                                                          ## The 
                                                                                                                                                                                                                          ## domain 
                                                                                                                                                                                                                          ## name 
                                                                                                                                                                                                                          ## of 
                                                                                                                                                                                                                          ## the 
                                                                                                                                                                                                                          ## <a>BasePathMapping</a> 
                                                                                                                                                                                                                          ## resource 
                                                                                                                                                                                                                          ## to 
                                                                                                                                                                                                                          ## delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `base_path` field"
  var valid_402657090 = path.getOrDefault("base_path")
  valid_402657090 = validateParameter(valid_402657090, JString, required = true,
                                      default = nil)
  if valid_402657090 != nil:
    section.add "base_path", valid_402657090
  var valid_402657091 = path.getOrDefault("domain_name")
  valid_402657091 = validateParameter(valid_402657091, JString, required = true,
                                      default = nil)
  if valid_402657091 != nil:
    section.add "domain_name", valid_402657091
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657092 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657092 = validateParameter(valid_402657092, JString,
                                      required = false, default = nil)
  if valid_402657092 != nil:
    section.add "X-Amz-Security-Token", valid_402657092
  var valid_402657093 = header.getOrDefault("X-Amz-Signature")
  valid_402657093 = validateParameter(valid_402657093, JString,
                                      required = false, default = nil)
  if valid_402657093 != nil:
    section.add "X-Amz-Signature", valid_402657093
  var valid_402657094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657094 = validateParameter(valid_402657094, JString,
                                      required = false, default = nil)
  if valid_402657094 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657094
  var valid_402657095 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657095 = validateParameter(valid_402657095, JString,
                                      required = false, default = nil)
  if valid_402657095 != nil:
    section.add "X-Amz-Algorithm", valid_402657095
  var valid_402657096 = header.getOrDefault("X-Amz-Date")
  valid_402657096 = validateParameter(valid_402657096, JString,
                                      required = false, default = nil)
  if valid_402657096 != nil:
    section.add "X-Amz-Date", valid_402657096
  var valid_402657097 = header.getOrDefault("X-Amz-Credential")
  valid_402657097 = validateParameter(valid_402657097, JString,
                                      required = false, default = nil)
  if valid_402657097 != nil:
    section.add "X-Amz-Credential", valid_402657097
  var valid_402657098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657098 = validateParameter(valid_402657098, JString,
                                      required = false, default = nil)
  if valid_402657098 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657098
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657099: Call_DeleteBasePathMapping_402657087;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the <a>BasePathMapping</a> resource.
                                                                                         ## 
  let valid = call_402657099.validator(path, query, header, formData, body, _)
  let scheme = call_402657099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657099.makeUrl(scheme.get, call_402657099.host, call_402657099.base,
                                   call_402657099.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657099, uri, valid, _)

proc call*(call_402657100: Call_DeleteBasePathMapping_402657087;
           basePath: string; domainName: string): Recallable =
  ## deleteBasePathMapping
  ## Deletes the <a>BasePathMapping</a> resource.
  ##   basePath: string (required)
                                                 ##           : <p>[Required] The base path name of the <a>BasePathMapping</a> resource to delete.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
  ##   
                                                                                                                                                                                                                                         ## domainName: string (required)
                                                                                                                                                                                                                                         ##             
                                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                                         ## [Required] 
                                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                                         ## domain 
                                                                                                                                                                                                                                         ## name 
                                                                                                                                                                                                                                         ## of 
                                                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                                                         ## <a>BasePathMapping</a> 
                                                                                                                                                                                                                                         ## resource 
                                                                                                                                                                                                                                         ## to 
                                                                                                                                                                                                                                         ## delete.
  var path_402657101 = newJObject()
  add(path_402657101, "base_path", newJString(basePath))
  add(path_402657101, "domain_name", newJString(domainName))
  result = call_402657100.call(path_402657101, nil, nil, nil, nil)

var deleteBasePathMapping* = Call_DeleteBasePathMapping_402657087(
    name: "deleteBasePathMapping", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/domainnames/{domain_name}/basepathmappings/{base_path}",
    validator: validate_DeleteBasePathMapping_402657088, base: "/",
    makeUrl: url_DeleteBasePathMapping_402657089,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClientCertificate_402657119 = ref object of OpenApiRestCall_402656035
proc url_GetClientCertificate_402657121(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "clientcertificate_id" in path,
         "`clientcertificate_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/clientcertificates/"),
                 (kind: VariableSegment, value: "clientcertificate_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetClientCertificate_402657120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the current <a>ClientCertificate</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   clientcertificate_id: JString (required)
                                 ##                       : [Required] The identifier of the <a>ClientCertificate</a> resource to be described.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `clientcertificate_id` field"
  var valid_402657122 = path.getOrDefault("clientcertificate_id")
  valid_402657122 = validateParameter(valid_402657122, JString, required = true,
                                      default = nil)
  if valid_402657122 != nil:
    section.add "clientcertificate_id", valid_402657122
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657123 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657123 = validateParameter(valid_402657123, JString,
                                      required = false, default = nil)
  if valid_402657123 != nil:
    section.add "X-Amz-Security-Token", valid_402657123
  var valid_402657124 = header.getOrDefault("X-Amz-Signature")
  valid_402657124 = validateParameter(valid_402657124, JString,
                                      required = false, default = nil)
  if valid_402657124 != nil:
    section.add "X-Amz-Signature", valid_402657124
  var valid_402657125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657125 = validateParameter(valid_402657125, JString,
                                      required = false, default = nil)
  if valid_402657125 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657125
  var valid_402657126 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657126 = validateParameter(valid_402657126, JString,
                                      required = false, default = nil)
  if valid_402657126 != nil:
    section.add "X-Amz-Algorithm", valid_402657126
  var valid_402657127 = header.getOrDefault("X-Amz-Date")
  valid_402657127 = validateParameter(valid_402657127, JString,
                                      required = false, default = nil)
  if valid_402657127 != nil:
    section.add "X-Amz-Date", valid_402657127
  var valid_402657128 = header.getOrDefault("X-Amz-Credential")
  valid_402657128 = validateParameter(valid_402657128, JString,
                                      required = false, default = nil)
  if valid_402657128 != nil:
    section.add "X-Amz-Credential", valid_402657128
  var valid_402657129 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657129 = validateParameter(valid_402657129, JString,
                                      required = false, default = nil)
  if valid_402657129 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657129
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657130: Call_GetClientCertificate_402657119;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the current <a>ClientCertificate</a> resource.
                                                                                         ## 
  let valid = call_402657130.validator(path, query, header, formData, body, _)
  let scheme = call_402657130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657130.makeUrl(scheme.get, call_402657130.host, call_402657130.base,
                                   call_402657130.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657130, uri, valid, _)

proc call*(call_402657131: Call_GetClientCertificate_402657119;
           clientcertificateId: string): Recallable =
  ## getClientCertificate
  ## Gets information about the current <a>ClientCertificate</a> resource.
  ##   
                                                                          ## clientcertificateId: string (required)
                                                                          ##                      
                                                                          ## : 
                                                                          ## [Required] 
                                                                          ## The 
                                                                          ## identifier 
                                                                          ## of 
                                                                          ## the 
                                                                          ## <a>ClientCertificate</a> 
                                                                          ## resource 
                                                                          ## to 
                                                                          ## be 
                                                                          ## described.
  var path_402657132 = newJObject()
  add(path_402657132, "clientcertificate_id", newJString(clientcertificateId))
  result = call_402657131.call(path_402657132, nil, nil, nil, nil)

var getClientCertificate* = Call_GetClientCertificate_402657119(
    name: "getClientCertificate", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/clientcertificates/{clientcertificate_id}",
    validator: validate_GetClientCertificate_402657120, base: "/",
    makeUrl: url_GetClientCertificate_402657121,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateClientCertificate_402657147 = ref object of OpenApiRestCall_402656035
proc url_UpdateClientCertificate_402657149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "clientcertificate_id" in path,
         "`clientcertificate_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/clientcertificates/"),
                 (kind: VariableSegment, value: "clientcertificate_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateClientCertificate_402657148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about an <a>ClientCertificate</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   clientcertificate_id: JString (required)
                                 ##                       : [Required] The identifier of the <a>ClientCertificate</a> resource to be updated.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `clientcertificate_id` field"
  var valid_402657150 = path.getOrDefault("clientcertificate_id")
  valid_402657150 = validateParameter(valid_402657150, JString, required = true,
                                      default = nil)
  if valid_402657150 != nil:
    section.add "clientcertificate_id", valid_402657150
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657151 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657151 = validateParameter(valid_402657151, JString,
                                      required = false, default = nil)
  if valid_402657151 != nil:
    section.add "X-Amz-Security-Token", valid_402657151
  var valid_402657152 = header.getOrDefault("X-Amz-Signature")
  valid_402657152 = validateParameter(valid_402657152, JString,
                                      required = false, default = nil)
  if valid_402657152 != nil:
    section.add "X-Amz-Signature", valid_402657152
  var valid_402657153 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657153 = validateParameter(valid_402657153, JString,
                                      required = false, default = nil)
  if valid_402657153 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657153
  var valid_402657154 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657154 = validateParameter(valid_402657154, JString,
                                      required = false, default = nil)
  if valid_402657154 != nil:
    section.add "X-Amz-Algorithm", valid_402657154
  var valid_402657155 = header.getOrDefault("X-Amz-Date")
  valid_402657155 = validateParameter(valid_402657155, JString,
                                      required = false, default = nil)
  if valid_402657155 != nil:
    section.add "X-Amz-Date", valid_402657155
  var valid_402657156 = header.getOrDefault("X-Amz-Credential")
  valid_402657156 = validateParameter(valid_402657156, JString,
                                      required = false, default = nil)
  if valid_402657156 != nil:
    section.add "X-Amz-Credential", valid_402657156
  var valid_402657157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657157 = validateParameter(valid_402657157, JString,
                                      required = false, default = nil)
  if valid_402657157 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657157
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657159: Call_UpdateClientCertificate_402657147;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about an <a>ClientCertificate</a> resource.
                                                                                         ## 
  let valid = call_402657159.validator(path, query, header, formData, body, _)
  let scheme = call_402657159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657159.makeUrl(scheme.get, call_402657159.host, call_402657159.base,
                                   call_402657159.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657159, uri, valid, _)

proc call*(call_402657160: Call_UpdateClientCertificate_402657147;
           body: JsonNode; clientcertificateId: string): Recallable =
  ## updateClientCertificate
  ## Changes information about an <a>ClientCertificate</a> resource.
  ##   body: JObject (required)
  ##   clientcertificateId: string (required)
                               ##                      : [Required] The identifier of the <a>ClientCertificate</a> resource to be updated.
  var path_402657161 = newJObject()
  var body_402657162 = newJObject()
  if body != nil:
    body_402657162 = body
  add(path_402657161, "clientcertificate_id", newJString(clientcertificateId))
  result = call_402657160.call(path_402657161, nil, nil, nil, body_402657162)

var updateClientCertificate* = Call_UpdateClientCertificate_402657147(
    name: "updateClientCertificate", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/clientcertificates/{clientcertificate_id}",
    validator: validate_UpdateClientCertificate_402657148, base: "/",
    makeUrl: url_UpdateClientCertificate_402657149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteClientCertificate_402657133 = ref object of OpenApiRestCall_402656035
proc url_DeleteClientCertificate_402657135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "clientcertificate_id" in path,
         "`clientcertificate_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/clientcertificates/"),
                 (kind: VariableSegment, value: "clientcertificate_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteClientCertificate_402657134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the <a>ClientCertificate</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   clientcertificate_id: JString (required)
                                 ##                       : [Required] The identifier of the <a>ClientCertificate</a> resource to be deleted.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `clientcertificate_id` field"
  var valid_402657136 = path.getOrDefault("clientcertificate_id")
  valid_402657136 = validateParameter(valid_402657136, JString, required = true,
                                      default = nil)
  if valid_402657136 != nil:
    section.add "clientcertificate_id", valid_402657136
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657137 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657137 = validateParameter(valid_402657137, JString,
                                      required = false, default = nil)
  if valid_402657137 != nil:
    section.add "X-Amz-Security-Token", valid_402657137
  var valid_402657138 = header.getOrDefault("X-Amz-Signature")
  valid_402657138 = validateParameter(valid_402657138, JString,
                                      required = false, default = nil)
  if valid_402657138 != nil:
    section.add "X-Amz-Signature", valid_402657138
  var valid_402657139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657139 = validateParameter(valid_402657139, JString,
                                      required = false, default = nil)
  if valid_402657139 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657139
  var valid_402657140 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657140 = validateParameter(valid_402657140, JString,
                                      required = false, default = nil)
  if valid_402657140 != nil:
    section.add "X-Amz-Algorithm", valid_402657140
  var valid_402657141 = header.getOrDefault("X-Amz-Date")
  valid_402657141 = validateParameter(valid_402657141, JString,
                                      required = false, default = nil)
  if valid_402657141 != nil:
    section.add "X-Amz-Date", valid_402657141
  var valid_402657142 = header.getOrDefault("X-Amz-Credential")
  valid_402657142 = validateParameter(valid_402657142, JString,
                                      required = false, default = nil)
  if valid_402657142 != nil:
    section.add "X-Amz-Credential", valid_402657142
  var valid_402657143 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657143 = validateParameter(valid_402657143, JString,
                                      required = false, default = nil)
  if valid_402657143 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657143
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657144: Call_DeleteClientCertificate_402657133;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the <a>ClientCertificate</a> resource.
                                                                                         ## 
  let valid = call_402657144.validator(path, query, header, formData, body, _)
  let scheme = call_402657144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657144.makeUrl(scheme.get, call_402657144.host, call_402657144.base,
                                   call_402657144.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657144, uri, valid, _)

proc call*(call_402657145: Call_DeleteClientCertificate_402657133;
           clientcertificateId: string): Recallable =
  ## deleteClientCertificate
  ## Deletes the <a>ClientCertificate</a> resource.
  ##   clientcertificateId: string (required)
                                                   ##                      : [Required] The identifier of the <a>ClientCertificate</a> resource to be deleted.
  var path_402657146 = newJObject()
  add(path_402657146, "clientcertificate_id", newJString(clientcertificateId))
  result = call_402657145.call(path_402657146, nil, nil, nil, nil)

var deleteClientCertificate* = Call_DeleteClientCertificate_402657133(
    name: "deleteClientCertificate", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/clientcertificates/{clientcertificate_id}",
    validator: validate_DeleteClientCertificate_402657134, base: "/",
    makeUrl: url_DeleteClientCertificate_402657135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeployment_402657163 = ref object of OpenApiRestCall_402656035
proc url_GetDeployment_402657165(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "deployment_id" in path, "`deployment_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/deployments/"),
                 (kind: VariableSegment, value: "deployment_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetDeployment_402657164(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a <a>Deployment</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## deployment_id: JString (required)
                                                                                                                    ##                
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>Deployment</a> 
                                                                                                                    ## resource 
                                                                                                                    ## to 
                                                                                                                    ## get 
                                                                                                                    ## information 
                                                                                                                    ## about.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657166 = path.getOrDefault("restapi_id")
  valid_402657166 = validateParameter(valid_402657166, JString, required = true,
                                      default = nil)
  if valid_402657166 != nil:
    section.add "restapi_id", valid_402657166
  var valid_402657167 = path.getOrDefault("deployment_id")
  valid_402657167 = validateParameter(valid_402657167, JString, required = true,
                                      default = nil)
  if valid_402657167 != nil:
    section.add "deployment_id", valid_402657167
  result.add "path", section
  ## parameters in `query` object:
  ##   embed: JArray
                                  ##        : A query parameter to retrieve the specified embedded resources of the returned <a>Deployment</a> resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in <code>GET 
                                  ## /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. 
                                  ## The 
                                  ## SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the <code>"apisummary"</code> string. For example, <code>GET 
                                  ## /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.
  section = newJObject()
  var valid_402657168 = query.getOrDefault("embed")
  valid_402657168 = validateParameter(valid_402657168, JArray, required = false,
                                      default = nil)
  if valid_402657168 != nil:
    section.add "embed", valid_402657168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657169 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657169 = validateParameter(valid_402657169, JString,
                                      required = false, default = nil)
  if valid_402657169 != nil:
    section.add "X-Amz-Security-Token", valid_402657169
  var valid_402657170 = header.getOrDefault("X-Amz-Signature")
  valid_402657170 = validateParameter(valid_402657170, JString,
                                      required = false, default = nil)
  if valid_402657170 != nil:
    section.add "X-Amz-Signature", valid_402657170
  var valid_402657171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657171 = validateParameter(valid_402657171, JString,
                                      required = false, default = nil)
  if valid_402657171 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657171
  var valid_402657172 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657172 = validateParameter(valid_402657172, JString,
                                      required = false, default = nil)
  if valid_402657172 != nil:
    section.add "X-Amz-Algorithm", valid_402657172
  var valid_402657173 = header.getOrDefault("X-Amz-Date")
  valid_402657173 = validateParameter(valid_402657173, JString,
                                      required = false, default = nil)
  if valid_402657173 != nil:
    section.add "X-Amz-Date", valid_402657173
  var valid_402657174 = header.getOrDefault("X-Amz-Credential")
  valid_402657174 = validateParameter(valid_402657174, JString,
                                      required = false, default = nil)
  if valid_402657174 != nil:
    section.add "X-Amz-Credential", valid_402657174
  var valid_402657175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657175 = validateParameter(valid_402657175, JString,
                                      required = false, default = nil)
  if valid_402657175 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657175
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657176: Call_GetDeployment_402657163; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a <a>Deployment</a> resource.
                                                                                         ## 
  let valid = call_402657176.validator(path, query, header, formData, body, _)
  let scheme = call_402657176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657176.makeUrl(scheme.get, call_402657176.host, call_402657176.base,
                                   call_402657176.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657176, uri, valid, _)

proc call*(call_402657177: Call_GetDeployment_402657163; restapiId: string;
           deploymentId: string; embed: JsonNode = nil): Recallable =
  ## getDeployment
  ## Gets information about a <a>Deployment</a> resource.
  ##   embed: JArray
                                                         ##        : A query parameter to retrieve the specified embedded resources of the returned <a>Deployment</a> resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in <code>GET 
                                                         ## /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. 
                                                         ## The 
                                                         ## SDK and other 
                                                         ## platform-dependent 
                                                         ## libraries 
                                                         ## might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a 
                                                         ## single-valued 
                                                         ## list 
                                                         ## containing only the 
                                                         ## <code>"apisummary"</code> 
                                                         ## string. 
                                                         ## For example, <code>GET 
                                                         ## /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.
  ##   
                                                                                                                                       ## restapiId: string (required)
                                                                                                                                       ##            
                                                                                                                                       ## : 
                                                                                                                                       ## [Required] 
                                                                                                                                       ## The 
                                                                                                                                       ## string 
                                                                                                                                       ## identifier 
                                                                                                                                       ## of 
                                                                                                                                       ## the 
                                                                                                                                       ## associated 
                                                                                                                                       ## <a>RestApi</a>.
  ##   
                                                                                                                                                         ## deploymentId: string (required)
                                                                                                                                                         ##               
                                                                                                                                                         ## : 
                                                                                                                                                         ## [Required] 
                                                                                                                                                         ## The 
                                                                                                                                                         ## identifier 
                                                                                                                                                         ## of 
                                                                                                                                                         ## the 
                                                                                                                                                         ## <a>Deployment</a> 
                                                                                                                                                         ## resource 
                                                                                                                                                         ## to 
                                                                                                                                                         ## get 
                                                                                                                                                         ## information 
                                                                                                                                                         ## about.
  var path_402657178 = newJObject()
  var query_402657179 = newJObject()
  if embed != nil:
    query_402657179.add "embed", embed
  add(path_402657178, "restapi_id", newJString(restapiId))
  add(path_402657178, "deployment_id", newJString(deploymentId))
  result = call_402657177.call(path_402657178, query_402657179, nil, nil, nil)

var getDeployment* = Call_GetDeployment_402657163(name: "getDeployment",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/deployments/{deployment_id}",
    validator: validate_GetDeployment_402657164, base: "/",
    makeUrl: url_GetDeployment_402657165, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDeployment_402657195 = ref object of OpenApiRestCall_402656035
proc url_UpdateDeployment_402657197(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "deployment_id" in path, "`deployment_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/deployments/"),
                 (kind: VariableSegment, value: "deployment_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDeployment_402657196(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about a <a>Deployment</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## deployment_id: JString (required)
                                                                                                                    ##                
                                                                                                                    ## : 
                                                                                                                    ## The 
                                                                                                                    ## replacement 
                                                                                                                    ## identifier 
                                                                                                                    ## for 
                                                                                                                    ## the 
                                                                                                                    ## <a>Deployment</a> 
                                                                                                                    ## resource 
                                                                                                                    ## to 
                                                                                                                    ## change 
                                                                                                                    ## information 
                                                                                                                    ## about.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657198 = path.getOrDefault("restapi_id")
  valid_402657198 = validateParameter(valid_402657198, JString, required = true,
                                      default = nil)
  if valid_402657198 != nil:
    section.add "restapi_id", valid_402657198
  var valid_402657199 = path.getOrDefault("deployment_id")
  valid_402657199 = validateParameter(valid_402657199, JString, required = true,
                                      default = nil)
  if valid_402657199 != nil:
    section.add "deployment_id", valid_402657199
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657200 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657200 = validateParameter(valid_402657200, JString,
                                      required = false, default = nil)
  if valid_402657200 != nil:
    section.add "X-Amz-Security-Token", valid_402657200
  var valid_402657201 = header.getOrDefault("X-Amz-Signature")
  valid_402657201 = validateParameter(valid_402657201, JString,
                                      required = false, default = nil)
  if valid_402657201 != nil:
    section.add "X-Amz-Signature", valid_402657201
  var valid_402657202 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657202 = validateParameter(valid_402657202, JString,
                                      required = false, default = nil)
  if valid_402657202 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657202
  var valid_402657203 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657203 = validateParameter(valid_402657203, JString,
                                      required = false, default = nil)
  if valid_402657203 != nil:
    section.add "X-Amz-Algorithm", valid_402657203
  var valid_402657204 = header.getOrDefault("X-Amz-Date")
  valid_402657204 = validateParameter(valid_402657204, JString,
                                      required = false, default = nil)
  if valid_402657204 != nil:
    section.add "X-Amz-Date", valid_402657204
  var valid_402657205 = header.getOrDefault("X-Amz-Credential")
  valid_402657205 = validateParameter(valid_402657205, JString,
                                      required = false, default = nil)
  if valid_402657205 != nil:
    section.add "X-Amz-Credential", valid_402657205
  var valid_402657206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657206 = validateParameter(valid_402657206, JString,
                                      required = false, default = nil)
  if valid_402657206 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657208: Call_UpdateDeployment_402657195;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about a <a>Deployment</a> resource.
                                                                                         ## 
  let valid = call_402657208.validator(path, query, header, formData, body, _)
  let scheme = call_402657208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657208.makeUrl(scheme.get, call_402657208.host, call_402657208.base,
                                   call_402657208.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657208, uri, valid, _)

proc call*(call_402657209: Call_UpdateDeployment_402657195; restapiId: string;
           body: JsonNode; deploymentId: string): Recallable =
  ## updateDeployment
  ## Changes information about a <a>Deployment</a> resource.
  ##   restapiId: string (required)
                                                            ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                              ## body: JObject (required)
  ##   
                                                                                                                                                                         ## deploymentId: string (required)
                                                                                                                                                                         ##               
                                                                                                                                                                         ## : 
                                                                                                                                                                         ## The 
                                                                                                                                                                         ## replacement 
                                                                                                                                                                         ## identifier 
                                                                                                                                                                         ## for 
                                                                                                                                                                         ## the 
                                                                                                                                                                         ## <a>Deployment</a> 
                                                                                                                                                                         ## resource 
                                                                                                                                                                         ## to 
                                                                                                                                                                         ## change 
                                                                                                                                                                         ## information 
                                                                                                                                                                         ## about.
  var path_402657210 = newJObject()
  var body_402657211 = newJObject()
  add(path_402657210, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657211 = body
  add(path_402657210, "deployment_id", newJString(deploymentId))
  result = call_402657209.call(path_402657210, nil, nil, nil, body_402657211)

var updateDeployment* = Call_UpdateDeployment_402657195(
    name: "updateDeployment", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/deployments/{deployment_id}",
    validator: validate_UpdateDeployment_402657196, base: "/",
    makeUrl: url_UpdateDeployment_402657197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDeployment_402657180 = ref object of OpenApiRestCall_402656035
proc url_DeleteDeployment_402657182(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "deployment_id" in path, "`deployment_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/deployments/"),
                 (kind: VariableSegment, value: "deployment_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDeployment_402657181(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a <a>Deployment</a> resource. Deleting a deployment will only succeed if there are no <a>Stage</a> resources associated with it.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## deployment_id: JString (required)
                                                                                                                    ##                
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>Deployment</a> 
                                                                                                                    ## resource 
                                                                                                                    ## to 
                                                                                                                    ## delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657183 = path.getOrDefault("restapi_id")
  valid_402657183 = validateParameter(valid_402657183, JString, required = true,
                                      default = nil)
  if valid_402657183 != nil:
    section.add "restapi_id", valid_402657183
  var valid_402657184 = path.getOrDefault("deployment_id")
  valid_402657184 = validateParameter(valid_402657184, JString, required = true,
                                      default = nil)
  if valid_402657184 != nil:
    section.add "deployment_id", valid_402657184
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657185 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657185 = validateParameter(valid_402657185, JString,
                                      required = false, default = nil)
  if valid_402657185 != nil:
    section.add "X-Amz-Security-Token", valid_402657185
  var valid_402657186 = header.getOrDefault("X-Amz-Signature")
  valid_402657186 = validateParameter(valid_402657186, JString,
                                      required = false, default = nil)
  if valid_402657186 != nil:
    section.add "X-Amz-Signature", valid_402657186
  var valid_402657187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657187 = validateParameter(valid_402657187, JString,
                                      required = false, default = nil)
  if valid_402657187 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657187
  var valid_402657188 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657188 = validateParameter(valid_402657188, JString,
                                      required = false, default = nil)
  if valid_402657188 != nil:
    section.add "X-Amz-Algorithm", valid_402657188
  var valid_402657189 = header.getOrDefault("X-Amz-Date")
  valid_402657189 = validateParameter(valid_402657189, JString,
                                      required = false, default = nil)
  if valid_402657189 != nil:
    section.add "X-Amz-Date", valid_402657189
  var valid_402657190 = header.getOrDefault("X-Amz-Credential")
  valid_402657190 = validateParameter(valid_402657190, JString,
                                      required = false, default = nil)
  if valid_402657190 != nil:
    section.add "X-Amz-Credential", valid_402657190
  var valid_402657191 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657191 = validateParameter(valid_402657191, JString,
                                      required = false, default = nil)
  if valid_402657191 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657191
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657192: Call_DeleteDeployment_402657180;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a <a>Deployment</a> resource. Deleting a deployment will only succeed if there are no <a>Stage</a> resources associated with it.
                                                                                         ## 
  let valid = call_402657192.validator(path, query, header, formData, body, _)
  let scheme = call_402657192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657192.makeUrl(scheme.get, call_402657192.host, call_402657192.base,
                                   call_402657192.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657192, uri, valid, _)

proc call*(call_402657193: Call_DeleteDeployment_402657180; restapiId: string;
           deploymentId: string): Recallable =
  ## deleteDeployment
  ## Deletes a <a>Deployment</a> resource. Deleting a deployment will only succeed if there are no <a>Stage</a> resources associated with it.
  ##   
                                                                                                                                             ## restapiId: string (required)
                                                                                                                                             ##            
                                                                                                                                             ## : 
                                                                                                                                             ## [Required] 
                                                                                                                                             ## The 
                                                                                                                                             ## string 
                                                                                                                                             ## identifier 
                                                                                                                                             ## of 
                                                                                                                                             ## the 
                                                                                                                                             ## associated 
                                                                                                                                             ## <a>RestApi</a>.
  ##   
                                                                                                                                                               ## deploymentId: string (required)
                                                                                                                                                               ##               
                                                                                                                                                               ## : 
                                                                                                                                                               ## [Required] 
                                                                                                                                                               ## The 
                                                                                                                                                               ## identifier 
                                                                                                                                                               ## of 
                                                                                                                                                               ## the 
                                                                                                                                                               ## <a>Deployment</a> 
                                                                                                                                                               ## resource 
                                                                                                                                                               ## to 
                                                                                                                                                               ## delete.
  var path_402657194 = newJObject()
  add(path_402657194, "restapi_id", newJString(restapiId))
  add(path_402657194, "deployment_id", newJString(deploymentId))
  result = call_402657193.call(path_402657194, nil, nil, nil, nil)

var deleteDeployment* = Call_DeleteDeployment_402657180(
    name: "deleteDeployment", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/deployments/{deployment_id}",
    validator: validate_DeleteDeployment_402657181, base: "/",
    makeUrl: url_DeleteDeployment_402657182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDocumentationPart_402657212 = ref object of OpenApiRestCall_402656035
proc url_GetDocumentationPart_402657214(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "part_id" in path, "`part_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/parts/"),
                 (kind: VariableSegment, value: "part_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetDocumentationPart_402657213(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## part_id: JString (required)
                                                                                                                    ##          
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## string 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## associated 
                                                                                                                    ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657215 = path.getOrDefault("restapi_id")
  valid_402657215 = validateParameter(valid_402657215, JString, required = true,
                                      default = nil)
  if valid_402657215 != nil:
    section.add "restapi_id", valid_402657215
  var valid_402657216 = path.getOrDefault("part_id")
  valid_402657216 = validateParameter(valid_402657216, JString, required = true,
                                      default = nil)
  if valid_402657216 != nil:
    section.add "part_id", valid_402657216
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657217 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657217 = validateParameter(valid_402657217, JString,
                                      required = false, default = nil)
  if valid_402657217 != nil:
    section.add "X-Amz-Security-Token", valid_402657217
  var valid_402657218 = header.getOrDefault("X-Amz-Signature")
  valid_402657218 = validateParameter(valid_402657218, JString,
                                      required = false, default = nil)
  if valid_402657218 != nil:
    section.add "X-Amz-Signature", valid_402657218
  var valid_402657219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657219 = validateParameter(valid_402657219, JString,
                                      required = false, default = nil)
  if valid_402657219 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657219
  var valid_402657220 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657220 = validateParameter(valid_402657220, JString,
                                      required = false, default = nil)
  if valid_402657220 != nil:
    section.add "X-Amz-Algorithm", valid_402657220
  var valid_402657221 = header.getOrDefault("X-Amz-Date")
  valid_402657221 = validateParameter(valid_402657221, JString,
                                      required = false, default = nil)
  if valid_402657221 != nil:
    section.add "X-Amz-Date", valid_402657221
  var valid_402657222 = header.getOrDefault("X-Amz-Credential")
  valid_402657222 = validateParameter(valid_402657222, JString,
                                      required = false, default = nil)
  if valid_402657222 != nil:
    section.add "X-Amz-Credential", valid_402657222
  var valid_402657223 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657223 = validateParameter(valid_402657223, JString,
                                      required = false, default = nil)
  if valid_402657223 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657223
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657224: Call_GetDocumentationPart_402657212;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402657224.validator(path, query, header, formData, body, _)
  let scheme = call_402657224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657224.makeUrl(scheme.get, call_402657224.host, call_402657224.base,
                                   call_402657224.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657224, uri, valid, _)

proc call*(call_402657225: Call_GetDocumentationPart_402657212;
           restapiId: string; partId: string): Recallable =
  ## getDocumentationPart
  ##   restapiId: string (required)
                         ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                           ## partId: string (required)
                                                                                                           ##         
                                                                                                           ## : 
                                                                                                           ## [Required] 
                                                                                                           ## The 
                                                                                                           ## string 
                                                                                                           ## identifier 
                                                                                                           ## of 
                                                                                                           ## the 
                                                                                                           ## associated 
                                                                                                           ## <a>RestApi</a>.
  var path_402657226 = newJObject()
  add(path_402657226, "restapi_id", newJString(restapiId))
  add(path_402657226, "part_id", newJString(partId))
  result = call_402657225.call(path_402657226, nil, nil, nil, nil)

var getDocumentationPart* = Call_GetDocumentationPart_402657212(
    name: "getDocumentationPart", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/parts/{part_id}",
    validator: validate_GetDocumentationPart_402657213, base: "/",
    makeUrl: url_GetDocumentationPart_402657214,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDocumentationPart_402657242 = ref object of OpenApiRestCall_402656035
proc url_UpdateDocumentationPart_402657244(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "part_id" in path, "`part_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/parts/"),
                 (kind: VariableSegment, value: "part_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDocumentationPart_402657243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## part_id: JString (required)
                                                                                                                    ##          
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## to-be-updated 
                                                                                                                    ## documentation 
                                                                                                                    ## part.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657245 = path.getOrDefault("restapi_id")
  valid_402657245 = validateParameter(valid_402657245, JString, required = true,
                                      default = nil)
  if valid_402657245 != nil:
    section.add "restapi_id", valid_402657245
  var valid_402657246 = path.getOrDefault("part_id")
  valid_402657246 = validateParameter(valid_402657246, JString, required = true,
                                      default = nil)
  if valid_402657246 != nil:
    section.add "part_id", valid_402657246
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657247 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657247 = validateParameter(valid_402657247, JString,
                                      required = false, default = nil)
  if valid_402657247 != nil:
    section.add "X-Amz-Security-Token", valid_402657247
  var valid_402657248 = header.getOrDefault("X-Amz-Signature")
  valid_402657248 = validateParameter(valid_402657248, JString,
                                      required = false, default = nil)
  if valid_402657248 != nil:
    section.add "X-Amz-Signature", valid_402657248
  var valid_402657249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657249 = validateParameter(valid_402657249, JString,
                                      required = false, default = nil)
  if valid_402657249 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657249
  var valid_402657250 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657250 = validateParameter(valid_402657250, JString,
                                      required = false, default = nil)
  if valid_402657250 != nil:
    section.add "X-Amz-Algorithm", valid_402657250
  var valid_402657251 = header.getOrDefault("X-Amz-Date")
  valid_402657251 = validateParameter(valid_402657251, JString,
                                      required = false, default = nil)
  if valid_402657251 != nil:
    section.add "X-Amz-Date", valid_402657251
  var valid_402657252 = header.getOrDefault("X-Amz-Credential")
  valid_402657252 = validateParameter(valid_402657252, JString,
                                      required = false, default = nil)
  if valid_402657252 != nil:
    section.add "X-Amz-Credential", valid_402657252
  var valid_402657253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657253 = validateParameter(valid_402657253, JString,
                                      required = false, default = nil)
  if valid_402657253 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657253
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657255: Call_UpdateDocumentationPart_402657242;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402657255.validator(path, query, header, formData, body, _)
  let scheme = call_402657255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657255.makeUrl(scheme.get, call_402657255.host, call_402657255.base,
                                   call_402657255.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657255, uri, valid, _)

proc call*(call_402657256: Call_UpdateDocumentationPart_402657242;
           restapiId: string; body: JsonNode; partId: string): Recallable =
  ## updateDocumentationPart
  ##   restapiId: string (required)
                            ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                              ## body: JObject (required)
  ##   
                                                                                                                                         ## partId: string (required)
                                                                                                                                         ##         
                                                                                                                                         ## : 
                                                                                                                                         ## [Required] 
                                                                                                                                         ## The 
                                                                                                                                         ## identifier 
                                                                                                                                         ## of 
                                                                                                                                         ## the 
                                                                                                                                         ## to-be-updated 
                                                                                                                                         ## documentation 
                                                                                                                                         ## part.
  var path_402657257 = newJObject()
  var body_402657258 = newJObject()
  add(path_402657257, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657258 = body
  add(path_402657257, "part_id", newJString(partId))
  result = call_402657256.call(path_402657257, nil, nil, nil, body_402657258)

var updateDocumentationPart* = Call_UpdateDocumentationPart_402657242(
    name: "updateDocumentationPart", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/parts/{part_id}",
    validator: validate_UpdateDocumentationPart_402657243, base: "/",
    makeUrl: url_UpdateDocumentationPart_402657244,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDocumentationPart_402657227 = ref object of OpenApiRestCall_402656035
proc url_DeleteDocumentationPart_402657229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "part_id" in path, "`part_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/parts/"),
                 (kind: VariableSegment, value: "part_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDocumentationPart_402657228(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## part_id: JString (required)
                                                                                                                    ##          
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## to-be-deleted 
                                                                                                                    ## documentation 
                                                                                                                    ## part.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657230 = path.getOrDefault("restapi_id")
  valid_402657230 = validateParameter(valid_402657230, JString, required = true,
                                      default = nil)
  if valid_402657230 != nil:
    section.add "restapi_id", valid_402657230
  var valid_402657231 = path.getOrDefault("part_id")
  valid_402657231 = validateParameter(valid_402657231, JString, required = true,
                                      default = nil)
  if valid_402657231 != nil:
    section.add "part_id", valid_402657231
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657232 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657232 = validateParameter(valid_402657232, JString,
                                      required = false, default = nil)
  if valid_402657232 != nil:
    section.add "X-Amz-Security-Token", valid_402657232
  var valid_402657233 = header.getOrDefault("X-Amz-Signature")
  valid_402657233 = validateParameter(valid_402657233, JString,
                                      required = false, default = nil)
  if valid_402657233 != nil:
    section.add "X-Amz-Signature", valid_402657233
  var valid_402657234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657234 = validateParameter(valid_402657234, JString,
                                      required = false, default = nil)
  if valid_402657234 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657234
  var valid_402657235 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657235 = validateParameter(valid_402657235, JString,
                                      required = false, default = nil)
  if valid_402657235 != nil:
    section.add "X-Amz-Algorithm", valid_402657235
  var valid_402657236 = header.getOrDefault("X-Amz-Date")
  valid_402657236 = validateParameter(valid_402657236, JString,
                                      required = false, default = nil)
  if valid_402657236 != nil:
    section.add "X-Amz-Date", valid_402657236
  var valid_402657237 = header.getOrDefault("X-Amz-Credential")
  valid_402657237 = validateParameter(valid_402657237, JString,
                                      required = false, default = nil)
  if valid_402657237 != nil:
    section.add "X-Amz-Credential", valid_402657237
  var valid_402657238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657238 = validateParameter(valid_402657238, JString,
                                      required = false, default = nil)
  if valid_402657238 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657238
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657239: Call_DeleteDocumentationPart_402657227;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402657239.validator(path, query, header, formData, body, _)
  let scheme = call_402657239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657239.makeUrl(scheme.get, call_402657239.host, call_402657239.base,
                                   call_402657239.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657239, uri, valid, _)

proc call*(call_402657240: Call_DeleteDocumentationPart_402657227;
           restapiId: string; partId: string): Recallable =
  ## deleteDocumentationPart
  ##   restapiId: string (required)
                            ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                              ## partId: string (required)
                                                                                                              ##         
                                                                                                              ## : 
                                                                                                              ## [Required] 
                                                                                                              ## The 
                                                                                                              ## identifier 
                                                                                                              ## of 
                                                                                                              ## the 
                                                                                                              ## to-be-deleted 
                                                                                                              ## documentation 
                                                                                                              ## part.
  var path_402657241 = newJObject()
  add(path_402657241, "restapi_id", newJString(restapiId))
  add(path_402657241, "part_id", newJString(partId))
  result = call_402657240.call(path_402657241, nil, nil, nil, nil)

var deleteDocumentationPart* = Call_DeleteDocumentationPart_402657227(
    name: "deleteDocumentationPart", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/parts/{part_id}",
    validator: validate_DeleteDocumentationPart_402657228, base: "/",
    makeUrl: url_DeleteDocumentationPart_402657229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDocumentationVersion_402657259 = ref object of OpenApiRestCall_402656035
proc url_GetDocumentationVersion_402657261(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "doc_version" in path, "`doc_version` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/versions/"),
                 (kind: VariableSegment, value: "doc_version")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetDocumentationVersion_402657260(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   doc_version: JString (required)
                                 ##              : [Required] The version identifier of the to-be-retrieved documentation snapshot.
  ##   
                                                                                                                                   ## restapi_id: JString (required)
                                                                                                                                   ##             
                                                                                                                                   ## : 
                                                                                                                                   ## [Required] 
                                                                                                                                   ## The 
                                                                                                                                   ## string 
                                                                                                                                   ## identifier 
                                                                                                                                   ## of 
                                                                                                                                   ## the 
                                                                                                                                   ## associated 
                                                                                                                                   ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `doc_version` field"
  var valid_402657262 = path.getOrDefault("doc_version")
  valid_402657262 = validateParameter(valid_402657262, JString, required = true,
                                      default = nil)
  if valid_402657262 != nil:
    section.add "doc_version", valid_402657262
  var valid_402657263 = path.getOrDefault("restapi_id")
  valid_402657263 = validateParameter(valid_402657263, JString, required = true,
                                      default = nil)
  if valid_402657263 != nil:
    section.add "restapi_id", valid_402657263
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657264 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657264 = validateParameter(valid_402657264, JString,
                                      required = false, default = nil)
  if valid_402657264 != nil:
    section.add "X-Amz-Security-Token", valid_402657264
  var valid_402657265 = header.getOrDefault("X-Amz-Signature")
  valid_402657265 = validateParameter(valid_402657265, JString,
                                      required = false, default = nil)
  if valid_402657265 != nil:
    section.add "X-Amz-Signature", valid_402657265
  var valid_402657266 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657266 = validateParameter(valid_402657266, JString,
                                      required = false, default = nil)
  if valid_402657266 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657266
  var valid_402657267 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657267 = validateParameter(valid_402657267, JString,
                                      required = false, default = nil)
  if valid_402657267 != nil:
    section.add "X-Amz-Algorithm", valid_402657267
  var valid_402657268 = header.getOrDefault("X-Amz-Date")
  valid_402657268 = validateParameter(valid_402657268, JString,
                                      required = false, default = nil)
  if valid_402657268 != nil:
    section.add "X-Amz-Date", valid_402657268
  var valid_402657269 = header.getOrDefault("X-Amz-Credential")
  valid_402657269 = validateParameter(valid_402657269, JString,
                                      required = false, default = nil)
  if valid_402657269 != nil:
    section.add "X-Amz-Credential", valid_402657269
  var valid_402657270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657270 = validateParameter(valid_402657270, JString,
                                      required = false, default = nil)
  if valid_402657270 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657270
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657271: Call_GetDocumentationVersion_402657259;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402657271.validator(path, query, header, formData, body, _)
  let scheme = call_402657271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657271.makeUrl(scheme.get, call_402657271.host, call_402657271.base,
                                   call_402657271.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657271, uri, valid, _)

proc call*(call_402657272: Call_GetDocumentationVersion_402657259;
           docVersion: string; restapiId: string): Recallable =
  ## getDocumentationVersion
  ##   docVersion: string (required)
                            ##             : [Required] The version identifier of the to-be-retrieved documentation snapshot.
  ##   
                                                                                                                             ## restapiId: string (required)
                                                                                                                             ##            
                                                                                                                             ## : 
                                                                                                                             ## [Required] 
                                                                                                                             ## The 
                                                                                                                             ## string 
                                                                                                                             ## identifier 
                                                                                                                             ## of 
                                                                                                                             ## the 
                                                                                                                             ## associated 
                                                                                                                             ## <a>RestApi</a>.
  var path_402657273 = newJObject()
  add(path_402657273, "doc_version", newJString(docVersion))
  add(path_402657273, "restapi_id", newJString(restapiId))
  result = call_402657272.call(path_402657273, nil, nil, nil, nil)

var getDocumentationVersion* = Call_GetDocumentationVersion_402657259(
    name: "getDocumentationVersion", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/versions/{doc_version}",
    validator: validate_GetDocumentationVersion_402657260, base: "/",
    makeUrl: url_GetDocumentationVersion_402657261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDocumentationVersion_402657289 = ref object of OpenApiRestCall_402656035
proc url_UpdateDocumentationVersion_402657291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "doc_version" in path, "`doc_version` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/versions/"),
                 (kind: VariableSegment, value: "doc_version")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDocumentationVersion_402657290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   doc_version: JString (required)
                                 ##              : [Required] The version identifier of the to-be-updated documentation version.
  ##   
                                                                                                                                ## restapi_id: JString (required)
                                                                                                                                ##             
                                                                                                                                ## : 
                                                                                                                                ## [Required] 
                                                                                                                                ## The 
                                                                                                                                ## string 
                                                                                                                                ## identifier 
                                                                                                                                ## of 
                                                                                                                                ## the 
                                                                                                                                ## associated 
                                                                                                                                ## <a>RestApi</a>..
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `doc_version` field"
  var valid_402657292 = path.getOrDefault("doc_version")
  valid_402657292 = validateParameter(valid_402657292, JString, required = true,
                                      default = nil)
  if valid_402657292 != nil:
    section.add "doc_version", valid_402657292
  var valid_402657293 = path.getOrDefault("restapi_id")
  valid_402657293 = validateParameter(valid_402657293, JString, required = true,
                                      default = nil)
  if valid_402657293 != nil:
    section.add "restapi_id", valid_402657293
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657294 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657294 = validateParameter(valid_402657294, JString,
                                      required = false, default = nil)
  if valid_402657294 != nil:
    section.add "X-Amz-Security-Token", valid_402657294
  var valid_402657295 = header.getOrDefault("X-Amz-Signature")
  valid_402657295 = validateParameter(valid_402657295, JString,
                                      required = false, default = nil)
  if valid_402657295 != nil:
    section.add "X-Amz-Signature", valid_402657295
  var valid_402657296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657296 = validateParameter(valid_402657296, JString,
                                      required = false, default = nil)
  if valid_402657296 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657296
  var valid_402657297 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657297 = validateParameter(valid_402657297, JString,
                                      required = false, default = nil)
  if valid_402657297 != nil:
    section.add "X-Amz-Algorithm", valid_402657297
  var valid_402657298 = header.getOrDefault("X-Amz-Date")
  valid_402657298 = validateParameter(valid_402657298, JString,
                                      required = false, default = nil)
  if valid_402657298 != nil:
    section.add "X-Amz-Date", valid_402657298
  var valid_402657299 = header.getOrDefault("X-Amz-Credential")
  valid_402657299 = validateParameter(valid_402657299, JString,
                                      required = false, default = nil)
  if valid_402657299 != nil:
    section.add "X-Amz-Credential", valid_402657299
  var valid_402657300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657300 = validateParameter(valid_402657300, JString,
                                      required = false, default = nil)
  if valid_402657300 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657302: Call_UpdateDocumentationVersion_402657289;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402657302.validator(path, query, header, formData, body, _)
  let scheme = call_402657302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657302.makeUrl(scheme.get, call_402657302.host, call_402657302.base,
                                   call_402657302.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657302, uri, valid, _)

proc call*(call_402657303: Call_UpdateDocumentationVersion_402657289;
           docVersion: string; restapiId: string; body: JsonNode): Recallable =
  ## updateDocumentationVersion
  ##   docVersion: string (required)
                               ##             : [Required] The version identifier of the to-be-updated documentation version.
  ##   
                                                                                                                             ## restapiId: string (required)
                                                                                                                             ##            
                                                                                                                             ## : 
                                                                                                                             ## [Required] 
                                                                                                                             ## The 
                                                                                                                             ## string 
                                                                                                                             ## identifier 
                                                                                                                             ## of 
                                                                                                                             ## the 
                                                                                                                             ## associated 
                                                                                                                             ## <a>RestApi</a>..
  ##   
                                                                                                                                                ## body: JObject (required)
  var path_402657304 = newJObject()
  var body_402657305 = newJObject()
  add(path_402657304, "doc_version", newJString(docVersion))
  add(path_402657304, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657305 = body
  result = call_402657303.call(path_402657304, nil, nil, nil, body_402657305)

var updateDocumentationVersion* = Call_UpdateDocumentationVersion_402657289(
    name: "updateDocumentationVersion", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/versions/{doc_version}",
    validator: validate_UpdateDocumentationVersion_402657290, base: "/",
    makeUrl: url_UpdateDocumentationVersion_402657291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDocumentationVersion_402657274 = ref object of OpenApiRestCall_402656035
proc url_DeleteDocumentationVersion_402657276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "doc_version" in path, "`doc_version` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/documentation/versions/"),
                 (kind: VariableSegment, value: "doc_version")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDocumentationVersion_402657275(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   doc_version: JString (required)
                                 ##              : [Required] The version identifier of a to-be-deleted documentation snapshot.
  ##   
                                                                                                                               ## restapi_id: JString (required)
                                                                                                                               ##             
                                                                                                                               ## : 
                                                                                                                               ## [Required] 
                                                                                                                               ## The 
                                                                                                                               ## string 
                                                                                                                               ## identifier 
                                                                                                                               ## of 
                                                                                                                               ## the 
                                                                                                                               ## associated 
                                                                                                                               ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `doc_version` field"
  var valid_402657277 = path.getOrDefault("doc_version")
  valid_402657277 = validateParameter(valid_402657277, JString, required = true,
                                      default = nil)
  if valid_402657277 != nil:
    section.add "doc_version", valid_402657277
  var valid_402657278 = path.getOrDefault("restapi_id")
  valid_402657278 = validateParameter(valid_402657278, JString, required = true,
                                      default = nil)
  if valid_402657278 != nil:
    section.add "restapi_id", valid_402657278
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657279 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657279 = validateParameter(valid_402657279, JString,
                                      required = false, default = nil)
  if valid_402657279 != nil:
    section.add "X-Amz-Security-Token", valid_402657279
  var valid_402657280 = header.getOrDefault("X-Amz-Signature")
  valid_402657280 = validateParameter(valid_402657280, JString,
                                      required = false, default = nil)
  if valid_402657280 != nil:
    section.add "X-Amz-Signature", valid_402657280
  var valid_402657281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657281 = validateParameter(valid_402657281, JString,
                                      required = false, default = nil)
  if valid_402657281 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657281
  var valid_402657282 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657282 = validateParameter(valid_402657282, JString,
                                      required = false, default = nil)
  if valid_402657282 != nil:
    section.add "X-Amz-Algorithm", valid_402657282
  var valid_402657283 = header.getOrDefault("X-Amz-Date")
  valid_402657283 = validateParameter(valid_402657283, JString,
                                      required = false, default = nil)
  if valid_402657283 != nil:
    section.add "X-Amz-Date", valid_402657283
  var valid_402657284 = header.getOrDefault("X-Amz-Credential")
  valid_402657284 = validateParameter(valid_402657284, JString,
                                      required = false, default = nil)
  if valid_402657284 != nil:
    section.add "X-Amz-Credential", valid_402657284
  var valid_402657285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657285 = validateParameter(valid_402657285, JString,
                                      required = false, default = nil)
  if valid_402657285 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657286: Call_DeleteDocumentationVersion_402657274;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402657286.validator(path, query, header, formData, body, _)
  let scheme = call_402657286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657286.makeUrl(scheme.get, call_402657286.host, call_402657286.base,
                                   call_402657286.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657286, uri, valid, _)

proc call*(call_402657287: Call_DeleteDocumentationVersion_402657274;
           docVersion: string; restapiId: string): Recallable =
  ## deleteDocumentationVersion
  ##   docVersion: string (required)
                               ##             : [Required] The version identifier of a to-be-deleted documentation snapshot.
  ##   
                                                                                                                            ## restapiId: string (required)
                                                                                                                            ##            
                                                                                                                            ## : 
                                                                                                                            ## [Required] 
                                                                                                                            ## The 
                                                                                                                            ## string 
                                                                                                                            ## identifier 
                                                                                                                            ## of 
                                                                                                                            ## the 
                                                                                                                            ## associated 
                                                                                                                            ## <a>RestApi</a>.
  var path_402657288 = newJObject()
  add(path_402657288, "doc_version", newJString(docVersion))
  add(path_402657288, "restapi_id", newJString(restapiId))
  result = call_402657287.call(path_402657288, nil, nil, nil, nil)

var deleteDocumentationVersion* = Call_DeleteDocumentationVersion_402657274(
    name: "deleteDocumentationVersion", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/documentation/versions/{doc_version}",
    validator: validate_DeleteDocumentationVersion_402657275, base: "/",
    makeUrl: url_DeleteDocumentationVersion_402657276,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDomainName_402657306 = ref object of OpenApiRestCall_402656035
proc url_GetDomainName_402657308(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetDomainName_402657307(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domain_name: JString (required)
                                 ##              : [Required] The name of the <a>DomainName</a> resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `domain_name` field"
  var valid_402657309 = path.getOrDefault("domain_name")
  valid_402657309 = validateParameter(valid_402657309, JString, required = true,
                                      default = nil)
  if valid_402657309 != nil:
    section.add "domain_name", valid_402657309
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657310 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657310 = validateParameter(valid_402657310, JString,
                                      required = false, default = nil)
  if valid_402657310 != nil:
    section.add "X-Amz-Security-Token", valid_402657310
  var valid_402657311 = header.getOrDefault("X-Amz-Signature")
  valid_402657311 = validateParameter(valid_402657311, JString,
                                      required = false, default = nil)
  if valid_402657311 != nil:
    section.add "X-Amz-Signature", valid_402657311
  var valid_402657312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657312 = validateParameter(valid_402657312, JString,
                                      required = false, default = nil)
  if valid_402657312 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657312
  var valid_402657313 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657313 = validateParameter(valid_402657313, JString,
                                      required = false, default = nil)
  if valid_402657313 != nil:
    section.add "X-Amz-Algorithm", valid_402657313
  var valid_402657314 = header.getOrDefault("X-Amz-Date")
  valid_402657314 = validateParameter(valid_402657314, JString,
                                      required = false, default = nil)
  if valid_402657314 != nil:
    section.add "X-Amz-Date", valid_402657314
  var valid_402657315 = header.getOrDefault("X-Amz-Credential")
  valid_402657315 = validateParameter(valid_402657315, JString,
                                      required = false, default = nil)
  if valid_402657315 != nil:
    section.add "X-Amz-Credential", valid_402657315
  var valid_402657316 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657316 = validateParameter(valid_402657316, JString,
                                      required = false, default = nil)
  if valid_402657316 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657316
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657317: Call_GetDomainName_402657306; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
                                                                                         ## 
  let valid = call_402657317.validator(path, query, header, formData, body, _)
  let scheme = call_402657317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657317.makeUrl(scheme.get, call_402657317.host, call_402657317.base,
                                   call_402657317.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657317, uri, valid, _)

proc call*(call_402657318: Call_GetDomainName_402657306; domainName: string): Recallable =
  ## getDomainName
  ## Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
  ##   
                                                                                                    ## domainName: string (required)
                                                                                                    ##             
                                                                                                    ## : 
                                                                                                    ## [Required] 
                                                                                                    ## The 
                                                                                                    ## name 
                                                                                                    ## of 
                                                                                                    ## the 
                                                                                                    ## <a>DomainName</a> 
                                                                                                    ## resource.
  var path_402657319 = newJObject()
  add(path_402657319, "domain_name", newJString(domainName))
  result = call_402657318.call(path_402657319, nil, nil, nil, nil)

var getDomainName* = Call_GetDomainName_402657306(name: "getDomainName",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/domainnames/{domain_name}", validator: validate_GetDomainName_402657307,
    base: "/", makeUrl: url_GetDomainName_402657308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateDomainName_402657334 = ref object of OpenApiRestCall_402656035
proc url_UpdateDomainName_402657336(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateDomainName_402657335(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about the <a>DomainName</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domain_name: JString (required)
                                 ##              : [Required] The name of the <a>DomainName</a> resource to be changed.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `domain_name` field"
  var valid_402657337 = path.getOrDefault("domain_name")
  valid_402657337 = validateParameter(valid_402657337, JString, required = true,
                                      default = nil)
  if valid_402657337 != nil:
    section.add "domain_name", valid_402657337
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657338 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657338 = validateParameter(valid_402657338, JString,
                                      required = false, default = nil)
  if valid_402657338 != nil:
    section.add "X-Amz-Security-Token", valid_402657338
  var valid_402657339 = header.getOrDefault("X-Amz-Signature")
  valid_402657339 = validateParameter(valid_402657339, JString,
                                      required = false, default = nil)
  if valid_402657339 != nil:
    section.add "X-Amz-Signature", valid_402657339
  var valid_402657340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657340 = validateParameter(valid_402657340, JString,
                                      required = false, default = nil)
  if valid_402657340 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657340
  var valid_402657341 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657341 = validateParameter(valid_402657341, JString,
                                      required = false, default = nil)
  if valid_402657341 != nil:
    section.add "X-Amz-Algorithm", valid_402657341
  var valid_402657342 = header.getOrDefault("X-Amz-Date")
  valid_402657342 = validateParameter(valid_402657342, JString,
                                      required = false, default = nil)
  if valid_402657342 != nil:
    section.add "X-Amz-Date", valid_402657342
  var valid_402657343 = header.getOrDefault("X-Amz-Credential")
  valid_402657343 = validateParameter(valid_402657343, JString,
                                      required = false, default = nil)
  if valid_402657343 != nil:
    section.add "X-Amz-Credential", valid_402657343
  var valid_402657344 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657344 = validateParameter(valid_402657344, JString,
                                      required = false, default = nil)
  if valid_402657344 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657344
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657346: Call_UpdateDomainName_402657334;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about the <a>DomainName</a> resource.
                                                                                         ## 
  let valid = call_402657346.validator(path, query, header, formData, body, _)
  let scheme = call_402657346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657346.makeUrl(scheme.get, call_402657346.host, call_402657346.base,
                                   call_402657346.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657346, uri, valid, _)

proc call*(call_402657347: Call_UpdateDomainName_402657334; domainName: string;
           body: JsonNode): Recallable =
  ## updateDomainName
  ## Changes information about the <a>DomainName</a> resource.
  ##   domainName: string (required)
                                                              ##             : [Required] The name of the <a>DomainName</a> resource to be changed.
  ##   
                                                                                                                                                   ## body: JObject (required)
  var path_402657348 = newJObject()
  var body_402657349 = newJObject()
  add(path_402657348, "domain_name", newJString(domainName))
  if body != nil:
    body_402657349 = body
  result = call_402657347.call(path_402657348, nil, nil, nil, body_402657349)

var updateDomainName* = Call_UpdateDomainName_402657334(
    name: "updateDomainName", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com", route: "/domainnames/{domain_name}",
    validator: validate_UpdateDomainName_402657335, base: "/",
    makeUrl: url_UpdateDomainName_402657336,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteDomainName_402657320 = ref object of OpenApiRestCall_402656035
proc url_DeleteDomainName_402657322(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "domain_name" in path, "`domain_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/domainnames/"),
                 (kind: VariableSegment, value: "domain_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteDomainName_402657321(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the <a>DomainName</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domain_name: JString (required)
                                 ##              : [Required] The name of the <a>DomainName</a> resource to be deleted.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `domain_name` field"
  var valid_402657323 = path.getOrDefault("domain_name")
  valid_402657323 = validateParameter(valid_402657323, JString, required = true,
                                      default = nil)
  if valid_402657323 != nil:
    section.add "domain_name", valid_402657323
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657324 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657324 = validateParameter(valid_402657324, JString,
                                      required = false, default = nil)
  if valid_402657324 != nil:
    section.add "X-Amz-Security-Token", valid_402657324
  var valid_402657325 = header.getOrDefault("X-Amz-Signature")
  valid_402657325 = validateParameter(valid_402657325, JString,
                                      required = false, default = nil)
  if valid_402657325 != nil:
    section.add "X-Amz-Signature", valid_402657325
  var valid_402657326 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657326 = validateParameter(valid_402657326, JString,
                                      required = false, default = nil)
  if valid_402657326 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657326
  var valid_402657327 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657327 = validateParameter(valid_402657327, JString,
                                      required = false, default = nil)
  if valid_402657327 != nil:
    section.add "X-Amz-Algorithm", valid_402657327
  var valid_402657328 = header.getOrDefault("X-Amz-Date")
  valid_402657328 = validateParameter(valid_402657328, JString,
                                      required = false, default = nil)
  if valid_402657328 != nil:
    section.add "X-Amz-Date", valid_402657328
  var valid_402657329 = header.getOrDefault("X-Amz-Credential")
  valid_402657329 = validateParameter(valid_402657329, JString,
                                      required = false, default = nil)
  if valid_402657329 != nil:
    section.add "X-Amz-Credential", valid_402657329
  var valid_402657330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657330 = validateParameter(valid_402657330, JString,
                                      required = false, default = nil)
  if valid_402657330 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657330
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657331: Call_DeleteDomainName_402657320;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the <a>DomainName</a> resource.
                                                                                         ## 
  let valid = call_402657331.validator(path, query, header, formData, body, _)
  let scheme = call_402657331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657331.makeUrl(scheme.get, call_402657331.host, call_402657331.base,
                                   call_402657331.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657331, uri, valid, _)

proc call*(call_402657332: Call_DeleteDomainName_402657320; domainName: string): Recallable =
  ## deleteDomainName
  ## Deletes the <a>DomainName</a> resource.
  ##   domainName: string (required)
                                            ##             : [Required] The name of the <a>DomainName</a> resource to be deleted.
  var path_402657333 = newJObject()
  add(path_402657333, "domain_name", newJString(domainName))
  result = call_402657332.call(path_402657333, nil, nil, nil, nil)

var deleteDomainName* = Call_DeleteDomainName_402657320(
    name: "deleteDomainName", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com", route: "/domainnames/{domain_name}",
    validator: validate_DeleteDomainName_402657321, base: "/",
    makeUrl: url_DeleteDomainName_402657322,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutGatewayResponse_402657365 = ref object of OpenApiRestCall_402656035
proc url_PutGatewayResponse_402657367(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "response_type" in path, "`response_type` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/gatewayresponses/"),
                 (kind: VariableSegment, value: "response_type")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutGatewayResponse_402657366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a customization of a <a>GatewayResponse</a> of a specified response type and status code on the given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   response_type: JString (required)
                                 ##                : <p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are 
                                 ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                 ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                 ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                 ## </p></p>
  ##   restapi_id: JString (required)
                                            ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  var valid_402657368 = path.getOrDefault("response_type")
  valid_402657368 = validateParameter(valid_402657368, JString, required = true,
                                      default = newJString("DEFAULT_4XX"))
  if valid_402657368 != nil:
    section.add "response_type", valid_402657368
  var valid_402657369 = path.getOrDefault("restapi_id")
  valid_402657369 = validateParameter(valid_402657369, JString, required = true,
                                      default = nil)
  if valid_402657369 != nil:
    section.add "restapi_id", valid_402657369
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657370 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657370 = validateParameter(valid_402657370, JString,
                                      required = false, default = nil)
  if valid_402657370 != nil:
    section.add "X-Amz-Security-Token", valid_402657370
  var valid_402657371 = header.getOrDefault("X-Amz-Signature")
  valid_402657371 = validateParameter(valid_402657371, JString,
                                      required = false, default = nil)
  if valid_402657371 != nil:
    section.add "X-Amz-Signature", valid_402657371
  var valid_402657372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657372 = validateParameter(valid_402657372, JString,
                                      required = false, default = nil)
  if valid_402657372 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657372
  var valid_402657373 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657373 = validateParameter(valid_402657373, JString,
                                      required = false, default = nil)
  if valid_402657373 != nil:
    section.add "X-Amz-Algorithm", valid_402657373
  var valid_402657374 = header.getOrDefault("X-Amz-Date")
  valid_402657374 = validateParameter(valid_402657374, JString,
                                      required = false, default = nil)
  if valid_402657374 != nil:
    section.add "X-Amz-Date", valid_402657374
  var valid_402657375 = header.getOrDefault("X-Amz-Credential")
  valid_402657375 = validateParameter(valid_402657375, JString,
                                      required = false, default = nil)
  if valid_402657375 != nil:
    section.add "X-Amz-Credential", valid_402657375
  var valid_402657376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657376 = validateParameter(valid_402657376, JString,
                                      required = false, default = nil)
  if valid_402657376 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657376
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657378: Call_PutGatewayResponse_402657365;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a customization of a <a>GatewayResponse</a> of a specified response type and status code on the given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402657378.validator(path, query, header, formData, body, _)
  let scheme = call_402657378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657378.makeUrl(scheme.get, call_402657378.host, call_402657378.base,
                                   call_402657378.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657378, uri, valid, _)

proc call*(call_402657379: Call_PutGatewayResponse_402657365; restapiId: string;
           body: JsonNode; responseType: string = "DEFAULT_4XX"): Recallable =
  ## putGatewayResponse
  ## Creates a customization of a <a>GatewayResponse</a> of a specified response type and status code on the given <a>RestApi</a>.
  ##   
                                                                                                                                  ## responseType: string (required)
                                                                                                                                  ##               
                                                                                                                                  ## : 
                                                                                                                                  ## <p>[Required] 
                                                                                                                                  ## <p>The 
                                                                                                                                  ## response 
                                                                                                                                  ## type 
                                                                                                                                  ## of 
                                                                                                                                  ## the 
                                                                                                                                  ## associated 
                                                                                                                                  ## <a>GatewayResponse</a>. 
                                                                                                                                  ## Valid 
                                                                                                                                  ## values 
                                                                                                                                  ## are 
                                                                                                                                  ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                                                                                                                  ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                                                                                                                  ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                                                                                                                  ## </p></p>
  ##   
                                                                                                                                             ## restapiId: string (required)
                                                                                                                                             ##            
                                                                                                                                             ## : 
                                                                                                                                             ## [Required] 
                                                                                                                                             ## The 
                                                                                                                                             ## string 
                                                                                                                                             ## identifier 
                                                                                                                                             ## of 
                                                                                                                                             ## the 
                                                                                                                                             ## associated 
                                                                                                                                             ## <a>RestApi</a>.
  ##   
                                                                                                                                                               ## body: JObject (required)
  var path_402657380 = newJObject()
  var body_402657381 = newJObject()
  add(path_402657380, "response_type", newJString(responseType))
  add(path_402657380, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657381 = body
  result = call_402657379.call(path_402657380, nil, nil, nil, body_402657381)

var putGatewayResponse* = Call_PutGatewayResponse_402657365(
    name: "putGatewayResponse", meth: HttpMethod.HttpPut,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/gatewayresponses/{response_type}",
    validator: validate_PutGatewayResponse_402657366, base: "/",
    makeUrl: url_PutGatewayResponse_402657367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGatewayResponse_402657350 = ref object of OpenApiRestCall_402656035
proc url_GetGatewayResponse_402657352(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "response_type" in path, "`response_type` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/gatewayresponses/"),
                 (kind: VariableSegment, value: "response_type")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetGatewayResponse_402657351(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   response_type: JString (required)
                                 ##                : <p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are 
                                 ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                 ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                 ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                 ## </p></p>
  ##   restapi_id: JString (required)
                                            ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  var valid_402657353 = path.getOrDefault("response_type")
  valid_402657353 = validateParameter(valid_402657353, JString, required = true,
                                      default = newJString("DEFAULT_4XX"))
  if valid_402657353 != nil:
    section.add "response_type", valid_402657353
  var valid_402657354 = path.getOrDefault("restapi_id")
  valid_402657354 = validateParameter(valid_402657354, JString, required = true,
                                      default = nil)
  if valid_402657354 != nil:
    section.add "restapi_id", valid_402657354
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657355 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657355 = validateParameter(valid_402657355, JString,
                                      required = false, default = nil)
  if valid_402657355 != nil:
    section.add "X-Amz-Security-Token", valid_402657355
  var valid_402657356 = header.getOrDefault("X-Amz-Signature")
  valid_402657356 = validateParameter(valid_402657356, JString,
                                      required = false, default = nil)
  if valid_402657356 != nil:
    section.add "X-Amz-Signature", valid_402657356
  var valid_402657357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657357 = validateParameter(valid_402657357, JString,
                                      required = false, default = nil)
  if valid_402657357 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657357
  var valid_402657358 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657358 = validateParameter(valid_402657358, JString,
                                      required = false, default = nil)
  if valid_402657358 != nil:
    section.add "X-Amz-Algorithm", valid_402657358
  var valid_402657359 = header.getOrDefault("X-Amz-Date")
  valid_402657359 = validateParameter(valid_402657359, JString,
                                      required = false, default = nil)
  if valid_402657359 != nil:
    section.add "X-Amz-Date", valid_402657359
  var valid_402657360 = header.getOrDefault("X-Amz-Credential")
  valid_402657360 = validateParameter(valid_402657360, JString,
                                      required = false, default = nil)
  if valid_402657360 != nil:
    section.add "X-Amz-Credential", valid_402657360
  var valid_402657361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657361 = validateParameter(valid_402657361, JString,
                                      required = false, default = nil)
  if valid_402657361 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657361
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657362: Call_GetGatewayResponse_402657350;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402657362.validator(path, query, header, formData, body, _)
  let scheme = call_402657362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657362.makeUrl(scheme.get, call_402657362.host, call_402657362.base,
                                   call_402657362.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657362, uri, valid, _)

proc call*(call_402657363: Call_GetGatewayResponse_402657350; restapiId: string;
           responseType: string = "DEFAULT_4XX"): Recallable =
  ## getGatewayResponse
  ## Gets a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
  ##   
                                                                                            ## responseType: string (required)
                                                                                            ##               
                                                                                            ## : 
                                                                                            ## <p>[Required] 
                                                                                            ## <p>The 
                                                                                            ## response 
                                                                                            ## type 
                                                                                            ## of 
                                                                                            ## the 
                                                                                            ## associated 
                                                                                            ## <a>GatewayResponse</a>. 
                                                                                            ## Valid 
                                                                                            ## values 
                                                                                            ## are 
                                                                                            ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                                                                            ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                                                                            ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                                                                            ## </p></p>
  ##   
                                                                                                       ## restapiId: string (required)
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## [Required] 
                                                                                                       ## The 
                                                                                                       ## string 
                                                                                                       ## identifier 
                                                                                                       ## of 
                                                                                                       ## the 
                                                                                                       ## associated 
                                                                                                       ## <a>RestApi</a>.
  var path_402657364 = newJObject()
  add(path_402657364, "response_type", newJString(responseType))
  add(path_402657364, "restapi_id", newJString(restapiId))
  result = call_402657363.call(path_402657364, nil, nil, nil, nil)

var getGatewayResponse* = Call_GetGatewayResponse_402657350(
    name: "getGatewayResponse", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/gatewayresponses/{response_type}",
    validator: validate_GetGatewayResponse_402657351, base: "/",
    makeUrl: url_GetGatewayResponse_402657352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateGatewayResponse_402657397 = ref object of OpenApiRestCall_402656035
proc url_UpdateGatewayResponse_402657399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "response_type" in path, "`response_type` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/gatewayresponses/"),
                 (kind: VariableSegment, value: "response_type")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateGatewayResponse_402657398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   response_type: JString (required)
                                 ##                : <p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are 
                                 ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                 ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                 ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                 ## </p></p>
  ##   restapi_id: JString (required)
                                            ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  var valid_402657400 = path.getOrDefault("response_type")
  valid_402657400 = validateParameter(valid_402657400, JString, required = true,
                                      default = newJString("DEFAULT_4XX"))
  if valid_402657400 != nil:
    section.add "response_type", valid_402657400
  var valid_402657401 = path.getOrDefault("restapi_id")
  valid_402657401 = validateParameter(valid_402657401, JString, required = true,
                                      default = nil)
  if valid_402657401 != nil:
    section.add "restapi_id", valid_402657401
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657402 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657402 = validateParameter(valid_402657402, JString,
                                      required = false, default = nil)
  if valid_402657402 != nil:
    section.add "X-Amz-Security-Token", valid_402657402
  var valid_402657403 = header.getOrDefault("X-Amz-Signature")
  valid_402657403 = validateParameter(valid_402657403, JString,
                                      required = false, default = nil)
  if valid_402657403 != nil:
    section.add "X-Amz-Signature", valid_402657403
  var valid_402657404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657404 = validateParameter(valid_402657404, JString,
                                      required = false, default = nil)
  if valid_402657404 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657404
  var valid_402657405 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657405 = validateParameter(valid_402657405, JString,
                                      required = false, default = nil)
  if valid_402657405 != nil:
    section.add "X-Amz-Algorithm", valid_402657405
  var valid_402657406 = header.getOrDefault("X-Amz-Date")
  valid_402657406 = validateParameter(valid_402657406, JString,
                                      required = false, default = nil)
  if valid_402657406 != nil:
    section.add "X-Amz-Date", valid_402657406
  var valid_402657407 = header.getOrDefault("X-Amz-Credential")
  valid_402657407 = validateParameter(valid_402657407, JString,
                                      required = false, default = nil)
  if valid_402657407 != nil:
    section.add "X-Amz-Credential", valid_402657407
  var valid_402657408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657408 = validateParameter(valid_402657408, JString,
                                      required = false, default = nil)
  if valid_402657408 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657408
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657410: Call_UpdateGatewayResponse_402657397;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402657410.validator(path, query, header, formData, body, _)
  let scheme = call_402657410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657410.makeUrl(scheme.get, call_402657410.host, call_402657410.base,
                                   call_402657410.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657410, uri, valid, _)

proc call*(call_402657411: Call_UpdateGatewayResponse_402657397;
           restapiId: string; body: JsonNode;
           responseType: string = "DEFAULT_4XX"): Recallable =
  ## updateGatewayResponse
  ## Updates a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
  ##   
                                                                                               ## responseType: string (required)
                                                                                               ##               
                                                                                               ## : 
                                                                                               ## <p>[Required] 
                                                                                               ## <p>The 
                                                                                               ## response 
                                                                                               ## type 
                                                                                               ## of 
                                                                                               ## the 
                                                                                               ## associated 
                                                                                               ## <a>GatewayResponse</a>. 
                                                                                               ## Valid 
                                                                                               ## values 
                                                                                               ## are 
                                                                                               ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                                                                               ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                                                                               ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                                                                               ## </p></p>
  ##   
                                                                                                          ## restapiId: string (required)
                                                                                                          ##            
                                                                                                          ## : 
                                                                                                          ## [Required] 
                                                                                                          ## The 
                                                                                                          ## string 
                                                                                                          ## identifier 
                                                                                                          ## of 
                                                                                                          ## the 
                                                                                                          ## associated 
                                                                                                          ## <a>RestApi</a>.
  ##   
                                                                                                                            ## body: JObject (required)
  var path_402657412 = newJObject()
  var body_402657413 = newJObject()
  add(path_402657412, "response_type", newJString(responseType))
  add(path_402657412, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657413 = body
  result = call_402657411.call(path_402657412, nil, nil, nil, body_402657413)

var updateGatewayResponse* = Call_UpdateGatewayResponse_402657397(
    name: "updateGatewayResponse", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/gatewayresponses/{response_type}",
    validator: validate_UpdateGatewayResponse_402657398, base: "/",
    makeUrl: url_UpdateGatewayResponse_402657399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteGatewayResponse_402657382 = ref object of OpenApiRestCall_402656035
proc url_DeleteGatewayResponse_402657384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "response_type" in path, "`response_type` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/gatewayresponses/"),
                 (kind: VariableSegment, value: "response_type")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteGatewayResponse_402657383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Clears any customization of a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a> and resets it with the default settings.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   response_type: JString (required)
                                 ##                : <p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are 
                                 ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                 ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                 ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                 ## </p></p>
  ##   restapi_id: JString (required)
                                            ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  var valid_402657385 = path.getOrDefault("response_type")
  valid_402657385 = validateParameter(valid_402657385, JString, required = true,
                                      default = newJString("DEFAULT_4XX"))
  if valid_402657385 != nil:
    section.add "response_type", valid_402657385
  var valid_402657386 = path.getOrDefault("restapi_id")
  valid_402657386 = validateParameter(valid_402657386, JString, required = true,
                                      default = nil)
  if valid_402657386 != nil:
    section.add "restapi_id", valid_402657386
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657387 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657387 = validateParameter(valid_402657387, JString,
                                      required = false, default = nil)
  if valid_402657387 != nil:
    section.add "X-Amz-Security-Token", valid_402657387
  var valid_402657388 = header.getOrDefault("X-Amz-Signature")
  valid_402657388 = validateParameter(valid_402657388, JString,
                                      required = false, default = nil)
  if valid_402657388 != nil:
    section.add "X-Amz-Signature", valid_402657388
  var valid_402657389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657389 = validateParameter(valid_402657389, JString,
                                      required = false, default = nil)
  if valid_402657389 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657389
  var valid_402657390 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657390 = validateParameter(valid_402657390, JString,
                                      required = false, default = nil)
  if valid_402657390 != nil:
    section.add "X-Amz-Algorithm", valid_402657390
  var valid_402657391 = header.getOrDefault("X-Amz-Date")
  valid_402657391 = validateParameter(valid_402657391, JString,
                                      required = false, default = nil)
  if valid_402657391 != nil:
    section.add "X-Amz-Date", valid_402657391
  var valid_402657392 = header.getOrDefault("X-Amz-Credential")
  valid_402657392 = validateParameter(valid_402657392, JString,
                                      required = false, default = nil)
  if valid_402657392 != nil:
    section.add "X-Amz-Credential", valid_402657392
  var valid_402657393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657393 = validateParameter(valid_402657393, JString,
                                      required = false, default = nil)
  if valid_402657393 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657393
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657394: Call_DeleteGatewayResponse_402657382;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Clears any customization of a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a> and resets it with the default settings.
                                                                                         ## 
  let valid = call_402657394.validator(path, query, header, formData, body, _)
  let scheme = call_402657394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657394.makeUrl(scheme.get, call_402657394.host, call_402657394.base,
                                   call_402657394.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657394, uri, valid, _)

proc call*(call_402657395: Call_DeleteGatewayResponse_402657382;
           restapiId: string; responseType: string = "DEFAULT_4XX"): Recallable =
  ## deleteGatewayResponse
  ## Clears any customization of a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a> and resets it with the default settings.
  ##   
                                                                                                                                                           ## responseType: string (required)
                                                                                                                                                           ##               
                                                                                                                                                           ## : 
                                                                                                                                                           ## <p>[Required] 
                                                                                                                                                           ## <p>The 
                                                                                                                                                           ## response 
                                                                                                                                                           ## type 
                                                                                                                                                           ## of 
                                                                                                                                                           ## the 
                                                                                                                                                           ## associated 
                                                                                                                                                           ## <a>GatewayResponse</a>. 
                                                                                                                                                           ## Valid 
                                                                                                                                                           ## values 
                                                                                                                                                           ## are 
                                                                                                                                                           ## <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> 
                                                                                                                                                           ## AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> 
                                                                                                                                                           ## QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> 
                                                                                                                                                           ## </p></p>
  ##   
                                                                                                                                                                      ## restapiId: string (required)
                                                                                                                                                                      ##            
                                                                                                                                                                      ## : 
                                                                                                                                                                      ## [Required] 
                                                                                                                                                                      ## The 
                                                                                                                                                                      ## string 
                                                                                                                                                                      ## identifier 
                                                                                                                                                                      ## of 
                                                                                                                                                                      ## the 
                                                                                                                                                                      ## associated 
                                                                                                                                                                      ## <a>RestApi</a>.
  var path_402657396 = newJObject()
  add(path_402657396, "response_type", newJString(responseType))
  add(path_402657396, "restapi_id", newJString(restapiId))
  result = call_402657395.call(path_402657396, nil, nil, nil, nil)

var deleteGatewayResponse* = Call_DeleteGatewayResponse_402657382(
    name: "deleteGatewayResponse", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/gatewayresponses/{response_type}",
    validator: validate_DeleteGatewayResponse_402657383, base: "/",
    makeUrl: url_DeleteGatewayResponse_402657384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutIntegration_402657430 = ref object of OpenApiRestCall_402656035
proc url_PutIntegration_402657432(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutIntegration_402657431(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sets up a method's integration.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies a put integration request's resource ID.
  ##   
                                                                                                                ## restapi_id: JString (required)
                                                                                                                ##             
                                                                                                                ## : 
                                                                                                                ## [Required] 
                                                                                                                ## The 
                                                                                                                ## string 
                                                                                                                ## identifier 
                                                                                                                ## of 
                                                                                                                ## the 
                                                                                                                ## associated 
                                                                                                                ## <a>RestApi</a>.
  ##   
                                                                                                                                  ## http_method: JString (required)
                                                                                                                                  ##              
                                                                                                                                  ## : 
                                                                                                                                  ## [Required] 
                                                                                                                                  ## Specifies 
                                                                                                                                  ## a 
                                                                                                                                  ## put 
                                                                                                                                  ## integration 
                                                                                                                                  ## request's 
                                                                                                                                  ## HTTP 
                                                                                                                                  ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657433 = path.getOrDefault("resource_id")
  valid_402657433 = validateParameter(valid_402657433, JString, required = true,
                                      default = nil)
  if valid_402657433 != nil:
    section.add "resource_id", valid_402657433
  var valid_402657434 = path.getOrDefault("restapi_id")
  valid_402657434 = validateParameter(valid_402657434, JString, required = true,
                                      default = nil)
  if valid_402657434 != nil:
    section.add "restapi_id", valid_402657434
  var valid_402657435 = path.getOrDefault("http_method")
  valid_402657435 = validateParameter(valid_402657435, JString, required = true,
                                      default = nil)
  if valid_402657435 != nil:
    section.add "http_method", valid_402657435
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657436 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657436 = validateParameter(valid_402657436, JString,
                                      required = false, default = nil)
  if valid_402657436 != nil:
    section.add "X-Amz-Security-Token", valid_402657436
  var valid_402657437 = header.getOrDefault("X-Amz-Signature")
  valid_402657437 = validateParameter(valid_402657437, JString,
                                      required = false, default = nil)
  if valid_402657437 != nil:
    section.add "X-Amz-Signature", valid_402657437
  var valid_402657438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657438 = validateParameter(valid_402657438, JString,
                                      required = false, default = nil)
  if valid_402657438 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657438
  var valid_402657439 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657439 = validateParameter(valid_402657439, JString,
                                      required = false, default = nil)
  if valid_402657439 != nil:
    section.add "X-Amz-Algorithm", valid_402657439
  var valid_402657440 = header.getOrDefault("X-Amz-Date")
  valid_402657440 = validateParameter(valid_402657440, JString,
                                      required = false, default = nil)
  if valid_402657440 != nil:
    section.add "X-Amz-Date", valid_402657440
  var valid_402657441 = header.getOrDefault("X-Amz-Credential")
  valid_402657441 = validateParameter(valid_402657441, JString,
                                      required = false, default = nil)
  if valid_402657441 != nil:
    section.add "X-Amz-Credential", valid_402657441
  var valid_402657442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657442 = validateParameter(valid_402657442, JString,
                                      required = false, default = nil)
  if valid_402657442 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657442
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657444: Call_PutIntegration_402657430; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets up a method's integration.
                                                                                         ## 
  let valid = call_402657444.validator(path, query, header, formData, body, _)
  let scheme = call_402657444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657444.makeUrl(scheme.get, call_402657444.host, call_402657444.base,
                                   call_402657444.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657444, uri, valid, _)

proc call*(call_402657445: Call_PutIntegration_402657430; resourceId: string;
           restapiId: string; body: JsonNode; httpMethod: string): Recallable =
  ## putIntegration
  ## Sets up a method's integration.
  ##   resourceId: string (required)
                                    ##             : [Required] Specifies a put integration request's resource ID.
  ##   
                                                                                                                  ## restapiId: string (required)
                                                                                                                  ##            
                                                                                                                  ## : 
                                                                                                                  ## [Required] 
                                                                                                                  ## The 
                                                                                                                  ## string 
                                                                                                                  ## identifier 
                                                                                                                  ## of 
                                                                                                                  ## the 
                                                                                                                  ## associated 
                                                                                                                  ## <a>RestApi</a>.
  ##   
                                                                                                                                    ## body: JObject (required)
  ##   
                                                                                                                                                               ## httpMethod: string (required)
                                                                                                                                                               ##             
                                                                                                                                                               ## : 
                                                                                                                                                               ## [Required] 
                                                                                                                                                               ## Specifies 
                                                                                                                                                               ## a 
                                                                                                                                                               ## put 
                                                                                                                                                               ## integration 
                                                                                                                                                               ## request's 
                                                                                                                                                               ## HTTP 
                                                                                                                                                               ## method.
  var path_402657446 = newJObject()
  var body_402657447 = newJObject()
  add(path_402657446, "resource_id", newJString(resourceId))
  add(path_402657446, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657447 = body
  add(path_402657446, "http_method", newJString(httpMethod))
  result = call_402657445.call(path_402657446, nil, nil, nil, body_402657447)

var putIntegration* = Call_PutIntegration_402657430(name: "putIntegration",
    meth: HttpMethod.HttpPut, host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
    validator: validate_PutIntegration_402657431, base: "/",
    makeUrl: url_PutIntegration_402657432, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIntegration_402657414 = ref object of OpenApiRestCall_402656035
proc url_GetIntegration_402657416(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetIntegration_402657415(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Get the integration settings.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies a get integration request's resource identifier
  ##   
                                                                                                                       ## restapi_id: JString (required)
                                                                                                                       ##             
                                                                                                                       ## : 
                                                                                                                       ## [Required] 
                                                                                                                       ## The 
                                                                                                                       ## string 
                                                                                                                       ## identifier 
                                                                                                                       ## of 
                                                                                                                       ## the 
                                                                                                                       ## associated 
                                                                                                                       ## <a>RestApi</a>.
  ##   
                                                                                                                                         ## http_method: JString (required)
                                                                                                                                         ##              
                                                                                                                                         ## : 
                                                                                                                                         ## [Required] 
                                                                                                                                         ## Specifies 
                                                                                                                                         ## a 
                                                                                                                                         ## get 
                                                                                                                                         ## integration 
                                                                                                                                         ## request's 
                                                                                                                                         ## HTTP 
                                                                                                                                         ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657417 = path.getOrDefault("resource_id")
  valid_402657417 = validateParameter(valid_402657417, JString, required = true,
                                      default = nil)
  if valid_402657417 != nil:
    section.add "resource_id", valid_402657417
  var valid_402657418 = path.getOrDefault("restapi_id")
  valid_402657418 = validateParameter(valid_402657418, JString, required = true,
                                      default = nil)
  if valid_402657418 != nil:
    section.add "restapi_id", valid_402657418
  var valid_402657419 = path.getOrDefault("http_method")
  valid_402657419 = validateParameter(valid_402657419, JString, required = true,
                                      default = nil)
  if valid_402657419 != nil:
    section.add "http_method", valid_402657419
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657420 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657420 = validateParameter(valid_402657420, JString,
                                      required = false, default = nil)
  if valid_402657420 != nil:
    section.add "X-Amz-Security-Token", valid_402657420
  var valid_402657421 = header.getOrDefault("X-Amz-Signature")
  valid_402657421 = validateParameter(valid_402657421, JString,
                                      required = false, default = nil)
  if valid_402657421 != nil:
    section.add "X-Amz-Signature", valid_402657421
  var valid_402657422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657422 = validateParameter(valid_402657422, JString,
                                      required = false, default = nil)
  if valid_402657422 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657422
  var valid_402657423 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657423 = validateParameter(valid_402657423, JString,
                                      required = false, default = nil)
  if valid_402657423 != nil:
    section.add "X-Amz-Algorithm", valid_402657423
  var valid_402657424 = header.getOrDefault("X-Amz-Date")
  valid_402657424 = validateParameter(valid_402657424, JString,
                                      required = false, default = nil)
  if valid_402657424 != nil:
    section.add "X-Amz-Date", valid_402657424
  var valid_402657425 = header.getOrDefault("X-Amz-Credential")
  valid_402657425 = validateParameter(valid_402657425, JString,
                                      required = false, default = nil)
  if valid_402657425 != nil:
    section.add "X-Amz-Credential", valid_402657425
  var valid_402657426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657426 = validateParameter(valid_402657426, JString,
                                      required = false, default = nil)
  if valid_402657426 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657426
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657427: Call_GetIntegration_402657414; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Get the integration settings.
                                                                                         ## 
  let valid = call_402657427.validator(path, query, header, formData, body, _)
  let scheme = call_402657427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657427.makeUrl(scheme.get, call_402657427.host, call_402657427.base,
                                   call_402657427.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657427, uri, valid, _)

proc call*(call_402657428: Call_GetIntegration_402657414; resourceId: string;
           restapiId: string; httpMethod: string): Recallable =
  ## getIntegration
  ## Get the integration settings.
  ##   resourceId: string (required)
                                  ##             : [Required] Specifies a get integration request's resource identifier
  ##   
                                                                                                                       ## restapiId: string (required)
                                                                                                                       ##            
                                                                                                                       ## : 
                                                                                                                       ## [Required] 
                                                                                                                       ## The 
                                                                                                                       ## string 
                                                                                                                       ## identifier 
                                                                                                                       ## of 
                                                                                                                       ## the 
                                                                                                                       ## associated 
                                                                                                                       ## <a>RestApi</a>.
  ##   
                                                                                                                                         ## httpMethod: string (required)
                                                                                                                                         ##             
                                                                                                                                         ## : 
                                                                                                                                         ## [Required] 
                                                                                                                                         ## Specifies 
                                                                                                                                         ## a 
                                                                                                                                         ## get 
                                                                                                                                         ## integration 
                                                                                                                                         ## request's 
                                                                                                                                         ## HTTP 
                                                                                                                                         ## method.
  var path_402657429 = newJObject()
  add(path_402657429, "resource_id", newJString(resourceId))
  add(path_402657429, "restapi_id", newJString(restapiId))
  add(path_402657429, "http_method", newJString(httpMethod))
  result = call_402657428.call(path_402657429, nil, nil, nil, nil)

var getIntegration* = Call_GetIntegration_402657414(name: "getIntegration",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
    validator: validate_GetIntegration_402657415, base: "/",
    makeUrl: url_GetIntegration_402657416, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateIntegration_402657464 = ref object of OpenApiRestCall_402656035
proc url_UpdateIntegration_402657466(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateIntegration_402657465(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Represents an update integration.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Represents an update integration request's resource identifier.
  ##   
                                                                                                                             ## restapi_id: JString (required)
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## [Required] 
                                                                                                                             ## The 
                                                                                                                             ## string 
                                                                                                                             ## identifier 
                                                                                                                             ## of 
                                                                                                                             ## the 
                                                                                                                             ## associated 
                                                                                                                             ## <a>RestApi</a>.
  ##   
                                                                                                                                               ## http_method: JString (required)
                                                                                                                                               ##              
                                                                                                                                               ## : 
                                                                                                                                               ## [Required] 
                                                                                                                                               ## Represents 
                                                                                                                                               ## an 
                                                                                                                                               ## update 
                                                                                                                                               ## integration 
                                                                                                                                               ## request's 
                                                                                                                                               ## HTTP 
                                                                                                                                               ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657467 = path.getOrDefault("resource_id")
  valid_402657467 = validateParameter(valid_402657467, JString, required = true,
                                      default = nil)
  if valid_402657467 != nil:
    section.add "resource_id", valid_402657467
  var valid_402657468 = path.getOrDefault("restapi_id")
  valid_402657468 = validateParameter(valid_402657468, JString, required = true,
                                      default = nil)
  if valid_402657468 != nil:
    section.add "restapi_id", valid_402657468
  var valid_402657469 = path.getOrDefault("http_method")
  valid_402657469 = validateParameter(valid_402657469, JString, required = true,
                                      default = nil)
  if valid_402657469 != nil:
    section.add "http_method", valid_402657469
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657470 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657470 = validateParameter(valid_402657470, JString,
                                      required = false, default = nil)
  if valid_402657470 != nil:
    section.add "X-Amz-Security-Token", valid_402657470
  var valid_402657471 = header.getOrDefault("X-Amz-Signature")
  valid_402657471 = validateParameter(valid_402657471, JString,
                                      required = false, default = nil)
  if valid_402657471 != nil:
    section.add "X-Amz-Signature", valid_402657471
  var valid_402657472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657472 = validateParameter(valid_402657472, JString,
                                      required = false, default = nil)
  if valid_402657472 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657472
  var valid_402657473 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657473 = validateParameter(valid_402657473, JString,
                                      required = false, default = nil)
  if valid_402657473 != nil:
    section.add "X-Amz-Algorithm", valid_402657473
  var valid_402657474 = header.getOrDefault("X-Amz-Date")
  valid_402657474 = validateParameter(valid_402657474, JString,
                                      required = false, default = nil)
  if valid_402657474 != nil:
    section.add "X-Amz-Date", valid_402657474
  var valid_402657475 = header.getOrDefault("X-Amz-Credential")
  valid_402657475 = validateParameter(valid_402657475, JString,
                                      required = false, default = nil)
  if valid_402657475 != nil:
    section.add "X-Amz-Credential", valid_402657475
  var valid_402657476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657476 = validateParameter(valid_402657476, JString,
                                      required = false, default = nil)
  if valid_402657476 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657476
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657478: Call_UpdateIntegration_402657464;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents an update integration.
                                                                                         ## 
  let valid = call_402657478.validator(path, query, header, formData, body, _)
  let scheme = call_402657478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657478.makeUrl(scheme.get, call_402657478.host, call_402657478.base,
                                   call_402657478.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657478, uri, valid, _)

proc call*(call_402657479: Call_UpdateIntegration_402657464; resourceId: string;
           restapiId: string; body: JsonNode; httpMethod: string): Recallable =
  ## updateIntegration
  ## Represents an update integration.
  ##   resourceId: string (required)
                                      ##             : [Required] Represents an update integration request's resource identifier.
  ##   
                                                                                                                                 ## restapiId: string (required)
                                                                                                                                 ##            
                                                                                                                                 ## : 
                                                                                                                                 ## [Required] 
                                                                                                                                 ## The 
                                                                                                                                 ## string 
                                                                                                                                 ## identifier 
                                                                                                                                 ## of 
                                                                                                                                 ## the 
                                                                                                                                 ## associated 
                                                                                                                                 ## <a>RestApi</a>.
  ##   
                                                                                                                                                   ## body: JObject (required)
  ##   
                                                                                                                                                                              ## httpMethod: string (required)
                                                                                                                                                                              ##             
                                                                                                                                                                              ## : 
                                                                                                                                                                              ## [Required] 
                                                                                                                                                                              ## Represents 
                                                                                                                                                                              ## an 
                                                                                                                                                                              ## update 
                                                                                                                                                                              ## integration 
                                                                                                                                                                              ## request's 
                                                                                                                                                                              ## HTTP 
                                                                                                                                                                              ## method.
  var path_402657480 = newJObject()
  var body_402657481 = newJObject()
  add(path_402657480, "resource_id", newJString(resourceId))
  add(path_402657480, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657481 = body
  add(path_402657480, "http_method", newJString(httpMethod))
  result = call_402657479.call(path_402657480, nil, nil, nil, body_402657481)

var updateIntegration* = Call_UpdateIntegration_402657464(
    name: "updateIntegration", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
    validator: validate_UpdateIntegration_402657465, base: "/",
    makeUrl: url_UpdateIntegration_402657466,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteIntegration_402657448 = ref object of OpenApiRestCall_402656035
proc url_DeleteIntegration_402657450(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteIntegration_402657449(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Represents a delete integration.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies a delete integration request's resource identifier.
  ##   
                                                                                                                           ## restapi_id: JString (required)
                                                                                                                           ##             
                                                                                                                           ## : 
                                                                                                                           ## [Required] 
                                                                                                                           ## The 
                                                                                                                           ## string 
                                                                                                                           ## identifier 
                                                                                                                           ## of 
                                                                                                                           ## the 
                                                                                                                           ## associated 
                                                                                                                           ## <a>RestApi</a>.
  ##   
                                                                                                                                             ## http_method: JString (required)
                                                                                                                                             ##              
                                                                                                                                             ## : 
                                                                                                                                             ## [Required] 
                                                                                                                                             ## Specifies 
                                                                                                                                             ## a 
                                                                                                                                             ## delete 
                                                                                                                                             ## integration 
                                                                                                                                             ## request's 
                                                                                                                                             ## HTTP 
                                                                                                                                             ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657451 = path.getOrDefault("resource_id")
  valid_402657451 = validateParameter(valid_402657451, JString, required = true,
                                      default = nil)
  if valid_402657451 != nil:
    section.add "resource_id", valid_402657451
  var valid_402657452 = path.getOrDefault("restapi_id")
  valid_402657452 = validateParameter(valid_402657452, JString, required = true,
                                      default = nil)
  if valid_402657452 != nil:
    section.add "restapi_id", valid_402657452
  var valid_402657453 = path.getOrDefault("http_method")
  valid_402657453 = validateParameter(valid_402657453, JString, required = true,
                                      default = nil)
  if valid_402657453 != nil:
    section.add "http_method", valid_402657453
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657454 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657454 = validateParameter(valid_402657454, JString,
                                      required = false, default = nil)
  if valid_402657454 != nil:
    section.add "X-Amz-Security-Token", valid_402657454
  var valid_402657455 = header.getOrDefault("X-Amz-Signature")
  valid_402657455 = validateParameter(valid_402657455, JString,
                                      required = false, default = nil)
  if valid_402657455 != nil:
    section.add "X-Amz-Signature", valid_402657455
  var valid_402657456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657456 = validateParameter(valid_402657456, JString,
                                      required = false, default = nil)
  if valid_402657456 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657456
  var valid_402657457 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657457 = validateParameter(valid_402657457, JString,
                                      required = false, default = nil)
  if valid_402657457 != nil:
    section.add "X-Amz-Algorithm", valid_402657457
  var valid_402657458 = header.getOrDefault("X-Amz-Date")
  valid_402657458 = validateParameter(valid_402657458, JString,
                                      required = false, default = nil)
  if valid_402657458 != nil:
    section.add "X-Amz-Date", valid_402657458
  var valid_402657459 = header.getOrDefault("X-Amz-Credential")
  valid_402657459 = validateParameter(valid_402657459, JString,
                                      required = false, default = nil)
  if valid_402657459 != nil:
    section.add "X-Amz-Credential", valid_402657459
  var valid_402657460 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657460 = validateParameter(valid_402657460, JString,
                                      required = false, default = nil)
  if valid_402657460 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657460
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657461: Call_DeleteIntegration_402657448;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents a delete integration.
                                                                                         ## 
  let valid = call_402657461.validator(path, query, header, formData, body, _)
  let scheme = call_402657461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657461.makeUrl(scheme.get, call_402657461.host, call_402657461.base,
                                   call_402657461.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657461, uri, valid, _)

proc call*(call_402657462: Call_DeleteIntegration_402657448; resourceId: string;
           restapiId: string; httpMethod: string): Recallable =
  ## deleteIntegration
  ## Represents a delete integration.
  ##   resourceId: string (required)
                                     ##             : [Required] Specifies a delete integration request's resource identifier.
  ##   
                                                                                                                              ## restapiId: string (required)
                                                                                                                              ##            
                                                                                                                              ## : 
                                                                                                                              ## [Required] 
                                                                                                                              ## The 
                                                                                                                              ## string 
                                                                                                                              ## identifier 
                                                                                                                              ## of 
                                                                                                                              ## the 
                                                                                                                              ## associated 
                                                                                                                              ## <a>RestApi</a>.
  ##   
                                                                                                                                                ## httpMethod: string (required)
                                                                                                                                                ##             
                                                                                                                                                ## : 
                                                                                                                                                ## [Required] 
                                                                                                                                                ## Specifies 
                                                                                                                                                ## a 
                                                                                                                                                ## delete 
                                                                                                                                                ## integration 
                                                                                                                                                ## request's 
                                                                                                                                                ## HTTP 
                                                                                                                                                ## method.
  var path_402657463 = newJObject()
  add(path_402657463, "resource_id", newJString(resourceId))
  add(path_402657463, "restapi_id", newJString(restapiId))
  add(path_402657463, "http_method", newJString(httpMethod))
  result = call_402657462.call(path_402657463, nil, nil, nil, nil)

var deleteIntegration* = Call_DeleteIntegration_402657448(
    name: "deleteIntegration", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
    validator: validate_DeleteIntegration_402657449, base: "/",
    makeUrl: url_DeleteIntegration_402657450,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutIntegrationResponse_402657499 = ref object of OpenApiRestCall_402656035
proc url_PutIntegrationResponse_402657501(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutIntegrationResponse_402657500(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Represents a put integration.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies a put integration response request's resource identifier.
  ##   
                                                                                                                                 ## status_code: JString (required)
                                                                                                                                 ##              
                                                                                                                                 ## : 
                                                                                                                                 ## The 
                                                                                                                                 ## status 
                                                                                                                                 ## code.
  ##   
                                                                                                                                         ## restapi_id: JString (required)
                                                                                                                                         ##             
                                                                                                                                         ## : 
                                                                                                                                         ## [Required] 
                                                                                                                                         ## The 
                                                                                                                                         ## string 
                                                                                                                                         ## identifier 
                                                                                                                                         ## of 
                                                                                                                                         ## the 
                                                                                                                                         ## associated 
                                                                                                                                         ## <a>RestApi</a>.
  ##   
                                                                                                                                                           ## http_method: JString (required)
                                                                                                                                                           ##              
                                                                                                                                                           ## : 
                                                                                                                                                           ## [Required] 
                                                                                                                                                           ## Specifies 
                                                                                                                                                           ## a 
                                                                                                                                                           ## put 
                                                                                                                                                           ## integration 
                                                                                                                                                           ## response 
                                                                                                                                                           ## request's 
                                                                                                                                                           ## HTTP 
                                                                                                                                                           ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657502 = path.getOrDefault("resource_id")
  valid_402657502 = validateParameter(valid_402657502, JString, required = true,
                                      default = nil)
  if valid_402657502 != nil:
    section.add "resource_id", valid_402657502
  var valid_402657503 = path.getOrDefault("status_code")
  valid_402657503 = validateParameter(valid_402657503, JString, required = true,
                                      default = nil)
  if valid_402657503 != nil:
    section.add "status_code", valid_402657503
  var valid_402657504 = path.getOrDefault("restapi_id")
  valid_402657504 = validateParameter(valid_402657504, JString, required = true,
                                      default = nil)
  if valid_402657504 != nil:
    section.add "restapi_id", valid_402657504
  var valid_402657505 = path.getOrDefault("http_method")
  valid_402657505 = validateParameter(valid_402657505, JString, required = true,
                                      default = nil)
  if valid_402657505 != nil:
    section.add "http_method", valid_402657505
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657506 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657506 = validateParameter(valid_402657506, JString,
                                      required = false, default = nil)
  if valid_402657506 != nil:
    section.add "X-Amz-Security-Token", valid_402657506
  var valid_402657507 = header.getOrDefault("X-Amz-Signature")
  valid_402657507 = validateParameter(valid_402657507, JString,
                                      required = false, default = nil)
  if valid_402657507 != nil:
    section.add "X-Amz-Signature", valid_402657507
  var valid_402657508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657508 = validateParameter(valid_402657508, JString,
                                      required = false, default = nil)
  if valid_402657508 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657508
  var valid_402657509 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657509 = validateParameter(valid_402657509, JString,
                                      required = false, default = nil)
  if valid_402657509 != nil:
    section.add "X-Amz-Algorithm", valid_402657509
  var valid_402657510 = header.getOrDefault("X-Amz-Date")
  valid_402657510 = validateParameter(valid_402657510, JString,
                                      required = false, default = nil)
  if valid_402657510 != nil:
    section.add "X-Amz-Date", valid_402657510
  var valid_402657511 = header.getOrDefault("X-Amz-Credential")
  valid_402657511 = validateParameter(valid_402657511, JString,
                                      required = false, default = nil)
  if valid_402657511 != nil:
    section.add "X-Amz-Credential", valid_402657511
  var valid_402657512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657512 = validateParameter(valid_402657512, JString,
                                      required = false, default = nil)
  if valid_402657512 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657514: Call_PutIntegrationResponse_402657499;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents a put integration.
                                                                                         ## 
  let valid = call_402657514.validator(path, query, header, formData, body, _)
  let scheme = call_402657514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657514.makeUrl(scheme.get, call_402657514.host, call_402657514.base,
                                   call_402657514.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657514, uri, valid, _)

proc call*(call_402657515: Call_PutIntegrationResponse_402657499;
           resourceId: string; statusCode: string; restapiId: string;
           body: JsonNode; httpMethod: string): Recallable =
  ## putIntegrationResponse
  ## Represents a put integration.
  ##   resourceId: string (required)
                                  ##             : [Required] Specifies a put integration response request's resource identifier.
  ##   
                                                                                                                                 ## statusCode: string (required)
                                                                                                                                 ##             
                                                                                                                                 ## : 
                                                                                                                                 ## The 
                                                                                                                                 ## status 
                                                                                                                                 ## code.
  ##   
                                                                                                                                         ## restapiId: string (required)
                                                                                                                                         ##            
                                                                                                                                         ## : 
                                                                                                                                         ## [Required] 
                                                                                                                                         ## The 
                                                                                                                                         ## string 
                                                                                                                                         ## identifier 
                                                                                                                                         ## of 
                                                                                                                                         ## the 
                                                                                                                                         ## associated 
                                                                                                                                         ## <a>RestApi</a>.
  ##   
                                                                                                                                                           ## body: JObject (required)
  ##   
                                                                                                                                                                                      ## httpMethod: string (required)
                                                                                                                                                                                      ##             
                                                                                                                                                                                      ## : 
                                                                                                                                                                                      ## [Required] 
                                                                                                                                                                                      ## Specifies 
                                                                                                                                                                                      ## a 
                                                                                                                                                                                      ## put 
                                                                                                                                                                                      ## integration 
                                                                                                                                                                                      ## response 
                                                                                                                                                                                      ## request's 
                                                                                                                                                                                      ## HTTP 
                                                                                                                                                                                      ## method.
  var path_402657516 = newJObject()
  var body_402657517 = newJObject()
  add(path_402657516, "resource_id", newJString(resourceId))
  add(path_402657516, "status_code", newJString(statusCode))
  add(path_402657516, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657517 = body
  add(path_402657516, "http_method", newJString(httpMethod))
  result = call_402657515.call(path_402657516, nil, nil, nil, body_402657517)

var putIntegrationResponse* = Call_PutIntegrationResponse_402657499(
    name: "putIntegrationResponse", meth: HttpMethod.HttpPut,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
    validator: validate_PutIntegrationResponse_402657500, base: "/",
    makeUrl: url_PutIntegrationResponse_402657501,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIntegrationResponse_402657482 = ref object of OpenApiRestCall_402656035
proc url_GetIntegrationResponse_402657484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetIntegrationResponse_402657483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Represents a get integration response.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies a get integration response request's resource identifier.
  ##   
                                                                                                                                 ## status_code: JString (required)
                                                                                                                                 ##              
                                                                                                                                 ## : 
                                                                                                                                 ## The 
                                                                                                                                 ## status 
                                                                                                                                 ## code.
  ##   
                                                                                                                                         ## restapi_id: JString (required)
                                                                                                                                         ##             
                                                                                                                                         ## : 
                                                                                                                                         ## [Required] 
                                                                                                                                         ## The 
                                                                                                                                         ## string 
                                                                                                                                         ## identifier 
                                                                                                                                         ## of 
                                                                                                                                         ## the 
                                                                                                                                         ## associated 
                                                                                                                                         ## <a>RestApi</a>.
  ##   
                                                                                                                                                           ## http_method: JString (required)
                                                                                                                                                           ##              
                                                                                                                                                           ## : 
                                                                                                                                                           ## [Required] 
                                                                                                                                                           ## Specifies 
                                                                                                                                                           ## a 
                                                                                                                                                           ## get 
                                                                                                                                                           ## integration 
                                                                                                                                                           ## response 
                                                                                                                                                           ## request's 
                                                                                                                                                           ## HTTP 
                                                                                                                                                           ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657485 = path.getOrDefault("resource_id")
  valid_402657485 = validateParameter(valid_402657485, JString, required = true,
                                      default = nil)
  if valid_402657485 != nil:
    section.add "resource_id", valid_402657485
  var valid_402657486 = path.getOrDefault("status_code")
  valid_402657486 = validateParameter(valid_402657486, JString, required = true,
                                      default = nil)
  if valid_402657486 != nil:
    section.add "status_code", valid_402657486
  var valid_402657487 = path.getOrDefault("restapi_id")
  valid_402657487 = validateParameter(valid_402657487, JString, required = true,
                                      default = nil)
  if valid_402657487 != nil:
    section.add "restapi_id", valid_402657487
  var valid_402657488 = path.getOrDefault("http_method")
  valid_402657488 = validateParameter(valid_402657488, JString, required = true,
                                      default = nil)
  if valid_402657488 != nil:
    section.add "http_method", valid_402657488
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657489 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657489 = validateParameter(valid_402657489, JString,
                                      required = false, default = nil)
  if valid_402657489 != nil:
    section.add "X-Amz-Security-Token", valid_402657489
  var valid_402657490 = header.getOrDefault("X-Amz-Signature")
  valid_402657490 = validateParameter(valid_402657490, JString,
                                      required = false, default = nil)
  if valid_402657490 != nil:
    section.add "X-Amz-Signature", valid_402657490
  var valid_402657491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657491 = validateParameter(valid_402657491, JString,
                                      required = false, default = nil)
  if valid_402657491 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657491
  var valid_402657492 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657492 = validateParameter(valid_402657492, JString,
                                      required = false, default = nil)
  if valid_402657492 != nil:
    section.add "X-Amz-Algorithm", valid_402657492
  var valid_402657493 = header.getOrDefault("X-Amz-Date")
  valid_402657493 = validateParameter(valid_402657493, JString,
                                      required = false, default = nil)
  if valid_402657493 != nil:
    section.add "X-Amz-Date", valid_402657493
  var valid_402657494 = header.getOrDefault("X-Amz-Credential")
  valid_402657494 = validateParameter(valid_402657494, JString,
                                      required = false, default = nil)
  if valid_402657494 != nil:
    section.add "X-Amz-Credential", valid_402657494
  var valid_402657495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657495 = validateParameter(valid_402657495, JString,
                                      required = false, default = nil)
  if valid_402657495 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657495
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657496: Call_GetIntegrationResponse_402657482;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents a get integration response.
                                                                                         ## 
  let valid = call_402657496.validator(path, query, header, formData, body, _)
  let scheme = call_402657496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657496.makeUrl(scheme.get, call_402657496.host, call_402657496.base,
                                   call_402657496.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657496, uri, valid, _)

proc call*(call_402657497: Call_GetIntegrationResponse_402657482;
           resourceId: string; statusCode: string; restapiId: string;
           httpMethod: string): Recallable =
  ## getIntegrationResponse
  ## Represents a get integration response.
  ##   resourceId: string (required)
                                           ##             : [Required] Specifies a get integration response request's resource identifier.
  ##   
                                                                                                                                          ## statusCode: string (required)
                                                                                                                                          ##             
                                                                                                                                          ## : 
                                                                                                                                          ## The 
                                                                                                                                          ## status 
                                                                                                                                          ## code.
  ##   
                                                                                                                                                  ## restapiId: string (required)
                                                                                                                                                  ##            
                                                                                                                                                  ## : 
                                                                                                                                                  ## [Required] 
                                                                                                                                                  ## The 
                                                                                                                                                  ## string 
                                                                                                                                                  ## identifier 
                                                                                                                                                  ## of 
                                                                                                                                                  ## the 
                                                                                                                                                  ## associated 
                                                                                                                                                  ## <a>RestApi</a>.
  ##   
                                                                                                                                                                    ## httpMethod: string (required)
                                                                                                                                                                    ##             
                                                                                                                                                                    ## : 
                                                                                                                                                                    ## [Required] 
                                                                                                                                                                    ## Specifies 
                                                                                                                                                                    ## a 
                                                                                                                                                                    ## get 
                                                                                                                                                                    ## integration 
                                                                                                                                                                    ## response 
                                                                                                                                                                    ## request's 
                                                                                                                                                                    ## HTTP 
                                                                                                                                                                    ## method.
  var path_402657498 = newJObject()
  add(path_402657498, "resource_id", newJString(resourceId))
  add(path_402657498, "status_code", newJString(statusCode))
  add(path_402657498, "restapi_id", newJString(restapiId))
  add(path_402657498, "http_method", newJString(httpMethod))
  result = call_402657497.call(path_402657498, nil, nil, nil, nil)

var getIntegrationResponse* = Call_GetIntegrationResponse_402657482(
    name: "getIntegrationResponse", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
    validator: validate_GetIntegrationResponse_402657483, base: "/",
    makeUrl: url_GetIntegrationResponse_402657484,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateIntegrationResponse_402657535 = ref object of OpenApiRestCall_402656035
proc url_UpdateIntegrationResponse_402657537(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateIntegrationResponse_402657536(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Represents an update integration response.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies an update integration response request's resource identifier.
  ##   
                                                                                                                                     ## status_code: JString (required)
                                                                                                                                     ##              
                                                                                                                                     ## : 
                                                                                                                                     ## The 
                                                                                                                                     ## status 
                                                                                                                                     ## code.
  ##   
                                                                                                                                             ## restapi_id: JString (required)
                                                                                                                                             ##             
                                                                                                                                             ## : 
                                                                                                                                             ## [Required] 
                                                                                                                                             ## The 
                                                                                                                                             ## string 
                                                                                                                                             ## identifier 
                                                                                                                                             ## of 
                                                                                                                                             ## the 
                                                                                                                                             ## associated 
                                                                                                                                             ## <a>RestApi</a>.
  ##   
                                                                                                                                                               ## http_method: JString (required)
                                                                                                                                                               ##              
                                                                                                                                                               ## : 
                                                                                                                                                               ## [Required] 
                                                                                                                                                               ## Specifies 
                                                                                                                                                               ## an 
                                                                                                                                                               ## update 
                                                                                                                                                               ## integration 
                                                                                                                                                               ## response 
                                                                                                                                                               ## request's 
                                                                                                                                                               ## HTTP 
                                                                                                                                                               ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657538 = path.getOrDefault("resource_id")
  valid_402657538 = validateParameter(valid_402657538, JString, required = true,
                                      default = nil)
  if valid_402657538 != nil:
    section.add "resource_id", valid_402657538
  var valid_402657539 = path.getOrDefault("status_code")
  valid_402657539 = validateParameter(valid_402657539, JString, required = true,
                                      default = nil)
  if valid_402657539 != nil:
    section.add "status_code", valid_402657539
  var valid_402657540 = path.getOrDefault("restapi_id")
  valid_402657540 = validateParameter(valid_402657540, JString, required = true,
                                      default = nil)
  if valid_402657540 != nil:
    section.add "restapi_id", valid_402657540
  var valid_402657541 = path.getOrDefault("http_method")
  valid_402657541 = validateParameter(valid_402657541, JString, required = true,
                                      default = nil)
  if valid_402657541 != nil:
    section.add "http_method", valid_402657541
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657542 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657542 = validateParameter(valid_402657542, JString,
                                      required = false, default = nil)
  if valid_402657542 != nil:
    section.add "X-Amz-Security-Token", valid_402657542
  var valid_402657543 = header.getOrDefault("X-Amz-Signature")
  valid_402657543 = validateParameter(valid_402657543, JString,
                                      required = false, default = nil)
  if valid_402657543 != nil:
    section.add "X-Amz-Signature", valid_402657543
  var valid_402657544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657544 = validateParameter(valid_402657544, JString,
                                      required = false, default = nil)
  if valid_402657544 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657544
  var valid_402657545 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657545 = validateParameter(valid_402657545, JString,
                                      required = false, default = nil)
  if valid_402657545 != nil:
    section.add "X-Amz-Algorithm", valid_402657545
  var valid_402657546 = header.getOrDefault("X-Amz-Date")
  valid_402657546 = validateParameter(valid_402657546, JString,
                                      required = false, default = nil)
  if valid_402657546 != nil:
    section.add "X-Amz-Date", valid_402657546
  var valid_402657547 = header.getOrDefault("X-Amz-Credential")
  valid_402657547 = validateParameter(valid_402657547, JString,
                                      required = false, default = nil)
  if valid_402657547 != nil:
    section.add "X-Amz-Credential", valid_402657547
  var valid_402657548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657548 = validateParameter(valid_402657548, JString,
                                      required = false, default = nil)
  if valid_402657548 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657548
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657550: Call_UpdateIntegrationResponse_402657535;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents an update integration response.
                                                                                         ## 
  let valid = call_402657550.validator(path, query, header, formData, body, _)
  let scheme = call_402657550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657550.makeUrl(scheme.get, call_402657550.host, call_402657550.base,
                                   call_402657550.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657550, uri, valid, _)

proc call*(call_402657551: Call_UpdateIntegrationResponse_402657535;
           resourceId: string; statusCode: string; restapiId: string;
           body: JsonNode; httpMethod: string): Recallable =
  ## updateIntegrationResponse
  ## Represents an update integration response.
  ##   resourceId: string (required)
                                               ##             : [Required] Specifies an update integration response request's resource identifier.
  ##   
                                                                                                                                                  ## statusCode: string (required)
                                                                                                                                                  ##             
                                                                                                                                                  ## : 
                                                                                                                                                  ## The 
                                                                                                                                                  ## status 
                                                                                                                                                  ## code.
  ##   
                                                                                                                                                          ## restapiId: string (required)
                                                                                                                                                          ##            
                                                                                                                                                          ## : 
                                                                                                                                                          ## [Required] 
                                                                                                                                                          ## The 
                                                                                                                                                          ## string 
                                                                                                                                                          ## identifier 
                                                                                                                                                          ## of 
                                                                                                                                                          ## the 
                                                                                                                                                          ## associated 
                                                                                                                                                          ## <a>RestApi</a>.
  ##   
                                                                                                                                                                            ## body: JObject (required)
  ##   
                                                                                                                                                                                                       ## httpMethod: string (required)
                                                                                                                                                                                                       ##             
                                                                                                                                                                                                       ## : 
                                                                                                                                                                                                       ## [Required] 
                                                                                                                                                                                                       ## Specifies 
                                                                                                                                                                                                       ## an 
                                                                                                                                                                                                       ## update 
                                                                                                                                                                                                       ## integration 
                                                                                                                                                                                                       ## response 
                                                                                                                                                                                                       ## request's 
                                                                                                                                                                                                       ## HTTP 
                                                                                                                                                                                                       ## method.
  var path_402657552 = newJObject()
  var body_402657553 = newJObject()
  add(path_402657552, "resource_id", newJString(resourceId))
  add(path_402657552, "status_code", newJString(statusCode))
  add(path_402657552, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657553 = body
  add(path_402657552, "http_method", newJString(httpMethod))
  result = call_402657551.call(path_402657552, nil, nil, nil, body_402657553)

var updateIntegrationResponse* = Call_UpdateIntegrationResponse_402657535(
    name: "updateIntegrationResponse", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
    validator: validate_UpdateIntegrationResponse_402657536, base: "/",
    makeUrl: url_UpdateIntegrationResponse_402657537,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteIntegrationResponse_402657518 = ref object of OpenApiRestCall_402656035
proc url_DeleteIntegrationResponse_402657520(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/integration/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteIntegrationResponse_402657519(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Represents a delete integration response.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies a delete integration response request's resource identifier.
  ##   
                                                                                                                                    ## status_code: JString (required)
                                                                                                                                    ##              
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## status 
                                                                                                                                    ## code.
  ##   
                                                                                                                                            ## restapi_id: JString (required)
                                                                                                                                            ##             
                                                                                                                                            ## : 
                                                                                                                                            ## [Required] 
                                                                                                                                            ## The 
                                                                                                                                            ## string 
                                                                                                                                            ## identifier 
                                                                                                                                            ## of 
                                                                                                                                            ## the 
                                                                                                                                            ## associated 
                                                                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                                                                              ## http_method: JString (required)
                                                                                                                                                              ##              
                                                                                                                                                              ## : 
                                                                                                                                                              ## [Required] 
                                                                                                                                                              ## Specifies 
                                                                                                                                                              ## a 
                                                                                                                                                              ## delete 
                                                                                                                                                              ## integration 
                                                                                                                                                              ## response 
                                                                                                                                                              ## request's 
                                                                                                                                                              ## HTTP 
                                                                                                                                                              ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657521 = path.getOrDefault("resource_id")
  valid_402657521 = validateParameter(valid_402657521, JString, required = true,
                                      default = nil)
  if valid_402657521 != nil:
    section.add "resource_id", valid_402657521
  var valid_402657522 = path.getOrDefault("status_code")
  valid_402657522 = validateParameter(valid_402657522, JString, required = true,
                                      default = nil)
  if valid_402657522 != nil:
    section.add "status_code", valid_402657522
  var valid_402657523 = path.getOrDefault("restapi_id")
  valid_402657523 = validateParameter(valid_402657523, JString, required = true,
                                      default = nil)
  if valid_402657523 != nil:
    section.add "restapi_id", valid_402657523
  var valid_402657524 = path.getOrDefault("http_method")
  valid_402657524 = validateParameter(valid_402657524, JString, required = true,
                                      default = nil)
  if valid_402657524 != nil:
    section.add "http_method", valid_402657524
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657525 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657525 = validateParameter(valid_402657525, JString,
                                      required = false, default = nil)
  if valid_402657525 != nil:
    section.add "X-Amz-Security-Token", valid_402657525
  var valid_402657526 = header.getOrDefault("X-Amz-Signature")
  valid_402657526 = validateParameter(valid_402657526, JString,
                                      required = false, default = nil)
  if valid_402657526 != nil:
    section.add "X-Amz-Signature", valid_402657526
  var valid_402657527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657527 = validateParameter(valid_402657527, JString,
                                      required = false, default = nil)
  if valid_402657527 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657527
  var valid_402657528 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657528 = validateParameter(valid_402657528, JString,
                                      required = false, default = nil)
  if valid_402657528 != nil:
    section.add "X-Amz-Algorithm", valid_402657528
  var valid_402657529 = header.getOrDefault("X-Amz-Date")
  valid_402657529 = validateParameter(valid_402657529, JString,
                                      required = false, default = nil)
  if valid_402657529 != nil:
    section.add "X-Amz-Date", valid_402657529
  var valid_402657530 = header.getOrDefault("X-Amz-Credential")
  valid_402657530 = validateParameter(valid_402657530, JString,
                                      required = false, default = nil)
  if valid_402657530 != nil:
    section.add "X-Amz-Credential", valid_402657530
  var valid_402657531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657531 = validateParameter(valid_402657531, JString,
                                      required = false, default = nil)
  if valid_402657531 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657532: Call_DeleteIntegrationResponse_402657518;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Represents a delete integration response.
                                                                                         ## 
  let valid = call_402657532.validator(path, query, header, formData, body, _)
  let scheme = call_402657532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657532.makeUrl(scheme.get, call_402657532.host, call_402657532.base,
                                   call_402657532.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657532, uri, valid, _)

proc call*(call_402657533: Call_DeleteIntegrationResponse_402657518;
           resourceId: string; statusCode: string; restapiId: string;
           httpMethod: string): Recallable =
  ## deleteIntegrationResponse
  ## Represents a delete integration response.
  ##   resourceId: string (required)
                                              ##             : [Required] Specifies a delete integration response request's resource identifier.
  ##   
                                                                                                                                                ## statusCode: string (required)
                                                                                                                                                ##             
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## status 
                                                                                                                                                ## code.
  ##   
                                                                                                                                                        ## restapiId: string (required)
                                                                                                                                                        ##            
                                                                                                                                                        ## : 
                                                                                                                                                        ## [Required] 
                                                                                                                                                        ## The 
                                                                                                                                                        ## string 
                                                                                                                                                        ## identifier 
                                                                                                                                                        ## of 
                                                                                                                                                        ## the 
                                                                                                                                                        ## associated 
                                                                                                                                                        ## <a>RestApi</a>.
  ##   
                                                                                                                                                                          ## httpMethod: string (required)
                                                                                                                                                                          ##             
                                                                                                                                                                          ## : 
                                                                                                                                                                          ## [Required] 
                                                                                                                                                                          ## Specifies 
                                                                                                                                                                          ## a 
                                                                                                                                                                          ## delete 
                                                                                                                                                                          ## integration 
                                                                                                                                                                          ## response 
                                                                                                                                                                          ## request's 
                                                                                                                                                                          ## HTTP 
                                                                                                                                                                          ## method.
  var path_402657534 = newJObject()
  add(path_402657534, "resource_id", newJString(resourceId))
  add(path_402657534, "status_code", newJString(statusCode))
  add(path_402657534, "restapi_id", newJString(restapiId))
  add(path_402657534, "http_method", newJString(httpMethod))
  result = call_402657533.call(path_402657534, nil, nil, nil, nil)

var deleteIntegrationResponse* = Call_DeleteIntegrationResponse_402657518(
    name: "deleteIntegrationResponse", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
    validator: validate_DeleteIntegrationResponse_402657519, base: "/",
    makeUrl: url_DeleteIntegrationResponse_402657520,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutMethod_402657570 = ref object of OpenApiRestCall_402656035
proc url_PutMethod_402657572(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutMethod_402657571(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Add a method to an existing <a>Resource</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the new <a>Method</a> resource.
  ##   
                                                                                                                                ## restapi_id: JString (required)
                                                                                                                                ##             
                                                                                                                                ## : 
                                                                                                                                ## [Required] 
                                                                                                                                ## The 
                                                                                                                                ## string 
                                                                                                                                ## identifier 
                                                                                                                                ## of 
                                                                                                                                ## the 
                                                                                                                                ## associated 
                                                                                                                                ## <a>RestApi</a>.
  ##   
                                                                                                                                                  ## http_method: JString (required)
                                                                                                                                                  ##              
                                                                                                                                                  ## : 
                                                                                                                                                  ## [Required] 
                                                                                                                                                  ## Specifies 
                                                                                                                                                  ## the 
                                                                                                                                                  ## method 
                                                                                                                                                  ## request's 
                                                                                                                                                  ## HTTP 
                                                                                                                                                  ## method 
                                                                                                                                                  ## type.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657573 = path.getOrDefault("resource_id")
  valid_402657573 = validateParameter(valid_402657573, JString, required = true,
                                      default = nil)
  if valid_402657573 != nil:
    section.add "resource_id", valid_402657573
  var valid_402657574 = path.getOrDefault("restapi_id")
  valid_402657574 = validateParameter(valid_402657574, JString, required = true,
                                      default = nil)
  if valid_402657574 != nil:
    section.add "restapi_id", valid_402657574
  var valid_402657575 = path.getOrDefault("http_method")
  valid_402657575 = validateParameter(valid_402657575, JString, required = true,
                                      default = nil)
  if valid_402657575 != nil:
    section.add "http_method", valid_402657575
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657576 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657576 = validateParameter(valid_402657576, JString,
                                      required = false, default = nil)
  if valid_402657576 != nil:
    section.add "X-Amz-Security-Token", valid_402657576
  var valid_402657577 = header.getOrDefault("X-Amz-Signature")
  valid_402657577 = validateParameter(valid_402657577, JString,
                                      required = false, default = nil)
  if valid_402657577 != nil:
    section.add "X-Amz-Signature", valid_402657577
  var valid_402657578 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657578 = validateParameter(valid_402657578, JString,
                                      required = false, default = nil)
  if valid_402657578 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657578
  var valid_402657579 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657579 = validateParameter(valid_402657579, JString,
                                      required = false, default = nil)
  if valid_402657579 != nil:
    section.add "X-Amz-Algorithm", valid_402657579
  var valid_402657580 = header.getOrDefault("X-Amz-Date")
  valid_402657580 = validateParameter(valid_402657580, JString,
                                      required = false, default = nil)
  if valid_402657580 != nil:
    section.add "X-Amz-Date", valid_402657580
  var valid_402657581 = header.getOrDefault("X-Amz-Credential")
  valid_402657581 = validateParameter(valid_402657581, JString,
                                      required = false, default = nil)
  if valid_402657581 != nil:
    section.add "X-Amz-Credential", valid_402657581
  var valid_402657582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657582 = validateParameter(valid_402657582, JString,
                                      required = false, default = nil)
  if valid_402657582 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657582
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657584: Call_PutMethod_402657570; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Add a method to an existing <a>Resource</a> resource.
                                                                                         ## 
  let valid = call_402657584.validator(path, query, header, formData, body, _)
  let scheme = call_402657584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657584.makeUrl(scheme.get, call_402657584.host, call_402657584.base,
                                   call_402657584.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657584, uri, valid, _)

proc call*(call_402657585: Call_PutMethod_402657570; resourceId: string;
           restapiId: string; body: JsonNode; httpMethod: string): Recallable =
  ## putMethod
  ## Add a method to an existing <a>Resource</a> resource.
  ##   resourceId: string (required)
                                                          ##             : [Required] The <a>Resource</a> identifier for the new <a>Method</a> resource.
  ##   
                                                                                                                                                        ## restapiId: string (required)
                                                                                                                                                        ##            
                                                                                                                                                        ## : 
                                                                                                                                                        ## [Required] 
                                                                                                                                                        ## The 
                                                                                                                                                        ## string 
                                                                                                                                                        ## identifier 
                                                                                                                                                        ## of 
                                                                                                                                                        ## the 
                                                                                                                                                        ## associated 
                                                                                                                                                        ## <a>RestApi</a>.
  ##   
                                                                                                                                                                          ## body: JObject (required)
  ##   
                                                                                                                                                                                                     ## httpMethod: string (required)
                                                                                                                                                                                                     ##             
                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                     ## [Required] 
                                                                                                                                                                                                     ## Specifies 
                                                                                                                                                                                                     ## the 
                                                                                                                                                                                                     ## method 
                                                                                                                                                                                                     ## request's 
                                                                                                                                                                                                     ## HTTP 
                                                                                                                                                                                                     ## method 
                                                                                                                                                                                                     ## type.
  var path_402657586 = newJObject()
  var body_402657587 = newJObject()
  add(path_402657586, "resource_id", newJString(resourceId))
  add(path_402657586, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657587 = body
  add(path_402657586, "http_method", newJString(httpMethod))
  result = call_402657585.call(path_402657586, nil, nil, nil, body_402657587)

var putMethod* = Call_PutMethod_402657570(name: "putMethod",
    meth: HttpMethod.HttpPut, host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
    validator: validate_PutMethod_402657571, base: "/", makeUrl: url_PutMethod_402657572,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_TestInvokeMethod_402657588 = ref object of OpenApiRestCall_402656035
proc url_TestInvokeMethod_402657590(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_TestInvokeMethod_402657589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Simulate the execution of a <a>Method</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] Specifies a test invoke method request's resource ID.
  ##   
                                                                                                                   ## restapi_id: JString (required)
                                                                                                                   ##             
                                                                                                                   ## : 
                                                                                                                   ## [Required] 
                                                                                                                   ## The 
                                                                                                                   ## string 
                                                                                                                   ## identifier 
                                                                                                                   ## of 
                                                                                                                   ## the 
                                                                                                                   ## associated 
                                                                                                                   ## <a>RestApi</a>.
  ##   
                                                                                                                                     ## http_method: JString (required)
                                                                                                                                     ##              
                                                                                                                                     ## : 
                                                                                                                                     ## [Required] 
                                                                                                                                     ## Specifies 
                                                                                                                                     ## a 
                                                                                                                                     ## test 
                                                                                                                                     ## invoke 
                                                                                                                                     ## method 
                                                                                                                                     ## request's 
                                                                                                                                     ## HTTP 
                                                                                                                                     ## method.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657591 = path.getOrDefault("resource_id")
  valid_402657591 = validateParameter(valid_402657591, JString, required = true,
                                      default = nil)
  if valid_402657591 != nil:
    section.add "resource_id", valid_402657591
  var valid_402657592 = path.getOrDefault("restapi_id")
  valid_402657592 = validateParameter(valid_402657592, JString, required = true,
                                      default = nil)
  if valid_402657592 != nil:
    section.add "restapi_id", valid_402657592
  var valid_402657593 = path.getOrDefault("http_method")
  valid_402657593 = validateParameter(valid_402657593, JString, required = true,
                                      default = nil)
  if valid_402657593 != nil:
    section.add "http_method", valid_402657593
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657594 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657594 = validateParameter(valid_402657594, JString,
                                      required = false, default = nil)
  if valid_402657594 != nil:
    section.add "X-Amz-Security-Token", valid_402657594
  var valid_402657595 = header.getOrDefault("X-Amz-Signature")
  valid_402657595 = validateParameter(valid_402657595, JString,
                                      required = false, default = nil)
  if valid_402657595 != nil:
    section.add "X-Amz-Signature", valid_402657595
  var valid_402657596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657596 = validateParameter(valid_402657596, JString,
                                      required = false, default = nil)
  if valid_402657596 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657596
  var valid_402657597 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657597 = validateParameter(valid_402657597, JString,
                                      required = false, default = nil)
  if valid_402657597 != nil:
    section.add "X-Amz-Algorithm", valid_402657597
  var valid_402657598 = header.getOrDefault("X-Amz-Date")
  valid_402657598 = validateParameter(valid_402657598, JString,
                                      required = false, default = nil)
  if valid_402657598 != nil:
    section.add "X-Amz-Date", valid_402657598
  var valid_402657599 = header.getOrDefault("X-Amz-Credential")
  valid_402657599 = validateParameter(valid_402657599, JString,
                                      required = false, default = nil)
  if valid_402657599 != nil:
    section.add "X-Amz-Credential", valid_402657599
  var valid_402657600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657600 = validateParameter(valid_402657600, JString,
                                      required = false, default = nil)
  if valid_402657600 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657602: Call_TestInvokeMethod_402657588;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Simulate the execution of a <a>Method</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.
                                                                                         ## 
  let valid = call_402657602.validator(path, query, header, formData, body, _)
  let scheme = call_402657602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657602.makeUrl(scheme.get, call_402657602.host, call_402657602.base,
                                   call_402657602.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657602, uri, valid, _)

proc call*(call_402657603: Call_TestInvokeMethod_402657588; resourceId: string;
           restapiId: string; body: JsonNode; httpMethod: string): Recallable =
  ## testInvokeMethod
  ## Simulate the execution of a <a>Method</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.
  ##   
                                                                                                                             ## resourceId: string (required)
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## [Required] 
                                                                                                                             ## Specifies 
                                                                                                                             ## a 
                                                                                                                             ## test 
                                                                                                                             ## invoke 
                                                                                                                             ## method 
                                                                                                                             ## request's 
                                                                                                                             ## resource 
                                                                                                                             ## ID.
  ##   
                                                                                                                                   ## restapiId: string (required)
                                                                                                                                   ##            
                                                                                                                                   ## : 
                                                                                                                                   ## [Required] 
                                                                                                                                   ## The 
                                                                                                                                   ## string 
                                                                                                                                   ## identifier 
                                                                                                                                   ## of 
                                                                                                                                   ## the 
                                                                                                                                   ## associated 
                                                                                                                                   ## <a>RestApi</a>.
  ##   
                                                                                                                                                     ## body: JObject (required)
  ##   
                                                                                                                                                                                ## httpMethod: string (required)
                                                                                                                                                                                ##             
                                                                                                                                                                                ## : 
                                                                                                                                                                                ## [Required] 
                                                                                                                                                                                ## Specifies 
                                                                                                                                                                                ## a 
                                                                                                                                                                                ## test 
                                                                                                                                                                                ## invoke 
                                                                                                                                                                                ## method 
                                                                                                                                                                                ## request's 
                                                                                                                                                                                ## HTTP 
                                                                                                                                                                                ## method.
  var path_402657604 = newJObject()
  var body_402657605 = newJObject()
  add(path_402657604, "resource_id", newJString(resourceId))
  add(path_402657604, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657605 = body
  add(path_402657604, "http_method", newJString(httpMethod))
  result = call_402657603.call(path_402657604, nil, nil, nil, body_402657605)

var testInvokeMethod* = Call_TestInvokeMethod_402657588(
    name: "testInvokeMethod", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
    validator: validate_TestInvokeMethod_402657589, base: "/",
    makeUrl: url_TestInvokeMethod_402657590,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetMethod_402657554 = ref object of OpenApiRestCall_402656035
proc url_GetMethod_402657556(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetMethod_402657555(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describe an existing <a>Method</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the <a>Method</a> resource.
  ##   
                                                                                                                            ## restapi_id: JString (required)
                                                                                                                            ##             
                                                                                                                            ## : 
                                                                                                                            ## [Required] 
                                                                                                                            ## The 
                                                                                                                            ## string 
                                                                                                                            ## identifier 
                                                                                                                            ## of 
                                                                                                                            ## the 
                                                                                                                            ## associated 
                                                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                                                              ## http_method: JString (required)
                                                                                                                                              ##              
                                                                                                                                              ## : 
                                                                                                                                              ## [Required] 
                                                                                                                                              ## Specifies 
                                                                                                                                              ## the 
                                                                                                                                              ## method 
                                                                                                                                              ## request's 
                                                                                                                                              ## HTTP 
                                                                                                                                              ## method 
                                                                                                                                              ## type.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657557 = path.getOrDefault("resource_id")
  valid_402657557 = validateParameter(valid_402657557, JString, required = true,
                                      default = nil)
  if valid_402657557 != nil:
    section.add "resource_id", valid_402657557
  var valid_402657558 = path.getOrDefault("restapi_id")
  valid_402657558 = validateParameter(valid_402657558, JString, required = true,
                                      default = nil)
  if valid_402657558 != nil:
    section.add "restapi_id", valid_402657558
  var valid_402657559 = path.getOrDefault("http_method")
  valid_402657559 = validateParameter(valid_402657559, JString, required = true,
                                      default = nil)
  if valid_402657559 != nil:
    section.add "http_method", valid_402657559
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657560 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657560 = validateParameter(valid_402657560, JString,
                                      required = false, default = nil)
  if valid_402657560 != nil:
    section.add "X-Amz-Security-Token", valid_402657560
  var valid_402657561 = header.getOrDefault("X-Amz-Signature")
  valid_402657561 = validateParameter(valid_402657561, JString,
                                      required = false, default = nil)
  if valid_402657561 != nil:
    section.add "X-Amz-Signature", valid_402657561
  var valid_402657562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657562 = validateParameter(valid_402657562, JString,
                                      required = false, default = nil)
  if valid_402657562 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657562
  var valid_402657563 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657563 = validateParameter(valid_402657563, JString,
                                      required = false, default = nil)
  if valid_402657563 != nil:
    section.add "X-Amz-Algorithm", valid_402657563
  var valid_402657564 = header.getOrDefault("X-Amz-Date")
  valid_402657564 = validateParameter(valid_402657564, JString,
                                      required = false, default = nil)
  if valid_402657564 != nil:
    section.add "X-Amz-Date", valid_402657564
  var valid_402657565 = header.getOrDefault("X-Amz-Credential")
  valid_402657565 = validateParameter(valid_402657565, JString,
                                      required = false, default = nil)
  if valid_402657565 != nil:
    section.add "X-Amz-Credential", valid_402657565
  var valid_402657566 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657566 = validateParameter(valid_402657566, JString,
                                      required = false, default = nil)
  if valid_402657566 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657566
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657567: Call_GetMethod_402657554; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describe an existing <a>Method</a> resource.
                                                                                         ## 
  let valid = call_402657567.validator(path, query, header, formData, body, _)
  let scheme = call_402657567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657567.makeUrl(scheme.get, call_402657567.host, call_402657567.base,
                                   call_402657567.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657567, uri, valid, _)

proc call*(call_402657568: Call_GetMethod_402657554; resourceId: string;
           restapiId: string; httpMethod: string): Recallable =
  ## getMethod
  ## Describe an existing <a>Method</a> resource.
  ##   resourceId: string (required)
                                                 ##             : [Required] The <a>Resource</a> identifier for the <a>Method</a> resource.
  ##   
                                                                                                                                           ## restapiId: string (required)
                                                                                                                                           ##            
                                                                                                                                           ## : 
                                                                                                                                           ## [Required] 
                                                                                                                                           ## The 
                                                                                                                                           ## string 
                                                                                                                                           ## identifier 
                                                                                                                                           ## of 
                                                                                                                                           ## the 
                                                                                                                                           ## associated 
                                                                                                                                           ## <a>RestApi</a>.
  ##   
                                                                                                                                                             ## httpMethod: string (required)
                                                                                                                                                             ##             
                                                                                                                                                             ## : 
                                                                                                                                                             ## [Required] 
                                                                                                                                                             ## Specifies 
                                                                                                                                                             ## the 
                                                                                                                                                             ## method 
                                                                                                                                                             ## request's 
                                                                                                                                                             ## HTTP 
                                                                                                                                                             ## method 
                                                                                                                                                             ## type.
  var path_402657569 = newJObject()
  add(path_402657569, "resource_id", newJString(resourceId))
  add(path_402657569, "restapi_id", newJString(restapiId))
  add(path_402657569, "http_method", newJString(httpMethod))
  result = call_402657568.call(path_402657569, nil, nil, nil, nil)

var getMethod* = Call_GetMethod_402657554(name: "getMethod",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
    validator: validate_GetMethod_402657555, base: "/", makeUrl: url_GetMethod_402657556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateMethod_402657622 = ref object of OpenApiRestCall_402656035
proc url_UpdateMethod_402657624(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateMethod_402657623(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates an existing <a>Method</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the <a>Method</a> resource.
  ##   
                                                                                                                            ## restapi_id: JString (required)
                                                                                                                            ##             
                                                                                                                            ## : 
                                                                                                                            ## [Required] 
                                                                                                                            ## The 
                                                                                                                            ## string 
                                                                                                                            ## identifier 
                                                                                                                            ## of 
                                                                                                                            ## the 
                                                                                                                            ## associated 
                                                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                                                              ## http_method: JString (required)
                                                                                                                                              ##              
                                                                                                                                              ## : 
                                                                                                                                              ## [Required] 
                                                                                                                                              ## The 
                                                                                                                                              ## HTTP 
                                                                                                                                              ## verb 
                                                                                                                                              ## of 
                                                                                                                                              ## the 
                                                                                                                                              ## <a>Method</a> 
                                                                                                                                              ## resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657625 = path.getOrDefault("resource_id")
  valid_402657625 = validateParameter(valid_402657625, JString, required = true,
                                      default = nil)
  if valid_402657625 != nil:
    section.add "resource_id", valid_402657625
  var valid_402657626 = path.getOrDefault("restapi_id")
  valid_402657626 = validateParameter(valid_402657626, JString, required = true,
                                      default = nil)
  if valid_402657626 != nil:
    section.add "restapi_id", valid_402657626
  var valid_402657627 = path.getOrDefault("http_method")
  valid_402657627 = validateParameter(valid_402657627, JString, required = true,
                                      default = nil)
  if valid_402657627 != nil:
    section.add "http_method", valid_402657627
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657628 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657628 = validateParameter(valid_402657628, JString,
                                      required = false, default = nil)
  if valid_402657628 != nil:
    section.add "X-Amz-Security-Token", valid_402657628
  var valid_402657629 = header.getOrDefault("X-Amz-Signature")
  valid_402657629 = validateParameter(valid_402657629, JString,
                                      required = false, default = nil)
  if valid_402657629 != nil:
    section.add "X-Amz-Signature", valid_402657629
  var valid_402657630 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657630 = validateParameter(valid_402657630, JString,
                                      required = false, default = nil)
  if valid_402657630 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657630
  var valid_402657631 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657631 = validateParameter(valid_402657631, JString,
                                      required = false, default = nil)
  if valid_402657631 != nil:
    section.add "X-Amz-Algorithm", valid_402657631
  var valid_402657632 = header.getOrDefault("X-Amz-Date")
  valid_402657632 = validateParameter(valid_402657632, JString,
                                      required = false, default = nil)
  if valid_402657632 != nil:
    section.add "X-Amz-Date", valid_402657632
  var valid_402657633 = header.getOrDefault("X-Amz-Credential")
  valid_402657633 = validateParameter(valid_402657633, JString,
                                      required = false, default = nil)
  if valid_402657633 != nil:
    section.add "X-Amz-Credential", valid_402657633
  var valid_402657634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657634 = validateParameter(valid_402657634, JString,
                                      required = false, default = nil)
  if valid_402657634 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657636: Call_UpdateMethod_402657622; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates an existing <a>Method</a> resource.
                                                                                         ## 
  let valid = call_402657636.validator(path, query, header, formData, body, _)
  let scheme = call_402657636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657636.makeUrl(scheme.get, call_402657636.host, call_402657636.base,
                                   call_402657636.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657636, uri, valid, _)

proc call*(call_402657637: Call_UpdateMethod_402657622; resourceId: string;
           restapiId: string; body: JsonNode; httpMethod: string): Recallable =
  ## updateMethod
  ## Updates an existing <a>Method</a> resource.
  ##   resourceId: string (required)
                                                ##             : [Required] The <a>Resource</a> identifier for the <a>Method</a> resource.
  ##   
                                                                                                                                          ## restapiId: string (required)
                                                                                                                                          ##            
                                                                                                                                          ## : 
                                                                                                                                          ## [Required] 
                                                                                                                                          ## The 
                                                                                                                                          ## string 
                                                                                                                                          ## identifier 
                                                                                                                                          ## of 
                                                                                                                                          ## the 
                                                                                                                                          ## associated 
                                                                                                                                          ## <a>RestApi</a>.
  ##   
                                                                                                                                                            ## body: JObject (required)
  ##   
                                                                                                                                                                                       ## httpMethod: string (required)
                                                                                                                                                                                       ##             
                                                                                                                                                                                       ## : 
                                                                                                                                                                                       ## [Required] 
                                                                                                                                                                                       ## The 
                                                                                                                                                                                       ## HTTP 
                                                                                                                                                                                       ## verb 
                                                                                                                                                                                       ## of 
                                                                                                                                                                                       ## the 
                                                                                                                                                                                       ## <a>Method</a> 
                                                                                                                                                                                       ## resource.
  var path_402657638 = newJObject()
  var body_402657639 = newJObject()
  add(path_402657638, "resource_id", newJString(resourceId))
  add(path_402657638, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657639 = body
  add(path_402657638, "http_method", newJString(httpMethod))
  result = call_402657637.call(path_402657638, nil, nil, nil, body_402657639)

var updateMethod* = Call_UpdateMethod_402657622(name: "updateMethod",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
    validator: validate_UpdateMethod_402657623, base: "/",
    makeUrl: url_UpdateMethod_402657624, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteMethod_402657606 = ref object of OpenApiRestCall_402656035
proc url_DeleteMethod_402657608(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteMethod_402657607(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an existing <a>Method</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the <a>Method</a> resource.
  ##   
                                                                                                                            ## restapi_id: JString (required)
                                                                                                                            ##             
                                                                                                                            ## : 
                                                                                                                            ## [Required] 
                                                                                                                            ## The 
                                                                                                                            ## string 
                                                                                                                            ## identifier 
                                                                                                                            ## of 
                                                                                                                            ## the 
                                                                                                                            ## associated 
                                                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                                                              ## http_method: JString (required)
                                                                                                                                              ##              
                                                                                                                                              ## : 
                                                                                                                                              ## [Required] 
                                                                                                                                              ## The 
                                                                                                                                              ## HTTP 
                                                                                                                                              ## verb 
                                                                                                                                              ## of 
                                                                                                                                              ## the 
                                                                                                                                              ## <a>Method</a> 
                                                                                                                                              ## resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657609 = path.getOrDefault("resource_id")
  valid_402657609 = validateParameter(valid_402657609, JString, required = true,
                                      default = nil)
  if valid_402657609 != nil:
    section.add "resource_id", valid_402657609
  var valid_402657610 = path.getOrDefault("restapi_id")
  valid_402657610 = validateParameter(valid_402657610, JString, required = true,
                                      default = nil)
  if valid_402657610 != nil:
    section.add "restapi_id", valid_402657610
  var valid_402657611 = path.getOrDefault("http_method")
  valid_402657611 = validateParameter(valid_402657611, JString, required = true,
                                      default = nil)
  if valid_402657611 != nil:
    section.add "http_method", valid_402657611
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657612 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657612 = validateParameter(valid_402657612, JString,
                                      required = false, default = nil)
  if valid_402657612 != nil:
    section.add "X-Amz-Security-Token", valid_402657612
  var valid_402657613 = header.getOrDefault("X-Amz-Signature")
  valid_402657613 = validateParameter(valid_402657613, JString,
                                      required = false, default = nil)
  if valid_402657613 != nil:
    section.add "X-Amz-Signature", valid_402657613
  var valid_402657614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657614 = validateParameter(valid_402657614, JString,
                                      required = false, default = nil)
  if valid_402657614 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657614
  var valid_402657615 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657615 = validateParameter(valid_402657615, JString,
                                      required = false, default = nil)
  if valid_402657615 != nil:
    section.add "X-Amz-Algorithm", valid_402657615
  var valid_402657616 = header.getOrDefault("X-Amz-Date")
  valid_402657616 = validateParameter(valid_402657616, JString,
                                      required = false, default = nil)
  if valid_402657616 != nil:
    section.add "X-Amz-Date", valid_402657616
  var valid_402657617 = header.getOrDefault("X-Amz-Credential")
  valid_402657617 = validateParameter(valid_402657617, JString,
                                      required = false, default = nil)
  if valid_402657617 != nil:
    section.add "X-Amz-Credential", valid_402657617
  var valid_402657618 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657618 = validateParameter(valid_402657618, JString,
                                      required = false, default = nil)
  if valid_402657618 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657619: Call_DeleteMethod_402657606; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an existing <a>Method</a> resource.
                                                                                         ## 
  let valid = call_402657619.validator(path, query, header, formData, body, _)
  let scheme = call_402657619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657619.makeUrl(scheme.get, call_402657619.host, call_402657619.base,
                                   call_402657619.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657619, uri, valid, _)

proc call*(call_402657620: Call_DeleteMethod_402657606; resourceId: string;
           restapiId: string; httpMethod: string): Recallable =
  ## deleteMethod
  ## Deletes an existing <a>Method</a> resource.
  ##   resourceId: string (required)
                                                ##             : [Required] The <a>Resource</a> identifier for the <a>Method</a> resource.
  ##   
                                                                                                                                          ## restapiId: string (required)
                                                                                                                                          ##            
                                                                                                                                          ## : 
                                                                                                                                          ## [Required] 
                                                                                                                                          ## The 
                                                                                                                                          ## string 
                                                                                                                                          ## identifier 
                                                                                                                                          ## of 
                                                                                                                                          ## the 
                                                                                                                                          ## associated 
                                                                                                                                          ## <a>RestApi</a>.
  ##   
                                                                                                                                                            ## httpMethod: string (required)
                                                                                                                                                            ##             
                                                                                                                                                            ## : 
                                                                                                                                                            ## [Required] 
                                                                                                                                                            ## The 
                                                                                                                                                            ## HTTP 
                                                                                                                                                            ## verb 
                                                                                                                                                            ## of 
                                                                                                                                                            ## the 
                                                                                                                                                            ## <a>Method</a> 
                                                                                                                                                            ## resource.
  var path_402657621 = newJObject()
  add(path_402657621, "resource_id", newJString(resourceId))
  add(path_402657621, "restapi_id", newJString(restapiId))
  add(path_402657621, "http_method", newJString(httpMethod))
  result = call_402657620.call(path_402657621, nil, nil, nil, nil)

var deleteMethod* = Call_DeleteMethod_402657606(name: "deleteMethod",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
    validator: validate_DeleteMethod_402657607, base: "/",
    makeUrl: url_DeleteMethod_402657608, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutMethodResponse_402657657 = ref object of OpenApiRestCall_402656035
proc url_PutMethodResponse_402657659(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutMethodResponse_402657658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds a <a>MethodResponse</a> to an existing <a>Method</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the <a>Method</a> resource.
  ##   
                                                                                                                            ## status_code: JString (required)
                                                                                                                            ##              
                                                                                                                            ## : 
                                                                                                                            ## The 
                                                                                                                            ## status 
                                                                                                                            ## code.
  ##   
                                                                                                                                    ## restapi_id: JString (required)
                                                                                                                                    ##             
                                                                                                                                    ## : 
                                                                                                                                    ## [Required] 
                                                                                                                                    ## The 
                                                                                                                                    ## string 
                                                                                                                                    ## identifier 
                                                                                                                                    ## of 
                                                                                                                                    ## the 
                                                                                                                                    ## associated 
                                                                                                                                    ## <a>RestApi</a>.
  ##   
                                                                                                                                                      ## http_method: JString (required)
                                                                                                                                                      ##              
                                                                                                                                                      ## : 
                                                                                                                                                      ## [Required] 
                                                                                                                                                      ## The 
                                                                                                                                                      ## HTTP 
                                                                                                                                                      ## verb 
                                                                                                                                                      ## of 
                                                                                                                                                      ## the 
                                                                                                                                                      ## <a>Method</a> 
                                                                                                                                                      ## resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657660 = path.getOrDefault("resource_id")
  valid_402657660 = validateParameter(valid_402657660, JString, required = true,
                                      default = nil)
  if valid_402657660 != nil:
    section.add "resource_id", valid_402657660
  var valid_402657661 = path.getOrDefault("status_code")
  valid_402657661 = validateParameter(valid_402657661, JString, required = true,
                                      default = nil)
  if valid_402657661 != nil:
    section.add "status_code", valid_402657661
  var valid_402657662 = path.getOrDefault("restapi_id")
  valid_402657662 = validateParameter(valid_402657662, JString, required = true,
                                      default = nil)
  if valid_402657662 != nil:
    section.add "restapi_id", valid_402657662
  var valid_402657663 = path.getOrDefault("http_method")
  valid_402657663 = validateParameter(valid_402657663, JString, required = true,
                                      default = nil)
  if valid_402657663 != nil:
    section.add "http_method", valid_402657663
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657664 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657664 = validateParameter(valid_402657664, JString,
                                      required = false, default = nil)
  if valid_402657664 != nil:
    section.add "X-Amz-Security-Token", valid_402657664
  var valid_402657665 = header.getOrDefault("X-Amz-Signature")
  valid_402657665 = validateParameter(valid_402657665, JString,
                                      required = false, default = nil)
  if valid_402657665 != nil:
    section.add "X-Amz-Signature", valid_402657665
  var valid_402657666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657666 = validateParameter(valid_402657666, JString,
                                      required = false, default = nil)
  if valid_402657666 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657666
  var valid_402657667 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657667 = validateParameter(valid_402657667, JString,
                                      required = false, default = nil)
  if valid_402657667 != nil:
    section.add "X-Amz-Algorithm", valid_402657667
  var valid_402657668 = header.getOrDefault("X-Amz-Date")
  valid_402657668 = validateParameter(valid_402657668, JString,
                                      required = false, default = nil)
  if valid_402657668 != nil:
    section.add "X-Amz-Date", valid_402657668
  var valid_402657669 = header.getOrDefault("X-Amz-Credential")
  valid_402657669 = validateParameter(valid_402657669, JString,
                                      required = false, default = nil)
  if valid_402657669 != nil:
    section.add "X-Amz-Credential", valid_402657669
  var valid_402657670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657670 = validateParameter(valid_402657670, JString,
                                      required = false, default = nil)
  if valid_402657670 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657672: Call_PutMethodResponse_402657657;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a <a>MethodResponse</a> to an existing <a>Method</a> resource.
                                                                                         ## 
  let valid = call_402657672.validator(path, query, header, formData, body, _)
  let scheme = call_402657672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657672.makeUrl(scheme.get, call_402657672.host, call_402657672.base,
                                   call_402657672.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657672, uri, valid, _)

proc call*(call_402657673: Call_PutMethodResponse_402657657; resourceId: string;
           statusCode: string; restapiId: string; body: JsonNode;
           httpMethod: string): Recallable =
  ## putMethodResponse
  ## Adds a <a>MethodResponse</a> to an existing <a>Method</a> resource.
  ##   
                                                                        ## resourceId: string (required)
                                                                        ##             
                                                                        ## : 
                                                                        ## [Required] The 
                                                                        ## <a>Resource</a> 
                                                                        ## identifier 
                                                                        ## for 
                                                                        ## the 
                                                                        ## <a>Method</a> 
                                                                        ## resource.
  ##   
                                                                                    ## statusCode: string (required)
                                                                                    ##             
                                                                                    ## : 
                                                                                    ## The 
                                                                                    ## status 
                                                                                    ## code.
  ##   
                                                                                            ## restapiId: string (required)
                                                                                            ##            
                                                                                            ## : 
                                                                                            ## [Required] 
                                                                                            ## The 
                                                                                            ## string 
                                                                                            ## identifier 
                                                                                            ## of 
                                                                                            ## the 
                                                                                            ## associated 
                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                              ## body: JObject (required)
  ##   
                                                                                                                                         ## httpMethod: string (required)
                                                                                                                                         ##             
                                                                                                                                         ## : 
                                                                                                                                         ## [Required] 
                                                                                                                                         ## The 
                                                                                                                                         ## HTTP 
                                                                                                                                         ## verb 
                                                                                                                                         ## of 
                                                                                                                                         ## the 
                                                                                                                                         ## <a>Method</a> 
                                                                                                                                         ## resource.
  var path_402657674 = newJObject()
  var body_402657675 = newJObject()
  add(path_402657674, "resource_id", newJString(resourceId))
  add(path_402657674, "status_code", newJString(statusCode))
  add(path_402657674, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657675 = body
  add(path_402657674, "http_method", newJString(httpMethod))
  result = call_402657673.call(path_402657674, nil, nil, nil, body_402657675)

var putMethodResponse* = Call_PutMethodResponse_402657657(
    name: "putMethodResponse", meth: HttpMethod.HttpPut,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
    validator: validate_PutMethodResponse_402657658, base: "/",
    makeUrl: url_PutMethodResponse_402657659,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetMethodResponse_402657640 = ref object of OpenApiRestCall_402656035
proc url_GetMethodResponse_402657642(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetMethodResponse_402657641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes a <a>MethodResponse</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.
  ##   
                                                                                                                                    ## status_code: JString (required)
                                                                                                                                    ##              
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## status 
                                                                                                                                    ## code.
  ##   
                                                                                                                                            ## restapi_id: JString (required)
                                                                                                                                            ##             
                                                                                                                                            ## : 
                                                                                                                                            ## [Required] 
                                                                                                                                            ## The 
                                                                                                                                            ## string 
                                                                                                                                            ## identifier 
                                                                                                                                            ## of 
                                                                                                                                            ## the 
                                                                                                                                            ## associated 
                                                                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                                                                              ## http_method: JString (required)
                                                                                                                                                              ##              
                                                                                                                                                              ## : 
                                                                                                                                                              ## [Required] 
                                                                                                                                                              ## The 
                                                                                                                                                              ## HTTP 
                                                                                                                                                              ## verb 
                                                                                                                                                              ## of 
                                                                                                                                                              ## the 
                                                                                                                                                              ## <a>Method</a> 
                                                                                                                                                              ## resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657643 = path.getOrDefault("resource_id")
  valid_402657643 = validateParameter(valid_402657643, JString, required = true,
                                      default = nil)
  if valid_402657643 != nil:
    section.add "resource_id", valid_402657643
  var valid_402657644 = path.getOrDefault("status_code")
  valid_402657644 = validateParameter(valid_402657644, JString, required = true,
                                      default = nil)
  if valid_402657644 != nil:
    section.add "status_code", valid_402657644
  var valid_402657645 = path.getOrDefault("restapi_id")
  valid_402657645 = validateParameter(valid_402657645, JString, required = true,
                                      default = nil)
  if valid_402657645 != nil:
    section.add "restapi_id", valid_402657645
  var valid_402657646 = path.getOrDefault("http_method")
  valid_402657646 = validateParameter(valid_402657646, JString, required = true,
                                      default = nil)
  if valid_402657646 != nil:
    section.add "http_method", valid_402657646
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657647 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657647 = validateParameter(valid_402657647, JString,
                                      required = false, default = nil)
  if valid_402657647 != nil:
    section.add "X-Amz-Security-Token", valid_402657647
  var valid_402657648 = header.getOrDefault("X-Amz-Signature")
  valid_402657648 = validateParameter(valid_402657648, JString,
                                      required = false, default = nil)
  if valid_402657648 != nil:
    section.add "X-Amz-Signature", valid_402657648
  var valid_402657649 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657649 = validateParameter(valid_402657649, JString,
                                      required = false, default = nil)
  if valid_402657649 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657649
  var valid_402657650 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657650 = validateParameter(valid_402657650, JString,
                                      required = false, default = nil)
  if valid_402657650 != nil:
    section.add "X-Amz-Algorithm", valid_402657650
  var valid_402657651 = header.getOrDefault("X-Amz-Date")
  valid_402657651 = validateParameter(valid_402657651, JString,
                                      required = false, default = nil)
  if valid_402657651 != nil:
    section.add "X-Amz-Date", valid_402657651
  var valid_402657652 = header.getOrDefault("X-Amz-Credential")
  valid_402657652 = validateParameter(valid_402657652, JString,
                                      required = false, default = nil)
  if valid_402657652 != nil:
    section.add "X-Amz-Credential", valid_402657652
  var valid_402657653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657653 = validateParameter(valid_402657653, JString,
                                      required = false, default = nil)
  if valid_402657653 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657653
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657654: Call_GetMethodResponse_402657640;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes a <a>MethodResponse</a> resource.
                                                                                         ## 
  let valid = call_402657654.validator(path, query, header, formData, body, _)
  let scheme = call_402657654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657654.makeUrl(scheme.get, call_402657654.host, call_402657654.base,
                                   call_402657654.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657654, uri, valid, _)

proc call*(call_402657655: Call_GetMethodResponse_402657640; resourceId: string;
           statusCode: string; restapiId: string; httpMethod: string): Recallable =
  ## getMethodResponse
  ## Describes a <a>MethodResponse</a> resource.
  ##   resourceId: string (required)
                                                ##             : [Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.
  ##   
                                                                                                                                                  ## statusCode: string (required)
                                                                                                                                                  ##             
                                                                                                                                                  ## : 
                                                                                                                                                  ## The 
                                                                                                                                                  ## status 
                                                                                                                                                  ## code.
  ##   
                                                                                                                                                          ## restapiId: string (required)
                                                                                                                                                          ##            
                                                                                                                                                          ## : 
                                                                                                                                                          ## [Required] 
                                                                                                                                                          ## The 
                                                                                                                                                          ## string 
                                                                                                                                                          ## identifier 
                                                                                                                                                          ## of 
                                                                                                                                                          ## the 
                                                                                                                                                          ## associated 
                                                                                                                                                          ## <a>RestApi</a>.
  ##   
                                                                                                                                                                            ## httpMethod: string (required)
                                                                                                                                                                            ##             
                                                                                                                                                                            ## : 
                                                                                                                                                                            ## [Required] 
                                                                                                                                                                            ## The 
                                                                                                                                                                            ## HTTP 
                                                                                                                                                                            ## verb 
                                                                                                                                                                            ## of 
                                                                                                                                                                            ## the 
                                                                                                                                                                            ## <a>Method</a> 
                                                                                                                                                                            ## resource.
  var path_402657656 = newJObject()
  add(path_402657656, "resource_id", newJString(resourceId))
  add(path_402657656, "status_code", newJString(statusCode))
  add(path_402657656, "restapi_id", newJString(restapiId))
  add(path_402657656, "http_method", newJString(httpMethod))
  result = call_402657655.call(path_402657656, nil, nil, nil, nil)

var getMethodResponse* = Call_GetMethodResponse_402657640(
    name: "getMethodResponse", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
    validator: validate_GetMethodResponse_402657641, base: "/",
    makeUrl: url_GetMethodResponse_402657642,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateMethodResponse_402657693 = ref object of OpenApiRestCall_402656035
proc url_UpdateMethodResponse_402657695(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateMethodResponse_402657694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates an existing <a>MethodResponse</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.
  ##   
                                                                                                                                    ## status_code: JString (required)
                                                                                                                                    ##              
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## status 
                                                                                                                                    ## code.
  ##   
                                                                                                                                            ## restapi_id: JString (required)
                                                                                                                                            ##             
                                                                                                                                            ## : 
                                                                                                                                            ## [Required] 
                                                                                                                                            ## The 
                                                                                                                                            ## string 
                                                                                                                                            ## identifier 
                                                                                                                                            ## of 
                                                                                                                                            ## the 
                                                                                                                                            ## associated 
                                                                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                                                                              ## http_method: JString (required)
                                                                                                                                                              ##              
                                                                                                                                                              ## : 
                                                                                                                                                              ## [Required] 
                                                                                                                                                              ## The 
                                                                                                                                                              ## HTTP 
                                                                                                                                                              ## verb 
                                                                                                                                                              ## of 
                                                                                                                                                              ## the 
                                                                                                                                                              ## <a>Method</a> 
                                                                                                                                                              ## resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657696 = path.getOrDefault("resource_id")
  valid_402657696 = validateParameter(valid_402657696, JString, required = true,
                                      default = nil)
  if valid_402657696 != nil:
    section.add "resource_id", valid_402657696
  var valid_402657697 = path.getOrDefault("status_code")
  valid_402657697 = validateParameter(valid_402657697, JString, required = true,
                                      default = nil)
  if valid_402657697 != nil:
    section.add "status_code", valid_402657697
  var valid_402657698 = path.getOrDefault("restapi_id")
  valid_402657698 = validateParameter(valid_402657698, JString, required = true,
                                      default = nil)
  if valid_402657698 != nil:
    section.add "restapi_id", valid_402657698
  var valid_402657699 = path.getOrDefault("http_method")
  valid_402657699 = validateParameter(valid_402657699, JString, required = true,
                                      default = nil)
  if valid_402657699 != nil:
    section.add "http_method", valid_402657699
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657700 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657700 = validateParameter(valid_402657700, JString,
                                      required = false, default = nil)
  if valid_402657700 != nil:
    section.add "X-Amz-Security-Token", valid_402657700
  var valid_402657701 = header.getOrDefault("X-Amz-Signature")
  valid_402657701 = validateParameter(valid_402657701, JString,
                                      required = false, default = nil)
  if valid_402657701 != nil:
    section.add "X-Amz-Signature", valid_402657701
  var valid_402657702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657702 = validateParameter(valid_402657702, JString,
                                      required = false, default = nil)
  if valid_402657702 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657702
  var valid_402657703 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657703 = validateParameter(valid_402657703, JString,
                                      required = false, default = nil)
  if valid_402657703 != nil:
    section.add "X-Amz-Algorithm", valid_402657703
  var valid_402657704 = header.getOrDefault("X-Amz-Date")
  valid_402657704 = validateParameter(valid_402657704, JString,
                                      required = false, default = nil)
  if valid_402657704 != nil:
    section.add "X-Amz-Date", valid_402657704
  var valid_402657705 = header.getOrDefault("X-Amz-Credential")
  valid_402657705 = validateParameter(valid_402657705, JString,
                                      required = false, default = nil)
  if valid_402657705 != nil:
    section.add "X-Amz-Credential", valid_402657705
  var valid_402657706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657706 = validateParameter(valid_402657706, JString,
                                      required = false, default = nil)
  if valid_402657706 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657706
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657708: Call_UpdateMethodResponse_402657693;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates an existing <a>MethodResponse</a> resource.
                                                                                         ## 
  let valid = call_402657708.validator(path, query, header, formData, body, _)
  let scheme = call_402657708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657708.makeUrl(scheme.get, call_402657708.host, call_402657708.base,
                                   call_402657708.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657708, uri, valid, _)

proc call*(call_402657709: Call_UpdateMethodResponse_402657693;
           resourceId: string; statusCode: string; restapiId: string;
           body: JsonNode; httpMethod: string): Recallable =
  ## updateMethodResponse
  ## Updates an existing <a>MethodResponse</a> resource.
  ##   resourceId: string (required)
                                                        ##             : [Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.
  ##   
                                                                                                                                                          ## statusCode: string (required)
                                                                                                                                                          ##             
                                                                                                                                                          ## : 
                                                                                                                                                          ## The 
                                                                                                                                                          ## status 
                                                                                                                                                          ## code.
  ##   
                                                                                                                                                                  ## restapiId: string (required)
                                                                                                                                                                  ##            
                                                                                                                                                                  ## : 
                                                                                                                                                                  ## [Required] 
                                                                                                                                                                  ## The 
                                                                                                                                                                  ## string 
                                                                                                                                                                  ## identifier 
                                                                                                                                                                  ## of 
                                                                                                                                                                  ## the 
                                                                                                                                                                  ## associated 
                                                                                                                                                                  ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                    ## body: JObject (required)
  ##   
                                                                                                                                                                                                               ## httpMethod: string (required)
                                                                                                                                                                                                               ##             
                                                                                                                                                                                                               ## : 
                                                                                                                                                                                                               ## [Required] 
                                                                                                                                                                                                               ## The 
                                                                                                                                                                                                               ## HTTP 
                                                                                                                                                                                                               ## verb 
                                                                                                                                                                                                               ## of 
                                                                                                                                                                                                               ## the 
                                                                                                                                                                                                               ## <a>Method</a> 
                                                                                                                                                                                                               ## resource.
  var path_402657710 = newJObject()
  var body_402657711 = newJObject()
  add(path_402657710, "resource_id", newJString(resourceId))
  add(path_402657710, "status_code", newJString(statusCode))
  add(path_402657710, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657711 = body
  add(path_402657710, "http_method", newJString(httpMethod))
  result = call_402657709.call(path_402657710, nil, nil, nil, body_402657711)

var updateMethodResponse* = Call_UpdateMethodResponse_402657693(
    name: "updateMethodResponse", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
    validator: validate_UpdateMethodResponse_402657694, base: "/",
    makeUrl: url_UpdateMethodResponse_402657695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteMethodResponse_402657676 = ref object of OpenApiRestCall_402656035
proc url_DeleteMethodResponse_402657678(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  assert "http_method" in path, "`http_method` is a required path parameter"
  assert "status_code" in path, "`status_code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id"),
                 (kind: ConstantSegment, value: "/methods/"),
                 (kind: VariableSegment, value: "http_method"),
                 (kind: ConstantSegment, value: "/responses/"),
                 (kind: VariableSegment, value: "status_code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteMethodResponse_402657677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an existing <a>MethodResponse</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.
  ##   
                                                                                                                                    ## status_code: JString (required)
                                                                                                                                    ##              
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## status 
                                                                                                                                    ## code.
  ##   
                                                                                                                                            ## restapi_id: JString (required)
                                                                                                                                            ##             
                                                                                                                                            ## : 
                                                                                                                                            ## [Required] 
                                                                                                                                            ## The 
                                                                                                                                            ## string 
                                                                                                                                            ## identifier 
                                                                                                                                            ## of 
                                                                                                                                            ## the 
                                                                                                                                            ## associated 
                                                                                                                                            ## <a>RestApi</a>.
  ##   
                                                                                                                                                              ## http_method: JString (required)
                                                                                                                                                              ##              
                                                                                                                                                              ## : 
                                                                                                                                                              ## [Required] 
                                                                                                                                                              ## The 
                                                                                                                                                              ## HTTP 
                                                                                                                                                              ## verb 
                                                                                                                                                              ## of 
                                                                                                                                                              ## the 
                                                                                                                                                              ## <a>Method</a> 
                                                                                                                                                              ## resource.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657679 = path.getOrDefault("resource_id")
  valid_402657679 = validateParameter(valid_402657679, JString, required = true,
                                      default = nil)
  if valid_402657679 != nil:
    section.add "resource_id", valid_402657679
  var valid_402657680 = path.getOrDefault("status_code")
  valid_402657680 = validateParameter(valid_402657680, JString, required = true,
                                      default = nil)
  if valid_402657680 != nil:
    section.add "status_code", valid_402657680
  var valid_402657681 = path.getOrDefault("restapi_id")
  valid_402657681 = validateParameter(valid_402657681, JString, required = true,
                                      default = nil)
  if valid_402657681 != nil:
    section.add "restapi_id", valid_402657681
  var valid_402657682 = path.getOrDefault("http_method")
  valid_402657682 = validateParameter(valid_402657682, JString, required = true,
                                      default = nil)
  if valid_402657682 != nil:
    section.add "http_method", valid_402657682
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657683 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657683 = validateParameter(valid_402657683, JString,
                                      required = false, default = nil)
  if valid_402657683 != nil:
    section.add "X-Amz-Security-Token", valid_402657683
  var valid_402657684 = header.getOrDefault("X-Amz-Signature")
  valid_402657684 = validateParameter(valid_402657684, JString,
                                      required = false, default = nil)
  if valid_402657684 != nil:
    section.add "X-Amz-Signature", valid_402657684
  var valid_402657685 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657685 = validateParameter(valid_402657685, JString,
                                      required = false, default = nil)
  if valid_402657685 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657685
  var valid_402657686 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657686 = validateParameter(valid_402657686, JString,
                                      required = false, default = nil)
  if valid_402657686 != nil:
    section.add "X-Amz-Algorithm", valid_402657686
  var valid_402657687 = header.getOrDefault("X-Amz-Date")
  valid_402657687 = validateParameter(valid_402657687, JString,
                                      required = false, default = nil)
  if valid_402657687 != nil:
    section.add "X-Amz-Date", valid_402657687
  var valid_402657688 = header.getOrDefault("X-Amz-Credential")
  valid_402657688 = validateParameter(valid_402657688, JString,
                                      required = false, default = nil)
  if valid_402657688 != nil:
    section.add "X-Amz-Credential", valid_402657688
  var valid_402657689 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657689 = validateParameter(valid_402657689, JString,
                                      required = false, default = nil)
  if valid_402657689 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657689
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657690: Call_DeleteMethodResponse_402657676;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an existing <a>MethodResponse</a> resource.
                                                                                         ## 
  let valid = call_402657690.validator(path, query, header, formData, body, _)
  let scheme = call_402657690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657690.makeUrl(scheme.get, call_402657690.host, call_402657690.base,
                                   call_402657690.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657690, uri, valid, _)

proc call*(call_402657691: Call_DeleteMethodResponse_402657676;
           resourceId: string; statusCode: string; restapiId: string;
           httpMethod: string): Recallable =
  ## deleteMethodResponse
  ## Deletes an existing <a>MethodResponse</a> resource.
  ##   resourceId: string (required)
                                                        ##             : [Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.
  ##   
                                                                                                                                                          ## statusCode: string (required)
                                                                                                                                                          ##             
                                                                                                                                                          ## : 
                                                                                                                                                          ## The 
                                                                                                                                                          ## status 
                                                                                                                                                          ## code.
  ##   
                                                                                                                                                                  ## restapiId: string (required)
                                                                                                                                                                  ##            
                                                                                                                                                                  ## : 
                                                                                                                                                                  ## [Required] 
                                                                                                                                                                  ## The 
                                                                                                                                                                  ## string 
                                                                                                                                                                  ## identifier 
                                                                                                                                                                  ## of 
                                                                                                                                                                  ## the 
                                                                                                                                                                  ## associated 
                                                                                                                                                                  ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                    ## httpMethod: string (required)
                                                                                                                                                                                    ##             
                                                                                                                                                                                    ## : 
                                                                                                                                                                                    ## [Required] 
                                                                                                                                                                                    ## The 
                                                                                                                                                                                    ## HTTP 
                                                                                                                                                                                    ## verb 
                                                                                                                                                                                    ## of 
                                                                                                                                                                                    ## the 
                                                                                                                                                                                    ## <a>Method</a> 
                                                                                                                                                                                    ## resource.
  var path_402657692 = newJObject()
  add(path_402657692, "resource_id", newJString(resourceId))
  add(path_402657692, "status_code", newJString(statusCode))
  add(path_402657692, "restapi_id", newJString(restapiId))
  add(path_402657692, "http_method", newJString(httpMethod))
  result = call_402657691.call(path_402657692, nil, nil, nil, nil)

var deleteMethodResponse* = Call_DeleteMethodResponse_402657676(
    name: "deleteMethodResponse", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
    validator: validate_DeleteMethodResponse_402657677, base: "/",
    makeUrl: url_DeleteMethodResponse_402657678,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModel_402657712 = ref object of OpenApiRestCall_402656035
proc url_GetModel_402657714(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "model_name" in path, "`model_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/models/"),
                 (kind: VariableSegment, value: "model_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetModel_402657713(path: JsonNode; query: JsonNode;
                                 header: JsonNode; formData: JsonNode;
                                 body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes an existing model defined for a <a>RestApi</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The <a>RestApi</a> identifier under which the <a>Model</a> exists.
  ##   
                                                                                                                               ## model_name: JString (required)
                                                                                                                               ##             
                                                                                                                               ## : 
                                                                                                                               ## [Required] 
                                                                                                                               ## The 
                                                                                                                               ## name 
                                                                                                                               ## of 
                                                                                                                               ## the 
                                                                                                                               ## model 
                                                                                                                               ## as 
                                                                                                                               ## an 
                                                                                                                               ## identifier.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657715 = path.getOrDefault("restapi_id")
  valid_402657715 = validateParameter(valid_402657715, JString, required = true,
                                      default = nil)
  if valid_402657715 != nil:
    section.add "restapi_id", valid_402657715
  var valid_402657716 = path.getOrDefault("model_name")
  valid_402657716 = validateParameter(valid_402657716, JString, required = true,
                                      default = nil)
  if valid_402657716 != nil:
    section.add "model_name", valid_402657716
  result.add "path", section
  ## parameters in `query` object:
  ##   flatten: JBool
                                  ##          : A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.
  section = newJObject()
  var valid_402657717 = query.getOrDefault("flatten")
  valid_402657717 = validateParameter(valid_402657717, JBool, required = false,
                                      default = nil)
  if valid_402657717 != nil:
    section.add "flatten", valid_402657717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657718 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657718 = validateParameter(valid_402657718, JString,
                                      required = false, default = nil)
  if valid_402657718 != nil:
    section.add "X-Amz-Security-Token", valid_402657718
  var valid_402657719 = header.getOrDefault("X-Amz-Signature")
  valid_402657719 = validateParameter(valid_402657719, JString,
                                      required = false, default = nil)
  if valid_402657719 != nil:
    section.add "X-Amz-Signature", valid_402657719
  var valid_402657720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657720 = validateParameter(valid_402657720, JString,
                                      required = false, default = nil)
  if valid_402657720 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657720
  var valid_402657721 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657721 = validateParameter(valid_402657721, JString,
                                      required = false, default = nil)
  if valid_402657721 != nil:
    section.add "X-Amz-Algorithm", valid_402657721
  var valid_402657722 = header.getOrDefault("X-Amz-Date")
  valid_402657722 = validateParameter(valid_402657722, JString,
                                      required = false, default = nil)
  if valid_402657722 != nil:
    section.add "X-Amz-Date", valid_402657722
  var valid_402657723 = header.getOrDefault("X-Amz-Credential")
  valid_402657723 = validateParameter(valid_402657723, JString,
                                      required = false, default = nil)
  if valid_402657723 != nil:
    section.add "X-Amz-Credential", valid_402657723
  var valid_402657724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657724 = validateParameter(valid_402657724, JString,
                                      required = false, default = nil)
  if valid_402657724 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657724
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657725: Call_GetModel_402657712; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes an existing model defined for a <a>RestApi</a> resource.
                                                                                         ## 
  let valid = call_402657725.validator(path, query, header, formData, body, _)
  let scheme = call_402657725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657725.makeUrl(scheme.get, call_402657725.host, call_402657725.base,
                                   call_402657725.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657725, uri, valid, _)

proc call*(call_402657726: Call_GetModel_402657712; restapiId: string;
           modelName: string; flatten: bool = false): Recallable =
  ## getModel
  ## Describes an existing model defined for a <a>RestApi</a> resource.
  ##   
                                                                       ## restapiId: string (required)
                                                                       ##            
                                                                       ## : 
                                                                       ## [Required] The 
                                                                       ## <a>RestApi</a> 
                                                                       ## identifier 
                                                                       ## under 
                                                                       ## which 
                                                                       ## the 
                                                                       ## <a>Model</a> 
                                                                       ## exists.
  ##   
                                                                                 ## flatten: bool
                                                                                 ##          
                                                                                 ## : 
                                                                                 ## A 
                                                                                 ## query 
                                                                                 ## parameter 
                                                                                 ## of 
                                                                                 ## a 
                                                                                 ## Boolean 
                                                                                 ## value 
                                                                                 ## to 
                                                                                 ## resolve 
                                                                                 ## (<code>true</code>) 
                                                                                 ## all 
                                                                                 ## external 
                                                                                 ## model 
                                                                                 ## references 
                                                                                 ## and 
                                                                                 ## returns 
                                                                                 ## a 
                                                                                 ## flattened 
                                                                                 ## model 
                                                                                 ## schema 
                                                                                 ## or 
                                                                                 ## not 
                                                                                 ## (<code>false</code>) 
                                                                                 ## The 
                                                                                 ## default 
                                                                                 ## is 
                                                                                 ## <code>false</code>.
  ##   
                                                                                                       ## modelName: string (required)
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## [Required] 
                                                                                                       ## The 
                                                                                                       ## name 
                                                                                                       ## of 
                                                                                                       ## the 
                                                                                                       ## model 
                                                                                                       ## as 
                                                                                                       ## an 
                                                                                                       ## identifier.
  var path_402657727 = newJObject()
  var query_402657728 = newJObject()
  add(path_402657727, "restapi_id", newJString(restapiId))
  add(query_402657728, "flatten", newJBool(flatten))
  add(path_402657727, "model_name", newJString(modelName))
  result = call_402657726.call(path_402657727, query_402657728, nil, nil, nil)

var getModel* = Call_GetModel_402657712(name: "getModel",
                                        meth: HttpMethod.HttpGet,
                                        host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/models/{model_name}",
                                        validator: validate_GetModel_402657713,
                                        base: "/", makeUrl: url_GetModel_402657714,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateModel_402657744 = ref object of OpenApiRestCall_402656035
proc url_UpdateModel_402657746(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "model_name" in path, "`model_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/models/"),
                 (kind: VariableSegment, value: "model_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateModel_402657745(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about a model.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## model_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## model 
                                                                                                                    ## to 
                                                                                                                    ## update.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657747 = path.getOrDefault("restapi_id")
  valid_402657747 = validateParameter(valid_402657747, JString, required = true,
                                      default = nil)
  if valid_402657747 != nil:
    section.add "restapi_id", valid_402657747
  var valid_402657748 = path.getOrDefault("model_name")
  valid_402657748 = validateParameter(valid_402657748, JString, required = true,
                                      default = nil)
  if valid_402657748 != nil:
    section.add "model_name", valid_402657748
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657749 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657749 = validateParameter(valid_402657749, JString,
                                      required = false, default = nil)
  if valid_402657749 != nil:
    section.add "X-Amz-Security-Token", valid_402657749
  var valid_402657750 = header.getOrDefault("X-Amz-Signature")
  valid_402657750 = validateParameter(valid_402657750, JString,
                                      required = false, default = nil)
  if valid_402657750 != nil:
    section.add "X-Amz-Signature", valid_402657750
  var valid_402657751 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657751 = validateParameter(valid_402657751, JString,
                                      required = false, default = nil)
  if valid_402657751 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657751
  var valid_402657752 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657752 = validateParameter(valid_402657752, JString,
                                      required = false, default = nil)
  if valid_402657752 != nil:
    section.add "X-Amz-Algorithm", valid_402657752
  var valid_402657753 = header.getOrDefault("X-Amz-Date")
  valid_402657753 = validateParameter(valid_402657753, JString,
                                      required = false, default = nil)
  if valid_402657753 != nil:
    section.add "X-Amz-Date", valid_402657753
  var valid_402657754 = header.getOrDefault("X-Amz-Credential")
  valid_402657754 = validateParameter(valid_402657754, JString,
                                      required = false, default = nil)
  if valid_402657754 != nil:
    section.add "X-Amz-Credential", valid_402657754
  var valid_402657755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657755 = validateParameter(valid_402657755, JString,
                                      required = false, default = nil)
  if valid_402657755 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657755
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657757: Call_UpdateModel_402657744; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about a model.
                                                                                         ## 
  let valid = call_402657757.validator(path, query, header, formData, body, _)
  let scheme = call_402657757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657757.makeUrl(scheme.get, call_402657757.host, call_402657757.base,
                                   call_402657757.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657757, uri, valid, _)

proc call*(call_402657758: Call_UpdateModel_402657744; restapiId: string;
           body: JsonNode; modelName: string): Recallable =
  ## updateModel
  ## Changes information about a model.
  ##   restapiId: string (required)
                                       ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                         ## body: JObject (required)
  ##   
                                                                                                                                                    ## modelName: string (required)
                                                                                                                                                    ##            
                                                                                                                                                    ## : 
                                                                                                                                                    ## [Required] 
                                                                                                                                                    ## The 
                                                                                                                                                    ## name 
                                                                                                                                                    ## of 
                                                                                                                                                    ## the 
                                                                                                                                                    ## model 
                                                                                                                                                    ## to 
                                                                                                                                                    ## update.
  var path_402657759 = newJObject()
  var body_402657760 = newJObject()
  add(path_402657759, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657760 = body
  add(path_402657759, "model_name", newJString(modelName))
  result = call_402657758.call(path_402657759, nil, nil, nil, body_402657760)

var updateModel* = Call_UpdateModel_402657744(name: "updateModel",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/models/{model_name}",
    validator: validate_UpdateModel_402657745, base: "/",
    makeUrl: url_UpdateModel_402657746, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteModel_402657729 = ref object of OpenApiRestCall_402656035
proc url_DeleteModel_402657731(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "model_name" in path, "`model_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/models/"),
                 (kind: VariableSegment, value: "model_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteModel_402657730(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a model.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## model_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## model 
                                                                                                                    ## to 
                                                                                                                    ## delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657732 = path.getOrDefault("restapi_id")
  valid_402657732 = validateParameter(valid_402657732, JString, required = true,
                                      default = nil)
  if valid_402657732 != nil:
    section.add "restapi_id", valid_402657732
  var valid_402657733 = path.getOrDefault("model_name")
  valid_402657733 = validateParameter(valid_402657733, JString, required = true,
                                      default = nil)
  if valid_402657733 != nil:
    section.add "model_name", valid_402657733
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657734 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657734 = validateParameter(valid_402657734, JString,
                                      required = false, default = nil)
  if valid_402657734 != nil:
    section.add "X-Amz-Security-Token", valid_402657734
  var valid_402657735 = header.getOrDefault("X-Amz-Signature")
  valid_402657735 = validateParameter(valid_402657735, JString,
                                      required = false, default = nil)
  if valid_402657735 != nil:
    section.add "X-Amz-Signature", valid_402657735
  var valid_402657736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657736 = validateParameter(valid_402657736, JString,
                                      required = false, default = nil)
  if valid_402657736 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657736
  var valid_402657737 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657737 = validateParameter(valid_402657737, JString,
                                      required = false, default = nil)
  if valid_402657737 != nil:
    section.add "X-Amz-Algorithm", valid_402657737
  var valid_402657738 = header.getOrDefault("X-Amz-Date")
  valid_402657738 = validateParameter(valid_402657738, JString,
                                      required = false, default = nil)
  if valid_402657738 != nil:
    section.add "X-Amz-Date", valid_402657738
  var valid_402657739 = header.getOrDefault("X-Amz-Credential")
  valid_402657739 = validateParameter(valid_402657739, JString,
                                      required = false, default = nil)
  if valid_402657739 != nil:
    section.add "X-Amz-Credential", valid_402657739
  var valid_402657740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657740 = validateParameter(valid_402657740, JString,
                                      required = false, default = nil)
  if valid_402657740 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657741: Call_DeleteModel_402657729; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a model.
                                                                                         ## 
  let valid = call_402657741.validator(path, query, header, formData, body, _)
  let scheme = call_402657741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657741.makeUrl(scheme.get, call_402657741.host, call_402657741.base,
                                   call_402657741.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657741, uri, valid, _)

proc call*(call_402657742: Call_DeleteModel_402657729; restapiId: string;
           modelName: string): Recallable =
  ## deleteModel
  ## Deletes a model.
  ##   restapiId: string (required)
                     ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                       ## modelName: string (required)
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## [Required] 
                                                                                                       ## The 
                                                                                                       ## name 
                                                                                                       ## of 
                                                                                                       ## the 
                                                                                                       ## model 
                                                                                                       ## to 
                                                                                                       ## delete.
  var path_402657743 = newJObject()
  add(path_402657743, "restapi_id", newJString(restapiId))
  add(path_402657743, "model_name", newJString(modelName))
  result = call_402657742.call(path_402657743, nil, nil, nil, nil)

var deleteModel* = Call_DeleteModel_402657729(name: "deleteModel",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/models/{model_name}",
    validator: validate_DeleteModel_402657730, base: "/",
    makeUrl: url_DeleteModel_402657731, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRequestValidator_402657761 = ref object of OpenApiRestCall_402656035
proc url_GetRequestValidator_402657763(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "requestvalidator_id" in path,
         "`requestvalidator_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/requestvalidators/"),
                 (kind: VariableSegment, value: "requestvalidator_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetRequestValidator_402657762(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a <a>RequestValidator</a> of a given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## requestvalidator_id: JString (required)
                                                                                                                    ##                      
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>RequestValidator</a> 
                                                                                                                    ## to 
                                                                                                                    ## be 
                                                                                                                    ## retrieved.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657764 = path.getOrDefault("restapi_id")
  valid_402657764 = validateParameter(valid_402657764, JString, required = true,
                                      default = nil)
  if valid_402657764 != nil:
    section.add "restapi_id", valid_402657764
  var valid_402657765 = path.getOrDefault("requestvalidator_id")
  valid_402657765 = validateParameter(valid_402657765, JString, required = true,
                                      default = nil)
  if valid_402657765 != nil:
    section.add "requestvalidator_id", valid_402657765
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657766 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657766 = validateParameter(valid_402657766, JString,
                                      required = false, default = nil)
  if valid_402657766 != nil:
    section.add "X-Amz-Security-Token", valid_402657766
  var valid_402657767 = header.getOrDefault("X-Amz-Signature")
  valid_402657767 = validateParameter(valid_402657767, JString,
                                      required = false, default = nil)
  if valid_402657767 != nil:
    section.add "X-Amz-Signature", valid_402657767
  var valid_402657768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657768 = validateParameter(valid_402657768, JString,
                                      required = false, default = nil)
  if valid_402657768 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657768
  var valid_402657769 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657769 = validateParameter(valid_402657769, JString,
                                      required = false, default = nil)
  if valid_402657769 != nil:
    section.add "X-Amz-Algorithm", valid_402657769
  var valid_402657770 = header.getOrDefault("X-Amz-Date")
  valid_402657770 = validateParameter(valid_402657770, JString,
                                      required = false, default = nil)
  if valid_402657770 != nil:
    section.add "X-Amz-Date", valid_402657770
  var valid_402657771 = header.getOrDefault("X-Amz-Credential")
  valid_402657771 = validateParameter(valid_402657771, JString,
                                      required = false, default = nil)
  if valid_402657771 != nil:
    section.add "X-Amz-Credential", valid_402657771
  var valid_402657772 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657772 = validateParameter(valid_402657772, JString,
                                      required = false, default = nil)
  if valid_402657772 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657772
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657773: Call_GetRequestValidator_402657761;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a <a>RequestValidator</a> of a given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402657773.validator(path, query, header, formData, body, _)
  let scheme = call_402657773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657773.makeUrl(scheme.get, call_402657773.host, call_402657773.base,
                                   call_402657773.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657773, uri, valid, _)

proc call*(call_402657774: Call_GetRequestValidator_402657761;
           restapiId: string; requestvalidatorId: string): Recallable =
  ## getRequestValidator
  ## Gets a <a>RequestValidator</a> of a given <a>RestApi</a>.
  ##   restapiId: string (required)
                                                              ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                                ## requestvalidatorId: string (required)
                                                                                                                                                ##                     
                                                                                                                                                ## : 
                                                                                                                                                ## [Required] 
                                                                                                                                                ## The 
                                                                                                                                                ## identifier 
                                                                                                                                                ## of 
                                                                                                                                                ## the 
                                                                                                                                                ## <a>RequestValidator</a> 
                                                                                                                                                ## to 
                                                                                                                                                ## be 
                                                                                                                                                ## retrieved.
  var path_402657775 = newJObject()
  add(path_402657775, "restapi_id", newJString(restapiId))
  add(path_402657775, "requestvalidator_id", newJString(requestvalidatorId))
  result = call_402657774.call(path_402657775, nil, nil, nil, nil)

var getRequestValidator* = Call_GetRequestValidator_402657761(
    name: "getRequestValidator", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}",
    validator: validate_GetRequestValidator_402657762, base: "/",
    makeUrl: url_GetRequestValidator_402657763,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRequestValidator_402657791 = ref object of OpenApiRestCall_402656035
proc url_UpdateRequestValidator_402657793(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "requestvalidator_id" in path,
         "`requestvalidator_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/requestvalidators/"),
                 (kind: VariableSegment, value: "requestvalidator_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateRequestValidator_402657792(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a <a>RequestValidator</a> of a given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## requestvalidator_id: JString (required)
                                                                                                                    ##                      
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## <a>RequestValidator</a> 
                                                                                                                    ## to 
                                                                                                                    ## be 
                                                                                                                    ## updated.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657794 = path.getOrDefault("restapi_id")
  valid_402657794 = validateParameter(valid_402657794, JString, required = true,
                                      default = nil)
  if valid_402657794 != nil:
    section.add "restapi_id", valid_402657794
  var valid_402657795 = path.getOrDefault("requestvalidator_id")
  valid_402657795 = validateParameter(valid_402657795, JString, required = true,
                                      default = nil)
  if valid_402657795 != nil:
    section.add "requestvalidator_id", valid_402657795
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657796 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657796 = validateParameter(valid_402657796, JString,
                                      required = false, default = nil)
  if valid_402657796 != nil:
    section.add "X-Amz-Security-Token", valid_402657796
  var valid_402657797 = header.getOrDefault("X-Amz-Signature")
  valid_402657797 = validateParameter(valid_402657797, JString,
                                      required = false, default = nil)
  if valid_402657797 != nil:
    section.add "X-Amz-Signature", valid_402657797
  var valid_402657798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657798 = validateParameter(valid_402657798, JString,
                                      required = false, default = nil)
  if valid_402657798 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657798
  var valid_402657799 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657799 = validateParameter(valid_402657799, JString,
                                      required = false, default = nil)
  if valid_402657799 != nil:
    section.add "X-Amz-Algorithm", valid_402657799
  var valid_402657800 = header.getOrDefault("X-Amz-Date")
  valid_402657800 = validateParameter(valid_402657800, JString,
                                      required = false, default = nil)
  if valid_402657800 != nil:
    section.add "X-Amz-Date", valid_402657800
  var valid_402657801 = header.getOrDefault("X-Amz-Credential")
  valid_402657801 = validateParameter(valid_402657801, JString,
                                      required = false, default = nil)
  if valid_402657801 != nil:
    section.add "X-Amz-Credential", valid_402657801
  var valid_402657802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657802 = validateParameter(valid_402657802, JString,
                                      required = false, default = nil)
  if valid_402657802 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657802
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657804: Call_UpdateRequestValidator_402657791;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a <a>RequestValidator</a> of a given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402657804.validator(path, query, header, formData, body, _)
  let scheme = call_402657804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657804.makeUrl(scheme.get, call_402657804.host, call_402657804.base,
                                   call_402657804.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657804, uri, valid, _)

proc call*(call_402657805: Call_UpdateRequestValidator_402657791;
           restapiId: string; body: JsonNode; requestvalidatorId: string): Recallable =
  ## updateRequestValidator
  ## Updates a <a>RequestValidator</a> of a given <a>RestApi</a>.
  ##   restapiId: string (required)
                                                                 ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                                   ## body: JObject (required)
  ##   
                                                                                                                                                                              ## requestvalidatorId: string (required)
                                                                                                                                                                              ##                     
                                                                                                                                                                              ## : 
                                                                                                                                                                              ## [Required] 
                                                                                                                                                                              ## The 
                                                                                                                                                                              ## identifier 
                                                                                                                                                                              ## of 
                                                                                                                                                                              ## <a>RequestValidator</a> 
                                                                                                                                                                              ## to 
                                                                                                                                                                              ## be 
                                                                                                                                                                              ## updated.
  var path_402657806 = newJObject()
  var body_402657807 = newJObject()
  add(path_402657806, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657807 = body
  add(path_402657806, "requestvalidator_id", newJString(requestvalidatorId))
  result = call_402657805.call(path_402657806, nil, nil, nil, body_402657807)

var updateRequestValidator* = Call_UpdateRequestValidator_402657791(
    name: "updateRequestValidator", meth: HttpMethod.HttpPatch,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}",
    validator: validate_UpdateRequestValidator_402657792, base: "/",
    makeUrl: url_UpdateRequestValidator_402657793,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRequestValidator_402657776 = ref object of OpenApiRestCall_402656035
proc url_DeleteRequestValidator_402657778(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "requestvalidator_id" in path,
         "`requestvalidator_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/requestvalidators/"),
                 (kind: VariableSegment, value: "requestvalidator_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteRequestValidator_402657777(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a <a>RequestValidator</a> of a given <a>RestApi</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## requestvalidator_id: JString (required)
                                                                                                                    ##                      
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## identifier 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>RequestValidator</a> 
                                                                                                                    ## to 
                                                                                                                    ## be 
                                                                                                                    ## deleted.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657779 = path.getOrDefault("restapi_id")
  valid_402657779 = validateParameter(valid_402657779, JString, required = true,
                                      default = nil)
  if valid_402657779 != nil:
    section.add "restapi_id", valid_402657779
  var valid_402657780 = path.getOrDefault("requestvalidator_id")
  valid_402657780 = validateParameter(valid_402657780, JString, required = true,
                                      default = nil)
  if valid_402657780 != nil:
    section.add "requestvalidator_id", valid_402657780
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657781 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657781 = validateParameter(valid_402657781, JString,
                                      required = false, default = nil)
  if valid_402657781 != nil:
    section.add "X-Amz-Security-Token", valid_402657781
  var valid_402657782 = header.getOrDefault("X-Amz-Signature")
  valid_402657782 = validateParameter(valid_402657782, JString,
                                      required = false, default = nil)
  if valid_402657782 != nil:
    section.add "X-Amz-Signature", valid_402657782
  var valid_402657783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657783 = validateParameter(valid_402657783, JString,
                                      required = false, default = nil)
  if valid_402657783 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657783
  var valid_402657784 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657784 = validateParameter(valid_402657784, JString,
                                      required = false, default = nil)
  if valid_402657784 != nil:
    section.add "X-Amz-Algorithm", valid_402657784
  var valid_402657785 = header.getOrDefault("X-Amz-Date")
  valid_402657785 = validateParameter(valid_402657785, JString,
                                      required = false, default = nil)
  if valid_402657785 != nil:
    section.add "X-Amz-Date", valid_402657785
  var valid_402657786 = header.getOrDefault("X-Amz-Credential")
  valid_402657786 = validateParameter(valid_402657786, JString,
                                      required = false, default = nil)
  if valid_402657786 != nil:
    section.add "X-Amz-Credential", valid_402657786
  var valid_402657787 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657787 = validateParameter(valid_402657787, JString,
                                      required = false, default = nil)
  if valid_402657787 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657787
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657788: Call_DeleteRequestValidator_402657776;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a <a>RequestValidator</a> of a given <a>RestApi</a>.
                                                                                         ## 
  let valid = call_402657788.validator(path, query, header, formData, body, _)
  let scheme = call_402657788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657788.makeUrl(scheme.get, call_402657788.host, call_402657788.base,
                                   call_402657788.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657788, uri, valid, _)

proc call*(call_402657789: Call_DeleteRequestValidator_402657776;
           restapiId: string; requestvalidatorId: string): Recallable =
  ## deleteRequestValidator
  ## Deletes a <a>RequestValidator</a> of a given <a>RestApi</a>.
  ##   restapiId: string (required)
                                                                 ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                                   ## requestvalidatorId: string (required)
                                                                                                                                                   ##                     
                                                                                                                                                   ## : 
                                                                                                                                                   ## [Required] 
                                                                                                                                                   ## The 
                                                                                                                                                   ## identifier 
                                                                                                                                                   ## of 
                                                                                                                                                   ## the 
                                                                                                                                                   ## <a>RequestValidator</a> 
                                                                                                                                                   ## to 
                                                                                                                                                   ## be 
                                                                                                                                                   ## deleted.
  var path_402657790 = newJObject()
  add(path_402657790, "restapi_id", newJString(restapiId))
  add(path_402657790, "requestvalidator_id", newJString(requestvalidatorId))
  result = call_402657789.call(path_402657790, nil, nil, nil, nil)

var deleteRequestValidator* = Call_DeleteRequestValidator_402657776(
    name: "deleteRequestValidator", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}",
    validator: validate_DeleteRequestValidator_402657777, base: "/",
    makeUrl: url_DeleteRequestValidator_402657778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResource_402657808 = ref object of OpenApiRestCall_402656035
proc url_GetResource_402657810(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetResource_402657809(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists information about a resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The identifier for the <a>Resource</a> resource.
  ##   
                                                                                                              ## restapi_id: JString (required)
                                                                                                              ##             
                                                                                                              ## : 
                                                                                                              ## [Required] 
                                                                                                              ## The 
                                                                                                              ## string 
                                                                                                              ## identifier 
                                                                                                              ## of 
                                                                                                              ## the 
                                                                                                              ## associated 
                                                                                                              ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657811 = path.getOrDefault("resource_id")
  valid_402657811 = validateParameter(valid_402657811, JString, required = true,
                                      default = nil)
  if valid_402657811 != nil:
    section.add "resource_id", valid_402657811
  var valid_402657812 = path.getOrDefault("restapi_id")
  valid_402657812 = validateParameter(valid_402657812, JString, required = true,
                                      default = nil)
  if valid_402657812 != nil:
    section.add "restapi_id", valid_402657812
  result.add "path", section
  ## parameters in `query` object:
  ##   embed: JArray
                                  ##        : A query parameter to retrieve the specified resources embedded in the returned <a>Resource</a> representation in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded <a>Method</a> resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET 
                                  ## /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.
  section = newJObject()
  var valid_402657813 = query.getOrDefault("embed")
  valid_402657813 = validateParameter(valid_402657813, JArray, required = false,
                                      default = nil)
  if valid_402657813 != nil:
    section.add "embed", valid_402657813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657814 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657814 = validateParameter(valid_402657814, JString,
                                      required = false, default = nil)
  if valid_402657814 != nil:
    section.add "X-Amz-Security-Token", valid_402657814
  var valid_402657815 = header.getOrDefault("X-Amz-Signature")
  valid_402657815 = validateParameter(valid_402657815, JString,
                                      required = false, default = nil)
  if valid_402657815 != nil:
    section.add "X-Amz-Signature", valid_402657815
  var valid_402657816 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657816 = validateParameter(valid_402657816, JString,
                                      required = false, default = nil)
  if valid_402657816 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657816
  var valid_402657817 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657817 = validateParameter(valid_402657817, JString,
                                      required = false, default = nil)
  if valid_402657817 != nil:
    section.add "X-Amz-Algorithm", valid_402657817
  var valid_402657818 = header.getOrDefault("X-Amz-Date")
  valid_402657818 = validateParameter(valid_402657818, JString,
                                      required = false, default = nil)
  if valid_402657818 != nil:
    section.add "X-Amz-Date", valid_402657818
  var valid_402657819 = header.getOrDefault("X-Amz-Credential")
  valid_402657819 = validateParameter(valid_402657819, JString,
                                      required = false, default = nil)
  if valid_402657819 != nil:
    section.add "X-Amz-Credential", valid_402657819
  var valid_402657820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657820 = validateParameter(valid_402657820, JString,
                                      required = false, default = nil)
  if valid_402657820 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657820
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657821: Call_GetResource_402657808; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists information about a resource.
                                                                                         ## 
  let valid = call_402657821.validator(path, query, header, formData, body, _)
  let scheme = call_402657821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657821.makeUrl(scheme.get, call_402657821.host, call_402657821.base,
                                   call_402657821.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657821, uri, valid, _)

proc call*(call_402657822: Call_GetResource_402657808; resourceId: string;
           restapiId: string; embed: JsonNode = nil): Recallable =
  ## getResource
  ## Lists information about a resource.
  ##   resourceId: string (required)
                                        ##             : [Required] The identifier for the <a>Resource</a> resource.
  ##   
                                                                                                                    ## embed: JArray
                                                                                                                    ##        
                                                                                                                    ## : 
                                                                                                                    ## A 
                                                                                                                    ## query 
                                                                                                                    ## parameter 
                                                                                                                    ## to 
                                                                                                                    ## retrieve 
                                                                                                                    ## the 
                                                                                                                    ## specified 
                                                                                                                    ## resources 
                                                                                                                    ## embedded 
                                                                                                                    ## in 
                                                                                                                    ## the 
                                                                                                                    ## returned 
                                                                                                                    ## <a>Resource</a> 
                                                                                                                    ## representation 
                                                                                                                    ## in 
                                                                                                                    ## the 
                                                                                                                    ## response. 
                                                                                                                    ## This 
                                                                                                                    ## <code>embed</code> 
                                                                                                                    ## parameter 
                                                                                                                    ## value 
                                                                                                                    ## is 
                                                                                                                    ## a 
                                                                                                                    ## list 
                                                                                                                    ## of 
                                                                                                                    ## comma-separated 
                                                                                                                    ## strings. 
                                                                                                                    ## Currently, 
                                                                                                                    ## the 
                                                                                                                    ## request 
                                                                                                                    ## supports 
                                                                                                                    ## only 
                                                                                                                    ## retrieval 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## embedded 
                                                                                                                    ## <a>Method</a> 
                                                                                                                    ## resources 
                                                                                                                    ## this 
                                                                                                                    ## way. 
                                                                                                                    ## The 
                                                                                                                    ## query 
                                                                                                                    ## parameter 
                                                                                                                    ## value 
                                                                                                                    ## must 
                                                                                                                    ## be 
                                                                                                                    ## a 
                                                                                                                    ## single-valued 
                                                                                                                    ## list 
                                                                                                                    ## and 
                                                                                                                    ## contain 
                                                                                                                    ## the 
                                                                                                                    ## <code>"methods"</code> 
                                                                                                                    ## string. 
                                                                                                                    ## For 
                                                                                                                    ## example, 
                                                                                                                    ## <code>GET 
                                                                                                                    ## /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.
  ##   
                                                                                                                                                                                           ## restapiId: string (required)
                                                                                                                                                                                           ##            
                                                                                                                                                                                           ## : 
                                                                                                                                                                                           ## [Required] 
                                                                                                                                                                                           ## The 
                                                                                                                                                                                           ## string 
                                                                                                                                                                                           ## identifier 
                                                                                                                                                                                           ## of 
                                                                                                                                                                                           ## the 
                                                                                                                                                                                           ## associated 
                                                                                                                                                                                           ## <a>RestApi</a>.
  var path_402657823 = newJObject()
  var query_402657824 = newJObject()
  add(path_402657823, "resource_id", newJString(resourceId))
  if embed != nil:
    query_402657824.add "embed", embed
  add(path_402657823, "restapi_id", newJString(restapiId))
  result = call_402657822.call(path_402657823, query_402657824, nil, nil, nil)

var getResource* = Call_GetResource_402657808(name: "getResource",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/resources/{resource_id}",
    validator: validate_GetResource_402657809, base: "/",
    makeUrl: url_GetResource_402657810, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateResource_402657840 = ref object of OpenApiRestCall_402656035
proc url_UpdateResource_402657842(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateResource_402657841(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about a <a>Resource</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The identifier of the <a>Resource</a> resource.
  ##   
                                                                                                             ## restapi_id: JString (required)
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## [Required] 
                                                                                                             ## The 
                                                                                                             ## string 
                                                                                                             ## identifier 
                                                                                                             ## of 
                                                                                                             ## the 
                                                                                                             ## associated 
                                                                                                             ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657843 = path.getOrDefault("resource_id")
  valid_402657843 = validateParameter(valid_402657843, JString, required = true,
                                      default = nil)
  if valid_402657843 != nil:
    section.add "resource_id", valid_402657843
  var valid_402657844 = path.getOrDefault("restapi_id")
  valid_402657844 = validateParameter(valid_402657844, JString, required = true,
                                      default = nil)
  if valid_402657844 != nil:
    section.add "restapi_id", valid_402657844
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657845 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657845 = validateParameter(valid_402657845, JString,
                                      required = false, default = nil)
  if valid_402657845 != nil:
    section.add "X-Amz-Security-Token", valid_402657845
  var valid_402657846 = header.getOrDefault("X-Amz-Signature")
  valid_402657846 = validateParameter(valid_402657846, JString,
                                      required = false, default = nil)
  if valid_402657846 != nil:
    section.add "X-Amz-Signature", valid_402657846
  var valid_402657847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657847 = validateParameter(valid_402657847, JString,
                                      required = false, default = nil)
  if valid_402657847 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657847
  var valid_402657848 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657848 = validateParameter(valid_402657848, JString,
                                      required = false, default = nil)
  if valid_402657848 != nil:
    section.add "X-Amz-Algorithm", valid_402657848
  var valid_402657849 = header.getOrDefault("X-Amz-Date")
  valid_402657849 = validateParameter(valid_402657849, JString,
                                      required = false, default = nil)
  if valid_402657849 != nil:
    section.add "X-Amz-Date", valid_402657849
  var valid_402657850 = header.getOrDefault("X-Amz-Credential")
  valid_402657850 = validateParameter(valid_402657850, JString,
                                      required = false, default = nil)
  if valid_402657850 != nil:
    section.add "X-Amz-Credential", valid_402657850
  var valid_402657851 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657851 = validateParameter(valid_402657851, JString,
                                      required = false, default = nil)
  if valid_402657851 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657851
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657853: Call_UpdateResource_402657840; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about a <a>Resource</a> resource.
                                                                                         ## 
  let valid = call_402657853.validator(path, query, header, formData, body, _)
  let scheme = call_402657853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657853.makeUrl(scheme.get, call_402657853.host, call_402657853.base,
                                   call_402657853.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657853, uri, valid, _)

proc call*(call_402657854: Call_UpdateResource_402657840; resourceId: string;
           restapiId: string; body: JsonNode): Recallable =
  ## updateResource
  ## Changes information about a <a>Resource</a> resource.
  ##   resourceId: string (required)
                                                          ##             : [Required] The identifier of the <a>Resource</a> resource.
  ##   
                                                                                                                                     ## restapiId: string (required)
                                                                                                                                     ##            
                                                                                                                                     ## : 
                                                                                                                                     ## [Required] 
                                                                                                                                     ## The 
                                                                                                                                     ## string 
                                                                                                                                     ## identifier 
                                                                                                                                     ## of 
                                                                                                                                     ## the 
                                                                                                                                     ## associated 
                                                                                                                                     ## <a>RestApi</a>.
  ##   
                                                                                                                                                       ## body: JObject (required)
  var path_402657855 = newJObject()
  var body_402657856 = newJObject()
  add(path_402657855, "resource_id", newJString(resourceId))
  add(path_402657855, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657856 = body
  result = call_402657854.call(path_402657855, nil, nil, nil, body_402657856)

var updateResource* = Call_UpdateResource_402657840(name: "updateResource",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/resources/{resource_id}",
    validator: validate_UpdateResource_402657841, base: "/",
    makeUrl: url_UpdateResource_402657842, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteResource_402657825 = ref object of OpenApiRestCall_402656035
proc url_DeleteResource_402657827(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "resource_id" in path, "`resource_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources/"),
                 (kind: VariableSegment, value: "resource_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteResource_402657826(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a <a>Resource</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_id: JString (required)
                                 ##              : [Required] The identifier of the <a>Resource</a> resource.
  ##   
                                                                                                             ## restapi_id: JString (required)
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## [Required] 
                                                                                                             ## The 
                                                                                                             ## string 
                                                                                                             ## identifier 
                                                                                                             ## of 
                                                                                                             ## the 
                                                                                                             ## associated 
                                                                                                             ## <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_id` field"
  var valid_402657828 = path.getOrDefault("resource_id")
  valid_402657828 = validateParameter(valid_402657828, JString, required = true,
                                      default = nil)
  if valid_402657828 != nil:
    section.add "resource_id", valid_402657828
  var valid_402657829 = path.getOrDefault("restapi_id")
  valid_402657829 = validateParameter(valid_402657829, JString, required = true,
                                      default = nil)
  if valid_402657829 != nil:
    section.add "restapi_id", valid_402657829
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657830 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657830 = validateParameter(valid_402657830, JString,
                                      required = false, default = nil)
  if valid_402657830 != nil:
    section.add "X-Amz-Security-Token", valid_402657830
  var valid_402657831 = header.getOrDefault("X-Amz-Signature")
  valid_402657831 = validateParameter(valid_402657831, JString,
                                      required = false, default = nil)
  if valid_402657831 != nil:
    section.add "X-Amz-Signature", valid_402657831
  var valid_402657832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657832 = validateParameter(valid_402657832, JString,
                                      required = false, default = nil)
  if valid_402657832 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657832
  var valid_402657833 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657833 = validateParameter(valid_402657833, JString,
                                      required = false, default = nil)
  if valid_402657833 != nil:
    section.add "X-Amz-Algorithm", valid_402657833
  var valid_402657834 = header.getOrDefault("X-Amz-Date")
  valid_402657834 = validateParameter(valid_402657834, JString,
                                      required = false, default = nil)
  if valid_402657834 != nil:
    section.add "X-Amz-Date", valid_402657834
  var valid_402657835 = header.getOrDefault("X-Amz-Credential")
  valid_402657835 = validateParameter(valid_402657835, JString,
                                      required = false, default = nil)
  if valid_402657835 != nil:
    section.add "X-Amz-Credential", valid_402657835
  var valid_402657836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657836 = validateParameter(valid_402657836, JString,
                                      required = false, default = nil)
  if valid_402657836 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657836
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657837: Call_DeleteResource_402657825; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a <a>Resource</a> resource.
                                                                                         ## 
  let valid = call_402657837.validator(path, query, header, formData, body, _)
  let scheme = call_402657837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657837.makeUrl(scheme.get, call_402657837.host, call_402657837.base,
                                   call_402657837.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657837, uri, valid, _)

proc call*(call_402657838: Call_DeleteResource_402657825; resourceId: string;
           restapiId: string): Recallable =
  ## deleteResource
  ## Deletes a <a>Resource</a> resource.
  ##   resourceId: string (required)
                                        ##             : [Required] The identifier of the <a>Resource</a> resource.
  ##   
                                                                                                                   ## restapiId: string (required)
                                                                                                                   ##            
                                                                                                                   ## : 
                                                                                                                   ## [Required] 
                                                                                                                   ## The 
                                                                                                                   ## string 
                                                                                                                   ## identifier 
                                                                                                                   ## of 
                                                                                                                   ## the 
                                                                                                                   ## associated 
                                                                                                                   ## <a>RestApi</a>.
  var path_402657839 = newJObject()
  add(path_402657839, "resource_id", newJString(resourceId))
  add(path_402657839, "restapi_id", newJString(restapiId))
  result = call_402657838.call(path_402657839, nil, nil, nil, nil)

var deleteResource* = Call_DeleteResource_402657825(name: "deleteResource",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/resources/{resource_id}",
    validator: validate_DeleteResource_402657826, base: "/",
    makeUrl: url_DeleteResource_402657827, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutRestApi_402657871 = ref object of OpenApiRestCall_402656035
proc url_PutRestApi_402657873(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutRestApi_402657872(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657874 = path.getOrDefault("restapi_id")
  valid_402657874 = validateParameter(valid_402657874, JString, required = true,
                                      default = nil)
  if valid_402657874 != nil:
    section.add "restapi_id", valid_402657874
  result.add "path", section
  ## parameters in `query` object:
  ##   failonwarnings: JBool
                                  ##                 : A query parameter to indicate whether to rollback the API update (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
  ##   
                                                                                                                                                                                                                                               ## parameters.2.value: JString
  ##   
                                                                                                                                                                                                                                                                             ## parameters.1.value: JString
  ##   
                                                                                                                                                                                                                                                                                                           ## mode: JString
                                                                                                                                                                                                                                                                                                           ##       
                                                                                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                                                                                                           ## <code>mode</code> 
                                                                                                                                                                                                                                                                                                           ## query 
                                                                                                                                                                                                                                                                                                           ## parameter 
                                                                                                                                                                                                                                                                                                           ## to 
                                                                                                                                                                                                                                                                                                           ## specify 
                                                                                                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                                                                                                           ## update 
                                                                                                                                                                                                                                                                                                           ## mode. 
                                                                                                                                                                                                                                                                                                           ## Valid 
                                                                                                                                                                                                                                                                                                           ## values 
                                                                                                                                                                                                                                                                                                           ## are 
                                                                                                                                                                                                                                                                                                           ## "merge" 
                                                                                                                                                                                                                                                                                                           ## and 
                                                                                                                                                                                                                                                                                                           ## "overwrite". 
                                                                                                                                                                                                                                                                                                           ## By 
                                                                                                                                                                                                                                                                                                           ## default, 
                                                                                                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                                                                                                           ## update 
                                                                                                                                                                                                                                                                                                           ## mode 
                                                                                                                                                                                                                                                                                                           ## is 
                                                                                                                                                                                                                                                                                                           ## "merge".
  ##   
                                                                                                                                                                                                                                                                                                                      ## parameters.1.key: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                  ## parameters.2.key: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                              ## parameters.0.value: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                            ## parameters.0.key: JString
  section = newJObject()
  var valid_402657875 = query.getOrDefault("failonwarnings")
  valid_402657875 = validateParameter(valid_402657875, JBool, required = false,
                                      default = nil)
  if valid_402657875 != nil:
    section.add "failonwarnings", valid_402657875
  var valid_402657876 = query.getOrDefault("parameters.2.value")
  valid_402657876 = validateParameter(valid_402657876, JString,
                                      required = false, default = nil)
  if valid_402657876 != nil:
    section.add "parameters.2.value", valid_402657876
  var valid_402657877 = query.getOrDefault("parameters.1.value")
  valid_402657877 = validateParameter(valid_402657877, JString,
                                      required = false, default = nil)
  if valid_402657877 != nil:
    section.add "parameters.1.value", valid_402657877
  var valid_402657878 = query.getOrDefault("mode")
  valid_402657878 = validateParameter(valid_402657878, JString,
                                      required = false,
                                      default = newJString("merge"))
  if valid_402657878 != nil:
    section.add "mode", valid_402657878
  var valid_402657879 = query.getOrDefault("parameters.1.key")
  valid_402657879 = validateParameter(valid_402657879, JString,
                                      required = false, default = nil)
  if valid_402657879 != nil:
    section.add "parameters.1.key", valid_402657879
  var valid_402657880 = query.getOrDefault("parameters.2.key")
  valid_402657880 = validateParameter(valid_402657880, JString,
                                      required = false, default = nil)
  if valid_402657880 != nil:
    section.add "parameters.2.key", valid_402657880
  var valid_402657881 = query.getOrDefault("parameters.0.value")
  valid_402657881 = validateParameter(valid_402657881, JString,
                                      required = false, default = nil)
  if valid_402657881 != nil:
    section.add "parameters.0.value", valid_402657881
  var valid_402657882 = query.getOrDefault("parameters.0.key")
  valid_402657882 = validateParameter(valid_402657882, JString,
                                      required = false, default = nil)
  if valid_402657882 != nil:
    section.add "parameters.0.key", valid_402657882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657883 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657883 = validateParameter(valid_402657883, JString,
                                      required = false, default = nil)
  if valid_402657883 != nil:
    section.add "X-Amz-Security-Token", valid_402657883
  var valid_402657884 = header.getOrDefault("X-Amz-Signature")
  valid_402657884 = validateParameter(valid_402657884, JString,
                                      required = false, default = nil)
  if valid_402657884 != nil:
    section.add "X-Amz-Signature", valid_402657884
  var valid_402657885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657885 = validateParameter(valid_402657885, JString,
                                      required = false, default = nil)
  if valid_402657885 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657885
  var valid_402657886 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657886 = validateParameter(valid_402657886, JString,
                                      required = false, default = nil)
  if valid_402657886 != nil:
    section.add "X-Amz-Algorithm", valid_402657886
  var valid_402657887 = header.getOrDefault("X-Amz-Date")
  valid_402657887 = validateParameter(valid_402657887, JString,
                                      required = false, default = nil)
  if valid_402657887 != nil:
    section.add "X-Amz-Date", valid_402657887
  var valid_402657888 = header.getOrDefault("X-Amz-Credential")
  valid_402657888 = validateParameter(valid_402657888, JString,
                                      required = false, default = nil)
  if valid_402657888 != nil:
    section.add "X-Amz-Credential", valid_402657888
  var valid_402657889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657889 = validateParameter(valid_402657889, JString,
                                      required = false, default = nil)
  if valid_402657889 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657891: Call_PutRestApi_402657871; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## 
                                                                                         ## A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
                                                                                         ## 
  let valid = call_402657891.validator(path, query, header, formData, body, _)
  let scheme = call_402657891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657891.makeUrl(scheme.get, call_402657891.host, call_402657891.base,
                                   call_402657891.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657891, uri, valid, _)

proc call*(call_402657892: Call_PutRestApi_402657871; restapiId: string;
           body: JsonNode; failonwarnings: bool = false;
           parameters2Value: string = ""; parameters1Value: string = "";
           mode: string = "merge"; parameters1Key: string = "";
           parameters2Key: string = ""; parameters0Value: string = "";
           parameters0Key: string = ""): Recallable =
  ## putRestApi
  ## A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
  ##   
                                                                                                                                                                                                                                                ## failonwarnings: bool
                                                                                                                                                                                                                                                ##                 
                                                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                                                ## A 
                                                                                                                                                                                                                                                ## query 
                                                                                                                                                                                                                                                ## parameter 
                                                                                                                                                                                                                                                ## to 
                                                                                                                                                                                                                                                ## indicate 
                                                                                                                                                                                                                                                ## whether 
                                                                                                                                                                                                                                                ## to 
                                                                                                                                                                                                                                                ## rollback 
                                                                                                                                                                                                                                                ## the 
                                                                                                                                                                                                                                                ## API 
                                                                                                                                                                                                                                                ## update 
                                                                                                                                                                                                                                                ## (<code>true</code>) 
                                                                                                                                                                                                                                                ## or 
                                                                                                                                                                                                                                                ## not 
                                                                                                                                                                                                                                                ## (<code>false</code>) 
                                                                                                                                                                                                                                                ## when 
                                                                                                                                                                                                                                                ## a 
                                                                                                                                                                                                                                                ## warning 
                                                                                                                                                                                                                                                ## is 
                                                                                                                                                                                                                                                ## encountered. 
                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                ## default 
                                                                                                                                                                                                                                                ## value 
                                                                                                                                                                                                                                                ## is 
                                                                                                                                                                                                                                                ## <code>false</code>.
  ##   
                                                                                                                                                                                                                                                                      ## parameters2Value: string
  ##   
                                                                                                                                                                                                                                                                                                 ## parameters1Value: string
  ##   
                                                                                                                                                                                                                                                                                                                            ## mode: string
                                                                                                                                                                                                                                                                                                                            ##       
                                                                                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                                                                                            ## <code>mode</code> 
                                                                                                                                                                                                                                                                                                                            ## query 
                                                                                                                                                                                                                                                                                                                            ## parameter 
                                                                                                                                                                                                                                                                                                                            ## to 
                                                                                                                                                                                                                                                                                                                            ## specify 
                                                                                                                                                                                                                                                                                                                            ## the 
                                                                                                                                                                                                                                                                                                                            ## update 
                                                                                                                                                                                                                                                                                                                            ## mode. 
                                                                                                                                                                                                                                                                                                                            ## Valid 
                                                                                                                                                                                                                                                                                                                            ## values 
                                                                                                                                                                                                                                                                                                                            ## are 
                                                                                                                                                                                                                                                                                                                            ## "merge" 
                                                                                                                                                                                                                                                                                                                            ## and 
                                                                                                                                                                                                                                                                                                                            ## "overwrite". 
                                                                                                                                                                                                                                                                                                                            ## By 
                                                                                                                                                                                                                                                                                                                            ## default, 
                                                                                                                                                                                                                                                                                                                            ## the 
                                                                                                                                                                                                                                                                                                                            ## update 
                                                                                                                                                                                                                                                                                                                            ## mode 
                                                                                                                                                                                                                                                                                                                            ## is 
                                                                                                                                                                                                                                                                                                                            ## "merge".
  ##   
                                                                                                                                                                                                                                                                                                                                       ## parameters1Key: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                ## restapiId: string (required)
                                                                                                                                                                                                                                                                                                                                                                ##            
                                                                                                                                                                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                                                                                                                                                                ## [Required] 
                                                                                                                                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                                                                                                                                ## string 
                                                                                                                                                                                                                                                                                                                                                                ## identifier 
                                                                                                                                                                                                                                                                                                                                                                ## of 
                                                                                                                                                                                                                                                                                                                                                                ## the 
                                                                                                                                                                                                                                                                                                                                                                ## associated 
                                                                                                                                                                                                                                                                                                                                                                ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                  ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                             ## parameters2Key: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                      ## parameters0Value: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ## parameters0Key: string
  var path_402657893 = newJObject()
  var query_402657894 = newJObject()
  var body_402657895 = newJObject()
  add(query_402657894, "failonwarnings", newJBool(failonwarnings))
  add(query_402657894, "parameters.2.value", newJString(parameters2Value))
  add(query_402657894, "parameters.1.value", newJString(parameters1Value))
  add(query_402657894, "mode", newJString(mode))
  add(query_402657894, "parameters.1.key", newJString(parameters1Key))
  add(path_402657893, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657895 = body
  add(query_402657894, "parameters.2.key", newJString(parameters2Key))
  add(query_402657894, "parameters.0.value", newJString(parameters0Value))
  add(query_402657894, "parameters.0.key", newJString(parameters0Key))
  result = call_402657892.call(path_402657893, query_402657894, nil, nil, body_402657895)

var putRestApi* = Call_PutRestApi_402657871(name: "putRestApi",
    meth: HttpMethod.HttpPut, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}", validator: validate_PutRestApi_402657872,
    base: "/", makeUrl: url_PutRestApi_402657873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestApi_402657857 = ref object of OpenApiRestCall_402656035
proc url_GetRestApi_402657859(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetRestApi_402657858(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the <a>RestApi</a> resource in the collection.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657860 = path.getOrDefault("restapi_id")
  valid_402657860 = validateParameter(valid_402657860, JString, required = true,
                                      default = nil)
  if valid_402657860 != nil:
    section.add "restapi_id", valid_402657860
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657861 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657861 = validateParameter(valid_402657861, JString,
                                      required = false, default = nil)
  if valid_402657861 != nil:
    section.add "X-Amz-Security-Token", valid_402657861
  var valid_402657862 = header.getOrDefault("X-Amz-Signature")
  valid_402657862 = validateParameter(valid_402657862, JString,
                                      required = false, default = nil)
  if valid_402657862 != nil:
    section.add "X-Amz-Signature", valid_402657862
  var valid_402657863 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657863 = validateParameter(valid_402657863, JString,
                                      required = false, default = nil)
  if valid_402657863 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657863
  var valid_402657864 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657864 = validateParameter(valid_402657864, JString,
                                      required = false, default = nil)
  if valid_402657864 != nil:
    section.add "X-Amz-Algorithm", valid_402657864
  var valid_402657865 = header.getOrDefault("X-Amz-Date")
  valid_402657865 = validateParameter(valid_402657865, JString,
                                      required = false, default = nil)
  if valid_402657865 != nil:
    section.add "X-Amz-Date", valid_402657865
  var valid_402657866 = header.getOrDefault("X-Amz-Credential")
  valid_402657866 = validateParameter(valid_402657866, JString,
                                      required = false, default = nil)
  if valid_402657866 != nil:
    section.add "X-Amz-Credential", valid_402657866
  var valid_402657867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657867 = validateParameter(valid_402657867, JString,
                                      required = false, default = nil)
  if valid_402657867 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657868: Call_GetRestApi_402657857; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the <a>RestApi</a> resource in the collection.
                                                                                         ## 
  let valid = call_402657868.validator(path, query, header, formData, body, _)
  let scheme = call_402657868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657868.makeUrl(scheme.get, call_402657868.host, call_402657868.base,
                                   call_402657868.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657868, uri, valid, _)

proc call*(call_402657869: Call_GetRestApi_402657857; restapiId: string): Recallable =
  ## getRestApi
  ## Lists the <a>RestApi</a> resource in the collection.
  ##   restapiId: string (required)
                                                         ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  var path_402657870 = newJObject()
  add(path_402657870, "restapi_id", newJString(restapiId))
  result = call_402657869.call(path_402657870, nil, nil, nil, nil)

var getRestApi* = Call_GetRestApi_402657857(name: "getRestApi",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}", validator: validate_GetRestApi_402657858,
    base: "/", makeUrl: url_GetRestApi_402657859,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRestApi_402657910 = ref object of OpenApiRestCall_402656035
proc url_UpdateRestApi_402657912(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateRestApi_402657911(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about the specified API.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657913 = path.getOrDefault("restapi_id")
  valid_402657913 = validateParameter(valid_402657913, JString, required = true,
                                      default = nil)
  if valid_402657913 != nil:
    section.add "restapi_id", valid_402657913
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657914 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657914 = validateParameter(valid_402657914, JString,
                                      required = false, default = nil)
  if valid_402657914 != nil:
    section.add "X-Amz-Security-Token", valid_402657914
  var valid_402657915 = header.getOrDefault("X-Amz-Signature")
  valid_402657915 = validateParameter(valid_402657915, JString,
                                      required = false, default = nil)
  if valid_402657915 != nil:
    section.add "X-Amz-Signature", valid_402657915
  var valid_402657916 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657916 = validateParameter(valid_402657916, JString,
                                      required = false, default = nil)
  if valid_402657916 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657916
  var valid_402657917 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657917 = validateParameter(valid_402657917, JString,
                                      required = false, default = nil)
  if valid_402657917 != nil:
    section.add "X-Amz-Algorithm", valid_402657917
  var valid_402657918 = header.getOrDefault("X-Amz-Date")
  valid_402657918 = validateParameter(valid_402657918, JString,
                                      required = false, default = nil)
  if valid_402657918 != nil:
    section.add "X-Amz-Date", valid_402657918
  var valid_402657919 = header.getOrDefault("X-Amz-Credential")
  valid_402657919 = validateParameter(valid_402657919, JString,
                                      required = false, default = nil)
  if valid_402657919 != nil:
    section.add "X-Amz-Credential", valid_402657919
  var valid_402657920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657920 = validateParameter(valid_402657920, JString,
                                      required = false, default = nil)
  if valid_402657920 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657920
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657922: Call_UpdateRestApi_402657910; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about the specified API.
                                                                                         ## 
  let valid = call_402657922.validator(path, query, header, formData, body, _)
  let scheme = call_402657922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657922.makeUrl(scheme.get, call_402657922.host, call_402657922.base,
                                   call_402657922.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657922, uri, valid, _)

proc call*(call_402657923: Call_UpdateRestApi_402657910; restapiId: string;
           body: JsonNode): Recallable =
  ## updateRestApi
  ## Changes information about the specified API.
  ##   restapiId: string (required)
                                                 ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                   ## body: JObject (required)
  var path_402657924 = newJObject()
  var body_402657925 = newJObject()
  add(path_402657924, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657925 = body
  result = call_402657923.call(path_402657924, nil, nil, nil, body_402657925)

var updateRestApi* = Call_UpdateRestApi_402657910(name: "updateRestApi",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}", validator: validate_UpdateRestApi_402657911,
    base: "/", makeUrl: url_UpdateRestApi_402657912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRestApi_402657896 = ref object of OpenApiRestCall_402656035
proc url_DeleteRestApi_402657898(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteRestApi_402657897(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified API.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657899 = path.getOrDefault("restapi_id")
  valid_402657899 = validateParameter(valid_402657899, JString, required = true,
                                      default = nil)
  if valid_402657899 != nil:
    section.add "restapi_id", valid_402657899
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657900 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657900 = validateParameter(valid_402657900, JString,
                                      required = false, default = nil)
  if valid_402657900 != nil:
    section.add "X-Amz-Security-Token", valid_402657900
  var valid_402657901 = header.getOrDefault("X-Amz-Signature")
  valid_402657901 = validateParameter(valid_402657901, JString,
                                      required = false, default = nil)
  if valid_402657901 != nil:
    section.add "X-Amz-Signature", valid_402657901
  var valid_402657902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657902 = validateParameter(valid_402657902, JString,
                                      required = false, default = nil)
  if valid_402657902 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657902
  var valid_402657903 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657903 = validateParameter(valid_402657903, JString,
                                      required = false, default = nil)
  if valid_402657903 != nil:
    section.add "X-Amz-Algorithm", valid_402657903
  var valid_402657904 = header.getOrDefault("X-Amz-Date")
  valid_402657904 = validateParameter(valid_402657904, JString,
                                      required = false, default = nil)
  if valid_402657904 != nil:
    section.add "X-Amz-Date", valid_402657904
  var valid_402657905 = header.getOrDefault("X-Amz-Credential")
  valid_402657905 = validateParameter(valid_402657905, JString,
                                      required = false, default = nil)
  if valid_402657905 != nil:
    section.add "X-Amz-Credential", valid_402657905
  var valid_402657906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657906 = validateParameter(valid_402657906, JString,
                                      required = false, default = nil)
  if valid_402657906 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657907: Call_DeleteRestApi_402657896; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified API.
                                                                                         ## 
  let valid = call_402657907.validator(path, query, header, formData, body, _)
  let scheme = call_402657907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657907.makeUrl(scheme.get, call_402657907.host, call_402657907.base,
                                   call_402657907.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657907, uri, valid, _)

proc call*(call_402657908: Call_DeleteRestApi_402657896; restapiId: string): Recallable =
  ## deleteRestApi
  ## Deletes the specified API.
  ##   restapiId: string (required)
                               ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  var path_402657909 = newJObject()
  add(path_402657909, "restapi_id", newJString(restapiId))
  result = call_402657908.call(path_402657909, nil, nil, nil, nil)

var deleteRestApi* = Call_DeleteRestApi_402657896(name: "deleteRestApi",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}", validator: validate_DeleteRestApi_402657897,
    base: "/", makeUrl: url_DeleteRestApi_402657898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStage_402657926 = ref object of OpenApiRestCall_402656035
proc url_GetStage_402657928(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "stage_name" in path, "`stage_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages/"),
                 (kind: VariableSegment, value: "stage_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetStage_402657927(path: JsonNode; query: JsonNode;
                                 header: JsonNode; formData: JsonNode;
                                 body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about a <a>Stage</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## stage_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>Stage</a> 
                                                                                                                    ## resource 
                                                                                                                    ## to 
                                                                                                                    ## get 
                                                                                                                    ## information 
                                                                                                                    ## about.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657929 = path.getOrDefault("restapi_id")
  valid_402657929 = validateParameter(valid_402657929, JString, required = true,
                                      default = nil)
  if valid_402657929 != nil:
    section.add "restapi_id", valid_402657929
  var valid_402657930 = path.getOrDefault("stage_name")
  valid_402657930 = validateParameter(valid_402657930, JString, required = true,
                                      default = nil)
  if valid_402657930 != nil:
    section.add "stage_name", valid_402657930
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657931 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657931 = validateParameter(valid_402657931, JString,
                                      required = false, default = nil)
  if valid_402657931 != nil:
    section.add "X-Amz-Security-Token", valid_402657931
  var valid_402657932 = header.getOrDefault("X-Amz-Signature")
  valid_402657932 = validateParameter(valid_402657932, JString,
                                      required = false, default = nil)
  if valid_402657932 != nil:
    section.add "X-Amz-Signature", valid_402657932
  var valid_402657933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657933 = validateParameter(valid_402657933, JString,
                                      required = false, default = nil)
  if valid_402657933 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657933
  var valid_402657934 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657934 = validateParameter(valid_402657934, JString,
                                      required = false, default = nil)
  if valid_402657934 != nil:
    section.add "X-Amz-Algorithm", valid_402657934
  var valid_402657935 = header.getOrDefault("X-Amz-Date")
  valid_402657935 = validateParameter(valid_402657935, JString,
                                      required = false, default = nil)
  if valid_402657935 != nil:
    section.add "X-Amz-Date", valid_402657935
  var valid_402657936 = header.getOrDefault("X-Amz-Credential")
  valid_402657936 = validateParameter(valid_402657936, JString,
                                      required = false, default = nil)
  if valid_402657936 != nil:
    section.add "X-Amz-Credential", valid_402657936
  var valid_402657937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657937 = validateParameter(valid_402657937, JString,
                                      required = false, default = nil)
  if valid_402657937 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657937
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657938: Call_GetStage_402657926; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about a <a>Stage</a> resource.
                                                                                         ## 
  let valid = call_402657938.validator(path, query, header, formData, body, _)
  let scheme = call_402657938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657938.makeUrl(scheme.get, call_402657938.host, call_402657938.base,
                                   call_402657938.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657938, uri, valid, _)

proc call*(call_402657939: Call_GetStage_402657926; restapiId: string;
           stageName: string): Recallable =
  ## getStage
  ## Gets information about a <a>Stage</a> resource.
  ##   restapiId: string (required)
                                                    ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                      ## stageName: string (required)
                                                                                                                                      ##            
                                                                                                                                      ## : 
                                                                                                                                      ## [Required] 
                                                                                                                                      ## The 
                                                                                                                                      ## name 
                                                                                                                                      ## of 
                                                                                                                                      ## the 
                                                                                                                                      ## <a>Stage</a> 
                                                                                                                                      ## resource 
                                                                                                                                      ## to 
                                                                                                                                      ## get 
                                                                                                                                      ## information 
                                                                                                                                      ## about.
  var path_402657940 = newJObject()
  add(path_402657940, "restapi_id", newJString(restapiId))
  add(path_402657940, "stage_name", newJString(stageName))
  result = call_402657939.call(path_402657940, nil, nil, nil, nil)

var getStage* = Call_GetStage_402657926(name: "getStage",
                                        meth: HttpMethod.HttpGet,
                                        host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/stages/{stage_name}",
                                        validator: validate_GetStage_402657927,
                                        base: "/", makeUrl: url_GetStage_402657928,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateStage_402657956 = ref object of OpenApiRestCall_402656035
proc url_UpdateStage_402657958(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "stage_name" in path, "`stage_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages/"),
                 (kind: VariableSegment, value: "stage_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateStage_402657957(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about a <a>Stage</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## stage_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>Stage</a> 
                                                                                                                    ## resource 
                                                                                                                    ## to 
                                                                                                                    ## change 
                                                                                                                    ## information 
                                                                                                                    ## about.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657959 = path.getOrDefault("restapi_id")
  valid_402657959 = validateParameter(valid_402657959, JString, required = true,
                                      default = nil)
  if valid_402657959 != nil:
    section.add "restapi_id", valid_402657959
  var valid_402657960 = path.getOrDefault("stage_name")
  valid_402657960 = validateParameter(valid_402657960, JString, required = true,
                                      default = nil)
  if valid_402657960 != nil:
    section.add "stage_name", valid_402657960
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657961 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657961 = validateParameter(valid_402657961, JString,
                                      required = false, default = nil)
  if valid_402657961 != nil:
    section.add "X-Amz-Security-Token", valid_402657961
  var valid_402657962 = header.getOrDefault("X-Amz-Signature")
  valid_402657962 = validateParameter(valid_402657962, JString,
                                      required = false, default = nil)
  if valid_402657962 != nil:
    section.add "X-Amz-Signature", valid_402657962
  var valid_402657963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657963 = validateParameter(valid_402657963, JString,
                                      required = false, default = nil)
  if valid_402657963 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657963
  var valid_402657964 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657964 = validateParameter(valid_402657964, JString,
                                      required = false, default = nil)
  if valid_402657964 != nil:
    section.add "X-Amz-Algorithm", valid_402657964
  var valid_402657965 = header.getOrDefault("X-Amz-Date")
  valid_402657965 = validateParameter(valid_402657965, JString,
                                      required = false, default = nil)
  if valid_402657965 != nil:
    section.add "X-Amz-Date", valid_402657965
  var valid_402657966 = header.getOrDefault("X-Amz-Credential")
  valid_402657966 = validateParameter(valid_402657966, JString,
                                      required = false, default = nil)
  if valid_402657966 != nil:
    section.add "X-Amz-Credential", valid_402657966
  var valid_402657967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657967 = validateParameter(valid_402657967, JString,
                                      required = false, default = nil)
  if valid_402657967 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657967
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657969: Call_UpdateStage_402657956; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about a <a>Stage</a> resource.
                                                                                         ## 
  let valid = call_402657969.validator(path, query, header, formData, body, _)
  let scheme = call_402657969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657969.makeUrl(scheme.get, call_402657969.host, call_402657969.base,
                                   call_402657969.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657969, uri, valid, _)

proc call*(call_402657970: Call_UpdateStage_402657956; restapiId: string;
           body: JsonNode; stageName: string): Recallable =
  ## updateStage
  ## Changes information about a <a>Stage</a> resource.
  ##   restapiId: string (required)
                                                       ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                                         ## body: JObject (required)
  ##   
                                                                                                                                                                    ## stageName: string (required)
                                                                                                                                                                    ##            
                                                                                                                                                                    ## : 
                                                                                                                                                                    ## [Required] 
                                                                                                                                                                    ## The 
                                                                                                                                                                    ## name 
                                                                                                                                                                    ## of 
                                                                                                                                                                    ## the 
                                                                                                                                                                    ## <a>Stage</a> 
                                                                                                                                                                    ## resource 
                                                                                                                                                                    ## to 
                                                                                                                                                                    ## change 
                                                                                                                                                                    ## information 
                                                                                                                                                                    ## about.
  var path_402657971 = newJObject()
  var body_402657972 = newJObject()
  add(path_402657971, "restapi_id", newJString(restapiId))
  if body != nil:
    body_402657972 = body
  add(path_402657971, "stage_name", newJString(stageName))
  result = call_402657970.call(path_402657971, nil, nil, nil, body_402657972)

var updateStage* = Call_UpdateStage_402657956(name: "updateStage",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/stages/{stage_name}",
    validator: validate_UpdateStage_402657957, base: "/",
    makeUrl: url_UpdateStage_402657958, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteStage_402657941 = ref object of OpenApiRestCall_402656035
proc url_DeleteStage_402657943(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "stage_name" in path, "`stage_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages/"),
                 (kind: VariableSegment, value: "stage_name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteStage_402657942(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a <a>Stage</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## stage_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>Stage</a> 
                                                                                                                    ## resource 
                                                                                                                    ## to 
                                                                                                                    ## delete.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402657944 = path.getOrDefault("restapi_id")
  valid_402657944 = validateParameter(valid_402657944, JString, required = true,
                                      default = nil)
  if valid_402657944 != nil:
    section.add "restapi_id", valid_402657944
  var valid_402657945 = path.getOrDefault("stage_name")
  valid_402657945 = validateParameter(valid_402657945, JString, required = true,
                                      default = nil)
  if valid_402657945 != nil:
    section.add "stage_name", valid_402657945
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657946 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657946 = validateParameter(valid_402657946, JString,
                                      required = false, default = nil)
  if valid_402657946 != nil:
    section.add "X-Amz-Security-Token", valid_402657946
  var valid_402657947 = header.getOrDefault("X-Amz-Signature")
  valid_402657947 = validateParameter(valid_402657947, JString,
                                      required = false, default = nil)
  if valid_402657947 != nil:
    section.add "X-Amz-Signature", valid_402657947
  var valid_402657948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657948 = validateParameter(valid_402657948, JString,
                                      required = false, default = nil)
  if valid_402657948 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657948
  var valid_402657949 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657949 = validateParameter(valid_402657949, JString,
                                      required = false, default = nil)
  if valid_402657949 != nil:
    section.add "X-Amz-Algorithm", valid_402657949
  var valid_402657950 = header.getOrDefault("X-Amz-Date")
  valid_402657950 = validateParameter(valid_402657950, JString,
                                      required = false, default = nil)
  if valid_402657950 != nil:
    section.add "X-Amz-Date", valid_402657950
  var valid_402657951 = header.getOrDefault("X-Amz-Credential")
  valid_402657951 = validateParameter(valid_402657951, JString,
                                      required = false, default = nil)
  if valid_402657951 != nil:
    section.add "X-Amz-Credential", valid_402657951
  var valid_402657952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657952 = validateParameter(valid_402657952, JString,
                                      required = false, default = nil)
  if valid_402657952 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657952
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657953: Call_DeleteStage_402657941; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a <a>Stage</a> resource.
                                                                                         ## 
  let valid = call_402657953.validator(path, query, header, formData, body, _)
  let scheme = call_402657953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657953.makeUrl(scheme.get, call_402657953.host, call_402657953.base,
                                   call_402657953.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657953, uri, valid, _)

proc call*(call_402657954: Call_DeleteStage_402657941; restapiId: string;
           stageName: string): Recallable =
  ## deleteStage
  ## Deletes a <a>Stage</a> resource.
  ##   restapiId: string (required)
                                     ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                       ## stageName: string (required)
                                                                                                                       ##            
                                                                                                                       ## : 
                                                                                                                       ## [Required] 
                                                                                                                       ## The 
                                                                                                                       ## name 
                                                                                                                       ## of 
                                                                                                                       ## the 
                                                                                                                       ## <a>Stage</a> 
                                                                                                                       ## resource 
                                                                                                                       ## to 
                                                                                                                       ## delete.
  var path_402657955 = newJObject()
  add(path_402657955, "restapi_id", newJString(restapiId))
  add(path_402657955, "stage_name", newJString(stageName))
  result = call_402657954.call(path_402657955, nil, nil, nil, nil)

var deleteStage* = Call_DeleteStage_402657941(name: "deleteStage",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/stages/{stage_name}",
    validator: validate_DeleteStage_402657942, base: "/",
    makeUrl: url_DeleteStage_402657943, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUsagePlan_402657973 = ref object of OpenApiRestCall_402656035
proc url_GetUsagePlan_402657975(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetUsagePlan_402657974(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a usage plan of a given plan identifier.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The identifier of the <a>UsagePlan</a> resource to be retrieved.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402657976 = path.getOrDefault("usageplanId")
  valid_402657976 = validateParameter(valid_402657976, JString, required = true,
                                      default = nil)
  if valid_402657976 != nil:
    section.add "usageplanId", valid_402657976
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657977 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657977 = validateParameter(valid_402657977, JString,
                                      required = false, default = nil)
  if valid_402657977 != nil:
    section.add "X-Amz-Security-Token", valid_402657977
  var valid_402657978 = header.getOrDefault("X-Amz-Signature")
  valid_402657978 = validateParameter(valid_402657978, JString,
                                      required = false, default = nil)
  if valid_402657978 != nil:
    section.add "X-Amz-Signature", valid_402657978
  var valid_402657979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657979 = validateParameter(valid_402657979, JString,
                                      required = false, default = nil)
  if valid_402657979 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657979
  var valid_402657980 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657980 = validateParameter(valid_402657980, JString,
                                      required = false, default = nil)
  if valid_402657980 != nil:
    section.add "X-Amz-Algorithm", valid_402657980
  var valid_402657981 = header.getOrDefault("X-Amz-Date")
  valid_402657981 = validateParameter(valid_402657981, JString,
                                      required = false, default = nil)
  if valid_402657981 != nil:
    section.add "X-Amz-Date", valid_402657981
  var valid_402657982 = header.getOrDefault("X-Amz-Credential")
  valid_402657982 = validateParameter(valid_402657982, JString,
                                      required = false, default = nil)
  if valid_402657982 != nil:
    section.add "X-Amz-Credential", valid_402657982
  var valid_402657983 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657983 = validateParameter(valid_402657983, JString,
                                      required = false, default = nil)
  if valid_402657983 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657983
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657984: Call_GetUsagePlan_402657973; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a usage plan of a given plan identifier.
                                                                                         ## 
  let valid = call_402657984.validator(path, query, header, formData, body, _)
  let scheme = call_402657984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657984.makeUrl(scheme.get, call_402657984.host, call_402657984.base,
                                   call_402657984.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657984, uri, valid, _)

proc call*(call_402657985: Call_GetUsagePlan_402657973; usageplanId: string): Recallable =
  ## getUsagePlan
  ## Gets a usage plan of a given plan identifier.
  ##   usageplanId: string (required)
                                                  ##              : [Required] The identifier of the <a>UsagePlan</a> resource to be retrieved.
  var path_402657986 = newJObject()
  add(path_402657986, "usageplanId", newJString(usageplanId))
  result = call_402657985.call(path_402657986, nil, nil, nil, nil)

var getUsagePlan* = Call_GetUsagePlan_402657973(name: "getUsagePlan",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/usageplans/{usageplanId}", validator: validate_GetUsagePlan_402657974,
    base: "/", makeUrl: url_GetUsagePlan_402657975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateUsagePlan_402658001 = ref object of OpenApiRestCall_402656035
proc url_UpdateUsagePlan_402658003(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateUsagePlan_402658002(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates a usage plan of a given plan Id.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the to-be-updated usage plan.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402658004 = path.getOrDefault("usageplanId")
  valid_402658004 = validateParameter(valid_402658004, JString, required = true,
                                      default = nil)
  if valid_402658004 != nil:
    section.add "usageplanId", valid_402658004
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658005 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658005 = validateParameter(valid_402658005, JString,
                                      required = false, default = nil)
  if valid_402658005 != nil:
    section.add "X-Amz-Security-Token", valid_402658005
  var valid_402658006 = header.getOrDefault("X-Amz-Signature")
  valid_402658006 = validateParameter(valid_402658006, JString,
                                      required = false, default = nil)
  if valid_402658006 != nil:
    section.add "X-Amz-Signature", valid_402658006
  var valid_402658007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658007 = validateParameter(valid_402658007, JString,
                                      required = false, default = nil)
  if valid_402658007 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658007
  var valid_402658008 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658008 = validateParameter(valid_402658008, JString,
                                      required = false, default = nil)
  if valid_402658008 != nil:
    section.add "X-Amz-Algorithm", valid_402658008
  var valid_402658009 = header.getOrDefault("X-Amz-Date")
  valid_402658009 = validateParameter(valid_402658009, JString,
                                      required = false, default = nil)
  if valid_402658009 != nil:
    section.add "X-Amz-Date", valid_402658009
  var valid_402658010 = header.getOrDefault("X-Amz-Credential")
  valid_402658010 = validateParameter(valid_402658010, JString,
                                      required = false, default = nil)
  if valid_402658010 != nil:
    section.add "X-Amz-Credential", valid_402658010
  var valid_402658011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658011 = validateParameter(valid_402658011, JString,
                                      required = false, default = nil)
  if valid_402658011 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658013: Call_UpdateUsagePlan_402658001; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates a usage plan of a given plan Id.
                                                                                         ## 
  let valid = call_402658013.validator(path, query, header, formData, body, _)
  let scheme = call_402658013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658013.makeUrl(scheme.get, call_402658013.host, call_402658013.base,
                                   call_402658013.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658013, uri, valid, _)

proc call*(call_402658014: Call_UpdateUsagePlan_402658001; usageplanId: string;
           body: JsonNode): Recallable =
  ## updateUsagePlan
  ## Updates a usage plan of a given plan Id.
  ##   usageplanId: string (required)
                                             ##              : [Required] The Id of the to-be-updated usage plan.
  ##   
                                                                                                                 ## body: JObject (required)
  var path_402658015 = newJObject()
  var body_402658016 = newJObject()
  add(path_402658015, "usageplanId", newJString(usageplanId))
  if body != nil:
    body_402658016 = body
  result = call_402658014.call(path_402658015, nil, nil, nil, body_402658016)

var updateUsagePlan* = Call_UpdateUsagePlan_402658001(name: "updateUsagePlan",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/usageplans/{usageplanId}", validator: validate_UpdateUsagePlan_402658002,
    base: "/", makeUrl: url_UpdateUsagePlan_402658003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteUsagePlan_402657987 = ref object of OpenApiRestCall_402656035
proc url_DeleteUsagePlan_402657989(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteUsagePlan_402657988(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a usage plan of a given plan Id.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the to-be-deleted usage plan.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402657990 = path.getOrDefault("usageplanId")
  valid_402657990 = validateParameter(valid_402657990, JString, required = true,
                                      default = nil)
  if valid_402657990 != nil:
    section.add "usageplanId", valid_402657990
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657991 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657991 = validateParameter(valid_402657991, JString,
                                      required = false, default = nil)
  if valid_402657991 != nil:
    section.add "X-Amz-Security-Token", valid_402657991
  var valid_402657992 = header.getOrDefault("X-Amz-Signature")
  valid_402657992 = validateParameter(valid_402657992, JString,
                                      required = false, default = nil)
  if valid_402657992 != nil:
    section.add "X-Amz-Signature", valid_402657992
  var valid_402657993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657993 = validateParameter(valid_402657993, JString,
                                      required = false, default = nil)
  if valid_402657993 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657993
  var valid_402657994 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657994 = validateParameter(valid_402657994, JString,
                                      required = false, default = nil)
  if valid_402657994 != nil:
    section.add "X-Amz-Algorithm", valid_402657994
  var valid_402657995 = header.getOrDefault("X-Amz-Date")
  valid_402657995 = validateParameter(valid_402657995, JString,
                                      required = false, default = nil)
  if valid_402657995 != nil:
    section.add "X-Amz-Date", valid_402657995
  var valid_402657996 = header.getOrDefault("X-Amz-Credential")
  valid_402657996 = validateParameter(valid_402657996, JString,
                                      required = false, default = nil)
  if valid_402657996 != nil:
    section.add "X-Amz-Credential", valid_402657996
  var valid_402657997 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657997 = validateParameter(valid_402657997, JString,
                                      required = false, default = nil)
  if valid_402657997 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657997
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657998: Call_DeleteUsagePlan_402657987; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a usage plan of a given plan Id.
                                                                                         ## 
  let valid = call_402657998.validator(path, query, header, formData, body, _)
  let scheme = call_402657998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657998.makeUrl(scheme.get, call_402657998.host, call_402657998.base,
                                   call_402657998.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657998, uri, valid, _)

proc call*(call_402657999: Call_DeleteUsagePlan_402657987; usageplanId: string): Recallable =
  ## deleteUsagePlan
  ## Deletes a usage plan of a given plan Id.
  ##   usageplanId: string (required)
                                             ##              : [Required] The Id of the to-be-deleted usage plan.
  var path_402658000 = newJObject()
  add(path_402658000, "usageplanId", newJString(usageplanId))
  result = call_402657999.call(path_402658000, nil, nil, nil, nil)

var deleteUsagePlan* = Call_DeleteUsagePlan_402657987(name: "deleteUsagePlan",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/usageplans/{usageplanId}", validator: validate_DeleteUsagePlan_402657988,
    base: "/", makeUrl: url_DeleteUsagePlan_402657989,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUsagePlanKey_402658017 = ref object of OpenApiRestCall_402656035
proc url_GetUsagePlanKey_402658019(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  assert "keyId" in path, "`keyId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId"),
                 (kind: ConstantSegment, value: "/keys/"),
                 (kind: VariableSegment, value: "keyId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetUsagePlanKey_402658018(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a usage plan key of a given key identifier.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.
  ##   
                                                                                                                                                                                                                           ## keyId: JString (required)
                                                                                                                                                                                                                           ##        
                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                           ## [Required] 
                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                           ## key 
                                                                                                                                                                                                                           ## Id 
                                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                           ## to-be-retrieved 
                                                                                                                                                                                                                           ## <a>UsagePlanKey</a> 
                                                                                                                                                                                                                           ## resource 
                                                                                                                                                                                                                           ## representing 
                                                                                                                                                                                                                           ## a 
                                                                                                                                                                                                                           ## plan 
                                                                                                                                                                                                                           ## customer.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402658020 = path.getOrDefault("usageplanId")
  valid_402658020 = validateParameter(valid_402658020, JString, required = true,
                                      default = nil)
  if valid_402658020 != nil:
    section.add "usageplanId", valid_402658020
  var valid_402658021 = path.getOrDefault("keyId")
  valid_402658021 = validateParameter(valid_402658021, JString, required = true,
                                      default = nil)
  if valid_402658021 != nil:
    section.add "keyId", valid_402658021
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658022 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658022 = validateParameter(valid_402658022, JString,
                                      required = false, default = nil)
  if valid_402658022 != nil:
    section.add "X-Amz-Security-Token", valid_402658022
  var valid_402658023 = header.getOrDefault("X-Amz-Signature")
  valid_402658023 = validateParameter(valid_402658023, JString,
                                      required = false, default = nil)
  if valid_402658023 != nil:
    section.add "X-Amz-Signature", valid_402658023
  var valid_402658024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658024 = validateParameter(valid_402658024, JString,
                                      required = false, default = nil)
  if valid_402658024 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658024
  var valid_402658025 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658025 = validateParameter(valid_402658025, JString,
                                      required = false, default = nil)
  if valid_402658025 != nil:
    section.add "X-Amz-Algorithm", valid_402658025
  var valid_402658026 = header.getOrDefault("X-Amz-Date")
  valid_402658026 = validateParameter(valid_402658026, JString,
                                      required = false, default = nil)
  if valid_402658026 != nil:
    section.add "X-Amz-Date", valid_402658026
  var valid_402658027 = header.getOrDefault("X-Amz-Credential")
  valid_402658027 = validateParameter(valid_402658027, JString,
                                      required = false, default = nil)
  if valid_402658027 != nil:
    section.add "X-Amz-Credential", valid_402658027
  var valid_402658028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658028 = validateParameter(valid_402658028, JString,
                                      required = false, default = nil)
  if valid_402658028 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658028
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658029: Call_GetUsagePlanKey_402658017; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a usage plan key of a given key identifier.
                                                                                         ## 
  let valid = call_402658029.validator(path, query, header, formData, body, _)
  let scheme = call_402658029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658029.makeUrl(scheme.get, call_402658029.host, call_402658029.base,
                                   call_402658029.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658029, uri, valid, _)

proc call*(call_402658030: Call_GetUsagePlanKey_402658017; usageplanId: string;
           keyId: string): Recallable =
  ## getUsagePlanKey
  ## Gets a usage plan key of a given key identifier.
  ##   usageplanId: string (required)
                                                     ##              : [Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.
  ##   
                                                                                                                                                                                                                                               ## keyId: string (required)
                                                                                                                                                                                                                                               ##        
                                                                                                                                                                                                                                               ## : 
                                                                                                                                                                                                                                               ## [Required] 
                                                                                                                                                                                                                                               ## The 
                                                                                                                                                                                                                                               ## key 
                                                                                                                                                                                                                                               ## Id 
                                                                                                                                                                                                                                               ## of 
                                                                                                                                                                                                                                               ## the 
                                                                                                                                                                                                                                               ## to-be-retrieved 
                                                                                                                                                                                                                                               ## <a>UsagePlanKey</a> 
                                                                                                                                                                                                                                               ## resource 
                                                                                                                                                                                                                                               ## representing 
                                                                                                                                                                                                                                               ## a 
                                                                                                                                                                                                                                               ## plan 
                                                                                                                                                                                                                                               ## customer.
  var path_402658031 = newJObject()
  add(path_402658031, "usageplanId", newJString(usageplanId))
  add(path_402658031, "keyId", newJString(keyId))
  result = call_402658030.call(path_402658031, nil, nil, nil, nil)

var getUsagePlanKey* = Call_GetUsagePlanKey_402658017(name: "getUsagePlanKey",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/usageplans/{usageplanId}/keys/{keyId}",
    validator: validate_GetUsagePlanKey_402658018, base: "/",
    makeUrl: url_GetUsagePlanKey_402658019, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteUsagePlanKey_402658032 = ref object of OpenApiRestCall_402656035
proc url_DeleteUsagePlanKey_402658034(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  assert "keyId" in path, "`keyId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId"),
                 (kind: ConstantSegment, value: "/keys/"),
                 (kind: VariableSegment, value: "keyId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteUsagePlanKey_402658033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a usage plan key and remove the underlying API key from the associated usage plan.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-deleted <a>UsagePlanKey</a> resource representing a plan customer.
  ##   
                                                                                                                                                                                                                         ## keyId: JString (required)
                                                                                                                                                                                                                         ##        
                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                         ## [Required] 
                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                         ## Id 
                                                                                                                                                                                                                         ## of 
                                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                                         ## <a>UsagePlanKey</a> 
                                                                                                                                                                                                                         ## resource 
                                                                                                                                                                                                                         ## to 
                                                                                                                                                                                                                         ## be 
                                                                                                                                                                                                                         ## deleted.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402658035 = path.getOrDefault("usageplanId")
  valid_402658035 = validateParameter(valid_402658035, JString, required = true,
                                      default = nil)
  if valid_402658035 != nil:
    section.add "usageplanId", valid_402658035
  var valid_402658036 = path.getOrDefault("keyId")
  valid_402658036 = validateParameter(valid_402658036, JString, required = true,
                                      default = nil)
  if valid_402658036 != nil:
    section.add "keyId", valid_402658036
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658037 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658037 = validateParameter(valid_402658037, JString,
                                      required = false, default = nil)
  if valid_402658037 != nil:
    section.add "X-Amz-Security-Token", valid_402658037
  var valid_402658038 = header.getOrDefault("X-Amz-Signature")
  valid_402658038 = validateParameter(valid_402658038, JString,
                                      required = false, default = nil)
  if valid_402658038 != nil:
    section.add "X-Amz-Signature", valid_402658038
  var valid_402658039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658039 = validateParameter(valid_402658039, JString,
                                      required = false, default = nil)
  if valid_402658039 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658039
  var valid_402658040 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658040 = validateParameter(valid_402658040, JString,
                                      required = false, default = nil)
  if valid_402658040 != nil:
    section.add "X-Amz-Algorithm", valid_402658040
  var valid_402658041 = header.getOrDefault("X-Amz-Date")
  valid_402658041 = validateParameter(valid_402658041, JString,
                                      required = false, default = nil)
  if valid_402658041 != nil:
    section.add "X-Amz-Date", valid_402658041
  var valid_402658042 = header.getOrDefault("X-Amz-Credential")
  valid_402658042 = validateParameter(valid_402658042, JString,
                                      required = false, default = nil)
  if valid_402658042 != nil:
    section.add "X-Amz-Credential", valid_402658042
  var valid_402658043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658043 = validateParameter(valid_402658043, JString,
                                      required = false, default = nil)
  if valid_402658043 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658044: Call_DeleteUsagePlanKey_402658032;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a usage plan key and remove the underlying API key from the associated usage plan.
                                                                                         ## 
  let valid = call_402658044.validator(path, query, header, formData, body, _)
  let scheme = call_402658044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658044.makeUrl(scheme.get, call_402658044.host, call_402658044.base,
                                   call_402658044.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658044, uri, valid, _)

proc call*(call_402658045: Call_DeleteUsagePlanKey_402658032;
           usageplanId: string; keyId: string): Recallable =
  ## deleteUsagePlanKey
  ## Deletes a usage plan key and remove the underlying API key from the associated usage plan.
  ##   
                                                                                               ## usageplanId: string (required)
                                                                                               ##              
                                                                                               ## : 
                                                                                               ## [Required] 
                                                                                               ## The 
                                                                                               ## Id 
                                                                                               ## of 
                                                                                               ## the 
                                                                                               ## <a>UsagePlan</a> 
                                                                                               ## resource 
                                                                                               ## representing 
                                                                                               ## the 
                                                                                               ## usage 
                                                                                               ## plan 
                                                                                               ## containing 
                                                                                               ## the 
                                                                                               ## to-be-deleted 
                                                                                               ## <a>UsagePlanKey</a> 
                                                                                               ## resource 
                                                                                               ## representing 
                                                                                               ## a 
                                                                                               ## plan 
                                                                                               ## customer.
  ##   
                                                                                                           ## keyId: string (required)
                                                                                                           ##        
                                                                                                           ## : 
                                                                                                           ## [Required] 
                                                                                                           ## The 
                                                                                                           ## Id 
                                                                                                           ## of 
                                                                                                           ## the 
                                                                                                           ## <a>UsagePlanKey</a> 
                                                                                                           ## resource 
                                                                                                           ## to 
                                                                                                           ## be 
                                                                                                           ## deleted.
  var path_402658046 = newJObject()
  add(path_402658046, "usageplanId", newJString(usageplanId))
  add(path_402658046, "keyId", newJString(keyId))
  result = call_402658045.call(path_402658046, nil, nil, nil, nil)

var deleteUsagePlanKey* = Call_DeleteUsagePlanKey_402658032(
    name: "deleteUsagePlanKey", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/usageplans/{usageplanId}/keys/{keyId}",
    validator: validate_DeleteUsagePlanKey_402658033, base: "/",
    makeUrl: url_DeleteUsagePlanKey_402658034,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVpcLink_402658047 = ref object of OpenApiRestCall_402656035
proc url_GetVpcLink_402658049(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "vpclink_id" in path, "`vpclink_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/vpclinks/"),
                 (kind: VariableSegment, value: "vpclink_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVpcLink_402658048(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a specified VPC link under the caller's account in a region.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   vpclink_id: JString (required)
                                 ##             : [Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `vpclink_id` field"
  var valid_402658050 = path.getOrDefault("vpclink_id")
  valid_402658050 = validateParameter(valid_402658050, JString, required = true,
                                      default = nil)
  if valid_402658050 != nil:
    section.add "vpclink_id", valid_402658050
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658051 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658051 = validateParameter(valid_402658051, JString,
                                      required = false, default = nil)
  if valid_402658051 != nil:
    section.add "X-Amz-Security-Token", valid_402658051
  var valid_402658052 = header.getOrDefault("X-Amz-Signature")
  valid_402658052 = validateParameter(valid_402658052, JString,
                                      required = false, default = nil)
  if valid_402658052 != nil:
    section.add "X-Amz-Signature", valid_402658052
  var valid_402658053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658053 = validateParameter(valid_402658053, JString,
                                      required = false, default = nil)
  if valid_402658053 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658053
  var valid_402658054 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658054 = validateParameter(valid_402658054, JString,
                                      required = false, default = nil)
  if valid_402658054 != nil:
    section.add "X-Amz-Algorithm", valid_402658054
  var valid_402658055 = header.getOrDefault("X-Amz-Date")
  valid_402658055 = validateParameter(valid_402658055, JString,
                                      required = false, default = nil)
  if valid_402658055 != nil:
    section.add "X-Amz-Date", valid_402658055
  var valid_402658056 = header.getOrDefault("X-Amz-Credential")
  valid_402658056 = validateParameter(valid_402658056, JString,
                                      required = false, default = nil)
  if valid_402658056 != nil:
    section.add "X-Amz-Credential", valid_402658056
  var valid_402658057 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658057 = validateParameter(valid_402658057, JString,
                                      required = false, default = nil)
  if valid_402658057 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658057
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658058: Call_GetVpcLink_402658047; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a specified VPC link under the caller's account in a region.
                                                                                         ## 
  let valid = call_402658058.validator(path, query, header, formData, body, _)
  let scheme = call_402658058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658058.makeUrl(scheme.get, call_402658058.host, call_402658058.base,
                                   call_402658058.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658058, uri, valid, _)

proc call*(call_402658059: Call_GetVpcLink_402658047; vpclinkId: string): Recallable =
  ## getVpcLink
  ## Gets a specified VPC link under the caller's account in a region.
  ##   vpclinkId: string (required)
                                                                      ##            : [Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.
  var path_402658060 = newJObject()
  add(path_402658060, "vpclink_id", newJString(vpclinkId))
  result = call_402658059.call(path_402658060, nil, nil, nil, nil)

var getVpcLink* = Call_GetVpcLink_402658047(name: "getVpcLink",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/vpclinks/{vpclink_id}", validator: validate_GetVpcLink_402658048,
    base: "/", makeUrl: url_GetVpcLink_402658049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateVpcLink_402658075 = ref object of OpenApiRestCall_402656035
proc url_UpdateVpcLink_402658077(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "vpclink_id" in path, "`vpclink_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/vpclinks/"),
                 (kind: VariableSegment, value: "vpclink_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateVpcLink_402658076(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates an existing <a>VpcLink</a> of a specified identifier.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   vpclink_id: JString (required)
                                 ##             : [Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `vpclink_id` field"
  var valid_402658078 = path.getOrDefault("vpclink_id")
  valid_402658078 = validateParameter(valid_402658078, JString, required = true,
                                      default = nil)
  if valid_402658078 != nil:
    section.add "vpclink_id", valid_402658078
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658079 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658079 = validateParameter(valid_402658079, JString,
                                      required = false, default = nil)
  if valid_402658079 != nil:
    section.add "X-Amz-Security-Token", valid_402658079
  var valid_402658080 = header.getOrDefault("X-Amz-Signature")
  valid_402658080 = validateParameter(valid_402658080, JString,
                                      required = false, default = nil)
  if valid_402658080 != nil:
    section.add "X-Amz-Signature", valid_402658080
  var valid_402658081 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658081 = validateParameter(valid_402658081, JString,
                                      required = false, default = nil)
  if valid_402658081 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658081
  var valid_402658082 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658082 = validateParameter(valid_402658082, JString,
                                      required = false, default = nil)
  if valid_402658082 != nil:
    section.add "X-Amz-Algorithm", valid_402658082
  var valid_402658083 = header.getOrDefault("X-Amz-Date")
  valid_402658083 = validateParameter(valid_402658083, JString,
                                      required = false, default = nil)
  if valid_402658083 != nil:
    section.add "X-Amz-Date", valid_402658083
  var valid_402658084 = header.getOrDefault("X-Amz-Credential")
  valid_402658084 = validateParameter(valid_402658084, JString,
                                      required = false, default = nil)
  if valid_402658084 != nil:
    section.add "X-Amz-Credential", valid_402658084
  var valid_402658085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658085 = validateParameter(valid_402658085, JString,
                                      required = false, default = nil)
  if valid_402658085 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658085
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658087: Call_UpdateVpcLink_402658075; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates an existing <a>VpcLink</a> of a specified identifier.
                                                                                         ## 
  let valid = call_402658087.validator(path, query, header, formData, body, _)
  let scheme = call_402658087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658087.makeUrl(scheme.get, call_402658087.host, call_402658087.base,
                                   call_402658087.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658087, uri, valid, _)

proc call*(call_402658088: Call_UpdateVpcLink_402658075; body: JsonNode;
           vpclinkId: string): Recallable =
  ## updateVpcLink
  ## Updates an existing <a>VpcLink</a> of a specified identifier.
  ##   body: JObject (required)
  ##   vpclinkId: string (required)
                               ##            : [Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.
  var path_402658089 = newJObject()
  var body_402658090 = newJObject()
  if body != nil:
    body_402658090 = body
  add(path_402658089, "vpclink_id", newJString(vpclinkId))
  result = call_402658088.call(path_402658089, nil, nil, nil, body_402658090)

var updateVpcLink* = Call_UpdateVpcLink_402658075(name: "updateVpcLink",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/vpclinks/{vpclink_id}", validator: validate_UpdateVpcLink_402658076,
    base: "/", makeUrl: url_UpdateVpcLink_402658077,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteVpcLink_402658061 = ref object of OpenApiRestCall_402656035
proc url_DeleteVpcLink_402658063(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "vpclink_id" in path, "`vpclink_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/vpclinks/"),
                 (kind: VariableSegment, value: "vpclink_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteVpcLink_402658062(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an existing <a>VpcLink</a> of a specified identifier.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   vpclink_id: JString (required)
                                 ##             : [Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `vpclink_id` field"
  var valid_402658064 = path.getOrDefault("vpclink_id")
  valid_402658064 = validateParameter(valid_402658064, JString, required = true,
                                      default = nil)
  if valid_402658064 != nil:
    section.add "vpclink_id", valid_402658064
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658065 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658065 = validateParameter(valid_402658065, JString,
                                      required = false, default = nil)
  if valid_402658065 != nil:
    section.add "X-Amz-Security-Token", valid_402658065
  var valid_402658066 = header.getOrDefault("X-Amz-Signature")
  valid_402658066 = validateParameter(valid_402658066, JString,
                                      required = false, default = nil)
  if valid_402658066 != nil:
    section.add "X-Amz-Signature", valid_402658066
  var valid_402658067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658067 = validateParameter(valid_402658067, JString,
                                      required = false, default = nil)
  if valid_402658067 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658067
  var valid_402658068 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658068 = validateParameter(valid_402658068, JString,
                                      required = false, default = nil)
  if valid_402658068 != nil:
    section.add "X-Amz-Algorithm", valid_402658068
  var valid_402658069 = header.getOrDefault("X-Amz-Date")
  valid_402658069 = validateParameter(valid_402658069, JString,
                                      required = false, default = nil)
  if valid_402658069 != nil:
    section.add "X-Amz-Date", valid_402658069
  var valid_402658070 = header.getOrDefault("X-Amz-Credential")
  valid_402658070 = validateParameter(valid_402658070, JString,
                                      required = false, default = nil)
  if valid_402658070 != nil:
    section.add "X-Amz-Credential", valid_402658070
  var valid_402658071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658071 = validateParameter(valid_402658071, JString,
                                      required = false, default = nil)
  if valid_402658071 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658071
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658072: Call_DeleteVpcLink_402658061; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an existing <a>VpcLink</a> of a specified identifier.
                                                                                         ## 
  let valid = call_402658072.validator(path, query, header, formData, body, _)
  let scheme = call_402658072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658072.makeUrl(scheme.get, call_402658072.host, call_402658072.base,
                                   call_402658072.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658072, uri, valid, _)

proc call*(call_402658073: Call_DeleteVpcLink_402658061; vpclinkId: string): Recallable =
  ## deleteVpcLink
  ## Deletes an existing <a>VpcLink</a> of a specified identifier.
  ##   vpclinkId: string (required)
                                                                  ##            : [Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.
  var path_402658074 = newJObject()
  add(path_402658074, "vpclink_id", newJString(vpclinkId))
  result = call_402658073.call(path_402658074, nil, nil, nil, nil)

var deleteVpcLink* = Call_DeleteVpcLink_402658061(name: "deleteVpcLink",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/vpclinks/{vpclink_id}", validator: validate_DeleteVpcLink_402658062,
    base: "/", makeUrl: url_DeleteVpcLink_402658063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_FlushStageAuthorizersCache_402658091 = ref object of OpenApiRestCall_402656035
proc url_FlushStageAuthorizersCache_402658093(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "stage_name" in path, "`stage_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages/"),
                 (kind: VariableSegment, value: "stage_name"),
                 (kind: ConstantSegment, value: "/cache/authorizers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_FlushStageAuthorizersCache_402658092(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Flushes all authorizer cache entries on a stage.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                         ## stage_name: JString (required)
                                                                                                         ##             
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## name 
                                                                                                         ## of 
                                                                                                         ## the 
                                                                                                         ## stage 
                                                                                                         ## to 
                                                                                                         ## flush.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402658094 = path.getOrDefault("restapi_id")
  valid_402658094 = validateParameter(valid_402658094, JString, required = true,
                                      default = nil)
  if valid_402658094 != nil:
    section.add "restapi_id", valid_402658094
  var valid_402658095 = path.getOrDefault("stage_name")
  valid_402658095 = validateParameter(valid_402658095, JString, required = true,
                                      default = nil)
  if valid_402658095 != nil:
    section.add "stage_name", valid_402658095
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658096 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658096 = validateParameter(valid_402658096, JString,
                                      required = false, default = nil)
  if valid_402658096 != nil:
    section.add "X-Amz-Security-Token", valid_402658096
  var valid_402658097 = header.getOrDefault("X-Amz-Signature")
  valid_402658097 = validateParameter(valid_402658097, JString,
                                      required = false, default = nil)
  if valid_402658097 != nil:
    section.add "X-Amz-Signature", valid_402658097
  var valid_402658098 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658098 = validateParameter(valid_402658098, JString,
                                      required = false, default = nil)
  if valid_402658098 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658098
  var valid_402658099 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658099 = validateParameter(valid_402658099, JString,
                                      required = false, default = nil)
  if valid_402658099 != nil:
    section.add "X-Amz-Algorithm", valid_402658099
  var valid_402658100 = header.getOrDefault("X-Amz-Date")
  valid_402658100 = validateParameter(valid_402658100, JString,
                                      required = false, default = nil)
  if valid_402658100 != nil:
    section.add "X-Amz-Date", valid_402658100
  var valid_402658101 = header.getOrDefault("X-Amz-Credential")
  valid_402658101 = validateParameter(valid_402658101, JString,
                                      required = false, default = nil)
  if valid_402658101 != nil:
    section.add "X-Amz-Credential", valid_402658101
  var valid_402658102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658102 = validateParameter(valid_402658102, JString,
                                      required = false, default = nil)
  if valid_402658102 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658102
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658103: Call_FlushStageAuthorizersCache_402658091;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Flushes all authorizer cache entries on a stage.
                                                                                         ## 
  let valid = call_402658103.validator(path, query, header, formData, body, _)
  let scheme = call_402658103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658103.makeUrl(scheme.get, call_402658103.host, call_402658103.base,
                                   call_402658103.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658103, uri, valid, _)

proc call*(call_402658104: Call_FlushStageAuthorizersCache_402658091;
           restapiId: string; stageName: string): Recallable =
  ## flushStageAuthorizersCache
  ## Flushes all authorizer cache entries on a stage.
  ##   restapiId: string (required)
                                                     ##            : The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                            ## stageName: string (required)
                                                                                                                            ##            
                                                                                                                            ## : 
                                                                                                                            ## The 
                                                                                                                            ## name 
                                                                                                                            ## of 
                                                                                                                            ## the 
                                                                                                                            ## stage 
                                                                                                                            ## to 
                                                                                                                            ## flush.
  var path_402658105 = newJObject()
  add(path_402658105, "restapi_id", newJString(restapiId))
  add(path_402658105, "stage_name", newJString(stageName))
  result = call_402658104.call(path_402658105, nil, nil, nil, nil)

var flushStageAuthorizersCache* = Call_FlushStageAuthorizersCache_402658091(
    name: "flushStageAuthorizersCache", meth: HttpMethod.HttpDelete,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers",
    validator: validate_FlushStageAuthorizersCache_402658092, base: "/",
    makeUrl: url_FlushStageAuthorizersCache_402658093,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_FlushStageCache_402658106 = ref object of OpenApiRestCall_402656035
proc url_FlushStageCache_402658108(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "stage_name" in path, "`stage_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages/"),
                 (kind: VariableSegment, value: "stage_name"),
                 (kind: ConstantSegment, value: "/cache/data")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_FlushStageCache_402658107(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Flushes a stage's cache.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## stage_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## stage 
                                                                                                                    ## to 
                                                                                                                    ## flush 
                                                                                                                    ## its 
                                                                                                                    ## cache.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402658109 = path.getOrDefault("restapi_id")
  valid_402658109 = validateParameter(valid_402658109, JString, required = true,
                                      default = nil)
  if valid_402658109 != nil:
    section.add "restapi_id", valid_402658109
  var valid_402658110 = path.getOrDefault("stage_name")
  valid_402658110 = validateParameter(valid_402658110, JString, required = true,
                                      default = nil)
  if valid_402658110 != nil:
    section.add "stage_name", valid_402658110
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658111 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658111 = validateParameter(valid_402658111, JString,
                                      required = false, default = nil)
  if valid_402658111 != nil:
    section.add "X-Amz-Security-Token", valid_402658111
  var valid_402658112 = header.getOrDefault("X-Amz-Signature")
  valid_402658112 = validateParameter(valid_402658112, JString,
                                      required = false, default = nil)
  if valid_402658112 != nil:
    section.add "X-Amz-Signature", valid_402658112
  var valid_402658113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658113 = validateParameter(valid_402658113, JString,
                                      required = false, default = nil)
  if valid_402658113 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658113
  var valid_402658114 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658114 = validateParameter(valid_402658114, JString,
                                      required = false, default = nil)
  if valid_402658114 != nil:
    section.add "X-Amz-Algorithm", valid_402658114
  var valid_402658115 = header.getOrDefault("X-Amz-Date")
  valid_402658115 = validateParameter(valid_402658115, JString,
                                      required = false, default = nil)
  if valid_402658115 != nil:
    section.add "X-Amz-Date", valid_402658115
  var valid_402658116 = header.getOrDefault("X-Amz-Credential")
  valid_402658116 = validateParameter(valid_402658116, JString,
                                      required = false, default = nil)
  if valid_402658116 != nil:
    section.add "X-Amz-Credential", valid_402658116
  var valid_402658117 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658117 = validateParameter(valid_402658117, JString,
                                      required = false, default = nil)
  if valid_402658117 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658117
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658118: Call_FlushStageCache_402658106; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Flushes a stage's cache.
                                                                                         ## 
  let valid = call_402658118.validator(path, query, header, formData, body, _)
  let scheme = call_402658118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658118.makeUrl(scheme.get, call_402658118.host, call_402658118.base,
                                   call_402658118.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658118, uri, valid, _)

proc call*(call_402658119: Call_FlushStageCache_402658106; restapiId: string;
           stageName: string): Recallable =
  ## flushStageCache
  ## Flushes a stage's cache.
  ##   restapiId: string (required)
                             ##            : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                               ## stageName: string (required)
                                                                                                               ##            
                                                                                                               ## : 
                                                                                                               ## [Required] 
                                                                                                               ## The 
                                                                                                               ## name 
                                                                                                               ## of 
                                                                                                               ## the 
                                                                                                               ## stage 
                                                                                                               ## to 
                                                                                                               ## flush 
                                                                                                               ## its 
                                                                                                               ## cache.
  var path_402658120 = newJObject()
  add(path_402658120, "restapi_id", newJString(restapiId))
  add(path_402658120, "stage_name", newJString(stageName))
  result = call_402658119.call(path_402658120, nil, nil, nil, nil)

var flushStageCache* = Call_FlushStageCache_402658106(name: "flushStageCache",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/stages/{stage_name}/cache/data",
    validator: validate_FlushStageCache_402658107, base: "/",
    makeUrl: url_FlushStageCache_402658108, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GenerateClientCertificate_402658136 = ref object of OpenApiRestCall_402656035
proc url_GenerateClientCertificate_402658138(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GenerateClientCertificate_402658137(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Generates a <a>ClientCertificate</a> resource.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658139 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658139 = validateParameter(valid_402658139, JString,
                                      required = false, default = nil)
  if valid_402658139 != nil:
    section.add "X-Amz-Security-Token", valid_402658139
  var valid_402658140 = header.getOrDefault("X-Amz-Signature")
  valid_402658140 = validateParameter(valid_402658140, JString,
                                      required = false, default = nil)
  if valid_402658140 != nil:
    section.add "X-Amz-Signature", valid_402658140
  var valid_402658141 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658141 = validateParameter(valid_402658141, JString,
                                      required = false, default = nil)
  if valid_402658141 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658141
  var valid_402658142 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658142 = validateParameter(valid_402658142, JString,
                                      required = false, default = nil)
  if valid_402658142 != nil:
    section.add "X-Amz-Algorithm", valid_402658142
  var valid_402658143 = header.getOrDefault("X-Amz-Date")
  valid_402658143 = validateParameter(valid_402658143, JString,
                                      required = false, default = nil)
  if valid_402658143 != nil:
    section.add "X-Amz-Date", valid_402658143
  var valid_402658144 = header.getOrDefault("X-Amz-Credential")
  valid_402658144 = validateParameter(valid_402658144, JString,
                                      required = false, default = nil)
  if valid_402658144 != nil:
    section.add "X-Amz-Credential", valid_402658144
  var valid_402658145 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658145 = validateParameter(valid_402658145, JString,
                                      required = false, default = nil)
  if valid_402658145 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658145
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658147: Call_GenerateClientCertificate_402658136;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Generates a <a>ClientCertificate</a> resource.
                                                                                         ## 
  let valid = call_402658147.validator(path, query, header, formData, body, _)
  let scheme = call_402658147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658147.makeUrl(scheme.get, call_402658147.host, call_402658147.base,
                                   call_402658147.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658147, uri, valid, _)

proc call*(call_402658148: Call_GenerateClientCertificate_402658136;
           body: JsonNode): Recallable =
  ## generateClientCertificate
  ## Generates a <a>ClientCertificate</a> resource.
  ##   body: JObject (required)
  var body_402658149 = newJObject()
  if body != nil:
    body_402658149 = body
  result = call_402658148.call(nil, nil, nil, nil, body_402658149)

var generateClientCertificate* = Call_GenerateClientCertificate_402658136(
    name: "generateClientCertificate", meth: HttpMethod.HttpPost,
    host: "apigateway.amazonaws.com", route: "/clientcertificates",
    validator: validate_GenerateClientCertificate_402658137, base: "/",
    makeUrl: url_GenerateClientCertificate_402658138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetClientCertificates_402658121 = ref object of OpenApiRestCall_402656035
proc url_GetClientCertificates_402658123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetClientCertificates_402658122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets a collection of <a>ClientCertificate</a> resources.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402658124 = query.getOrDefault("position")
  valid_402658124 = validateParameter(valid_402658124, JString,
                                      required = false, default = nil)
  if valid_402658124 != nil:
    section.add "position", valid_402658124
  var valid_402658125 = query.getOrDefault("limit")
  valid_402658125 = validateParameter(valid_402658125, JInt, required = false,
                                      default = nil)
  if valid_402658125 != nil:
    section.add "limit", valid_402658125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658126 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658126 = validateParameter(valid_402658126, JString,
                                      required = false, default = nil)
  if valid_402658126 != nil:
    section.add "X-Amz-Security-Token", valid_402658126
  var valid_402658127 = header.getOrDefault("X-Amz-Signature")
  valid_402658127 = validateParameter(valid_402658127, JString,
                                      required = false, default = nil)
  if valid_402658127 != nil:
    section.add "X-Amz-Signature", valid_402658127
  var valid_402658128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658128 = validateParameter(valid_402658128, JString,
                                      required = false, default = nil)
  if valid_402658128 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658128
  var valid_402658129 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658129 = validateParameter(valid_402658129, JString,
                                      required = false, default = nil)
  if valid_402658129 != nil:
    section.add "X-Amz-Algorithm", valid_402658129
  var valid_402658130 = header.getOrDefault("X-Amz-Date")
  valid_402658130 = validateParameter(valid_402658130, JString,
                                      required = false, default = nil)
  if valid_402658130 != nil:
    section.add "X-Amz-Date", valid_402658130
  var valid_402658131 = header.getOrDefault("X-Amz-Credential")
  valid_402658131 = validateParameter(valid_402658131, JString,
                                      required = false, default = nil)
  if valid_402658131 != nil:
    section.add "X-Amz-Credential", valid_402658131
  var valid_402658132 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658132 = validateParameter(valid_402658132, JString,
                                      required = false, default = nil)
  if valid_402658132 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658133: Call_GetClientCertificates_402658121;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets a collection of <a>ClientCertificate</a> resources.
                                                                                         ## 
  let valid = call_402658133.validator(path, query, header, formData, body, _)
  let scheme = call_402658133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658133.makeUrl(scheme.get, call_402658133.host, call_402658133.base,
                                   call_402658133.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658133, uri, valid, _)

proc call*(call_402658134: Call_GetClientCertificates_402658121;
           position: string = ""; limit: int = 0): Recallable =
  ## getClientCertificates
  ## Gets a collection of <a>ClientCertificate</a> resources.
  ##   position: string
                                                             ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                    ## limit: int
                                                                                                                                    ##        
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## maximum 
                                                                                                                                    ## number 
                                                                                                                                    ## of 
                                                                                                                                    ## returned 
                                                                                                                                    ## results 
                                                                                                                                    ## per 
                                                                                                                                    ## page. 
                                                                                                                                    ## The 
                                                                                                                                    ## default 
                                                                                                                                    ## value 
                                                                                                                                    ## is 
                                                                                                                                    ## 25 
                                                                                                                                    ## and 
                                                                                                                                    ## the 
                                                                                                                                    ## maximum 
                                                                                                                                    ## value 
                                                                                                                                    ## is 
                                                                                                                                    ## 500.
  var query_402658135 = newJObject()
  add(query_402658135, "position", newJString(position))
  add(query_402658135, "limit", newJInt(limit))
  result = call_402658134.call(nil, query_402658135, nil, nil, nil)

var getClientCertificates* = Call_GetClientCertificates_402658121(
    name: "getClientCertificates", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com", route: "/clientcertificates",
    validator: validate_GetClientCertificates_402658122, base: "/",
    makeUrl: url_GetClientCertificates_402658123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAccount_402658150 = ref object of OpenApiRestCall_402656035
proc url_GetAccount_402658152(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAccount_402658151(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets information about the current <a>Account</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658153 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658153 = validateParameter(valid_402658153, JString,
                                      required = false, default = nil)
  if valid_402658153 != nil:
    section.add "X-Amz-Security-Token", valid_402658153
  var valid_402658154 = header.getOrDefault("X-Amz-Signature")
  valid_402658154 = validateParameter(valid_402658154, JString,
                                      required = false, default = nil)
  if valid_402658154 != nil:
    section.add "X-Amz-Signature", valid_402658154
  var valid_402658155 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658155 = validateParameter(valid_402658155, JString,
                                      required = false, default = nil)
  if valid_402658155 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658155
  var valid_402658156 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658156 = validateParameter(valid_402658156, JString,
                                      required = false, default = nil)
  if valid_402658156 != nil:
    section.add "X-Amz-Algorithm", valid_402658156
  var valid_402658157 = header.getOrDefault("X-Amz-Date")
  valid_402658157 = validateParameter(valid_402658157, JString,
                                      required = false, default = nil)
  if valid_402658157 != nil:
    section.add "X-Amz-Date", valid_402658157
  var valid_402658158 = header.getOrDefault("X-Amz-Credential")
  valid_402658158 = validateParameter(valid_402658158, JString,
                                      required = false, default = nil)
  if valid_402658158 != nil:
    section.add "X-Amz-Credential", valid_402658158
  var valid_402658159 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658159 = validateParameter(valid_402658159, JString,
                                      required = false, default = nil)
  if valid_402658159 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658159
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658160: Call_GetAccount_402658150; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets information about the current <a>Account</a> resource.
                                                                                         ## 
  let valid = call_402658160.validator(path, query, header, formData, body, _)
  let scheme = call_402658160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658160.makeUrl(scheme.get, call_402658160.host, call_402658160.base,
                                   call_402658160.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658160, uri, valid, _)

proc call*(call_402658161: Call_GetAccount_402658150): Recallable =
  ## getAccount
  ## Gets information about the current <a>Account</a> resource.
  result = call_402658161.call(nil, nil, nil, nil, nil)

var getAccount* = Call_GetAccount_402658150(name: "getAccount",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/account", validator: validate_GetAccount_402658151, base: "/",
    makeUrl: url_GetAccount_402658152, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAccount_402658162 = ref object of OpenApiRestCall_402656035
proc url_UpdateAccount_402658164(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateAccount_402658163(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Changes information about the current <a>Account</a> resource.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658165 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658165 = validateParameter(valid_402658165, JString,
                                      required = false, default = nil)
  if valid_402658165 != nil:
    section.add "X-Amz-Security-Token", valid_402658165
  var valid_402658166 = header.getOrDefault("X-Amz-Signature")
  valid_402658166 = validateParameter(valid_402658166, JString,
                                      required = false, default = nil)
  if valid_402658166 != nil:
    section.add "X-Amz-Signature", valid_402658166
  var valid_402658167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658167 = validateParameter(valid_402658167, JString,
                                      required = false, default = nil)
  if valid_402658167 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658167
  var valid_402658168 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658168 = validateParameter(valid_402658168, JString,
                                      required = false, default = nil)
  if valid_402658168 != nil:
    section.add "X-Amz-Algorithm", valid_402658168
  var valid_402658169 = header.getOrDefault("X-Amz-Date")
  valid_402658169 = validateParameter(valid_402658169, JString,
                                      required = false, default = nil)
  if valid_402658169 != nil:
    section.add "X-Amz-Date", valid_402658169
  var valid_402658170 = header.getOrDefault("X-Amz-Credential")
  valid_402658170 = validateParameter(valid_402658170, JString,
                                      required = false, default = nil)
  if valid_402658170 != nil:
    section.add "X-Amz-Credential", valid_402658170
  var valid_402658171 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658171 = validateParameter(valid_402658171, JString,
                                      required = false, default = nil)
  if valid_402658171 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658171
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658173: Call_UpdateAccount_402658162; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Changes information about the current <a>Account</a> resource.
                                                                                         ## 
  let valid = call_402658173.validator(path, query, header, formData, body, _)
  let scheme = call_402658173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658173.makeUrl(scheme.get, call_402658173.host, call_402658173.base,
                                   call_402658173.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658173, uri, valid, _)

proc call*(call_402658174: Call_UpdateAccount_402658162; body: JsonNode): Recallable =
  ## updateAccount
  ## Changes information about the current <a>Account</a> resource.
  ##   body: JObject (required)
  var body_402658175 = newJObject()
  if body != nil:
    body_402658175 = body
  result = call_402658174.call(nil, nil, nil, nil, body_402658175)

var updateAccount* = Call_UpdateAccount_402658162(name: "updateAccount",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/account", validator: validate_UpdateAccount_402658163, base: "/",
    makeUrl: url_UpdateAccount_402658164, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetExport_402658176 = ref object of OpenApiRestCall_402656035
proc url_GetExport_402658178(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "stage_name" in path, "`stage_name` is a required path parameter"
  assert "export_type" in path, "`export_type` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages/"),
                 (kind: VariableSegment, value: "stage_name"),
                 (kind: ConstantSegment, value: "/exports/"),
                 (kind: VariableSegment, value: "export_type")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetExport_402658177(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Exports a deployed version of a <a>RestApi</a> in a specified format.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## stage_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## <a>Stage</a> 
                                                                                                                    ## that 
                                                                                                                    ## will 
                                                                                                                    ## be 
                                                                                                                    ## exported.
  ##   
                                                                                                                                ## export_type: JString (required)
                                                                                                                                ##              
                                                                                                                                ## : 
                                                                                                                                ## [Required] 
                                                                                                                                ## The 
                                                                                                                                ## type 
                                                                                                                                ## of 
                                                                                                                                ## export. 
                                                                                                                                ## Acceptable 
                                                                                                                                ## values 
                                                                                                                                ## are 
                                                                                                                                ## 'oas30' 
                                                                                                                                ## for 
                                                                                                                                ## OpenAPI 
                                                                                                                                ## 3.0.x 
                                                                                                                                ## and 
                                                                                                                                ## 'swagger' 
                                                                                                                                ## for 
                                                                                                                                ## Swagger/OpenAPI 
                                                                                                                                ## 2.0.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402658179 = path.getOrDefault("restapi_id")
  valid_402658179 = validateParameter(valid_402658179, JString, required = true,
                                      default = nil)
  if valid_402658179 != nil:
    section.add "restapi_id", valid_402658179
  var valid_402658180 = path.getOrDefault("stage_name")
  valid_402658180 = validateParameter(valid_402658180, JString, required = true,
                                      default = nil)
  if valid_402658180 != nil:
    section.add "stage_name", valid_402658180
  var valid_402658181 = path.getOrDefault("export_type")
  valid_402658181 = validateParameter(valid_402658181, JString, required = true,
                                      default = nil)
  if valid_402658181 != nil:
    section.add "export_type", valid_402658181
  result.add "path", section
  ## parameters in `query` object:
  ##   parameters.2.value: JString
  ##   parameters.1.value: JString
  ##   parameters.1.key: JString
  ##   parameters.2.key: JString
  ##   parameters.0.value: JString
  ##   parameters.0.key: JString
  section = newJObject()
  var valid_402658182 = query.getOrDefault("parameters.2.value")
  valid_402658182 = validateParameter(valid_402658182, JString,
                                      required = false, default = nil)
  if valid_402658182 != nil:
    section.add "parameters.2.value", valid_402658182
  var valid_402658183 = query.getOrDefault("parameters.1.value")
  valid_402658183 = validateParameter(valid_402658183, JString,
                                      required = false, default = nil)
  if valid_402658183 != nil:
    section.add "parameters.1.value", valid_402658183
  var valid_402658184 = query.getOrDefault("parameters.1.key")
  valid_402658184 = validateParameter(valid_402658184, JString,
                                      required = false, default = nil)
  if valid_402658184 != nil:
    section.add "parameters.1.key", valid_402658184
  var valid_402658185 = query.getOrDefault("parameters.2.key")
  valid_402658185 = validateParameter(valid_402658185, JString,
                                      required = false, default = nil)
  if valid_402658185 != nil:
    section.add "parameters.2.key", valid_402658185
  var valid_402658186 = query.getOrDefault("parameters.0.value")
  valid_402658186 = validateParameter(valid_402658186, JString,
                                      required = false, default = nil)
  if valid_402658186 != nil:
    section.add "parameters.0.value", valid_402658186
  var valid_402658187 = query.getOrDefault("parameters.0.key")
  valid_402658187 = validateParameter(valid_402658187, JString,
                                      required = false, default = nil)
  if valid_402658187 != nil:
    section.add "parameters.0.key", valid_402658187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   Accept: JString
                               ##         : The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.
  ##   
                                                                                                                                                                                                                                                                                                                                                                             ## X-Amz-Date: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                   ## X-Amz-Credential: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                               ## X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658188 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658188 = validateParameter(valid_402658188, JString,
                                      required = false, default = nil)
  if valid_402658188 != nil:
    section.add "X-Amz-Security-Token", valid_402658188
  var valid_402658189 = header.getOrDefault("X-Amz-Signature")
  valid_402658189 = validateParameter(valid_402658189, JString,
                                      required = false, default = nil)
  if valid_402658189 != nil:
    section.add "X-Amz-Signature", valid_402658189
  var valid_402658190 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658190 = validateParameter(valid_402658190, JString,
                                      required = false, default = nil)
  if valid_402658190 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658190
  var valid_402658191 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658191 = validateParameter(valid_402658191, JString,
                                      required = false, default = nil)
  if valid_402658191 != nil:
    section.add "X-Amz-Algorithm", valid_402658191
  var valid_402658192 = header.getOrDefault("Accept")
  valid_402658192 = validateParameter(valid_402658192, JString,
                                      required = false, default = nil)
  if valid_402658192 != nil:
    section.add "Accept", valid_402658192
  var valid_402658193 = header.getOrDefault("X-Amz-Date")
  valid_402658193 = validateParameter(valid_402658193, JString,
                                      required = false, default = nil)
  if valid_402658193 != nil:
    section.add "X-Amz-Date", valid_402658193
  var valid_402658194 = header.getOrDefault("X-Amz-Credential")
  valid_402658194 = validateParameter(valid_402658194, JString,
                                      required = false, default = nil)
  if valid_402658194 != nil:
    section.add "X-Amz-Credential", valid_402658194
  var valid_402658195 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658195 = validateParameter(valid_402658195, JString,
                                      required = false, default = nil)
  if valid_402658195 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658195
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658196: Call_GetExport_402658176; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Exports a deployed version of a <a>RestApi</a> in a specified format.
                                                                                         ## 
  let valid = call_402658196.validator(path, query, header, formData, body, _)
  let scheme = call_402658196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658196.makeUrl(scheme.get, call_402658196.host, call_402658196.base,
                                   call_402658196.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658196, uri, valid, _)

proc call*(call_402658197: Call_GetExport_402658176; restapiId: string;
           stageName: string; exportType: string; parameters2Value: string = "";
           parameters1Value: string = ""; parameters1Key: string = "";
           parameters2Key: string = ""; parameters0Value: string = "";
           parameters0Key: string = ""): Recallable =
  ## getExport
  ## Exports a deployed version of a <a>RestApi</a> in a specified format.
  ##   
                                                                          ## parameters2Value: string
  ##   
                                                                                                     ## parameters1Value: string
  ##   
                                                                                                                                ## parameters1Key: string
  ##   
                                                                                                                                                         ## restapiId: string (required)
                                                                                                                                                         ##            
                                                                                                                                                         ## : 
                                                                                                                                                         ## [Required] 
                                                                                                                                                         ## The 
                                                                                                                                                         ## string 
                                                                                                                                                         ## identifier 
                                                                                                                                                         ## of 
                                                                                                                                                         ## the 
                                                                                                                                                         ## associated 
                                                                                                                                                         ## <a>RestApi</a>.
  ##   
                                                                                                                                                                           ## parameters2Key: string
  ##   
                                                                                                                                                                                                    ## parameters0Value: string
  ##   
                                                                                                                                                                                                                               ## parameters0Key: string
  ##   
                                                                                                                                                                                                                                                        ## stageName: string (required)
                                                                                                                                                                                                                                                        ##            
                                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                                        ## [Required] 
                                                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                                                        ## name 
                                                                                                                                                                                                                                                        ## of 
                                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                                        ## <a>Stage</a> 
                                                                                                                                                                                                                                                        ## that 
                                                                                                                                                                                                                                                        ## will 
                                                                                                                                                                                                                                                        ## be 
                                                                                                                                                                                                                                                        ## exported.
  ##   
                                                                                                                                                                                                                                                                    ## exportType: string (required)
                                                                                                                                                                                                                                                                    ##             
                                                                                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                                                                                    ## [Required] 
                                                                                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                                                                                    ## type 
                                                                                                                                                                                                                                                                    ## of 
                                                                                                                                                                                                                                                                    ## export. 
                                                                                                                                                                                                                                                                    ## Acceptable 
                                                                                                                                                                                                                                                                    ## values 
                                                                                                                                                                                                                                                                    ## are 
                                                                                                                                                                                                                                                                    ## 'oas30' 
                                                                                                                                                                                                                                                                    ## for 
                                                                                                                                                                                                                                                                    ## OpenAPI 
                                                                                                                                                                                                                                                                    ## 3.0.x 
                                                                                                                                                                                                                                                                    ## and 
                                                                                                                                                                                                                                                                    ## 'swagger' 
                                                                                                                                                                                                                                                                    ## for 
                                                                                                                                                                                                                                                                    ## Swagger/OpenAPI 
                                                                                                                                                                                                                                                                    ## 2.0.
  var path_402658198 = newJObject()
  var query_402658199 = newJObject()
  add(query_402658199, "parameters.2.value", newJString(parameters2Value))
  add(query_402658199, "parameters.1.value", newJString(parameters1Value))
  add(query_402658199, "parameters.1.key", newJString(parameters1Key))
  add(path_402658198, "restapi_id", newJString(restapiId))
  add(query_402658199, "parameters.2.key", newJString(parameters2Key))
  add(query_402658199, "parameters.0.value", newJString(parameters0Value))
  add(query_402658199, "parameters.0.key", newJString(parameters0Key))
  add(path_402658198, "stage_name", newJString(stageName))
  add(path_402658198, "export_type", newJString(exportType))
  result = call_402658197.call(path_402658198, query_402658199, nil, nil, nil)

var getExport* = Call_GetExport_402658176(name: "getExport",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}",
    validator: validate_GetExport_402658177, base: "/", makeUrl: url_GetExport_402658178,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGatewayResponses_402658200 = ref object of OpenApiRestCall_402656035
proc url_GetGatewayResponses_402658202(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/gatewayresponses")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetGatewayResponses_402658201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the <a>GatewayResponses</a> collection on the given <a>RestApi</a>. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default <a>GatewayResponses</a> collection for the supported response types.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402658203 = path.getOrDefault("restapi_id")
  valid_402658203 = validateParameter(valid_402658203, JString, required = true,
                                      default = nil)
  if valid_402658203 != nil:
    section.add "restapi_id", valid_402658203
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set. The <a>GatewayResponse</a> collection does not support pagination and the position does not apply here.
  ##   
                                                                                                                                                                                                                 ## limit: JInt
                                                                                                                                                                                                                 ##        
                                                                                                                                                                                                                 ## : 
                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                 ## maximum 
                                                                                                                                                                                                                 ## number 
                                                                                                                                                                                                                 ## of 
                                                                                                                                                                                                                 ## returned 
                                                                                                                                                                                                                 ## results 
                                                                                                                                                                                                                 ## per 
                                                                                                                                                                                                                 ## page. 
                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                 ## default 
                                                                                                                                                                                                                 ## value 
                                                                                                                                                                                                                 ## is 
                                                                                                                                                                                                                 ## 25 
                                                                                                                                                                                                                 ## and 
                                                                                                                                                                                                                 ## the 
                                                                                                                                                                                                                 ## maximum 
                                                                                                                                                                                                                 ## value 
                                                                                                                                                                                                                 ## is 
                                                                                                                                                                                                                 ## 500. 
                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                 ## <a>GatewayResponses</a> 
                                                                                                                                                                                                                 ## collection 
                                                                                                                                                                                                                 ## does 
                                                                                                                                                                                                                 ## not 
                                                                                                                                                                                                                 ## support 
                                                                                                                                                                                                                 ## pagination 
                                                                                                                                                                                                                 ## and 
                                                                                                                                                                                                                 ## the 
                                                                                                                                                                                                                 ## limit 
                                                                                                                                                                                                                 ## does 
                                                                                                                                                                                                                 ## not 
                                                                                                                                                                                                                 ## apply 
                                                                                                                                                                                                                 ## here.
  section = newJObject()
  var valid_402658204 = query.getOrDefault("position")
  valid_402658204 = validateParameter(valid_402658204, JString,
                                      required = false, default = nil)
  if valid_402658204 != nil:
    section.add "position", valid_402658204
  var valid_402658205 = query.getOrDefault("limit")
  valid_402658205 = validateParameter(valid_402658205, JInt, required = false,
                                      default = nil)
  if valid_402658205 != nil:
    section.add "limit", valid_402658205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658206 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658206 = validateParameter(valid_402658206, JString,
                                      required = false, default = nil)
  if valid_402658206 != nil:
    section.add "X-Amz-Security-Token", valid_402658206
  var valid_402658207 = header.getOrDefault("X-Amz-Signature")
  valid_402658207 = validateParameter(valid_402658207, JString,
                                      required = false, default = nil)
  if valid_402658207 != nil:
    section.add "X-Amz-Signature", valid_402658207
  var valid_402658208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658208 = validateParameter(valid_402658208, JString,
                                      required = false, default = nil)
  if valid_402658208 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658208
  var valid_402658209 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658209 = validateParameter(valid_402658209, JString,
                                      required = false, default = nil)
  if valid_402658209 != nil:
    section.add "X-Amz-Algorithm", valid_402658209
  var valid_402658210 = header.getOrDefault("X-Amz-Date")
  valid_402658210 = validateParameter(valid_402658210, JString,
                                      required = false, default = nil)
  if valid_402658210 != nil:
    section.add "X-Amz-Date", valid_402658210
  var valid_402658211 = header.getOrDefault("X-Amz-Credential")
  valid_402658211 = validateParameter(valid_402658211, JString,
                                      required = false, default = nil)
  if valid_402658211 != nil:
    section.add "X-Amz-Credential", valid_402658211
  var valid_402658212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658212 = validateParameter(valid_402658212, JString,
                                      required = false, default = nil)
  if valid_402658212 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658212
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658213: Call_GetGatewayResponses_402658200;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the <a>GatewayResponses</a> collection on the given <a>RestApi</a>. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default <a>GatewayResponses</a> collection for the supported response types.
                                                                                         ## 
  let valid = call_402658213.validator(path, query, header, formData, body, _)
  let scheme = call_402658213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658213.makeUrl(scheme.get, call_402658213.host, call_402658213.base,
                                   call_402658213.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658213, uri, valid, _)

proc call*(call_402658214: Call_GetGatewayResponses_402658200;
           restapiId: string; position: string = ""; limit: int = 0): Recallable =
  ## getGatewayResponses
  ## Gets the <a>GatewayResponses</a> collection on the given <a>RestApi</a>. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default <a>GatewayResponses</a> collection for the supported response types.
  ##   
                                                                                                                                                                                                                                                                                ## position: string
                                                                                                                                                                                                                                                                                ##           
                                                                                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                                                ## current 
                                                                                                                                                                                                                                                                                ## pagination 
                                                                                                                                                                                                                                                                                ## position 
                                                                                                                                                                                                                                                                                ## in 
                                                                                                                                                                                                                                                                                ## the 
                                                                                                                                                                                                                                                                                ## paged 
                                                                                                                                                                                                                                                                                ## result 
                                                                                                                                                                                                                                                                                ## set. 
                                                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                                                ## <a>GatewayResponse</a> 
                                                                                                                                                                                                                                                                                ## collection 
                                                                                                                                                                                                                                                                                ## does 
                                                                                                                                                                                                                                                                                ## not 
                                                                                                                                                                                                                                                                                ## support 
                                                                                                                                                                                                                                                                                ## pagination 
                                                                                                                                                                                                                                                                                ## and 
                                                                                                                                                                                                                                                                                ## the 
                                                                                                                                                                                                                                                                                ## position 
                                                                                                                                                                                                                                                                                ## does 
                                                                                                                                                                                                                                                                                ## not 
                                                                                                                                                                                                                                                                                ## apply 
                                                                                                                                                                                                                                                                                ## here.
  ##   
                                                                                                                                                                                                                                                                                        ## restapiId: string (required)
                                                                                                                                                                                                                                                                                        ##            
                                                                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                                                                        ## [Required] 
                                                                                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                                                                                        ## string 
                                                                                                                                                                                                                                                                                        ## identifier 
                                                                                                                                                                                                                                                                                        ## of 
                                                                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                                                                        ## associated 
                                                                                                                                                                                                                                                                                        ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                                                                                                          ## limit: int
                                                                                                                                                                                                                                                                                                          ##        
                                                                                                                                                                                                                                                                                                          ## : 
                                                                                                                                                                                                                                                                                                          ## The 
                                                                                                                                                                                                                                                                                                          ## maximum 
                                                                                                                                                                                                                                                                                                          ## number 
                                                                                                                                                                                                                                                                                                          ## of 
                                                                                                                                                                                                                                                                                                          ## returned 
                                                                                                                                                                                                                                                                                                          ## results 
                                                                                                                                                                                                                                                                                                          ## per 
                                                                                                                                                                                                                                                                                                          ## page. 
                                                                                                                                                                                                                                                                                                          ## The 
                                                                                                                                                                                                                                                                                                          ## default 
                                                                                                                                                                                                                                                                                                          ## value 
                                                                                                                                                                                                                                                                                                          ## is 
                                                                                                                                                                                                                                                                                                          ## 25 
                                                                                                                                                                                                                                                                                                          ## and 
                                                                                                                                                                                                                                                                                                          ## the 
                                                                                                                                                                                                                                                                                                          ## maximum 
                                                                                                                                                                                                                                                                                                          ## value 
                                                                                                                                                                                                                                                                                                          ## is 
                                                                                                                                                                                                                                                                                                          ## 500. 
                                                                                                                                                                                                                                                                                                          ## The 
                                                                                                                                                                                                                                                                                                          ## <a>GatewayResponses</a> 
                                                                                                                                                                                                                                                                                                          ## collection 
                                                                                                                                                                                                                                                                                                          ## does 
                                                                                                                                                                                                                                                                                                          ## not 
                                                                                                                                                                                                                                                                                                          ## support 
                                                                                                                                                                                                                                                                                                          ## pagination 
                                                                                                                                                                                                                                                                                                          ## and 
                                                                                                                                                                                                                                                                                                          ## the 
                                                                                                                                                                                                                                                                                                          ## limit 
                                                                                                                                                                                                                                                                                                          ## does 
                                                                                                                                                                                                                                                                                                          ## not 
                                                                                                                                                                                                                                                                                                          ## apply 
                                                                                                                                                                                                                                                                                                          ## here.
  var path_402658215 = newJObject()
  var query_402658216 = newJObject()
  add(query_402658216, "position", newJString(position))
  add(path_402658215, "restapi_id", newJString(restapiId))
  add(query_402658216, "limit", newJInt(limit))
  result = call_402658214.call(path_402658215, query_402658216, nil, nil, nil)

var getGatewayResponses* = Call_GetGatewayResponses_402658200(
    name: "getGatewayResponses", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/gatewayresponses",
    validator: validate_GetGatewayResponses_402658201, base: "/",
    makeUrl: url_GetGatewayResponses_402658202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModelTemplate_402658217 = ref object of OpenApiRestCall_402656035
proc url_GetModelTemplate_402658219(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "model_name" in path, "`model_name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/models/"),
                 (kind: VariableSegment, value: "model_name"),
                 (kind: ConstantSegment, value: "/default_template")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetModelTemplate_402658218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Generates a sample mapping template that can be used to transform a payload into the structure of a model.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  ##   
                                                                                                                    ## model_name: JString (required)
                                                                                                                    ##             
                                                                                                                    ## : 
                                                                                                                    ## [Required] 
                                                                                                                    ## The 
                                                                                                                    ## name 
                                                                                                                    ## of 
                                                                                                                    ## the 
                                                                                                                    ## model 
                                                                                                                    ## for 
                                                                                                                    ## which 
                                                                                                                    ## to 
                                                                                                                    ## generate 
                                                                                                                    ## a 
                                                                                                                    ## template.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402658220 = path.getOrDefault("restapi_id")
  valid_402658220 = validateParameter(valid_402658220, JString, required = true,
                                      default = nil)
  if valid_402658220 != nil:
    section.add "restapi_id", valid_402658220
  var valid_402658221 = path.getOrDefault("model_name")
  valid_402658221 = validateParameter(valid_402658221, JString, required = true,
                                      default = nil)
  if valid_402658221 != nil:
    section.add "model_name", valid_402658221
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658222 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658222 = validateParameter(valid_402658222, JString,
                                      required = false, default = nil)
  if valid_402658222 != nil:
    section.add "X-Amz-Security-Token", valid_402658222
  var valid_402658223 = header.getOrDefault("X-Amz-Signature")
  valid_402658223 = validateParameter(valid_402658223, JString,
                                      required = false, default = nil)
  if valid_402658223 != nil:
    section.add "X-Amz-Signature", valid_402658223
  var valid_402658224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658224 = validateParameter(valid_402658224, JString,
                                      required = false, default = nil)
  if valid_402658224 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658224
  var valid_402658225 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658225 = validateParameter(valid_402658225, JString,
                                      required = false, default = nil)
  if valid_402658225 != nil:
    section.add "X-Amz-Algorithm", valid_402658225
  var valid_402658226 = header.getOrDefault("X-Amz-Date")
  valid_402658226 = validateParameter(valid_402658226, JString,
                                      required = false, default = nil)
  if valid_402658226 != nil:
    section.add "X-Amz-Date", valid_402658226
  var valid_402658227 = header.getOrDefault("X-Amz-Credential")
  valid_402658227 = validateParameter(valid_402658227, JString,
                                      required = false, default = nil)
  if valid_402658227 != nil:
    section.add "X-Amz-Credential", valid_402658227
  var valid_402658228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658228 = validateParameter(valid_402658228, JString,
                                      required = false, default = nil)
  if valid_402658228 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658228
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658229: Call_GetModelTemplate_402658217;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Generates a sample mapping template that can be used to transform a payload into the structure of a model.
                                                                                         ## 
  let valid = call_402658229.validator(path, query, header, formData, body, _)
  let scheme = call_402658229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658229.makeUrl(scheme.get, call_402658229.host, call_402658229.base,
                                   call_402658229.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658229, uri, valid, _)

proc call*(call_402658230: Call_GetModelTemplate_402658217; restapiId: string;
           modelName: string): Recallable =
  ## getModelTemplate
  ## Generates a sample mapping template that can be used to transform a payload into the structure of a model.
  ##   
                                                                                                               ## restapiId: string (required)
                                                                                                               ##            
                                                                                                               ## : 
                                                                                                               ## [Required] 
                                                                                                               ## The 
                                                                                                               ## string 
                                                                                                               ## identifier 
                                                                                                               ## of 
                                                                                                               ## the 
                                                                                                               ## associated 
                                                                                                               ## <a>RestApi</a>.
  ##   
                                                                                                                                 ## modelName: string (required)
                                                                                                                                 ##            
                                                                                                                                 ## : 
                                                                                                                                 ## [Required] 
                                                                                                                                 ## The 
                                                                                                                                 ## name 
                                                                                                                                 ## of 
                                                                                                                                 ## the 
                                                                                                                                 ## model 
                                                                                                                                 ## for 
                                                                                                                                 ## which 
                                                                                                                                 ## to 
                                                                                                                                 ## generate 
                                                                                                                                 ## a 
                                                                                                                                 ## template.
  var path_402658231 = newJObject()
  add(path_402658231, "restapi_id", newJString(restapiId))
  add(path_402658231, "model_name", newJString(modelName))
  result = call_402658230.call(path_402658231, nil, nil, nil, nil)

var getModelTemplate* = Call_GetModelTemplate_402658217(
    name: "getModelTemplate", meth: HttpMethod.HttpGet,
    host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/models/{model_name}/default_template",
    validator: validate_GetModelTemplate_402658218, base: "/",
    makeUrl: url_GetModelTemplate_402658219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResources_402658232 = ref object of OpenApiRestCall_402656035
proc url_GetResources_402658234(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/resources")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetResources_402658233(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists information about a collection of <a>Resource</a> resources.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   restapi_id: JString (required)
                                 ##             : [Required] The string identifier of the associated <a>RestApi</a>.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `restapi_id` field"
  var valid_402658235 = path.getOrDefault("restapi_id")
  valid_402658235 = validateParameter(valid_402658235, JString, required = true,
                                      default = nil)
  if valid_402658235 != nil:
    section.add "restapi_id", valid_402658235
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## embed: JArray
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## A 
                                                                                                         ## query 
                                                                                                         ## parameter 
                                                                                                         ## used 
                                                                                                         ## to 
                                                                                                         ## retrieve 
                                                                                                         ## the 
                                                                                                         ## specified 
                                                                                                         ## resources 
                                                                                                         ## embedded 
                                                                                                         ## in 
                                                                                                         ## the 
                                                                                                         ## returned 
                                                                                                         ## <a>Resources</a> 
                                                                                                         ## resource 
                                                                                                         ## in 
                                                                                                         ## the 
                                                                                                         ## response. 
                                                                                                         ## This 
                                                                                                         ## <code>embed</code> 
                                                                                                         ## parameter 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## a 
                                                                                                         ## list 
                                                                                                         ## of 
                                                                                                         ## comma-separated 
                                                                                                         ## strings. 
                                                                                                         ## Currently, 
                                                                                                         ## the 
                                                                                                         ## request 
                                                                                                         ## supports 
                                                                                                         ## only 
                                                                                                         ## retrieval 
                                                                                                         ## of 
                                                                                                         ## the 
                                                                                                         ## embedded 
                                                                                                         ## <a>Method</a> 
                                                                                                         ## resources 
                                                                                                         ## this 
                                                                                                         ## way. 
                                                                                                         ## The 
                                                                                                         ## query 
                                                                                                         ## parameter 
                                                                                                         ## value 
                                                                                                         ## must 
                                                                                                         ## be 
                                                                                                         ## a 
                                                                                                         ## single-valued 
                                                                                                         ## list 
                                                                                                         ## and 
                                                                                                         ## contain 
                                                                                                         ## the 
                                                                                                         ## <code>"methods"</code> 
                                                                                                         ## string. 
                                                                                                         ## For 
                                                                                                         ## example, 
                                                                                                         ## <code>GET 
                                                                                                         ## /restapis/{restapi_id}/resources?embed=methods</code>.
  ##   
                                                                                                                                                                  ## limit: JInt
                                                                                                                                                                  ##        
                                                                                                                                                                  ## : 
                                                                                                                                                                  ## The 
                                                                                                                                                                  ## maximum 
                                                                                                                                                                  ## number 
                                                                                                                                                                  ## of 
                                                                                                                                                                  ## returned 
                                                                                                                                                                  ## results 
                                                                                                                                                                  ## per 
                                                                                                                                                                  ## page. 
                                                                                                                                                                  ## The 
                                                                                                                                                                  ## default 
                                                                                                                                                                  ## value 
                                                                                                                                                                  ## is 
                                                                                                                                                                  ## 25 
                                                                                                                                                                  ## and 
                                                                                                                                                                  ## the 
                                                                                                                                                                  ## maximum 
                                                                                                                                                                  ## value 
                                                                                                                                                                  ## is 
                                                                                                                                                                  ## 500.
  section = newJObject()
  var valid_402658236 = query.getOrDefault("position")
  valid_402658236 = validateParameter(valid_402658236, JString,
                                      required = false, default = nil)
  if valid_402658236 != nil:
    section.add "position", valid_402658236
  var valid_402658237 = query.getOrDefault("embed")
  valid_402658237 = validateParameter(valid_402658237, JArray, required = false,
                                      default = nil)
  if valid_402658237 != nil:
    section.add "embed", valid_402658237
  var valid_402658238 = query.getOrDefault("limit")
  valid_402658238 = validateParameter(valid_402658238, JInt, required = false,
                                      default = nil)
  if valid_402658238 != nil:
    section.add "limit", valid_402658238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658239 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658239 = validateParameter(valid_402658239, JString,
                                      required = false, default = nil)
  if valid_402658239 != nil:
    section.add "X-Amz-Security-Token", valid_402658239
  var valid_402658240 = header.getOrDefault("X-Amz-Signature")
  valid_402658240 = validateParameter(valid_402658240, JString,
                                      required = false, default = nil)
  if valid_402658240 != nil:
    section.add "X-Amz-Signature", valid_402658240
  var valid_402658241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658241 = validateParameter(valid_402658241, JString,
                                      required = false, default = nil)
  if valid_402658241 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658241
  var valid_402658242 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658242 = validateParameter(valid_402658242, JString,
                                      required = false, default = nil)
  if valid_402658242 != nil:
    section.add "X-Amz-Algorithm", valid_402658242
  var valid_402658243 = header.getOrDefault("X-Amz-Date")
  valid_402658243 = validateParameter(valid_402658243, JString,
                                      required = false, default = nil)
  if valid_402658243 != nil:
    section.add "X-Amz-Date", valid_402658243
  var valid_402658244 = header.getOrDefault("X-Amz-Credential")
  valid_402658244 = validateParameter(valid_402658244, JString,
                                      required = false, default = nil)
  if valid_402658244 != nil:
    section.add "X-Amz-Credential", valid_402658244
  var valid_402658245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658245 = validateParameter(valid_402658245, JString,
                                      required = false, default = nil)
  if valid_402658245 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658245
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658246: Call_GetResources_402658232; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists information about a collection of <a>Resource</a> resources.
                                                                                         ## 
  let valid = call_402658246.validator(path, query, header, formData, body, _)
  let scheme = call_402658246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658246.makeUrl(scheme.get, call_402658246.host, call_402658246.base,
                                   call_402658246.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658246, uri, valid, _)

proc call*(call_402658247: Call_GetResources_402658232; restapiId: string;
           position: string = ""; embed: JsonNode = nil; limit: int = 0): Recallable =
  ## getResources
  ## Lists information about a collection of <a>Resource</a> resources.
  ##   position: string
                                                                       ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                              ## embed: JArray
                                                                                                                                              ##        
                                                                                                                                              ## : 
                                                                                                                                              ## A 
                                                                                                                                              ## query 
                                                                                                                                              ## parameter 
                                                                                                                                              ## used 
                                                                                                                                              ## to 
                                                                                                                                              ## retrieve 
                                                                                                                                              ## the 
                                                                                                                                              ## specified 
                                                                                                                                              ## resources 
                                                                                                                                              ## embedded 
                                                                                                                                              ## in 
                                                                                                                                              ## the 
                                                                                                                                              ## returned 
                                                                                                                                              ## <a>Resources</a> 
                                                                                                                                              ## resource 
                                                                                                                                              ## in 
                                                                                                                                              ## the 
                                                                                                                                              ## response. 
                                                                                                                                              ## This 
                                                                                                                                              ## <code>embed</code> 
                                                                                                                                              ## parameter 
                                                                                                                                              ## value 
                                                                                                                                              ## is 
                                                                                                                                              ## a 
                                                                                                                                              ## list 
                                                                                                                                              ## of 
                                                                                                                                              ## comma-separated 
                                                                                                                                              ## strings. 
                                                                                                                                              ## Currently, 
                                                                                                                                              ## the 
                                                                                                                                              ## request 
                                                                                                                                              ## supports 
                                                                                                                                              ## only 
                                                                                                                                              ## retrieval 
                                                                                                                                              ## of 
                                                                                                                                              ## the 
                                                                                                                                              ## embedded 
                                                                                                                                              ## <a>Method</a> 
                                                                                                                                              ## resources 
                                                                                                                                              ## this 
                                                                                                                                              ## way. 
                                                                                                                                              ## The 
                                                                                                                                              ## query 
                                                                                                                                              ## parameter 
                                                                                                                                              ## value 
                                                                                                                                              ## must 
                                                                                                                                              ## be 
                                                                                                                                              ## a 
                                                                                                                                              ## single-valued 
                                                                                                                                              ## list 
                                                                                                                                              ## and 
                                                                                                                                              ## contain 
                                                                                                                                              ## the 
                                                                                                                                              ## <code>"methods"</code> 
                                                                                                                                              ## string. 
                                                                                                                                              ## For 
                                                                                                                                              ## example, 
                                                                                                                                              ## <code>GET 
                                                                                                                                              ## /restapis/{restapi_id}/resources?embed=methods</code>.
  ##   
                                                                                                                                                                                                       ## restapiId: string (required)
                                                                                                                                                                                                       ##            
                                                                                                                                                                                                       ## : 
                                                                                                                                                                                                       ## [Required] 
                                                                                                                                                                                                       ## The 
                                                                                                                                                                                                       ## string 
                                                                                                                                                                                                       ## identifier 
                                                                                                                                                                                                       ## of 
                                                                                                                                                                                                       ## the 
                                                                                                                                                                                                       ## associated 
                                                                                                                                                                                                       ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                         ## limit: int
                                                                                                                                                                                                                         ##        
                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                         ## maximum 
                                                                                                                                                                                                                         ## number 
                                                                                                                                                                                                                         ## of 
                                                                                                                                                                                                                         ## returned 
                                                                                                                                                                                                                         ## results 
                                                                                                                                                                                                                         ## per 
                                                                                                                                                                                                                         ## page. 
                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                         ## default 
                                                                                                                                                                                                                         ## value 
                                                                                                                                                                                                                         ## is 
                                                                                                                                                                                                                         ## 25 
                                                                                                                                                                                                                         ## and 
                                                                                                                                                                                                                         ## the 
                                                                                                                                                                                                                         ## maximum 
                                                                                                                                                                                                                         ## value 
                                                                                                                                                                                                                         ## is 
                                                                                                                                                                                                                         ## 500.
  var path_402658248 = newJObject()
  var query_402658249 = newJObject()
  add(query_402658249, "position", newJString(position))
  if embed != nil:
    query_402658249.add "embed", embed
  add(path_402658248, "restapi_id", newJString(restapiId))
  add(query_402658249, "limit", newJInt(limit))
  result = call_402658247.call(path_402658248, query_402658249, nil, nil, nil)

var getResources* = Call_GetResources_402658232(name: "getResources",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/restapis/{restapi_id}/resources", validator: validate_GetResources_402658233,
    base: "/", makeUrl: url_GetResources_402658234,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSdk_402658250 = ref object of OpenApiRestCall_402656035
proc url_GetSdk_402658252(protocol: Scheme; host: string; base: string;
                          route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "restapi_id" in path, "`restapi_id` is a required path parameter"
  assert "stage_name" in path, "`stage_name` is a required path parameter"
  assert "sdk_type" in path, "`sdk_type` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/restapis/"),
                 (kind: VariableSegment, value: "restapi_id"),
                 (kind: ConstantSegment, value: "/stages/"),
                 (kind: VariableSegment, value: "stage_name"),
                 (kind: ConstantSegment, value: "/sdks/"),
                 (kind: VariableSegment, value: "sdk_type")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetSdk_402658251(path: JsonNode; query: JsonNode;
                               header: JsonNode; formData: JsonNode;
                               body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Generates a client SDK for a <a>RestApi</a> and <a>Stage</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sdk_type: JString (required)
                                 ##           : [Required] The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported.
  ##   
                                                                                                                                                                                                                                                                                ## restapi_id: JString (required)
                                                                                                                                                                                                                                                                                ##             
                                                                                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                                                                                ## [Required] 
                                                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                                                ## string 
                                                                                                                                                                                                                                                                                ## identifier 
                                                                                                                                                                                                                                                                                ## of 
                                                                                                                                                                                                                                                                                ## the 
                                                                                                                                                                                                                                                                                ## associated 
                                                                                                                                                                                                                                                                                ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                                                                                                  ## stage_name: JString (required)
                                                                                                                                                                                                                                                                                                  ##             
                                                                                                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                                                                                                  ## [Required] 
                                                                                                                                                                                                                                                                                                  ## The 
                                                                                                                                                                                                                                                                                                  ## name 
                                                                                                                                                                                                                                                                                                  ## of 
                                                                                                                                                                                                                                                                                                  ## the 
                                                                                                                                                                                                                                                                                                  ## <a>Stage</a> 
                                                                                                                                                                                                                                                                                                  ## that 
                                                                                                                                                                                                                                                                                                  ## the 
                                                                                                                                                                                                                                                                                                  ## SDK 
                                                                                                                                                                                                                                                                                                  ## will 
                                                                                                                                                                                                                                                                                                  ## use.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `sdk_type` field"
  var valid_402658253 = path.getOrDefault("sdk_type")
  valid_402658253 = validateParameter(valid_402658253, JString, required = true,
                                      default = nil)
  if valid_402658253 != nil:
    section.add "sdk_type", valid_402658253
  var valid_402658254 = path.getOrDefault("restapi_id")
  valid_402658254 = validateParameter(valid_402658254, JString, required = true,
                                      default = nil)
  if valid_402658254 != nil:
    section.add "restapi_id", valid_402658254
  var valid_402658255 = path.getOrDefault("stage_name")
  valid_402658255 = validateParameter(valid_402658255, JString, required = true,
                                      default = nil)
  if valid_402658255 != nil:
    section.add "stage_name", valid_402658255
  result.add "path", section
  ## parameters in `query` object:
  ##   parameters.2.value: JString
  ##   parameters.1.value: JString
  ##   parameters.1.key: JString
  ##   parameters.2.key: JString
  ##   parameters.0.value: JString
  ##   parameters.0.key: JString
  section = newJObject()
  var valid_402658256 = query.getOrDefault("parameters.2.value")
  valid_402658256 = validateParameter(valid_402658256, JString,
                                      required = false, default = nil)
  if valid_402658256 != nil:
    section.add "parameters.2.value", valid_402658256
  var valid_402658257 = query.getOrDefault("parameters.1.value")
  valid_402658257 = validateParameter(valid_402658257, JString,
                                      required = false, default = nil)
  if valid_402658257 != nil:
    section.add "parameters.1.value", valid_402658257
  var valid_402658258 = query.getOrDefault("parameters.1.key")
  valid_402658258 = validateParameter(valid_402658258, JString,
                                      required = false, default = nil)
  if valid_402658258 != nil:
    section.add "parameters.1.key", valid_402658258
  var valid_402658259 = query.getOrDefault("parameters.2.key")
  valid_402658259 = validateParameter(valid_402658259, JString,
                                      required = false, default = nil)
  if valid_402658259 != nil:
    section.add "parameters.2.key", valid_402658259
  var valid_402658260 = query.getOrDefault("parameters.0.value")
  valid_402658260 = validateParameter(valid_402658260, JString,
                                      required = false, default = nil)
  if valid_402658260 != nil:
    section.add "parameters.0.value", valid_402658260
  var valid_402658261 = query.getOrDefault("parameters.0.key")
  valid_402658261 = validateParameter(valid_402658261, JString,
                                      required = false, default = nil)
  if valid_402658261 != nil:
    section.add "parameters.0.key", valid_402658261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658262 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658262 = validateParameter(valid_402658262, JString,
                                      required = false, default = nil)
  if valid_402658262 != nil:
    section.add "X-Amz-Security-Token", valid_402658262
  var valid_402658263 = header.getOrDefault("X-Amz-Signature")
  valid_402658263 = validateParameter(valid_402658263, JString,
                                      required = false, default = nil)
  if valid_402658263 != nil:
    section.add "X-Amz-Signature", valid_402658263
  var valid_402658264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658264 = validateParameter(valid_402658264, JString,
                                      required = false, default = nil)
  if valid_402658264 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658264
  var valid_402658265 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658265 = validateParameter(valid_402658265, JString,
                                      required = false, default = nil)
  if valid_402658265 != nil:
    section.add "X-Amz-Algorithm", valid_402658265
  var valid_402658266 = header.getOrDefault("X-Amz-Date")
  valid_402658266 = validateParameter(valid_402658266, JString,
                                      required = false, default = nil)
  if valid_402658266 != nil:
    section.add "X-Amz-Date", valid_402658266
  var valid_402658267 = header.getOrDefault("X-Amz-Credential")
  valid_402658267 = validateParameter(valid_402658267, JString,
                                      required = false, default = nil)
  if valid_402658267 != nil:
    section.add "X-Amz-Credential", valid_402658267
  var valid_402658268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658268 = validateParameter(valid_402658268, JString,
                                      required = false, default = nil)
  if valid_402658268 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658269: Call_GetSdk_402658250; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Generates a client SDK for a <a>RestApi</a> and <a>Stage</a>.
                                                                                         ## 
  let valid = call_402658269.validator(path, query, header, formData, body, _)
  let scheme = call_402658269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658269.makeUrl(scheme.get, call_402658269.host, call_402658269.base,
                                   call_402658269.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658269, uri, valid, _)

proc call*(call_402658270: Call_GetSdk_402658250; sdkType: string;
           restapiId: string; stageName: string; parameters2Value: string = "";
           parameters1Value: string = ""; parameters1Key: string = "";
           parameters2Key: string = ""; parameters0Value: string = "";
           parameters0Key: string = ""): Recallable =
  ## getSdk
  ## Generates a client SDK for a <a>RestApi</a> and <a>Stage</a>.
  ##   sdkType: string (required)
                                                                  ##          : [Required] The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported.
  ##   
                                                                                                                                                                                                                                                                                                                ## parameters2Value: string
  ##   
                                                                                                                                                                                                                                                                                                                                           ## parameters1Value: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                      ## parameters1Key: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                                               ## restapiId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                               ##            
                                                                                                                                                                                                                                                                                                                                                                                               ## : 
                                                                                                                                                                                                                                                                                                                                                                                               ## [Required] 
                                                                                                                                                                                                                                                                                                                                                                                               ## The 
                                                                                                                                                                                                                                                                                                                                                                                               ## string 
                                                                                                                                                                                                                                                                                                                                                                                               ## identifier 
                                                                                                                                                                                                                                                                                                                                                                                               ## of 
                                                                                                                                                                                                                                                                                                                                                                                               ## the 
                                                                                                                                                                                                                                                                                                                                                                                               ## associated 
                                                                                                                                                                                                                                                                                                                                                                                               ## <a>RestApi</a>.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                 ## parameters2Key: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                          ## parameters0Value: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ## parameters0Key: string
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## stageName: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ##            
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## [Required] 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## name 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## of 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## <a>Stage</a> 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## that 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## the 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## SDK 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## will 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## use.
  var path_402658271 = newJObject()
  var query_402658272 = newJObject()
  add(path_402658271, "sdk_type", newJString(sdkType))
  add(query_402658272, "parameters.2.value", newJString(parameters2Value))
  add(query_402658272, "parameters.1.value", newJString(parameters1Value))
  add(query_402658272, "parameters.1.key", newJString(parameters1Key))
  add(path_402658271, "restapi_id", newJString(restapiId))
  add(query_402658272, "parameters.2.key", newJString(parameters2Key))
  add(query_402658272, "parameters.0.value", newJString(parameters0Value))
  add(query_402658272, "parameters.0.key", newJString(parameters0Key))
  add(path_402658271, "stage_name", newJString(stageName))
  result = call_402658270.call(path_402658271, query_402658272, nil, nil, nil)

var getSdk* = Call_GetSdk_402658250(name: "getSdk", meth: HttpMethod.HttpGet,
                                    host: "apigateway.amazonaws.com", route: "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}",
                                    validator: validate_GetSdk_402658251,
                                    base: "/", makeUrl: url_GetSdk_402658252,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSdkType_402658273 = ref object of OpenApiRestCall_402656035
proc url_GetSdkType_402658275(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "sdktype_id" in path, "`sdktype_id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/sdktypes/"),
                 (kind: VariableSegment, value: "sdktype_id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetSdkType_402658274(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   sdktype_id: JString (required)
                                 ##             : [Required] The identifier of the queried <a>SdkType</a> instance.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `sdktype_id` field"
  var valid_402658276 = path.getOrDefault("sdktype_id")
  valid_402658276 = validateParameter(valid_402658276, JString, required = true,
                                      default = nil)
  if valid_402658276 != nil:
    section.add "sdktype_id", valid_402658276
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658277 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658277 = validateParameter(valid_402658277, JString,
                                      required = false, default = nil)
  if valid_402658277 != nil:
    section.add "X-Amz-Security-Token", valid_402658277
  var valid_402658278 = header.getOrDefault("X-Amz-Signature")
  valid_402658278 = validateParameter(valid_402658278, JString,
                                      required = false, default = nil)
  if valid_402658278 != nil:
    section.add "X-Amz-Signature", valid_402658278
  var valid_402658279 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658279 = validateParameter(valid_402658279, JString,
                                      required = false, default = nil)
  if valid_402658279 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658279
  var valid_402658280 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658280 = validateParameter(valid_402658280, JString,
                                      required = false, default = nil)
  if valid_402658280 != nil:
    section.add "X-Amz-Algorithm", valid_402658280
  var valid_402658281 = header.getOrDefault("X-Amz-Date")
  valid_402658281 = validateParameter(valid_402658281, JString,
                                      required = false, default = nil)
  if valid_402658281 != nil:
    section.add "X-Amz-Date", valid_402658281
  var valid_402658282 = header.getOrDefault("X-Amz-Credential")
  valid_402658282 = validateParameter(valid_402658282, JString,
                                      required = false, default = nil)
  if valid_402658282 != nil:
    section.add "X-Amz-Credential", valid_402658282
  var valid_402658283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658283 = validateParameter(valid_402658283, JString,
                                      required = false, default = nil)
  if valid_402658283 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658283
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658284: Call_GetSdkType_402658273; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402658284.validator(path, query, header, formData, body, _)
  let scheme = call_402658284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658284.makeUrl(scheme.get, call_402658284.host, call_402658284.base,
                                   call_402658284.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658284, uri, valid, _)

proc call*(call_402658285: Call_GetSdkType_402658273; sdktypeId: string): Recallable =
  ## getSdkType
  ##   sdktypeId: string (required)
               ##            : [Required] The identifier of the queried <a>SdkType</a> instance.
  var path_402658286 = newJObject()
  add(path_402658286, "sdktype_id", newJString(sdktypeId))
  result = call_402658285.call(path_402658286, nil, nil, nil, nil)

var getSdkType* = Call_GetSdkType_402658273(name: "getSdkType",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/sdktypes/{sdktype_id}", validator: validate_GetSdkType_402658274,
    base: "/", makeUrl: url_GetSdkType_402658275,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSdkTypes_402658287 = ref object of OpenApiRestCall_402656035
proc url_GetSdkTypes_402658289(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSdkTypes_402658288(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## limit: JInt
                                                                                                         ##        
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## maximum 
                                                                                                         ## number 
                                                                                                         ## of 
                                                                                                         ## returned 
                                                                                                         ## results 
                                                                                                         ## per 
                                                                                                         ## page. 
                                                                                                         ## The 
                                                                                                         ## default 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 25 
                                                                                                         ## and 
                                                                                                         ## the 
                                                                                                         ## maximum 
                                                                                                         ## value 
                                                                                                         ## is 
                                                                                                         ## 500.
  section = newJObject()
  var valid_402658290 = query.getOrDefault("position")
  valid_402658290 = validateParameter(valid_402658290, JString,
                                      required = false, default = nil)
  if valid_402658290 != nil:
    section.add "position", valid_402658290
  var valid_402658291 = query.getOrDefault("limit")
  valid_402658291 = validateParameter(valid_402658291, JInt, required = false,
                                      default = nil)
  if valid_402658291 != nil:
    section.add "limit", valid_402658291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658292 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658292 = validateParameter(valid_402658292, JString,
                                      required = false, default = nil)
  if valid_402658292 != nil:
    section.add "X-Amz-Security-Token", valid_402658292
  var valid_402658293 = header.getOrDefault("X-Amz-Signature")
  valid_402658293 = validateParameter(valid_402658293, JString,
                                      required = false, default = nil)
  if valid_402658293 != nil:
    section.add "X-Amz-Signature", valid_402658293
  var valid_402658294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658294 = validateParameter(valid_402658294, JString,
                                      required = false, default = nil)
  if valid_402658294 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658294
  var valid_402658295 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658295 = validateParameter(valid_402658295, JString,
                                      required = false, default = nil)
  if valid_402658295 != nil:
    section.add "X-Amz-Algorithm", valid_402658295
  var valid_402658296 = header.getOrDefault("X-Amz-Date")
  valid_402658296 = validateParameter(valid_402658296, JString,
                                      required = false, default = nil)
  if valid_402658296 != nil:
    section.add "X-Amz-Date", valid_402658296
  var valid_402658297 = header.getOrDefault("X-Amz-Credential")
  valid_402658297 = validateParameter(valid_402658297, JString,
                                      required = false, default = nil)
  if valid_402658297 != nil:
    section.add "X-Amz-Credential", valid_402658297
  var valid_402658298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658298 = validateParameter(valid_402658298, JString,
                                      required = false, default = nil)
  if valid_402658298 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658298
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658299: Call_GetSdkTypes_402658287; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  let valid = call_402658299.validator(path, query, header, formData, body, _)
  let scheme = call_402658299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658299.makeUrl(scheme.get, call_402658299.host, call_402658299.base,
                                   call_402658299.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658299, uri, valid, _)

proc call*(call_402658300: Call_GetSdkTypes_402658287; position: string = "";
           limit: int = 0): Recallable =
  ## getSdkTypes
  ##   position: string
                ##           : The current pagination position in the paged result set.
  ##   
                                                                                       ## limit: int
                                                                                       ##        
                                                                                       ## : 
                                                                                       ## The 
                                                                                       ## maximum 
                                                                                       ## number 
                                                                                       ## of 
                                                                                       ## returned 
                                                                                       ## results 
                                                                                       ## per 
                                                                                       ## page. 
                                                                                       ## The 
                                                                                       ## default 
                                                                                       ## value 
                                                                                       ## is 
                                                                                       ## 25 
                                                                                       ## and 
                                                                                       ## the 
                                                                                       ## maximum 
                                                                                       ## value 
                                                                                       ## is 
                                                                                       ## 500.
  var query_402658301 = newJObject()
  add(query_402658301, "position", newJString(position))
  add(query_402658301, "limit", newJInt(limit))
  result = call_402658300.call(nil, query_402658301, nil, nil, nil)

var getSdkTypes* = Call_GetSdkTypes_402658287(name: "getSdkTypes",
    meth: HttpMethod.HttpGet, host: "apigateway.amazonaws.com",
    route: "/sdktypes", validator: validate_GetSdkTypes_402658288, base: "/",
    makeUrl: url_GetSdkTypes_402658289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_TagResource_402658319 = ref object of OpenApiRestCall_402656035
proc url_TagResource_402658321(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "resource_arn" in path, "`resource_arn` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/tags/"),
                 (kind: VariableSegment, value: "resource_arn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_TagResource_402658320(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds or updates a tag on a given resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_arn: JString (required)
                                 ##               : [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_arn` field"
  var valid_402658322 = path.getOrDefault("resource_arn")
  valid_402658322 = validateParameter(valid_402658322, JString, required = true,
                                      default = nil)
  if valid_402658322 != nil:
    section.add "resource_arn", valid_402658322
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658323 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658323 = validateParameter(valid_402658323, JString,
                                      required = false, default = nil)
  if valid_402658323 != nil:
    section.add "X-Amz-Security-Token", valid_402658323
  var valid_402658324 = header.getOrDefault("X-Amz-Signature")
  valid_402658324 = validateParameter(valid_402658324, JString,
                                      required = false, default = nil)
  if valid_402658324 != nil:
    section.add "X-Amz-Signature", valid_402658324
  var valid_402658325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658325 = validateParameter(valid_402658325, JString,
                                      required = false, default = nil)
  if valid_402658325 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658325
  var valid_402658326 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658326 = validateParameter(valid_402658326, JString,
                                      required = false, default = nil)
  if valid_402658326 != nil:
    section.add "X-Amz-Algorithm", valid_402658326
  var valid_402658327 = header.getOrDefault("X-Amz-Date")
  valid_402658327 = validateParameter(valid_402658327, JString,
                                      required = false, default = nil)
  if valid_402658327 != nil:
    section.add "X-Amz-Date", valid_402658327
  var valid_402658328 = header.getOrDefault("X-Amz-Credential")
  valid_402658328 = validateParameter(valid_402658328, JString,
                                      required = false, default = nil)
  if valid_402658328 != nil:
    section.add "X-Amz-Credential", valid_402658328
  var valid_402658329 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658329 = validateParameter(valid_402658329, JString,
                                      required = false, default = nil)
  if valid_402658329 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658329
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658331: Call_TagResource_402658319; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds or updates a tag on a given resource.
                                                                                         ## 
  let valid = call_402658331.validator(path, query, header, formData, body, _)
  let scheme = call_402658331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658331.makeUrl(scheme.get, call_402658331.host, call_402658331.base,
                                   call_402658331.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658331, uri, valid, _)

proc call*(call_402658332: Call_TagResource_402658319; body: JsonNode;
           resourceArn: string): Recallable =
  ## tagResource
  ## Adds or updates a tag on a given resource.
  ##   body: JObject (required)
  ##   resourceArn: string (required)
                               ##              : [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded.
  var path_402658333 = newJObject()
  var body_402658334 = newJObject()
  if body != nil:
    body_402658334 = body
  add(path_402658333, "resource_arn", newJString(resourceArn))
  result = call_402658332.call(path_402658333, nil, nil, nil, body_402658334)

var tagResource* = Call_TagResource_402658319(name: "tagResource",
    meth: HttpMethod.HttpPut, host: "apigateway.amazonaws.com",
    route: "/tags/{resource_arn}", validator: validate_TagResource_402658320,
    base: "/", makeUrl: url_TagResource_402658321,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTags_402658302 = ref object of OpenApiRestCall_402656035
proc url_GetTags_402658304(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "resource_arn" in path, "`resource_arn` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/tags/"),
                 (kind: VariableSegment, value: "resource_arn")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetTags_402658303(path: JsonNode; query: JsonNode;
                                header: JsonNode; formData: JsonNode;
                                body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the <a>Tags</a> collection for a given resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_arn: JString (required)
                                 ##               : [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_arn` field"
  var valid_402658305 = path.getOrDefault("resource_arn")
  valid_402658305 = validateParameter(valid_402658305, JString, required = true,
                                      default = nil)
  if valid_402658305 != nil:
    section.add "resource_arn", valid_402658305
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : (Not currently supported) The current pagination position in the paged result set.
  ##   
                                                                                                                                   ## limit: JInt
                                                                                                                                   ##        
                                                                                                                                   ## : 
                                                                                                                                   ## (Not 
                                                                                                                                   ## currently 
                                                                                                                                   ## supported) 
                                                                                                                                   ## The 
                                                                                                                                   ## maximum 
                                                                                                                                   ## number 
                                                                                                                                   ## of 
                                                                                                                                   ## returned 
                                                                                                                                   ## results 
                                                                                                                                   ## per 
                                                                                                                                   ## page. 
                                                                                                                                   ## The 
                                                                                                                                   ## default 
                                                                                                                                   ## value 
                                                                                                                                   ## is 
                                                                                                                                   ## 25 
                                                                                                                                   ## and 
                                                                                                                                   ## the 
                                                                                                                                   ## maximum 
                                                                                                                                   ## value 
                                                                                                                                   ## is 
                                                                                                                                   ## 500.
  section = newJObject()
  var valid_402658306 = query.getOrDefault("position")
  valid_402658306 = validateParameter(valid_402658306, JString,
                                      required = false, default = nil)
  if valid_402658306 != nil:
    section.add "position", valid_402658306
  var valid_402658307 = query.getOrDefault("limit")
  valid_402658307 = validateParameter(valid_402658307, JInt, required = false,
                                      default = nil)
  if valid_402658307 != nil:
    section.add "limit", valid_402658307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658308 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658308 = validateParameter(valid_402658308, JString,
                                      required = false, default = nil)
  if valid_402658308 != nil:
    section.add "X-Amz-Security-Token", valid_402658308
  var valid_402658309 = header.getOrDefault("X-Amz-Signature")
  valid_402658309 = validateParameter(valid_402658309, JString,
                                      required = false, default = nil)
  if valid_402658309 != nil:
    section.add "X-Amz-Signature", valid_402658309
  var valid_402658310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658310 = validateParameter(valid_402658310, JString,
                                      required = false, default = nil)
  if valid_402658310 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658310
  var valid_402658311 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658311 = validateParameter(valid_402658311, JString,
                                      required = false, default = nil)
  if valid_402658311 != nil:
    section.add "X-Amz-Algorithm", valid_402658311
  var valid_402658312 = header.getOrDefault("X-Amz-Date")
  valid_402658312 = validateParameter(valid_402658312, JString,
                                      required = false, default = nil)
  if valid_402658312 != nil:
    section.add "X-Amz-Date", valid_402658312
  var valid_402658313 = header.getOrDefault("X-Amz-Credential")
  valid_402658313 = validateParameter(valid_402658313, JString,
                                      required = false, default = nil)
  if valid_402658313 != nil:
    section.add "X-Amz-Credential", valid_402658313
  var valid_402658314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658314 = validateParameter(valid_402658314, JString,
                                      required = false, default = nil)
  if valid_402658314 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658314
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658315: Call_GetTags_402658302; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the <a>Tags</a> collection for a given resource.
                                                                                         ## 
  let valid = call_402658315.validator(path, query, header, formData, body, _)
  let scheme = call_402658315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658315.makeUrl(scheme.get, call_402658315.host, call_402658315.base,
                                   call_402658315.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658315, uri, valid, _)

proc call*(call_402658316: Call_GetTags_402658302; resourceArn: string;
           position: string = ""; limit: int = 0): Recallable =
  ## getTags
  ## Gets the <a>Tags</a> collection for a given resource.
  ##   position: string
                                                          ##           : (Not currently supported) The current pagination position in the paged result set.
  ##   
                                                                                                                                                           ## limit: int
                                                                                                                                                           ##        
                                                                                                                                                           ## : 
                                                                                                                                                           ## (Not 
                                                                                                                                                           ## currently 
                                                                                                                                                           ## supported) 
                                                                                                                                                           ## The 
                                                                                                                                                           ## maximum 
                                                                                                                                                           ## number 
                                                                                                                                                           ## of 
                                                                                                                                                           ## returned 
                                                                                                                                                           ## results 
                                                                                                                                                           ## per 
                                                                                                                                                           ## page. 
                                                                                                                                                           ## The 
                                                                                                                                                           ## default 
                                                                                                                                                           ## value 
                                                                                                                                                           ## is 
                                                                                                                                                           ## 25 
                                                                                                                                                           ## and 
                                                                                                                                                           ## the 
                                                                                                                                                           ## maximum 
                                                                                                                                                           ## value 
                                                                                                                                                           ## is 
                                                                                                                                                           ## 500.
  ##   
                                                                                                                                                                  ## resourceArn: string (required)
                                                                                                                                                                  ##              
                                                                                                                                                                  ## : 
                                                                                                                                                                  ## [Required] 
                                                                                                                                                                  ## The 
                                                                                                                                                                  ## ARN 
                                                                                                                                                                  ## of 
                                                                                                                                                                  ## a 
                                                                                                                                                                  ## resource 
                                                                                                                                                                  ## that 
                                                                                                                                                                  ## can 
                                                                                                                                                                  ## be 
                                                                                                                                                                  ## tagged. 
                                                                                                                                                                  ## The 
                                                                                                                                                                  ## resource 
                                                                                                                                                                  ## ARN 
                                                                                                                                                                  ## must 
                                                                                                                                                                  ## be 
                                                                                                                                                                  ## URL-encoded.
  var path_402658317 = newJObject()
  var query_402658318 = newJObject()
  add(query_402658318, "position", newJString(position))
  add(query_402658318, "limit", newJInt(limit))
  add(path_402658317, "resource_arn", newJString(resourceArn))
  result = call_402658316.call(path_402658317, query_402658318, nil, nil, nil)

var getTags* = Call_GetTags_402658302(name: "getTags", meth: HttpMethod.HttpGet,
                                      host: "apigateway.amazonaws.com",
                                      route: "/tags/{resource_arn}",
                                      validator: validate_GetTags_402658303,
                                      base: "/", makeUrl: url_GetTags_402658304,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUsage_402658335 = ref object of OpenApiRestCall_402656035
proc url_GetUsage_402658337(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId"),
                 (kind: ConstantSegment, value: "/usage#startDate&endDate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetUsage_402658336(path: JsonNode; query: JsonNode;
                                 header: JsonNode; formData: JsonNode;
                                 body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the usage data of a usage plan in a specified time interval.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the usage plan associated with the usage data.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402658338 = path.getOrDefault("usageplanId")
  valid_402658338 = validateParameter(valid_402658338, JString, required = true,
                                      default = nil)
  if valid_402658338 != nil:
    section.add "usageplanId", valid_402658338
  result.add "path", section
  ## parameters in `query` object:
  ##   position: JString
                                  ##           : The current pagination position in the paged result set.
  ##   
                                                                                                         ## startDate: JString (required)
                                                                                                         ##            
                                                                                                         ## : 
                                                                                                         ## [Required] 
                                                                                                         ## The 
                                                                                                         ## starting 
                                                                                                         ## date 
                                                                                                         ## (e.g., 
                                                                                                         ## 2016-01-01) 
                                                                                                         ## of 
                                                                                                         ## the 
                                                                                                         ## usage 
                                                                                                         ## data.
  ##   
                                                                                                                 ## keyId: JString
                                                                                                                 ##        
                                                                                                                 ## : 
                                                                                                                 ## The 
                                                                                                                 ## Id 
                                                                                                                 ## of 
                                                                                                                 ## the 
                                                                                                                 ## API 
                                                                                                                 ## key 
                                                                                                                 ## associated 
                                                                                                                 ## with 
                                                                                                                 ## the 
                                                                                                                 ## resultant 
                                                                                                                 ## usage 
                                                                                                                 ## data.
  ##   
                                                                                                                         ## limit: JInt
                                                                                                                         ##        
                                                                                                                         ## : 
                                                                                                                         ## The 
                                                                                                                         ## maximum 
                                                                                                                         ## number 
                                                                                                                         ## of 
                                                                                                                         ## returned 
                                                                                                                         ## results 
                                                                                                                         ## per 
                                                                                                                         ## page. 
                                                                                                                         ## The 
                                                                                                                         ## default 
                                                                                                                         ## value 
                                                                                                                         ## is 
                                                                                                                         ## 25 
                                                                                                                         ## and 
                                                                                                                         ## the 
                                                                                                                         ## maximum 
                                                                                                                         ## value 
                                                                                                                         ## is 
                                                                                                                         ## 500.
  ##   
                                                                                                                                ## endDate: JString (required)
                                                                                                                                ##          
                                                                                                                                ## : 
                                                                                                                                ## [Required] 
                                                                                                                                ## The 
                                                                                                                                ## ending 
                                                                                                                                ## date 
                                                                                                                                ## (e.g., 
                                                                                                                                ## 2016-12-31) 
                                                                                                                                ## of 
                                                                                                                                ## the 
                                                                                                                                ## usage 
                                                                                                                                ## data.
  section = newJObject()
  var valid_402658339 = query.getOrDefault("position")
  valid_402658339 = validateParameter(valid_402658339, JString,
                                      required = false, default = nil)
  if valid_402658339 != nil:
    section.add "position", valid_402658339
  assert query != nil,
         "query argument is necessary due to required `startDate` field"
  var valid_402658340 = query.getOrDefault("startDate")
  valid_402658340 = validateParameter(valid_402658340, JString, required = true,
                                      default = nil)
  if valid_402658340 != nil:
    section.add "startDate", valid_402658340
  var valid_402658341 = query.getOrDefault("keyId")
  valid_402658341 = validateParameter(valid_402658341, JString,
                                      required = false, default = nil)
  if valid_402658341 != nil:
    section.add "keyId", valid_402658341
  var valid_402658342 = query.getOrDefault("limit")
  valid_402658342 = validateParameter(valid_402658342, JInt, required = false,
                                      default = nil)
  if valid_402658342 != nil:
    section.add "limit", valid_402658342
  var valid_402658343 = query.getOrDefault("endDate")
  valid_402658343 = validateParameter(valid_402658343, JString, required = true,
                                      default = nil)
  if valid_402658343 != nil:
    section.add "endDate", valid_402658343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658344 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658344 = validateParameter(valid_402658344, JString,
                                      required = false, default = nil)
  if valid_402658344 != nil:
    section.add "X-Amz-Security-Token", valid_402658344
  var valid_402658345 = header.getOrDefault("X-Amz-Signature")
  valid_402658345 = validateParameter(valid_402658345, JString,
                                      required = false, default = nil)
  if valid_402658345 != nil:
    section.add "X-Amz-Signature", valid_402658345
  var valid_402658346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658346 = validateParameter(valid_402658346, JString,
                                      required = false, default = nil)
  if valid_402658346 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658346
  var valid_402658347 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658347 = validateParameter(valid_402658347, JString,
                                      required = false, default = nil)
  if valid_402658347 != nil:
    section.add "X-Amz-Algorithm", valid_402658347
  var valid_402658348 = header.getOrDefault("X-Amz-Date")
  valid_402658348 = validateParameter(valid_402658348, JString,
                                      required = false, default = nil)
  if valid_402658348 != nil:
    section.add "X-Amz-Date", valid_402658348
  var valid_402658349 = header.getOrDefault("X-Amz-Credential")
  valid_402658349 = validateParameter(valid_402658349, JString,
                                      required = false, default = nil)
  if valid_402658349 != nil:
    section.add "X-Amz-Credential", valid_402658349
  var valid_402658350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658350 = validateParameter(valid_402658350, JString,
                                      required = false, default = nil)
  if valid_402658350 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658350
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658351: Call_GetUsage_402658335; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the usage data of a usage plan in a specified time interval.
                                                                                         ## 
  let valid = call_402658351.validator(path, query, header, formData, body, _)
  let scheme = call_402658351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658351.makeUrl(scheme.get, call_402658351.host, call_402658351.base,
                                   call_402658351.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658351, uri, valid, _)

proc call*(call_402658352: Call_GetUsage_402658335; startDate: string;
           usageplanId: string; endDate: string; position: string = "";
           keyId: string = ""; limit: int = 0): Recallable =
  ## getUsage
  ## Gets the usage data of a usage plan in a specified time interval.
  ##   position: string
                                                                      ##           : The current pagination position in the paged result set.
  ##   
                                                                                                                                             ## startDate: string (required)
                                                                                                                                             ##            
                                                                                                                                             ## : 
                                                                                                                                             ## [Required] 
                                                                                                                                             ## The 
                                                                                                                                             ## starting 
                                                                                                                                             ## date 
                                                                                                                                             ## (e.g., 
                                                                                                                                             ## 2016-01-01) 
                                                                                                                                             ## of 
                                                                                                                                             ## the 
                                                                                                                                             ## usage 
                                                                                                                                             ## data.
  ##   
                                                                                                                                                     ## usageplanId: string (required)
                                                                                                                                                     ##              
                                                                                                                                                     ## : 
                                                                                                                                                     ## [Required] 
                                                                                                                                                     ## The 
                                                                                                                                                     ## Id 
                                                                                                                                                     ## of 
                                                                                                                                                     ## the 
                                                                                                                                                     ## usage 
                                                                                                                                                     ## plan 
                                                                                                                                                     ## associated 
                                                                                                                                                     ## with 
                                                                                                                                                     ## the 
                                                                                                                                                     ## usage 
                                                                                                                                                     ## data.
  ##   
                                                                                                                                                             ## keyId: string
                                                                                                                                                             ##        
                                                                                                                                                             ## : 
                                                                                                                                                             ## The 
                                                                                                                                                             ## Id 
                                                                                                                                                             ## of 
                                                                                                                                                             ## the 
                                                                                                                                                             ## API 
                                                                                                                                                             ## key 
                                                                                                                                                             ## associated 
                                                                                                                                                             ## with 
                                                                                                                                                             ## the 
                                                                                                                                                             ## resultant 
                                                                                                                                                             ## usage 
                                                                                                                                                             ## data.
  ##   
                                                                                                                                                                     ## limit: int
                                                                                                                                                                     ##        
                                                                                                                                                                     ## : 
                                                                                                                                                                     ## The 
                                                                                                                                                                     ## maximum 
                                                                                                                                                                     ## number 
                                                                                                                                                                     ## of 
                                                                                                                                                                     ## returned 
                                                                                                                                                                     ## results 
                                                                                                                                                                     ## per 
                                                                                                                                                                     ## page. 
                                                                                                                                                                     ## The 
                                                                                                                                                                     ## default 
                                                                                                                                                                     ## value 
                                                                                                                                                                     ## is 
                                                                                                                                                                     ## 25 
                                                                                                                                                                     ## and 
                                                                                                                                                                     ## the 
                                                                                                                                                                     ## maximum 
                                                                                                                                                                     ## value 
                                                                                                                                                                     ## is 
                                                                                                                                                                     ## 500.
  ##   
                                                                                                                                                                            ## endDate: string (required)
                                                                                                                                                                            ##          
                                                                                                                                                                            ## : 
                                                                                                                                                                            ## [Required] 
                                                                                                                                                                            ## The 
                                                                                                                                                                            ## ending 
                                                                                                                                                                            ## date 
                                                                                                                                                                            ## (e.g., 
                                                                                                                                                                            ## 2016-12-31) 
                                                                                                                                                                            ## of 
                                                                                                                                                                            ## the 
                                                                                                                                                                            ## usage 
                                                                                                                                                                            ## data.
  var path_402658353 = newJObject()
  var query_402658354 = newJObject()
  add(query_402658354, "position", newJString(position))
  add(query_402658354, "startDate", newJString(startDate))
  add(path_402658353, "usageplanId", newJString(usageplanId))
  add(query_402658354, "keyId", newJString(keyId))
  add(query_402658354, "limit", newJInt(limit))
  add(query_402658354, "endDate", newJString(endDate))
  result = call_402658352.call(path_402658353, query_402658354, nil, nil, nil)

var getUsage* = Call_GetUsage_402658335(name: "getUsage",
                                        meth: HttpMethod.HttpGet,
                                        host: "apigateway.amazonaws.com", route: "/usageplans/{usageplanId}/usage#startDate&endDate",
                                        validator: validate_GetUsage_402658336,
                                        base: "/", makeUrl: url_GetUsage_402658337,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_ImportApiKeys_402658355 = ref object of OpenApiRestCall_402656035
proc url_ImportApiKeys_402658357(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ImportApiKeys_402658356(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Import API keys from an external source, such as a CSV-formatted file.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   failonwarnings: JBool
                                  ##                 : A query parameter to indicate whether to rollback <a>ApiKey</a> importation (<code>true</code>) or not (<code>false</code>) when error is encountered.
  ##   
                                                                                                                                                                                                             ## mode: JString (required)
  ##   
                                                                                                                                                                                                                                        ## format: JString (required)
                                                                                                                                                                                                                                        ##         
                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                        ## A 
                                                                                                                                                                                                                                        ## query 
                                                                                                                                                                                                                                        ## parameter 
                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                        ## specify 
                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                        ## input 
                                                                                                                                                                                                                                        ## format 
                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                        ## imported 
                                                                                                                                                                                                                                        ## API 
                                                                                                                                                                                                                                        ## keys. 
                                                                                                                                                                                                                                        ## Currently, 
                                                                                                                                                                                                                                        ## only 
                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                        ## <code>csv</code> 
                                                                                                                                                                                                                                        ## format 
                                                                                                                                                                                                                                        ## is 
                                                                                                                                                                                                                                        ## supported.
  section = newJObject()
  var valid_402658358 = query.getOrDefault("failonwarnings")
  valid_402658358 = validateParameter(valid_402658358, JBool, required = false,
                                      default = nil)
  if valid_402658358 != nil:
    section.add "failonwarnings", valid_402658358
  var valid_402658359 = query.getOrDefault("mode")
  valid_402658359 = validateParameter(valid_402658359, JString, required = true,
                                      default = newJString("import"))
  if valid_402658359 != nil:
    section.add "mode", valid_402658359
  var valid_402658360 = query.getOrDefault("format")
  valid_402658360 = validateParameter(valid_402658360, JString, required = true,
                                      default = newJString("csv"))
  if valid_402658360 != nil:
    section.add "format", valid_402658360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658361 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658361 = validateParameter(valid_402658361, JString,
                                      required = false, default = nil)
  if valid_402658361 != nil:
    section.add "X-Amz-Security-Token", valid_402658361
  var valid_402658362 = header.getOrDefault("X-Amz-Signature")
  valid_402658362 = validateParameter(valid_402658362, JString,
                                      required = false, default = nil)
  if valid_402658362 != nil:
    section.add "X-Amz-Signature", valid_402658362
  var valid_402658363 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658363 = validateParameter(valid_402658363, JString,
                                      required = false, default = nil)
  if valid_402658363 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658363
  var valid_402658364 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658364 = validateParameter(valid_402658364, JString,
                                      required = false, default = nil)
  if valid_402658364 != nil:
    section.add "X-Amz-Algorithm", valid_402658364
  var valid_402658365 = header.getOrDefault("X-Amz-Date")
  valid_402658365 = validateParameter(valid_402658365, JString,
                                      required = false, default = nil)
  if valid_402658365 != nil:
    section.add "X-Amz-Date", valid_402658365
  var valid_402658366 = header.getOrDefault("X-Amz-Credential")
  valid_402658366 = validateParameter(valid_402658366, JString,
                                      required = false, default = nil)
  if valid_402658366 != nil:
    section.add "X-Amz-Credential", valid_402658366
  var valid_402658367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658367 = validateParameter(valid_402658367, JString,
                                      required = false, default = nil)
  if valid_402658367 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658367
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658369: Call_ImportApiKeys_402658355; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Import API keys from an external source, such as a CSV-formatted file.
                                                                                         ## 
  let valid = call_402658369.validator(path, query, header, formData, body, _)
  let scheme = call_402658369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658369.makeUrl(scheme.get, call_402658369.host, call_402658369.base,
                                   call_402658369.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658369, uri, valid, _)

proc call*(call_402658370: Call_ImportApiKeys_402658355; body: JsonNode;
           failonwarnings: bool = false; mode: string = "import";
           format: string = "csv"): Recallable =
  ## importApiKeys
  ## Import API keys from an external source, such as a CSV-formatted file.
  ##   
                                                                           ## failonwarnings: bool
                                                                           ##                 
                                                                           ## : 
                                                                           ## A 
                                                                           ## query 
                                                                           ## parameter 
                                                                           ## to 
                                                                           ## indicate 
                                                                           ## whether 
                                                                           ## to 
                                                                           ## rollback 
                                                                           ## <a>ApiKey</a> 
                                                                           ## importation 
                                                                           ## (<code>true</code>) 
                                                                           ## or 
                                                                           ## not 
                                                                           ## (<code>false</code>) 
                                                                           ## when 
                                                                           ## error 
                                                                           ## is 
                                                                           ## encountered.
  ##   
                                                                                          ## mode: string (required)
  ##   
                                                                                                                    ## body: JObject (required)
  ##   
                                                                                                                                               ## format: string (required)
                                                                                                                                               ##         
                                                                                                                                               ## : 
                                                                                                                                               ## A 
                                                                                                                                               ## query 
                                                                                                                                               ## parameter 
                                                                                                                                               ## to 
                                                                                                                                               ## specify 
                                                                                                                                               ## the 
                                                                                                                                               ## input 
                                                                                                                                               ## format 
                                                                                                                                               ## to 
                                                                                                                                               ## imported 
                                                                                                                                               ## API 
                                                                                                                                               ## keys. 
                                                                                                                                               ## Currently, 
                                                                                                                                               ## only 
                                                                                                                                               ## the 
                                                                                                                                               ## <code>csv</code> 
                                                                                                                                               ## format 
                                                                                                                                               ## is 
                                                                                                                                               ## supported.
  var query_402658371 = newJObject()
  var body_402658372 = newJObject()
  add(query_402658371, "failonwarnings", newJBool(failonwarnings))
  add(query_402658371, "mode", newJString(mode))
  if body != nil:
    body_402658372 = body
  add(query_402658371, "format", newJString(format))
  result = call_402658370.call(nil, query_402658371, nil, nil, body_402658372)

var importApiKeys* = Call_ImportApiKeys_402658355(name: "importApiKeys",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/apikeys#mode=import&format", validator: validate_ImportApiKeys_402658356,
    base: "/", makeUrl: url_ImportApiKeys_402658357,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ImportRestApi_402658373 = ref object of OpenApiRestCall_402656035
proc url_ImportRestApi_402658375(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ImportRestApi_402658374(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## A feature of the API Gateway control service for creating a new API from an external API definition file.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   failonwarnings: JBool
                                  ##                 : A query parameter to indicate whether to rollback the API creation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
  ##   
                                                                                                                                                                                                                                                 ## parameters.2.value: JString
  ##   
                                                                                                                                                                                                                                                                               ## parameters.1.value: JString
  ##   
                                                                                                                                                                                                                                                                                                             ## mode: JString (required)
  ##   
                                                                                                                                                                                                                                                                                                                                        ## parameters.1.key: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                    ## parameters.2.key: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                ## parameters.0.value: JString
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                              ## parameters.0.key: JString
  section = newJObject()
  var valid_402658376 = query.getOrDefault("failonwarnings")
  valid_402658376 = validateParameter(valid_402658376, JBool, required = false,
                                      default = nil)
  if valid_402658376 != nil:
    section.add "failonwarnings", valid_402658376
  var valid_402658377 = query.getOrDefault("parameters.2.value")
  valid_402658377 = validateParameter(valid_402658377, JString,
                                      required = false, default = nil)
  if valid_402658377 != nil:
    section.add "parameters.2.value", valid_402658377
  var valid_402658378 = query.getOrDefault("parameters.1.value")
  valid_402658378 = validateParameter(valid_402658378, JString,
                                      required = false, default = nil)
  if valid_402658378 != nil:
    section.add "parameters.1.value", valid_402658378
  var valid_402658379 = query.getOrDefault("mode")
  valid_402658379 = validateParameter(valid_402658379, JString, required = true,
                                      default = newJString("import"))
  if valid_402658379 != nil:
    section.add "mode", valid_402658379
  var valid_402658380 = query.getOrDefault("parameters.1.key")
  valid_402658380 = validateParameter(valid_402658380, JString,
                                      required = false, default = nil)
  if valid_402658380 != nil:
    section.add "parameters.1.key", valid_402658380
  var valid_402658381 = query.getOrDefault("parameters.2.key")
  valid_402658381 = validateParameter(valid_402658381, JString,
                                      required = false, default = nil)
  if valid_402658381 != nil:
    section.add "parameters.2.key", valid_402658381
  var valid_402658382 = query.getOrDefault("parameters.0.value")
  valid_402658382 = validateParameter(valid_402658382, JString,
                                      required = false, default = nil)
  if valid_402658382 != nil:
    section.add "parameters.0.value", valid_402658382
  var valid_402658383 = query.getOrDefault("parameters.0.key")
  valid_402658383 = validateParameter(valid_402658383, JString,
                                      required = false, default = nil)
  if valid_402658383 != nil:
    section.add "parameters.0.key", valid_402658383
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658384 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658384 = validateParameter(valid_402658384, JString,
                                      required = false, default = nil)
  if valid_402658384 != nil:
    section.add "X-Amz-Security-Token", valid_402658384
  var valid_402658385 = header.getOrDefault("X-Amz-Signature")
  valid_402658385 = validateParameter(valid_402658385, JString,
                                      required = false, default = nil)
  if valid_402658385 != nil:
    section.add "X-Amz-Signature", valid_402658385
  var valid_402658386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658386 = validateParameter(valid_402658386, JString,
                                      required = false, default = nil)
  if valid_402658386 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658386
  var valid_402658387 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658387 = validateParameter(valid_402658387, JString,
                                      required = false, default = nil)
  if valid_402658387 != nil:
    section.add "X-Amz-Algorithm", valid_402658387
  var valid_402658388 = header.getOrDefault("X-Amz-Date")
  valid_402658388 = validateParameter(valid_402658388, JString,
                                      required = false, default = nil)
  if valid_402658388 != nil:
    section.add "X-Amz-Date", valid_402658388
  var valid_402658389 = header.getOrDefault("X-Amz-Credential")
  valid_402658389 = validateParameter(valid_402658389, JString,
                                      required = false, default = nil)
  if valid_402658389 != nil:
    section.add "X-Amz-Credential", valid_402658389
  var valid_402658390 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658390 = validateParameter(valid_402658390, JString,
                                      required = false, default = nil)
  if valid_402658390 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658390
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658392: Call_ImportRestApi_402658373; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## 
                                                                                         ## A feature of the API Gateway control service for creating a new API from an external API definition file.
                                                                                         ## 
  let valid = call_402658392.validator(path, query, header, formData, body, _)
  let scheme = call_402658392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658392.makeUrl(scheme.get, call_402658392.host, call_402658392.base,
                                   call_402658392.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658392, uri, valid, _)

proc call*(call_402658393: Call_ImportRestApi_402658373; body: JsonNode;
           failonwarnings: bool = false; parameters2Value: string = "";
           parameters1Value: string = ""; mode: string = "import";
           parameters1Key: string = ""; parameters2Key: string = "";
           parameters0Value: string = ""; parameters0Key: string = ""): Recallable =
  ## importRestApi
  ## A feature of the API Gateway control service for creating a new API from an external API definition file.
  ##   
                                                                                                              ## failonwarnings: bool
                                                                                                              ##                 
                                                                                                              ## : 
                                                                                                              ## A 
                                                                                                              ## query 
                                                                                                              ## parameter 
                                                                                                              ## to 
                                                                                                              ## indicate 
                                                                                                              ## whether 
                                                                                                              ## to 
                                                                                                              ## rollback 
                                                                                                              ## the 
                                                                                                              ## API 
                                                                                                              ## creation 
                                                                                                              ## (<code>true</code>) 
                                                                                                              ## or 
                                                                                                              ## not 
                                                                                                              ## (<code>false</code>) 
                                                                                                              ## when 
                                                                                                              ## a 
                                                                                                              ## warning 
                                                                                                              ## is 
                                                                                                              ## encountered. 
                                                                                                              ## The 
                                                                                                              ## default 
                                                                                                              ## value 
                                                                                                              ## is 
                                                                                                              ## <code>false</code>.
  ##   
                                                                                                                                    ## parameters2Value: string
  ##   
                                                                                                                                                               ## parameters1Value: string
  ##   
                                                                                                                                                                                          ## mode: string (required)
  ##   
                                                                                                                                                                                                                    ## parameters1Key: string
  ##   
                                                                                                                                                                                                                                             ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                        ## parameters2Key: string
  ##   
                                                                                                                                                                                                                                                                                                 ## parameters0Value: string
  ##   
                                                                                                                                                                                                                                                                                                                            ## parameters0Key: string
  var query_402658394 = newJObject()
  var body_402658395 = newJObject()
  add(query_402658394, "failonwarnings", newJBool(failonwarnings))
  add(query_402658394, "parameters.2.value", newJString(parameters2Value))
  add(query_402658394, "parameters.1.value", newJString(parameters1Value))
  add(query_402658394, "mode", newJString(mode))
  add(query_402658394, "parameters.1.key", newJString(parameters1Key))
  if body != nil:
    body_402658395 = body
  add(query_402658394, "parameters.2.key", newJString(parameters2Key))
  add(query_402658394, "parameters.0.value", newJString(parameters0Value))
  add(query_402658394, "parameters.0.key", newJString(parameters0Key))
  result = call_402658393.call(nil, query_402658394, nil, nil, body_402658395)

var importRestApi* = Call_ImportRestApi_402658373(name: "importRestApi",
    meth: HttpMethod.HttpPost, host: "apigateway.amazonaws.com",
    route: "/restapis#mode=import", validator: validate_ImportRestApi_402658374,
    base: "/", makeUrl: url_ImportRestApi_402658375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UntagResource_402658396 = ref object of OpenApiRestCall_402656035
proc url_UntagResource_402658398(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "resource_arn" in path, "`resource_arn` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/tags/"),
                 (kind: VariableSegment, value: "resource_arn"),
                 (kind: ConstantSegment, value: "#tagKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UntagResource_402658397(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes a tag from a given resource.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resource_arn: JString (required)
                                 ##               : [Required] The ARN of a resource that can be tagged. The resource ARN must be URL-encoded.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `resource_arn` field"
  var valid_402658399 = path.getOrDefault("resource_arn")
  valid_402658399 = validateParameter(valid_402658399, JString, required = true,
                                      default = nil)
  if valid_402658399 != nil:
    section.add "resource_arn", valid_402658399
  result.add "path", section
  ## parameters in `query` object:
  ##   tagKeys: JArray (required)
                                  ##          : [Required] The Tag keys to delete.
  section = newJObject()
  assert query != nil,
         "query argument is necessary due to required `tagKeys` field"
  var valid_402658400 = query.getOrDefault("tagKeys")
  valid_402658400 = validateParameter(valid_402658400, JArray, required = true,
                                      default = nil)
  if valid_402658400 != nil:
    section.add "tagKeys", valid_402658400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658401 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658401 = validateParameter(valid_402658401, JString,
                                      required = false, default = nil)
  if valid_402658401 != nil:
    section.add "X-Amz-Security-Token", valid_402658401
  var valid_402658402 = header.getOrDefault("X-Amz-Signature")
  valid_402658402 = validateParameter(valid_402658402, JString,
                                      required = false, default = nil)
  if valid_402658402 != nil:
    section.add "X-Amz-Signature", valid_402658402
  var valid_402658403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658403 = validateParameter(valid_402658403, JString,
                                      required = false, default = nil)
  if valid_402658403 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658403
  var valid_402658404 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658404 = validateParameter(valid_402658404, JString,
                                      required = false, default = nil)
  if valid_402658404 != nil:
    section.add "X-Amz-Algorithm", valid_402658404
  var valid_402658405 = header.getOrDefault("X-Amz-Date")
  valid_402658405 = validateParameter(valid_402658405, JString,
                                      required = false, default = nil)
  if valid_402658405 != nil:
    section.add "X-Amz-Date", valid_402658405
  var valid_402658406 = header.getOrDefault("X-Amz-Credential")
  valid_402658406 = validateParameter(valid_402658406, JString,
                                      required = false, default = nil)
  if valid_402658406 != nil:
    section.add "X-Amz-Credential", valid_402658406
  var valid_402658407 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658407 = validateParameter(valid_402658407, JString,
                                      required = false, default = nil)
  if valid_402658407 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658407
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402658408: Call_UntagResource_402658396; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes a tag from a given resource.
                                                                                         ## 
  let valid = call_402658408.validator(path, query, header, formData, body, _)
  let scheme = call_402658408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658408.makeUrl(scheme.get, call_402658408.host, call_402658408.base,
                                   call_402658408.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658408, uri, valid, _)

proc call*(call_402658409: Call_UntagResource_402658396; tagKeys: JsonNode;
           resourceArn: string): Recallable =
  ## untagResource
  ## Removes a tag from a given resource.
  ##   tagKeys: JArray (required)
                                         ##          : [Required] The Tag keys to delete.
  ##   
                                                                                         ## resourceArn: string (required)
                                                                                         ##              
                                                                                         ## : 
                                                                                         ## [Required] 
                                                                                         ## The 
                                                                                         ## ARN 
                                                                                         ## of 
                                                                                         ## a 
                                                                                         ## resource 
                                                                                         ## that 
                                                                                         ## can 
                                                                                         ## be 
                                                                                         ## tagged. 
                                                                                         ## The 
                                                                                         ## resource 
                                                                                         ## ARN 
                                                                                         ## must 
                                                                                         ## be 
                                                                                         ## URL-encoded.
  var path_402658410 = newJObject()
  var query_402658411 = newJObject()
  if tagKeys != nil:
    query_402658411.add "tagKeys", tagKeys
  add(path_402658410, "resource_arn", newJString(resourceArn))
  result = call_402658409.call(path_402658410, query_402658411, nil, nil, nil)

var untagResource* = Call_UntagResource_402658396(name: "untagResource",
    meth: HttpMethod.HttpDelete, host: "apigateway.amazonaws.com",
    route: "/tags/{resource_arn}#tagKeys", validator: validate_UntagResource_402658397,
    base: "/", makeUrl: url_UntagResource_402658398,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateUsage_402658412 = ref object of OpenApiRestCall_402656035
proc url_UpdateUsage_402658414(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "usageplanId" in path, "`usageplanId` is a required path parameter"
  assert "keyId" in path, "`keyId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/usageplans/"),
                 (kind: VariableSegment, value: "usageplanId"),
                 (kind: ConstantSegment, value: "/keys/"),
                 (kind: VariableSegment, value: "keyId"),
                 (kind: ConstantSegment, value: "/usage")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateUsage_402658413(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   usageplanId: JString (required)
                                 ##              : [Required] The Id of the usage plan associated with the usage data.
  ##   
                                                                                                                      ## keyId: JString (required)
                                                                                                                      ##        
                                                                                                                      ## : 
                                                                                                                      ## [Required] 
                                                                                                                      ## The 
                                                                                                                      ## identifier 
                                                                                                                      ## of 
                                                                                                                      ## the 
                                                                                                                      ## API 
                                                                                                                      ## key 
                                                                                                                      ## associated 
                                                                                                                      ## with 
                                                                                                                      ## the 
                                                                                                                      ## usage 
                                                                                                                      ## plan 
                                                                                                                      ## in 
                                                                                                                      ## which 
                                                                                                                      ## a 
                                                                                                                      ## temporary 
                                                                                                                      ## extension 
                                                                                                                      ## is 
                                                                                                                      ## granted 
                                                                                                                      ## to 
                                                                                                                      ## the 
                                                                                                                      ## remaining 
                                                                                                                      ## quota.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `usageplanId` field"
  var valid_402658415 = path.getOrDefault("usageplanId")
  valid_402658415 = validateParameter(valid_402658415, JString, required = true,
                                      default = nil)
  if valid_402658415 != nil:
    section.add "usageplanId", valid_402658415
  var valid_402658416 = path.getOrDefault("keyId")
  valid_402658416 = validateParameter(valid_402658416, JString, required = true,
                                      default = nil)
  if valid_402658416 != nil:
    section.add "keyId", valid_402658416
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402658417 = header.getOrDefault("X-Amz-Security-Token")
  valid_402658417 = validateParameter(valid_402658417, JString,
                                      required = false, default = nil)
  if valid_402658417 != nil:
    section.add "X-Amz-Security-Token", valid_402658417
  var valid_402658418 = header.getOrDefault("X-Amz-Signature")
  valid_402658418 = validateParameter(valid_402658418, JString,
                                      required = false, default = nil)
  if valid_402658418 != nil:
    section.add "X-Amz-Signature", valid_402658418
  var valid_402658419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402658419 = validateParameter(valid_402658419, JString,
                                      required = false, default = nil)
  if valid_402658419 != nil:
    section.add "X-Amz-Content-Sha256", valid_402658419
  var valid_402658420 = header.getOrDefault("X-Amz-Algorithm")
  valid_402658420 = validateParameter(valid_402658420, JString,
                                      required = false, default = nil)
  if valid_402658420 != nil:
    section.add "X-Amz-Algorithm", valid_402658420
  var valid_402658421 = header.getOrDefault("X-Amz-Date")
  valid_402658421 = validateParameter(valid_402658421, JString,
                                      required = false, default = nil)
  if valid_402658421 != nil:
    section.add "X-Amz-Date", valid_402658421
  var valid_402658422 = header.getOrDefault("X-Amz-Credential")
  valid_402658422 = validateParameter(valid_402658422, JString,
                                      required = false, default = nil)
  if valid_402658422 != nil:
    section.add "X-Amz-Credential", valid_402658422
  var valid_402658423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402658423 = validateParameter(valid_402658423, JString,
                                      required = false, default = nil)
  if valid_402658423 != nil:
    section.add "X-Amz-SignedHeaders", valid_402658423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402658425: Call_UpdateUsage_402658412; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
                                                                                         ## 
  let valid = call_402658425.validator(path, query, header, formData, body, _)
  let scheme = call_402658425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402658425.makeUrl(scheme.get, call_402658425.host, call_402658425.base,
                                   call_402658425.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402658425, uri, valid, _)

proc call*(call_402658426: Call_UpdateUsage_402658412; usageplanId: string;
           body: JsonNode; keyId: string): Recallable =
  ## updateUsage
  ## Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
  ##   
                                                                                                             ## usageplanId: string (required)
                                                                                                             ##              
                                                                                                             ## : 
                                                                                                             ## [Required] 
                                                                                                             ## The 
                                                                                                             ## Id 
                                                                                                             ## of 
                                                                                                             ## the 
                                                                                                             ## usage 
                                                                                                             ## plan 
                                                                                                             ## associated 
                                                                                                             ## with 
                                                                                                             ## the 
                                                                                                             ## usage 
                                                                                                             ## data.
  ##   
                                                                                                                     ## body: JObject (required)
  ##   
                                                                                                                                                ## keyId: string (required)
                                                                                                                                                ##        
                                                                                                                                                ## : 
                                                                                                                                                ## [Required] 
                                                                                                                                                ## The 
                                                                                                                                                ## identifier 
                                                                                                                                                ## of 
                                                                                                                                                ## the 
                                                                                                                                                ## API 
                                                                                                                                                ## key 
                                                                                                                                                ## associated 
                                                                                                                                                ## with 
                                                                                                                                                ## the 
                                                                                                                                                ## usage 
                                                                                                                                                ## plan 
                                                                                                                                                ## in 
                                                                                                                                                ## which 
                                                                                                                                                ## a 
                                                                                                                                                ## temporary 
                                                                                                                                                ## extension 
                                                                                                                                                ## is 
                                                                                                                                                ## granted 
                                                                                                                                                ## to 
                                                                                                                                                ## the 
                                                                                                                                                ## remaining 
                                                                                                                                                ## quota.
  var path_402658427 = newJObject()
  var body_402658428 = newJObject()
  add(path_402658427, "usageplanId", newJString(usageplanId))
  if body != nil:
    body_402658428 = body
  add(path_402658427, "keyId", newJString(keyId))
  result = call_402658426.call(path_402658427, nil, nil, nil, body_402658428)

var updateUsage* = Call_UpdateUsage_402658412(name: "updateUsage",
    meth: HttpMethod.HttpPatch, host: "apigateway.amazonaws.com",
    route: "/usageplans/{usageplanId}/keys/{keyId}/usage",
    validator: validate_UpdateUsage_402658413, base: "/",
    makeUrl: url_UpdateUsage_402658414, schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token",
    ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode;
              algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName,
                            date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers,
                               recall.body, normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date,
                                   region = region, service = awsServiceName,
                                   sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}