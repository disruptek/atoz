
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5, base64,
  httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Simple Email Service
## version: 2010-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>.</p> </note>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/email/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                          header: JsonNode = nil; formData: JsonNode = nil;
                          body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                  path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_21625435 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_21625435](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_21625435): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "email.ap-northeast-1.amazonaws.com", "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
                           "us-west-2": "email.us-west-2.amazonaws.com",
                           "eu-west-2": "email.eu-west-2.amazonaws.com", "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "email.eu-central-1.amazonaws.com",
                           "us-east-2": "email.us-east-2.amazonaws.com",
                           "us-east-1": "email.us-east-1.amazonaws.com", "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "email.ap-south-1.amazonaws.com",
                           "eu-north-1": "email.eu-north-1.amazonaws.com", "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
                           "us-west-1": "email.us-west-1.amazonaws.com", "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "email.eu-west-3.amazonaws.com",
                           "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "email.sa-east-1.amazonaws.com",
                           "eu-west-1": "email.eu-west-1.amazonaws.com", "us-gov-west-1": "email.us-gov-west-1.amazonaws.com", "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "email.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
      "us-west-2": "email.us-west-2.amazonaws.com",
      "eu-west-2": "email.eu-west-2.amazonaws.com",
      "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
      "eu-central-1": "email.eu-central-1.amazonaws.com",
      "us-east-2": "email.us-east-2.amazonaws.com",
      "us-east-1": "email.us-east-1.amazonaws.com",
      "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "email.ap-south-1.amazonaws.com",
      "eu-north-1": "email.eu-north-1.amazonaws.com",
      "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
      "us-west-1": "email.us-west-1.amazonaws.com",
      "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
      "eu-west-3": "email.eu-west-3.amazonaws.com",
      "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "email.sa-east-1.amazonaws.com",
      "eu-west-1": "email.eu-west-1.amazonaws.com",
      "us-gov-west-1": "email.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
      "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "email"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body: string = ""): Recallable {.
    base.}
type
  Call_PostCloneReceiptRuleSet_21626035 = ref object of OpenApiRestCall_21625435
proc url_PostCloneReceiptRuleSet_21626037(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCloneReceiptRuleSet_21626036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626038 = query.getOrDefault("Action")
  valid_21626038 = validateParameter(valid_21626038, JString, required = true,
                                   default = newJString("CloneReceiptRuleSet"))
  if valid_21626038 != nil:
    section.add "Action", valid_21626038
  var valid_21626039 = query.getOrDefault("Version")
  valid_21626039 = validateParameter(valid_21626039, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626039 != nil:
    section.add "Version", valid_21626039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626040 = header.getOrDefault("X-Amz-Date")
  valid_21626040 = validateParameter(valid_21626040, JString, required = false,
                                   default = nil)
  if valid_21626040 != nil:
    section.add "X-Amz-Date", valid_21626040
  var valid_21626041 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626041 = validateParameter(valid_21626041, JString, required = false,
                                   default = nil)
  if valid_21626041 != nil:
    section.add "X-Amz-Security-Token", valid_21626041
  var valid_21626042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626042 = validateParameter(valid_21626042, JString, required = false,
                                   default = nil)
  if valid_21626042 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626042
  var valid_21626043 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626043 = validateParameter(valid_21626043, JString, required = false,
                                   default = nil)
  if valid_21626043 != nil:
    section.add "X-Amz-Algorithm", valid_21626043
  var valid_21626044 = header.getOrDefault("X-Amz-Signature")
  valid_21626044 = validateParameter(valid_21626044, JString, required = false,
                                   default = nil)
  if valid_21626044 != nil:
    section.add "X-Amz-Signature", valid_21626044
  var valid_21626045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626045 = validateParameter(valid_21626045, JString, required = false,
                                   default = nil)
  if valid_21626045 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626045
  var valid_21626046 = header.getOrDefault("X-Amz-Credential")
  valid_21626046 = validateParameter(valid_21626046, JString, required = false,
                                   default = nil)
  if valid_21626046 != nil:
    section.add "X-Amz-Credential", valid_21626046
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalRuleSetName` field"
  var valid_21626047 = formData.getOrDefault("OriginalRuleSetName")
  valid_21626047 = validateParameter(valid_21626047, JString, required = true,
                                   default = nil)
  if valid_21626047 != nil:
    section.add "OriginalRuleSetName", valid_21626047
  var valid_21626048 = formData.getOrDefault("RuleSetName")
  valid_21626048 = validateParameter(valid_21626048, JString, required = true,
                                   default = nil)
  if valid_21626048 != nil:
    section.add "RuleSetName", valid_21626048
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626049: Call_PostCloneReceiptRuleSet_21626035;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626049.validator(path, query, header, formData, body, _)
  let scheme = call_21626049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626049.makeUrl(scheme.get, call_21626049.host, call_21626049.base,
                               call_21626049.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626049, uri, valid, _)

proc call*(call_21626050: Call_PostCloneReceiptRuleSet_21626035;
          OriginalRuleSetName: string; RuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626051 = newJObject()
  var formData_21626052 = newJObject()
  add(formData_21626052, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(formData_21626052, "RuleSetName", newJString(RuleSetName))
  add(query_21626051, "Action", newJString(Action))
  add(query_21626051, "Version", newJString(Version))
  result = call_21626050.call(nil, query_21626051, nil, formData_21626052, nil)

var postCloneReceiptRuleSet* = Call_PostCloneReceiptRuleSet_21626035(
    name: "postCloneReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_PostCloneReceiptRuleSet_21626036, base: "/",
    makeUrl: url_PostCloneReceiptRuleSet_21626037,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCloneReceiptRuleSet_21625779 = ref object of OpenApiRestCall_21625435
proc url_GetCloneReceiptRuleSet_21625781(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCloneReceiptRuleSet_21625780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_21625882 = query.getOrDefault("RuleSetName")
  valid_21625882 = validateParameter(valid_21625882, JString, required = true,
                                   default = nil)
  if valid_21625882 != nil:
    section.add "RuleSetName", valid_21625882
  var valid_21625897 = query.getOrDefault("Action")
  valid_21625897 = validateParameter(valid_21625897, JString, required = true,
                                   default = newJString("CloneReceiptRuleSet"))
  if valid_21625897 != nil:
    section.add "Action", valid_21625897
  var valid_21625898 = query.getOrDefault("OriginalRuleSetName")
  valid_21625898 = validateParameter(valid_21625898, JString, required = true,
                                   default = nil)
  if valid_21625898 != nil:
    section.add "OriginalRuleSetName", valid_21625898
  var valid_21625899 = query.getOrDefault("Version")
  valid_21625899 = validateParameter(valid_21625899, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21625899 != nil:
    section.add "Version", valid_21625899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21625900 = header.getOrDefault("X-Amz-Date")
  valid_21625900 = validateParameter(valid_21625900, JString, required = false,
                                   default = nil)
  if valid_21625900 != nil:
    section.add "X-Amz-Date", valid_21625900
  var valid_21625901 = header.getOrDefault("X-Amz-Security-Token")
  valid_21625901 = validateParameter(valid_21625901, JString, required = false,
                                   default = nil)
  if valid_21625901 != nil:
    section.add "X-Amz-Security-Token", valid_21625901
  var valid_21625902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21625902 = validateParameter(valid_21625902, JString, required = false,
                                   default = nil)
  if valid_21625902 != nil:
    section.add "X-Amz-Content-Sha256", valid_21625902
  var valid_21625903 = header.getOrDefault("X-Amz-Algorithm")
  valid_21625903 = validateParameter(valid_21625903, JString, required = false,
                                   default = nil)
  if valid_21625903 != nil:
    section.add "X-Amz-Algorithm", valid_21625903
  var valid_21625904 = header.getOrDefault("X-Amz-Signature")
  valid_21625904 = validateParameter(valid_21625904, JString, required = false,
                                   default = nil)
  if valid_21625904 != nil:
    section.add "X-Amz-Signature", valid_21625904
  var valid_21625905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21625905 = validateParameter(valid_21625905, JString, required = false,
                                   default = nil)
  if valid_21625905 != nil:
    section.add "X-Amz-SignedHeaders", valid_21625905
  var valid_21625906 = header.getOrDefault("X-Amz-Credential")
  valid_21625906 = validateParameter(valid_21625906, JString, required = false,
                                   default = nil)
  if valid_21625906 != nil:
    section.add "X-Amz-Credential", valid_21625906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21625931: Call_GetCloneReceiptRuleSet_21625779;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21625931.validator(path, query, header, formData, body, _)
  let scheme = call_21625931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21625931.makeUrl(scheme.get, call_21625931.host, call_21625931.base,
                               call_21625931.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21625931, uri, valid, _)

proc call*(call_21625994: Call_GetCloneReceiptRuleSet_21625779;
          RuleSetName: string; OriginalRuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Version: string (required)
  var query_21625996 = newJObject()
  add(query_21625996, "RuleSetName", newJString(RuleSetName))
  add(query_21625996, "Action", newJString(Action))
  add(query_21625996, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_21625996, "Version", newJString(Version))
  result = call_21625994.call(nil, query_21625996, nil, nil, nil)

var getCloneReceiptRuleSet* = Call_GetCloneReceiptRuleSet_21625779(
    name: "getCloneReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_GetCloneReceiptRuleSet_21625780, base: "/",
    makeUrl: url_GetCloneReceiptRuleSet_21625781,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSet_21626070 = ref object of OpenApiRestCall_21625435
proc url_PostCreateConfigurationSet_21626072(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSet_21626071(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626073 = query.getOrDefault("Action")
  valid_21626073 = validateParameter(valid_21626073, JString, required = true, default = newJString(
      "CreateConfigurationSet"))
  if valid_21626073 != nil:
    section.add "Action", valid_21626073
  var valid_21626074 = query.getOrDefault("Version")
  valid_21626074 = validateParameter(valid_21626074, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626074 != nil:
    section.add "Version", valid_21626074
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626075 = header.getOrDefault("X-Amz-Date")
  valid_21626075 = validateParameter(valid_21626075, JString, required = false,
                                   default = nil)
  if valid_21626075 != nil:
    section.add "X-Amz-Date", valid_21626075
  var valid_21626076 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626076 = validateParameter(valid_21626076, JString, required = false,
                                   default = nil)
  if valid_21626076 != nil:
    section.add "X-Amz-Security-Token", valid_21626076
  var valid_21626077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626077 = validateParameter(valid_21626077, JString, required = false,
                                   default = nil)
  if valid_21626077 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626077
  var valid_21626078 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626078 = validateParameter(valid_21626078, JString, required = false,
                                   default = nil)
  if valid_21626078 != nil:
    section.add "X-Amz-Algorithm", valid_21626078
  var valid_21626079 = header.getOrDefault("X-Amz-Signature")
  valid_21626079 = validateParameter(valid_21626079, JString, required = false,
                                   default = nil)
  if valid_21626079 != nil:
    section.add "X-Amz-Signature", valid_21626079
  var valid_21626080 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626080 = validateParameter(valid_21626080, JString, required = false,
                                   default = nil)
  if valid_21626080 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626080
  var valid_21626081 = header.getOrDefault("X-Amz-Credential")
  valid_21626081 = validateParameter(valid_21626081, JString, required = false,
                                   default = nil)
  if valid_21626081 != nil:
    section.add "X-Amz-Credential", valid_21626081
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  section = newJObject()
  var valid_21626082 = formData.getOrDefault("ConfigurationSet.Name")
  valid_21626082 = validateParameter(valid_21626082, JString, required = false,
                                   default = nil)
  if valid_21626082 != nil:
    section.add "ConfigurationSet.Name", valid_21626082
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626083: Call_PostCreateConfigurationSet_21626070;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626083.validator(path, query, header, formData, body, _)
  let scheme = call_21626083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626083.makeUrl(scheme.get, call_21626083.host, call_21626083.base,
                               call_21626083.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626083, uri, valid, _)

proc call*(call_21626084: Call_PostCreateConfigurationSet_21626070;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626085 = newJObject()
  var formData_21626086 = newJObject()
  add(formData_21626086, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_21626085, "Action", newJString(Action))
  add(query_21626085, "Version", newJString(Version))
  result = call_21626084.call(nil, query_21626085, nil, formData_21626086, nil)

var postCreateConfigurationSet* = Call_PostCreateConfigurationSet_21626070(
    name: "postCreateConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_PostCreateConfigurationSet_21626071, base: "/",
    makeUrl: url_PostCreateConfigurationSet_21626072,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSet_21626053 = ref object of OpenApiRestCall_21625435
proc url_GetCreateConfigurationSet_21626055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSet_21626054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626056 = query.getOrDefault("ConfigurationSet.Name")
  valid_21626056 = validateParameter(valid_21626056, JString, required = false,
                                   default = nil)
  if valid_21626056 != nil:
    section.add "ConfigurationSet.Name", valid_21626056
  var valid_21626057 = query.getOrDefault("Action")
  valid_21626057 = validateParameter(valid_21626057, JString, required = true, default = newJString(
      "CreateConfigurationSet"))
  if valid_21626057 != nil:
    section.add "Action", valid_21626057
  var valid_21626058 = query.getOrDefault("Version")
  valid_21626058 = validateParameter(valid_21626058, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626058 != nil:
    section.add "Version", valid_21626058
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626059 = header.getOrDefault("X-Amz-Date")
  valid_21626059 = validateParameter(valid_21626059, JString, required = false,
                                   default = nil)
  if valid_21626059 != nil:
    section.add "X-Amz-Date", valid_21626059
  var valid_21626060 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626060 = validateParameter(valid_21626060, JString, required = false,
                                   default = nil)
  if valid_21626060 != nil:
    section.add "X-Amz-Security-Token", valid_21626060
  var valid_21626061 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626061 = validateParameter(valid_21626061, JString, required = false,
                                   default = nil)
  if valid_21626061 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626061
  var valid_21626062 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626062 = validateParameter(valid_21626062, JString, required = false,
                                   default = nil)
  if valid_21626062 != nil:
    section.add "X-Amz-Algorithm", valid_21626062
  var valid_21626063 = header.getOrDefault("X-Amz-Signature")
  valid_21626063 = validateParameter(valid_21626063, JString, required = false,
                                   default = nil)
  if valid_21626063 != nil:
    section.add "X-Amz-Signature", valid_21626063
  var valid_21626064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626064 = validateParameter(valid_21626064, JString, required = false,
                                   default = nil)
  if valid_21626064 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626064
  var valid_21626065 = header.getOrDefault("X-Amz-Credential")
  valid_21626065 = validateParameter(valid_21626065, JString, required = false,
                                   default = nil)
  if valid_21626065 != nil:
    section.add "X-Amz-Credential", valid_21626065
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626066: Call_GetCreateConfigurationSet_21626053;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626066.validator(path, query, header, formData, body, _)
  let scheme = call_21626066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626066.makeUrl(scheme.get, call_21626066.host, call_21626066.base,
                               call_21626066.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626066, uri, valid, _)

proc call*(call_21626067: Call_GetCreateConfigurationSet_21626053;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626068 = newJObject()
  add(query_21626068, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_21626068, "Action", newJString(Action))
  add(query_21626068, "Version", newJString(Version))
  result = call_21626067.call(nil, query_21626068, nil, nil, nil)

var getCreateConfigurationSet* = Call_GetCreateConfigurationSet_21626053(
    name: "getCreateConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_GetCreateConfigurationSet_21626054, base: "/",
    makeUrl: url_GetCreateConfigurationSet_21626055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetEventDestination_21626109 = ref object of OpenApiRestCall_21625435
proc url_PostCreateConfigurationSetEventDestination_21626111(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSetEventDestination_21626110(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626112 = query.getOrDefault("Action")
  valid_21626112 = validateParameter(valid_21626112, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_21626112 != nil:
    section.add "Action", valid_21626112
  var valid_21626113 = query.getOrDefault("Version")
  valid_21626113 = validateParameter(valid_21626113, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626113 != nil:
    section.add "Version", valid_21626113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626114 = header.getOrDefault("X-Amz-Date")
  valid_21626114 = validateParameter(valid_21626114, JString, required = false,
                                   default = nil)
  if valid_21626114 != nil:
    section.add "X-Amz-Date", valid_21626114
  var valid_21626115 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626115 = validateParameter(valid_21626115, JString, required = false,
                                   default = nil)
  if valid_21626115 != nil:
    section.add "X-Amz-Security-Token", valid_21626115
  var valid_21626116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626116 = validateParameter(valid_21626116, JString, required = false,
                                   default = nil)
  if valid_21626116 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626116
  var valid_21626117 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626117 = validateParameter(valid_21626117, JString, required = false,
                                   default = nil)
  if valid_21626117 != nil:
    section.add "X-Amz-Algorithm", valid_21626117
  var valid_21626118 = header.getOrDefault("X-Amz-Signature")
  valid_21626118 = validateParameter(valid_21626118, JString, required = false,
                                   default = nil)
  if valid_21626118 != nil:
    section.add "X-Amz-Signature", valid_21626118
  var valid_21626119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626119 = validateParameter(valid_21626119, JString, required = false,
                                   default = nil)
  if valid_21626119 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626119
  var valid_21626120 = header.getOrDefault("X-Amz-Credential")
  valid_21626120 = validateParameter(valid_21626120, JString, required = false,
                                   default = nil)
  if valid_21626120 != nil:
    section.add "X-Amz-Credential", valid_21626120
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21626121 = formData.getOrDefault("ConfigurationSetName")
  valid_21626121 = validateParameter(valid_21626121, JString, required = true,
                                   default = nil)
  if valid_21626121 != nil:
    section.add "ConfigurationSetName", valid_21626121
  var valid_21626122 = formData.getOrDefault("EventDestination.Name")
  valid_21626122 = validateParameter(valid_21626122, JString, required = false,
                                   default = nil)
  if valid_21626122 != nil:
    section.add "EventDestination.Name", valid_21626122
  var valid_21626123 = formData.getOrDefault(
      "EventDestination.CloudWatchDestination")
  valid_21626123 = validateParameter(valid_21626123, JString, required = false,
                                   default = nil)
  if valid_21626123 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_21626123
  var valid_21626124 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_21626124 = validateParameter(valid_21626124, JArray, required = false,
                                   default = nil)
  if valid_21626124 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_21626124
  var valid_21626125 = formData.getOrDefault(
      "EventDestination.KinesisFirehoseDestination")
  valid_21626125 = validateParameter(valid_21626125, JString, required = false,
                                   default = nil)
  if valid_21626125 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_21626125
  var valid_21626126 = formData.getOrDefault("EventDestination.Enabled")
  valid_21626126 = validateParameter(valid_21626126, JString, required = false,
                                   default = nil)
  if valid_21626126 != nil:
    section.add "EventDestination.Enabled", valid_21626126
  var valid_21626127 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_21626127 = validateParameter(valid_21626127, JString, required = false,
                                   default = nil)
  if valid_21626127 != nil:
    section.add "EventDestination.SNSDestination", valid_21626127
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626128: Call_PostCreateConfigurationSetEventDestination_21626109;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626128.validator(path, query, header, formData, body, _)
  let scheme = call_21626128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626128.makeUrl(scheme.get, call_21626128.host, call_21626128.base,
                               call_21626128.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626128, uri, valid, _)

proc call*(call_21626129: Call_PostCreateConfigurationSetEventDestination_21626109;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_21626130 = newJObject()
  var formData_21626131 = newJObject()
  add(formData_21626131, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21626131, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_21626131, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_21626130, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_21626131.add "EventDestination.MatchingEventTypes",
                         EventDestinationMatchingEventTypes
  add(formData_21626131, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_21626131, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_21626131, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_21626130, "Version", newJString(Version))
  result = call_21626129.call(nil, query_21626130, nil, formData_21626131, nil)

var postCreateConfigurationSetEventDestination* = Call_PostCreateConfigurationSetEventDestination_21626109(
    name: "postCreateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_PostCreateConfigurationSetEventDestination_21626110,
    base: "/", makeUrl: url_PostCreateConfigurationSetEventDestination_21626111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetEventDestination_21626087 = ref object of OpenApiRestCall_21625435
proc url_GetCreateConfigurationSetEventDestination_21626089(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSetEventDestination_21626088(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626090 = query.getOrDefault("EventDestination.Enabled")
  valid_21626090 = validateParameter(valid_21626090, JString, required = false,
                                   default = nil)
  if valid_21626090 != nil:
    section.add "EventDestination.Enabled", valid_21626090
  var valid_21626091 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_21626091 = validateParameter(valid_21626091, JString, required = false,
                                   default = nil)
  if valid_21626091 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_21626091
  var valid_21626092 = query.getOrDefault("Action")
  valid_21626092 = validateParameter(valid_21626092, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_21626092 != nil:
    section.add "Action", valid_21626092
  var valid_21626093 = query.getOrDefault("EventDestination.Name")
  valid_21626093 = validateParameter(valid_21626093, JString, required = false,
                                   default = nil)
  if valid_21626093 != nil:
    section.add "EventDestination.Name", valid_21626093
  var valid_21626094 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_21626094 = validateParameter(valid_21626094, JString, required = false,
                                   default = nil)
  if valid_21626094 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_21626094
  var valid_21626095 = query.getOrDefault("EventDestination.SNSDestination")
  valid_21626095 = validateParameter(valid_21626095, JString, required = false,
                                   default = nil)
  if valid_21626095 != nil:
    section.add "EventDestination.SNSDestination", valid_21626095
  var valid_21626096 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_21626096 = validateParameter(valid_21626096, JArray, required = false,
                                   default = nil)
  if valid_21626096 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_21626096
  var valid_21626097 = query.getOrDefault("ConfigurationSetName")
  valid_21626097 = validateParameter(valid_21626097, JString, required = true,
                                   default = nil)
  if valid_21626097 != nil:
    section.add "ConfigurationSetName", valid_21626097
  var valid_21626098 = query.getOrDefault("Version")
  valid_21626098 = validateParameter(valid_21626098, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626098 != nil:
    section.add "Version", valid_21626098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626099 = header.getOrDefault("X-Amz-Date")
  valid_21626099 = validateParameter(valid_21626099, JString, required = false,
                                   default = nil)
  if valid_21626099 != nil:
    section.add "X-Amz-Date", valid_21626099
  var valid_21626100 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626100 = validateParameter(valid_21626100, JString, required = false,
                                   default = nil)
  if valid_21626100 != nil:
    section.add "X-Amz-Security-Token", valid_21626100
  var valid_21626101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626101 = validateParameter(valid_21626101, JString, required = false,
                                   default = nil)
  if valid_21626101 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626101
  var valid_21626102 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626102 = validateParameter(valid_21626102, JString, required = false,
                                   default = nil)
  if valid_21626102 != nil:
    section.add "X-Amz-Algorithm", valid_21626102
  var valid_21626103 = header.getOrDefault("X-Amz-Signature")
  valid_21626103 = validateParameter(valid_21626103, JString, required = false,
                                   default = nil)
  if valid_21626103 != nil:
    section.add "X-Amz-Signature", valid_21626103
  var valid_21626104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626104 = validateParameter(valid_21626104, JString, required = false,
                                   default = nil)
  if valid_21626104 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626104
  var valid_21626105 = header.getOrDefault("X-Amz-Credential")
  valid_21626105 = validateParameter(valid_21626105, JString, required = false,
                                   default = nil)
  if valid_21626105 != nil:
    section.add "X-Amz-Credential", valid_21626105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626106: Call_GetCreateConfigurationSetEventDestination_21626087;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626106.validator(path, query, header, formData, body, _)
  let scheme = call_21626106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626106.makeUrl(scheme.get, call_21626106.host, call_21626106.base,
                               call_21626106.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626106, uri, valid, _)

proc call*(call_21626107: Call_GetCreateConfigurationSetEventDestination_21626087;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: string (required)
  var query_21626108 = newJObject()
  add(query_21626108, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_21626108, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_21626108, "Action", newJString(Action))
  add(query_21626108, "EventDestination.Name", newJString(EventDestinationName))
  add(query_21626108, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_21626108, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_21626108.add "EventDestination.MatchingEventTypes",
                      EventDestinationMatchingEventTypes
  add(query_21626108, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626108, "Version", newJString(Version))
  result = call_21626107.call(nil, query_21626108, nil, nil, nil)

var getCreateConfigurationSetEventDestination* = Call_GetCreateConfigurationSetEventDestination_21626087(
    name: "getCreateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_GetCreateConfigurationSetEventDestination_21626088,
    base: "/", makeUrl: url_GetCreateConfigurationSetEventDestination_21626089,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetTrackingOptions_21626149 = ref object of OpenApiRestCall_21625435
proc url_PostCreateConfigurationSetTrackingOptions_21626151(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSetTrackingOptions_21626150(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626152 = query.getOrDefault("Action")
  valid_21626152 = validateParameter(valid_21626152, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_21626152 != nil:
    section.add "Action", valid_21626152
  var valid_21626153 = query.getOrDefault("Version")
  valid_21626153 = validateParameter(valid_21626153, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626153 != nil:
    section.add "Version", valid_21626153
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626154 = header.getOrDefault("X-Amz-Date")
  valid_21626154 = validateParameter(valid_21626154, JString, required = false,
                                   default = nil)
  if valid_21626154 != nil:
    section.add "X-Amz-Date", valid_21626154
  var valid_21626155 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626155 = validateParameter(valid_21626155, JString, required = false,
                                   default = nil)
  if valid_21626155 != nil:
    section.add "X-Amz-Security-Token", valid_21626155
  var valid_21626156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626156 = validateParameter(valid_21626156, JString, required = false,
                                   default = nil)
  if valid_21626156 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626156
  var valid_21626157 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626157 = validateParameter(valid_21626157, JString, required = false,
                                   default = nil)
  if valid_21626157 != nil:
    section.add "X-Amz-Algorithm", valid_21626157
  var valid_21626158 = header.getOrDefault("X-Amz-Signature")
  valid_21626158 = validateParameter(valid_21626158, JString, required = false,
                                   default = nil)
  if valid_21626158 != nil:
    section.add "X-Amz-Signature", valid_21626158
  var valid_21626159 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626159 = validateParameter(valid_21626159, JString, required = false,
                                   default = nil)
  if valid_21626159 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626159
  var valid_21626160 = header.getOrDefault("X-Amz-Credential")
  valid_21626160 = validateParameter(valid_21626160, JString, required = false,
                                   default = nil)
  if valid_21626160 != nil:
    section.add "X-Amz-Credential", valid_21626160
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21626161 = formData.getOrDefault("ConfigurationSetName")
  valid_21626161 = validateParameter(valid_21626161, JString, required = true,
                                   default = nil)
  if valid_21626161 != nil:
    section.add "ConfigurationSetName", valid_21626161
  var valid_21626162 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_21626162 = validateParameter(valid_21626162, JString, required = false,
                                   default = nil)
  if valid_21626162 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_21626162
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626163: Call_PostCreateConfigurationSetTrackingOptions_21626149;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21626163.validator(path, query, header, formData, body, _)
  let scheme = call_21626163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626163.makeUrl(scheme.get, call_21626163.host, call_21626163.base,
                               call_21626163.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626163, uri, valid, _)

proc call*(call_21626164: Call_PostCreateConfigurationSetTrackingOptions_21626149;
          ConfigurationSetName: string;
          Action: string = "CreateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_21626165 = newJObject()
  var formData_21626166 = newJObject()
  add(formData_21626166, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626165, "Action", newJString(Action))
  add(formData_21626166, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_21626165, "Version", newJString(Version))
  result = call_21626164.call(nil, query_21626165, nil, formData_21626166, nil)

var postCreateConfigurationSetTrackingOptions* = Call_PostCreateConfigurationSetTrackingOptions_21626149(
    name: "postCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_PostCreateConfigurationSetTrackingOptions_21626150,
    base: "/", makeUrl: url_PostCreateConfigurationSetTrackingOptions_21626151,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetTrackingOptions_21626132 = ref object of OpenApiRestCall_21625435
proc url_GetCreateConfigurationSetTrackingOptions_21626134(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSetTrackingOptions_21626133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626135 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_21626135 = validateParameter(valid_21626135, JString, required = false,
                                   default = nil)
  if valid_21626135 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_21626135
  var valid_21626136 = query.getOrDefault("Action")
  valid_21626136 = validateParameter(valid_21626136, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_21626136 != nil:
    section.add "Action", valid_21626136
  var valid_21626137 = query.getOrDefault("ConfigurationSetName")
  valid_21626137 = validateParameter(valid_21626137, JString, required = true,
                                   default = nil)
  if valid_21626137 != nil:
    section.add "ConfigurationSetName", valid_21626137
  var valid_21626138 = query.getOrDefault("Version")
  valid_21626138 = validateParameter(valid_21626138, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626138 != nil:
    section.add "Version", valid_21626138
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626139 = header.getOrDefault("X-Amz-Date")
  valid_21626139 = validateParameter(valid_21626139, JString, required = false,
                                   default = nil)
  if valid_21626139 != nil:
    section.add "X-Amz-Date", valid_21626139
  var valid_21626140 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626140 = validateParameter(valid_21626140, JString, required = false,
                                   default = nil)
  if valid_21626140 != nil:
    section.add "X-Amz-Security-Token", valid_21626140
  var valid_21626141 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626141 = validateParameter(valid_21626141, JString, required = false,
                                   default = nil)
  if valid_21626141 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626141
  var valid_21626142 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626142 = validateParameter(valid_21626142, JString, required = false,
                                   default = nil)
  if valid_21626142 != nil:
    section.add "X-Amz-Algorithm", valid_21626142
  var valid_21626143 = header.getOrDefault("X-Amz-Signature")
  valid_21626143 = validateParameter(valid_21626143, JString, required = false,
                                   default = nil)
  if valid_21626143 != nil:
    section.add "X-Amz-Signature", valid_21626143
  var valid_21626144 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626144 = validateParameter(valid_21626144, JString, required = false,
                                   default = nil)
  if valid_21626144 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626144
  var valid_21626145 = header.getOrDefault("X-Amz-Credential")
  valid_21626145 = validateParameter(valid_21626145, JString, required = false,
                                   default = nil)
  if valid_21626145 != nil:
    section.add "X-Amz-Credential", valid_21626145
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626146: Call_GetCreateConfigurationSetTrackingOptions_21626132;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21626146.validator(path, query, header, formData, body, _)
  let scheme = call_21626146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626146.makeUrl(scheme.get, call_21626146.host, call_21626146.base,
                               call_21626146.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626146, uri, valid, _)

proc call*(call_21626147: Call_GetCreateConfigurationSetTrackingOptions_21626132;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: string (required)
  var query_21626148 = newJObject()
  add(query_21626148, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_21626148, "Action", newJString(Action))
  add(query_21626148, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626148, "Version", newJString(Version))
  result = call_21626147.call(nil, query_21626148, nil, nil, nil)

var getCreateConfigurationSetTrackingOptions* = Call_GetCreateConfigurationSetTrackingOptions_21626132(
    name: "getCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_GetCreateConfigurationSetTrackingOptions_21626133,
    base: "/", makeUrl: url_GetCreateConfigurationSetTrackingOptions_21626134,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomVerificationEmailTemplate_21626188 = ref object of OpenApiRestCall_21625435
proc url_PostCreateCustomVerificationEmailTemplate_21626190(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomVerificationEmailTemplate_21626189(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626191 = query.getOrDefault("Action")
  valid_21626191 = validateParameter(valid_21626191, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_21626191 != nil:
    section.add "Action", valid_21626191
  var valid_21626192 = query.getOrDefault("Version")
  valid_21626192 = validateParameter(valid_21626192, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626192 != nil:
    section.add "Version", valid_21626192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626193 = header.getOrDefault("X-Amz-Date")
  valid_21626193 = validateParameter(valid_21626193, JString, required = false,
                                   default = nil)
  if valid_21626193 != nil:
    section.add "X-Amz-Date", valid_21626193
  var valid_21626194 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626194 = validateParameter(valid_21626194, JString, required = false,
                                   default = nil)
  if valid_21626194 != nil:
    section.add "X-Amz-Security-Token", valid_21626194
  var valid_21626195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626195 = validateParameter(valid_21626195, JString, required = false,
                                   default = nil)
  if valid_21626195 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626195
  var valid_21626196 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626196 = validateParameter(valid_21626196, JString, required = false,
                                   default = nil)
  if valid_21626196 != nil:
    section.add "X-Amz-Algorithm", valid_21626196
  var valid_21626197 = header.getOrDefault("X-Amz-Signature")
  valid_21626197 = validateParameter(valid_21626197, JString, required = false,
                                   default = nil)
  if valid_21626197 != nil:
    section.add "X-Amz-Signature", valid_21626197
  var valid_21626198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626198 = validateParameter(valid_21626198, JString, required = false,
                                   default = nil)
  if valid_21626198 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626198
  var valid_21626199 = header.getOrDefault("X-Amz-Credential")
  valid_21626199 = validateParameter(valid_21626199, JString, required = false,
                                   default = nil)
  if valid_21626199 != nil:
    section.add "X-Amz-Credential", valid_21626199
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SuccessRedirectionURL` field"
  var valid_21626200 = formData.getOrDefault("SuccessRedirectionURL")
  valid_21626200 = validateParameter(valid_21626200, JString, required = true,
                                   default = nil)
  if valid_21626200 != nil:
    section.add "SuccessRedirectionURL", valid_21626200
  var valid_21626201 = formData.getOrDefault("FailureRedirectionURL")
  valid_21626201 = validateParameter(valid_21626201, JString, required = true,
                                   default = nil)
  if valid_21626201 != nil:
    section.add "FailureRedirectionURL", valid_21626201
  var valid_21626202 = formData.getOrDefault("FromEmailAddress")
  valid_21626202 = validateParameter(valid_21626202, JString, required = true,
                                   default = nil)
  if valid_21626202 != nil:
    section.add "FromEmailAddress", valid_21626202
  var valid_21626203 = formData.getOrDefault("TemplateContent")
  valid_21626203 = validateParameter(valid_21626203, JString, required = true,
                                   default = nil)
  if valid_21626203 != nil:
    section.add "TemplateContent", valid_21626203
  var valid_21626204 = formData.getOrDefault("TemplateName")
  valid_21626204 = validateParameter(valid_21626204, JString, required = true,
                                   default = nil)
  if valid_21626204 != nil:
    section.add "TemplateName", valid_21626204
  var valid_21626205 = formData.getOrDefault("TemplateSubject")
  valid_21626205 = validateParameter(valid_21626205, JString, required = true,
                                   default = nil)
  if valid_21626205 != nil:
    section.add "TemplateSubject", valid_21626205
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626206: Call_PostCreateCustomVerificationEmailTemplate_21626188;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626206.validator(path, query, header, formData, body, _)
  let scheme = call_21626206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626206.makeUrl(scheme.get, call_21626206.host, call_21626206.base,
                               call_21626206.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626206, uri, valid, _)

proc call*(call_21626207: Call_PostCreateCustomVerificationEmailTemplate_21626188;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          FromEmailAddress: string; TemplateContent: string; TemplateName: string;
          TemplateSubject: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_21626208 = newJObject()
  var formData_21626209 = newJObject()
  add(formData_21626209, "SuccessRedirectionURL",
      newJString(SuccessRedirectionURL))
  add(formData_21626209, "FailureRedirectionURL",
      newJString(FailureRedirectionURL))
  add(formData_21626209, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_21626208, "Action", newJString(Action))
  add(formData_21626209, "TemplateContent", newJString(TemplateContent))
  add(formData_21626209, "TemplateName", newJString(TemplateName))
  add(formData_21626209, "TemplateSubject", newJString(TemplateSubject))
  add(query_21626208, "Version", newJString(Version))
  result = call_21626207.call(nil, query_21626208, nil, formData_21626209, nil)

var postCreateCustomVerificationEmailTemplate* = Call_PostCreateCustomVerificationEmailTemplate_21626188(
    name: "postCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_PostCreateCustomVerificationEmailTemplate_21626189,
    base: "/", makeUrl: url_PostCreateCustomVerificationEmailTemplate_21626190,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomVerificationEmailTemplate_21626167 = ref object of OpenApiRestCall_21625435
proc url_GetCreateCustomVerificationEmailTemplate_21626169(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomVerificationEmailTemplate_21626168(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateSubject` field"
  var valid_21626170 = query.getOrDefault("TemplateSubject")
  valid_21626170 = validateParameter(valid_21626170, JString, required = true,
                                   default = nil)
  if valid_21626170 != nil:
    section.add "TemplateSubject", valid_21626170
  var valid_21626171 = query.getOrDefault("FromEmailAddress")
  valid_21626171 = validateParameter(valid_21626171, JString, required = true,
                                   default = nil)
  if valid_21626171 != nil:
    section.add "FromEmailAddress", valid_21626171
  var valid_21626172 = query.getOrDefault("TemplateContent")
  valid_21626172 = validateParameter(valid_21626172, JString, required = true,
                                   default = nil)
  if valid_21626172 != nil:
    section.add "TemplateContent", valid_21626172
  var valid_21626173 = query.getOrDefault("Action")
  valid_21626173 = validateParameter(valid_21626173, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_21626173 != nil:
    section.add "Action", valid_21626173
  var valid_21626174 = query.getOrDefault("TemplateName")
  valid_21626174 = validateParameter(valid_21626174, JString, required = true,
                                   default = nil)
  if valid_21626174 != nil:
    section.add "TemplateName", valid_21626174
  var valid_21626175 = query.getOrDefault("SuccessRedirectionURL")
  valid_21626175 = validateParameter(valid_21626175, JString, required = true,
                                   default = nil)
  if valid_21626175 != nil:
    section.add "SuccessRedirectionURL", valid_21626175
  var valid_21626176 = query.getOrDefault("FailureRedirectionURL")
  valid_21626176 = validateParameter(valid_21626176, JString, required = true,
                                   default = nil)
  if valid_21626176 != nil:
    section.add "FailureRedirectionURL", valid_21626176
  var valid_21626177 = query.getOrDefault("Version")
  valid_21626177 = validateParameter(valid_21626177, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626177 != nil:
    section.add "Version", valid_21626177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626178 = header.getOrDefault("X-Amz-Date")
  valid_21626178 = validateParameter(valid_21626178, JString, required = false,
                                   default = nil)
  if valid_21626178 != nil:
    section.add "X-Amz-Date", valid_21626178
  var valid_21626179 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626179 = validateParameter(valid_21626179, JString, required = false,
                                   default = nil)
  if valid_21626179 != nil:
    section.add "X-Amz-Security-Token", valid_21626179
  var valid_21626180 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626180 = validateParameter(valid_21626180, JString, required = false,
                                   default = nil)
  if valid_21626180 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626180
  var valid_21626181 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626181 = validateParameter(valid_21626181, JString, required = false,
                                   default = nil)
  if valid_21626181 != nil:
    section.add "X-Amz-Algorithm", valid_21626181
  var valid_21626182 = header.getOrDefault("X-Amz-Signature")
  valid_21626182 = validateParameter(valid_21626182, JString, required = false,
                                   default = nil)
  if valid_21626182 != nil:
    section.add "X-Amz-Signature", valid_21626182
  var valid_21626183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626183 = validateParameter(valid_21626183, JString, required = false,
                                   default = nil)
  if valid_21626183 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626183
  var valid_21626184 = header.getOrDefault("X-Amz-Credential")
  valid_21626184 = validateParameter(valid_21626184, JString, required = false,
                                   default = nil)
  if valid_21626184 != nil:
    section.add "X-Amz-Credential", valid_21626184
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626185: Call_GetCreateCustomVerificationEmailTemplate_21626167;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626185.validator(path, query, header, formData, body, _)
  let scheme = call_21626185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626185.makeUrl(scheme.get, call_21626185.host, call_21626185.base,
                               call_21626185.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626185, uri, valid, _)

proc call*(call_21626186: Call_GetCreateCustomVerificationEmailTemplate_21626167;
          TemplateSubject: string; FromEmailAddress: string;
          TemplateContent: string; TemplateName: string;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_21626187 = newJObject()
  add(query_21626187, "TemplateSubject", newJString(TemplateSubject))
  add(query_21626187, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_21626187, "TemplateContent", newJString(TemplateContent))
  add(query_21626187, "Action", newJString(Action))
  add(query_21626187, "TemplateName", newJString(TemplateName))
  add(query_21626187, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_21626187, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_21626187, "Version", newJString(Version))
  result = call_21626186.call(nil, query_21626187, nil, nil, nil)

var getCreateCustomVerificationEmailTemplate* = Call_GetCreateCustomVerificationEmailTemplate_21626167(
    name: "getCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_GetCreateCustomVerificationEmailTemplate_21626168,
    base: "/", makeUrl: url_GetCreateCustomVerificationEmailTemplate_21626169,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptFilter_21626227 = ref object of OpenApiRestCall_21625435
proc url_PostCreateReceiptFilter_21626229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptFilter_21626228(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626230 = query.getOrDefault("Action")
  valid_21626230 = validateParameter(valid_21626230, JString, required = true,
                                   default = newJString("CreateReceiptFilter"))
  if valid_21626230 != nil:
    section.add "Action", valid_21626230
  var valid_21626231 = query.getOrDefault("Version")
  valid_21626231 = validateParameter(valid_21626231, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626231 != nil:
    section.add "Version", valid_21626231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626232 = header.getOrDefault("X-Amz-Date")
  valid_21626232 = validateParameter(valid_21626232, JString, required = false,
                                   default = nil)
  if valid_21626232 != nil:
    section.add "X-Amz-Date", valid_21626232
  var valid_21626233 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626233 = validateParameter(valid_21626233, JString, required = false,
                                   default = nil)
  if valid_21626233 != nil:
    section.add "X-Amz-Security-Token", valid_21626233
  var valid_21626234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626234 = validateParameter(valid_21626234, JString, required = false,
                                   default = nil)
  if valid_21626234 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626234
  var valid_21626235 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626235 = validateParameter(valid_21626235, JString, required = false,
                                   default = nil)
  if valid_21626235 != nil:
    section.add "X-Amz-Algorithm", valid_21626235
  var valid_21626236 = header.getOrDefault("X-Amz-Signature")
  valid_21626236 = validateParameter(valid_21626236, JString, required = false,
                                   default = nil)
  if valid_21626236 != nil:
    section.add "X-Amz-Signature", valid_21626236
  var valid_21626237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626237 = validateParameter(valid_21626237, JString, required = false,
                                   default = nil)
  if valid_21626237 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626237
  var valid_21626238 = header.getOrDefault("X-Amz-Credential")
  valid_21626238 = validateParameter(valid_21626238, JString, required = false,
                                   default = nil)
  if valid_21626238 != nil:
    section.add "X-Amz-Credential", valid_21626238
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_21626239 = formData.getOrDefault("Filter.IpFilter")
  valid_21626239 = validateParameter(valid_21626239, JString, required = false,
                                   default = nil)
  if valid_21626239 != nil:
    section.add "Filter.IpFilter", valid_21626239
  var valid_21626240 = formData.getOrDefault("Filter.Name")
  valid_21626240 = validateParameter(valid_21626240, JString, required = false,
                                   default = nil)
  if valid_21626240 != nil:
    section.add "Filter.Name", valid_21626240
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626241: Call_PostCreateReceiptFilter_21626227;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626241.validator(path, query, header, formData, body, _)
  let scheme = call_21626241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626241.makeUrl(scheme.get, call_21626241.host, call_21626241.base,
                               call_21626241.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626241, uri, valid, _)

proc call*(call_21626242: Call_PostCreateReceiptFilter_21626227;
          Action: string = "CreateReceiptFilter"; FilterIpFilter: string = "";
          FilterName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626243 = newJObject()
  var formData_21626244 = newJObject()
  add(query_21626243, "Action", newJString(Action))
  add(formData_21626244, "Filter.IpFilter", newJString(FilterIpFilter))
  add(formData_21626244, "Filter.Name", newJString(FilterName))
  add(query_21626243, "Version", newJString(Version))
  result = call_21626242.call(nil, query_21626243, nil, formData_21626244, nil)

var postCreateReceiptFilter* = Call_PostCreateReceiptFilter_21626227(
    name: "postCreateReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_PostCreateReceiptFilter_21626228, base: "/",
    makeUrl: url_PostCreateReceiptFilter_21626229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptFilter_21626210 = ref object of OpenApiRestCall_21625435
proc url_GetCreateReceiptFilter_21626212(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptFilter_21626211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_21626213 = query.getOrDefault("Filter.IpFilter")
  valid_21626213 = validateParameter(valid_21626213, JString, required = false,
                                   default = nil)
  if valid_21626213 != nil:
    section.add "Filter.IpFilter", valid_21626213
  var valid_21626214 = query.getOrDefault("Action")
  valid_21626214 = validateParameter(valid_21626214, JString, required = true,
                                   default = newJString("CreateReceiptFilter"))
  if valid_21626214 != nil:
    section.add "Action", valid_21626214
  var valid_21626215 = query.getOrDefault("Version")
  valid_21626215 = validateParameter(valid_21626215, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626215 != nil:
    section.add "Version", valid_21626215
  var valid_21626216 = query.getOrDefault("Filter.Name")
  valid_21626216 = validateParameter(valid_21626216, JString, required = false,
                                   default = nil)
  if valid_21626216 != nil:
    section.add "Filter.Name", valid_21626216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626217 = header.getOrDefault("X-Amz-Date")
  valid_21626217 = validateParameter(valid_21626217, JString, required = false,
                                   default = nil)
  if valid_21626217 != nil:
    section.add "X-Amz-Date", valid_21626217
  var valid_21626218 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626218 = validateParameter(valid_21626218, JString, required = false,
                                   default = nil)
  if valid_21626218 != nil:
    section.add "X-Amz-Security-Token", valid_21626218
  var valid_21626219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626219 = validateParameter(valid_21626219, JString, required = false,
                                   default = nil)
  if valid_21626219 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626219
  var valid_21626220 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626220 = validateParameter(valid_21626220, JString, required = false,
                                   default = nil)
  if valid_21626220 != nil:
    section.add "X-Amz-Algorithm", valid_21626220
  var valid_21626221 = header.getOrDefault("X-Amz-Signature")
  valid_21626221 = validateParameter(valid_21626221, JString, required = false,
                                   default = nil)
  if valid_21626221 != nil:
    section.add "X-Amz-Signature", valid_21626221
  var valid_21626222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626222 = validateParameter(valid_21626222, JString, required = false,
                                   default = nil)
  if valid_21626222 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626222
  var valid_21626223 = header.getOrDefault("X-Amz-Credential")
  valid_21626223 = validateParameter(valid_21626223, JString, required = false,
                                   default = nil)
  if valid_21626223 != nil:
    section.add "X-Amz-Credential", valid_21626223
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626224: Call_GetCreateReceiptFilter_21626210;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626224.validator(path, query, header, formData, body, _)
  let scheme = call_21626224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626224.makeUrl(scheme.get, call_21626224.host, call_21626224.base,
                               call_21626224.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626224, uri, valid, _)

proc call*(call_21626225: Call_GetCreateReceiptFilter_21626210;
          FilterIpFilter: string = ""; Action: string = "CreateReceiptFilter";
          Version: string = "2010-12-01"; FilterName: string = ""): Recallable =
  ## getCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_21626226 = newJObject()
  add(query_21626226, "Filter.IpFilter", newJString(FilterIpFilter))
  add(query_21626226, "Action", newJString(Action))
  add(query_21626226, "Version", newJString(Version))
  add(query_21626226, "Filter.Name", newJString(FilterName))
  result = call_21626225.call(nil, query_21626226, nil, nil, nil)

var getCreateReceiptFilter* = Call_GetCreateReceiptFilter_21626210(
    name: "getCreateReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_GetCreateReceiptFilter_21626211, base: "/",
    makeUrl: url_GetCreateReceiptFilter_21626212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRule_21626268 = ref object of OpenApiRestCall_21625435
proc url_PostCreateReceiptRule_21626270(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptRule_21626269(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626271 = query.getOrDefault("Action")
  valid_21626271 = validateParameter(valid_21626271, JString, required = true,
                                   default = newJString("CreateReceiptRule"))
  if valid_21626271 != nil:
    section.add "Action", valid_21626271
  var valid_21626272 = query.getOrDefault("Version")
  valid_21626272 = validateParameter(valid_21626272, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626272 != nil:
    section.add "Version", valid_21626272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626273 = header.getOrDefault("X-Amz-Date")
  valid_21626273 = validateParameter(valid_21626273, JString, required = false,
                                   default = nil)
  if valid_21626273 != nil:
    section.add "X-Amz-Date", valid_21626273
  var valid_21626274 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626274 = validateParameter(valid_21626274, JString, required = false,
                                   default = nil)
  if valid_21626274 != nil:
    section.add "X-Amz-Security-Token", valid_21626274
  var valid_21626275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626275 = validateParameter(valid_21626275, JString, required = false,
                                   default = nil)
  if valid_21626275 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626275
  var valid_21626276 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626276 = validateParameter(valid_21626276, JString, required = false,
                                   default = nil)
  if valid_21626276 != nil:
    section.add "X-Amz-Algorithm", valid_21626276
  var valid_21626277 = header.getOrDefault("X-Amz-Signature")
  valid_21626277 = validateParameter(valid_21626277, JString, required = false,
                                   default = nil)
  if valid_21626277 != nil:
    section.add "X-Amz-Signature", valid_21626277
  var valid_21626278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626278 = validateParameter(valid_21626278, JString, required = false,
                                   default = nil)
  if valid_21626278 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626278
  var valid_21626279 = header.getOrDefault("X-Amz-Credential")
  valid_21626279 = validateParameter(valid_21626279, JString, required = false,
                                   default = nil)
  if valid_21626279 != nil:
    section.add "X-Amz-Credential", valid_21626279
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_21626280 = formData.getOrDefault("Rule.Recipients")
  valid_21626280 = validateParameter(valid_21626280, JArray, required = false,
                                   default = nil)
  if valid_21626280 != nil:
    section.add "Rule.Recipients", valid_21626280
  var valid_21626281 = formData.getOrDefault("After")
  valid_21626281 = validateParameter(valid_21626281, JString, required = false,
                                   default = nil)
  if valid_21626281 != nil:
    section.add "After", valid_21626281
  var valid_21626282 = formData.getOrDefault("Rule.Enabled")
  valid_21626282 = validateParameter(valid_21626282, JString, required = false,
                                   default = nil)
  if valid_21626282 != nil:
    section.add "Rule.Enabled", valid_21626282
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_21626283 = formData.getOrDefault("RuleSetName")
  valid_21626283 = validateParameter(valid_21626283, JString, required = true,
                                   default = nil)
  if valid_21626283 != nil:
    section.add "RuleSetName", valid_21626283
  var valid_21626284 = formData.getOrDefault("Rule.Actions")
  valid_21626284 = validateParameter(valid_21626284, JArray, required = false,
                                   default = nil)
  if valid_21626284 != nil:
    section.add "Rule.Actions", valid_21626284
  var valid_21626285 = formData.getOrDefault("Rule.Name")
  valid_21626285 = validateParameter(valid_21626285, JString, required = false,
                                   default = nil)
  if valid_21626285 != nil:
    section.add "Rule.Name", valid_21626285
  var valid_21626286 = formData.getOrDefault("Rule.ScanEnabled")
  valid_21626286 = validateParameter(valid_21626286, JString, required = false,
                                   default = nil)
  if valid_21626286 != nil:
    section.add "Rule.ScanEnabled", valid_21626286
  var valid_21626287 = formData.getOrDefault("Rule.TlsPolicy")
  valid_21626287 = validateParameter(valid_21626287, JString, required = false,
                                   default = nil)
  if valid_21626287 != nil:
    section.add "Rule.TlsPolicy", valid_21626287
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626288: Call_PostCreateReceiptRule_21626268;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626288.validator(path, query, header, formData, body, _)
  let scheme = call_21626288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626288.makeUrl(scheme.get, call_21626288.host, call_21626288.base,
                               call_21626288.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626288, uri, valid, _)

proc call*(call_21626289: Call_PostCreateReceiptRule_21626268; RuleSetName: string;
          RuleRecipients: JsonNode = nil; After: string = ""; RuleEnabled: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_21626290 = newJObject()
  var formData_21626291 = newJObject()
  if RuleRecipients != nil:
    formData_21626291.add "Rule.Recipients", RuleRecipients
  add(formData_21626291, "After", newJString(After))
  add(formData_21626291, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_21626291, "RuleSetName", newJString(RuleSetName))
  add(query_21626290, "Action", newJString(Action))
  if RuleActions != nil:
    formData_21626291.add "Rule.Actions", RuleActions
  add(formData_21626291, "Rule.Name", newJString(RuleName))
  add(formData_21626291, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_21626291, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_21626290, "Version", newJString(Version))
  result = call_21626289.call(nil, query_21626290, nil, formData_21626291, nil)

var postCreateReceiptRule* = Call_PostCreateReceiptRule_21626268(
    name: "postCreateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_PostCreateReceiptRule_21626269, base: "/",
    makeUrl: url_PostCreateReceiptRule_21626270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRule_21626245 = ref object of OpenApiRestCall_21625435
proc url_GetCreateReceiptRule_21626247(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptRule_21626246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626248 = query.getOrDefault("Rule.ScanEnabled")
  valid_21626248 = validateParameter(valid_21626248, JString, required = false,
                                   default = nil)
  if valid_21626248 != nil:
    section.add "Rule.ScanEnabled", valid_21626248
  var valid_21626249 = query.getOrDefault("Rule.Name")
  valid_21626249 = validateParameter(valid_21626249, JString, required = false,
                                   default = nil)
  if valid_21626249 != nil:
    section.add "Rule.Name", valid_21626249
  var valid_21626250 = query.getOrDefault("Rule.Enabled")
  valid_21626250 = validateParameter(valid_21626250, JString, required = false,
                                   default = nil)
  if valid_21626250 != nil:
    section.add "Rule.Enabled", valid_21626250
  var valid_21626251 = query.getOrDefault("After")
  valid_21626251 = validateParameter(valid_21626251, JString, required = false,
                                   default = nil)
  if valid_21626251 != nil:
    section.add "After", valid_21626251
  var valid_21626252 = query.getOrDefault("Rule.TlsPolicy")
  valid_21626252 = validateParameter(valid_21626252, JString, required = false,
                                   default = nil)
  if valid_21626252 != nil:
    section.add "Rule.TlsPolicy", valid_21626252
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_21626253 = query.getOrDefault("RuleSetName")
  valid_21626253 = validateParameter(valid_21626253, JString, required = true,
                                   default = nil)
  if valid_21626253 != nil:
    section.add "RuleSetName", valid_21626253
  var valid_21626254 = query.getOrDefault("Action")
  valid_21626254 = validateParameter(valid_21626254, JString, required = true,
                                   default = newJString("CreateReceiptRule"))
  if valid_21626254 != nil:
    section.add "Action", valid_21626254
  var valid_21626255 = query.getOrDefault("Rule.Actions")
  valid_21626255 = validateParameter(valid_21626255, JArray, required = false,
                                   default = nil)
  if valid_21626255 != nil:
    section.add "Rule.Actions", valid_21626255
  var valid_21626256 = query.getOrDefault("Rule.Recipients")
  valid_21626256 = validateParameter(valid_21626256, JArray, required = false,
                                   default = nil)
  if valid_21626256 != nil:
    section.add "Rule.Recipients", valid_21626256
  var valid_21626257 = query.getOrDefault("Version")
  valid_21626257 = validateParameter(valid_21626257, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626257 != nil:
    section.add "Version", valid_21626257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626258 = header.getOrDefault("X-Amz-Date")
  valid_21626258 = validateParameter(valid_21626258, JString, required = false,
                                   default = nil)
  if valid_21626258 != nil:
    section.add "X-Amz-Date", valid_21626258
  var valid_21626259 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626259 = validateParameter(valid_21626259, JString, required = false,
                                   default = nil)
  if valid_21626259 != nil:
    section.add "X-Amz-Security-Token", valid_21626259
  var valid_21626260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626260 = validateParameter(valid_21626260, JString, required = false,
                                   default = nil)
  if valid_21626260 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626260
  var valid_21626261 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626261 = validateParameter(valid_21626261, JString, required = false,
                                   default = nil)
  if valid_21626261 != nil:
    section.add "X-Amz-Algorithm", valid_21626261
  var valid_21626262 = header.getOrDefault("X-Amz-Signature")
  valid_21626262 = validateParameter(valid_21626262, JString, required = false,
                                   default = nil)
  if valid_21626262 != nil:
    section.add "X-Amz-Signature", valid_21626262
  var valid_21626263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626263 = validateParameter(valid_21626263, JString, required = false,
                                   default = nil)
  if valid_21626263 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626263
  var valid_21626264 = header.getOrDefault("X-Amz-Credential")
  valid_21626264 = validateParameter(valid_21626264, JString, required = false,
                                   default = nil)
  if valid_21626264 != nil:
    section.add "X-Amz-Credential", valid_21626264
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626265: Call_GetCreateReceiptRule_21626245; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626265.validator(path, query, header, formData, body, _)
  let scheme = call_21626265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626265.makeUrl(scheme.get, call_21626265.host, call_21626265.base,
                               call_21626265.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626265, uri, valid, _)

proc call*(call_21626266: Call_GetCreateReceiptRule_21626245; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          After: string = ""; RuleTlsPolicy: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleRecipients: JsonNode = nil; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_21626267 = newJObject()
  add(query_21626267, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_21626267, "Rule.Name", newJString(RuleName))
  add(query_21626267, "Rule.Enabled", newJString(RuleEnabled))
  add(query_21626267, "After", newJString(After))
  add(query_21626267, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_21626267, "RuleSetName", newJString(RuleSetName))
  add(query_21626267, "Action", newJString(Action))
  if RuleActions != nil:
    query_21626267.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_21626267.add "Rule.Recipients", RuleRecipients
  add(query_21626267, "Version", newJString(Version))
  result = call_21626266.call(nil, query_21626267, nil, nil, nil)

var getCreateReceiptRule* = Call_GetCreateReceiptRule_21626245(
    name: "getCreateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_GetCreateReceiptRule_21626246, base: "/",
    makeUrl: url_GetCreateReceiptRule_21626247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRuleSet_21626308 = ref object of OpenApiRestCall_21625435
proc url_PostCreateReceiptRuleSet_21626310(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptRuleSet_21626309(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626311 = query.getOrDefault("Action")
  valid_21626311 = validateParameter(valid_21626311, JString, required = true,
                                   default = newJString("CreateReceiptRuleSet"))
  if valid_21626311 != nil:
    section.add "Action", valid_21626311
  var valid_21626312 = query.getOrDefault("Version")
  valid_21626312 = validateParameter(valid_21626312, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626312 != nil:
    section.add "Version", valid_21626312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626313 = header.getOrDefault("X-Amz-Date")
  valid_21626313 = validateParameter(valid_21626313, JString, required = false,
                                   default = nil)
  if valid_21626313 != nil:
    section.add "X-Amz-Date", valid_21626313
  var valid_21626314 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626314 = validateParameter(valid_21626314, JString, required = false,
                                   default = nil)
  if valid_21626314 != nil:
    section.add "X-Amz-Security-Token", valid_21626314
  var valid_21626315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626315 = validateParameter(valid_21626315, JString, required = false,
                                   default = nil)
  if valid_21626315 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626315
  var valid_21626316 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626316 = validateParameter(valid_21626316, JString, required = false,
                                   default = nil)
  if valid_21626316 != nil:
    section.add "X-Amz-Algorithm", valid_21626316
  var valid_21626317 = header.getOrDefault("X-Amz-Signature")
  valid_21626317 = validateParameter(valid_21626317, JString, required = false,
                                   default = nil)
  if valid_21626317 != nil:
    section.add "X-Amz-Signature", valid_21626317
  var valid_21626318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626318 = validateParameter(valid_21626318, JString, required = false,
                                   default = nil)
  if valid_21626318 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626318
  var valid_21626319 = header.getOrDefault("X-Amz-Credential")
  valid_21626319 = validateParameter(valid_21626319, JString, required = false,
                                   default = nil)
  if valid_21626319 != nil:
    section.add "X-Amz-Credential", valid_21626319
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_21626320 = formData.getOrDefault("RuleSetName")
  valid_21626320 = validateParameter(valid_21626320, JString, required = true,
                                   default = nil)
  if valid_21626320 != nil:
    section.add "RuleSetName", valid_21626320
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626321: Call_PostCreateReceiptRuleSet_21626308;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626321.validator(path, query, header, formData, body, _)
  let scheme = call_21626321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626321.makeUrl(scheme.get, call_21626321.host, call_21626321.base,
                               call_21626321.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626321, uri, valid, _)

proc call*(call_21626322: Call_PostCreateReceiptRuleSet_21626308;
          RuleSetName: string; Action: string = "CreateReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626323 = newJObject()
  var formData_21626324 = newJObject()
  add(formData_21626324, "RuleSetName", newJString(RuleSetName))
  add(query_21626323, "Action", newJString(Action))
  add(query_21626323, "Version", newJString(Version))
  result = call_21626322.call(nil, query_21626323, nil, formData_21626324, nil)

var postCreateReceiptRuleSet* = Call_PostCreateReceiptRuleSet_21626308(
    name: "postCreateReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_PostCreateReceiptRuleSet_21626309, base: "/",
    makeUrl: url_PostCreateReceiptRuleSet_21626310,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRuleSet_21626292 = ref object of OpenApiRestCall_21625435
proc url_GetCreateReceiptRuleSet_21626294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptRuleSet_21626293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_21626295 = query.getOrDefault("RuleSetName")
  valid_21626295 = validateParameter(valid_21626295, JString, required = true,
                                   default = nil)
  if valid_21626295 != nil:
    section.add "RuleSetName", valid_21626295
  var valid_21626296 = query.getOrDefault("Action")
  valid_21626296 = validateParameter(valid_21626296, JString, required = true,
                                   default = newJString("CreateReceiptRuleSet"))
  if valid_21626296 != nil:
    section.add "Action", valid_21626296
  var valid_21626297 = query.getOrDefault("Version")
  valid_21626297 = validateParameter(valid_21626297, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626297 != nil:
    section.add "Version", valid_21626297
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626298 = header.getOrDefault("X-Amz-Date")
  valid_21626298 = validateParameter(valid_21626298, JString, required = false,
                                   default = nil)
  if valid_21626298 != nil:
    section.add "X-Amz-Date", valid_21626298
  var valid_21626299 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626299 = validateParameter(valid_21626299, JString, required = false,
                                   default = nil)
  if valid_21626299 != nil:
    section.add "X-Amz-Security-Token", valid_21626299
  var valid_21626300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626300 = validateParameter(valid_21626300, JString, required = false,
                                   default = nil)
  if valid_21626300 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626300
  var valid_21626301 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626301 = validateParameter(valid_21626301, JString, required = false,
                                   default = nil)
  if valid_21626301 != nil:
    section.add "X-Amz-Algorithm", valid_21626301
  var valid_21626302 = header.getOrDefault("X-Amz-Signature")
  valid_21626302 = validateParameter(valid_21626302, JString, required = false,
                                   default = nil)
  if valid_21626302 != nil:
    section.add "X-Amz-Signature", valid_21626302
  var valid_21626303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626303 = validateParameter(valid_21626303, JString, required = false,
                                   default = nil)
  if valid_21626303 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626303
  var valid_21626304 = header.getOrDefault("X-Amz-Credential")
  valid_21626304 = validateParameter(valid_21626304, JString, required = false,
                                   default = nil)
  if valid_21626304 != nil:
    section.add "X-Amz-Credential", valid_21626304
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626305: Call_GetCreateReceiptRuleSet_21626292;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626305.validator(path, query, header, formData, body, _)
  let scheme = call_21626305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626305.makeUrl(scheme.get, call_21626305.host, call_21626305.base,
                               call_21626305.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626305, uri, valid, _)

proc call*(call_21626306: Call_GetCreateReceiptRuleSet_21626292;
          RuleSetName: string; Action: string = "CreateReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626307 = newJObject()
  add(query_21626307, "RuleSetName", newJString(RuleSetName))
  add(query_21626307, "Action", newJString(Action))
  add(query_21626307, "Version", newJString(Version))
  result = call_21626306.call(nil, query_21626307, nil, nil, nil)

var getCreateReceiptRuleSet* = Call_GetCreateReceiptRuleSet_21626292(
    name: "getCreateReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_GetCreateReceiptRuleSet_21626293, base: "/",
    makeUrl: url_GetCreateReceiptRuleSet_21626294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTemplate_21626344 = ref object of OpenApiRestCall_21625435
proc url_PostCreateTemplate_21626346(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateTemplate_21626345(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626347 = query.getOrDefault("Action")
  valid_21626347 = validateParameter(valid_21626347, JString, required = true,
                                   default = newJString("CreateTemplate"))
  if valid_21626347 != nil:
    section.add "Action", valid_21626347
  var valid_21626348 = query.getOrDefault("Version")
  valid_21626348 = validateParameter(valid_21626348, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626348 != nil:
    section.add "Version", valid_21626348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626349 = header.getOrDefault("X-Amz-Date")
  valid_21626349 = validateParameter(valid_21626349, JString, required = false,
                                   default = nil)
  if valid_21626349 != nil:
    section.add "X-Amz-Date", valid_21626349
  var valid_21626350 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626350 = validateParameter(valid_21626350, JString, required = false,
                                   default = nil)
  if valid_21626350 != nil:
    section.add "X-Amz-Security-Token", valid_21626350
  var valid_21626351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626351 = validateParameter(valid_21626351, JString, required = false,
                                   default = nil)
  if valid_21626351 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626351
  var valid_21626352 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626352 = validateParameter(valid_21626352, JString, required = false,
                                   default = nil)
  if valid_21626352 != nil:
    section.add "X-Amz-Algorithm", valid_21626352
  var valid_21626353 = header.getOrDefault("X-Amz-Signature")
  valid_21626353 = validateParameter(valid_21626353, JString, required = false,
                                   default = nil)
  if valid_21626353 != nil:
    section.add "X-Amz-Signature", valid_21626353
  var valid_21626354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626354 = validateParameter(valid_21626354, JString, required = false,
                                   default = nil)
  if valid_21626354 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626354
  var valid_21626355 = header.getOrDefault("X-Amz-Credential")
  valid_21626355 = validateParameter(valid_21626355, JString, required = false,
                                   default = nil)
  if valid_21626355 != nil:
    section.add "X-Amz-Credential", valid_21626355
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_21626356 = formData.getOrDefault("Template.HtmlPart")
  valid_21626356 = validateParameter(valid_21626356, JString, required = false,
                                   default = nil)
  if valid_21626356 != nil:
    section.add "Template.HtmlPart", valid_21626356
  var valid_21626357 = formData.getOrDefault("Template.TemplateName")
  valid_21626357 = validateParameter(valid_21626357, JString, required = false,
                                   default = nil)
  if valid_21626357 != nil:
    section.add "Template.TemplateName", valid_21626357
  var valid_21626358 = formData.getOrDefault("Template.TextPart")
  valid_21626358 = validateParameter(valid_21626358, JString, required = false,
                                   default = nil)
  if valid_21626358 != nil:
    section.add "Template.TextPart", valid_21626358
  var valid_21626359 = formData.getOrDefault("Template.SubjectPart")
  valid_21626359 = validateParameter(valid_21626359, JString, required = false,
                                   default = nil)
  if valid_21626359 != nil:
    section.add "Template.SubjectPart", valid_21626359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626360: Call_PostCreateTemplate_21626344; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626360.validator(path, query, header, formData, body, _)
  let scheme = call_21626360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626360.makeUrl(scheme.get, call_21626360.host, call_21626360.base,
                               call_21626360.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626360, uri, valid, _)

proc call*(call_21626361: Call_PostCreateTemplate_21626344;
          Action: string = "CreateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_21626362 = newJObject()
  var formData_21626363 = newJObject()
  add(query_21626362, "Action", newJString(Action))
  add(formData_21626363, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_21626363, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_21626363, "Template.TextPart", newJString(TemplateTextPart))
  add(query_21626362, "Version", newJString(Version))
  add(formData_21626363, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_21626361.call(nil, query_21626362, nil, formData_21626363, nil)

var postCreateTemplate* = Call_PostCreateTemplate_21626344(
    name: "postCreateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateTemplate",
    validator: validate_PostCreateTemplate_21626345, base: "/",
    makeUrl: url_PostCreateTemplate_21626346, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTemplate_21626325 = ref object of OpenApiRestCall_21625435
proc url_GetCreateTemplate_21626327(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateTemplate_21626326(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626328 = query.getOrDefault("Template.TemplateName")
  valid_21626328 = validateParameter(valid_21626328, JString, required = false,
                                   default = nil)
  if valid_21626328 != nil:
    section.add "Template.TemplateName", valid_21626328
  var valid_21626329 = query.getOrDefault("Action")
  valid_21626329 = validateParameter(valid_21626329, JString, required = true,
                                   default = newJString("CreateTemplate"))
  if valid_21626329 != nil:
    section.add "Action", valid_21626329
  var valid_21626330 = query.getOrDefault("Template.SubjectPart")
  valid_21626330 = validateParameter(valid_21626330, JString, required = false,
                                   default = nil)
  if valid_21626330 != nil:
    section.add "Template.SubjectPart", valid_21626330
  var valid_21626331 = query.getOrDefault("Template.HtmlPart")
  valid_21626331 = validateParameter(valid_21626331, JString, required = false,
                                   default = nil)
  if valid_21626331 != nil:
    section.add "Template.HtmlPart", valid_21626331
  var valid_21626332 = query.getOrDefault("Template.TextPart")
  valid_21626332 = validateParameter(valid_21626332, JString, required = false,
                                   default = nil)
  if valid_21626332 != nil:
    section.add "Template.TextPart", valid_21626332
  var valid_21626333 = query.getOrDefault("Version")
  valid_21626333 = validateParameter(valid_21626333, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626333 != nil:
    section.add "Version", valid_21626333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626334 = header.getOrDefault("X-Amz-Date")
  valid_21626334 = validateParameter(valid_21626334, JString, required = false,
                                   default = nil)
  if valid_21626334 != nil:
    section.add "X-Amz-Date", valid_21626334
  var valid_21626335 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626335 = validateParameter(valid_21626335, JString, required = false,
                                   default = nil)
  if valid_21626335 != nil:
    section.add "X-Amz-Security-Token", valid_21626335
  var valid_21626336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626336 = validateParameter(valid_21626336, JString, required = false,
                                   default = nil)
  if valid_21626336 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626336
  var valid_21626337 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626337 = validateParameter(valid_21626337, JString, required = false,
                                   default = nil)
  if valid_21626337 != nil:
    section.add "X-Amz-Algorithm", valid_21626337
  var valid_21626338 = header.getOrDefault("X-Amz-Signature")
  valid_21626338 = validateParameter(valid_21626338, JString, required = false,
                                   default = nil)
  if valid_21626338 != nil:
    section.add "X-Amz-Signature", valid_21626338
  var valid_21626339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626339 = validateParameter(valid_21626339, JString, required = false,
                                   default = nil)
  if valid_21626339 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626339
  var valid_21626340 = header.getOrDefault("X-Amz-Credential")
  valid_21626340 = validateParameter(valid_21626340, JString, required = false,
                                   default = nil)
  if valid_21626340 != nil:
    section.add "X-Amz-Credential", valid_21626340
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626341: Call_GetCreateTemplate_21626325; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626341.validator(path, query, header, formData, body, _)
  let scheme = call_21626341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626341.makeUrl(scheme.get, call_21626341.host, call_21626341.base,
                               call_21626341.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626341, uri, valid, _)

proc call*(call_21626342: Call_GetCreateTemplate_21626325;
          TemplateTemplateName: string = ""; Action: string = "CreateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_21626343 = newJObject()
  add(query_21626343, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_21626343, "Action", newJString(Action))
  add(query_21626343, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_21626343, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_21626343, "Template.TextPart", newJString(TemplateTextPart))
  add(query_21626343, "Version", newJString(Version))
  result = call_21626342.call(nil, query_21626343, nil, nil, nil)

var getCreateTemplate* = Call_GetCreateTemplate_21626325(name: "getCreateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=CreateTemplate", validator: validate_GetCreateTemplate_21626326,
    base: "/", makeUrl: url_GetCreateTemplate_21626327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSet_21626380 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteConfigurationSet_21626382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSet_21626381(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626383 = query.getOrDefault("Action")
  valid_21626383 = validateParameter(valid_21626383, JString, required = true, default = newJString(
      "DeleteConfigurationSet"))
  if valid_21626383 != nil:
    section.add "Action", valid_21626383
  var valid_21626384 = query.getOrDefault("Version")
  valid_21626384 = validateParameter(valid_21626384, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626384 != nil:
    section.add "Version", valid_21626384
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626385 = header.getOrDefault("X-Amz-Date")
  valid_21626385 = validateParameter(valid_21626385, JString, required = false,
                                   default = nil)
  if valid_21626385 != nil:
    section.add "X-Amz-Date", valid_21626385
  var valid_21626386 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626386 = validateParameter(valid_21626386, JString, required = false,
                                   default = nil)
  if valid_21626386 != nil:
    section.add "X-Amz-Security-Token", valid_21626386
  var valid_21626387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626387 = validateParameter(valid_21626387, JString, required = false,
                                   default = nil)
  if valid_21626387 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626387
  var valid_21626388 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626388 = validateParameter(valid_21626388, JString, required = false,
                                   default = nil)
  if valid_21626388 != nil:
    section.add "X-Amz-Algorithm", valid_21626388
  var valid_21626389 = header.getOrDefault("X-Amz-Signature")
  valid_21626389 = validateParameter(valid_21626389, JString, required = false,
                                   default = nil)
  if valid_21626389 != nil:
    section.add "X-Amz-Signature", valid_21626389
  var valid_21626390 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626390 = validateParameter(valid_21626390, JString, required = false,
                                   default = nil)
  if valid_21626390 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626390
  var valid_21626391 = header.getOrDefault("X-Amz-Credential")
  valid_21626391 = validateParameter(valid_21626391, JString, required = false,
                                   default = nil)
  if valid_21626391 != nil:
    section.add "X-Amz-Credential", valid_21626391
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21626392 = formData.getOrDefault("ConfigurationSetName")
  valid_21626392 = validateParameter(valid_21626392, JString, required = true,
                                   default = nil)
  if valid_21626392 != nil:
    section.add "ConfigurationSetName", valid_21626392
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626393: Call_PostDeleteConfigurationSet_21626380;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626393.validator(path, query, header, formData, body, _)
  let scheme = call_21626393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626393.makeUrl(scheme.get, call_21626393.host, call_21626393.base,
                               call_21626393.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626393, uri, valid, _)

proc call*(call_21626394: Call_PostDeleteConfigurationSet_21626380;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626395 = newJObject()
  var formData_21626396 = newJObject()
  add(formData_21626396, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626395, "Action", newJString(Action))
  add(query_21626395, "Version", newJString(Version))
  result = call_21626394.call(nil, query_21626395, nil, formData_21626396, nil)

var postDeleteConfigurationSet* = Call_PostDeleteConfigurationSet_21626380(
    name: "postDeleteConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_PostDeleteConfigurationSet_21626381, base: "/",
    makeUrl: url_PostDeleteConfigurationSet_21626382,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSet_21626364 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteConfigurationSet_21626366(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSet_21626365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626367 = query.getOrDefault("Action")
  valid_21626367 = validateParameter(valid_21626367, JString, required = true, default = newJString(
      "DeleteConfigurationSet"))
  if valid_21626367 != nil:
    section.add "Action", valid_21626367
  var valid_21626368 = query.getOrDefault("ConfigurationSetName")
  valid_21626368 = validateParameter(valid_21626368, JString, required = true,
                                   default = nil)
  if valid_21626368 != nil:
    section.add "ConfigurationSetName", valid_21626368
  var valid_21626369 = query.getOrDefault("Version")
  valid_21626369 = validateParameter(valid_21626369, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626369 != nil:
    section.add "Version", valid_21626369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626370 = header.getOrDefault("X-Amz-Date")
  valid_21626370 = validateParameter(valid_21626370, JString, required = false,
                                   default = nil)
  if valid_21626370 != nil:
    section.add "X-Amz-Date", valid_21626370
  var valid_21626371 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626371 = validateParameter(valid_21626371, JString, required = false,
                                   default = nil)
  if valid_21626371 != nil:
    section.add "X-Amz-Security-Token", valid_21626371
  var valid_21626372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626372 = validateParameter(valid_21626372, JString, required = false,
                                   default = nil)
  if valid_21626372 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626372
  var valid_21626373 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626373 = validateParameter(valid_21626373, JString, required = false,
                                   default = nil)
  if valid_21626373 != nil:
    section.add "X-Amz-Algorithm", valid_21626373
  var valid_21626374 = header.getOrDefault("X-Amz-Signature")
  valid_21626374 = validateParameter(valid_21626374, JString, required = false,
                                   default = nil)
  if valid_21626374 != nil:
    section.add "X-Amz-Signature", valid_21626374
  var valid_21626375 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626375 = validateParameter(valid_21626375, JString, required = false,
                                   default = nil)
  if valid_21626375 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626375
  var valid_21626376 = header.getOrDefault("X-Amz-Credential")
  valid_21626376 = validateParameter(valid_21626376, JString, required = false,
                                   default = nil)
  if valid_21626376 != nil:
    section.add "X-Amz-Credential", valid_21626376
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626377: Call_GetDeleteConfigurationSet_21626364;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626377.validator(path, query, header, formData, body, _)
  let scheme = call_21626377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626377.makeUrl(scheme.get, call_21626377.host, call_21626377.base,
                               call_21626377.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626377, uri, valid, _)

proc call*(call_21626378: Call_GetDeleteConfigurationSet_21626364;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: string (required)
  var query_21626379 = newJObject()
  add(query_21626379, "Action", newJString(Action))
  add(query_21626379, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626379, "Version", newJString(Version))
  result = call_21626378.call(nil, query_21626379, nil, nil, nil)

var getDeleteConfigurationSet* = Call_GetDeleteConfigurationSet_21626364(
    name: "getDeleteConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_GetDeleteConfigurationSet_21626365, base: "/",
    makeUrl: url_GetDeleteConfigurationSet_21626366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetEventDestination_21626414 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteConfigurationSetEventDestination_21626416(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSetEventDestination_21626415(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626417 = query.getOrDefault("Action")
  valid_21626417 = validateParameter(valid_21626417, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_21626417 != nil:
    section.add "Action", valid_21626417
  var valid_21626418 = query.getOrDefault("Version")
  valid_21626418 = validateParameter(valid_21626418, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626418 != nil:
    section.add "Version", valid_21626418
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626419 = header.getOrDefault("X-Amz-Date")
  valid_21626419 = validateParameter(valid_21626419, JString, required = false,
                                   default = nil)
  if valid_21626419 != nil:
    section.add "X-Amz-Date", valid_21626419
  var valid_21626420 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626420 = validateParameter(valid_21626420, JString, required = false,
                                   default = nil)
  if valid_21626420 != nil:
    section.add "X-Amz-Security-Token", valid_21626420
  var valid_21626421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626421 = validateParameter(valid_21626421, JString, required = false,
                                   default = nil)
  if valid_21626421 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626421
  var valid_21626422 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626422 = validateParameter(valid_21626422, JString, required = false,
                                   default = nil)
  if valid_21626422 != nil:
    section.add "X-Amz-Algorithm", valid_21626422
  var valid_21626423 = header.getOrDefault("X-Amz-Signature")
  valid_21626423 = validateParameter(valid_21626423, JString, required = false,
                                   default = nil)
  if valid_21626423 != nil:
    section.add "X-Amz-Signature", valid_21626423
  var valid_21626424 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626424 = validateParameter(valid_21626424, JString, required = false,
                                   default = nil)
  if valid_21626424 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626424
  var valid_21626425 = header.getOrDefault("X-Amz-Credential")
  valid_21626425 = validateParameter(valid_21626425, JString, required = false,
                                   default = nil)
  if valid_21626425 != nil:
    section.add "X-Amz-Credential", valid_21626425
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21626426 = formData.getOrDefault("ConfigurationSetName")
  valid_21626426 = validateParameter(valid_21626426, JString, required = true,
                                   default = nil)
  if valid_21626426 != nil:
    section.add "ConfigurationSetName", valid_21626426
  var valid_21626427 = formData.getOrDefault("EventDestinationName")
  valid_21626427 = validateParameter(valid_21626427, JString, required = true,
                                   default = nil)
  if valid_21626427 != nil:
    section.add "EventDestinationName", valid_21626427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626428: Call_PostDeleteConfigurationSetEventDestination_21626414;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626428.validator(path, query, header, formData, body, _)
  let scheme = call_21626428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626428.makeUrl(scheme.get, call_21626428.host, call_21626428.base,
                               call_21626428.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626428, uri, valid, _)

proc call*(call_21626429: Call_PostDeleteConfigurationSetEventDestination_21626414;
          ConfigurationSetName: string; EventDestinationName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626430 = newJObject()
  var formData_21626431 = newJObject()
  add(formData_21626431, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21626431, "EventDestinationName", newJString(EventDestinationName))
  add(query_21626430, "Action", newJString(Action))
  add(query_21626430, "Version", newJString(Version))
  result = call_21626429.call(nil, query_21626430, nil, formData_21626431, nil)

var postDeleteConfigurationSetEventDestination* = Call_PostDeleteConfigurationSetEventDestination_21626414(
    name: "postDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_PostDeleteConfigurationSetEventDestination_21626415,
    base: "/", makeUrl: url_PostDeleteConfigurationSetEventDestination_21626416,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetEventDestination_21626397 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteConfigurationSetEventDestination_21626399(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSetEventDestination_21626398(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626400 = query.getOrDefault("Action")
  valid_21626400 = validateParameter(valid_21626400, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_21626400 != nil:
    section.add "Action", valid_21626400
  var valid_21626401 = query.getOrDefault("EventDestinationName")
  valid_21626401 = validateParameter(valid_21626401, JString, required = true,
                                   default = nil)
  if valid_21626401 != nil:
    section.add "EventDestinationName", valid_21626401
  var valid_21626402 = query.getOrDefault("ConfigurationSetName")
  valid_21626402 = validateParameter(valid_21626402, JString, required = true,
                                   default = nil)
  if valid_21626402 != nil:
    section.add "ConfigurationSetName", valid_21626402
  var valid_21626403 = query.getOrDefault("Version")
  valid_21626403 = validateParameter(valid_21626403, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626403 != nil:
    section.add "Version", valid_21626403
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626404 = header.getOrDefault("X-Amz-Date")
  valid_21626404 = validateParameter(valid_21626404, JString, required = false,
                                   default = nil)
  if valid_21626404 != nil:
    section.add "X-Amz-Date", valid_21626404
  var valid_21626405 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626405 = validateParameter(valid_21626405, JString, required = false,
                                   default = nil)
  if valid_21626405 != nil:
    section.add "X-Amz-Security-Token", valid_21626405
  var valid_21626406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626406 = validateParameter(valid_21626406, JString, required = false,
                                   default = nil)
  if valid_21626406 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626406
  var valid_21626407 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626407 = validateParameter(valid_21626407, JString, required = false,
                                   default = nil)
  if valid_21626407 != nil:
    section.add "X-Amz-Algorithm", valid_21626407
  var valid_21626408 = header.getOrDefault("X-Amz-Signature")
  valid_21626408 = validateParameter(valid_21626408, JString, required = false,
                                   default = nil)
  if valid_21626408 != nil:
    section.add "X-Amz-Signature", valid_21626408
  var valid_21626409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626409 = validateParameter(valid_21626409, JString, required = false,
                                   default = nil)
  if valid_21626409 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626409
  var valid_21626410 = header.getOrDefault("X-Amz-Credential")
  valid_21626410 = validateParameter(valid_21626410, JString, required = false,
                                   default = nil)
  if valid_21626410 != nil:
    section.add "X-Amz-Credential", valid_21626410
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626411: Call_GetDeleteConfigurationSetEventDestination_21626397;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626411.validator(path, query, header, formData, body, _)
  let scheme = call_21626411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626411.makeUrl(scheme.get, call_21626411.host, call_21626411.base,
                               call_21626411.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626411, uri, valid, _)

proc call*(call_21626412: Call_GetDeleteConfigurationSetEventDestination_21626397;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: string (required)
  var query_21626413 = newJObject()
  add(query_21626413, "Action", newJString(Action))
  add(query_21626413, "EventDestinationName", newJString(EventDestinationName))
  add(query_21626413, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626413, "Version", newJString(Version))
  result = call_21626412.call(nil, query_21626413, nil, nil, nil)

var getDeleteConfigurationSetEventDestination* = Call_GetDeleteConfigurationSetEventDestination_21626397(
    name: "getDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_GetDeleteConfigurationSetEventDestination_21626398,
    base: "/", makeUrl: url_GetDeleteConfigurationSetEventDestination_21626399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetTrackingOptions_21626448 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteConfigurationSetTrackingOptions_21626450(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSetTrackingOptions_21626449(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626451 = query.getOrDefault("Action")
  valid_21626451 = validateParameter(valid_21626451, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_21626451 != nil:
    section.add "Action", valid_21626451
  var valid_21626452 = query.getOrDefault("Version")
  valid_21626452 = validateParameter(valid_21626452, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626452 != nil:
    section.add "Version", valid_21626452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626453 = header.getOrDefault("X-Amz-Date")
  valid_21626453 = validateParameter(valid_21626453, JString, required = false,
                                   default = nil)
  if valid_21626453 != nil:
    section.add "X-Amz-Date", valid_21626453
  var valid_21626454 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626454 = validateParameter(valid_21626454, JString, required = false,
                                   default = nil)
  if valid_21626454 != nil:
    section.add "X-Amz-Security-Token", valid_21626454
  var valid_21626455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626455 = validateParameter(valid_21626455, JString, required = false,
                                   default = nil)
  if valid_21626455 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626455
  var valid_21626456 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626456 = validateParameter(valid_21626456, JString, required = false,
                                   default = nil)
  if valid_21626456 != nil:
    section.add "X-Amz-Algorithm", valid_21626456
  var valid_21626457 = header.getOrDefault("X-Amz-Signature")
  valid_21626457 = validateParameter(valid_21626457, JString, required = false,
                                   default = nil)
  if valid_21626457 != nil:
    section.add "X-Amz-Signature", valid_21626457
  var valid_21626458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626458 = validateParameter(valid_21626458, JString, required = false,
                                   default = nil)
  if valid_21626458 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626458
  var valid_21626459 = header.getOrDefault("X-Amz-Credential")
  valid_21626459 = validateParameter(valid_21626459, JString, required = false,
                                   default = nil)
  if valid_21626459 != nil:
    section.add "X-Amz-Credential", valid_21626459
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21626460 = formData.getOrDefault("ConfigurationSetName")
  valid_21626460 = validateParameter(valid_21626460, JString, required = true,
                                   default = nil)
  if valid_21626460 != nil:
    section.add "ConfigurationSetName", valid_21626460
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626461: Call_PostDeleteConfigurationSetTrackingOptions_21626448;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_21626461.validator(path, query, header, formData, body, _)
  let scheme = call_21626461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626461.makeUrl(scheme.get, call_21626461.host, call_21626461.base,
                               call_21626461.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626461, uri, valid, _)

proc call*(call_21626462: Call_PostDeleteConfigurationSetTrackingOptions_21626448;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626463 = newJObject()
  var formData_21626464 = newJObject()
  add(formData_21626464, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626463, "Action", newJString(Action))
  add(query_21626463, "Version", newJString(Version))
  result = call_21626462.call(nil, query_21626463, nil, formData_21626464, nil)

var postDeleteConfigurationSetTrackingOptions* = Call_PostDeleteConfigurationSetTrackingOptions_21626448(
    name: "postDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_PostDeleteConfigurationSetTrackingOptions_21626449,
    base: "/", makeUrl: url_PostDeleteConfigurationSetTrackingOptions_21626450,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetTrackingOptions_21626432 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteConfigurationSetTrackingOptions_21626434(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSetTrackingOptions_21626433(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626435 = query.getOrDefault("Action")
  valid_21626435 = validateParameter(valid_21626435, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_21626435 != nil:
    section.add "Action", valid_21626435
  var valid_21626436 = query.getOrDefault("ConfigurationSetName")
  valid_21626436 = validateParameter(valid_21626436, JString, required = true,
                                   default = nil)
  if valid_21626436 != nil:
    section.add "ConfigurationSetName", valid_21626436
  var valid_21626437 = query.getOrDefault("Version")
  valid_21626437 = validateParameter(valid_21626437, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626437 != nil:
    section.add "Version", valid_21626437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626438 = header.getOrDefault("X-Amz-Date")
  valid_21626438 = validateParameter(valid_21626438, JString, required = false,
                                   default = nil)
  if valid_21626438 != nil:
    section.add "X-Amz-Date", valid_21626438
  var valid_21626439 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626439 = validateParameter(valid_21626439, JString, required = false,
                                   default = nil)
  if valid_21626439 != nil:
    section.add "X-Amz-Security-Token", valid_21626439
  var valid_21626440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626440 = validateParameter(valid_21626440, JString, required = false,
                                   default = nil)
  if valid_21626440 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626440
  var valid_21626441 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626441 = validateParameter(valid_21626441, JString, required = false,
                                   default = nil)
  if valid_21626441 != nil:
    section.add "X-Amz-Algorithm", valid_21626441
  var valid_21626442 = header.getOrDefault("X-Amz-Signature")
  valid_21626442 = validateParameter(valid_21626442, JString, required = false,
                                   default = nil)
  if valid_21626442 != nil:
    section.add "X-Amz-Signature", valid_21626442
  var valid_21626443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626443 = validateParameter(valid_21626443, JString, required = false,
                                   default = nil)
  if valid_21626443 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626443
  var valid_21626444 = header.getOrDefault("X-Amz-Credential")
  valid_21626444 = validateParameter(valid_21626444, JString, required = false,
                                   default = nil)
  if valid_21626444 != nil:
    section.add "X-Amz-Credential", valid_21626444
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626445: Call_GetDeleteConfigurationSetTrackingOptions_21626432;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_21626445.validator(path, query, header, formData, body, _)
  let scheme = call_21626445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626445.makeUrl(scheme.get, call_21626445.host, call_21626445.base,
                               call_21626445.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626445, uri, valid, _)

proc call*(call_21626446: Call_GetDeleteConfigurationSetTrackingOptions_21626432;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: string (required)
  var query_21626447 = newJObject()
  add(query_21626447, "Action", newJString(Action))
  add(query_21626447, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626447, "Version", newJString(Version))
  result = call_21626446.call(nil, query_21626447, nil, nil, nil)

var getDeleteConfigurationSetTrackingOptions* = Call_GetDeleteConfigurationSetTrackingOptions_21626432(
    name: "getDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_GetDeleteConfigurationSetTrackingOptions_21626433,
    base: "/", makeUrl: url_GetDeleteConfigurationSetTrackingOptions_21626434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomVerificationEmailTemplate_21626481 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteCustomVerificationEmailTemplate_21626483(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomVerificationEmailTemplate_21626482(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626484 = query.getOrDefault("Action")
  valid_21626484 = validateParameter(valid_21626484, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_21626484 != nil:
    section.add "Action", valid_21626484
  var valid_21626485 = query.getOrDefault("Version")
  valid_21626485 = validateParameter(valid_21626485, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626485 != nil:
    section.add "Version", valid_21626485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626486 = header.getOrDefault("X-Amz-Date")
  valid_21626486 = validateParameter(valid_21626486, JString, required = false,
                                   default = nil)
  if valid_21626486 != nil:
    section.add "X-Amz-Date", valid_21626486
  var valid_21626487 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626487 = validateParameter(valid_21626487, JString, required = false,
                                   default = nil)
  if valid_21626487 != nil:
    section.add "X-Amz-Security-Token", valid_21626487
  var valid_21626488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626488 = validateParameter(valid_21626488, JString, required = false,
                                   default = nil)
  if valid_21626488 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626488
  var valid_21626489 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626489 = validateParameter(valid_21626489, JString, required = false,
                                   default = nil)
  if valid_21626489 != nil:
    section.add "X-Amz-Algorithm", valid_21626489
  var valid_21626490 = header.getOrDefault("X-Amz-Signature")
  valid_21626490 = validateParameter(valid_21626490, JString, required = false,
                                   default = nil)
  if valid_21626490 != nil:
    section.add "X-Amz-Signature", valid_21626490
  var valid_21626491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626491 = validateParameter(valid_21626491, JString, required = false,
                                   default = nil)
  if valid_21626491 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626491
  var valid_21626492 = header.getOrDefault("X-Amz-Credential")
  valid_21626492 = validateParameter(valid_21626492, JString, required = false,
                                   default = nil)
  if valid_21626492 != nil:
    section.add "X-Amz-Credential", valid_21626492
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_21626493 = formData.getOrDefault("TemplateName")
  valid_21626493 = validateParameter(valid_21626493, JString, required = true,
                                   default = nil)
  if valid_21626493 != nil:
    section.add "TemplateName", valid_21626493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626494: Call_PostDeleteCustomVerificationEmailTemplate_21626481;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626494.validator(path, query, header, formData, body, _)
  let scheme = call_21626494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626494.makeUrl(scheme.get, call_21626494.host, call_21626494.base,
                               call_21626494.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626494, uri, valid, _)

proc call*(call_21626495: Call_PostDeleteCustomVerificationEmailTemplate_21626481;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_21626496 = newJObject()
  var formData_21626497 = newJObject()
  add(query_21626496, "Action", newJString(Action))
  add(formData_21626497, "TemplateName", newJString(TemplateName))
  add(query_21626496, "Version", newJString(Version))
  result = call_21626495.call(nil, query_21626496, nil, formData_21626497, nil)

var postDeleteCustomVerificationEmailTemplate* = Call_PostDeleteCustomVerificationEmailTemplate_21626481(
    name: "postDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_PostDeleteCustomVerificationEmailTemplate_21626482,
    base: "/", makeUrl: url_PostDeleteCustomVerificationEmailTemplate_21626483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomVerificationEmailTemplate_21626465 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteCustomVerificationEmailTemplate_21626467(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomVerificationEmailTemplate_21626466(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626468 = query.getOrDefault("Action")
  valid_21626468 = validateParameter(valid_21626468, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_21626468 != nil:
    section.add "Action", valid_21626468
  var valid_21626469 = query.getOrDefault("TemplateName")
  valid_21626469 = validateParameter(valid_21626469, JString, required = true,
                                   default = nil)
  if valid_21626469 != nil:
    section.add "TemplateName", valid_21626469
  var valid_21626470 = query.getOrDefault("Version")
  valid_21626470 = validateParameter(valid_21626470, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626470 != nil:
    section.add "Version", valid_21626470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626471 = header.getOrDefault("X-Amz-Date")
  valid_21626471 = validateParameter(valid_21626471, JString, required = false,
                                   default = nil)
  if valid_21626471 != nil:
    section.add "X-Amz-Date", valid_21626471
  var valid_21626472 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626472 = validateParameter(valid_21626472, JString, required = false,
                                   default = nil)
  if valid_21626472 != nil:
    section.add "X-Amz-Security-Token", valid_21626472
  var valid_21626473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626473 = validateParameter(valid_21626473, JString, required = false,
                                   default = nil)
  if valid_21626473 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626473
  var valid_21626474 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626474 = validateParameter(valid_21626474, JString, required = false,
                                   default = nil)
  if valid_21626474 != nil:
    section.add "X-Amz-Algorithm", valid_21626474
  var valid_21626475 = header.getOrDefault("X-Amz-Signature")
  valid_21626475 = validateParameter(valid_21626475, JString, required = false,
                                   default = nil)
  if valid_21626475 != nil:
    section.add "X-Amz-Signature", valid_21626475
  var valid_21626476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626476 = validateParameter(valid_21626476, JString, required = false,
                                   default = nil)
  if valid_21626476 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626476
  var valid_21626477 = header.getOrDefault("X-Amz-Credential")
  valid_21626477 = validateParameter(valid_21626477, JString, required = false,
                                   default = nil)
  if valid_21626477 != nil:
    section.add "X-Amz-Credential", valid_21626477
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626478: Call_GetDeleteCustomVerificationEmailTemplate_21626465;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626478.validator(path, query, header, formData, body, _)
  let scheme = call_21626478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626478.makeUrl(scheme.get, call_21626478.host, call_21626478.base,
                               call_21626478.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626478, uri, valid, _)

proc call*(call_21626479: Call_GetDeleteCustomVerificationEmailTemplate_21626465;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_21626480 = newJObject()
  add(query_21626480, "Action", newJString(Action))
  add(query_21626480, "TemplateName", newJString(TemplateName))
  add(query_21626480, "Version", newJString(Version))
  result = call_21626479.call(nil, query_21626480, nil, nil, nil)

var getDeleteCustomVerificationEmailTemplate* = Call_GetDeleteCustomVerificationEmailTemplate_21626465(
    name: "getDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_GetDeleteCustomVerificationEmailTemplate_21626466,
    base: "/", makeUrl: url_GetDeleteCustomVerificationEmailTemplate_21626467,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentity_21626514 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteIdentity_21626516(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteIdentity_21626515(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626517 = query.getOrDefault("Action")
  valid_21626517 = validateParameter(valid_21626517, JString, required = true,
                                   default = newJString("DeleteIdentity"))
  if valid_21626517 != nil:
    section.add "Action", valid_21626517
  var valid_21626518 = query.getOrDefault("Version")
  valid_21626518 = validateParameter(valid_21626518, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626518 != nil:
    section.add "Version", valid_21626518
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626519 = header.getOrDefault("X-Amz-Date")
  valid_21626519 = validateParameter(valid_21626519, JString, required = false,
                                   default = nil)
  if valid_21626519 != nil:
    section.add "X-Amz-Date", valid_21626519
  var valid_21626520 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626520 = validateParameter(valid_21626520, JString, required = false,
                                   default = nil)
  if valid_21626520 != nil:
    section.add "X-Amz-Security-Token", valid_21626520
  var valid_21626521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626521 = validateParameter(valid_21626521, JString, required = false,
                                   default = nil)
  if valid_21626521 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626521
  var valid_21626522 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626522 = validateParameter(valid_21626522, JString, required = false,
                                   default = nil)
  if valid_21626522 != nil:
    section.add "X-Amz-Algorithm", valid_21626522
  var valid_21626523 = header.getOrDefault("X-Amz-Signature")
  valid_21626523 = validateParameter(valid_21626523, JString, required = false,
                                   default = nil)
  if valid_21626523 != nil:
    section.add "X-Amz-Signature", valid_21626523
  var valid_21626524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626524 = validateParameter(valid_21626524, JString, required = false,
                                   default = nil)
  if valid_21626524 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626524
  var valid_21626525 = header.getOrDefault("X-Amz-Credential")
  valid_21626525 = validateParameter(valid_21626525, JString, required = false,
                                   default = nil)
  if valid_21626525 != nil:
    section.add "X-Amz-Credential", valid_21626525
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_21626526 = formData.getOrDefault("Identity")
  valid_21626526 = validateParameter(valid_21626526, JString, required = true,
                                   default = nil)
  if valid_21626526 != nil:
    section.add "Identity", valid_21626526
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626527: Call_PostDeleteIdentity_21626514; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626527.validator(path, query, header, formData, body, _)
  let scheme = call_21626527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626527.makeUrl(scheme.get, call_21626527.host, call_21626527.base,
                               call_21626527.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626527, uri, valid, _)

proc call*(call_21626528: Call_PostDeleteIdentity_21626514; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626529 = newJObject()
  var formData_21626530 = newJObject()
  add(formData_21626530, "Identity", newJString(Identity))
  add(query_21626529, "Action", newJString(Action))
  add(query_21626529, "Version", newJString(Version))
  result = call_21626528.call(nil, query_21626529, nil, formData_21626530, nil)

var postDeleteIdentity* = Call_PostDeleteIdentity_21626514(
    name: "postDeleteIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentity",
    validator: validate_PostDeleteIdentity_21626515, base: "/",
    makeUrl: url_PostDeleteIdentity_21626516, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentity_21626498 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteIdentity_21626500(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteIdentity_21626499(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21626501 = query.getOrDefault("Identity")
  valid_21626501 = validateParameter(valid_21626501, JString, required = true,
                                   default = nil)
  if valid_21626501 != nil:
    section.add "Identity", valid_21626501
  var valid_21626502 = query.getOrDefault("Action")
  valid_21626502 = validateParameter(valid_21626502, JString, required = true,
                                   default = newJString("DeleteIdentity"))
  if valid_21626502 != nil:
    section.add "Action", valid_21626502
  var valid_21626503 = query.getOrDefault("Version")
  valid_21626503 = validateParameter(valid_21626503, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626503 != nil:
    section.add "Version", valid_21626503
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626504 = header.getOrDefault("X-Amz-Date")
  valid_21626504 = validateParameter(valid_21626504, JString, required = false,
                                   default = nil)
  if valid_21626504 != nil:
    section.add "X-Amz-Date", valid_21626504
  var valid_21626505 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626505 = validateParameter(valid_21626505, JString, required = false,
                                   default = nil)
  if valid_21626505 != nil:
    section.add "X-Amz-Security-Token", valid_21626505
  var valid_21626506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626506 = validateParameter(valid_21626506, JString, required = false,
                                   default = nil)
  if valid_21626506 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626506
  var valid_21626507 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626507 = validateParameter(valid_21626507, JString, required = false,
                                   default = nil)
  if valid_21626507 != nil:
    section.add "X-Amz-Algorithm", valid_21626507
  var valid_21626508 = header.getOrDefault("X-Amz-Signature")
  valid_21626508 = validateParameter(valid_21626508, JString, required = false,
                                   default = nil)
  if valid_21626508 != nil:
    section.add "X-Amz-Signature", valid_21626508
  var valid_21626509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626509 = validateParameter(valid_21626509, JString, required = false,
                                   default = nil)
  if valid_21626509 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626509
  var valid_21626510 = header.getOrDefault("X-Amz-Credential")
  valid_21626510 = validateParameter(valid_21626510, JString, required = false,
                                   default = nil)
  if valid_21626510 != nil:
    section.add "X-Amz-Credential", valid_21626510
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626511: Call_GetDeleteIdentity_21626498; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626511.validator(path, query, header, formData, body, _)
  let scheme = call_21626511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626511.makeUrl(scheme.get, call_21626511.host, call_21626511.base,
                               call_21626511.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626511, uri, valid, _)

proc call*(call_21626512: Call_GetDeleteIdentity_21626498; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626513 = newJObject()
  add(query_21626513, "Identity", newJString(Identity))
  add(query_21626513, "Action", newJString(Action))
  add(query_21626513, "Version", newJString(Version))
  result = call_21626512.call(nil, query_21626513, nil, nil, nil)

var getDeleteIdentity* = Call_GetDeleteIdentity_21626498(name: "getDeleteIdentity",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteIdentity", validator: validate_GetDeleteIdentity_21626499,
    base: "/", makeUrl: url_GetDeleteIdentity_21626500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentityPolicy_21626548 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteIdentityPolicy_21626550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteIdentityPolicy_21626549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626551 = query.getOrDefault("Action")
  valid_21626551 = validateParameter(valid_21626551, JString, required = true,
                                   default = newJString("DeleteIdentityPolicy"))
  if valid_21626551 != nil:
    section.add "Action", valid_21626551
  var valid_21626552 = query.getOrDefault("Version")
  valid_21626552 = validateParameter(valid_21626552, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626552 != nil:
    section.add "Version", valid_21626552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626553 = header.getOrDefault("X-Amz-Date")
  valid_21626553 = validateParameter(valid_21626553, JString, required = false,
                                   default = nil)
  if valid_21626553 != nil:
    section.add "X-Amz-Date", valid_21626553
  var valid_21626554 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626554 = validateParameter(valid_21626554, JString, required = false,
                                   default = nil)
  if valid_21626554 != nil:
    section.add "X-Amz-Security-Token", valid_21626554
  var valid_21626555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626555 = validateParameter(valid_21626555, JString, required = false,
                                   default = nil)
  if valid_21626555 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626555
  var valid_21626556 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626556 = validateParameter(valid_21626556, JString, required = false,
                                   default = nil)
  if valid_21626556 != nil:
    section.add "X-Amz-Algorithm", valid_21626556
  var valid_21626557 = header.getOrDefault("X-Amz-Signature")
  valid_21626557 = validateParameter(valid_21626557, JString, required = false,
                                   default = nil)
  if valid_21626557 != nil:
    section.add "X-Amz-Signature", valid_21626557
  var valid_21626558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626558 = validateParameter(valid_21626558, JString, required = false,
                                   default = nil)
  if valid_21626558 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626558
  var valid_21626559 = header.getOrDefault("X-Amz-Credential")
  valid_21626559 = validateParameter(valid_21626559, JString, required = false,
                                   default = nil)
  if valid_21626559 != nil:
    section.add "X-Amz-Credential", valid_21626559
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21626560 = formData.getOrDefault("PolicyName")
  valid_21626560 = validateParameter(valid_21626560, JString, required = true,
                                   default = nil)
  if valid_21626560 != nil:
    section.add "PolicyName", valid_21626560
  var valid_21626561 = formData.getOrDefault("Identity")
  valid_21626561 = validateParameter(valid_21626561, JString, required = true,
                                   default = nil)
  if valid_21626561 != nil:
    section.add "Identity", valid_21626561
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626562: Call_PostDeleteIdentityPolicy_21626548;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626562.validator(path, query, header, formData, body, _)
  let scheme = call_21626562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626562.makeUrl(scheme.get, call_21626562.host, call_21626562.base,
                               call_21626562.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626562, uri, valid, _)

proc call*(call_21626563: Call_PostDeleteIdentityPolicy_21626548;
          PolicyName: string; Identity: string;
          Action: string = "DeleteIdentityPolicy"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626564 = newJObject()
  var formData_21626565 = newJObject()
  add(formData_21626565, "PolicyName", newJString(PolicyName))
  add(formData_21626565, "Identity", newJString(Identity))
  add(query_21626564, "Action", newJString(Action))
  add(query_21626564, "Version", newJString(Version))
  result = call_21626563.call(nil, query_21626564, nil, formData_21626565, nil)

var postDeleteIdentityPolicy* = Call_PostDeleteIdentityPolicy_21626548(
    name: "postDeleteIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_PostDeleteIdentityPolicy_21626549, base: "/",
    makeUrl: url_PostDeleteIdentityPolicy_21626550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentityPolicy_21626531 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteIdentityPolicy_21626533(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteIdentityPolicy_21626532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21626534 = query.getOrDefault("Identity")
  valid_21626534 = validateParameter(valid_21626534, JString, required = true,
                                   default = nil)
  if valid_21626534 != nil:
    section.add "Identity", valid_21626534
  var valid_21626535 = query.getOrDefault("Action")
  valid_21626535 = validateParameter(valid_21626535, JString, required = true,
                                   default = newJString("DeleteIdentityPolicy"))
  if valid_21626535 != nil:
    section.add "Action", valid_21626535
  var valid_21626536 = query.getOrDefault("Version")
  valid_21626536 = validateParameter(valid_21626536, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626536 != nil:
    section.add "Version", valid_21626536
  var valid_21626537 = query.getOrDefault("PolicyName")
  valid_21626537 = validateParameter(valid_21626537, JString, required = true,
                                   default = nil)
  if valid_21626537 != nil:
    section.add "PolicyName", valid_21626537
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626538 = header.getOrDefault("X-Amz-Date")
  valid_21626538 = validateParameter(valid_21626538, JString, required = false,
                                   default = nil)
  if valid_21626538 != nil:
    section.add "X-Amz-Date", valid_21626538
  var valid_21626539 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626539 = validateParameter(valid_21626539, JString, required = false,
                                   default = nil)
  if valid_21626539 != nil:
    section.add "X-Amz-Security-Token", valid_21626539
  var valid_21626540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626540 = validateParameter(valid_21626540, JString, required = false,
                                   default = nil)
  if valid_21626540 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626540
  var valid_21626541 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626541 = validateParameter(valid_21626541, JString, required = false,
                                   default = nil)
  if valid_21626541 != nil:
    section.add "X-Amz-Algorithm", valid_21626541
  var valid_21626542 = header.getOrDefault("X-Amz-Signature")
  valid_21626542 = validateParameter(valid_21626542, JString, required = false,
                                   default = nil)
  if valid_21626542 != nil:
    section.add "X-Amz-Signature", valid_21626542
  var valid_21626543 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626543 = validateParameter(valid_21626543, JString, required = false,
                                   default = nil)
  if valid_21626543 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626543
  var valid_21626544 = header.getOrDefault("X-Amz-Credential")
  valid_21626544 = validateParameter(valid_21626544, JString, required = false,
                                   default = nil)
  if valid_21626544 != nil:
    section.add "X-Amz-Credential", valid_21626544
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626545: Call_GetDeleteIdentityPolicy_21626531;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626545.validator(path, query, header, formData, body, _)
  let scheme = call_21626545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626545.makeUrl(scheme.get, call_21626545.host, call_21626545.base,
                               call_21626545.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626545, uri, valid, _)

proc call*(call_21626546: Call_GetDeleteIdentityPolicy_21626531; Identity: string;
          PolicyName: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  var query_21626547 = newJObject()
  add(query_21626547, "Identity", newJString(Identity))
  add(query_21626547, "Action", newJString(Action))
  add(query_21626547, "Version", newJString(Version))
  add(query_21626547, "PolicyName", newJString(PolicyName))
  result = call_21626546.call(nil, query_21626547, nil, nil, nil)

var getDeleteIdentityPolicy* = Call_GetDeleteIdentityPolicy_21626531(
    name: "getDeleteIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_GetDeleteIdentityPolicy_21626532, base: "/",
    makeUrl: url_GetDeleteIdentityPolicy_21626533,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptFilter_21626582 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteReceiptFilter_21626584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptFilter_21626583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626585 = query.getOrDefault("Action")
  valid_21626585 = validateParameter(valid_21626585, JString, required = true,
                                   default = newJString("DeleteReceiptFilter"))
  if valid_21626585 != nil:
    section.add "Action", valid_21626585
  var valid_21626586 = query.getOrDefault("Version")
  valid_21626586 = validateParameter(valid_21626586, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626586 != nil:
    section.add "Version", valid_21626586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626587 = header.getOrDefault("X-Amz-Date")
  valid_21626587 = validateParameter(valid_21626587, JString, required = false,
                                   default = nil)
  if valid_21626587 != nil:
    section.add "X-Amz-Date", valid_21626587
  var valid_21626588 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626588 = validateParameter(valid_21626588, JString, required = false,
                                   default = nil)
  if valid_21626588 != nil:
    section.add "X-Amz-Security-Token", valid_21626588
  var valid_21626589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626589 = validateParameter(valid_21626589, JString, required = false,
                                   default = nil)
  if valid_21626589 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626589
  var valid_21626590 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626590 = validateParameter(valid_21626590, JString, required = false,
                                   default = nil)
  if valid_21626590 != nil:
    section.add "X-Amz-Algorithm", valid_21626590
  var valid_21626591 = header.getOrDefault("X-Amz-Signature")
  valid_21626591 = validateParameter(valid_21626591, JString, required = false,
                                   default = nil)
  if valid_21626591 != nil:
    section.add "X-Amz-Signature", valid_21626591
  var valid_21626592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626592 = validateParameter(valid_21626592, JString, required = false,
                                   default = nil)
  if valid_21626592 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626592
  var valid_21626593 = header.getOrDefault("X-Amz-Credential")
  valid_21626593 = validateParameter(valid_21626593, JString, required = false,
                                   default = nil)
  if valid_21626593 != nil:
    section.add "X-Amz-Credential", valid_21626593
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FilterName` field"
  var valid_21626594 = formData.getOrDefault("FilterName")
  valid_21626594 = validateParameter(valid_21626594, JString, required = true,
                                   default = nil)
  if valid_21626594 != nil:
    section.add "FilterName", valid_21626594
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626595: Call_PostDeleteReceiptFilter_21626582;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626595.validator(path, query, header, formData, body, _)
  let scheme = call_21626595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626595.makeUrl(scheme.get, call_21626595.host, call_21626595.base,
                               call_21626595.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626595, uri, valid, _)

proc call*(call_21626596: Call_PostDeleteReceiptFilter_21626582;
          FilterName: string; Action: string = "DeleteReceiptFilter";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626597 = newJObject()
  var formData_21626598 = newJObject()
  add(formData_21626598, "FilterName", newJString(FilterName))
  add(query_21626597, "Action", newJString(Action))
  add(query_21626597, "Version", newJString(Version))
  result = call_21626596.call(nil, query_21626597, nil, formData_21626598, nil)

var postDeleteReceiptFilter* = Call_PostDeleteReceiptFilter_21626582(
    name: "postDeleteReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_PostDeleteReceiptFilter_21626583, base: "/",
    makeUrl: url_PostDeleteReceiptFilter_21626584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptFilter_21626566 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteReceiptFilter_21626568(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptFilter_21626567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  var valid_21626569 = query.getOrDefault("Action")
  valid_21626569 = validateParameter(valid_21626569, JString, required = true,
                                   default = newJString("DeleteReceiptFilter"))
  if valid_21626569 != nil:
    section.add "Action", valid_21626569
  var valid_21626570 = query.getOrDefault("Version")
  valid_21626570 = validateParameter(valid_21626570, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626570 != nil:
    section.add "Version", valid_21626570
  var valid_21626571 = query.getOrDefault("FilterName")
  valid_21626571 = validateParameter(valid_21626571, JString, required = true,
                                   default = nil)
  if valid_21626571 != nil:
    section.add "FilterName", valid_21626571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626572 = header.getOrDefault("X-Amz-Date")
  valid_21626572 = validateParameter(valid_21626572, JString, required = false,
                                   default = nil)
  if valid_21626572 != nil:
    section.add "X-Amz-Date", valid_21626572
  var valid_21626573 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626573 = validateParameter(valid_21626573, JString, required = false,
                                   default = nil)
  if valid_21626573 != nil:
    section.add "X-Amz-Security-Token", valid_21626573
  var valid_21626574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626574 = validateParameter(valid_21626574, JString, required = false,
                                   default = nil)
  if valid_21626574 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626574
  var valid_21626575 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626575 = validateParameter(valid_21626575, JString, required = false,
                                   default = nil)
  if valid_21626575 != nil:
    section.add "X-Amz-Algorithm", valid_21626575
  var valid_21626576 = header.getOrDefault("X-Amz-Signature")
  valid_21626576 = validateParameter(valid_21626576, JString, required = false,
                                   default = nil)
  if valid_21626576 != nil:
    section.add "X-Amz-Signature", valid_21626576
  var valid_21626577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626577 = validateParameter(valid_21626577, JString, required = false,
                                   default = nil)
  if valid_21626577 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626577
  var valid_21626578 = header.getOrDefault("X-Amz-Credential")
  valid_21626578 = validateParameter(valid_21626578, JString, required = false,
                                   default = nil)
  if valid_21626578 != nil:
    section.add "X-Amz-Credential", valid_21626578
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626579: Call_GetDeleteReceiptFilter_21626566;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626579.validator(path, query, header, formData, body, _)
  let scheme = call_21626579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626579.makeUrl(scheme.get, call_21626579.host, call_21626579.base,
                               call_21626579.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626579, uri, valid, _)

proc call*(call_21626580: Call_GetDeleteReceiptFilter_21626566; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  var query_21626581 = newJObject()
  add(query_21626581, "Action", newJString(Action))
  add(query_21626581, "Version", newJString(Version))
  add(query_21626581, "FilterName", newJString(FilterName))
  result = call_21626580.call(nil, query_21626581, nil, nil, nil)

var getDeleteReceiptFilter* = Call_GetDeleteReceiptFilter_21626566(
    name: "getDeleteReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_GetDeleteReceiptFilter_21626567, base: "/",
    makeUrl: url_GetDeleteReceiptFilter_21626568,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRule_21626616 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteReceiptRule_21626618(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptRule_21626617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626619 = query.getOrDefault("Action")
  valid_21626619 = validateParameter(valid_21626619, JString, required = true,
                                   default = newJString("DeleteReceiptRule"))
  if valid_21626619 != nil:
    section.add "Action", valid_21626619
  var valid_21626620 = query.getOrDefault("Version")
  valid_21626620 = validateParameter(valid_21626620, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626620 != nil:
    section.add "Version", valid_21626620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626621 = header.getOrDefault("X-Amz-Date")
  valid_21626621 = validateParameter(valid_21626621, JString, required = false,
                                   default = nil)
  if valid_21626621 != nil:
    section.add "X-Amz-Date", valid_21626621
  var valid_21626622 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626622 = validateParameter(valid_21626622, JString, required = false,
                                   default = nil)
  if valid_21626622 != nil:
    section.add "X-Amz-Security-Token", valid_21626622
  var valid_21626623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626623 = validateParameter(valid_21626623, JString, required = false,
                                   default = nil)
  if valid_21626623 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626623
  var valid_21626624 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626624 = validateParameter(valid_21626624, JString, required = false,
                                   default = nil)
  if valid_21626624 != nil:
    section.add "X-Amz-Algorithm", valid_21626624
  var valid_21626625 = header.getOrDefault("X-Amz-Signature")
  valid_21626625 = validateParameter(valid_21626625, JString, required = false,
                                   default = nil)
  if valid_21626625 != nil:
    section.add "X-Amz-Signature", valid_21626625
  var valid_21626626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626626 = validateParameter(valid_21626626, JString, required = false,
                                   default = nil)
  if valid_21626626 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626626
  var valid_21626627 = header.getOrDefault("X-Amz-Credential")
  valid_21626627 = validateParameter(valid_21626627, JString, required = false,
                                   default = nil)
  if valid_21626627 != nil:
    section.add "X-Amz-Credential", valid_21626627
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_21626628 = formData.getOrDefault("RuleName")
  valid_21626628 = validateParameter(valid_21626628, JString, required = true,
                                   default = nil)
  if valid_21626628 != nil:
    section.add "RuleName", valid_21626628
  var valid_21626629 = formData.getOrDefault("RuleSetName")
  valid_21626629 = validateParameter(valid_21626629, JString, required = true,
                                   default = nil)
  if valid_21626629 != nil:
    section.add "RuleSetName", valid_21626629
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626630: Call_PostDeleteReceiptRule_21626616;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626630.validator(path, query, header, formData, body, _)
  let scheme = call_21626630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626630.makeUrl(scheme.get, call_21626630.host, call_21626630.base,
                               call_21626630.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626630, uri, valid, _)

proc call*(call_21626631: Call_PostDeleteReceiptRule_21626616; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626632 = newJObject()
  var formData_21626633 = newJObject()
  add(formData_21626633, "RuleName", newJString(RuleName))
  add(formData_21626633, "RuleSetName", newJString(RuleSetName))
  add(query_21626632, "Action", newJString(Action))
  add(query_21626632, "Version", newJString(Version))
  result = call_21626631.call(nil, query_21626632, nil, formData_21626633, nil)

var postDeleteReceiptRule* = Call_PostDeleteReceiptRule_21626616(
    name: "postDeleteReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_PostDeleteReceiptRule_21626617, base: "/",
    makeUrl: url_PostDeleteReceiptRule_21626618,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRule_21626599 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteReceiptRule_21626601(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptRule_21626600(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_21626602 = query.getOrDefault("RuleName")
  valid_21626602 = validateParameter(valid_21626602, JString, required = true,
                                   default = nil)
  if valid_21626602 != nil:
    section.add "RuleName", valid_21626602
  var valid_21626603 = query.getOrDefault("RuleSetName")
  valid_21626603 = validateParameter(valid_21626603, JString, required = true,
                                   default = nil)
  if valid_21626603 != nil:
    section.add "RuleSetName", valid_21626603
  var valid_21626604 = query.getOrDefault("Action")
  valid_21626604 = validateParameter(valid_21626604, JString, required = true,
                                   default = newJString("DeleteReceiptRule"))
  if valid_21626604 != nil:
    section.add "Action", valid_21626604
  var valid_21626605 = query.getOrDefault("Version")
  valid_21626605 = validateParameter(valid_21626605, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626605 != nil:
    section.add "Version", valid_21626605
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626606 = header.getOrDefault("X-Amz-Date")
  valid_21626606 = validateParameter(valid_21626606, JString, required = false,
                                   default = nil)
  if valid_21626606 != nil:
    section.add "X-Amz-Date", valid_21626606
  var valid_21626607 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626607 = validateParameter(valid_21626607, JString, required = false,
                                   default = nil)
  if valid_21626607 != nil:
    section.add "X-Amz-Security-Token", valid_21626607
  var valid_21626608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626608 = validateParameter(valid_21626608, JString, required = false,
                                   default = nil)
  if valid_21626608 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626608
  var valid_21626609 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626609 = validateParameter(valid_21626609, JString, required = false,
                                   default = nil)
  if valid_21626609 != nil:
    section.add "X-Amz-Algorithm", valid_21626609
  var valid_21626610 = header.getOrDefault("X-Amz-Signature")
  valid_21626610 = validateParameter(valid_21626610, JString, required = false,
                                   default = nil)
  if valid_21626610 != nil:
    section.add "X-Amz-Signature", valid_21626610
  var valid_21626611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626611 = validateParameter(valid_21626611, JString, required = false,
                                   default = nil)
  if valid_21626611 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626611
  var valid_21626612 = header.getOrDefault("X-Amz-Credential")
  valid_21626612 = validateParameter(valid_21626612, JString, required = false,
                                   default = nil)
  if valid_21626612 != nil:
    section.add "X-Amz-Credential", valid_21626612
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626613: Call_GetDeleteReceiptRule_21626599; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626613.validator(path, query, header, formData, body, _)
  let scheme = call_21626613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626613.makeUrl(scheme.get, call_21626613.host, call_21626613.base,
                               call_21626613.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626613, uri, valid, _)

proc call*(call_21626614: Call_GetDeleteReceiptRule_21626599; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626615 = newJObject()
  add(query_21626615, "RuleName", newJString(RuleName))
  add(query_21626615, "RuleSetName", newJString(RuleSetName))
  add(query_21626615, "Action", newJString(Action))
  add(query_21626615, "Version", newJString(Version))
  result = call_21626614.call(nil, query_21626615, nil, nil, nil)

var getDeleteReceiptRule* = Call_GetDeleteReceiptRule_21626599(
    name: "getDeleteReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_GetDeleteReceiptRule_21626600, base: "/",
    makeUrl: url_GetDeleteReceiptRule_21626601,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRuleSet_21626650 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteReceiptRuleSet_21626652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptRuleSet_21626651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626653 = query.getOrDefault("Action")
  valid_21626653 = validateParameter(valid_21626653, JString, required = true,
                                   default = newJString("DeleteReceiptRuleSet"))
  if valid_21626653 != nil:
    section.add "Action", valid_21626653
  var valid_21626654 = query.getOrDefault("Version")
  valid_21626654 = validateParameter(valid_21626654, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626654 != nil:
    section.add "Version", valid_21626654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626655 = header.getOrDefault("X-Amz-Date")
  valid_21626655 = validateParameter(valid_21626655, JString, required = false,
                                   default = nil)
  if valid_21626655 != nil:
    section.add "X-Amz-Date", valid_21626655
  var valid_21626656 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626656 = validateParameter(valid_21626656, JString, required = false,
                                   default = nil)
  if valid_21626656 != nil:
    section.add "X-Amz-Security-Token", valid_21626656
  var valid_21626657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626657 = validateParameter(valid_21626657, JString, required = false,
                                   default = nil)
  if valid_21626657 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626657
  var valid_21626658 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626658 = validateParameter(valid_21626658, JString, required = false,
                                   default = nil)
  if valid_21626658 != nil:
    section.add "X-Amz-Algorithm", valid_21626658
  var valid_21626659 = header.getOrDefault("X-Amz-Signature")
  valid_21626659 = validateParameter(valid_21626659, JString, required = false,
                                   default = nil)
  if valid_21626659 != nil:
    section.add "X-Amz-Signature", valid_21626659
  var valid_21626660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626660 = validateParameter(valid_21626660, JString, required = false,
                                   default = nil)
  if valid_21626660 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626660
  var valid_21626661 = header.getOrDefault("X-Amz-Credential")
  valid_21626661 = validateParameter(valid_21626661, JString, required = false,
                                   default = nil)
  if valid_21626661 != nil:
    section.add "X-Amz-Credential", valid_21626661
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_21626662 = formData.getOrDefault("RuleSetName")
  valid_21626662 = validateParameter(valid_21626662, JString, required = true,
                                   default = nil)
  if valid_21626662 != nil:
    section.add "RuleSetName", valid_21626662
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626663: Call_PostDeleteReceiptRuleSet_21626650;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626663.validator(path, query, header, formData, body, _)
  let scheme = call_21626663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626663.makeUrl(scheme.get, call_21626663.host, call_21626663.base,
                               call_21626663.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626663, uri, valid, _)

proc call*(call_21626664: Call_PostDeleteReceiptRuleSet_21626650;
          RuleSetName: string; Action: string = "DeleteReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626665 = newJObject()
  var formData_21626666 = newJObject()
  add(formData_21626666, "RuleSetName", newJString(RuleSetName))
  add(query_21626665, "Action", newJString(Action))
  add(query_21626665, "Version", newJString(Version))
  result = call_21626664.call(nil, query_21626665, nil, formData_21626666, nil)

var postDeleteReceiptRuleSet* = Call_PostDeleteReceiptRuleSet_21626650(
    name: "postDeleteReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_PostDeleteReceiptRuleSet_21626651, base: "/",
    makeUrl: url_PostDeleteReceiptRuleSet_21626652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRuleSet_21626634 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteReceiptRuleSet_21626636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptRuleSet_21626635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_21626637 = query.getOrDefault("RuleSetName")
  valid_21626637 = validateParameter(valid_21626637, JString, required = true,
                                   default = nil)
  if valid_21626637 != nil:
    section.add "RuleSetName", valid_21626637
  var valid_21626638 = query.getOrDefault("Action")
  valid_21626638 = validateParameter(valid_21626638, JString, required = true,
                                   default = newJString("DeleteReceiptRuleSet"))
  if valid_21626638 != nil:
    section.add "Action", valid_21626638
  var valid_21626639 = query.getOrDefault("Version")
  valid_21626639 = validateParameter(valid_21626639, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626639 != nil:
    section.add "Version", valid_21626639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626640 = header.getOrDefault("X-Amz-Date")
  valid_21626640 = validateParameter(valid_21626640, JString, required = false,
                                   default = nil)
  if valid_21626640 != nil:
    section.add "X-Amz-Date", valid_21626640
  var valid_21626641 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626641 = validateParameter(valid_21626641, JString, required = false,
                                   default = nil)
  if valid_21626641 != nil:
    section.add "X-Amz-Security-Token", valid_21626641
  var valid_21626642 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626642 = validateParameter(valid_21626642, JString, required = false,
                                   default = nil)
  if valid_21626642 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626642
  var valid_21626643 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626643 = validateParameter(valid_21626643, JString, required = false,
                                   default = nil)
  if valid_21626643 != nil:
    section.add "X-Amz-Algorithm", valid_21626643
  var valid_21626644 = header.getOrDefault("X-Amz-Signature")
  valid_21626644 = validateParameter(valid_21626644, JString, required = false,
                                   default = nil)
  if valid_21626644 != nil:
    section.add "X-Amz-Signature", valid_21626644
  var valid_21626645 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626645 = validateParameter(valid_21626645, JString, required = false,
                                   default = nil)
  if valid_21626645 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626645
  var valid_21626646 = header.getOrDefault("X-Amz-Credential")
  valid_21626646 = validateParameter(valid_21626646, JString, required = false,
                                   default = nil)
  if valid_21626646 != nil:
    section.add "X-Amz-Credential", valid_21626646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626647: Call_GetDeleteReceiptRuleSet_21626634;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626647.validator(path, query, header, formData, body, _)
  let scheme = call_21626647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626647.makeUrl(scheme.get, call_21626647.host, call_21626647.base,
                               call_21626647.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626647, uri, valid, _)

proc call*(call_21626648: Call_GetDeleteReceiptRuleSet_21626634;
          RuleSetName: string; Action: string = "DeleteReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626649 = newJObject()
  add(query_21626649, "RuleSetName", newJString(RuleSetName))
  add(query_21626649, "Action", newJString(Action))
  add(query_21626649, "Version", newJString(Version))
  result = call_21626648.call(nil, query_21626649, nil, nil, nil)

var getDeleteReceiptRuleSet* = Call_GetDeleteReceiptRuleSet_21626634(
    name: "getDeleteReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_GetDeleteReceiptRuleSet_21626635, base: "/",
    makeUrl: url_GetDeleteReceiptRuleSet_21626636,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTemplate_21626683 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteTemplate_21626685(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTemplate_21626684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626686 = query.getOrDefault("Action")
  valid_21626686 = validateParameter(valid_21626686, JString, required = true,
                                   default = newJString("DeleteTemplate"))
  if valid_21626686 != nil:
    section.add "Action", valid_21626686
  var valid_21626687 = query.getOrDefault("Version")
  valid_21626687 = validateParameter(valid_21626687, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626687 != nil:
    section.add "Version", valid_21626687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626688 = header.getOrDefault("X-Amz-Date")
  valid_21626688 = validateParameter(valid_21626688, JString, required = false,
                                   default = nil)
  if valid_21626688 != nil:
    section.add "X-Amz-Date", valid_21626688
  var valid_21626689 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626689 = validateParameter(valid_21626689, JString, required = false,
                                   default = nil)
  if valid_21626689 != nil:
    section.add "X-Amz-Security-Token", valid_21626689
  var valid_21626690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626690 = validateParameter(valid_21626690, JString, required = false,
                                   default = nil)
  if valid_21626690 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626690
  var valid_21626691 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626691 = validateParameter(valid_21626691, JString, required = false,
                                   default = nil)
  if valid_21626691 != nil:
    section.add "X-Amz-Algorithm", valid_21626691
  var valid_21626692 = header.getOrDefault("X-Amz-Signature")
  valid_21626692 = validateParameter(valid_21626692, JString, required = false,
                                   default = nil)
  if valid_21626692 != nil:
    section.add "X-Amz-Signature", valid_21626692
  var valid_21626693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626693 = validateParameter(valid_21626693, JString, required = false,
                                   default = nil)
  if valid_21626693 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626693
  var valid_21626694 = header.getOrDefault("X-Amz-Credential")
  valid_21626694 = validateParameter(valid_21626694, JString, required = false,
                                   default = nil)
  if valid_21626694 != nil:
    section.add "X-Amz-Credential", valid_21626694
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_21626695 = formData.getOrDefault("TemplateName")
  valid_21626695 = validateParameter(valid_21626695, JString, required = true,
                                   default = nil)
  if valid_21626695 != nil:
    section.add "TemplateName", valid_21626695
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626696: Call_PostDeleteTemplate_21626683; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626696.validator(path, query, header, formData, body, _)
  let scheme = call_21626696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626696.makeUrl(scheme.get, call_21626696.host, call_21626696.base,
                               call_21626696.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626696, uri, valid, _)

proc call*(call_21626697: Call_PostDeleteTemplate_21626683; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_21626698 = newJObject()
  var formData_21626699 = newJObject()
  add(query_21626698, "Action", newJString(Action))
  add(formData_21626699, "TemplateName", newJString(TemplateName))
  add(query_21626698, "Version", newJString(Version))
  result = call_21626697.call(nil, query_21626698, nil, formData_21626699, nil)

var postDeleteTemplate* = Call_PostDeleteTemplate_21626683(
    name: "postDeleteTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteTemplate",
    validator: validate_PostDeleteTemplate_21626684, base: "/",
    makeUrl: url_PostDeleteTemplate_21626685, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTemplate_21626667 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteTemplate_21626669(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTemplate_21626668(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626670 = query.getOrDefault("Action")
  valid_21626670 = validateParameter(valid_21626670, JString, required = true,
                                   default = newJString("DeleteTemplate"))
  if valid_21626670 != nil:
    section.add "Action", valid_21626670
  var valid_21626671 = query.getOrDefault("TemplateName")
  valid_21626671 = validateParameter(valid_21626671, JString, required = true,
                                   default = nil)
  if valid_21626671 != nil:
    section.add "TemplateName", valid_21626671
  var valid_21626672 = query.getOrDefault("Version")
  valid_21626672 = validateParameter(valid_21626672, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626672 != nil:
    section.add "Version", valid_21626672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626673 = header.getOrDefault("X-Amz-Date")
  valid_21626673 = validateParameter(valid_21626673, JString, required = false,
                                   default = nil)
  if valid_21626673 != nil:
    section.add "X-Amz-Date", valid_21626673
  var valid_21626674 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626674 = validateParameter(valid_21626674, JString, required = false,
                                   default = nil)
  if valid_21626674 != nil:
    section.add "X-Amz-Security-Token", valid_21626674
  var valid_21626675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626675 = validateParameter(valid_21626675, JString, required = false,
                                   default = nil)
  if valid_21626675 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626675
  var valid_21626676 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626676 = validateParameter(valid_21626676, JString, required = false,
                                   default = nil)
  if valid_21626676 != nil:
    section.add "X-Amz-Algorithm", valid_21626676
  var valid_21626677 = header.getOrDefault("X-Amz-Signature")
  valid_21626677 = validateParameter(valid_21626677, JString, required = false,
                                   default = nil)
  if valid_21626677 != nil:
    section.add "X-Amz-Signature", valid_21626677
  var valid_21626678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626678 = validateParameter(valid_21626678, JString, required = false,
                                   default = nil)
  if valid_21626678 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626678
  var valid_21626679 = header.getOrDefault("X-Amz-Credential")
  valid_21626679 = validateParameter(valid_21626679, JString, required = false,
                                   default = nil)
  if valid_21626679 != nil:
    section.add "X-Amz-Credential", valid_21626679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626680: Call_GetDeleteTemplate_21626667; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626680.validator(path, query, header, formData, body, _)
  let scheme = call_21626680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626680.makeUrl(scheme.get, call_21626680.host, call_21626680.base,
                               call_21626680.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626680, uri, valid, _)

proc call*(call_21626681: Call_GetDeleteTemplate_21626667; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_21626682 = newJObject()
  add(query_21626682, "Action", newJString(Action))
  add(query_21626682, "TemplateName", newJString(TemplateName))
  add(query_21626682, "Version", newJString(Version))
  result = call_21626681.call(nil, query_21626682, nil, nil, nil)

var getDeleteTemplate* = Call_GetDeleteTemplate_21626667(name: "getDeleteTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteTemplate", validator: validate_GetDeleteTemplate_21626668,
    base: "/", makeUrl: url_GetDeleteTemplate_21626669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVerifiedEmailAddress_21626716 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteVerifiedEmailAddress_21626718(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVerifiedEmailAddress_21626717(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626719 = query.getOrDefault("Action")
  valid_21626719 = validateParameter(valid_21626719, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_21626719 != nil:
    section.add "Action", valid_21626719
  var valid_21626720 = query.getOrDefault("Version")
  valid_21626720 = validateParameter(valid_21626720, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626720 != nil:
    section.add "Version", valid_21626720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626721 = header.getOrDefault("X-Amz-Date")
  valid_21626721 = validateParameter(valid_21626721, JString, required = false,
                                   default = nil)
  if valid_21626721 != nil:
    section.add "X-Amz-Date", valid_21626721
  var valid_21626722 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626722 = validateParameter(valid_21626722, JString, required = false,
                                   default = nil)
  if valid_21626722 != nil:
    section.add "X-Amz-Security-Token", valid_21626722
  var valid_21626723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626723 = validateParameter(valid_21626723, JString, required = false,
                                   default = nil)
  if valid_21626723 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626723
  var valid_21626724 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626724 = validateParameter(valid_21626724, JString, required = false,
                                   default = nil)
  if valid_21626724 != nil:
    section.add "X-Amz-Algorithm", valid_21626724
  var valid_21626725 = header.getOrDefault("X-Amz-Signature")
  valid_21626725 = validateParameter(valid_21626725, JString, required = false,
                                   default = nil)
  if valid_21626725 != nil:
    section.add "X-Amz-Signature", valid_21626725
  var valid_21626726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626726 = validateParameter(valid_21626726, JString, required = false,
                                   default = nil)
  if valid_21626726 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626726
  var valid_21626727 = header.getOrDefault("X-Amz-Credential")
  valid_21626727 = validateParameter(valid_21626727, JString, required = false,
                                   default = nil)
  if valid_21626727 != nil:
    section.add "X-Amz-Credential", valid_21626727
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_21626728 = formData.getOrDefault("EmailAddress")
  valid_21626728 = validateParameter(valid_21626728, JString, required = true,
                                   default = nil)
  if valid_21626728 != nil:
    section.add "EmailAddress", valid_21626728
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626729: Call_PostDeleteVerifiedEmailAddress_21626716;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_21626729.validator(path, query, header, formData, body, _)
  let scheme = call_21626729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626729.makeUrl(scheme.get, call_21626729.host, call_21626729.base,
                               call_21626729.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626729, uri, valid, _)

proc call*(call_21626730: Call_PostDeleteVerifiedEmailAddress_21626716;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626731 = newJObject()
  var formData_21626732 = newJObject()
  add(formData_21626732, "EmailAddress", newJString(EmailAddress))
  add(query_21626731, "Action", newJString(Action))
  add(query_21626731, "Version", newJString(Version))
  result = call_21626730.call(nil, query_21626731, nil, formData_21626732, nil)

var postDeleteVerifiedEmailAddress* = Call_PostDeleteVerifiedEmailAddress_21626716(
    name: "postDeleteVerifiedEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_PostDeleteVerifiedEmailAddress_21626717, base: "/",
    makeUrl: url_PostDeleteVerifiedEmailAddress_21626718,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVerifiedEmailAddress_21626700 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteVerifiedEmailAddress_21626702(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVerifiedEmailAddress_21626701(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626703 = query.getOrDefault("Action")
  valid_21626703 = validateParameter(valid_21626703, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_21626703 != nil:
    section.add "Action", valid_21626703
  var valid_21626704 = query.getOrDefault("EmailAddress")
  valid_21626704 = validateParameter(valid_21626704, JString, required = true,
                                   default = nil)
  if valid_21626704 != nil:
    section.add "EmailAddress", valid_21626704
  var valid_21626705 = query.getOrDefault("Version")
  valid_21626705 = validateParameter(valid_21626705, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626705 != nil:
    section.add "Version", valid_21626705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626706 = header.getOrDefault("X-Amz-Date")
  valid_21626706 = validateParameter(valid_21626706, JString, required = false,
                                   default = nil)
  if valid_21626706 != nil:
    section.add "X-Amz-Date", valid_21626706
  var valid_21626707 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626707 = validateParameter(valid_21626707, JString, required = false,
                                   default = nil)
  if valid_21626707 != nil:
    section.add "X-Amz-Security-Token", valid_21626707
  var valid_21626708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626708 = validateParameter(valid_21626708, JString, required = false,
                                   default = nil)
  if valid_21626708 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626708
  var valid_21626709 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626709 = validateParameter(valid_21626709, JString, required = false,
                                   default = nil)
  if valid_21626709 != nil:
    section.add "X-Amz-Algorithm", valid_21626709
  var valid_21626710 = header.getOrDefault("X-Amz-Signature")
  valid_21626710 = validateParameter(valid_21626710, JString, required = false,
                                   default = nil)
  if valid_21626710 != nil:
    section.add "X-Amz-Signature", valid_21626710
  var valid_21626711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626711 = validateParameter(valid_21626711, JString, required = false,
                                   default = nil)
  if valid_21626711 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626711
  var valid_21626712 = header.getOrDefault("X-Amz-Credential")
  valid_21626712 = validateParameter(valid_21626712, JString, required = false,
                                   default = nil)
  if valid_21626712 != nil:
    section.add "X-Amz-Credential", valid_21626712
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626713: Call_GetDeleteVerifiedEmailAddress_21626700;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_21626713.validator(path, query, header, formData, body, _)
  let scheme = call_21626713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626713.makeUrl(scheme.get, call_21626713.host, call_21626713.base,
                               call_21626713.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626713, uri, valid, _)

proc call*(call_21626714: Call_GetDeleteVerifiedEmailAddress_21626700;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: string (required)
  var query_21626715 = newJObject()
  add(query_21626715, "Action", newJString(Action))
  add(query_21626715, "EmailAddress", newJString(EmailAddress))
  add(query_21626715, "Version", newJString(Version))
  result = call_21626714.call(nil, query_21626715, nil, nil, nil)

var getDeleteVerifiedEmailAddress* = Call_GetDeleteVerifiedEmailAddress_21626700(
    name: "getDeleteVerifiedEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_GetDeleteVerifiedEmailAddress_21626701, base: "/",
    makeUrl: url_GetDeleteVerifiedEmailAddress_21626702,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeActiveReceiptRuleSet_21626748 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeActiveReceiptRuleSet_21626750(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeActiveReceiptRuleSet_21626749(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626751 = query.getOrDefault("Action")
  valid_21626751 = validateParameter(valid_21626751, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_21626751 != nil:
    section.add "Action", valid_21626751
  var valid_21626752 = query.getOrDefault("Version")
  valid_21626752 = validateParameter(valid_21626752, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626752 != nil:
    section.add "Version", valid_21626752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626753 = header.getOrDefault("X-Amz-Date")
  valid_21626753 = validateParameter(valid_21626753, JString, required = false,
                                   default = nil)
  if valid_21626753 != nil:
    section.add "X-Amz-Date", valid_21626753
  var valid_21626754 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626754 = validateParameter(valid_21626754, JString, required = false,
                                   default = nil)
  if valid_21626754 != nil:
    section.add "X-Amz-Security-Token", valid_21626754
  var valid_21626755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626755 = validateParameter(valid_21626755, JString, required = false,
                                   default = nil)
  if valid_21626755 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626755
  var valid_21626756 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626756 = validateParameter(valid_21626756, JString, required = false,
                                   default = nil)
  if valid_21626756 != nil:
    section.add "X-Amz-Algorithm", valid_21626756
  var valid_21626757 = header.getOrDefault("X-Amz-Signature")
  valid_21626757 = validateParameter(valid_21626757, JString, required = false,
                                   default = nil)
  if valid_21626757 != nil:
    section.add "X-Amz-Signature", valid_21626757
  var valid_21626758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626758 = validateParameter(valid_21626758, JString, required = false,
                                   default = nil)
  if valid_21626758 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626758
  var valid_21626759 = header.getOrDefault("X-Amz-Credential")
  valid_21626759 = validateParameter(valid_21626759, JString, required = false,
                                   default = nil)
  if valid_21626759 != nil:
    section.add "X-Amz-Credential", valid_21626759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626760: Call_PostDescribeActiveReceiptRuleSet_21626748;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626760.validator(path, query, header, formData, body, _)
  let scheme = call_21626760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626760.makeUrl(scheme.get, call_21626760.host, call_21626760.base,
                               call_21626760.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626760, uri, valid, _)

proc call*(call_21626761: Call_PostDescribeActiveReceiptRuleSet_21626748;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626762 = newJObject()
  add(query_21626762, "Action", newJString(Action))
  add(query_21626762, "Version", newJString(Version))
  result = call_21626761.call(nil, query_21626762, nil, nil, nil)

var postDescribeActiveReceiptRuleSet* = Call_PostDescribeActiveReceiptRuleSet_21626748(
    name: "postDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_PostDescribeActiveReceiptRuleSet_21626749, base: "/",
    makeUrl: url_PostDescribeActiveReceiptRuleSet_21626750,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeActiveReceiptRuleSet_21626733 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeActiveReceiptRuleSet_21626735(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeActiveReceiptRuleSet_21626734(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626736 = query.getOrDefault("Action")
  valid_21626736 = validateParameter(valid_21626736, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_21626736 != nil:
    section.add "Action", valid_21626736
  var valid_21626737 = query.getOrDefault("Version")
  valid_21626737 = validateParameter(valid_21626737, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626737 != nil:
    section.add "Version", valid_21626737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626738 = header.getOrDefault("X-Amz-Date")
  valid_21626738 = validateParameter(valid_21626738, JString, required = false,
                                   default = nil)
  if valid_21626738 != nil:
    section.add "X-Amz-Date", valid_21626738
  var valid_21626739 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626739 = validateParameter(valid_21626739, JString, required = false,
                                   default = nil)
  if valid_21626739 != nil:
    section.add "X-Amz-Security-Token", valid_21626739
  var valid_21626740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626740 = validateParameter(valid_21626740, JString, required = false,
                                   default = nil)
  if valid_21626740 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626740
  var valid_21626741 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626741 = validateParameter(valid_21626741, JString, required = false,
                                   default = nil)
  if valid_21626741 != nil:
    section.add "X-Amz-Algorithm", valid_21626741
  var valid_21626742 = header.getOrDefault("X-Amz-Signature")
  valid_21626742 = validateParameter(valid_21626742, JString, required = false,
                                   default = nil)
  if valid_21626742 != nil:
    section.add "X-Amz-Signature", valid_21626742
  var valid_21626743 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626743 = validateParameter(valid_21626743, JString, required = false,
                                   default = nil)
  if valid_21626743 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626743
  var valid_21626744 = header.getOrDefault("X-Amz-Credential")
  valid_21626744 = validateParameter(valid_21626744, JString, required = false,
                                   default = nil)
  if valid_21626744 != nil:
    section.add "X-Amz-Credential", valid_21626744
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626745: Call_GetDescribeActiveReceiptRuleSet_21626733;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626745.validator(path, query, header, formData, body, _)
  let scheme = call_21626745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626745.makeUrl(scheme.get, call_21626745.host, call_21626745.base,
                               call_21626745.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626745, uri, valid, _)

proc call*(call_21626746: Call_GetDescribeActiveReceiptRuleSet_21626733;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626747 = newJObject()
  add(query_21626747, "Action", newJString(Action))
  add(query_21626747, "Version", newJString(Version))
  result = call_21626746.call(nil, query_21626747, nil, nil, nil)

var getDescribeActiveReceiptRuleSet* = Call_GetDescribeActiveReceiptRuleSet_21626733(
    name: "getDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_GetDescribeActiveReceiptRuleSet_21626734, base: "/",
    makeUrl: url_GetDescribeActiveReceiptRuleSet_21626735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeConfigurationSet_21626780 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeConfigurationSet_21626782(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeConfigurationSet_21626781(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626783 = query.getOrDefault("Action")
  valid_21626783 = validateParameter(valid_21626783, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_21626783 != nil:
    section.add "Action", valid_21626783
  var valid_21626784 = query.getOrDefault("Version")
  valid_21626784 = validateParameter(valid_21626784, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626784 != nil:
    section.add "Version", valid_21626784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626785 = header.getOrDefault("X-Amz-Date")
  valid_21626785 = validateParameter(valid_21626785, JString, required = false,
                                   default = nil)
  if valid_21626785 != nil:
    section.add "X-Amz-Date", valid_21626785
  var valid_21626786 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626786 = validateParameter(valid_21626786, JString, required = false,
                                   default = nil)
  if valid_21626786 != nil:
    section.add "X-Amz-Security-Token", valid_21626786
  var valid_21626787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626787 = validateParameter(valid_21626787, JString, required = false,
                                   default = nil)
  if valid_21626787 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626787
  var valid_21626788 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626788 = validateParameter(valid_21626788, JString, required = false,
                                   default = nil)
  if valid_21626788 != nil:
    section.add "X-Amz-Algorithm", valid_21626788
  var valid_21626789 = header.getOrDefault("X-Amz-Signature")
  valid_21626789 = validateParameter(valid_21626789, JString, required = false,
                                   default = nil)
  if valid_21626789 != nil:
    section.add "X-Amz-Signature", valid_21626789
  var valid_21626790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626790 = validateParameter(valid_21626790, JString, required = false,
                                   default = nil)
  if valid_21626790 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626790
  var valid_21626791 = header.getOrDefault("X-Amz-Credential")
  valid_21626791 = validateParameter(valid_21626791, JString, required = false,
                                   default = nil)
  if valid_21626791 != nil:
    section.add "X-Amz-Credential", valid_21626791
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  section = newJObject()
  var valid_21626792 = formData.getOrDefault("ConfigurationSetAttributeNames")
  valid_21626792 = validateParameter(valid_21626792, JArray, required = false,
                                   default = nil)
  if valid_21626792 != nil:
    section.add "ConfigurationSetAttributeNames", valid_21626792
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21626793 = formData.getOrDefault("ConfigurationSetName")
  valid_21626793 = validateParameter(valid_21626793, JString, required = true,
                                   default = nil)
  if valid_21626793 != nil:
    section.add "ConfigurationSetName", valid_21626793
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626794: Call_PostDescribeConfigurationSet_21626780;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626794.validator(path, query, header, formData, body, _)
  let scheme = call_21626794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626794.makeUrl(scheme.get, call_21626794.host, call_21626794.base,
                               call_21626794.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626794, uri, valid, _)

proc call*(call_21626795: Call_PostDescribeConfigurationSet_21626780;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626796 = newJObject()
  var formData_21626797 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    formData_21626797.add "ConfigurationSetAttributeNames",
                         ConfigurationSetAttributeNames
  add(formData_21626797, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626796, "Action", newJString(Action))
  add(query_21626796, "Version", newJString(Version))
  result = call_21626795.call(nil, query_21626796, nil, formData_21626797, nil)

var postDescribeConfigurationSet* = Call_PostDescribeConfigurationSet_21626780(
    name: "postDescribeConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_PostDescribeConfigurationSet_21626781, base: "/",
    makeUrl: url_PostDescribeConfigurationSet_21626782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeConfigurationSet_21626763 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeConfigurationSet_21626765(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeConfigurationSet_21626764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626766 = query.getOrDefault("Action")
  valid_21626766 = validateParameter(valid_21626766, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_21626766 != nil:
    section.add "Action", valid_21626766
  var valid_21626767 = query.getOrDefault("ConfigurationSetAttributeNames")
  valid_21626767 = validateParameter(valid_21626767, JArray, required = false,
                                   default = nil)
  if valid_21626767 != nil:
    section.add "ConfigurationSetAttributeNames", valid_21626767
  var valid_21626768 = query.getOrDefault("ConfigurationSetName")
  valid_21626768 = validateParameter(valid_21626768, JString, required = true,
                                   default = nil)
  if valid_21626768 != nil:
    section.add "ConfigurationSetName", valid_21626768
  var valid_21626769 = query.getOrDefault("Version")
  valid_21626769 = validateParameter(valid_21626769, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626769 != nil:
    section.add "Version", valid_21626769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626770 = header.getOrDefault("X-Amz-Date")
  valid_21626770 = validateParameter(valid_21626770, JString, required = false,
                                   default = nil)
  if valid_21626770 != nil:
    section.add "X-Amz-Date", valid_21626770
  var valid_21626771 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626771 = validateParameter(valid_21626771, JString, required = false,
                                   default = nil)
  if valid_21626771 != nil:
    section.add "X-Amz-Security-Token", valid_21626771
  var valid_21626772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626772 = validateParameter(valid_21626772, JString, required = false,
                                   default = nil)
  if valid_21626772 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626772
  var valid_21626773 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626773 = validateParameter(valid_21626773, JString, required = false,
                                   default = nil)
  if valid_21626773 != nil:
    section.add "X-Amz-Algorithm", valid_21626773
  var valid_21626774 = header.getOrDefault("X-Amz-Signature")
  valid_21626774 = validateParameter(valid_21626774, JString, required = false,
                                   default = nil)
  if valid_21626774 != nil:
    section.add "X-Amz-Signature", valid_21626774
  var valid_21626775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626775 = validateParameter(valid_21626775, JString, required = false,
                                   default = nil)
  if valid_21626775 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626775
  var valid_21626776 = header.getOrDefault("X-Amz-Credential")
  valid_21626776 = validateParameter(valid_21626776, JString, required = false,
                                   default = nil)
  if valid_21626776 != nil:
    section.add "X-Amz-Credential", valid_21626776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626777: Call_GetDescribeConfigurationSet_21626763;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626777.validator(path, query, header, formData, body, _)
  let scheme = call_21626777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626777.makeUrl(scheme.get, call_21626777.host, call_21626777.base,
                               call_21626777.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626777, uri, valid, _)

proc call*(call_21626778: Call_GetDescribeConfigurationSet_21626763;
          ConfigurationSetName: string;
          Action: string = "DescribeConfigurationSet";
          ConfigurationSetAttributeNames: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: string (required)
  var query_21626779 = newJObject()
  add(query_21626779, "Action", newJString(Action))
  if ConfigurationSetAttributeNames != nil:
    query_21626779.add "ConfigurationSetAttributeNames",
                      ConfigurationSetAttributeNames
  add(query_21626779, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21626779, "Version", newJString(Version))
  result = call_21626778.call(nil, query_21626779, nil, nil, nil)

var getDescribeConfigurationSet* = Call_GetDescribeConfigurationSet_21626763(
    name: "getDescribeConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_GetDescribeConfigurationSet_21626764, base: "/",
    makeUrl: url_GetDescribeConfigurationSet_21626765,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRule_21626815 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeReceiptRule_21626817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReceiptRule_21626816(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626818 = query.getOrDefault("Action")
  valid_21626818 = validateParameter(valid_21626818, JString, required = true,
                                   default = newJString("DescribeReceiptRule"))
  if valid_21626818 != nil:
    section.add "Action", valid_21626818
  var valid_21626819 = query.getOrDefault("Version")
  valid_21626819 = validateParameter(valid_21626819, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626819 != nil:
    section.add "Version", valid_21626819
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626820 = header.getOrDefault("X-Amz-Date")
  valid_21626820 = validateParameter(valid_21626820, JString, required = false,
                                   default = nil)
  if valid_21626820 != nil:
    section.add "X-Amz-Date", valid_21626820
  var valid_21626821 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626821 = validateParameter(valid_21626821, JString, required = false,
                                   default = nil)
  if valid_21626821 != nil:
    section.add "X-Amz-Security-Token", valid_21626821
  var valid_21626822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626822 = validateParameter(valid_21626822, JString, required = false,
                                   default = nil)
  if valid_21626822 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626822
  var valid_21626823 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626823 = validateParameter(valid_21626823, JString, required = false,
                                   default = nil)
  if valid_21626823 != nil:
    section.add "X-Amz-Algorithm", valid_21626823
  var valid_21626824 = header.getOrDefault("X-Amz-Signature")
  valid_21626824 = validateParameter(valid_21626824, JString, required = false,
                                   default = nil)
  if valid_21626824 != nil:
    section.add "X-Amz-Signature", valid_21626824
  var valid_21626825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626825 = validateParameter(valid_21626825, JString, required = false,
                                   default = nil)
  if valid_21626825 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626825
  var valid_21626826 = header.getOrDefault("X-Amz-Credential")
  valid_21626826 = validateParameter(valid_21626826, JString, required = false,
                                   default = nil)
  if valid_21626826 != nil:
    section.add "X-Amz-Credential", valid_21626826
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_21626827 = formData.getOrDefault("RuleName")
  valid_21626827 = validateParameter(valid_21626827, JString, required = true,
                                   default = nil)
  if valid_21626827 != nil:
    section.add "RuleName", valid_21626827
  var valid_21626828 = formData.getOrDefault("RuleSetName")
  valid_21626828 = validateParameter(valid_21626828, JString, required = true,
                                   default = nil)
  if valid_21626828 != nil:
    section.add "RuleSetName", valid_21626828
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626829: Call_PostDescribeReceiptRule_21626815;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626829.validator(path, query, header, formData, body, _)
  let scheme = call_21626829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626829.makeUrl(scheme.get, call_21626829.host, call_21626829.base,
                               call_21626829.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626829, uri, valid, _)

proc call*(call_21626830: Call_PostDescribeReceiptRule_21626815; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626831 = newJObject()
  var formData_21626832 = newJObject()
  add(formData_21626832, "RuleName", newJString(RuleName))
  add(formData_21626832, "RuleSetName", newJString(RuleSetName))
  add(query_21626831, "Action", newJString(Action))
  add(query_21626831, "Version", newJString(Version))
  result = call_21626830.call(nil, query_21626831, nil, formData_21626832, nil)

var postDescribeReceiptRule* = Call_PostDescribeReceiptRule_21626815(
    name: "postDescribeReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_PostDescribeReceiptRule_21626816, base: "/",
    makeUrl: url_PostDescribeReceiptRule_21626817,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRule_21626798 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeReceiptRule_21626800(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReceiptRule_21626799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_21626801 = query.getOrDefault("RuleName")
  valid_21626801 = validateParameter(valid_21626801, JString, required = true,
                                   default = nil)
  if valid_21626801 != nil:
    section.add "RuleName", valid_21626801
  var valid_21626802 = query.getOrDefault("RuleSetName")
  valid_21626802 = validateParameter(valid_21626802, JString, required = true,
                                   default = nil)
  if valid_21626802 != nil:
    section.add "RuleSetName", valid_21626802
  var valid_21626803 = query.getOrDefault("Action")
  valid_21626803 = validateParameter(valid_21626803, JString, required = true,
                                   default = newJString("DescribeReceiptRule"))
  if valid_21626803 != nil:
    section.add "Action", valid_21626803
  var valid_21626804 = query.getOrDefault("Version")
  valid_21626804 = validateParameter(valid_21626804, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626804 != nil:
    section.add "Version", valid_21626804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626805 = header.getOrDefault("X-Amz-Date")
  valid_21626805 = validateParameter(valid_21626805, JString, required = false,
                                   default = nil)
  if valid_21626805 != nil:
    section.add "X-Amz-Date", valid_21626805
  var valid_21626806 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626806 = validateParameter(valid_21626806, JString, required = false,
                                   default = nil)
  if valid_21626806 != nil:
    section.add "X-Amz-Security-Token", valid_21626806
  var valid_21626807 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626807 = validateParameter(valid_21626807, JString, required = false,
                                   default = nil)
  if valid_21626807 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626807
  var valid_21626808 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626808 = validateParameter(valid_21626808, JString, required = false,
                                   default = nil)
  if valid_21626808 != nil:
    section.add "X-Amz-Algorithm", valid_21626808
  var valid_21626809 = header.getOrDefault("X-Amz-Signature")
  valid_21626809 = validateParameter(valid_21626809, JString, required = false,
                                   default = nil)
  if valid_21626809 != nil:
    section.add "X-Amz-Signature", valid_21626809
  var valid_21626810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626810 = validateParameter(valid_21626810, JString, required = false,
                                   default = nil)
  if valid_21626810 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626810
  var valid_21626811 = header.getOrDefault("X-Amz-Credential")
  valid_21626811 = validateParameter(valid_21626811, JString, required = false,
                                   default = nil)
  if valid_21626811 != nil:
    section.add "X-Amz-Credential", valid_21626811
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626812: Call_GetDescribeReceiptRule_21626798;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626812.validator(path, query, header, formData, body, _)
  let scheme = call_21626812.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626812.makeUrl(scheme.get, call_21626812.host, call_21626812.base,
                               call_21626812.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626812, uri, valid, _)

proc call*(call_21626813: Call_GetDescribeReceiptRule_21626798; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626814 = newJObject()
  add(query_21626814, "RuleName", newJString(RuleName))
  add(query_21626814, "RuleSetName", newJString(RuleSetName))
  add(query_21626814, "Action", newJString(Action))
  add(query_21626814, "Version", newJString(Version))
  result = call_21626813.call(nil, query_21626814, nil, nil, nil)

var getDescribeReceiptRule* = Call_GetDescribeReceiptRule_21626798(
    name: "getDescribeReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_GetDescribeReceiptRule_21626799, base: "/",
    makeUrl: url_GetDescribeReceiptRule_21626800,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRuleSet_21626849 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeReceiptRuleSet_21626851(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReceiptRuleSet_21626850(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626852 = query.getOrDefault("Action")
  valid_21626852 = validateParameter(valid_21626852, JString, required = true, default = newJString(
      "DescribeReceiptRuleSet"))
  if valid_21626852 != nil:
    section.add "Action", valid_21626852
  var valid_21626853 = query.getOrDefault("Version")
  valid_21626853 = validateParameter(valid_21626853, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626853 != nil:
    section.add "Version", valid_21626853
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626854 = header.getOrDefault("X-Amz-Date")
  valid_21626854 = validateParameter(valid_21626854, JString, required = false,
                                   default = nil)
  if valid_21626854 != nil:
    section.add "X-Amz-Date", valid_21626854
  var valid_21626855 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626855 = validateParameter(valid_21626855, JString, required = false,
                                   default = nil)
  if valid_21626855 != nil:
    section.add "X-Amz-Security-Token", valid_21626855
  var valid_21626856 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626856 = validateParameter(valid_21626856, JString, required = false,
                                   default = nil)
  if valid_21626856 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626856
  var valid_21626857 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626857 = validateParameter(valid_21626857, JString, required = false,
                                   default = nil)
  if valid_21626857 != nil:
    section.add "X-Amz-Algorithm", valid_21626857
  var valid_21626858 = header.getOrDefault("X-Amz-Signature")
  valid_21626858 = validateParameter(valid_21626858, JString, required = false,
                                   default = nil)
  if valid_21626858 != nil:
    section.add "X-Amz-Signature", valid_21626858
  var valid_21626859 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626859 = validateParameter(valid_21626859, JString, required = false,
                                   default = nil)
  if valid_21626859 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626859
  var valid_21626860 = header.getOrDefault("X-Amz-Credential")
  valid_21626860 = validateParameter(valid_21626860, JString, required = false,
                                   default = nil)
  if valid_21626860 != nil:
    section.add "X-Amz-Credential", valid_21626860
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_21626861 = formData.getOrDefault("RuleSetName")
  valid_21626861 = validateParameter(valid_21626861, JString, required = true,
                                   default = nil)
  if valid_21626861 != nil:
    section.add "RuleSetName", valid_21626861
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626862: Call_PostDescribeReceiptRuleSet_21626849;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626862.validator(path, query, header, formData, body, _)
  let scheme = call_21626862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626862.makeUrl(scheme.get, call_21626862.host, call_21626862.base,
                               call_21626862.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626862, uri, valid, _)

proc call*(call_21626863: Call_PostDescribeReceiptRuleSet_21626849;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626864 = newJObject()
  var formData_21626865 = newJObject()
  add(formData_21626865, "RuleSetName", newJString(RuleSetName))
  add(query_21626864, "Action", newJString(Action))
  add(query_21626864, "Version", newJString(Version))
  result = call_21626863.call(nil, query_21626864, nil, formData_21626865, nil)

var postDescribeReceiptRuleSet* = Call_PostDescribeReceiptRuleSet_21626849(
    name: "postDescribeReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_PostDescribeReceiptRuleSet_21626850, base: "/",
    makeUrl: url_PostDescribeReceiptRuleSet_21626851,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRuleSet_21626833 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeReceiptRuleSet_21626835(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReceiptRuleSet_21626834(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_21626836 = query.getOrDefault("RuleSetName")
  valid_21626836 = validateParameter(valid_21626836, JString, required = true,
                                   default = nil)
  if valid_21626836 != nil:
    section.add "RuleSetName", valid_21626836
  var valid_21626837 = query.getOrDefault("Action")
  valid_21626837 = validateParameter(valid_21626837, JString, required = true, default = newJString(
      "DescribeReceiptRuleSet"))
  if valid_21626837 != nil:
    section.add "Action", valid_21626837
  var valid_21626838 = query.getOrDefault("Version")
  valid_21626838 = validateParameter(valid_21626838, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626838 != nil:
    section.add "Version", valid_21626838
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626839 = header.getOrDefault("X-Amz-Date")
  valid_21626839 = validateParameter(valid_21626839, JString, required = false,
                                   default = nil)
  if valid_21626839 != nil:
    section.add "X-Amz-Date", valid_21626839
  var valid_21626840 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626840 = validateParameter(valid_21626840, JString, required = false,
                                   default = nil)
  if valid_21626840 != nil:
    section.add "X-Amz-Security-Token", valid_21626840
  var valid_21626841 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626841 = validateParameter(valid_21626841, JString, required = false,
                                   default = nil)
  if valid_21626841 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626841
  var valid_21626842 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626842 = validateParameter(valid_21626842, JString, required = false,
                                   default = nil)
  if valid_21626842 != nil:
    section.add "X-Amz-Algorithm", valid_21626842
  var valid_21626843 = header.getOrDefault("X-Amz-Signature")
  valid_21626843 = validateParameter(valid_21626843, JString, required = false,
                                   default = nil)
  if valid_21626843 != nil:
    section.add "X-Amz-Signature", valid_21626843
  var valid_21626844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626844 = validateParameter(valid_21626844, JString, required = false,
                                   default = nil)
  if valid_21626844 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626844
  var valid_21626845 = header.getOrDefault("X-Amz-Credential")
  valid_21626845 = validateParameter(valid_21626845, JString, required = false,
                                   default = nil)
  if valid_21626845 != nil:
    section.add "X-Amz-Credential", valid_21626845
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626846: Call_GetDescribeReceiptRuleSet_21626833;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626846.validator(path, query, header, formData, body, _)
  let scheme = call_21626846.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626846.makeUrl(scheme.get, call_21626846.host, call_21626846.base,
                               call_21626846.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626846, uri, valid, _)

proc call*(call_21626847: Call_GetDescribeReceiptRuleSet_21626833;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626848 = newJObject()
  add(query_21626848, "RuleSetName", newJString(RuleSetName))
  add(query_21626848, "Action", newJString(Action))
  add(query_21626848, "Version", newJString(Version))
  result = call_21626847.call(nil, query_21626848, nil, nil, nil)

var getDescribeReceiptRuleSet* = Call_GetDescribeReceiptRuleSet_21626833(
    name: "getDescribeReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_GetDescribeReceiptRuleSet_21626834, base: "/",
    makeUrl: url_GetDescribeReceiptRuleSet_21626835,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSendingEnabled_21626881 = ref object of OpenApiRestCall_21625435
proc url_PostGetAccountSendingEnabled_21626883(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSendingEnabled_21626882(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626884 = query.getOrDefault("Action")
  valid_21626884 = validateParameter(valid_21626884, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_21626884 != nil:
    section.add "Action", valid_21626884
  var valid_21626885 = query.getOrDefault("Version")
  valid_21626885 = validateParameter(valid_21626885, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626885 != nil:
    section.add "Version", valid_21626885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626886 = header.getOrDefault("X-Amz-Date")
  valid_21626886 = validateParameter(valid_21626886, JString, required = false,
                                   default = nil)
  if valid_21626886 != nil:
    section.add "X-Amz-Date", valid_21626886
  var valid_21626887 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626887 = validateParameter(valid_21626887, JString, required = false,
                                   default = nil)
  if valid_21626887 != nil:
    section.add "X-Amz-Security-Token", valid_21626887
  var valid_21626888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626888 = validateParameter(valid_21626888, JString, required = false,
                                   default = nil)
  if valid_21626888 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626888
  var valid_21626889 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626889 = validateParameter(valid_21626889, JString, required = false,
                                   default = nil)
  if valid_21626889 != nil:
    section.add "X-Amz-Algorithm", valid_21626889
  var valid_21626890 = header.getOrDefault("X-Amz-Signature")
  valid_21626890 = validateParameter(valid_21626890, JString, required = false,
                                   default = nil)
  if valid_21626890 != nil:
    section.add "X-Amz-Signature", valid_21626890
  var valid_21626891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626891 = validateParameter(valid_21626891, JString, required = false,
                                   default = nil)
  if valid_21626891 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626891
  var valid_21626892 = header.getOrDefault("X-Amz-Credential")
  valid_21626892 = validateParameter(valid_21626892, JString, required = false,
                                   default = nil)
  if valid_21626892 != nil:
    section.add "X-Amz-Credential", valid_21626892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626893: Call_PostGetAccountSendingEnabled_21626881;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626893.validator(path, query, header, formData, body, _)
  let scheme = call_21626893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626893.makeUrl(scheme.get, call_21626893.host, call_21626893.base,
                               call_21626893.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626893, uri, valid, _)

proc call*(call_21626894: Call_PostGetAccountSendingEnabled_21626881;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626895 = newJObject()
  add(query_21626895, "Action", newJString(Action))
  add(query_21626895, "Version", newJString(Version))
  result = call_21626894.call(nil, query_21626895, nil, nil, nil)

var postGetAccountSendingEnabled* = Call_PostGetAccountSendingEnabled_21626881(
    name: "postGetAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_PostGetAccountSendingEnabled_21626882, base: "/",
    makeUrl: url_PostGetAccountSendingEnabled_21626883,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSendingEnabled_21626866 = ref object of OpenApiRestCall_21625435
proc url_GetGetAccountSendingEnabled_21626868(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSendingEnabled_21626867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626869 = query.getOrDefault("Action")
  valid_21626869 = validateParameter(valid_21626869, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_21626869 != nil:
    section.add "Action", valid_21626869
  var valid_21626870 = query.getOrDefault("Version")
  valid_21626870 = validateParameter(valid_21626870, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626870 != nil:
    section.add "Version", valid_21626870
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626871 = header.getOrDefault("X-Amz-Date")
  valid_21626871 = validateParameter(valid_21626871, JString, required = false,
                                   default = nil)
  if valid_21626871 != nil:
    section.add "X-Amz-Date", valid_21626871
  var valid_21626872 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626872 = validateParameter(valid_21626872, JString, required = false,
                                   default = nil)
  if valid_21626872 != nil:
    section.add "X-Amz-Security-Token", valid_21626872
  var valid_21626873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626873 = validateParameter(valid_21626873, JString, required = false,
                                   default = nil)
  if valid_21626873 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626873
  var valid_21626874 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626874 = validateParameter(valid_21626874, JString, required = false,
                                   default = nil)
  if valid_21626874 != nil:
    section.add "X-Amz-Algorithm", valid_21626874
  var valid_21626875 = header.getOrDefault("X-Amz-Signature")
  valid_21626875 = validateParameter(valid_21626875, JString, required = false,
                                   default = nil)
  if valid_21626875 != nil:
    section.add "X-Amz-Signature", valid_21626875
  var valid_21626876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626876 = validateParameter(valid_21626876, JString, required = false,
                                   default = nil)
  if valid_21626876 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626876
  var valid_21626877 = header.getOrDefault("X-Amz-Credential")
  valid_21626877 = validateParameter(valid_21626877, JString, required = false,
                                   default = nil)
  if valid_21626877 != nil:
    section.add "X-Amz-Credential", valid_21626877
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626878: Call_GetGetAccountSendingEnabled_21626866;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626878.validator(path, query, header, formData, body, _)
  let scheme = call_21626878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626878.makeUrl(scheme.get, call_21626878.host, call_21626878.base,
                               call_21626878.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626878, uri, valid, _)

proc call*(call_21626879: Call_GetGetAccountSendingEnabled_21626866;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626880 = newJObject()
  add(query_21626880, "Action", newJString(Action))
  add(query_21626880, "Version", newJString(Version))
  result = call_21626879.call(nil, query_21626880, nil, nil, nil)

var getGetAccountSendingEnabled* = Call_GetGetAccountSendingEnabled_21626866(
    name: "getGetAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_GetGetAccountSendingEnabled_21626867, base: "/",
    makeUrl: url_GetGetAccountSendingEnabled_21626868,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCustomVerificationEmailTemplate_21626912 = ref object of OpenApiRestCall_21625435
proc url_PostGetCustomVerificationEmailTemplate_21626914(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCustomVerificationEmailTemplate_21626913(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626915 = query.getOrDefault("Action")
  valid_21626915 = validateParameter(valid_21626915, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_21626915 != nil:
    section.add "Action", valid_21626915
  var valid_21626916 = query.getOrDefault("Version")
  valid_21626916 = validateParameter(valid_21626916, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626916 != nil:
    section.add "Version", valid_21626916
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626917 = header.getOrDefault("X-Amz-Date")
  valid_21626917 = validateParameter(valid_21626917, JString, required = false,
                                   default = nil)
  if valid_21626917 != nil:
    section.add "X-Amz-Date", valid_21626917
  var valid_21626918 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626918 = validateParameter(valid_21626918, JString, required = false,
                                   default = nil)
  if valid_21626918 != nil:
    section.add "X-Amz-Security-Token", valid_21626918
  var valid_21626919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626919 = validateParameter(valid_21626919, JString, required = false,
                                   default = nil)
  if valid_21626919 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626919
  var valid_21626920 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626920 = validateParameter(valid_21626920, JString, required = false,
                                   default = nil)
  if valid_21626920 != nil:
    section.add "X-Amz-Algorithm", valid_21626920
  var valid_21626921 = header.getOrDefault("X-Amz-Signature")
  valid_21626921 = validateParameter(valid_21626921, JString, required = false,
                                   default = nil)
  if valid_21626921 != nil:
    section.add "X-Amz-Signature", valid_21626921
  var valid_21626922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626922 = validateParameter(valid_21626922, JString, required = false,
                                   default = nil)
  if valid_21626922 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626922
  var valid_21626923 = header.getOrDefault("X-Amz-Credential")
  valid_21626923 = validateParameter(valid_21626923, JString, required = false,
                                   default = nil)
  if valid_21626923 != nil:
    section.add "X-Amz-Credential", valid_21626923
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_21626924 = formData.getOrDefault("TemplateName")
  valid_21626924 = validateParameter(valid_21626924, JString, required = true,
                                   default = nil)
  if valid_21626924 != nil:
    section.add "TemplateName", valid_21626924
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626925: Call_PostGetCustomVerificationEmailTemplate_21626912;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626925.validator(path, query, header, formData, body, _)
  let scheme = call_21626925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626925.makeUrl(scheme.get, call_21626925.host, call_21626925.base,
                               call_21626925.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626925, uri, valid, _)

proc call*(call_21626926: Call_PostGetCustomVerificationEmailTemplate_21626912;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_21626927 = newJObject()
  var formData_21626928 = newJObject()
  add(query_21626927, "Action", newJString(Action))
  add(formData_21626928, "TemplateName", newJString(TemplateName))
  add(query_21626927, "Version", newJString(Version))
  result = call_21626926.call(nil, query_21626927, nil, formData_21626928, nil)

var postGetCustomVerificationEmailTemplate* = Call_PostGetCustomVerificationEmailTemplate_21626912(
    name: "postGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_PostGetCustomVerificationEmailTemplate_21626913,
    base: "/", makeUrl: url_PostGetCustomVerificationEmailTemplate_21626914,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCustomVerificationEmailTemplate_21626896 = ref object of OpenApiRestCall_21625435
proc url_GetGetCustomVerificationEmailTemplate_21626898(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCustomVerificationEmailTemplate_21626897(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626899 = query.getOrDefault("Action")
  valid_21626899 = validateParameter(valid_21626899, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_21626899 != nil:
    section.add "Action", valid_21626899
  var valid_21626900 = query.getOrDefault("TemplateName")
  valid_21626900 = validateParameter(valid_21626900, JString, required = true,
                                   default = nil)
  if valid_21626900 != nil:
    section.add "TemplateName", valid_21626900
  var valid_21626901 = query.getOrDefault("Version")
  valid_21626901 = validateParameter(valid_21626901, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626901 != nil:
    section.add "Version", valid_21626901
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626902 = header.getOrDefault("X-Amz-Date")
  valid_21626902 = validateParameter(valid_21626902, JString, required = false,
                                   default = nil)
  if valid_21626902 != nil:
    section.add "X-Amz-Date", valid_21626902
  var valid_21626903 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626903 = validateParameter(valid_21626903, JString, required = false,
                                   default = nil)
  if valid_21626903 != nil:
    section.add "X-Amz-Security-Token", valid_21626903
  var valid_21626904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626904 = validateParameter(valid_21626904, JString, required = false,
                                   default = nil)
  if valid_21626904 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626904
  var valid_21626905 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626905 = validateParameter(valid_21626905, JString, required = false,
                                   default = nil)
  if valid_21626905 != nil:
    section.add "X-Amz-Algorithm", valid_21626905
  var valid_21626906 = header.getOrDefault("X-Amz-Signature")
  valid_21626906 = validateParameter(valid_21626906, JString, required = false,
                                   default = nil)
  if valid_21626906 != nil:
    section.add "X-Amz-Signature", valid_21626906
  var valid_21626907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626907 = validateParameter(valid_21626907, JString, required = false,
                                   default = nil)
  if valid_21626907 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626907
  var valid_21626908 = header.getOrDefault("X-Amz-Credential")
  valid_21626908 = validateParameter(valid_21626908, JString, required = false,
                                   default = nil)
  if valid_21626908 != nil:
    section.add "X-Amz-Credential", valid_21626908
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626909: Call_GetGetCustomVerificationEmailTemplate_21626896;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21626909.validator(path, query, header, formData, body, _)
  let scheme = call_21626909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626909.makeUrl(scheme.get, call_21626909.host, call_21626909.base,
                               call_21626909.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626909, uri, valid, _)

proc call*(call_21626910: Call_GetGetCustomVerificationEmailTemplate_21626896;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_21626911 = newJObject()
  add(query_21626911, "Action", newJString(Action))
  add(query_21626911, "TemplateName", newJString(TemplateName))
  add(query_21626911, "Version", newJString(Version))
  result = call_21626910.call(nil, query_21626911, nil, nil, nil)

var getGetCustomVerificationEmailTemplate* = Call_GetGetCustomVerificationEmailTemplate_21626896(
    name: "getGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_GetGetCustomVerificationEmailTemplate_21626897, base: "/",
    makeUrl: url_GetGetCustomVerificationEmailTemplate_21626898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityDkimAttributes_21626945 = ref object of OpenApiRestCall_21625435
proc url_PostGetIdentityDkimAttributes_21626947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityDkimAttributes_21626946(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626948 = query.getOrDefault("Action")
  valid_21626948 = validateParameter(valid_21626948, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_21626948 != nil:
    section.add "Action", valid_21626948
  var valid_21626949 = query.getOrDefault("Version")
  valid_21626949 = validateParameter(valid_21626949, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626949 != nil:
    section.add "Version", valid_21626949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626950 = header.getOrDefault("X-Amz-Date")
  valid_21626950 = validateParameter(valid_21626950, JString, required = false,
                                   default = nil)
  if valid_21626950 != nil:
    section.add "X-Amz-Date", valid_21626950
  var valid_21626951 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626951 = validateParameter(valid_21626951, JString, required = false,
                                   default = nil)
  if valid_21626951 != nil:
    section.add "X-Amz-Security-Token", valid_21626951
  var valid_21626952 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626952 = validateParameter(valid_21626952, JString, required = false,
                                   default = nil)
  if valid_21626952 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626952
  var valid_21626953 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626953 = validateParameter(valid_21626953, JString, required = false,
                                   default = nil)
  if valid_21626953 != nil:
    section.add "X-Amz-Algorithm", valid_21626953
  var valid_21626954 = header.getOrDefault("X-Amz-Signature")
  valid_21626954 = validateParameter(valid_21626954, JString, required = false,
                                   default = nil)
  if valid_21626954 != nil:
    section.add "X-Amz-Signature", valid_21626954
  var valid_21626955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626955 = validateParameter(valid_21626955, JString, required = false,
                                   default = nil)
  if valid_21626955 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626955
  var valid_21626956 = header.getOrDefault("X-Amz-Credential")
  valid_21626956 = validateParameter(valid_21626956, JString, required = false,
                                   default = nil)
  if valid_21626956 != nil:
    section.add "X-Amz-Credential", valid_21626956
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_21626957 = formData.getOrDefault("Identities")
  valid_21626957 = validateParameter(valid_21626957, JArray, required = true,
                                   default = nil)
  if valid_21626957 != nil:
    section.add "Identities", valid_21626957
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626958: Call_PostGetIdentityDkimAttributes_21626945;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21626958.validator(path, query, header, formData, body, _)
  let scheme = call_21626958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626958.makeUrl(scheme.get, call_21626958.host, call_21626958.base,
                               call_21626958.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626958, uri, valid, _)

proc call*(call_21626959: Call_PostGetIdentityDkimAttributes_21626945;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626960 = newJObject()
  var formData_21626961 = newJObject()
  if Identities != nil:
    formData_21626961.add "Identities", Identities
  add(query_21626960, "Action", newJString(Action))
  add(query_21626960, "Version", newJString(Version))
  result = call_21626959.call(nil, query_21626960, nil, formData_21626961, nil)

var postGetIdentityDkimAttributes* = Call_PostGetIdentityDkimAttributes_21626945(
    name: "postGetIdentityDkimAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_PostGetIdentityDkimAttributes_21626946, base: "/",
    makeUrl: url_PostGetIdentityDkimAttributes_21626947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityDkimAttributes_21626929 = ref object of OpenApiRestCall_21625435
proc url_GetGetIdentityDkimAttributes_21626931(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityDkimAttributes_21626930(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_21626932 = query.getOrDefault("Identities")
  valid_21626932 = validateParameter(valid_21626932, JArray, required = true,
                                   default = nil)
  if valid_21626932 != nil:
    section.add "Identities", valid_21626932
  var valid_21626933 = query.getOrDefault("Action")
  valid_21626933 = validateParameter(valid_21626933, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_21626933 != nil:
    section.add "Action", valid_21626933
  var valid_21626934 = query.getOrDefault("Version")
  valid_21626934 = validateParameter(valid_21626934, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626934 != nil:
    section.add "Version", valid_21626934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626935 = header.getOrDefault("X-Amz-Date")
  valid_21626935 = validateParameter(valid_21626935, JString, required = false,
                                   default = nil)
  if valid_21626935 != nil:
    section.add "X-Amz-Date", valid_21626935
  var valid_21626936 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626936 = validateParameter(valid_21626936, JString, required = false,
                                   default = nil)
  if valid_21626936 != nil:
    section.add "X-Amz-Security-Token", valid_21626936
  var valid_21626937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626937 = validateParameter(valid_21626937, JString, required = false,
                                   default = nil)
  if valid_21626937 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626937
  var valid_21626938 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626938 = validateParameter(valid_21626938, JString, required = false,
                                   default = nil)
  if valid_21626938 != nil:
    section.add "X-Amz-Algorithm", valid_21626938
  var valid_21626939 = header.getOrDefault("X-Amz-Signature")
  valid_21626939 = validateParameter(valid_21626939, JString, required = false,
                                   default = nil)
  if valid_21626939 != nil:
    section.add "X-Amz-Signature", valid_21626939
  var valid_21626940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626940 = validateParameter(valid_21626940, JString, required = false,
                                   default = nil)
  if valid_21626940 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626940
  var valid_21626941 = header.getOrDefault("X-Amz-Credential")
  valid_21626941 = validateParameter(valid_21626941, JString, required = false,
                                   default = nil)
  if valid_21626941 != nil:
    section.add "X-Amz-Credential", valid_21626941
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626942: Call_GetGetIdentityDkimAttributes_21626929;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21626942.validator(path, query, header, formData, body, _)
  let scheme = call_21626942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626942.makeUrl(scheme.get, call_21626942.host, call_21626942.base,
                               call_21626942.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626942, uri, valid, _)

proc call*(call_21626943: Call_GetGetIdentityDkimAttributes_21626929;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626944 = newJObject()
  if Identities != nil:
    query_21626944.add "Identities", Identities
  add(query_21626944, "Action", newJString(Action))
  add(query_21626944, "Version", newJString(Version))
  result = call_21626943.call(nil, query_21626944, nil, nil, nil)

var getGetIdentityDkimAttributes* = Call_GetGetIdentityDkimAttributes_21626929(
    name: "getGetIdentityDkimAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_GetGetIdentityDkimAttributes_21626930, base: "/",
    makeUrl: url_GetGetIdentityDkimAttributes_21626931,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityMailFromDomainAttributes_21626978 = ref object of OpenApiRestCall_21625435
proc url_PostGetIdentityMailFromDomainAttributes_21626980(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityMailFromDomainAttributes_21626979(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626981 = query.getOrDefault("Action")
  valid_21626981 = validateParameter(valid_21626981, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_21626981 != nil:
    section.add "Action", valid_21626981
  var valid_21626982 = query.getOrDefault("Version")
  valid_21626982 = validateParameter(valid_21626982, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626982 != nil:
    section.add "Version", valid_21626982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626983 = header.getOrDefault("X-Amz-Date")
  valid_21626983 = validateParameter(valid_21626983, JString, required = false,
                                   default = nil)
  if valid_21626983 != nil:
    section.add "X-Amz-Date", valid_21626983
  var valid_21626984 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626984 = validateParameter(valid_21626984, JString, required = false,
                                   default = nil)
  if valid_21626984 != nil:
    section.add "X-Amz-Security-Token", valid_21626984
  var valid_21626985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626985 = validateParameter(valid_21626985, JString, required = false,
                                   default = nil)
  if valid_21626985 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626985
  var valid_21626986 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626986 = validateParameter(valid_21626986, JString, required = false,
                                   default = nil)
  if valid_21626986 != nil:
    section.add "X-Amz-Algorithm", valid_21626986
  var valid_21626987 = header.getOrDefault("X-Amz-Signature")
  valid_21626987 = validateParameter(valid_21626987, JString, required = false,
                                   default = nil)
  if valid_21626987 != nil:
    section.add "X-Amz-Signature", valid_21626987
  var valid_21626988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626988 = validateParameter(valid_21626988, JString, required = false,
                                   default = nil)
  if valid_21626988 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626988
  var valid_21626989 = header.getOrDefault("X-Amz-Credential")
  valid_21626989 = validateParameter(valid_21626989, JString, required = false,
                                   default = nil)
  if valid_21626989 != nil:
    section.add "X-Amz-Credential", valid_21626989
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_21626990 = formData.getOrDefault("Identities")
  valid_21626990 = validateParameter(valid_21626990, JArray, required = true,
                                   default = nil)
  if valid_21626990 != nil:
    section.add "Identities", valid_21626990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626991: Call_PostGetIdentityMailFromDomainAttributes_21626978;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_21626991.validator(path, query, header, formData, body, _)
  let scheme = call_21626991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626991.makeUrl(scheme.get, call_21626991.host, call_21626991.base,
                               call_21626991.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626991, uri, valid, _)

proc call*(call_21626992: Call_PostGetIdentityMailFromDomainAttributes_21626978;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626993 = newJObject()
  var formData_21626994 = newJObject()
  if Identities != nil:
    formData_21626994.add "Identities", Identities
  add(query_21626993, "Action", newJString(Action))
  add(query_21626993, "Version", newJString(Version))
  result = call_21626992.call(nil, query_21626993, nil, formData_21626994, nil)

var postGetIdentityMailFromDomainAttributes* = Call_PostGetIdentityMailFromDomainAttributes_21626978(
    name: "postGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_PostGetIdentityMailFromDomainAttributes_21626979,
    base: "/", makeUrl: url_PostGetIdentityMailFromDomainAttributes_21626980,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityMailFromDomainAttributes_21626962 = ref object of OpenApiRestCall_21625435
proc url_GetGetIdentityMailFromDomainAttributes_21626964(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityMailFromDomainAttributes_21626963(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_21626965 = query.getOrDefault("Identities")
  valid_21626965 = validateParameter(valid_21626965, JArray, required = true,
                                   default = nil)
  if valid_21626965 != nil:
    section.add "Identities", valid_21626965
  var valid_21626966 = query.getOrDefault("Action")
  valid_21626966 = validateParameter(valid_21626966, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_21626966 != nil:
    section.add "Action", valid_21626966
  var valid_21626967 = query.getOrDefault("Version")
  valid_21626967 = validateParameter(valid_21626967, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21626967 != nil:
    section.add "Version", valid_21626967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626968 = header.getOrDefault("X-Amz-Date")
  valid_21626968 = validateParameter(valid_21626968, JString, required = false,
                                   default = nil)
  if valid_21626968 != nil:
    section.add "X-Amz-Date", valid_21626968
  var valid_21626969 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626969 = validateParameter(valid_21626969, JString, required = false,
                                   default = nil)
  if valid_21626969 != nil:
    section.add "X-Amz-Security-Token", valid_21626969
  var valid_21626970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626970 = validateParameter(valid_21626970, JString, required = false,
                                   default = nil)
  if valid_21626970 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626970
  var valid_21626971 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626971 = validateParameter(valid_21626971, JString, required = false,
                                   default = nil)
  if valid_21626971 != nil:
    section.add "X-Amz-Algorithm", valid_21626971
  var valid_21626972 = header.getOrDefault("X-Amz-Signature")
  valid_21626972 = validateParameter(valid_21626972, JString, required = false,
                                   default = nil)
  if valid_21626972 != nil:
    section.add "X-Amz-Signature", valid_21626972
  var valid_21626973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626973 = validateParameter(valid_21626973, JString, required = false,
                                   default = nil)
  if valid_21626973 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626973
  var valid_21626974 = header.getOrDefault("X-Amz-Credential")
  valid_21626974 = validateParameter(valid_21626974, JString, required = false,
                                   default = nil)
  if valid_21626974 != nil:
    section.add "X-Amz-Credential", valid_21626974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626975: Call_GetGetIdentityMailFromDomainAttributes_21626962;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_21626975.validator(path, query, header, formData, body, _)
  let scheme = call_21626975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626975.makeUrl(scheme.get, call_21626975.host, call_21626975.base,
                               call_21626975.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626975, uri, valid, _)

proc call*(call_21626976: Call_GetGetIdentityMailFromDomainAttributes_21626962;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626977 = newJObject()
  if Identities != nil:
    query_21626977.add "Identities", Identities
  add(query_21626977, "Action", newJString(Action))
  add(query_21626977, "Version", newJString(Version))
  result = call_21626976.call(nil, query_21626977, nil, nil, nil)

var getGetIdentityMailFromDomainAttributes* = Call_GetGetIdentityMailFromDomainAttributes_21626962(
    name: "getGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_GetGetIdentityMailFromDomainAttributes_21626963,
    base: "/", makeUrl: url_GetGetIdentityMailFromDomainAttributes_21626964,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityNotificationAttributes_21627011 = ref object of OpenApiRestCall_21625435
proc url_PostGetIdentityNotificationAttributes_21627013(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityNotificationAttributes_21627012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627014 = query.getOrDefault("Action")
  valid_21627014 = validateParameter(valid_21627014, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_21627014 != nil:
    section.add "Action", valid_21627014
  var valid_21627015 = query.getOrDefault("Version")
  valid_21627015 = validateParameter(valid_21627015, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627015 != nil:
    section.add "Version", valid_21627015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627016 = header.getOrDefault("X-Amz-Date")
  valid_21627016 = validateParameter(valid_21627016, JString, required = false,
                                   default = nil)
  if valid_21627016 != nil:
    section.add "X-Amz-Date", valid_21627016
  var valid_21627017 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627017 = validateParameter(valid_21627017, JString, required = false,
                                   default = nil)
  if valid_21627017 != nil:
    section.add "X-Amz-Security-Token", valid_21627017
  var valid_21627018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627018 = validateParameter(valid_21627018, JString, required = false,
                                   default = nil)
  if valid_21627018 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627018
  var valid_21627019 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627019 = validateParameter(valid_21627019, JString, required = false,
                                   default = nil)
  if valid_21627019 != nil:
    section.add "X-Amz-Algorithm", valid_21627019
  var valid_21627020 = header.getOrDefault("X-Amz-Signature")
  valid_21627020 = validateParameter(valid_21627020, JString, required = false,
                                   default = nil)
  if valid_21627020 != nil:
    section.add "X-Amz-Signature", valid_21627020
  var valid_21627021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627021 = validateParameter(valid_21627021, JString, required = false,
                                   default = nil)
  if valid_21627021 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627021
  var valid_21627022 = header.getOrDefault("X-Amz-Credential")
  valid_21627022 = validateParameter(valid_21627022, JString, required = false,
                                   default = nil)
  if valid_21627022 != nil:
    section.add "X-Amz-Credential", valid_21627022
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_21627023 = formData.getOrDefault("Identities")
  valid_21627023 = validateParameter(valid_21627023, JArray, required = true,
                                   default = nil)
  if valid_21627023 != nil:
    section.add "Identities", valid_21627023
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627024: Call_PostGetIdentityNotificationAttributes_21627011;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627024.validator(path, query, header, formData, body, _)
  let scheme = call_21627024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627024.makeUrl(scheme.get, call_21627024.host, call_21627024.base,
                               call_21627024.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627024, uri, valid, _)

proc call*(call_21627025: Call_PostGetIdentityNotificationAttributes_21627011;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627026 = newJObject()
  var formData_21627027 = newJObject()
  if Identities != nil:
    formData_21627027.add "Identities", Identities
  add(query_21627026, "Action", newJString(Action))
  add(query_21627026, "Version", newJString(Version))
  result = call_21627025.call(nil, query_21627026, nil, formData_21627027, nil)

var postGetIdentityNotificationAttributes* = Call_PostGetIdentityNotificationAttributes_21627011(
    name: "postGetIdentityNotificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_PostGetIdentityNotificationAttributes_21627012, base: "/",
    makeUrl: url_PostGetIdentityNotificationAttributes_21627013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityNotificationAttributes_21626995 = ref object of OpenApiRestCall_21625435
proc url_GetGetIdentityNotificationAttributes_21626997(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityNotificationAttributes_21626996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_21626998 = query.getOrDefault("Identities")
  valid_21626998 = validateParameter(valid_21626998, JArray, required = true,
                                   default = nil)
  if valid_21626998 != nil:
    section.add "Identities", valid_21626998
  var valid_21626999 = query.getOrDefault("Action")
  valid_21626999 = validateParameter(valid_21626999, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_21626999 != nil:
    section.add "Action", valid_21626999
  var valid_21627000 = query.getOrDefault("Version")
  valid_21627000 = validateParameter(valid_21627000, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627000 != nil:
    section.add "Version", valid_21627000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627001 = header.getOrDefault("X-Amz-Date")
  valid_21627001 = validateParameter(valid_21627001, JString, required = false,
                                   default = nil)
  if valid_21627001 != nil:
    section.add "X-Amz-Date", valid_21627001
  var valid_21627002 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627002 = validateParameter(valid_21627002, JString, required = false,
                                   default = nil)
  if valid_21627002 != nil:
    section.add "X-Amz-Security-Token", valid_21627002
  var valid_21627003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627003 = validateParameter(valid_21627003, JString, required = false,
                                   default = nil)
  if valid_21627003 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627003
  var valid_21627004 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627004 = validateParameter(valid_21627004, JString, required = false,
                                   default = nil)
  if valid_21627004 != nil:
    section.add "X-Amz-Algorithm", valid_21627004
  var valid_21627005 = header.getOrDefault("X-Amz-Signature")
  valid_21627005 = validateParameter(valid_21627005, JString, required = false,
                                   default = nil)
  if valid_21627005 != nil:
    section.add "X-Amz-Signature", valid_21627005
  var valid_21627006 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627006 = validateParameter(valid_21627006, JString, required = false,
                                   default = nil)
  if valid_21627006 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627006
  var valid_21627007 = header.getOrDefault("X-Amz-Credential")
  valid_21627007 = validateParameter(valid_21627007, JString, required = false,
                                   default = nil)
  if valid_21627007 != nil:
    section.add "X-Amz-Credential", valid_21627007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627008: Call_GetGetIdentityNotificationAttributes_21626995;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627008.validator(path, query, header, formData, body, _)
  let scheme = call_21627008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627008.makeUrl(scheme.get, call_21627008.host, call_21627008.base,
                               call_21627008.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627008, uri, valid, _)

proc call*(call_21627009: Call_GetGetIdentityNotificationAttributes_21626995;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627010 = newJObject()
  if Identities != nil:
    query_21627010.add "Identities", Identities
  add(query_21627010, "Action", newJString(Action))
  add(query_21627010, "Version", newJString(Version))
  result = call_21627009.call(nil, query_21627010, nil, nil, nil)

var getGetIdentityNotificationAttributes* = Call_GetGetIdentityNotificationAttributes_21626995(
    name: "getGetIdentityNotificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_GetGetIdentityNotificationAttributes_21626996, base: "/",
    makeUrl: url_GetGetIdentityNotificationAttributes_21626997,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityPolicies_21627045 = ref object of OpenApiRestCall_21625435
proc url_PostGetIdentityPolicies_21627047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityPolicies_21627046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627048 = query.getOrDefault("Action")
  valid_21627048 = validateParameter(valid_21627048, JString, required = true,
                                   default = newJString("GetIdentityPolicies"))
  if valid_21627048 != nil:
    section.add "Action", valid_21627048
  var valid_21627049 = query.getOrDefault("Version")
  valid_21627049 = validateParameter(valid_21627049, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627049 != nil:
    section.add "Version", valid_21627049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627050 = header.getOrDefault("X-Amz-Date")
  valid_21627050 = validateParameter(valid_21627050, JString, required = false,
                                   default = nil)
  if valid_21627050 != nil:
    section.add "X-Amz-Date", valid_21627050
  var valid_21627051 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627051 = validateParameter(valid_21627051, JString, required = false,
                                   default = nil)
  if valid_21627051 != nil:
    section.add "X-Amz-Security-Token", valid_21627051
  var valid_21627052 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627052 = validateParameter(valid_21627052, JString, required = false,
                                   default = nil)
  if valid_21627052 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627052
  var valid_21627053 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627053 = validateParameter(valid_21627053, JString, required = false,
                                   default = nil)
  if valid_21627053 != nil:
    section.add "X-Amz-Algorithm", valid_21627053
  var valid_21627054 = header.getOrDefault("X-Amz-Signature")
  valid_21627054 = validateParameter(valid_21627054, JString, required = false,
                                   default = nil)
  if valid_21627054 != nil:
    section.add "X-Amz-Signature", valid_21627054
  var valid_21627055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627055 = validateParameter(valid_21627055, JString, required = false,
                                   default = nil)
  if valid_21627055 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627055
  var valid_21627056 = header.getOrDefault("X-Amz-Credential")
  valid_21627056 = validateParameter(valid_21627056, JString, required = false,
                                   default = nil)
  if valid_21627056 != nil:
    section.add "X-Amz-Credential", valid_21627056
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyNames` field"
  var valid_21627057 = formData.getOrDefault("PolicyNames")
  valid_21627057 = validateParameter(valid_21627057, JArray, required = true,
                                   default = nil)
  if valid_21627057 != nil:
    section.add "PolicyNames", valid_21627057
  var valid_21627058 = formData.getOrDefault("Identity")
  valid_21627058 = validateParameter(valid_21627058, JString, required = true,
                                   default = nil)
  if valid_21627058 != nil:
    section.add "Identity", valid_21627058
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627059: Call_PostGetIdentityPolicies_21627045;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627059.validator(path, query, header, formData, body, _)
  let scheme = call_21627059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627059.makeUrl(scheme.get, call_21627059.host, call_21627059.base,
                               call_21627059.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627059, uri, valid, _)

proc call*(call_21627060: Call_PostGetIdentityPolicies_21627045;
          PolicyNames: JsonNode; Identity: string;
          Action: string = "GetIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627061 = newJObject()
  var formData_21627062 = newJObject()
  if PolicyNames != nil:
    formData_21627062.add "PolicyNames", PolicyNames
  add(formData_21627062, "Identity", newJString(Identity))
  add(query_21627061, "Action", newJString(Action))
  add(query_21627061, "Version", newJString(Version))
  result = call_21627060.call(nil, query_21627061, nil, formData_21627062, nil)

var postGetIdentityPolicies* = Call_PostGetIdentityPolicies_21627045(
    name: "postGetIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_PostGetIdentityPolicies_21627046, base: "/",
    makeUrl: url_PostGetIdentityPolicies_21627047,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityPolicies_21627028 = ref object of OpenApiRestCall_21625435
proc url_GetGetIdentityPolicies_21627030(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityPolicies_21627029(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21627031 = query.getOrDefault("Identity")
  valid_21627031 = validateParameter(valid_21627031, JString, required = true,
                                   default = nil)
  if valid_21627031 != nil:
    section.add "Identity", valid_21627031
  var valid_21627032 = query.getOrDefault("Action")
  valid_21627032 = validateParameter(valid_21627032, JString, required = true,
                                   default = newJString("GetIdentityPolicies"))
  if valid_21627032 != nil:
    section.add "Action", valid_21627032
  var valid_21627033 = query.getOrDefault("PolicyNames")
  valid_21627033 = validateParameter(valid_21627033, JArray, required = true,
                                   default = nil)
  if valid_21627033 != nil:
    section.add "PolicyNames", valid_21627033
  var valid_21627034 = query.getOrDefault("Version")
  valid_21627034 = validateParameter(valid_21627034, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627034 != nil:
    section.add "Version", valid_21627034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627035 = header.getOrDefault("X-Amz-Date")
  valid_21627035 = validateParameter(valid_21627035, JString, required = false,
                                   default = nil)
  if valid_21627035 != nil:
    section.add "X-Amz-Date", valid_21627035
  var valid_21627036 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627036 = validateParameter(valid_21627036, JString, required = false,
                                   default = nil)
  if valid_21627036 != nil:
    section.add "X-Amz-Security-Token", valid_21627036
  var valid_21627037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627037 = validateParameter(valid_21627037, JString, required = false,
                                   default = nil)
  if valid_21627037 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627037
  var valid_21627038 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627038 = validateParameter(valid_21627038, JString, required = false,
                                   default = nil)
  if valid_21627038 != nil:
    section.add "X-Amz-Algorithm", valid_21627038
  var valid_21627039 = header.getOrDefault("X-Amz-Signature")
  valid_21627039 = validateParameter(valid_21627039, JString, required = false,
                                   default = nil)
  if valid_21627039 != nil:
    section.add "X-Amz-Signature", valid_21627039
  var valid_21627040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627040 = validateParameter(valid_21627040, JString, required = false,
                                   default = nil)
  if valid_21627040 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627040
  var valid_21627041 = header.getOrDefault("X-Amz-Credential")
  valid_21627041 = validateParameter(valid_21627041, JString, required = false,
                                   default = nil)
  if valid_21627041 != nil:
    section.add "X-Amz-Credential", valid_21627041
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627042: Call_GetGetIdentityPolicies_21627028;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627042.validator(path, query, header, formData, body, _)
  let scheme = call_21627042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627042.makeUrl(scheme.get, call_21627042.host, call_21627042.base,
                               call_21627042.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627042, uri, valid, _)

proc call*(call_21627043: Call_GetGetIdentityPolicies_21627028; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: string (required)
  var query_21627044 = newJObject()
  add(query_21627044, "Identity", newJString(Identity))
  add(query_21627044, "Action", newJString(Action))
  if PolicyNames != nil:
    query_21627044.add "PolicyNames", PolicyNames
  add(query_21627044, "Version", newJString(Version))
  result = call_21627043.call(nil, query_21627044, nil, nil, nil)

var getGetIdentityPolicies* = Call_GetGetIdentityPolicies_21627028(
    name: "getGetIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_GetGetIdentityPolicies_21627029, base: "/",
    makeUrl: url_GetGetIdentityPolicies_21627030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityVerificationAttributes_21627079 = ref object of OpenApiRestCall_21625435
proc url_PostGetIdentityVerificationAttributes_21627081(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityVerificationAttributes_21627080(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627082 = query.getOrDefault("Action")
  valid_21627082 = validateParameter(valid_21627082, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_21627082 != nil:
    section.add "Action", valid_21627082
  var valid_21627083 = query.getOrDefault("Version")
  valid_21627083 = validateParameter(valid_21627083, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627083 != nil:
    section.add "Version", valid_21627083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627084 = header.getOrDefault("X-Amz-Date")
  valid_21627084 = validateParameter(valid_21627084, JString, required = false,
                                   default = nil)
  if valid_21627084 != nil:
    section.add "X-Amz-Date", valid_21627084
  var valid_21627085 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627085 = validateParameter(valid_21627085, JString, required = false,
                                   default = nil)
  if valid_21627085 != nil:
    section.add "X-Amz-Security-Token", valid_21627085
  var valid_21627086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627086 = validateParameter(valid_21627086, JString, required = false,
                                   default = nil)
  if valid_21627086 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627086
  var valid_21627087 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627087 = validateParameter(valid_21627087, JString, required = false,
                                   default = nil)
  if valid_21627087 != nil:
    section.add "X-Amz-Algorithm", valid_21627087
  var valid_21627088 = header.getOrDefault("X-Amz-Signature")
  valid_21627088 = validateParameter(valid_21627088, JString, required = false,
                                   default = nil)
  if valid_21627088 != nil:
    section.add "X-Amz-Signature", valid_21627088
  var valid_21627089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627089 = validateParameter(valid_21627089, JString, required = false,
                                   default = nil)
  if valid_21627089 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627089
  var valid_21627090 = header.getOrDefault("X-Amz-Credential")
  valid_21627090 = validateParameter(valid_21627090, JString, required = false,
                                   default = nil)
  if valid_21627090 != nil:
    section.add "X-Amz-Credential", valid_21627090
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_21627091 = formData.getOrDefault("Identities")
  valid_21627091 = validateParameter(valid_21627091, JArray, required = true,
                                   default = nil)
  if valid_21627091 != nil:
    section.add "Identities", valid_21627091
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627092: Call_PostGetIdentityVerificationAttributes_21627079;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_21627092.validator(path, query, header, formData, body, _)
  let scheme = call_21627092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627092.makeUrl(scheme.get, call_21627092.host, call_21627092.base,
                               call_21627092.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627092, uri, valid, _)

proc call*(call_21627093: Call_PostGetIdentityVerificationAttributes_21627079;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627094 = newJObject()
  var formData_21627095 = newJObject()
  if Identities != nil:
    formData_21627095.add "Identities", Identities
  add(query_21627094, "Action", newJString(Action))
  add(query_21627094, "Version", newJString(Version))
  result = call_21627093.call(nil, query_21627094, nil, formData_21627095, nil)

var postGetIdentityVerificationAttributes* = Call_PostGetIdentityVerificationAttributes_21627079(
    name: "postGetIdentityVerificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_PostGetIdentityVerificationAttributes_21627080, base: "/",
    makeUrl: url_PostGetIdentityVerificationAttributes_21627081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityVerificationAttributes_21627063 = ref object of OpenApiRestCall_21625435
proc url_GetGetIdentityVerificationAttributes_21627065(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityVerificationAttributes_21627064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_21627066 = query.getOrDefault("Identities")
  valid_21627066 = validateParameter(valid_21627066, JArray, required = true,
                                   default = nil)
  if valid_21627066 != nil:
    section.add "Identities", valid_21627066
  var valid_21627067 = query.getOrDefault("Action")
  valid_21627067 = validateParameter(valid_21627067, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_21627067 != nil:
    section.add "Action", valid_21627067
  var valid_21627068 = query.getOrDefault("Version")
  valid_21627068 = validateParameter(valid_21627068, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627068 != nil:
    section.add "Version", valid_21627068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627069 = header.getOrDefault("X-Amz-Date")
  valid_21627069 = validateParameter(valid_21627069, JString, required = false,
                                   default = nil)
  if valid_21627069 != nil:
    section.add "X-Amz-Date", valid_21627069
  var valid_21627070 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627070 = validateParameter(valid_21627070, JString, required = false,
                                   default = nil)
  if valid_21627070 != nil:
    section.add "X-Amz-Security-Token", valid_21627070
  var valid_21627071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627071 = validateParameter(valid_21627071, JString, required = false,
                                   default = nil)
  if valid_21627071 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627071
  var valid_21627072 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627072 = validateParameter(valid_21627072, JString, required = false,
                                   default = nil)
  if valid_21627072 != nil:
    section.add "X-Amz-Algorithm", valid_21627072
  var valid_21627073 = header.getOrDefault("X-Amz-Signature")
  valid_21627073 = validateParameter(valid_21627073, JString, required = false,
                                   default = nil)
  if valid_21627073 != nil:
    section.add "X-Amz-Signature", valid_21627073
  var valid_21627074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627074 = validateParameter(valid_21627074, JString, required = false,
                                   default = nil)
  if valid_21627074 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627074
  var valid_21627075 = header.getOrDefault("X-Amz-Credential")
  valid_21627075 = validateParameter(valid_21627075, JString, required = false,
                                   default = nil)
  if valid_21627075 != nil:
    section.add "X-Amz-Credential", valid_21627075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627076: Call_GetGetIdentityVerificationAttributes_21627063;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_21627076.validator(path, query, header, formData, body, _)
  let scheme = call_21627076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627076.makeUrl(scheme.get, call_21627076.host, call_21627076.base,
                               call_21627076.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627076, uri, valid, _)

proc call*(call_21627077: Call_GetGetIdentityVerificationAttributes_21627063;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627078 = newJObject()
  if Identities != nil:
    query_21627078.add "Identities", Identities
  add(query_21627078, "Action", newJString(Action))
  add(query_21627078, "Version", newJString(Version))
  result = call_21627077.call(nil, query_21627078, nil, nil, nil)

var getGetIdentityVerificationAttributes* = Call_GetGetIdentityVerificationAttributes_21627063(
    name: "getGetIdentityVerificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_GetGetIdentityVerificationAttributes_21627064, base: "/",
    makeUrl: url_GetGetIdentityVerificationAttributes_21627065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendQuota_21627111 = ref object of OpenApiRestCall_21625435
proc url_PostGetSendQuota_21627113(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSendQuota_21627112(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627114 = query.getOrDefault("Action")
  valid_21627114 = validateParameter(valid_21627114, JString, required = true,
                                   default = newJString("GetSendQuota"))
  if valid_21627114 != nil:
    section.add "Action", valid_21627114
  var valid_21627115 = query.getOrDefault("Version")
  valid_21627115 = validateParameter(valid_21627115, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627115 != nil:
    section.add "Version", valid_21627115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627116 = header.getOrDefault("X-Amz-Date")
  valid_21627116 = validateParameter(valid_21627116, JString, required = false,
                                   default = nil)
  if valid_21627116 != nil:
    section.add "X-Amz-Date", valid_21627116
  var valid_21627117 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627117 = validateParameter(valid_21627117, JString, required = false,
                                   default = nil)
  if valid_21627117 != nil:
    section.add "X-Amz-Security-Token", valid_21627117
  var valid_21627118 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627118 = validateParameter(valid_21627118, JString, required = false,
                                   default = nil)
  if valid_21627118 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627118
  var valid_21627119 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627119 = validateParameter(valid_21627119, JString, required = false,
                                   default = nil)
  if valid_21627119 != nil:
    section.add "X-Amz-Algorithm", valid_21627119
  var valid_21627120 = header.getOrDefault("X-Amz-Signature")
  valid_21627120 = validateParameter(valid_21627120, JString, required = false,
                                   default = nil)
  if valid_21627120 != nil:
    section.add "X-Amz-Signature", valid_21627120
  var valid_21627121 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627121 = validateParameter(valid_21627121, JString, required = false,
                                   default = nil)
  if valid_21627121 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627121
  var valid_21627122 = header.getOrDefault("X-Amz-Credential")
  valid_21627122 = validateParameter(valid_21627122, JString, required = false,
                                   default = nil)
  if valid_21627122 != nil:
    section.add "X-Amz-Credential", valid_21627122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627123: Call_PostGetSendQuota_21627111; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627123.validator(path, query, header, formData, body, _)
  let scheme = call_21627123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627123.makeUrl(scheme.get, call_21627123.host, call_21627123.base,
                               call_21627123.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627123, uri, valid, _)

proc call*(call_21627124: Call_PostGetSendQuota_21627111;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627125 = newJObject()
  add(query_21627125, "Action", newJString(Action))
  add(query_21627125, "Version", newJString(Version))
  result = call_21627124.call(nil, query_21627125, nil, nil, nil)

var postGetSendQuota* = Call_PostGetSendQuota_21627111(name: "postGetSendQuota",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_PostGetSendQuota_21627112,
    base: "/", makeUrl: url_PostGetSendQuota_21627113,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendQuota_21627096 = ref object of OpenApiRestCall_21625435
proc url_GetGetSendQuota_21627098(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSendQuota_21627097(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627099 = query.getOrDefault("Action")
  valid_21627099 = validateParameter(valid_21627099, JString, required = true,
                                   default = newJString("GetSendQuota"))
  if valid_21627099 != nil:
    section.add "Action", valid_21627099
  var valid_21627100 = query.getOrDefault("Version")
  valid_21627100 = validateParameter(valid_21627100, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627100 != nil:
    section.add "Version", valid_21627100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627101 = header.getOrDefault("X-Amz-Date")
  valid_21627101 = validateParameter(valid_21627101, JString, required = false,
                                   default = nil)
  if valid_21627101 != nil:
    section.add "X-Amz-Date", valid_21627101
  var valid_21627102 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627102 = validateParameter(valid_21627102, JString, required = false,
                                   default = nil)
  if valid_21627102 != nil:
    section.add "X-Amz-Security-Token", valid_21627102
  var valid_21627103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627103 = validateParameter(valid_21627103, JString, required = false,
                                   default = nil)
  if valid_21627103 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627103
  var valid_21627104 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627104 = validateParameter(valid_21627104, JString, required = false,
                                   default = nil)
  if valid_21627104 != nil:
    section.add "X-Amz-Algorithm", valid_21627104
  var valid_21627105 = header.getOrDefault("X-Amz-Signature")
  valid_21627105 = validateParameter(valid_21627105, JString, required = false,
                                   default = nil)
  if valid_21627105 != nil:
    section.add "X-Amz-Signature", valid_21627105
  var valid_21627106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627106 = validateParameter(valid_21627106, JString, required = false,
                                   default = nil)
  if valid_21627106 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627106
  var valid_21627107 = header.getOrDefault("X-Amz-Credential")
  valid_21627107 = validateParameter(valid_21627107, JString, required = false,
                                   default = nil)
  if valid_21627107 != nil:
    section.add "X-Amz-Credential", valid_21627107
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627108: Call_GetGetSendQuota_21627096; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627108.validator(path, query, header, formData, body, _)
  let scheme = call_21627108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627108.makeUrl(scheme.get, call_21627108.host, call_21627108.base,
                               call_21627108.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627108, uri, valid, _)

proc call*(call_21627109: Call_GetGetSendQuota_21627096;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627110 = newJObject()
  add(query_21627110, "Action", newJString(Action))
  add(query_21627110, "Version", newJString(Version))
  result = call_21627109.call(nil, query_21627110, nil, nil, nil)

var getGetSendQuota* = Call_GetGetSendQuota_21627096(name: "getGetSendQuota",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_GetGetSendQuota_21627097,
    base: "/", makeUrl: url_GetGetSendQuota_21627098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendStatistics_21627141 = ref object of OpenApiRestCall_21625435
proc url_PostGetSendStatistics_21627143(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSendStatistics_21627142(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627144 = query.getOrDefault("Action")
  valid_21627144 = validateParameter(valid_21627144, JString, required = true,
                                   default = newJString("GetSendStatistics"))
  if valid_21627144 != nil:
    section.add "Action", valid_21627144
  var valid_21627145 = query.getOrDefault("Version")
  valid_21627145 = validateParameter(valid_21627145, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627145 != nil:
    section.add "Version", valid_21627145
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627146 = header.getOrDefault("X-Amz-Date")
  valid_21627146 = validateParameter(valid_21627146, JString, required = false,
                                   default = nil)
  if valid_21627146 != nil:
    section.add "X-Amz-Date", valid_21627146
  var valid_21627147 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627147 = validateParameter(valid_21627147, JString, required = false,
                                   default = nil)
  if valid_21627147 != nil:
    section.add "X-Amz-Security-Token", valid_21627147
  var valid_21627148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627148 = validateParameter(valid_21627148, JString, required = false,
                                   default = nil)
  if valid_21627148 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627148
  var valid_21627149 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627149 = validateParameter(valid_21627149, JString, required = false,
                                   default = nil)
  if valid_21627149 != nil:
    section.add "X-Amz-Algorithm", valid_21627149
  var valid_21627150 = header.getOrDefault("X-Amz-Signature")
  valid_21627150 = validateParameter(valid_21627150, JString, required = false,
                                   default = nil)
  if valid_21627150 != nil:
    section.add "X-Amz-Signature", valid_21627150
  var valid_21627151 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627151 = validateParameter(valid_21627151, JString, required = false,
                                   default = nil)
  if valid_21627151 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627151
  var valid_21627152 = header.getOrDefault("X-Amz-Credential")
  valid_21627152 = validateParameter(valid_21627152, JString, required = false,
                                   default = nil)
  if valid_21627152 != nil:
    section.add "X-Amz-Credential", valid_21627152
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627153: Call_PostGetSendStatistics_21627141;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627153.validator(path, query, header, formData, body, _)
  let scheme = call_21627153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627153.makeUrl(scheme.get, call_21627153.host, call_21627153.base,
                               call_21627153.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627153, uri, valid, _)

proc call*(call_21627154: Call_PostGetSendStatistics_21627141;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627155 = newJObject()
  add(query_21627155, "Action", newJString(Action))
  add(query_21627155, "Version", newJString(Version))
  result = call_21627154.call(nil, query_21627155, nil, nil, nil)

var postGetSendStatistics* = Call_PostGetSendStatistics_21627141(
    name: "postGetSendStatistics", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_PostGetSendStatistics_21627142, base: "/",
    makeUrl: url_PostGetSendStatistics_21627143,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendStatistics_21627126 = ref object of OpenApiRestCall_21625435
proc url_GetGetSendStatistics_21627128(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSendStatistics_21627127(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627129 = query.getOrDefault("Action")
  valid_21627129 = validateParameter(valid_21627129, JString, required = true,
                                   default = newJString("GetSendStatistics"))
  if valid_21627129 != nil:
    section.add "Action", valid_21627129
  var valid_21627130 = query.getOrDefault("Version")
  valid_21627130 = validateParameter(valid_21627130, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627130 != nil:
    section.add "Version", valid_21627130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627131 = header.getOrDefault("X-Amz-Date")
  valid_21627131 = validateParameter(valid_21627131, JString, required = false,
                                   default = nil)
  if valid_21627131 != nil:
    section.add "X-Amz-Date", valid_21627131
  var valid_21627132 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627132 = validateParameter(valid_21627132, JString, required = false,
                                   default = nil)
  if valid_21627132 != nil:
    section.add "X-Amz-Security-Token", valid_21627132
  var valid_21627133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627133 = validateParameter(valid_21627133, JString, required = false,
                                   default = nil)
  if valid_21627133 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627133
  var valid_21627134 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627134 = validateParameter(valid_21627134, JString, required = false,
                                   default = nil)
  if valid_21627134 != nil:
    section.add "X-Amz-Algorithm", valid_21627134
  var valid_21627135 = header.getOrDefault("X-Amz-Signature")
  valid_21627135 = validateParameter(valid_21627135, JString, required = false,
                                   default = nil)
  if valid_21627135 != nil:
    section.add "X-Amz-Signature", valid_21627135
  var valid_21627136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627136 = validateParameter(valid_21627136, JString, required = false,
                                   default = nil)
  if valid_21627136 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627136
  var valid_21627137 = header.getOrDefault("X-Amz-Credential")
  valid_21627137 = validateParameter(valid_21627137, JString, required = false,
                                   default = nil)
  if valid_21627137 != nil:
    section.add "X-Amz-Credential", valid_21627137
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627138: Call_GetGetSendStatistics_21627126; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627138.validator(path, query, header, formData, body, _)
  let scheme = call_21627138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627138.makeUrl(scheme.get, call_21627138.host, call_21627138.base,
                               call_21627138.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627138, uri, valid, _)

proc call*(call_21627139: Call_GetGetSendStatistics_21627126;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627140 = newJObject()
  add(query_21627140, "Action", newJString(Action))
  add(query_21627140, "Version", newJString(Version))
  result = call_21627139.call(nil, query_21627140, nil, nil, nil)

var getGetSendStatistics* = Call_GetGetSendStatistics_21627126(
    name: "getGetSendStatistics", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_GetGetSendStatistics_21627127, base: "/",
    makeUrl: url_GetGetSendStatistics_21627128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetTemplate_21627172 = ref object of OpenApiRestCall_21625435
proc url_PostGetTemplate_21627174(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetTemplate_21627173(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627175 = query.getOrDefault("Action")
  valid_21627175 = validateParameter(valid_21627175, JString, required = true,
                                   default = newJString("GetTemplate"))
  if valid_21627175 != nil:
    section.add "Action", valid_21627175
  var valid_21627176 = query.getOrDefault("Version")
  valid_21627176 = validateParameter(valid_21627176, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627176 != nil:
    section.add "Version", valid_21627176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627177 = header.getOrDefault("X-Amz-Date")
  valid_21627177 = validateParameter(valid_21627177, JString, required = false,
                                   default = nil)
  if valid_21627177 != nil:
    section.add "X-Amz-Date", valid_21627177
  var valid_21627178 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627178 = validateParameter(valid_21627178, JString, required = false,
                                   default = nil)
  if valid_21627178 != nil:
    section.add "X-Amz-Security-Token", valid_21627178
  var valid_21627179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627179 = validateParameter(valid_21627179, JString, required = false,
                                   default = nil)
  if valid_21627179 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627179
  var valid_21627180 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627180 = validateParameter(valid_21627180, JString, required = false,
                                   default = nil)
  if valid_21627180 != nil:
    section.add "X-Amz-Algorithm", valid_21627180
  var valid_21627181 = header.getOrDefault("X-Amz-Signature")
  valid_21627181 = validateParameter(valid_21627181, JString, required = false,
                                   default = nil)
  if valid_21627181 != nil:
    section.add "X-Amz-Signature", valid_21627181
  var valid_21627182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627182 = validateParameter(valid_21627182, JString, required = false,
                                   default = nil)
  if valid_21627182 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627182
  var valid_21627183 = header.getOrDefault("X-Amz-Credential")
  valid_21627183 = validateParameter(valid_21627183, JString, required = false,
                                   default = nil)
  if valid_21627183 != nil:
    section.add "X-Amz-Credential", valid_21627183
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_21627184 = formData.getOrDefault("TemplateName")
  valid_21627184 = validateParameter(valid_21627184, JString, required = true,
                                   default = nil)
  if valid_21627184 != nil:
    section.add "TemplateName", valid_21627184
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627185: Call_PostGetTemplate_21627172; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627185.validator(path, query, header, formData, body, _)
  let scheme = call_21627185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627185.makeUrl(scheme.get, call_21627185.host, call_21627185.base,
                               call_21627185.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627185, uri, valid, _)

proc call*(call_21627186: Call_PostGetTemplate_21627172; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_21627187 = newJObject()
  var formData_21627188 = newJObject()
  add(query_21627187, "Action", newJString(Action))
  add(formData_21627188, "TemplateName", newJString(TemplateName))
  add(query_21627187, "Version", newJString(Version))
  result = call_21627186.call(nil, query_21627187, nil, formData_21627188, nil)

var postGetTemplate* = Call_PostGetTemplate_21627172(name: "postGetTemplate",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_PostGetTemplate_21627173,
    base: "/", makeUrl: url_PostGetTemplate_21627174,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetTemplate_21627156 = ref object of OpenApiRestCall_21625435
proc url_GetGetTemplate_21627158(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetTemplate_21627157(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627159 = query.getOrDefault("Action")
  valid_21627159 = validateParameter(valid_21627159, JString, required = true,
                                   default = newJString("GetTemplate"))
  if valid_21627159 != nil:
    section.add "Action", valid_21627159
  var valid_21627160 = query.getOrDefault("TemplateName")
  valid_21627160 = validateParameter(valid_21627160, JString, required = true,
                                   default = nil)
  if valid_21627160 != nil:
    section.add "TemplateName", valid_21627160
  var valid_21627161 = query.getOrDefault("Version")
  valid_21627161 = validateParameter(valid_21627161, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627161 != nil:
    section.add "Version", valid_21627161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627162 = header.getOrDefault("X-Amz-Date")
  valid_21627162 = validateParameter(valid_21627162, JString, required = false,
                                   default = nil)
  if valid_21627162 != nil:
    section.add "X-Amz-Date", valid_21627162
  var valid_21627163 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627163 = validateParameter(valid_21627163, JString, required = false,
                                   default = nil)
  if valid_21627163 != nil:
    section.add "X-Amz-Security-Token", valid_21627163
  var valid_21627164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627164 = validateParameter(valid_21627164, JString, required = false,
                                   default = nil)
  if valid_21627164 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627164
  var valid_21627165 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627165 = validateParameter(valid_21627165, JString, required = false,
                                   default = nil)
  if valid_21627165 != nil:
    section.add "X-Amz-Algorithm", valid_21627165
  var valid_21627166 = header.getOrDefault("X-Amz-Signature")
  valid_21627166 = validateParameter(valid_21627166, JString, required = false,
                                   default = nil)
  if valid_21627166 != nil:
    section.add "X-Amz-Signature", valid_21627166
  var valid_21627167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627167 = validateParameter(valid_21627167, JString, required = false,
                                   default = nil)
  if valid_21627167 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627167
  var valid_21627168 = header.getOrDefault("X-Amz-Credential")
  valid_21627168 = validateParameter(valid_21627168, JString, required = false,
                                   default = nil)
  if valid_21627168 != nil:
    section.add "X-Amz-Credential", valid_21627168
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627169: Call_GetGetTemplate_21627156; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627169.validator(path, query, header, formData, body, _)
  let scheme = call_21627169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627169.makeUrl(scheme.get, call_21627169.host, call_21627169.base,
                               call_21627169.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627169, uri, valid, _)

proc call*(call_21627170: Call_GetGetTemplate_21627156; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_21627171 = newJObject()
  add(query_21627171, "Action", newJString(Action))
  add(query_21627171, "TemplateName", newJString(TemplateName))
  add(query_21627171, "Version", newJString(Version))
  result = call_21627170.call(nil, query_21627171, nil, nil, nil)

var getGetTemplate* = Call_GetGetTemplate_21627156(name: "getGetTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_GetGetTemplate_21627157,
    base: "/", makeUrl: url_GetGetTemplate_21627158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListConfigurationSets_21627206 = ref object of OpenApiRestCall_21625435
proc url_PostListConfigurationSets_21627208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListConfigurationSets_21627207(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627209 = query.getOrDefault("Action")
  valid_21627209 = validateParameter(valid_21627209, JString, required = true, default = newJString(
      "ListConfigurationSets"))
  if valid_21627209 != nil:
    section.add "Action", valid_21627209
  var valid_21627210 = query.getOrDefault("Version")
  valid_21627210 = validateParameter(valid_21627210, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627210 != nil:
    section.add "Version", valid_21627210
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627211 = header.getOrDefault("X-Amz-Date")
  valid_21627211 = validateParameter(valid_21627211, JString, required = false,
                                   default = nil)
  if valid_21627211 != nil:
    section.add "X-Amz-Date", valid_21627211
  var valid_21627212 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627212 = validateParameter(valid_21627212, JString, required = false,
                                   default = nil)
  if valid_21627212 != nil:
    section.add "X-Amz-Security-Token", valid_21627212
  var valid_21627213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627213 = validateParameter(valid_21627213, JString, required = false,
                                   default = nil)
  if valid_21627213 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627213
  var valid_21627214 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627214 = validateParameter(valid_21627214, JString, required = false,
                                   default = nil)
  if valid_21627214 != nil:
    section.add "X-Amz-Algorithm", valid_21627214
  var valid_21627215 = header.getOrDefault("X-Amz-Signature")
  valid_21627215 = validateParameter(valid_21627215, JString, required = false,
                                   default = nil)
  if valid_21627215 != nil:
    section.add "X-Amz-Signature", valid_21627215
  var valid_21627216 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627216 = validateParameter(valid_21627216, JString, required = false,
                                   default = nil)
  if valid_21627216 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627216
  var valid_21627217 = header.getOrDefault("X-Amz-Credential")
  valid_21627217 = validateParameter(valid_21627217, JString, required = false,
                                   default = nil)
  if valid_21627217 != nil:
    section.add "X-Amz-Credential", valid_21627217
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  section = newJObject()
  var valid_21627218 = formData.getOrDefault("NextToken")
  valid_21627218 = validateParameter(valid_21627218, JString, required = false,
                                   default = nil)
  if valid_21627218 != nil:
    section.add "NextToken", valid_21627218
  var valid_21627219 = formData.getOrDefault("MaxItems")
  valid_21627219 = validateParameter(valid_21627219, JInt, required = false,
                                   default = nil)
  if valid_21627219 != nil:
    section.add "MaxItems", valid_21627219
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627220: Call_PostListConfigurationSets_21627206;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_21627220.validator(path, query, header, formData, body, _)
  let scheme = call_21627220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627220.makeUrl(scheme.get, call_21627220.host, call_21627220.base,
                               call_21627220.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627220, uri, valid, _)

proc call*(call_21627221: Call_PostListConfigurationSets_21627206;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_21627222 = newJObject()
  var formData_21627223 = newJObject()
  add(formData_21627223, "NextToken", newJString(NextToken))
  add(query_21627222, "Action", newJString(Action))
  add(formData_21627223, "MaxItems", newJInt(MaxItems))
  add(query_21627222, "Version", newJString(Version))
  result = call_21627221.call(nil, query_21627222, nil, formData_21627223, nil)

var postListConfigurationSets* = Call_PostListConfigurationSets_21627206(
    name: "postListConfigurationSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_PostListConfigurationSets_21627207, base: "/",
    makeUrl: url_PostListConfigurationSets_21627208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListConfigurationSets_21627189 = ref object of OpenApiRestCall_21625435
proc url_GetListConfigurationSets_21627191(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListConfigurationSets_21627190(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627192 = query.getOrDefault("NextToken")
  valid_21627192 = validateParameter(valid_21627192, JString, required = false,
                                   default = nil)
  if valid_21627192 != nil:
    section.add "NextToken", valid_21627192
  var valid_21627193 = query.getOrDefault("Action")
  valid_21627193 = validateParameter(valid_21627193, JString, required = true, default = newJString(
      "ListConfigurationSets"))
  if valid_21627193 != nil:
    section.add "Action", valid_21627193
  var valid_21627194 = query.getOrDefault("MaxItems")
  valid_21627194 = validateParameter(valid_21627194, JInt, required = false,
                                   default = nil)
  if valid_21627194 != nil:
    section.add "MaxItems", valid_21627194
  var valid_21627195 = query.getOrDefault("Version")
  valid_21627195 = validateParameter(valid_21627195, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627195 != nil:
    section.add "Version", valid_21627195
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627196 = header.getOrDefault("X-Amz-Date")
  valid_21627196 = validateParameter(valid_21627196, JString, required = false,
                                   default = nil)
  if valid_21627196 != nil:
    section.add "X-Amz-Date", valid_21627196
  var valid_21627197 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627197 = validateParameter(valid_21627197, JString, required = false,
                                   default = nil)
  if valid_21627197 != nil:
    section.add "X-Amz-Security-Token", valid_21627197
  var valid_21627198 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627198 = validateParameter(valid_21627198, JString, required = false,
                                   default = nil)
  if valid_21627198 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627198
  var valid_21627199 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627199 = validateParameter(valid_21627199, JString, required = false,
                                   default = nil)
  if valid_21627199 != nil:
    section.add "X-Amz-Algorithm", valid_21627199
  var valid_21627200 = header.getOrDefault("X-Amz-Signature")
  valid_21627200 = validateParameter(valid_21627200, JString, required = false,
                                   default = nil)
  if valid_21627200 != nil:
    section.add "X-Amz-Signature", valid_21627200
  var valid_21627201 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627201 = validateParameter(valid_21627201, JString, required = false,
                                   default = nil)
  if valid_21627201 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627201
  var valid_21627202 = header.getOrDefault("X-Amz-Credential")
  valid_21627202 = validateParameter(valid_21627202, JString, required = false,
                                   default = nil)
  if valid_21627202 != nil:
    section.add "X-Amz-Credential", valid_21627202
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627203: Call_GetListConfigurationSets_21627189;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_21627203.validator(path, query, header, formData, body, _)
  let scheme = call_21627203.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627203.makeUrl(scheme.get, call_21627203.host, call_21627203.base,
                               call_21627203.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627203, uri, valid, _)

proc call*(call_21627204: Call_GetListConfigurationSets_21627189;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_21627205 = newJObject()
  add(query_21627205, "NextToken", newJString(NextToken))
  add(query_21627205, "Action", newJString(Action))
  add(query_21627205, "MaxItems", newJInt(MaxItems))
  add(query_21627205, "Version", newJString(Version))
  result = call_21627204.call(nil, query_21627205, nil, nil, nil)

var getListConfigurationSets* = Call_GetListConfigurationSets_21627189(
    name: "getListConfigurationSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_GetListConfigurationSets_21627190, base: "/",
    makeUrl: url_GetListConfigurationSets_21627191,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListCustomVerificationEmailTemplates_21627241 = ref object of OpenApiRestCall_21625435
proc url_PostListCustomVerificationEmailTemplates_21627243(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListCustomVerificationEmailTemplates_21627242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627244 = query.getOrDefault("Action")
  valid_21627244 = validateParameter(valid_21627244, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_21627244 != nil:
    section.add "Action", valid_21627244
  var valid_21627245 = query.getOrDefault("Version")
  valid_21627245 = validateParameter(valid_21627245, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627245 != nil:
    section.add "Version", valid_21627245
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627246 = header.getOrDefault("X-Amz-Date")
  valid_21627246 = validateParameter(valid_21627246, JString, required = false,
                                   default = nil)
  if valid_21627246 != nil:
    section.add "X-Amz-Date", valid_21627246
  var valid_21627247 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627247 = validateParameter(valid_21627247, JString, required = false,
                                   default = nil)
  if valid_21627247 != nil:
    section.add "X-Amz-Security-Token", valid_21627247
  var valid_21627248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627248 = validateParameter(valid_21627248, JString, required = false,
                                   default = nil)
  if valid_21627248 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627248
  var valid_21627249 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627249 = validateParameter(valid_21627249, JString, required = false,
                                   default = nil)
  if valid_21627249 != nil:
    section.add "X-Amz-Algorithm", valid_21627249
  var valid_21627250 = header.getOrDefault("X-Amz-Signature")
  valid_21627250 = validateParameter(valid_21627250, JString, required = false,
                                   default = nil)
  if valid_21627250 != nil:
    section.add "X-Amz-Signature", valid_21627250
  var valid_21627251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627251 = validateParameter(valid_21627251, JString, required = false,
                                   default = nil)
  if valid_21627251 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627251
  var valid_21627252 = header.getOrDefault("X-Amz-Credential")
  valid_21627252 = validateParameter(valid_21627252, JString, required = false,
                                   default = nil)
  if valid_21627252 != nil:
    section.add "X-Amz-Credential", valid_21627252
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_21627253 = formData.getOrDefault("NextToken")
  valid_21627253 = validateParameter(valid_21627253, JString, required = false,
                                   default = nil)
  if valid_21627253 != nil:
    section.add "NextToken", valid_21627253
  var valid_21627254 = formData.getOrDefault("MaxResults")
  valid_21627254 = validateParameter(valid_21627254, JInt, required = false,
                                   default = nil)
  if valid_21627254 != nil:
    section.add "MaxResults", valid_21627254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627255: Call_PostListCustomVerificationEmailTemplates_21627241;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627255.validator(path, query, header, formData, body, _)
  let scheme = call_21627255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627255.makeUrl(scheme.get, call_21627255.host, call_21627255.base,
                               call_21627255.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627255, uri, valid, _)

proc call*(call_21627256: Call_PostListCustomVerificationEmailTemplates_21627241;
          NextToken: string = ""; MaxResults: int = 0;
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## postListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627257 = newJObject()
  var formData_21627258 = newJObject()
  add(formData_21627258, "NextToken", newJString(NextToken))
  add(formData_21627258, "MaxResults", newJInt(MaxResults))
  add(query_21627257, "Action", newJString(Action))
  add(query_21627257, "Version", newJString(Version))
  result = call_21627256.call(nil, query_21627257, nil, formData_21627258, nil)

var postListCustomVerificationEmailTemplates* = Call_PostListCustomVerificationEmailTemplates_21627241(
    name: "postListCustomVerificationEmailTemplates", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_PostListCustomVerificationEmailTemplates_21627242,
    base: "/", makeUrl: url_PostListCustomVerificationEmailTemplates_21627243,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListCustomVerificationEmailTemplates_21627224 = ref object of OpenApiRestCall_21625435
proc url_GetListCustomVerificationEmailTemplates_21627226(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListCustomVerificationEmailTemplates_21627225(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_21627227 = query.getOrDefault("NextToken")
  valid_21627227 = validateParameter(valid_21627227, JString, required = false,
                                   default = nil)
  if valid_21627227 != nil:
    section.add "NextToken", valid_21627227
  var valid_21627228 = query.getOrDefault("Action")
  valid_21627228 = validateParameter(valid_21627228, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_21627228 != nil:
    section.add "Action", valid_21627228
  var valid_21627229 = query.getOrDefault("Version")
  valid_21627229 = validateParameter(valid_21627229, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627229 != nil:
    section.add "Version", valid_21627229
  var valid_21627230 = query.getOrDefault("MaxResults")
  valid_21627230 = validateParameter(valid_21627230, JInt, required = false,
                                   default = nil)
  if valid_21627230 != nil:
    section.add "MaxResults", valid_21627230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627231 = header.getOrDefault("X-Amz-Date")
  valid_21627231 = validateParameter(valid_21627231, JString, required = false,
                                   default = nil)
  if valid_21627231 != nil:
    section.add "X-Amz-Date", valid_21627231
  var valid_21627232 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627232 = validateParameter(valid_21627232, JString, required = false,
                                   default = nil)
  if valid_21627232 != nil:
    section.add "X-Amz-Security-Token", valid_21627232
  var valid_21627233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627233 = validateParameter(valid_21627233, JString, required = false,
                                   default = nil)
  if valid_21627233 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627233
  var valid_21627234 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627234 = validateParameter(valid_21627234, JString, required = false,
                                   default = nil)
  if valid_21627234 != nil:
    section.add "X-Amz-Algorithm", valid_21627234
  var valid_21627235 = header.getOrDefault("X-Amz-Signature")
  valid_21627235 = validateParameter(valid_21627235, JString, required = false,
                                   default = nil)
  if valid_21627235 != nil:
    section.add "X-Amz-Signature", valid_21627235
  var valid_21627236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627236 = validateParameter(valid_21627236, JString, required = false,
                                   default = nil)
  if valid_21627236 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627236
  var valid_21627237 = header.getOrDefault("X-Amz-Credential")
  valid_21627237 = validateParameter(valid_21627237, JString, required = false,
                                   default = nil)
  if valid_21627237 != nil:
    section.add "X-Amz-Credential", valid_21627237
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627238: Call_GetListCustomVerificationEmailTemplates_21627224;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627238.validator(path, query, header, formData, body, _)
  let scheme = call_21627238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627238.makeUrl(scheme.get, call_21627238.host, call_21627238.base,
                               call_21627238.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627238, uri, valid, _)

proc call*(call_21627239: Call_GetListCustomVerificationEmailTemplates_21627224;
          NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"; MaxResults: int = 0): Recallable =
  ## getListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  var query_21627240 = newJObject()
  add(query_21627240, "NextToken", newJString(NextToken))
  add(query_21627240, "Action", newJString(Action))
  add(query_21627240, "Version", newJString(Version))
  add(query_21627240, "MaxResults", newJInt(MaxResults))
  result = call_21627239.call(nil, query_21627240, nil, nil, nil)

var getListCustomVerificationEmailTemplates* = Call_GetListCustomVerificationEmailTemplates_21627224(
    name: "getListCustomVerificationEmailTemplates", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_GetListCustomVerificationEmailTemplates_21627225,
    base: "/", makeUrl: url_GetListCustomVerificationEmailTemplates_21627226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentities_21627277 = ref object of OpenApiRestCall_21625435
proc url_PostListIdentities_21627279(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListIdentities_21627278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627280 = query.getOrDefault("Action")
  valid_21627280 = validateParameter(valid_21627280, JString, required = true,
                                   default = newJString("ListIdentities"))
  if valid_21627280 != nil:
    section.add "Action", valid_21627280
  var valid_21627281 = query.getOrDefault("Version")
  valid_21627281 = validateParameter(valid_21627281, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627281 != nil:
    section.add "Version", valid_21627281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627282 = header.getOrDefault("X-Amz-Date")
  valid_21627282 = validateParameter(valid_21627282, JString, required = false,
                                   default = nil)
  if valid_21627282 != nil:
    section.add "X-Amz-Date", valid_21627282
  var valid_21627283 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627283 = validateParameter(valid_21627283, JString, required = false,
                                   default = nil)
  if valid_21627283 != nil:
    section.add "X-Amz-Security-Token", valid_21627283
  var valid_21627284 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627284 = validateParameter(valid_21627284, JString, required = false,
                                   default = nil)
  if valid_21627284 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627284
  var valid_21627285 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627285 = validateParameter(valid_21627285, JString, required = false,
                                   default = nil)
  if valid_21627285 != nil:
    section.add "X-Amz-Algorithm", valid_21627285
  var valid_21627286 = header.getOrDefault("X-Amz-Signature")
  valid_21627286 = validateParameter(valid_21627286, JString, required = false,
                                   default = nil)
  if valid_21627286 != nil:
    section.add "X-Amz-Signature", valid_21627286
  var valid_21627287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627287 = validateParameter(valid_21627287, JString, required = false,
                                   default = nil)
  if valid_21627287 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627287
  var valid_21627288 = header.getOrDefault("X-Amz-Credential")
  valid_21627288 = validateParameter(valid_21627288, JString, required = false,
                                   default = nil)
  if valid_21627288 != nil:
    section.add "X-Amz-Credential", valid_21627288
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  section = newJObject()
  var valid_21627289 = formData.getOrDefault("NextToken")
  valid_21627289 = validateParameter(valid_21627289, JString, required = false,
                                   default = nil)
  if valid_21627289 != nil:
    section.add "NextToken", valid_21627289
  var valid_21627290 = formData.getOrDefault("IdentityType")
  valid_21627290 = validateParameter(valid_21627290, JString, required = false,
                                   default = newJString("EmailAddress"))
  if valid_21627290 != nil:
    section.add "IdentityType", valid_21627290
  var valid_21627291 = formData.getOrDefault("MaxItems")
  valid_21627291 = validateParameter(valid_21627291, JInt, required = false,
                                   default = nil)
  if valid_21627291 != nil:
    section.add "MaxItems", valid_21627291
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627292: Call_PostListIdentities_21627277; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627292.validator(path, query, header, formData, body, _)
  let scheme = call_21627292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627292.makeUrl(scheme.get, call_21627292.host, call_21627292.base,
                               call_21627292.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627292, uri, valid, _)

proc call*(call_21627293: Call_PostListIdentities_21627277; NextToken: string = "";
          IdentityType: string = "EmailAddress"; Action: string = "ListIdentities";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_21627294 = newJObject()
  var formData_21627295 = newJObject()
  add(formData_21627295, "NextToken", newJString(NextToken))
  add(formData_21627295, "IdentityType", newJString(IdentityType))
  add(query_21627294, "Action", newJString(Action))
  add(formData_21627295, "MaxItems", newJInt(MaxItems))
  add(query_21627294, "Version", newJString(Version))
  result = call_21627293.call(nil, query_21627294, nil, formData_21627295, nil)

var postListIdentities* = Call_PostListIdentities_21627277(
    name: "postListIdentities", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentities",
    validator: validate_PostListIdentities_21627278, base: "/",
    makeUrl: url_PostListIdentities_21627279, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentities_21627259 = ref object of OpenApiRestCall_21625435
proc url_GetListIdentities_21627261(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListIdentities_21627260(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   Action: JString (required)
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627262 = query.getOrDefault("NextToken")
  valid_21627262 = validateParameter(valid_21627262, JString, required = false,
                                   default = nil)
  if valid_21627262 != nil:
    section.add "NextToken", valid_21627262
  var valid_21627263 = query.getOrDefault("Action")
  valid_21627263 = validateParameter(valid_21627263, JString, required = true,
                                   default = newJString("ListIdentities"))
  if valid_21627263 != nil:
    section.add "Action", valid_21627263
  var valid_21627264 = query.getOrDefault("IdentityType")
  valid_21627264 = validateParameter(valid_21627264, JString, required = false,
                                   default = newJString("EmailAddress"))
  if valid_21627264 != nil:
    section.add "IdentityType", valid_21627264
  var valid_21627265 = query.getOrDefault("MaxItems")
  valid_21627265 = validateParameter(valid_21627265, JInt, required = false,
                                   default = nil)
  if valid_21627265 != nil:
    section.add "MaxItems", valid_21627265
  var valid_21627266 = query.getOrDefault("Version")
  valid_21627266 = validateParameter(valid_21627266, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627266 != nil:
    section.add "Version", valid_21627266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627267 = header.getOrDefault("X-Amz-Date")
  valid_21627267 = validateParameter(valid_21627267, JString, required = false,
                                   default = nil)
  if valid_21627267 != nil:
    section.add "X-Amz-Date", valid_21627267
  var valid_21627268 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627268 = validateParameter(valid_21627268, JString, required = false,
                                   default = nil)
  if valid_21627268 != nil:
    section.add "X-Amz-Security-Token", valid_21627268
  var valid_21627269 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627269 = validateParameter(valid_21627269, JString, required = false,
                                   default = nil)
  if valid_21627269 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627269
  var valid_21627270 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627270 = validateParameter(valid_21627270, JString, required = false,
                                   default = nil)
  if valid_21627270 != nil:
    section.add "X-Amz-Algorithm", valid_21627270
  var valid_21627271 = header.getOrDefault("X-Amz-Signature")
  valid_21627271 = validateParameter(valid_21627271, JString, required = false,
                                   default = nil)
  if valid_21627271 != nil:
    section.add "X-Amz-Signature", valid_21627271
  var valid_21627272 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627272 = validateParameter(valid_21627272, JString, required = false,
                                   default = nil)
  if valid_21627272 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627272
  var valid_21627273 = header.getOrDefault("X-Amz-Credential")
  valid_21627273 = validateParameter(valid_21627273, JString, required = false,
                                   default = nil)
  if valid_21627273 != nil:
    section.add "X-Amz-Credential", valid_21627273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627274: Call_GetListIdentities_21627259; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627274.validator(path, query, header, formData, body, _)
  let scheme = call_21627274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627274.makeUrl(scheme.get, call_21627274.host, call_21627274.base,
                               call_21627274.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627274, uri, valid, _)

proc call*(call_21627275: Call_GetListIdentities_21627259; NextToken: string = "";
          Action: string = "ListIdentities"; IdentityType: string = "EmailAddress";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   Action: string (required)
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_21627276 = newJObject()
  add(query_21627276, "NextToken", newJString(NextToken))
  add(query_21627276, "Action", newJString(Action))
  add(query_21627276, "IdentityType", newJString(IdentityType))
  add(query_21627276, "MaxItems", newJInt(MaxItems))
  add(query_21627276, "Version", newJString(Version))
  result = call_21627275.call(nil, query_21627276, nil, nil, nil)

var getListIdentities* = Call_GetListIdentities_21627259(name: "getListIdentities",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListIdentities", validator: validate_GetListIdentities_21627260,
    base: "/", makeUrl: url_GetListIdentities_21627261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentityPolicies_21627312 = ref object of OpenApiRestCall_21625435
proc url_PostListIdentityPolicies_21627314(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListIdentityPolicies_21627313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627315 = query.getOrDefault("Action")
  valid_21627315 = validateParameter(valid_21627315, JString, required = true,
                                   default = newJString("ListIdentityPolicies"))
  if valid_21627315 != nil:
    section.add "Action", valid_21627315
  var valid_21627316 = query.getOrDefault("Version")
  valid_21627316 = validateParameter(valid_21627316, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627316 != nil:
    section.add "Version", valid_21627316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627317 = header.getOrDefault("X-Amz-Date")
  valid_21627317 = validateParameter(valid_21627317, JString, required = false,
                                   default = nil)
  if valid_21627317 != nil:
    section.add "X-Amz-Date", valid_21627317
  var valid_21627318 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627318 = validateParameter(valid_21627318, JString, required = false,
                                   default = nil)
  if valid_21627318 != nil:
    section.add "X-Amz-Security-Token", valid_21627318
  var valid_21627319 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627319 = validateParameter(valid_21627319, JString, required = false,
                                   default = nil)
  if valid_21627319 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627319
  var valid_21627320 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627320 = validateParameter(valid_21627320, JString, required = false,
                                   default = nil)
  if valid_21627320 != nil:
    section.add "X-Amz-Algorithm", valid_21627320
  var valid_21627321 = header.getOrDefault("X-Amz-Signature")
  valid_21627321 = validateParameter(valid_21627321, JString, required = false,
                                   default = nil)
  if valid_21627321 != nil:
    section.add "X-Amz-Signature", valid_21627321
  var valid_21627322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627322 = validateParameter(valid_21627322, JString, required = false,
                                   default = nil)
  if valid_21627322 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627322
  var valid_21627323 = header.getOrDefault("X-Amz-Credential")
  valid_21627323 = validateParameter(valid_21627323, JString, required = false,
                                   default = nil)
  if valid_21627323 != nil:
    section.add "X-Amz-Credential", valid_21627323
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_21627324 = formData.getOrDefault("Identity")
  valid_21627324 = validateParameter(valid_21627324, JString, required = true,
                                   default = nil)
  if valid_21627324 != nil:
    section.add "Identity", valid_21627324
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627325: Call_PostListIdentityPolicies_21627312;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627325.validator(path, query, header, formData, body, _)
  let scheme = call_21627325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627325.makeUrl(scheme.get, call_21627325.host, call_21627325.base,
                               call_21627325.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627325, uri, valid, _)

proc call*(call_21627326: Call_PostListIdentityPolicies_21627312; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627327 = newJObject()
  var formData_21627328 = newJObject()
  add(formData_21627328, "Identity", newJString(Identity))
  add(query_21627327, "Action", newJString(Action))
  add(query_21627327, "Version", newJString(Version))
  result = call_21627326.call(nil, query_21627327, nil, formData_21627328, nil)

var postListIdentityPolicies* = Call_PostListIdentityPolicies_21627312(
    name: "postListIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_PostListIdentityPolicies_21627313, base: "/",
    makeUrl: url_PostListIdentityPolicies_21627314,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentityPolicies_21627296 = ref object of OpenApiRestCall_21625435
proc url_GetListIdentityPolicies_21627298(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListIdentityPolicies_21627297(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21627299 = query.getOrDefault("Identity")
  valid_21627299 = validateParameter(valid_21627299, JString, required = true,
                                   default = nil)
  if valid_21627299 != nil:
    section.add "Identity", valid_21627299
  var valid_21627300 = query.getOrDefault("Action")
  valid_21627300 = validateParameter(valid_21627300, JString, required = true,
                                   default = newJString("ListIdentityPolicies"))
  if valid_21627300 != nil:
    section.add "Action", valid_21627300
  var valid_21627301 = query.getOrDefault("Version")
  valid_21627301 = validateParameter(valid_21627301, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627301 != nil:
    section.add "Version", valid_21627301
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627302 = header.getOrDefault("X-Amz-Date")
  valid_21627302 = validateParameter(valid_21627302, JString, required = false,
                                   default = nil)
  if valid_21627302 != nil:
    section.add "X-Amz-Date", valid_21627302
  var valid_21627303 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627303 = validateParameter(valid_21627303, JString, required = false,
                                   default = nil)
  if valid_21627303 != nil:
    section.add "X-Amz-Security-Token", valid_21627303
  var valid_21627304 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627304 = validateParameter(valid_21627304, JString, required = false,
                                   default = nil)
  if valid_21627304 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627304
  var valid_21627305 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627305 = validateParameter(valid_21627305, JString, required = false,
                                   default = nil)
  if valid_21627305 != nil:
    section.add "X-Amz-Algorithm", valid_21627305
  var valid_21627306 = header.getOrDefault("X-Amz-Signature")
  valid_21627306 = validateParameter(valid_21627306, JString, required = false,
                                   default = nil)
  if valid_21627306 != nil:
    section.add "X-Amz-Signature", valid_21627306
  var valid_21627307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627307 = validateParameter(valid_21627307, JString, required = false,
                                   default = nil)
  if valid_21627307 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627307
  var valid_21627308 = header.getOrDefault("X-Amz-Credential")
  valid_21627308 = validateParameter(valid_21627308, JString, required = false,
                                   default = nil)
  if valid_21627308 != nil:
    section.add "X-Amz-Credential", valid_21627308
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627309: Call_GetListIdentityPolicies_21627296;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627309.validator(path, query, header, formData, body, _)
  let scheme = call_21627309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627309.makeUrl(scheme.get, call_21627309.host, call_21627309.base,
                               call_21627309.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627309, uri, valid, _)

proc call*(call_21627310: Call_GetListIdentityPolicies_21627296; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627311 = newJObject()
  add(query_21627311, "Identity", newJString(Identity))
  add(query_21627311, "Action", newJString(Action))
  add(query_21627311, "Version", newJString(Version))
  result = call_21627310.call(nil, query_21627311, nil, nil, nil)

var getListIdentityPolicies* = Call_GetListIdentityPolicies_21627296(
    name: "getListIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_GetListIdentityPolicies_21627297, base: "/",
    makeUrl: url_GetListIdentityPolicies_21627298,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptFilters_21627344 = ref object of OpenApiRestCall_21625435
proc url_PostListReceiptFilters_21627346(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListReceiptFilters_21627345(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627347 = query.getOrDefault("Action")
  valid_21627347 = validateParameter(valid_21627347, JString, required = true,
                                   default = newJString("ListReceiptFilters"))
  if valid_21627347 != nil:
    section.add "Action", valid_21627347
  var valid_21627348 = query.getOrDefault("Version")
  valid_21627348 = validateParameter(valid_21627348, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627348 != nil:
    section.add "Version", valid_21627348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627349 = header.getOrDefault("X-Amz-Date")
  valid_21627349 = validateParameter(valid_21627349, JString, required = false,
                                   default = nil)
  if valid_21627349 != nil:
    section.add "X-Amz-Date", valid_21627349
  var valid_21627350 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627350 = validateParameter(valid_21627350, JString, required = false,
                                   default = nil)
  if valid_21627350 != nil:
    section.add "X-Amz-Security-Token", valid_21627350
  var valid_21627351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627351 = validateParameter(valid_21627351, JString, required = false,
                                   default = nil)
  if valid_21627351 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627351
  var valid_21627352 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627352 = validateParameter(valid_21627352, JString, required = false,
                                   default = nil)
  if valid_21627352 != nil:
    section.add "X-Amz-Algorithm", valid_21627352
  var valid_21627353 = header.getOrDefault("X-Amz-Signature")
  valid_21627353 = validateParameter(valid_21627353, JString, required = false,
                                   default = nil)
  if valid_21627353 != nil:
    section.add "X-Amz-Signature", valid_21627353
  var valid_21627354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627354 = validateParameter(valid_21627354, JString, required = false,
                                   default = nil)
  if valid_21627354 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627354
  var valid_21627355 = header.getOrDefault("X-Amz-Credential")
  valid_21627355 = validateParameter(valid_21627355, JString, required = false,
                                   default = nil)
  if valid_21627355 != nil:
    section.add "X-Amz-Credential", valid_21627355
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627356: Call_PostListReceiptFilters_21627344;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627356.validator(path, query, header, formData, body, _)
  let scheme = call_21627356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627356.makeUrl(scheme.get, call_21627356.host, call_21627356.base,
                               call_21627356.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627356, uri, valid, _)

proc call*(call_21627357: Call_PostListReceiptFilters_21627344;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## postListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627358 = newJObject()
  add(query_21627358, "Action", newJString(Action))
  add(query_21627358, "Version", newJString(Version))
  result = call_21627357.call(nil, query_21627358, nil, nil, nil)

var postListReceiptFilters* = Call_PostListReceiptFilters_21627344(
    name: "postListReceiptFilters", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_PostListReceiptFilters_21627345, base: "/",
    makeUrl: url_PostListReceiptFilters_21627346,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptFilters_21627329 = ref object of OpenApiRestCall_21625435
proc url_GetListReceiptFilters_21627331(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListReceiptFilters_21627330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627332 = query.getOrDefault("Action")
  valid_21627332 = validateParameter(valid_21627332, JString, required = true,
                                   default = newJString("ListReceiptFilters"))
  if valid_21627332 != nil:
    section.add "Action", valid_21627332
  var valid_21627333 = query.getOrDefault("Version")
  valid_21627333 = validateParameter(valid_21627333, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627333 != nil:
    section.add "Version", valid_21627333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627334 = header.getOrDefault("X-Amz-Date")
  valid_21627334 = validateParameter(valid_21627334, JString, required = false,
                                   default = nil)
  if valid_21627334 != nil:
    section.add "X-Amz-Date", valid_21627334
  var valid_21627335 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627335 = validateParameter(valid_21627335, JString, required = false,
                                   default = nil)
  if valid_21627335 != nil:
    section.add "X-Amz-Security-Token", valid_21627335
  var valid_21627336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627336 = validateParameter(valid_21627336, JString, required = false,
                                   default = nil)
  if valid_21627336 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627336
  var valid_21627337 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627337 = validateParameter(valid_21627337, JString, required = false,
                                   default = nil)
  if valid_21627337 != nil:
    section.add "X-Amz-Algorithm", valid_21627337
  var valid_21627338 = header.getOrDefault("X-Amz-Signature")
  valid_21627338 = validateParameter(valid_21627338, JString, required = false,
                                   default = nil)
  if valid_21627338 != nil:
    section.add "X-Amz-Signature", valid_21627338
  var valid_21627339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627339 = validateParameter(valid_21627339, JString, required = false,
                                   default = nil)
  if valid_21627339 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627339
  var valid_21627340 = header.getOrDefault("X-Amz-Credential")
  valid_21627340 = validateParameter(valid_21627340, JString, required = false,
                                   default = nil)
  if valid_21627340 != nil:
    section.add "X-Amz-Credential", valid_21627340
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627341: Call_GetListReceiptFilters_21627329;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627341.validator(path, query, header, formData, body, _)
  let scheme = call_21627341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627341.makeUrl(scheme.get, call_21627341.host, call_21627341.base,
                               call_21627341.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627341, uri, valid, _)

proc call*(call_21627342: Call_GetListReceiptFilters_21627329;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627343 = newJObject()
  add(query_21627343, "Action", newJString(Action))
  add(query_21627343, "Version", newJString(Version))
  result = call_21627342.call(nil, query_21627343, nil, nil, nil)

var getListReceiptFilters* = Call_GetListReceiptFilters_21627329(
    name: "getListReceiptFilters", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_GetListReceiptFilters_21627330, base: "/",
    makeUrl: url_GetListReceiptFilters_21627331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptRuleSets_21627375 = ref object of OpenApiRestCall_21625435
proc url_PostListReceiptRuleSets_21627377(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListReceiptRuleSets_21627376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627378 = query.getOrDefault("Action")
  valid_21627378 = validateParameter(valid_21627378, JString, required = true,
                                   default = newJString("ListReceiptRuleSets"))
  if valid_21627378 != nil:
    section.add "Action", valid_21627378
  var valid_21627379 = query.getOrDefault("Version")
  valid_21627379 = validateParameter(valid_21627379, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627379 != nil:
    section.add "Version", valid_21627379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627380 = header.getOrDefault("X-Amz-Date")
  valid_21627380 = validateParameter(valid_21627380, JString, required = false,
                                   default = nil)
  if valid_21627380 != nil:
    section.add "X-Amz-Date", valid_21627380
  var valid_21627381 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627381 = validateParameter(valid_21627381, JString, required = false,
                                   default = nil)
  if valid_21627381 != nil:
    section.add "X-Amz-Security-Token", valid_21627381
  var valid_21627382 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627382 = validateParameter(valid_21627382, JString, required = false,
                                   default = nil)
  if valid_21627382 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627382
  var valid_21627383 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627383 = validateParameter(valid_21627383, JString, required = false,
                                   default = nil)
  if valid_21627383 != nil:
    section.add "X-Amz-Algorithm", valid_21627383
  var valid_21627384 = header.getOrDefault("X-Amz-Signature")
  valid_21627384 = validateParameter(valid_21627384, JString, required = false,
                                   default = nil)
  if valid_21627384 != nil:
    section.add "X-Amz-Signature", valid_21627384
  var valid_21627385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627385 = validateParameter(valid_21627385, JString, required = false,
                                   default = nil)
  if valid_21627385 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627385
  var valid_21627386 = header.getOrDefault("X-Amz-Credential")
  valid_21627386 = validateParameter(valid_21627386, JString, required = false,
                                   default = nil)
  if valid_21627386 != nil:
    section.add "X-Amz-Credential", valid_21627386
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  section = newJObject()
  var valid_21627387 = formData.getOrDefault("NextToken")
  valid_21627387 = validateParameter(valid_21627387, JString, required = false,
                                   default = nil)
  if valid_21627387 != nil:
    section.add "NextToken", valid_21627387
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627388: Call_PostListReceiptRuleSets_21627375;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627388.validator(path, query, header, formData, body, _)
  let scheme = call_21627388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627388.makeUrl(scheme.get, call_21627388.host, call_21627388.base,
                               call_21627388.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627388, uri, valid, _)

proc call*(call_21627389: Call_PostListReceiptRuleSets_21627375;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## postListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627390 = newJObject()
  var formData_21627391 = newJObject()
  add(formData_21627391, "NextToken", newJString(NextToken))
  add(query_21627390, "Action", newJString(Action))
  add(query_21627390, "Version", newJString(Version))
  result = call_21627389.call(nil, query_21627390, nil, formData_21627391, nil)

var postListReceiptRuleSets* = Call_PostListReceiptRuleSets_21627375(
    name: "postListReceiptRuleSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_PostListReceiptRuleSets_21627376, base: "/",
    makeUrl: url_PostListReceiptRuleSets_21627377,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptRuleSets_21627359 = ref object of OpenApiRestCall_21625435
proc url_GetListReceiptRuleSets_21627361(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListReceiptRuleSets_21627360(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627362 = query.getOrDefault("NextToken")
  valid_21627362 = validateParameter(valid_21627362, JString, required = false,
                                   default = nil)
  if valid_21627362 != nil:
    section.add "NextToken", valid_21627362
  var valid_21627363 = query.getOrDefault("Action")
  valid_21627363 = validateParameter(valid_21627363, JString, required = true,
                                   default = newJString("ListReceiptRuleSets"))
  if valid_21627363 != nil:
    section.add "Action", valid_21627363
  var valid_21627364 = query.getOrDefault("Version")
  valid_21627364 = validateParameter(valid_21627364, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627364 != nil:
    section.add "Version", valid_21627364
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627365 = header.getOrDefault("X-Amz-Date")
  valid_21627365 = validateParameter(valid_21627365, JString, required = false,
                                   default = nil)
  if valid_21627365 != nil:
    section.add "X-Amz-Date", valid_21627365
  var valid_21627366 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627366 = validateParameter(valid_21627366, JString, required = false,
                                   default = nil)
  if valid_21627366 != nil:
    section.add "X-Amz-Security-Token", valid_21627366
  var valid_21627367 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627367 = validateParameter(valid_21627367, JString, required = false,
                                   default = nil)
  if valid_21627367 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627367
  var valid_21627368 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627368 = validateParameter(valid_21627368, JString, required = false,
                                   default = nil)
  if valid_21627368 != nil:
    section.add "X-Amz-Algorithm", valid_21627368
  var valid_21627369 = header.getOrDefault("X-Amz-Signature")
  valid_21627369 = validateParameter(valid_21627369, JString, required = false,
                                   default = nil)
  if valid_21627369 != nil:
    section.add "X-Amz-Signature", valid_21627369
  var valid_21627370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627370 = validateParameter(valid_21627370, JString, required = false,
                                   default = nil)
  if valid_21627370 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627370
  var valid_21627371 = header.getOrDefault("X-Amz-Credential")
  valid_21627371 = validateParameter(valid_21627371, JString, required = false,
                                   default = nil)
  if valid_21627371 != nil:
    section.add "X-Amz-Credential", valid_21627371
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627372: Call_GetListReceiptRuleSets_21627359;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627372.validator(path, query, header, formData, body, _)
  let scheme = call_21627372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627372.makeUrl(scheme.get, call_21627372.host, call_21627372.base,
                               call_21627372.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627372, uri, valid, _)

proc call*(call_21627373: Call_GetListReceiptRuleSets_21627359;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## getListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627374 = newJObject()
  add(query_21627374, "NextToken", newJString(NextToken))
  add(query_21627374, "Action", newJString(Action))
  add(query_21627374, "Version", newJString(Version))
  result = call_21627373.call(nil, query_21627374, nil, nil, nil)

var getListReceiptRuleSets* = Call_GetListReceiptRuleSets_21627359(
    name: "getListReceiptRuleSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_GetListReceiptRuleSets_21627360, base: "/",
    makeUrl: url_GetListReceiptRuleSets_21627361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTemplates_21627409 = ref object of OpenApiRestCall_21625435
proc url_PostListTemplates_21627411(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTemplates_21627410(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627412 = query.getOrDefault("Action")
  valid_21627412 = validateParameter(valid_21627412, JString, required = true,
                                   default = newJString("ListTemplates"))
  if valid_21627412 != nil:
    section.add "Action", valid_21627412
  var valid_21627413 = query.getOrDefault("Version")
  valid_21627413 = validateParameter(valid_21627413, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627413 != nil:
    section.add "Version", valid_21627413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627414 = header.getOrDefault("X-Amz-Date")
  valid_21627414 = validateParameter(valid_21627414, JString, required = false,
                                   default = nil)
  if valid_21627414 != nil:
    section.add "X-Amz-Date", valid_21627414
  var valid_21627415 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627415 = validateParameter(valid_21627415, JString, required = false,
                                   default = nil)
  if valid_21627415 != nil:
    section.add "X-Amz-Security-Token", valid_21627415
  var valid_21627416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627416 = validateParameter(valid_21627416, JString, required = false,
                                   default = nil)
  if valid_21627416 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627416
  var valid_21627417 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627417 = validateParameter(valid_21627417, JString, required = false,
                                   default = nil)
  if valid_21627417 != nil:
    section.add "X-Amz-Algorithm", valid_21627417
  var valid_21627418 = header.getOrDefault("X-Amz-Signature")
  valid_21627418 = validateParameter(valid_21627418, JString, required = false,
                                   default = nil)
  if valid_21627418 != nil:
    section.add "X-Amz-Signature", valid_21627418
  var valid_21627419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627419 = validateParameter(valid_21627419, JString, required = false,
                                   default = nil)
  if valid_21627419 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627419
  var valid_21627420 = header.getOrDefault("X-Amz-Credential")
  valid_21627420 = validateParameter(valid_21627420, JString, required = false,
                                   default = nil)
  if valid_21627420 != nil:
    section.add "X-Amz-Credential", valid_21627420
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  section = newJObject()
  var valid_21627421 = formData.getOrDefault("NextToken")
  valid_21627421 = validateParameter(valid_21627421, JString, required = false,
                                   default = nil)
  if valid_21627421 != nil:
    section.add "NextToken", valid_21627421
  var valid_21627422 = formData.getOrDefault("MaxItems")
  valid_21627422 = validateParameter(valid_21627422, JInt, required = false,
                                   default = nil)
  if valid_21627422 != nil:
    section.add "MaxItems", valid_21627422
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627423: Call_PostListTemplates_21627409; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627423.validator(path, query, header, formData, body, _)
  let scheme = call_21627423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627423.makeUrl(scheme.get, call_21627423.host, call_21627423.base,
                               call_21627423.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627423, uri, valid, _)

proc call*(call_21627424: Call_PostListTemplates_21627409; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## postListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_21627425 = newJObject()
  var formData_21627426 = newJObject()
  add(formData_21627426, "NextToken", newJString(NextToken))
  add(query_21627425, "Action", newJString(Action))
  add(formData_21627426, "MaxItems", newJInt(MaxItems))
  add(query_21627425, "Version", newJString(Version))
  result = call_21627424.call(nil, query_21627425, nil, formData_21627426, nil)

var postListTemplates* = Call_PostListTemplates_21627409(name: "postListTemplates",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_PostListTemplates_21627410,
    base: "/", makeUrl: url_PostListTemplates_21627411,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTemplates_21627392 = ref object of OpenApiRestCall_21625435
proc url_GetListTemplates_21627394(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTemplates_21627393(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627395 = query.getOrDefault("NextToken")
  valid_21627395 = validateParameter(valid_21627395, JString, required = false,
                                   default = nil)
  if valid_21627395 != nil:
    section.add "NextToken", valid_21627395
  var valid_21627396 = query.getOrDefault("Action")
  valid_21627396 = validateParameter(valid_21627396, JString, required = true,
                                   default = newJString("ListTemplates"))
  if valid_21627396 != nil:
    section.add "Action", valid_21627396
  var valid_21627397 = query.getOrDefault("MaxItems")
  valid_21627397 = validateParameter(valid_21627397, JInt, required = false,
                                   default = nil)
  if valid_21627397 != nil:
    section.add "MaxItems", valid_21627397
  var valid_21627398 = query.getOrDefault("Version")
  valid_21627398 = validateParameter(valid_21627398, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627398 != nil:
    section.add "Version", valid_21627398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627399 = header.getOrDefault("X-Amz-Date")
  valid_21627399 = validateParameter(valid_21627399, JString, required = false,
                                   default = nil)
  if valid_21627399 != nil:
    section.add "X-Amz-Date", valid_21627399
  var valid_21627400 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627400 = validateParameter(valid_21627400, JString, required = false,
                                   default = nil)
  if valid_21627400 != nil:
    section.add "X-Amz-Security-Token", valid_21627400
  var valid_21627401 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627401 = validateParameter(valid_21627401, JString, required = false,
                                   default = nil)
  if valid_21627401 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627401
  var valid_21627402 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627402 = validateParameter(valid_21627402, JString, required = false,
                                   default = nil)
  if valid_21627402 != nil:
    section.add "X-Amz-Algorithm", valid_21627402
  var valid_21627403 = header.getOrDefault("X-Amz-Signature")
  valid_21627403 = validateParameter(valid_21627403, JString, required = false,
                                   default = nil)
  if valid_21627403 != nil:
    section.add "X-Amz-Signature", valid_21627403
  var valid_21627404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627404 = validateParameter(valid_21627404, JString, required = false,
                                   default = nil)
  if valid_21627404 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627404
  var valid_21627405 = header.getOrDefault("X-Amz-Credential")
  valid_21627405 = validateParameter(valid_21627405, JString, required = false,
                                   default = nil)
  if valid_21627405 != nil:
    section.add "X-Amz-Credential", valid_21627405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627406: Call_GetListTemplates_21627392; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627406.validator(path, query, header, formData, body, _)
  let scheme = call_21627406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627406.makeUrl(scheme.get, call_21627406.host, call_21627406.base,
                               call_21627406.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627406, uri, valid, _)

proc call*(call_21627407: Call_GetListTemplates_21627392; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## getListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_21627408 = newJObject()
  add(query_21627408, "NextToken", newJString(NextToken))
  add(query_21627408, "Action", newJString(Action))
  add(query_21627408, "MaxItems", newJInt(MaxItems))
  add(query_21627408, "Version", newJString(Version))
  result = call_21627407.call(nil, query_21627408, nil, nil, nil)

var getListTemplates* = Call_GetListTemplates_21627392(name: "getListTemplates",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_GetListTemplates_21627393,
    base: "/", makeUrl: url_GetListTemplates_21627394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVerifiedEmailAddresses_21627442 = ref object of OpenApiRestCall_21625435
proc url_PostListVerifiedEmailAddresses_21627444(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVerifiedEmailAddresses_21627443(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627445 = query.getOrDefault("Action")
  valid_21627445 = validateParameter(valid_21627445, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_21627445 != nil:
    section.add "Action", valid_21627445
  var valid_21627446 = query.getOrDefault("Version")
  valid_21627446 = validateParameter(valid_21627446, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627446 != nil:
    section.add "Version", valid_21627446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627447 = header.getOrDefault("X-Amz-Date")
  valid_21627447 = validateParameter(valid_21627447, JString, required = false,
                                   default = nil)
  if valid_21627447 != nil:
    section.add "X-Amz-Date", valid_21627447
  var valid_21627448 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627448 = validateParameter(valid_21627448, JString, required = false,
                                   default = nil)
  if valid_21627448 != nil:
    section.add "X-Amz-Security-Token", valid_21627448
  var valid_21627449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627449 = validateParameter(valid_21627449, JString, required = false,
                                   default = nil)
  if valid_21627449 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627449
  var valid_21627450 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627450 = validateParameter(valid_21627450, JString, required = false,
                                   default = nil)
  if valid_21627450 != nil:
    section.add "X-Amz-Algorithm", valid_21627450
  var valid_21627451 = header.getOrDefault("X-Amz-Signature")
  valid_21627451 = validateParameter(valid_21627451, JString, required = false,
                                   default = nil)
  if valid_21627451 != nil:
    section.add "X-Amz-Signature", valid_21627451
  var valid_21627452 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627452 = validateParameter(valid_21627452, JString, required = false,
                                   default = nil)
  if valid_21627452 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627452
  var valid_21627453 = header.getOrDefault("X-Amz-Credential")
  valid_21627453 = validateParameter(valid_21627453, JString, required = false,
                                   default = nil)
  if valid_21627453 != nil:
    section.add "X-Amz-Credential", valid_21627453
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627454: Call_PostListVerifiedEmailAddresses_21627442;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_21627454.validator(path, query, header, formData, body, _)
  let scheme = call_21627454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627454.makeUrl(scheme.get, call_21627454.host, call_21627454.base,
                               call_21627454.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627454, uri, valid, _)

proc call*(call_21627455: Call_PostListVerifiedEmailAddresses_21627442;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## postListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627456 = newJObject()
  add(query_21627456, "Action", newJString(Action))
  add(query_21627456, "Version", newJString(Version))
  result = call_21627455.call(nil, query_21627456, nil, nil, nil)

var postListVerifiedEmailAddresses* = Call_PostListVerifiedEmailAddresses_21627442(
    name: "postListVerifiedEmailAddresses", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_PostListVerifiedEmailAddresses_21627443, base: "/",
    makeUrl: url_PostListVerifiedEmailAddresses_21627444,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVerifiedEmailAddresses_21627427 = ref object of OpenApiRestCall_21625435
proc url_GetListVerifiedEmailAddresses_21627429(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVerifiedEmailAddresses_21627428(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627430 = query.getOrDefault("Action")
  valid_21627430 = validateParameter(valid_21627430, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_21627430 != nil:
    section.add "Action", valid_21627430
  var valid_21627431 = query.getOrDefault("Version")
  valid_21627431 = validateParameter(valid_21627431, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627431 != nil:
    section.add "Version", valid_21627431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627432 = header.getOrDefault("X-Amz-Date")
  valid_21627432 = validateParameter(valid_21627432, JString, required = false,
                                   default = nil)
  if valid_21627432 != nil:
    section.add "X-Amz-Date", valid_21627432
  var valid_21627433 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627433 = validateParameter(valid_21627433, JString, required = false,
                                   default = nil)
  if valid_21627433 != nil:
    section.add "X-Amz-Security-Token", valid_21627433
  var valid_21627434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627434 = validateParameter(valid_21627434, JString, required = false,
                                   default = nil)
  if valid_21627434 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627434
  var valid_21627435 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627435 = validateParameter(valid_21627435, JString, required = false,
                                   default = nil)
  if valid_21627435 != nil:
    section.add "X-Amz-Algorithm", valid_21627435
  var valid_21627436 = header.getOrDefault("X-Amz-Signature")
  valid_21627436 = validateParameter(valid_21627436, JString, required = false,
                                   default = nil)
  if valid_21627436 != nil:
    section.add "X-Amz-Signature", valid_21627436
  var valid_21627437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627437 = validateParameter(valid_21627437, JString, required = false,
                                   default = nil)
  if valid_21627437 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627437
  var valid_21627438 = header.getOrDefault("X-Amz-Credential")
  valid_21627438 = validateParameter(valid_21627438, JString, required = false,
                                   default = nil)
  if valid_21627438 != nil:
    section.add "X-Amz-Credential", valid_21627438
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627439: Call_GetListVerifiedEmailAddresses_21627427;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_21627439.validator(path, query, header, formData, body, _)
  let scheme = call_21627439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627439.makeUrl(scheme.get, call_21627439.host, call_21627439.base,
                               call_21627439.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627439, uri, valid, _)

proc call*(call_21627440: Call_GetListVerifiedEmailAddresses_21627427;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## getListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627441 = newJObject()
  add(query_21627441, "Action", newJString(Action))
  add(query_21627441, "Version", newJString(Version))
  result = call_21627440.call(nil, query_21627441, nil, nil, nil)

var getListVerifiedEmailAddresses* = Call_GetListVerifiedEmailAddresses_21627427(
    name: "getListVerifiedEmailAddresses", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_GetListVerifiedEmailAddresses_21627428, base: "/",
    makeUrl: url_GetListVerifiedEmailAddresses_21627429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutConfigurationSetDeliveryOptions_21627474 = ref object of OpenApiRestCall_21625435
proc url_PostPutConfigurationSetDeliveryOptions_21627476(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutConfigurationSetDeliveryOptions_21627475(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627477 = query.getOrDefault("Action")
  valid_21627477 = validateParameter(valid_21627477, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_21627477 != nil:
    section.add "Action", valid_21627477
  var valid_21627478 = query.getOrDefault("Version")
  valid_21627478 = validateParameter(valid_21627478, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627478 != nil:
    section.add "Version", valid_21627478
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627479 = header.getOrDefault("X-Amz-Date")
  valid_21627479 = validateParameter(valid_21627479, JString, required = false,
                                   default = nil)
  if valid_21627479 != nil:
    section.add "X-Amz-Date", valid_21627479
  var valid_21627480 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627480 = validateParameter(valid_21627480, JString, required = false,
                                   default = nil)
  if valid_21627480 != nil:
    section.add "X-Amz-Security-Token", valid_21627480
  var valid_21627481 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627481 = validateParameter(valid_21627481, JString, required = false,
                                   default = nil)
  if valid_21627481 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627481
  var valid_21627482 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627482 = validateParameter(valid_21627482, JString, required = false,
                                   default = nil)
  if valid_21627482 != nil:
    section.add "X-Amz-Algorithm", valid_21627482
  var valid_21627483 = header.getOrDefault("X-Amz-Signature")
  valid_21627483 = validateParameter(valid_21627483, JString, required = false,
                                   default = nil)
  if valid_21627483 != nil:
    section.add "X-Amz-Signature", valid_21627483
  var valid_21627484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627484 = validateParameter(valid_21627484, JString, required = false,
                                   default = nil)
  if valid_21627484 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627484
  var valid_21627485 = header.getOrDefault("X-Amz-Credential")
  valid_21627485 = validateParameter(valid_21627485, JString, required = false,
                                   default = nil)
  if valid_21627485 != nil:
    section.add "X-Amz-Credential", valid_21627485
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21627486 = formData.getOrDefault("ConfigurationSetName")
  valid_21627486 = validateParameter(valid_21627486, JString, required = true,
                                   default = nil)
  if valid_21627486 != nil:
    section.add "ConfigurationSetName", valid_21627486
  var valid_21627487 = formData.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_21627487 = validateParameter(valid_21627487, JString, required = false,
                                   default = nil)
  if valid_21627487 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_21627487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627488: Call_PostPutConfigurationSetDeliveryOptions_21627474;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_21627488.validator(path, query, header, formData, body, _)
  let scheme = call_21627488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627488.makeUrl(scheme.get, call_21627488.host, call_21627488.base,
                               call_21627488.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627488, uri, valid, _)

proc call*(call_21627489: Call_PostPutConfigurationSetDeliveryOptions_21627474;
          ConfigurationSetName: string;
          Action: string = "PutConfigurationSetDeliveryOptions";
          DeliveryOptionsTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Action: string (required)
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Version: string (required)
  var query_21627490 = newJObject()
  var formData_21627491 = newJObject()
  add(formData_21627491, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21627490, "Action", newJString(Action))
  add(formData_21627491, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_21627490, "Version", newJString(Version))
  result = call_21627489.call(nil, query_21627490, nil, formData_21627491, nil)

var postPutConfigurationSetDeliveryOptions* = Call_PostPutConfigurationSetDeliveryOptions_21627474(
    name: "postPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_PostPutConfigurationSetDeliveryOptions_21627475,
    base: "/", makeUrl: url_PostPutConfigurationSetDeliveryOptions_21627476,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutConfigurationSetDeliveryOptions_21627457 = ref object of OpenApiRestCall_21625435
proc url_GetPutConfigurationSetDeliveryOptions_21627459(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutConfigurationSetDeliveryOptions_21627458(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627460 = query.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_21627460 = validateParameter(valid_21627460, JString, required = false,
                                   default = nil)
  if valid_21627460 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_21627460
  var valid_21627461 = query.getOrDefault("Action")
  valid_21627461 = validateParameter(valid_21627461, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_21627461 != nil:
    section.add "Action", valid_21627461
  var valid_21627462 = query.getOrDefault("ConfigurationSetName")
  valid_21627462 = validateParameter(valid_21627462, JString, required = true,
                                   default = nil)
  if valid_21627462 != nil:
    section.add "ConfigurationSetName", valid_21627462
  var valid_21627463 = query.getOrDefault("Version")
  valid_21627463 = validateParameter(valid_21627463, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627463 != nil:
    section.add "Version", valid_21627463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627464 = header.getOrDefault("X-Amz-Date")
  valid_21627464 = validateParameter(valid_21627464, JString, required = false,
                                   default = nil)
  if valid_21627464 != nil:
    section.add "X-Amz-Date", valid_21627464
  var valid_21627465 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627465 = validateParameter(valid_21627465, JString, required = false,
                                   default = nil)
  if valid_21627465 != nil:
    section.add "X-Amz-Security-Token", valid_21627465
  var valid_21627466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627466 = validateParameter(valid_21627466, JString, required = false,
                                   default = nil)
  if valid_21627466 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627466
  var valid_21627467 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627467 = validateParameter(valid_21627467, JString, required = false,
                                   default = nil)
  if valid_21627467 != nil:
    section.add "X-Amz-Algorithm", valid_21627467
  var valid_21627468 = header.getOrDefault("X-Amz-Signature")
  valid_21627468 = validateParameter(valid_21627468, JString, required = false,
                                   default = nil)
  if valid_21627468 != nil:
    section.add "X-Amz-Signature", valid_21627468
  var valid_21627469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627469 = validateParameter(valid_21627469, JString, required = false,
                                   default = nil)
  if valid_21627469 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627469
  var valid_21627470 = header.getOrDefault("X-Amz-Credential")
  valid_21627470 = validateParameter(valid_21627470, JString, required = false,
                                   default = nil)
  if valid_21627470 != nil:
    section.add "X-Amz-Credential", valid_21627470
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627471: Call_GetPutConfigurationSetDeliveryOptions_21627457;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_21627471.validator(path, query, header, formData, body, _)
  let scheme = call_21627471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627471.makeUrl(scheme.get, call_21627471.host, call_21627471.base,
                               call_21627471.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627471, uri, valid, _)

proc call*(call_21627472: Call_GetPutConfigurationSetDeliveryOptions_21627457;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: string (required)
  var query_21627473 = newJObject()
  add(query_21627473, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_21627473, "Action", newJString(Action))
  add(query_21627473, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21627473, "Version", newJString(Version))
  result = call_21627472.call(nil, query_21627473, nil, nil, nil)

var getPutConfigurationSetDeliveryOptions* = Call_GetPutConfigurationSetDeliveryOptions_21627457(
    name: "getPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_GetPutConfigurationSetDeliveryOptions_21627458, base: "/",
    makeUrl: url_GetPutConfigurationSetDeliveryOptions_21627459,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutIdentityPolicy_21627510 = ref object of OpenApiRestCall_21625435
proc url_PostPutIdentityPolicy_21627512(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutIdentityPolicy_21627511(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627513 = query.getOrDefault("Action")
  valid_21627513 = validateParameter(valid_21627513, JString, required = true,
                                   default = newJString("PutIdentityPolicy"))
  if valid_21627513 != nil:
    section.add "Action", valid_21627513
  var valid_21627514 = query.getOrDefault("Version")
  valid_21627514 = validateParameter(valid_21627514, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627514 != nil:
    section.add "Version", valid_21627514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627515 = header.getOrDefault("X-Amz-Date")
  valid_21627515 = validateParameter(valid_21627515, JString, required = false,
                                   default = nil)
  if valid_21627515 != nil:
    section.add "X-Amz-Date", valid_21627515
  var valid_21627516 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627516 = validateParameter(valid_21627516, JString, required = false,
                                   default = nil)
  if valid_21627516 != nil:
    section.add "X-Amz-Security-Token", valid_21627516
  var valid_21627517 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627517 = validateParameter(valid_21627517, JString, required = false,
                                   default = nil)
  if valid_21627517 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627517
  var valid_21627518 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627518 = validateParameter(valid_21627518, JString, required = false,
                                   default = nil)
  if valid_21627518 != nil:
    section.add "X-Amz-Algorithm", valid_21627518
  var valid_21627519 = header.getOrDefault("X-Amz-Signature")
  valid_21627519 = validateParameter(valid_21627519, JString, required = false,
                                   default = nil)
  if valid_21627519 != nil:
    section.add "X-Amz-Signature", valid_21627519
  var valid_21627520 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627520 = validateParameter(valid_21627520, JString, required = false,
                                   default = nil)
  if valid_21627520 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627520
  var valid_21627521 = header.getOrDefault("X-Amz-Credential")
  valid_21627521 = validateParameter(valid_21627521, JString, required = false,
                                   default = nil)
  if valid_21627521 != nil:
    section.add "X-Amz-Credential", valid_21627521
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21627522 = formData.getOrDefault("PolicyName")
  valid_21627522 = validateParameter(valid_21627522, JString, required = true,
                                   default = nil)
  if valid_21627522 != nil:
    section.add "PolicyName", valid_21627522
  var valid_21627523 = formData.getOrDefault("Identity")
  valid_21627523 = validateParameter(valid_21627523, JString, required = true,
                                   default = nil)
  if valid_21627523 != nil:
    section.add "Identity", valid_21627523
  var valid_21627524 = formData.getOrDefault("Policy")
  valid_21627524 = validateParameter(valid_21627524, JString, required = true,
                                   default = nil)
  if valid_21627524 != nil:
    section.add "Policy", valid_21627524
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627525: Call_PostPutIdentityPolicy_21627510;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627525.validator(path, query, header, formData, body, _)
  let scheme = call_21627525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627525.makeUrl(scheme.get, call_21627525.host, call_21627525.base,
                               call_21627525.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627525, uri, valid, _)

proc call*(call_21627526: Call_PostPutIdentityPolicy_21627510; PolicyName: string;
          Identity: string; Policy: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  var query_21627527 = newJObject()
  var formData_21627528 = newJObject()
  add(formData_21627528, "PolicyName", newJString(PolicyName))
  add(formData_21627528, "Identity", newJString(Identity))
  add(query_21627527, "Action", newJString(Action))
  add(formData_21627528, "Policy", newJString(Policy))
  add(query_21627527, "Version", newJString(Version))
  result = call_21627526.call(nil, query_21627527, nil, formData_21627528, nil)

var postPutIdentityPolicy* = Call_PostPutIdentityPolicy_21627510(
    name: "postPutIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_PostPutIdentityPolicy_21627511, base: "/",
    makeUrl: url_PostPutIdentityPolicy_21627512,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutIdentityPolicy_21627492 = ref object of OpenApiRestCall_21625435
proc url_GetPutIdentityPolicy_21627494(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutIdentityPolicy_21627493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21627495 = query.getOrDefault("Identity")
  valid_21627495 = validateParameter(valid_21627495, JString, required = true,
                                   default = nil)
  if valid_21627495 != nil:
    section.add "Identity", valid_21627495
  var valid_21627496 = query.getOrDefault("Action")
  valid_21627496 = validateParameter(valid_21627496, JString, required = true,
                                   default = newJString("PutIdentityPolicy"))
  if valid_21627496 != nil:
    section.add "Action", valid_21627496
  var valid_21627497 = query.getOrDefault("Policy")
  valid_21627497 = validateParameter(valid_21627497, JString, required = true,
                                   default = nil)
  if valid_21627497 != nil:
    section.add "Policy", valid_21627497
  var valid_21627498 = query.getOrDefault("Version")
  valid_21627498 = validateParameter(valid_21627498, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627498 != nil:
    section.add "Version", valid_21627498
  var valid_21627499 = query.getOrDefault("PolicyName")
  valid_21627499 = validateParameter(valid_21627499, JString, required = true,
                                   default = nil)
  if valid_21627499 != nil:
    section.add "PolicyName", valid_21627499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627500 = header.getOrDefault("X-Amz-Date")
  valid_21627500 = validateParameter(valid_21627500, JString, required = false,
                                   default = nil)
  if valid_21627500 != nil:
    section.add "X-Amz-Date", valid_21627500
  var valid_21627501 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627501 = validateParameter(valid_21627501, JString, required = false,
                                   default = nil)
  if valid_21627501 != nil:
    section.add "X-Amz-Security-Token", valid_21627501
  var valid_21627502 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627502 = validateParameter(valid_21627502, JString, required = false,
                                   default = nil)
  if valid_21627502 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627502
  var valid_21627503 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627503 = validateParameter(valid_21627503, JString, required = false,
                                   default = nil)
  if valid_21627503 != nil:
    section.add "X-Amz-Algorithm", valid_21627503
  var valid_21627504 = header.getOrDefault("X-Amz-Signature")
  valid_21627504 = validateParameter(valid_21627504, JString, required = false,
                                   default = nil)
  if valid_21627504 != nil:
    section.add "X-Amz-Signature", valid_21627504
  var valid_21627505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627505 = validateParameter(valid_21627505, JString, required = false,
                                   default = nil)
  if valid_21627505 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627505
  var valid_21627506 = header.getOrDefault("X-Amz-Credential")
  valid_21627506 = validateParameter(valid_21627506, JString, required = false,
                                   default = nil)
  if valid_21627506 != nil:
    section.add "X-Amz-Credential", valid_21627506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627507: Call_GetPutIdentityPolicy_21627492; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627507.validator(path, query, header, formData, body, _)
  let scheme = call_21627507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627507.makeUrl(scheme.get, call_21627507.host, call_21627507.base,
                               call_21627507.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627507, uri, valid, _)

proc call*(call_21627508: Call_GetPutIdentityPolicy_21627492; Identity: string;
          Policy: string; PolicyName: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  var query_21627509 = newJObject()
  add(query_21627509, "Identity", newJString(Identity))
  add(query_21627509, "Action", newJString(Action))
  add(query_21627509, "Policy", newJString(Policy))
  add(query_21627509, "Version", newJString(Version))
  add(query_21627509, "PolicyName", newJString(PolicyName))
  result = call_21627508.call(nil, query_21627509, nil, nil, nil)

var getPutIdentityPolicy* = Call_GetPutIdentityPolicy_21627492(
    name: "getPutIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_GetPutIdentityPolicy_21627493, base: "/",
    makeUrl: url_GetPutIdentityPolicy_21627494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostReorderReceiptRuleSet_21627546 = ref object of OpenApiRestCall_21625435
proc url_PostReorderReceiptRuleSet_21627548(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostReorderReceiptRuleSet_21627547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627549 = query.getOrDefault("Action")
  valid_21627549 = validateParameter(valid_21627549, JString, required = true, default = newJString(
      "ReorderReceiptRuleSet"))
  if valid_21627549 != nil:
    section.add "Action", valid_21627549
  var valid_21627550 = query.getOrDefault("Version")
  valid_21627550 = validateParameter(valid_21627550, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627550 != nil:
    section.add "Version", valid_21627550
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627551 = header.getOrDefault("X-Amz-Date")
  valid_21627551 = validateParameter(valid_21627551, JString, required = false,
                                   default = nil)
  if valid_21627551 != nil:
    section.add "X-Amz-Date", valid_21627551
  var valid_21627552 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627552 = validateParameter(valid_21627552, JString, required = false,
                                   default = nil)
  if valid_21627552 != nil:
    section.add "X-Amz-Security-Token", valid_21627552
  var valid_21627553 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627553 = validateParameter(valid_21627553, JString, required = false,
                                   default = nil)
  if valid_21627553 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627553
  var valid_21627554 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627554 = validateParameter(valid_21627554, JString, required = false,
                                   default = nil)
  if valid_21627554 != nil:
    section.add "X-Amz-Algorithm", valid_21627554
  var valid_21627555 = header.getOrDefault("X-Amz-Signature")
  valid_21627555 = validateParameter(valid_21627555, JString, required = false,
                                   default = nil)
  if valid_21627555 != nil:
    section.add "X-Amz-Signature", valid_21627555
  var valid_21627556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627556 = validateParameter(valid_21627556, JString, required = false,
                                   default = nil)
  if valid_21627556 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627556
  var valid_21627557 = header.getOrDefault("X-Amz-Credential")
  valid_21627557 = validateParameter(valid_21627557, JString, required = false,
                                   default = nil)
  if valid_21627557 != nil:
    section.add "X-Amz-Credential", valid_21627557
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleNames` field"
  var valid_21627558 = formData.getOrDefault("RuleNames")
  valid_21627558 = validateParameter(valid_21627558, JArray, required = true,
                                   default = nil)
  if valid_21627558 != nil:
    section.add "RuleNames", valid_21627558
  var valid_21627559 = formData.getOrDefault("RuleSetName")
  valid_21627559 = validateParameter(valid_21627559, JString, required = true,
                                   default = nil)
  if valid_21627559 != nil:
    section.add "RuleSetName", valid_21627559
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627560: Call_PostReorderReceiptRuleSet_21627546;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627560.validator(path, query, header, formData, body, _)
  let scheme = call_21627560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627560.makeUrl(scheme.get, call_21627560.host, call_21627560.base,
                               call_21627560.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627560, uri, valid, _)

proc call*(call_21627561: Call_PostReorderReceiptRuleSet_21627546;
          RuleNames: JsonNode; RuleSetName: string;
          Action: string = "ReorderReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627562 = newJObject()
  var formData_21627563 = newJObject()
  if RuleNames != nil:
    formData_21627563.add "RuleNames", RuleNames
  add(formData_21627563, "RuleSetName", newJString(RuleSetName))
  add(query_21627562, "Action", newJString(Action))
  add(query_21627562, "Version", newJString(Version))
  result = call_21627561.call(nil, query_21627562, nil, formData_21627563, nil)

var postReorderReceiptRuleSet* = Call_PostReorderReceiptRuleSet_21627546(
    name: "postReorderReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_PostReorderReceiptRuleSet_21627547, base: "/",
    makeUrl: url_PostReorderReceiptRuleSet_21627548,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReorderReceiptRuleSet_21627529 = ref object of OpenApiRestCall_21625435
proc url_GetReorderReceiptRuleSet_21627531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetReorderReceiptRuleSet_21627530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: JString (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_21627532 = query.getOrDefault("RuleSetName")
  valid_21627532 = validateParameter(valid_21627532, JString, required = true,
                                   default = nil)
  if valid_21627532 != nil:
    section.add "RuleSetName", valid_21627532
  var valid_21627533 = query.getOrDefault("Action")
  valid_21627533 = validateParameter(valid_21627533, JString, required = true, default = newJString(
      "ReorderReceiptRuleSet"))
  if valid_21627533 != nil:
    section.add "Action", valid_21627533
  var valid_21627534 = query.getOrDefault("RuleNames")
  valid_21627534 = validateParameter(valid_21627534, JArray, required = true,
                                   default = nil)
  if valid_21627534 != nil:
    section.add "RuleNames", valid_21627534
  var valid_21627535 = query.getOrDefault("Version")
  valid_21627535 = validateParameter(valid_21627535, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627535 != nil:
    section.add "Version", valid_21627535
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627536 = header.getOrDefault("X-Amz-Date")
  valid_21627536 = validateParameter(valid_21627536, JString, required = false,
                                   default = nil)
  if valid_21627536 != nil:
    section.add "X-Amz-Date", valid_21627536
  var valid_21627537 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627537 = validateParameter(valid_21627537, JString, required = false,
                                   default = nil)
  if valid_21627537 != nil:
    section.add "X-Amz-Security-Token", valid_21627537
  var valid_21627538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627538 = validateParameter(valid_21627538, JString, required = false,
                                   default = nil)
  if valid_21627538 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627538
  var valid_21627539 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627539 = validateParameter(valid_21627539, JString, required = false,
                                   default = nil)
  if valid_21627539 != nil:
    section.add "X-Amz-Algorithm", valid_21627539
  var valid_21627540 = header.getOrDefault("X-Amz-Signature")
  valid_21627540 = validateParameter(valid_21627540, JString, required = false,
                                   default = nil)
  if valid_21627540 != nil:
    section.add "X-Amz-Signature", valid_21627540
  var valid_21627541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627541 = validateParameter(valid_21627541, JString, required = false,
                                   default = nil)
  if valid_21627541 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627541
  var valid_21627542 = header.getOrDefault("X-Amz-Credential")
  valid_21627542 = validateParameter(valid_21627542, JString, required = false,
                                   default = nil)
  if valid_21627542 != nil:
    section.add "X-Amz-Credential", valid_21627542
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627543: Call_GetReorderReceiptRuleSet_21627529;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627543.validator(path, query, header, formData, body, _)
  let scheme = call_21627543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627543.makeUrl(scheme.get, call_21627543.host, call_21627543.base,
                               call_21627543.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627543, uri, valid, _)

proc call*(call_21627544: Call_GetReorderReceiptRuleSet_21627529;
          RuleSetName: string; RuleNames: JsonNode;
          Action: string = "ReorderReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: string (required)
  var query_21627545 = newJObject()
  add(query_21627545, "RuleSetName", newJString(RuleSetName))
  add(query_21627545, "Action", newJString(Action))
  if RuleNames != nil:
    query_21627545.add "RuleNames", RuleNames
  add(query_21627545, "Version", newJString(Version))
  result = call_21627544.call(nil, query_21627545, nil, nil, nil)

var getReorderReceiptRuleSet* = Call_GetReorderReceiptRuleSet_21627529(
    name: "getReorderReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_GetReorderReceiptRuleSet_21627530, base: "/",
    makeUrl: url_GetReorderReceiptRuleSet_21627531,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBounce_21627587 = ref object of OpenApiRestCall_21625435
proc url_PostSendBounce_21627589(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendBounce_21627588(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627590 = query.getOrDefault("Action")
  valid_21627590 = validateParameter(valid_21627590, JString, required = true,
                                   default = newJString("SendBounce"))
  if valid_21627590 != nil:
    section.add "Action", valid_21627590
  var valid_21627591 = query.getOrDefault("Version")
  valid_21627591 = validateParameter(valid_21627591, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627591 != nil:
    section.add "Version", valid_21627591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627592 = header.getOrDefault("X-Amz-Date")
  valid_21627592 = validateParameter(valid_21627592, JString, required = false,
                                   default = nil)
  if valid_21627592 != nil:
    section.add "X-Amz-Date", valid_21627592
  var valid_21627593 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627593 = validateParameter(valid_21627593, JString, required = false,
                                   default = nil)
  if valid_21627593 != nil:
    section.add "X-Amz-Security-Token", valid_21627593
  var valid_21627594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627594 = validateParameter(valid_21627594, JString, required = false,
                                   default = nil)
  if valid_21627594 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627594
  var valid_21627595 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627595 = validateParameter(valid_21627595, JString, required = false,
                                   default = nil)
  if valid_21627595 != nil:
    section.add "X-Amz-Algorithm", valid_21627595
  var valid_21627596 = header.getOrDefault("X-Amz-Signature")
  valid_21627596 = validateParameter(valid_21627596, JString, required = false,
                                   default = nil)
  if valid_21627596 != nil:
    section.add "X-Amz-Signature", valid_21627596
  var valid_21627597 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627597 = validateParameter(valid_21627597, JString, required = false,
                                   default = nil)
  if valid_21627597 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627597
  var valid_21627598 = header.getOrDefault("X-Amz-Credential")
  valid_21627598 = validateParameter(valid_21627598, JString, required = false,
                                   default = nil)
  if valid_21627598 != nil:
    section.add "X-Amz-Credential", valid_21627598
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalMessageId` field"
  var valid_21627599 = formData.getOrDefault("OriginalMessageId")
  valid_21627599 = validateParameter(valid_21627599, JString, required = true,
                                   default = nil)
  if valid_21627599 != nil:
    section.add "OriginalMessageId", valid_21627599
  var valid_21627600 = formData.getOrDefault("BounceSenderArn")
  valid_21627600 = validateParameter(valid_21627600, JString, required = false,
                                   default = nil)
  if valid_21627600 != nil:
    section.add "BounceSenderArn", valid_21627600
  var valid_21627601 = formData.getOrDefault("MessageDsn.ReportingMta")
  valid_21627601 = validateParameter(valid_21627601, JString, required = false,
                                   default = nil)
  if valid_21627601 != nil:
    section.add "MessageDsn.ReportingMta", valid_21627601
  var valid_21627602 = formData.getOrDefault("MessageDsn.ExtensionFields")
  valid_21627602 = validateParameter(valid_21627602, JArray, required = false,
                                   default = nil)
  if valid_21627602 != nil:
    section.add "MessageDsn.ExtensionFields", valid_21627602
  var valid_21627603 = formData.getOrDefault("BounceSender")
  valid_21627603 = validateParameter(valid_21627603, JString, required = true,
                                   default = nil)
  if valid_21627603 != nil:
    section.add "BounceSender", valid_21627603
  var valid_21627604 = formData.getOrDefault("Explanation")
  valid_21627604 = validateParameter(valid_21627604, JString, required = false,
                                   default = nil)
  if valid_21627604 != nil:
    section.add "Explanation", valid_21627604
  var valid_21627605 = formData.getOrDefault("MessageDsn.ArrivalDate")
  valid_21627605 = validateParameter(valid_21627605, JString, required = false,
                                   default = nil)
  if valid_21627605 != nil:
    section.add "MessageDsn.ArrivalDate", valid_21627605
  var valid_21627606 = formData.getOrDefault("BouncedRecipientInfoList")
  valid_21627606 = validateParameter(valid_21627606, JArray, required = true,
                                   default = nil)
  if valid_21627606 != nil:
    section.add "BouncedRecipientInfoList", valid_21627606
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627607: Call_PostSendBounce_21627587; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627607.validator(path, query, header, formData, body, _)
  let scheme = call_21627607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627607.makeUrl(scheme.get, call_21627607.host, call_21627607.base,
                               call_21627607.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627607, uri, valid, _)

proc call*(call_21627608: Call_PostSendBounce_21627587; OriginalMessageId: string;
          BounceSender: string; BouncedRecipientInfoList: JsonNode;
          BounceSenderArn: string = ""; MessageDsnReportingMta: string = "";
          MessageDsnExtensionFields: JsonNode = nil; Explanation: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Version: string (required)
  var query_21627609 = newJObject()
  var formData_21627610 = newJObject()
  add(formData_21627610, "OriginalMessageId", newJString(OriginalMessageId))
  add(formData_21627610, "BounceSenderArn", newJString(BounceSenderArn))
  add(formData_21627610, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  if MessageDsnExtensionFields != nil:
    formData_21627610.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  add(formData_21627610, "BounceSender", newJString(BounceSender))
  add(formData_21627610, "Explanation", newJString(Explanation))
  add(query_21627609, "Action", newJString(Action))
  add(formData_21627610, "MessageDsn.ArrivalDate",
      newJString(MessageDsnArrivalDate))
  if BouncedRecipientInfoList != nil:
    formData_21627610.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_21627609, "Version", newJString(Version))
  result = call_21627608.call(nil, query_21627609, nil, formData_21627610, nil)

var postSendBounce* = Call_PostSendBounce_21627587(name: "postSendBounce",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_PostSendBounce_21627588,
    base: "/", makeUrl: url_PostSendBounce_21627589,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBounce_21627564 = ref object of OpenApiRestCall_21625435
proc url_GetSendBounce_21627566(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendBounce_21627565(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: JString (required)
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: JString (required)
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  section = newJObject()
  var valid_21627567 = query.getOrDefault("Explanation")
  valid_21627567 = validateParameter(valid_21627567, JString, required = false,
                                   default = nil)
  if valid_21627567 != nil:
    section.add "Explanation", valid_21627567
  assert query != nil,
        "query argument is necessary due to required `BounceSender` field"
  var valid_21627568 = query.getOrDefault("BounceSender")
  valid_21627568 = validateParameter(valid_21627568, JString, required = true,
                                   default = nil)
  if valid_21627568 != nil:
    section.add "BounceSender", valid_21627568
  var valid_21627569 = query.getOrDefault("OriginalMessageId")
  valid_21627569 = validateParameter(valid_21627569, JString, required = true,
                                   default = nil)
  if valid_21627569 != nil:
    section.add "OriginalMessageId", valid_21627569
  var valid_21627570 = query.getOrDefault("BouncedRecipientInfoList")
  valid_21627570 = validateParameter(valid_21627570, JArray, required = true,
                                   default = nil)
  if valid_21627570 != nil:
    section.add "BouncedRecipientInfoList", valid_21627570
  var valid_21627571 = query.getOrDefault("Action")
  valid_21627571 = validateParameter(valid_21627571, JString, required = true,
                                   default = newJString("SendBounce"))
  if valid_21627571 != nil:
    section.add "Action", valid_21627571
  var valid_21627572 = query.getOrDefault("BounceSenderArn")
  valid_21627572 = validateParameter(valid_21627572, JString, required = false,
                                   default = nil)
  if valid_21627572 != nil:
    section.add "BounceSenderArn", valid_21627572
  var valid_21627573 = query.getOrDefault("MessageDsn.ArrivalDate")
  valid_21627573 = validateParameter(valid_21627573, JString, required = false,
                                   default = nil)
  if valid_21627573 != nil:
    section.add "MessageDsn.ArrivalDate", valid_21627573
  var valid_21627574 = query.getOrDefault("MessageDsn.ReportingMta")
  valid_21627574 = validateParameter(valid_21627574, JString, required = false,
                                   default = nil)
  if valid_21627574 != nil:
    section.add "MessageDsn.ReportingMta", valid_21627574
  var valid_21627575 = query.getOrDefault("Version")
  valid_21627575 = validateParameter(valid_21627575, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627575 != nil:
    section.add "Version", valid_21627575
  var valid_21627576 = query.getOrDefault("MessageDsn.ExtensionFields")
  valid_21627576 = validateParameter(valid_21627576, JArray, required = false,
                                   default = nil)
  if valid_21627576 != nil:
    section.add "MessageDsn.ExtensionFields", valid_21627576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627577 = header.getOrDefault("X-Amz-Date")
  valid_21627577 = validateParameter(valid_21627577, JString, required = false,
                                   default = nil)
  if valid_21627577 != nil:
    section.add "X-Amz-Date", valid_21627577
  var valid_21627578 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627578 = validateParameter(valid_21627578, JString, required = false,
                                   default = nil)
  if valid_21627578 != nil:
    section.add "X-Amz-Security-Token", valid_21627578
  var valid_21627579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627579 = validateParameter(valid_21627579, JString, required = false,
                                   default = nil)
  if valid_21627579 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627579
  var valid_21627580 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627580 = validateParameter(valid_21627580, JString, required = false,
                                   default = nil)
  if valid_21627580 != nil:
    section.add "X-Amz-Algorithm", valid_21627580
  var valid_21627581 = header.getOrDefault("X-Amz-Signature")
  valid_21627581 = validateParameter(valid_21627581, JString, required = false,
                                   default = nil)
  if valid_21627581 != nil:
    section.add "X-Amz-Signature", valid_21627581
  var valid_21627582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627582 = validateParameter(valid_21627582, JString, required = false,
                                   default = nil)
  if valid_21627582 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627582
  var valid_21627583 = header.getOrDefault("X-Amz-Credential")
  valid_21627583 = validateParameter(valid_21627583, JString, required = false,
                                   default = nil)
  if valid_21627583 != nil:
    section.add "X-Amz-Credential", valid_21627583
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627584: Call_GetSendBounce_21627564; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627584.validator(path, query, header, formData, body, _)
  let scheme = call_21627584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627584.makeUrl(scheme.get, call_21627584.host, call_21627584.base,
                               call_21627584.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627584, uri, valid, _)

proc call*(call_21627585: Call_GetSendBounce_21627564; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          Explanation: string = ""; Action: string = "SendBounce";
          BounceSenderArn: string = ""; MessageDsnArrivalDate: string = "";
          MessageDsnReportingMta: string = ""; Version: string = "2010-12-01";
          MessageDsnExtensionFields: JsonNode = nil): Recallable =
  ## getSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: string (required)
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: string (required)
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  var query_21627586 = newJObject()
  add(query_21627586, "Explanation", newJString(Explanation))
  add(query_21627586, "BounceSender", newJString(BounceSender))
  add(query_21627586, "OriginalMessageId", newJString(OriginalMessageId))
  if BouncedRecipientInfoList != nil:
    query_21627586.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_21627586, "Action", newJString(Action))
  add(query_21627586, "BounceSenderArn", newJString(BounceSenderArn))
  add(query_21627586, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  add(query_21627586, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  add(query_21627586, "Version", newJString(Version))
  if MessageDsnExtensionFields != nil:
    query_21627586.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  result = call_21627585.call(nil, query_21627586, nil, nil, nil)

var getSendBounce* = Call_GetSendBounce_21627564(name: "getSendBounce",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_GetSendBounce_21627565,
    base: "/", makeUrl: url_GetSendBounce_21627566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBulkTemplatedEmail_21627637 = ref object of OpenApiRestCall_21625435
proc url_PostSendBulkTemplatedEmail_21627639(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendBulkTemplatedEmail_21627638(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627640 = query.getOrDefault("Action")
  valid_21627640 = validateParameter(valid_21627640, JString, required = true, default = newJString(
      "SendBulkTemplatedEmail"))
  if valid_21627640 != nil:
    section.add "Action", valid_21627640
  var valid_21627641 = query.getOrDefault("Version")
  valid_21627641 = validateParameter(valid_21627641, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627641 != nil:
    section.add "Version", valid_21627641
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627642 = header.getOrDefault("X-Amz-Date")
  valid_21627642 = validateParameter(valid_21627642, JString, required = false,
                                   default = nil)
  if valid_21627642 != nil:
    section.add "X-Amz-Date", valid_21627642
  var valid_21627643 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627643 = validateParameter(valid_21627643, JString, required = false,
                                   default = nil)
  if valid_21627643 != nil:
    section.add "X-Amz-Security-Token", valid_21627643
  var valid_21627644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627644 = validateParameter(valid_21627644, JString, required = false,
                                   default = nil)
  if valid_21627644 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627644
  var valid_21627645 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627645 = validateParameter(valid_21627645, JString, required = false,
                                   default = nil)
  if valid_21627645 != nil:
    section.add "X-Amz-Algorithm", valid_21627645
  var valid_21627646 = header.getOrDefault("X-Amz-Signature")
  valid_21627646 = validateParameter(valid_21627646, JString, required = false,
                                   default = nil)
  if valid_21627646 != nil:
    section.add "X-Amz-Signature", valid_21627646
  var valid_21627647 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627647 = validateParameter(valid_21627647, JString, required = false,
                                   default = nil)
  if valid_21627647 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627647
  var valid_21627648 = header.getOrDefault("X-Amz-Credential")
  valid_21627648 = validateParameter(valid_21627648, JString, required = false,
                                   default = nil)
  if valid_21627648 != nil:
    section.add "X-Amz-Credential", valid_21627648
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  section = newJObject()
  var valid_21627649 = formData.getOrDefault("ConfigurationSetName")
  valid_21627649 = validateParameter(valid_21627649, JString, required = false,
                                   default = nil)
  if valid_21627649 != nil:
    section.add "ConfigurationSetName", valid_21627649
  var valid_21627650 = formData.getOrDefault("SourceArn")
  valid_21627650 = validateParameter(valid_21627650, JString, required = false,
                                   default = nil)
  if valid_21627650 != nil:
    section.add "SourceArn", valid_21627650
  assert formData != nil,
        "formData argument is necessary due to required `Destinations` field"
  var valid_21627651 = formData.getOrDefault("Destinations")
  valid_21627651 = validateParameter(valid_21627651, JArray, required = true,
                                   default = nil)
  if valid_21627651 != nil:
    section.add "Destinations", valid_21627651
  var valid_21627652 = formData.getOrDefault("DefaultTags")
  valid_21627652 = validateParameter(valid_21627652, JArray, required = false,
                                   default = nil)
  if valid_21627652 != nil:
    section.add "DefaultTags", valid_21627652
  var valid_21627653 = formData.getOrDefault("ReplyToAddresses")
  valid_21627653 = validateParameter(valid_21627653, JArray, required = false,
                                   default = nil)
  if valid_21627653 != nil:
    section.add "ReplyToAddresses", valid_21627653
  var valid_21627654 = formData.getOrDefault("Template")
  valid_21627654 = validateParameter(valid_21627654, JString, required = true,
                                   default = nil)
  if valid_21627654 != nil:
    section.add "Template", valid_21627654
  var valid_21627655 = formData.getOrDefault("ReturnPath")
  valid_21627655 = validateParameter(valid_21627655, JString, required = false,
                                   default = nil)
  if valid_21627655 != nil:
    section.add "ReturnPath", valid_21627655
  var valid_21627656 = formData.getOrDefault("ReturnPathArn")
  valid_21627656 = validateParameter(valid_21627656, JString, required = false,
                                   default = nil)
  if valid_21627656 != nil:
    section.add "ReturnPathArn", valid_21627656
  var valid_21627657 = formData.getOrDefault("DefaultTemplateData")
  valid_21627657 = validateParameter(valid_21627657, JString, required = false,
                                   default = nil)
  if valid_21627657 != nil:
    section.add "DefaultTemplateData", valid_21627657
  var valid_21627658 = formData.getOrDefault("TemplateArn")
  valid_21627658 = validateParameter(valid_21627658, JString, required = false,
                                   default = nil)
  if valid_21627658 != nil:
    section.add "TemplateArn", valid_21627658
  var valid_21627659 = formData.getOrDefault("Source")
  valid_21627659 = validateParameter(valid_21627659, JString, required = true,
                                   default = nil)
  if valid_21627659 != nil:
    section.add "Source", valid_21627659
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627660: Call_PostSendBulkTemplatedEmail_21627637;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_21627660.validator(path, query, header, formData, body, _)
  let scheme = call_21627660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627660.makeUrl(scheme.get, call_21627660.host, call_21627660.base,
                               call_21627660.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627660, uri, valid, _)

proc call*(call_21627661: Call_PostSendBulkTemplatedEmail_21627637;
          Destinations: JsonNode; Template: string; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendBulkTemplatedEmail";
          DefaultTemplateData: string = ""; TemplateArn: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  var query_21627662 = newJObject()
  var formData_21627663 = newJObject()
  add(formData_21627663, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21627663, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_21627663.add "Destinations", Destinations
  if DefaultTags != nil:
    formData_21627663.add "DefaultTags", DefaultTags
  if ReplyToAddresses != nil:
    formData_21627663.add "ReplyToAddresses", ReplyToAddresses
  add(formData_21627663, "Template", newJString(Template))
  add(formData_21627663, "ReturnPath", newJString(ReturnPath))
  add(formData_21627663, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_21627662, "Action", newJString(Action))
  add(formData_21627663, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(formData_21627663, "TemplateArn", newJString(TemplateArn))
  add(query_21627662, "Version", newJString(Version))
  add(formData_21627663, "Source", newJString(Source))
  result = call_21627661.call(nil, query_21627662, nil, formData_21627663, nil)

var postSendBulkTemplatedEmail* = Call_PostSendBulkTemplatedEmail_21627637(
    name: "postSendBulkTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_PostSendBulkTemplatedEmail_21627638, base: "/",
    makeUrl: url_PostSendBulkTemplatedEmail_21627639,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBulkTemplatedEmail_21627611 = ref object of OpenApiRestCall_21625435
proc url_GetSendBulkTemplatedEmail_21627613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendBulkTemplatedEmail_21627612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: JString (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627614 = query.getOrDefault("ReplyToAddresses")
  valid_21627614 = validateParameter(valid_21627614, JArray, required = false,
                                   default = nil)
  if valid_21627614 != nil:
    section.add "ReplyToAddresses", valid_21627614
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_21627615 = query.getOrDefault("Template")
  valid_21627615 = validateParameter(valid_21627615, JString, required = true,
                                   default = nil)
  if valid_21627615 != nil:
    section.add "Template", valid_21627615
  var valid_21627616 = query.getOrDefault("ReturnPathArn")
  valid_21627616 = validateParameter(valid_21627616, JString, required = false,
                                   default = nil)
  if valid_21627616 != nil:
    section.add "ReturnPathArn", valid_21627616
  var valid_21627617 = query.getOrDefault("TemplateArn")
  valid_21627617 = validateParameter(valid_21627617, JString, required = false,
                                   default = nil)
  if valid_21627617 != nil:
    section.add "TemplateArn", valid_21627617
  var valid_21627618 = query.getOrDefault("DefaultTemplateData")
  valid_21627618 = validateParameter(valid_21627618, JString, required = false,
                                   default = nil)
  if valid_21627618 != nil:
    section.add "DefaultTemplateData", valid_21627618
  var valid_21627619 = query.getOrDefault("SourceArn")
  valid_21627619 = validateParameter(valid_21627619, JString, required = false,
                                   default = nil)
  if valid_21627619 != nil:
    section.add "SourceArn", valid_21627619
  var valid_21627620 = query.getOrDefault("DefaultTags")
  valid_21627620 = validateParameter(valid_21627620, JArray, required = false,
                                   default = nil)
  if valid_21627620 != nil:
    section.add "DefaultTags", valid_21627620
  var valid_21627621 = query.getOrDefault("Action")
  valid_21627621 = validateParameter(valid_21627621, JString, required = true, default = newJString(
      "SendBulkTemplatedEmail"))
  if valid_21627621 != nil:
    section.add "Action", valid_21627621
  var valid_21627622 = query.getOrDefault("Destinations")
  valid_21627622 = validateParameter(valid_21627622, JArray, required = true,
                                   default = nil)
  if valid_21627622 != nil:
    section.add "Destinations", valid_21627622
  var valid_21627623 = query.getOrDefault("Source")
  valid_21627623 = validateParameter(valid_21627623, JString, required = true,
                                   default = nil)
  if valid_21627623 != nil:
    section.add "Source", valid_21627623
  var valid_21627624 = query.getOrDefault("ReturnPath")
  valid_21627624 = validateParameter(valid_21627624, JString, required = false,
                                   default = nil)
  if valid_21627624 != nil:
    section.add "ReturnPath", valid_21627624
  var valid_21627625 = query.getOrDefault("ConfigurationSetName")
  valid_21627625 = validateParameter(valid_21627625, JString, required = false,
                                   default = nil)
  if valid_21627625 != nil:
    section.add "ConfigurationSetName", valid_21627625
  var valid_21627626 = query.getOrDefault("Version")
  valid_21627626 = validateParameter(valid_21627626, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627626 != nil:
    section.add "Version", valid_21627626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627627 = header.getOrDefault("X-Amz-Date")
  valid_21627627 = validateParameter(valid_21627627, JString, required = false,
                                   default = nil)
  if valid_21627627 != nil:
    section.add "X-Amz-Date", valid_21627627
  var valid_21627628 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627628 = validateParameter(valid_21627628, JString, required = false,
                                   default = nil)
  if valid_21627628 != nil:
    section.add "X-Amz-Security-Token", valid_21627628
  var valid_21627629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627629 = validateParameter(valid_21627629, JString, required = false,
                                   default = nil)
  if valid_21627629 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627629
  var valid_21627630 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627630 = validateParameter(valid_21627630, JString, required = false,
                                   default = nil)
  if valid_21627630 != nil:
    section.add "X-Amz-Algorithm", valid_21627630
  var valid_21627631 = header.getOrDefault("X-Amz-Signature")
  valid_21627631 = validateParameter(valid_21627631, JString, required = false,
                                   default = nil)
  if valid_21627631 != nil:
    section.add "X-Amz-Signature", valid_21627631
  var valid_21627632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627632 = validateParameter(valid_21627632, JString, required = false,
                                   default = nil)
  if valid_21627632 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627632
  var valid_21627633 = header.getOrDefault("X-Amz-Credential")
  valid_21627633 = validateParameter(valid_21627633, JString, required = false,
                                   default = nil)
  if valid_21627633 != nil:
    section.add "X-Amz-Credential", valid_21627633
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627634: Call_GetSendBulkTemplatedEmail_21627611;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_21627634.validator(path, query, header, formData, body, _)
  let scheme = call_21627634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627634.makeUrl(scheme.get, call_21627634.host, call_21627634.base,
                               call_21627634.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627634, uri, valid, _)

proc call*(call_21627635: Call_GetSendBulkTemplatedEmail_21627611;
          Template: string; Destinations: JsonNode; Source: string;
          ReplyToAddresses: JsonNode = nil; ReturnPathArn: string = "";
          TemplateArn: string = ""; DefaultTemplateData: string = "";
          SourceArn: string = ""; DefaultTags: JsonNode = nil;
          Action: string = "SendBulkTemplatedEmail"; ReturnPath: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: string (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: string (required)
  var query_21627636 = newJObject()
  if ReplyToAddresses != nil:
    query_21627636.add "ReplyToAddresses", ReplyToAddresses
  add(query_21627636, "Template", newJString(Template))
  add(query_21627636, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_21627636, "TemplateArn", newJString(TemplateArn))
  add(query_21627636, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(query_21627636, "SourceArn", newJString(SourceArn))
  if DefaultTags != nil:
    query_21627636.add "DefaultTags", DefaultTags
  add(query_21627636, "Action", newJString(Action))
  if Destinations != nil:
    query_21627636.add "Destinations", Destinations
  add(query_21627636, "Source", newJString(Source))
  add(query_21627636, "ReturnPath", newJString(ReturnPath))
  add(query_21627636, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21627636, "Version", newJString(Version))
  result = call_21627635.call(nil, query_21627636, nil, nil, nil)

var getSendBulkTemplatedEmail* = Call_GetSendBulkTemplatedEmail_21627611(
    name: "getSendBulkTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_GetSendBulkTemplatedEmail_21627612, base: "/",
    makeUrl: url_GetSendBulkTemplatedEmail_21627613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendCustomVerificationEmail_21627682 = ref object of OpenApiRestCall_21625435
proc url_PostSendCustomVerificationEmail_21627684(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendCustomVerificationEmail_21627683(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627685 = query.getOrDefault("Action")
  valid_21627685 = validateParameter(valid_21627685, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_21627685 != nil:
    section.add "Action", valid_21627685
  var valid_21627686 = query.getOrDefault("Version")
  valid_21627686 = validateParameter(valid_21627686, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627686 != nil:
    section.add "Version", valid_21627686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627687 = header.getOrDefault("X-Amz-Date")
  valid_21627687 = validateParameter(valid_21627687, JString, required = false,
                                   default = nil)
  if valid_21627687 != nil:
    section.add "X-Amz-Date", valid_21627687
  var valid_21627688 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627688 = validateParameter(valid_21627688, JString, required = false,
                                   default = nil)
  if valid_21627688 != nil:
    section.add "X-Amz-Security-Token", valid_21627688
  var valid_21627689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627689 = validateParameter(valid_21627689, JString, required = false,
                                   default = nil)
  if valid_21627689 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627689
  var valid_21627690 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627690 = validateParameter(valid_21627690, JString, required = false,
                                   default = nil)
  if valid_21627690 != nil:
    section.add "X-Amz-Algorithm", valid_21627690
  var valid_21627691 = header.getOrDefault("X-Amz-Signature")
  valid_21627691 = validateParameter(valid_21627691, JString, required = false,
                                   default = nil)
  if valid_21627691 != nil:
    section.add "X-Amz-Signature", valid_21627691
  var valid_21627692 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627692 = validateParameter(valid_21627692, JString, required = false,
                                   default = nil)
  if valid_21627692 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627692
  var valid_21627693 = header.getOrDefault("X-Amz-Credential")
  valid_21627693 = validateParameter(valid_21627693, JString, required = false,
                                   default = nil)
  if valid_21627693 != nil:
    section.add "X-Amz-Credential", valid_21627693
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  section = newJObject()
  var valid_21627694 = formData.getOrDefault("ConfigurationSetName")
  valid_21627694 = validateParameter(valid_21627694, JString, required = false,
                                   default = nil)
  if valid_21627694 != nil:
    section.add "ConfigurationSetName", valid_21627694
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_21627695 = formData.getOrDefault("EmailAddress")
  valid_21627695 = validateParameter(valid_21627695, JString, required = true,
                                   default = nil)
  if valid_21627695 != nil:
    section.add "EmailAddress", valid_21627695
  var valid_21627696 = formData.getOrDefault("TemplateName")
  valid_21627696 = validateParameter(valid_21627696, JString, required = true,
                                   default = nil)
  if valid_21627696 != nil:
    section.add "TemplateName", valid_21627696
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627697: Call_PostSendCustomVerificationEmail_21627682;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627697.validator(path, query, header, formData, body, _)
  let scheme = call_21627697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627697.makeUrl(scheme.get, call_21627697.host, call_21627697.base,
                               call_21627697.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627697, uri, valid, _)

proc call*(call_21627698: Call_PostSendCustomVerificationEmail_21627682;
          EmailAddress: string; TemplateName: string;
          ConfigurationSetName: string = "";
          Action: string = "SendCustomVerificationEmail";
          Version: string = "2010-12-01"): Recallable =
  ## postSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: string (required)
  var query_21627699 = newJObject()
  var formData_21627700 = newJObject()
  add(formData_21627700, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21627700, "EmailAddress", newJString(EmailAddress))
  add(query_21627699, "Action", newJString(Action))
  add(formData_21627700, "TemplateName", newJString(TemplateName))
  add(query_21627699, "Version", newJString(Version))
  result = call_21627698.call(nil, query_21627699, nil, formData_21627700, nil)

var postSendCustomVerificationEmail* = Call_PostSendCustomVerificationEmail_21627682(
    name: "postSendCustomVerificationEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_PostSendCustomVerificationEmail_21627683, base: "/",
    makeUrl: url_PostSendCustomVerificationEmail_21627684,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendCustomVerificationEmail_21627664 = ref object of OpenApiRestCall_21625435
proc url_GetSendCustomVerificationEmail_21627666(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendCustomVerificationEmail_21627665(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627667 = query.getOrDefault("Action")
  valid_21627667 = validateParameter(valid_21627667, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_21627667 != nil:
    section.add "Action", valid_21627667
  var valid_21627668 = query.getOrDefault("TemplateName")
  valid_21627668 = validateParameter(valid_21627668, JString, required = true,
                                   default = nil)
  if valid_21627668 != nil:
    section.add "TemplateName", valid_21627668
  var valid_21627669 = query.getOrDefault("EmailAddress")
  valid_21627669 = validateParameter(valid_21627669, JString, required = true,
                                   default = nil)
  if valid_21627669 != nil:
    section.add "EmailAddress", valid_21627669
  var valid_21627670 = query.getOrDefault("ConfigurationSetName")
  valid_21627670 = validateParameter(valid_21627670, JString, required = false,
                                   default = nil)
  if valid_21627670 != nil:
    section.add "ConfigurationSetName", valid_21627670
  var valid_21627671 = query.getOrDefault("Version")
  valid_21627671 = validateParameter(valid_21627671, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627671 != nil:
    section.add "Version", valid_21627671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627672 = header.getOrDefault("X-Amz-Date")
  valid_21627672 = validateParameter(valid_21627672, JString, required = false,
                                   default = nil)
  if valid_21627672 != nil:
    section.add "X-Amz-Date", valid_21627672
  var valid_21627673 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627673 = validateParameter(valid_21627673, JString, required = false,
                                   default = nil)
  if valid_21627673 != nil:
    section.add "X-Amz-Security-Token", valid_21627673
  var valid_21627674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627674 = validateParameter(valid_21627674, JString, required = false,
                                   default = nil)
  if valid_21627674 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627674
  var valid_21627675 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627675 = validateParameter(valid_21627675, JString, required = false,
                                   default = nil)
  if valid_21627675 != nil:
    section.add "X-Amz-Algorithm", valid_21627675
  var valid_21627676 = header.getOrDefault("X-Amz-Signature")
  valid_21627676 = validateParameter(valid_21627676, JString, required = false,
                                   default = nil)
  if valid_21627676 != nil:
    section.add "X-Amz-Signature", valid_21627676
  var valid_21627677 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627677 = validateParameter(valid_21627677, JString, required = false,
                                   default = nil)
  if valid_21627677 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627677
  var valid_21627678 = header.getOrDefault("X-Amz-Credential")
  valid_21627678 = validateParameter(valid_21627678, JString, required = false,
                                   default = nil)
  if valid_21627678 != nil:
    section.add "X-Amz-Credential", valid_21627678
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627679: Call_GetSendCustomVerificationEmail_21627664;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627679.validator(path, query, header, formData, body, _)
  let scheme = call_21627679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627679.makeUrl(scheme.get, call_21627679.host, call_21627679.base,
                               call_21627679.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627679, uri, valid, _)

proc call*(call_21627680: Call_GetSendCustomVerificationEmail_21627664;
          TemplateName: string; EmailAddress: string;
          Action: string = "SendCustomVerificationEmail";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: string (required)
  var query_21627681 = newJObject()
  add(query_21627681, "Action", newJString(Action))
  add(query_21627681, "TemplateName", newJString(TemplateName))
  add(query_21627681, "EmailAddress", newJString(EmailAddress))
  add(query_21627681, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21627681, "Version", newJString(Version))
  result = call_21627680.call(nil, query_21627681, nil, nil, nil)

var getSendCustomVerificationEmail* = Call_GetSendCustomVerificationEmail_21627664(
    name: "getSendCustomVerificationEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_GetSendCustomVerificationEmail_21627665, base: "/",
    makeUrl: url_GetSendCustomVerificationEmail_21627666,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendEmail_21627728 = ref object of OpenApiRestCall_21625435
proc url_PostSendEmail_21627730(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendEmail_21627729(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627731 = query.getOrDefault("Action")
  valid_21627731 = validateParameter(valid_21627731, JString, required = true,
                                   default = newJString("SendEmail"))
  if valid_21627731 != nil:
    section.add "Action", valid_21627731
  var valid_21627732 = query.getOrDefault("Version")
  valid_21627732 = validateParameter(valid_21627732, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627732 != nil:
    section.add "Version", valid_21627732
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627733 = header.getOrDefault("X-Amz-Date")
  valid_21627733 = validateParameter(valid_21627733, JString, required = false,
                                   default = nil)
  if valid_21627733 != nil:
    section.add "X-Amz-Date", valid_21627733
  var valid_21627734 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627734 = validateParameter(valid_21627734, JString, required = false,
                                   default = nil)
  if valid_21627734 != nil:
    section.add "X-Amz-Security-Token", valid_21627734
  var valid_21627735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627735 = validateParameter(valid_21627735, JString, required = false,
                                   default = nil)
  if valid_21627735 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627735
  var valid_21627736 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627736 = validateParameter(valid_21627736, JString, required = false,
                                   default = nil)
  if valid_21627736 != nil:
    section.add "X-Amz-Algorithm", valid_21627736
  var valid_21627737 = header.getOrDefault("X-Amz-Signature")
  valid_21627737 = validateParameter(valid_21627737, JString, required = false,
                                   default = nil)
  if valid_21627737 != nil:
    section.add "X-Amz-Signature", valid_21627737
  var valid_21627738 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627738 = validateParameter(valid_21627738, JString, required = false,
                                   default = nil)
  if valid_21627738 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627738
  var valid_21627739 = header.getOrDefault("X-Amz-Credential")
  valid_21627739 = validateParameter(valid_21627739, JString, required = false,
                                   default = nil)
  if valid_21627739 != nil:
    section.add "X-Amz-Credential", valid_21627739
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_21627740 = formData.getOrDefault("ConfigurationSetName")
  valid_21627740 = validateParameter(valid_21627740, JString, required = false,
                                   default = nil)
  if valid_21627740 != nil:
    section.add "ConfigurationSetName", valid_21627740
  var valid_21627741 = formData.getOrDefault("SourceArn")
  valid_21627741 = validateParameter(valid_21627741, JString, required = false,
                                   default = nil)
  if valid_21627741 != nil:
    section.add "SourceArn", valid_21627741
  var valid_21627742 = formData.getOrDefault("Destination.BccAddresses")
  valid_21627742 = validateParameter(valid_21627742, JArray, required = false,
                                   default = nil)
  if valid_21627742 != nil:
    section.add "Destination.BccAddresses", valid_21627742
  var valid_21627743 = formData.getOrDefault("ReplyToAddresses")
  valid_21627743 = validateParameter(valid_21627743, JArray, required = false,
                                   default = nil)
  if valid_21627743 != nil:
    section.add "ReplyToAddresses", valid_21627743
  var valid_21627744 = formData.getOrDefault("Message.Body")
  valid_21627744 = validateParameter(valid_21627744, JString, required = false,
                                   default = nil)
  if valid_21627744 != nil:
    section.add "Message.Body", valid_21627744
  var valid_21627745 = formData.getOrDefault("Tags")
  valid_21627745 = validateParameter(valid_21627745, JArray, required = false,
                                   default = nil)
  if valid_21627745 != nil:
    section.add "Tags", valid_21627745
  var valid_21627746 = formData.getOrDefault("ReturnPath")
  valid_21627746 = validateParameter(valid_21627746, JString, required = false,
                                   default = nil)
  if valid_21627746 != nil:
    section.add "ReturnPath", valid_21627746
  var valid_21627747 = formData.getOrDefault("ReturnPathArn")
  valid_21627747 = validateParameter(valid_21627747, JString, required = false,
                                   default = nil)
  if valid_21627747 != nil:
    section.add "ReturnPathArn", valid_21627747
  var valid_21627748 = formData.getOrDefault("Destination.CcAddresses")
  valid_21627748 = validateParameter(valid_21627748, JArray, required = false,
                                   default = nil)
  if valid_21627748 != nil:
    section.add "Destination.CcAddresses", valid_21627748
  var valid_21627749 = formData.getOrDefault("Message.Subject")
  valid_21627749 = validateParameter(valid_21627749, JString, required = false,
                                   default = nil)
  if valid_21627749 != nil:
    section.add "Message.Subject", valid_21627749
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_21627750 = formData.getOrDefault("Source")
  valid_21627750 = validateParameter(valid_21627750, JString, required = true,
                                   default = nil)
  if valid_21627750 != nil:
    section.add "Source", valid_21627750
  var valid_21627751 = formData.getOrDefault("Destination.ToAddresses")
  valid_21627751 = validateParameter(valid_21627751, JArray, required = false,
                                   default = nil)
  if valid_21627751 != nil:
    section.add "Destination.ToAddresses", valid_21627751
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627752: Call_PostSendEmail_21627728; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_21627752.validator(path, query, header, formData, body, _)
  let scheme = call_21627752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627752.makeUrl(scheme.get, call_21627752.host, call_21627752.base,
                               call_21627752.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627752, uri, valid, _)

proc call*(call_21627753: Call_PostSendEmail_21627728; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DestinationBccAddresses: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""; Tags: JsonNode = nil; ReturnPath: string = "";
          ReturnPathArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          Version: string = "2010-12-01"; DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_21627754 = newJObject()
  var formData_21627755 = newJObject()
  add(formData_21627755, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21627755, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_21627755.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_21627755.add "ReplyToAddresses", ReplyToAddresses
  add(formData_21627755, "Message.Body", newJString(MessageBody))
  if Tags != nil:
    formData_21627755.add "Tags", Tags
  add(formData_21627755, "ReturnPath", newJString(ReturnPath))
  add(formData_21627755, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_21627754, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    formData_21627755.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_21627755, "Message.Subject", newJString(MessageSubject))
  add(query_21627754, "Version", newJString(Version))
  add(formData_21627755, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_21627755.add "Destination.ToAddresses", DestinationToAddresses
  result = call_21627753.call(nil, query_21627754, nil, formData_21627755, nil)

var postSendEmail* = Call_PostSendEmail_21627728(name: "postSendEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_PostSendEmail_21627729,
    base: "/", makeUrl: url_PostSendEmail_21627730,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendEmail_21627701 = ref object of OpenApiRestCall_21625435
proc url_GetSendEmail_21627703(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendEmail_21627702(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627704 = query.getOrDefault("ReplyToAddresses")
  valid_21627704 = validateParameter(valid_21627704, JArray, required = false,
                                   default = nil)
  if valid_21627704 != nil:
    section.add "ReplyToAddresses", valid_21627704
  var valid_21627705 = query.getOrDefault("Destination.BccAddresses")
  valid_21627705 = validateParameter(valid_21627705, JArray, required = false,
                                   default = nil)
  if valid_21627705 != nil:
    section.add "Destination.BccAddresses", valid_21627705
  var valid_21627706 = query.getOrDefault("ReturnPathArn")
  valid_21627706 = validateParameter(valid_21627706, JString, required = false,
                                   default = nil)
  if valid_21627706 != nil:
    section.add "ReturnPathArn", valid_21627706
  var valid_21627707 = query.getOrDefault("Destination.ToAddresses")
  valid_21627707 = validateParameter(valid_21627707, JArray, required = false,
                                   default = nil)
  if valid_21627707 != nil:
    section.add "Destination.ToAddresses", valid_21627707
  var valid_21627708 = query.getOrDefault("Tags")
  valid_21627708 = validateParameter(valid_21627708, JArray, required = false,
                                   default = nil)
  if valid_21627708 != nil:
    section.add "Tags", valid_21627708
  var valid_21627709 = query.getOrDefault("SourceArn")
  valid_21627709 = validateParameter(valid_21627709, JString, required = false,
                                   default = nil)
  if valid_21627709 != nil:
    section.add "SourceArn", valid_21627709
  var valid_21627710 = query.getOrDefault("Action")
  valid_21627710 = validateParameter(valid_21627710, JString, required = true,
                                   default = newJString("SendEmail"))
  if valid_21627710 != nil:
    section.add "Action", valid_21627710
  var valid_21627711 = query.getOrDefault("Destination.CcAddresses")
  valid_21627711 = validateParameter(valid_21627711, JArray, required = false,
                                   default = nil)
  if valid_21627711 != nil:
    section.add "Destination.CcAddresses", valid_21627711
  var valid_21627712 = query.getOrDefault("Message.Subject")
  valid_21627712 = validateParameter(valid_21627712, JString, required = false,
                                   default = nil)
  if valid_21627712 != nil:
    section.add "Message.Subject", valid_21627712
  var valid_21627713 = query.getOrDefault("Source")
  valid_21627713 = validateParameter(valid_21627713, JString, required = true,
                                   default = nil)
  if valid_21627713 != nil:
    section.add "Source", valid_21627713
  var valid_21627714 = query.getOrDefault("ReturnPath")
  valid_21627714 = validateParameter(valid_21627714, JString, required = false,
                                   default = nil)
  if valid_21627714 != nil:
    section.add "ReturnPath", valid_21627714
  var valid_21627715 = query.getOrDefault("Message.Body")
  valid_21627715 = validateParameter(valid_21627715, JString, required = false,
                                   default = nil)
  if valid_21627715 != nil:
    section.add "Message.Body", valid_21627715
  var valid_21627716 = query.getOrDefault("ConfigurationSetName")
  valid_21627716 = validateParameter(valid_21627716, JString, required = false,
                                   default = nil)
  if valid_21627716 != nil:
    section.add "ConfigurationSetName", valid_21627716
  var valid_21627717 = query.getOrDefault("Version")
  valid_21627717 = validateParameter(valid_21627717, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627717 != nil:
    section.add "Version", valid_21627717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627718 = header.getOrDefault("X-Amz-Date")
  valid_21627718 = validateParameter(valid_21627718, JString, required = false,
                                   default = nil)
  if valid_21627718 != nil:
    section.add "X-Amz-Date", valid_21627718
  var valid_21627719 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627719 = validateParameter(valid_21627719, JString, required = false,
                                   default = nil)
  if valid_21627719 != nil:
    section.add "X-Amz-Security-Token", valid_21627719
  var valid_21627720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627720 = validateParameter(valid_21627720, JString, required = false,
                                   default = nil)
  if valid_21627720 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627720
  var valid_21627721 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627721 = validateParameter(valid_21627721, JString, required = false,
                                   default = nil)
  if valid_21627721 != nil:
    section.add "X-Amz-Algorithm", valid_21627721
  var valid_21627722 = header.getOrDefault("X-Amz-Signature")
  valid_21627722 = validateParameter(valid_21627722, JString, required = false,
                                   default = nil)
  if valid_21627722 != nil:
    section.add "X-Amz-Signature", valid_21627722
  var valid_21627723 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627723 = validateParameter(valid_21627723, JString, required = false,
                                   default = nil)
  if valid_21627723 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627723
  var valid_21627724 = header.getOrDefault("X-Amz-Credential")
  valid_21627724 = validateParameter(valid_21627724, JString, required = false,
                                   default = nil)
  if valid_21627724 != nil:
    section.add "X-Amz-Credential", valid_21627724
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627725: Call_GetSendEmail_21627701; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_21627725.validator(path, query, header, formData, body, _)
  let scheme = call_21627725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627725.makeUrl(scheme.get, call_21627725.host, call_21627725.base,
                               call_21627725.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627725, uri, valid, _)

proc call*(call_21627726: Call_GetSendEmail_21627701; Source: string;
          ReplyToAddresses: JsonNode = nil; DestinationBccAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; DestinationToAddresses: JsonNode = nil;
          Tags: JsonNode = nil; SourceArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          ReturnPath: string = ""; MessageBody: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: string (required)
  var query_21627727 = newJObject()
  if ReplyToAddresses != nil:
    query_21627727.add "ReplyToAddresses", ReplyToAddresses
  if DestinationBccAddresses != nil:
    query_21627727.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_21627727, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_21627727.add "Destination.ToAddresses", DestinationToAddresses
  if Tags != nil:
    query_21627727.add "Tags", Tags
  add(query_21627727, "SourceArn", newJString(SourceArn))
  add(query_21627727, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_21627727.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_21627727, "Message.Subject", newJString(MessageSubject))
  add(query_21627727, "Source", newJString(Source))
  add(query_21627727, "ReturnPath", newJString(ReturnPath))
  add(query_21627727, "Message.Body", newJString(MessageBody))
  add(query_21627727, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21627727, "Version", newJString(Version))
  result = call_21627726.call(nil, query_21627727, nil, nil, nil)

var getSendEmail* = Call_GetSendEmail_21627701(name: "getSendEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_GetSendEmail_21627702,
    base: "/", makeUrl: url_GetSendEmail_21627703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendRawEmail_21627779 = ref object of OpenApiRestCall_21625435
proc url_PostSendRawEmail_21627781(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendRawEmail_21627780(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627782 = query.getOrDefault("Action")
  valid_21627782 = validateParameter(valid_21627782, JString, required = true,
                                   default = newJString("SendRawEmail"))
  if valid_21627782 != nil:
    section.add "Action", valid_21627782
  var valid_21627783 = query.getOrDefault("Version")
  valid_21627783 = validateParameter(valid_21627783, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627783 != nil:
    section.add "Version", valid_21627783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627784 = header.getOrDefault("X-Amz-Date")
  valid_21627784 = validateParameter(valid_21627784, JString, required = false,
                                   default = nil)
  if valid_21627784 != nil:
    section.add "X-Amz-Date", valid_21627784
  var valid_21627785 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627785 = validateParameter(valid_21627785, JString, required = false,
                                   default = nil)
  if valid_21627785 != nil:
    section.add "X-Amz-Security-Token", valid_21627785
  var valid_21627786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627786 = validateParameter(valid_21627786, JString, required = false,
                                   default = nil)
  if valid_21627786 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627786
  var valid_21627787 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627787 = validateParameter(valid_21627787, JString, required = false,
                                   default = nil)
  if valid_21627787 != nil:
    section.add "X-Amz-Algorithm", valid_21627787
  var valid_21627788 = header.getOrDefault("X-Amz-Signature")
  valid_21627788 = validateParameter(valid_21627788, JString, required = false,
                                   default = nil)
  if valid_21627788 != nil:
    section.add "X-Amz-Signature", valid_21627788
  var valid_21627789 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627789 = validateParameter(valid_21627789, JString, required = false,
                                   default = nil)
  if valid_21627789 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627789
  var valid_21627790 = header.getOrDefault("X-Amz-Credential")
  valid_21627790 = validateParameter(valid_21627790, JString, required = false,
                                   default = nil)
  if valid_21627790 != nil:
    section.add "X-Amz-Credential", valid_21627790
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  section = newJObject()
  var valid_21627791 = formData.getOrDefault("ConfigurationSetName")
  valid_21627791 = validateParameter(valid_21627791, JString, required = false,
                                   default = nil)
  if valid_21627791 != nil:
    section.add "ConfigurationSetName", valid_21627791
  var valid_21627792 = formData.getOrDefault("SourceArn")
  valid_21627792 = validateParameter(valid_21627792, JString, required = false,
                                   default = nil)
  if valid_21627792 != nil:
    section.add "SourceArn", valid_21627792
  var valid_21627793 = formData.getOrDefault("Destinations")
  valid_21627793 = validateParameter(valid_21627793, JArray, required = false,
                                   default = nil)
  if valid_21627793 != nil:
    section.add "Destinations", valid_21627793
  var valid_21627794 = formData.getOrDefault("FromArn")
  valid_21627794 = validateParameter(valid_21627794, JString, required = false,
                                   default = nil)
  if valid_21627794 != nil:
    section.add "FromArn", valid_21627794
  var valid_21627795 = formData.getOrDefault("Tags")
  valid_21627795 = validateParameter(valid_21627795, JArray, required = false,
                                   default = nil)
  if valid_21627795 != nil:
    section.add "Tags", valid_21627795
  var valid_21627796 = formData.getOrDefault("ReturnPathArn")
  valid_21627796 = validateParameter(valid_21627796, JString, required = false,
                                   default = nil)
  if valid_21627796 != nil:
    section.add "ReturnPathArn", valid_21627796
  var valid_21627797 = formData.getOrDefault("Source")
  valid_21627797 = validateParameter(valid_21627797, JString, required = false,
                                   default = nil)
  if valid_21627797 != nil:
    section.add "Source", valid_21627797
  var valid_21627798 = formData.getOrDefault("RawMessage.Data")
  valid_21627798 = validateParameter(valid_21627798, JString, required = false,
                                   default = nil)
  if valid_21627798 != nil:
    section.add "RawMessage.Data", valid_21627798
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627799: Call_PostSendRawEmail_21627779; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_21627799.validator(path, query, header, formData, body, _)
  let scheme = call_21627799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627799.makeUrl(scheme.get, call_21627799.host, call_21627799.base,
                               call_21627799.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627799, uri, valid, _)

proc call*(call_21627800: Call_PostSendRawEmail_21627779;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          Destinations: JsonNode = nil; FromArn: string = ""; Tags: JsonNode = nil;
          ReturnPathArn: string = ""; Action: string = "SendRawEmail";
          Version: string = "2010-12-01"; Source: string = "";
          RawMessageData: string = ""): Recallable =
  ## postSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  var query_21627801 = newJObject()
  var formData_21627802 = newJObject()
  add(formData_21627802, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21627802, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_21627802.add "Destinations", Destinations
  add(formData_21627802, "FromArn", newJString(FromArn))
  if Tags != nil:
    formData_21627802.add "Tags", Tags
  add(formData_21627802, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_21627801, "Action", newJString(Action))
  add(query_21627801, "Version", newJString(Version))
  add(formData_21627802, "Source", newJString(Source))
  add(formData_21627802, "RawMessage.Data", newJString(RawMessageData))
  result = call_21627800.call(nil, query_21627801, nil, formData_21627802, nil)

var postSendRawEmail* = Call_PostSendRawEmail_21627779(name: "postSendRawEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_PostSendRawEmail_21627780,
    base: "/", makeUrl: url_PostSendRawEmail_21627781,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendRawEmail_21627756 = ref object of OpenApiRestCall_21625435
proc url_GetSendRawEmail_21627758(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendRawEmail_21627757(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: JString (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627759 = query.getOrDefault("FromArn")
  valid_21627759 = validateParameter(valid_21627759, JString, required = false,
                                   default = nil)
  if valid_21627759 != nil:
    section.add "FromArn", valid_21627759
  var valid_21627760 = query.getOrDefault("RawMessage.Data")
  valid_21627760 = validateParameter(valid_21627760, JString, required = false,
                                   default = nil)
  if valid_21627760 != nil:
    section.add "RawMessage.Data", valid_21627760
  var valid_21627761 = query.getOrDefault("ReturnPathArn")
  valid_21627761 = validateParameter(valid_21627761, JString, required = false,
                                   default = nil)
  if valid_21627761 != nil:
    section.add "ReturnPathArn", valid_21627761
  var valid_21627762 = query.getOrDefault("Tags")
  valid_21627762 = validateParameter(valid_21627762, JArray, required = false,
                                   default = nil)
  if valid_21627762 != nil:
    section.add "Tags", valid_21627762
  var valid_21627763 = query.getOrDefault("SourceArn")
  valid_21627763 = validateParameter(valid_21627763, JString, required = false,
                                   default = nil)
  if valid_21627763 != nil:
    section.add "SourceArn", valid_21627763
  var valid_21627764 = query.getOrDefault("Action")
  valid_21627764 = validateParameter(valid_21627764, JString, required = true,
                                   default = newJString("SendRawEmail"))
  if valid_21627764 != nil:
    section.add "Action", valid_21627764
  var valid_21627765 = query.getOrDefault("Destinations")
  valid_21627765 = validateParameter(valid_21627765, JArray, required = false,
                                   default = nil)
  if valid_21627765 != nil:
    section.add "Destinations", valid_21627765
  var valid_21627766 = query.getOrDefault("Source")
  valid_21627766 = validateParameter(valid_21627766, JString, required = false,
                                   default = nil)
  if valid_21627766 != nil:
    section.add "Source", valid_21627766
  var valid_21627767 = query.getOrDefault("ConfigurationSetName")
  valid_21627767 = validateParameter(valid_21627767, JString, required = false,
                                   default = nil)
  if valid_21627767 != nil:
    section.add "ConfigurationSetName", valid_21627767
  var valid_21627768 = query.getOrDefault("Version")
  valid_21627768 = validateParameter(valid_21627768, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627768 != nil:
    section.add "Version", valid_21627768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627769 = header.getOrDefault("X-Amz-Date")
  valid_21627769 = validateParameter(valid_21627769, JString, required = false,
                                   default = nil)
  if valid_21627769 != nil:
    section.add "X-Amz-Date", valid_21627769
  var valid_21627770 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627770 = validateParameter(valid_21627770, JString, required = false,
                                   default = nil)
  if valid_21627770 != nil:
    section.add "X-Amz-Security-Token", valid_21627770
  var valid_21627771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627771 = validateParameter(valid_21627771, JString, required = false,
                                   default = nil)
  if valid_21627771 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627771
  var valid_21627772 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627772 = validateParameter(valid_21627772, JString, required = false,
                                   default = nil)
  if valid_21627772 != nil:
    section.add "X-Amz-Algorithm", valid_21627772
  var valid_21627773 = header.getOrDefault("X-Amz-Signature")
  valid_21627773 = validateParameter(valid_21627773, JString, required = false,
                                   default = nil)
  if valid_21627773 != nil:
    section.add "X-Amz-Signature", valid_21627773
  var valid_21627774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627774 = validateParameter(valid_21627774, JString, required = false,
                                   default = nil)
  if valid_21627774 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627774
  var valid_21627775 = header.getOrDefault("X-Amz-Credential")
  valid_21627775 = validateParameter(valid_21627775, JString, required = false,
                                   default = nil)
  if valid_21627775 != nil:
    section.add "X-Amz-Credential", valid_21627775
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627776: Call_GetSendRawEmail_21627756; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_21627776.validator(path, query, header, formData, body, _)
  let scheme = call_21627776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627776.makeUrl(scheme.get, call_21627776.host, call_21627776.base,
                               call_21627776.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627776, uri, valid, _)

proc call*(call_21627777: Call_GetSendRawEmail_21627756; FromArn: string = "";
          RawMessageData: string = ""; ReturnPathArn: string = ""; Tags: JsonNode = nil;
          SourceArn: string = ""; Action: string = "SendRawEmail";
          Destinations: JsonNode = nil; Source: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: string (required)
  var query_21627778 = newJObject()
  add(query_21627778, "FromArn", newJString(FromArn))
  add(query_21627778, "RawMessage.Data", newJString(RawMessageData))
  add(query_21627778, "ReturnPathArn", newJString(ReturnPathArn))
  if Tags != nil:
    query_21627778.add "Tags", Tags
  add(query_21627778, "SourceArn", newJString(SourceArn))
  add(query_21627778, "Action", newJString(Action))
  if Destinations != nil:
    query_21627778.add "Destinations", Destinations
  add(query_21627778, "Source", newJString(Source))
  add(query_21627778, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21627778, "Version", newJString(Version))
  result = call_21627777.call(nil, query_21627778, nil, nil, nil)

var getSendRawEmail* = Call_GetSendRawEmail_21627756(name: "getSendRawEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_GetSendRawEmail_21627757,
    base: "/", makeUrl: url_GetSendRawEmail_21627758,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendTemplatedEmail_21627831 = ref object of OpenApiRestCall_21625435
proc url_PostSendTemplatedEmail_21627833(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendTemplatedEmail_21627832(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627834 = query.getOrDefault("Action")
  valid_21627834 = validateParameter(valid_21627834, JString, required = true,
                                   default = newJString("SendTemplatedEmail"))
  if valid_21627834 != nil:
    section.add "Action", valid_21627834
  var valid_21627835 = query.getOrDefault("Version")
  valid_21627835 = validateParameter(valid_21627835, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627835 != nil:
    section.add "Version", valid_21627835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627836 = header.getOrDefault("X-Amz-Date")
  valid_21627836 = validateParameter(valid_21627836, JString, required = false,
                                   default = nil)
  if valid_21627836 != nil:
    section.add "X-Amz-Date", valid_21627836
  var valid_21627837 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627837 = validateParameter(valid_21627837, JString, required = false,
                                   default = nil)
  if valid_21627837 != nil:
    section.add "X-Amz-Security-Token", valid_21627837
  var valid_21627838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627838 = validateParameter(valid_21627838, JString, required = false,
                                   default = nil)
  if valid_21627838 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627838
  var valid_21627839 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627839 = validateParameter(valid_21627839, JString, required = false,
                                   default = nil)
  if valid_21627839 != nil:
    section.add "X-Amz-Algorithm", valid_21627839
  var valid_21627840 = header.getOrDefault("X-Amz-Signature")
  valid_21627840 = validateParameter(valid_21627840, JString, required = false,
                                   default = nil)
  if valid_21627840 != nil:
    section.add "X-Amz-Signature", valid_21627840
  var valid_21627841 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627841 = validateParameter(valid_21627841, JString, required = false,
                                   default = nil)
  if valid_21627841 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627841
  var valid_21627842 = header.getOrDefault("X-Amz-Credential")
  valid_21627842 = validateParameter(valid_21627842, JString, required = false,
                                   default = nil)
  if valid_21627842 != nil:
    section.add "X-Amz-Credential", valid_21627842
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_21627843 = formData.getOrDefault("ConfigurationSetName")
  valid_21627843 = validateParameter(valid_21627843, JString, required = false,
                                   default = nil)
  if valid_21627843 != nil:
    section.add "ConfigurationSetName", valid_21627843
  var valid_21627844 = formData.getOrDefault("SourceArn")
  valid_21627844 = validateParameter(valid_21627844, JString, required = false,
                                   default = nil)
  if valid_21627844 != nil:
    section.add "SourceArn", valid_21627844
  var valid_21627845 = formData.getOrDefault("Destination.BccAddresses")
  valid_21627845 = validateParameter(valid_21627845, JArray, required = false,
                                   default = nil)
  if valid_21627845 != nil:
    section.add "Destination.BccAddresses", valid_21627845
  var valid_21627846 = formData.getOrDefault("ReplyToAddresses")
  valid_21627846 = validateParameter(valid_21627846, JArray, required = false,
                                   default = nil)
  if valid_21627846 != nil:
    section.add "ReplyToAddresses", valid_21627846
  assert formData != nil,
        "formData argument is necessary due to required `Template` field"
  var valid_21627847 = formData.getOrDefault("Template")
  valid_21627847 = validateParameter(valid_21627847, JString, required = true,
                                   default = nil)
  if valid_21627847 != nil:
    section.add "Template", valid_21627847
  var valid_21627848 = formData.getOrDefault("TemplateData")
  valid_21627848 = validateParameter(valid_21627848, JString, required = true,
                                   default = nil)
  if valid_21627848 != nil:
    section.add "TemplateData", valid_21627848
  var valid_21627849 = formData.getOrDefault("Tags")
  valid_21627849 = validateParameter(valid_21627849, JArray, required = false,
                                   default = nil)
  if valid_21627849 != nil:
    section.add "Tags", valid_21627849
  var valid_21627850 = formData.getOrDefault("ReturnPath")
  valid_21627850 = validateParameter(valid_21627850, JString, required = false,
                                   default = nil)
  if valid_21627850 != nil:
    section.add "ReturnPath", valid_21627850
  var valid_21627851 = formData.getOrDefault("ReturnPathArn")
  valid_21627851 = validateParameter(valid_21627851, JString, required = false,
                                   default = nil)
  if valid_21627851 != nil:
    section.add "ReturnPathArn", valid_21627851
  var valid_21627852 = formData.getOrDefault("TemplateArn")
  valid_21627852 = validateParameter(valid_21627852, JString, required = false,
                                   default = nil)
  if valid_21627852 != nil:
    section.add "TemplateArn", valid_21627852
  var valid_21627853 = formData.getOrDefault("Destination.CcAddresses")
  valid_21627853 = validateParameter(valid_21627853, JArray, required = false,
                                   default = nil)
  if valid_21627853 != nil:
    section.add "Destination.CcAddresses", valid_21627853
  var valid_21627854 = formData.getOrDefault("Source")
  valid_21627854 = validateParameter(valid_21627854, JString, required = true,
                                   default = nil)
  if valid_21627854 != nil:
    section.add "Source", valid_21627854
  var valid_21627855 = formData.getOrDefault("Destination.ToAddresses")
  valid_21627855 = validateParameter(valid_21627855, JArray, required = false,
                                   default = nil)
  if valid_21627855 != nil:
    section.add "Destination.ToAddresses", valid_21627855
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627856: Call_PostSendTemplatedEmail_21627831;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_21627856.validator(path, query, header, formData, body, _)
  let scheme = call_21627856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627856.makeUrl(scheme.get, call_21627856.host, call_21627856.base,
                               call_21627856.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627856, uri, valid, _)

proc call*(call_21627857: Call_PostSendTemplatedEmail_21627831; Template: string;
          TemplateData: string; Source: string; ConfigurationSetName: string = "";
          SourceArn: string = ""; DestinationBccAddresses: JsonNode = nil;
          ReplyToAddresses: JsonNode = nil; Tags: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendTemplatedEmail"; TemplateArn: string = "";
          DestinationCcAddresses: JsonNode = nil; Version: string = "2010-12-01";
          DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_21627858 = newJObject()
  var formData_21627859 = newJObject()
  add(formData_21627859, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21627859, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_21627859.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_21627859.add "ReplyToAddresses", ReplyToAddresses
  add(formData_21627859, "Template", newJString(Template))
  add(formData_21627859, "TemplateData", newJString(TemplateData))
  if Tags != nil:
    formData_21627859.add "Tags", Tags
  add(formData_21627859, "ReturnPath", newJString(ReturnPath))
  add(formData_21627859, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_21627858, "Action", newJString(Action))
  add(formData_21627859, "TemplateArn", newJString(TemplateArn))
  if DestinationCcAddresses != nil:
    formData_21627859.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_21627858, "Version", newJString(Version))
  add(formData_21627859, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_21627859.add "Destination.ToAddresses", DestinationToAddresses
  result = call_21627857.call(nil, query_21627858, nil, formData_21627859, nil)

var postSendTemplatedEmail* = Call_PostSendTemplatedEmail_21627831(
    name: "postSendTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_PostSendTemplatedEmail_21627832, base: "/",
    makeUrl: url_PostSendTemplatedEmail_21627833,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendTemplatedEmail_21627803 = ref object of OpenApiRestCall_21625435
proc url_GetSendTemplatedEmail_21627805(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendTemplatedEmail_21627804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627806 = query.getOrDefault("ReplyToAddresses")
  valid_21627806 = validateParameter(valid_21627806, JArray, required = false,
                                   default = nil)
  if valid_21627806 != nil:
    section.add "ReplyToAddresses", valid_21627806
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_21627807 = query.getOrDefault("Template")
  valid_21627807 = validateParameter(valid_21627807, JString, required = true,
                                   default = nil)
  if valid_21627807 != nil:
    section.add "Template", valid_21627807
  var valid_21627808 = query.getOrDefault("Destination.BccAddresses")
  valid_21627808 = validateParameter(valid_21627808, JArray, required = false,
                                   default = nil)
  if valid_21627808 != nil:
    section.add "Destination.BccAddresses", valid_21627808
  var valid_21627809 = query.getOrDefault("ReturnPathArn")
  valid_21627809 = validateParameter(valid_21627809, JString, required = false,
                                   default = nil)
  if valid_21627809 != nil:
    section.add "ReturnPathArn", valid_21627809
  var valid_21627810 = query.getOrDefault("Destination.ToAddresses")
  valid_21627810 = validateParameter(valid_21627810, JArray, required = false,
                                   default = nil)
  if valid_21627810 != nil:
    section.add "Destination.ToAddresses", valid_21627810
  var valid_21627811 = query.getOrDefault("TemplateArn")
  valid_21627811 = validateParameter(valid_21627811, JString, required = false,
                                   default = nil)
  if valid_21627811 != nil:
    section.add "TemplateArn", valid_21627811
  var valid_21627812 = query.getOrDefault("Tags")
  valid_21627812 = validateParameter(valid_21627812, JArray, required = false,
                                   default = nil)
  if valid_21627812 != nil:
    section.add "Tags", valid_21627812
  var valid_21627813 = query.getOrDefault("SourceArn")
  valid_21627813 = validateParameter(valid_21627813, JString, required = false,
                                   default = nil)
  if valid_21627813 != nil:
    section.add "SourceArn", valid_21627813
  var valid_21627814 = query.getOrDefault("TemplateData")
  valid_21627814 = validateParameter(valid_21627814, JString, required = true,
                                   default = nil)
  if valid_21627814 != nil:
    section.add "TemplateData", valid_21627814
  var valid_21627815 = query.getOrDefault("Action")
  valid_21627815 = validateParameter(valid_21627815, JString, required = true,
                                   default = newJString("SendTemplatedEmail"))
  if valid_21627815 != nil:
    section.add "Action", valid_21627815
  var valid_21627816 = query.getOrDefault("Destination.CcAddresses")
  valid_21627816 = validateParameter(valid_21627816, JArray, required = false,
                                   default = nil)
  if valid_21627816 != nil:
    section.add "Destination.CcAddresses", valid_21627816
  var valid_21627817 = query.getOrDefault("Source")
  valid_21627817 = validateParameter(valid_21627817, JString, required = true,
                                   default = nil)
  if valid_21627817 != nil:
    section.add "Source", valid_21627817
  var valid_21627818 = query.getOrDefault("ReturnPath")
  valid_21627818 = validateParameter(valid_21627818, JString, required = false,
                                   default = nil)
  if valid_21627818 != nil:
    section.add "ReturnPath", valid_21627818
  var valid_21627819 = query.getOrDefault("ConfigurationSetName")
  valid_21627819 = validateParameter(valid_21627819, JString, required = false,
                                   default = nil)
  if valid_21627819 != nil:
    section.add "ConfigurationSetName", valid_21627819
  var valid_21627820 = query.getOrDefault("Version")
  valid_21627820 = validateParameter(valid_21627820, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627820 != nil:
    section.add "Version", valid_21627820
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627821 = header.getOrDefault("X-Amz-Date")
  valid_21627821 = validateParameter(valid_21627821, JString, required = false,
                                   default = nil)
  if valid_21627821 != nil:
    section.add "X-Amz-Date", valid_21627821
  var valid_21627822 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627822 = validateParameter(valid_21627822, JString, required = false,
                                   default = nil)
  if valid_21627822 != nil:
    section.add "X-Amz-Security-Token", valid_21627822
  var valid_21627823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627823 = validateParameter(valid_21627823, JString, required = false,
                                   default = nil)
  if valid_21627823 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627823
  var valid_21627824 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627824 = validateParameter(valid_21627824, JString, required = false,
                                   default = nil)
  if valid_21627824 != nil:
    section.add "X-Amz-Algorithm", valid_21627824
  var valid_21627825 = header.getOrDefault("X-Amz-Signature")
  valid_21627825 = validateParameter(valid_21627825, JString, required = false,
                                   default = nil)
  if valid_21627825 != nil:
    section.add "X-Amz-Signature", valid_21627825
  var valid_21627826 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627826 = validateParameter(valid_21627826, JString, required = false,
                                   default = nil)
  if valid_21627826 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627826
  var valid_21627827 = header.getOrDefault("X-Amz-Credential")
  valid_21627827 = validateParameter(valid_21627827, JString, required = false,
                                   default = nil)
  if valid_21627827 != nil:
    section.add "X-Amz-Credential", valid_21627827
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627828: Call_GetSendTemplatedEmail_21627803;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_21627828.validator(path, query, header, formData, body, _)
  let scheme = call_21627828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627828.makeUrl(scheme.get, call_21627828.host, call_21627828.base,
                               call_21627828.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627828, uri, valid, _)

proc call*(call_21627829: Call_GetSendTemplatedEmail_21627803; Template: string;
          TemplateData: string; Source: string; ReplyToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; ReturnPathArn: string = "";
          DestinationToAddresses: JsonNode = nil; TemplateArn: string = "";
          Tags: JsonNode = nil; SourceArn: string = "";
          Action: string = "SendTemplatedEmail";
          DestinationCcAddresses: JsonNode = nil; ReturnPath: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: string (required)
  var query_21627830 = newJObject()
  if ReplyToAddresses != nil:
    query_21627830.add "ReplyToAddresses", ReplyToAddresses
  add(query_21627830, "Template", newJString(Template))
  if DestinationBccAddresses != nil:
    query_21627830.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_21627830, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_21627830.add "Destination.ToAddresses", DestinationToAddresses
  add(query_21627830, "TemplateArn", newJString(TemplateArn))
  if Tags != nil:
    query_21627830.add "Tags", Tags
  add(query_21627830, "SourceArn", newJString(SourceArn))
  add(query_21627830, "TemplateData", newJString(TemplateData))
  add(query_21627830, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_21627830.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_21627830, "Source", newJString(Source))
  add(query_21627830, "ReturnPath", newJString(ReturnPath))
  add(query_21627830, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21627830, "Version", newJString(Version))
  result = call_21627829.call(nil, query_21627830, nil, nil, nil)

var getSendTemplatedEmail* = Call_GetSendTemplatedEmail_21627803(
    name: "getSendTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_GetSendTemplatedEmail_21627804, base: "/",
    makeUrl: url_GetSendTemplatedEmail_21627805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetActiveReceiptRuleSet_21627876 = ref object of OpenApiRestCall_21625435
proc url_PostSetActiveReceiptRuleSet_21627878(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetActiveReceiptRuleSet_21627877(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627879 = query.getOrDefault("Action")
  valid_21627879 = validateParameter(valid_21627879, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_21627879 != nil:
    section.add "Action", valid_21627879
  var valid_21627880 = query.getOrDefault("Version")
  valid_21627880 = validateParameter(valid_21627880, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627880 != nil:
    section.add "Version", valid_21627880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627881 = header.getOrDefault("X-Amz-Date")
  valid_21627881 = validateParameter(valid_21627881, JString, required = false,
                                   default = nil)
  if valid_21627881 != nil:
    section.add "X-Amz-Date", valid_21627881
  var valid_21627882 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627882 = validateParameter(valid_21627882, JString, required = false,
                                   default = nil)
  if valid_21627882 != nil:
    section.add "X-Amz-Security-Token", valid_21627882
  var valid_21627883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627883 = validateParameter(valid_21627883, JString, required = false,
                                   default = nil)
  if valid_21627883 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627883
  var valid_21627884 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627884 = validateParameter(valid_21627884, JString, required = false,
                                   default = nil)
  if valid_21627884 != nil:
    section.add "X-Amz-Algorithm", valid_21627884
  var valid_21627885 = header.getOrDefault("X-Amz-Signature")
  valid_21627885 = validateParameter(valid_21627885, JString, required = false,
                                   default = nil)
  if valid_21627885 != nil:
    section.add "X-Amz-Signature", valid_21627885
  var valid_21627886 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627886 = validateParameter(valid_21627886, JString, required = false,
                                   default = nil)
  if valid_21627886 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627886
  var valid_21627887 = header.getOrDefault("X-Amz-Credential")
  valid_21627887 = validateParameter(valid_21627887, JString, required = false,
                                   default = nil)
  if valid_21627887 != nil:
    section.add "X-Amz-Credential", valid_21627887
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  section = newJObject()
  var valid_21627888 = formData.getOrDefault("RuleSetName")
  valid_21627888 = validateParameter(valid_21627888, JString, required = false,
                                   default = nil)
  if valid_21627888 != nil:
    section.add "RuleSetName", valid_21627888
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627889: Call_PostSetActiveReceiptRuleSet_21627876;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627889.validator(path, query, header, formData, body, _)
  let scheme = call_21627889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627889.makeUrl(scheme.get, call_21627889.host, call_21627889.base,
                               call_21627889.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627889, uri, valid, _)

proc call*(call_21627890: Call_PostSetActiveReceiptRuleSet_21627876;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627891 = newJObject()
  var formData_21627892 = newJObject()
  add(formData_21627892, "RuleSetName", newJString(RuleSetName))
  add(query_21627891, "Action", newJString(Action))
  add(query_21627891, "Version", newJString(Version))
  result = call_21627890.call(nil, query_21627891, nil, formData_21627892, nil)

var postSetActiveReceiptRuleSet* = Call_PostSetActiveReceiptRuleSet_21627876(
    name: "postSetActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_PostSetActiveReceiptRuleSet_21627877, base: "/",
    makeUrl: url_PostSetActiveReceiptRuleSet_21627878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetActiveReceiptRuleSet_21627860 = ref object of OpenApiRestCall_21625435
proc url_GetSetActiveReceiptRuleSet_21627862(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetActiveReceiptRuleSet_21627861(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627863 = query.getOrDefault("RuleSetName")
  valid_21627863 = validateParameter(valid_21627863, JString, required = false,
                                   default = nil)
  if valid_21627863 != nil:
    section.add "RuleSetName", valid_21627863
  var valid_21627864 = query.getOrDefault("Action")
  valid_21627864 = validateParameter(valid_21627864, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_21627864 != nil:
    section.add "Action", valid_21627864
  var valid_21627865 = query.getOrDefault("Version")
  valid_21627865 = validateParameter(valid_21627865, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627865 != nil:
    section.add "Version", valid_21627865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627866 = header.getOrDefault("X-Amz-Date")
  valid_21627866 = validateParameter(valid_21627866, JString, required = false,
                                   default = nil)
  if valid_21627866 != nil:
    section.add "X-Amz-Date", valid_21627866
  var valid_21627867 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627867 = validateParameter(valid_21627867, JString, required = false,
                                   default = nil)
  if valid_21627867 != nil:
    section.add "X-Amz-Security-Token", valid_21627867
  var valid_21627868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627868 = validateParameter(valid_21627868, JString, required = false,
                                   default = nil)
  if valid_21627868 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627868
  var valid_21627869 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627869 = validateParameter(valid_21627869, JString, required = false,
                                   default = nil)
  if valid_21627869 != nil:
    section.add "X-Amz-Algorithm", valid_21627869
  var valid_21627870 = header.getOrDefault("X-Amz-Signature")
  valid_21627870 = validateParameter(valid_21627870, JString, required = false,
                                   default = nil)
  if valid_21627870 != nil:
    section.add "X-Amz-Signature", valid_21627870
  var valid_21627871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627871 = validateParameter(valid_21627871, JString, required = false,
                                   default = nil)
  if valid_21627871 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627871
  var valid_21627872 = header.getOrDefault("X-Amz-Credential")
  valid_21627872 = validateParameter(valid_21627872, JString, required = false,
                                   default = nil)
  if valid_21627872 != nil:
    section.add "X-Amz-Credential", valid_21627872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627873: Call_GetSetActiveReceiptRuleSet_21627860;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21627873.validator(path, query, header, formData, body, _)
  let scheme = call_21627873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627873.makeUrl(scheme.get, call_21627873.host, call_21627873.base,
                               call_21627873.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627873, uri, valid, _)

proc call*(call_21627874: Call_GetSetActiveReceiptRuleSet_21627860;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627875 = newJObject()
  add(query_21627875, "RuleSetName", newJString(RuleSetName))
  add(query_21627875, "Action", newJString(Action))
  add(query_21627875, "Version", newJString(Version))
  result = call_21627874.call(nil, query_21627875, nil, nil, nil)

var getSetActiveReceiptRuleSet* = Call_GetSetActiveReceiptRuleSet_21627860(
    name: "getSetActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_GetSetActiveReceiptRuleSet_21627861, base: "/",
    makeUrl: url_GetSetActiveReceiptRuleSet_21627862,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityDkimEnabled_21627910 = ref object of OpenApiRestCall_21625435
proc url_PostSetIdentityDkimEnabled_21627912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityDkimEnabled_21627911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627913 = query.getOrDefault("Action")
  valid_21627913 = validateParameter(valid_21627913, JString, required = true, default = newJString(
      "SetIdentityDkimEnabled"))
  if valid_21627913 != nil:
    section.add "Action", valid_21627913
  var valid_21627914 = query.getOrDefault("Version")
  valid_21627914 = validateParameter(valid_21627914, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627914 != nil:
    section.add "Version", valid_21627914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627915 = header.getOrDefault("X-Amz-Date")
  valid_21627915 = validateParameter(valid_21627915, JString, required = false,
                                   default = nil)
  if valid_21627915 != nil:
    section.add "X-Amz-Date", valid_21627915
  var valid_21627916 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627916 = validateParameter(valid_21627916, JString, required = false,
                                   default = nil)
  if valid_21627916 != nil:
    section.add "X-Amz-Security-Token", valid_21627916
  var valid_21627917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627917 = validateParameter(valid_21627917, JString, required = false,
                                   default = nil)
  if valid_21627917 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627917
  var valid_21627918 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627918 = validateParameter(valid_21627918, JString, required = false,
                                   default = nil)
  if valid_21627918 != nil:
    section.add "X-Amz-Algorithm", valid_21627918
  var valid_21627919 = header.getOrDefault("X-Amz-Signature")
  valid_21627919 = validateParameter(valid_21627919, JString, required = false,
                                   default = nil)
  if valid_21627919 != nil:
    section.add "X-Amz-Signature", valid_21627919
  var valid_21627920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627920 = validateParameter(valid_21627920, JString, required = false,
                                   default = nil)
  if valid_21627920 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627920
  var valid_21627921 = header.getOrDefault("X-Amz-Credential")
  valid_21627921 = validateParameter(valid_21627921, JString, required = false,
                                   default = nil)
  if valid_21627921 != nil:
    section.add "X-Amz-Credential", valid_21627921
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_21627922 = formData.getOrDefault("Identity")
  valid_21627922 = validateParameter(valid_21627922, JString, required = true,
                                   default = nil)
  if valid_21627922 != nil:
    section.add "Identity", valid_21627922
  var valid_21627923 = formData.getOrDefault("DkimEnabled")
  valid_21627923 = validateParameter(valid_21627923, JBool, required = true,
                                   default = nil)
  if valid_21627923 != nil:
    section.add "DkimEnabled", valid_21627923
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627924: Call_PostSetIdentityDkimEnabled_21627910;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627924.validator(path, query, header, formData, body, _)
  let scheme = call_21627924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627924.makeUrl(scheme.get, call_21627924.host, call_21627924.base,
                               call_21627924.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627924, uri, valid, _)

proc call*(call_21627925: Call_PostSetIdentityDkimEnabled_21627910;
          Identity: string; DkimEnabled: bool;
          Action: string = "SetIdentityDkimEnabled"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: string (required)
  var query_21627926 = newJObject()
  var formData_21627927 = newJObject()
  add(formData_21627927, "Identity", newJString(Identity))
  add(query_21627926, "Action", newJString(Action))
  add(formData_21627927, "DkimEnabled", newJBool(DkimEnabled))
  add(query_21627926, "Version", newJString(Version))
  result = call_21627925.call(nil, query_21627926, nil, formData_21627927, nil)

var postSetIdentityDkimEnabled* = Call_PostSetIdentityDkimEnabled_21627910(
    name: "postSetIdentityDkimEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_PostSetIdentityDkimEnabled_21627911, base: "/",
    makeUrl: url_PostSetIdentityDkimEnabled_21627912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityDkimEnabled_21627893 = ref object of OpenApiRestCall_21625435
proc url_GetSetIdentityDkimEnabled_21627895(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityDkimEnabled_21627894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21627896 = query.getOrDefault("Identity")
  valid_21627896 = validateParameter(valid_21627896, JString, required = true,
                                   default = nil)
  if valid_21627896 != nil:
    section.add "Identity", valid_21627896
  var valid_21627897 = query.getOrDefault("DkimEnabled")
  valid_21627897 = validateParameter(valid_21627897, JBool, required = true,
                                   default = nil)
  if valid_21627897 != nil:
    section.add "DkimEnabled", valid_21627897
  var valid_21627898 = query.getOrDefault("Action")
  valid_21627898 = validateParameter(valid_21627898, JString, required = true, default = newJString(
      "SetIdentityDkimEnabled"))
  if valid_21627898 != nil:
    section.add "Action", valid_21627898
  var valid_21627899 = query.getOrDefault("Version")
  valid_21627899 = validateParameter(valid_21627899, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627899 != nil:
    section.add "Version", valid_21627899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627900 = header.getOrDefault("X-Amz-Date")
  valid_21627900 = validateParameter(valid_21627900, JString, required = false,
                                   default = nil)
  if valid_21627900 != nil:
    section.add "X-Amz-Date", valid_21627900
  var valid_21627901 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627901 = validateParameter(valid_21627901, JString, required = false,
                                   default = nil)
  if valid_21627901 != nil:
    section.add "X-Amz-Security-Token", valid_21627901
  var valid_21627902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627902 = validateParameter(valid_21627902, JString, required = false,
                                   default = nil)
  if valid_21627902 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627902
  var valid_21627903 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627903 = validateParameter(valid_21627903, JString, required = false,
                                   default = nil)
  if valid_21627903 != nil:
    section.add "X-Amz-Algorithm", valid_21627903
  var valid_21627904 = header.getOrDefault("X-Amz-Signature")
  valid_21627904 = validateParameter(valid_21627904, JString, required = false,
                                   default = nil)
  if valid_21627904 != nil:
    section.add "X-Amz-Signature", valid_21627904
  var valid_21627905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627905 = validateParameter(valid_21627905, JString, required = false,
                                   default = nil)
  if valid_21627905 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627905
  var valid_21627906 = header.getOrDefault("X-Amz-Credential")
  valid_21627906 = validateParameter(valid_21627906, JString, required = false,
                                   default = nil)
  if valid_21627906 != nil:
    section.add "X-Amz-Credential", valid_21627906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627907: Call_GetSetIdentityDkimEnabled_21627893;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627907.validator(path, query, header, formData, body, _)
  let scheme = call_21627907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627907.makeUrl(scheme.get, call_21627907.host, call_21627907.base,
                               call_21627907.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627907, uri, valid, _)

proc call*(call_21627908: Call_GetSetIdentityDkimEnabled_21627893;
          Identity: string; DkimEnabled: bool;
          Action: string = "SetIdentityDkimEnabled"; Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627909 = newJObject()
  add(query_21627909, "Identity", newJString(Identity))
  add(query_21627909, "DkimEnabled", newJBool(DkimEnabled))
  add(query_21627909, "Action", newJString(Action))
  add(query_21627909, "Version", newJString(Version))
  result = call_21627908.call(nil, query_21627909, nil, nil, nil)

var getSetIdentityDkimEnabled* = Call_GetSetIdentityDkimEnabled_21627893(
    name: "getSetIdentityDkimEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_GetSetIdentityDkimEnabled_21627894, base: "/",
    makeUrl: url_GetSetIdentityDkimEnabled_21627895,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityFeedbackForwardingEnabled_21627945 = ref object of OpenApiRestCall_21625435
proc url_PostSetIdentityFeedbackForwardingEnabled_21627947(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityFeedbackForwardingEnabled_21627946(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627948 = query.getOrDefault("Action")
  valid_21627948 = validateParameter(valid_21627948, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_21627948 != nil:
    section.add "Action", valid_21627948
  var valid_21627949 = query.getOrDefault("Version")
  valid_21627949 = validateParameter(valid_21627949, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627949 != nil:
    section.add "Version", valid_21627949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627950 = header.getOrDefault("X-Amz-Date")
  valid_21627950 = validateParameter(valid_21627950, JString, required = false,
                                   default = nil)
  if valid_21627950 != nil:
    section.add "X-Amz-Date", valid_21627950
  var valid_21627951 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627951 = validateParameter(valid_21627951, JString, required = false,
                                   default = nil)
  if valid_21627951 != nil:
    section.add "X-Amz-Security-Token", valid_21627951
  var valid_21627952 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627952 = validateParameter(valid_21627952, JString, required = false,
                                   default = nil)
  if valid_21627952 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627952
  var valid_21627953 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627953 = validateParameter(valid_21627953, JString, required = false,
                                   default = nil)
  if valid_21627953 != nil:
    section.add "X-Amz-Algorithm", valid_21627953
  var valid_21627954 = header.getOrDefault("X-Amz-Signature")
  valid_21627954 = validateParameter(valid_21627954, JString, required = false,
                                   default = nil)
  if valid_21627954 != nil:
    section.add "X-Amz-Signature", valid_21627954
  var valid_21627955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627955 = validateParameter(valid_21627955, JString, required = false,
                                   default = nil)
  if valid_21627955 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627955
  var valid_21627956 = header.getOrDefault("X-Amz-Credential")
  valid_21627956 = validateParameter(valid_21627956, JString, required = false,
                                   default = nil)
  if valid_21627956 != nil:
    section.add "X-Amz-Credential", valid_21627956
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_21627957 = formData.getOrDefault("Identity")
  valid_21627957 = validateParameter(valid_21627957, JString, required = true,
                                   default = nil)
  if valid_21627957 != nil:
    section.add "Identity", valid_21627957
  var valid_21627958 = formData.getOrDefault("ForwardingEnabled")
  valid_21627958 = validateParameter(valid_21627958, JBool, required = true,
                                   default = nil)
  if valid_21627958 != nil:
    section.add "ForwardingEnabled", valid_21627958
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627959: Call_PostSetIdentityFeedbackForwardingEnabled_21627945;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627959.validator(path, query, header, formData, body, _)
  let scheme = call_21627959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627959.makeUrl(scheme.get, call_21627959.host, call_21627959.base,
                               call_21627959.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627959, uri, valid, _)

proc call*(call_21627960: Call_PostSetIdentityFeedbackForwardingEnabled_21627945;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  var query_21627961 = newJObject()
  var formData_21627962 = newJObject()
  add(formData_21627962, "Identity", newJString(Identity))
  add(query_21627961, "Action", newJString(Action))
  add(query_21627961, "Version", newJString(Version))
  add(formData_21627962, "ForwardingEnabled", newJBool(ForwardingEnabled))
  result = call_21627960.call(nil, query_21627961, nil, formData_21627962, nil)

var postSetIdentityFeedbackForwardingEnabled* = Call_PostSetIdentityFeedbackForwardingEnabled_21627945(
    name: "postSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_PostSetIdentityFeedbackForwardingEnabled_21627946,
    base: "/", makeUrl: url_PostSetIdentityFeedbackForwardingEnabled_21627947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityFeedbackForwardingEnabled_21627928 = ref object of OpenApiRestCall_21625435
proc url_GetSetIdentityFeedbackForwardingEnabled_21627930(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityFeedbackForwardingEnabled_21627929(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21627931 = query.getOrDefault("Identity")
  valid_21627931 = validateParameter(valid_21627931, JString, required = true,
                                   default = nil)
  if valid_21627931 != nil:
    section.add "Identity", valid_21627931
  var valid_21627932 = query.getOrDefault("ForwardingEnabled")
  valid_21627932 = validateParameter(valid_21627932, JBool, required = true,
                                   default = nil)
  if valid_21627932 != nil:
    section.add "ForwardingEnabled", valid_21627932
  var valid_21627933 = query.getOrDefault("Action")
  valid_21627933 = validateParameter(valid_21627933, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_21627933 != nil:
    section.add "Action", valid_21627933
  var valid_21627934 = query.getOrDefault("Version")
  valid_21627934 = validateParameter(valid_21627934, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627934 != nil:
    section.add "Version", valid_21627934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627935 = header.getOrDefault("X-Amz-Date")
  valid_21627935 = validateParameter(valid_21627935, JString, required = false,
                                   default = nil)
  if valid_21627935 != nil:
    section.add "X-Amz-Date", valid_21627935
  var valid_21627936 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627936 = validateParameter(valid_21627936, JString, required = false,
                                   default = nil)
  if valid_21627936 != nil:
    section.add "X-Amz-Security-Token", valid_21627936
  var valid_21627937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627937 = validateParameter(valid_21627937, JString, required = false,
                                   default = nil)
  if valid_21627937 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627937
  var valid_21627938 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627938 = validateParameter(valid_21627938, JString, required = false,
                                   default = nil)
  if valid_21627938 != nil:
    section.add "X-Amz-Algorithm", valid_21627938
  var valid_21627939 = header.getOrDefault("X-Amz-Signature")
  valid_21627939 = validateParameter(valid_21627939, JString, required = false,
                                   default = nil)
  if valid_21627939 != nil:
    section.add "X-Amz-Signature", valid_21627939
  var valid_21627940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627940 = validateParameter(valid_21627940, JString, required = false,
                                   default = nil)
  if valid_21627940 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627940
  var valid_21627941 = header.getOrDefault("X-Amz-Credential")
  valid_21627941 = validateParameter(valid_21627941, JString, required = false,
                                   default = nil)
  if valid_21627941 != nil:
    section.add "X-Amz-Credential", valid_21627941
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627942: Call_GetSetIdentityFeedbackForwardingEnabled_21627928;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627942.validator(path, query, header, formData, body, _)
  let scheme = call_21627942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627942.makeUrl(scheme.get, call_21627942.host, call_21627942.base,
                               call_21627942.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627942, uri, valid, _)

proc call*(call_21627943: Call_GetSetIdentityFeedbackForwardingEnabled_21627928;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627944 = newJObject()
  add(query_21627944, "Identity", newJString(Identity))
  add(query_21627944, "ForwardingEnabled", newJBool(ForwardingEnabled))
  add(query_21627944, "Action", newJString(Action))
  add(query_21627944, "Version", newJString(Version))
  result = call_21627943.call(nil, query_21627944, nil, nil, nil)

var getSetIdentityFeedbackForwardingEnabled* = Call_GetSetIdentityFeedbackForwardingEnabled_21627928(
    name: "getSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_GetSetIdentityFeedbackForwardingEnabled_21627929,
    base: "/", makeUrl: url_GetSetIdentityFeedbackForwardingEnabled_21627930,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityHeadersInNotificationsEnabled_21627981 = ref object of OpenApiRestCall_21625435
proc url_PostSetIdentityHeadersInNotificationsEnabled_21627983(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityHeadersInNotificationsEnabled_21627982(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627984 = query.getOrDefault("Action")
  valid_21627984 = validateParameter(valid_21627984, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_21627984 != nil:
    section.add "Action", valid_21627984
  var valid_21627985 = query.getOrDefault("Version")
  valid_21627985 = validateParameter(valid_21627985, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627985 != nil:
    section.add "Version", valid_21627985
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627986 = header.getOrDefault("X-Amz-Date")
  valid_21627986 = validateParameter(valid_21627986, JString, required = false,
                                   default = nil)
  if valid_21627986 != nil:
    section.add "X-Amz-Date", valid_21627986
  var valid_21627987 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627987 = validateParameter(valid_21627987, JString, required = false,
                                   default = nil)
  if valid_21627987 != nil:
    section.add "X-Amz-Security-Token", valid_21627987
  var valid_21627988 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627988 = validateParameter(valid_21627988, JString, required = false,
                                   default = nil)
  if valid_21627988 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627988
  var valid_21627989 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627989 = validateParameter(valid_21627989, JString, required = false,
                                   default = nil)
  if valid_21627989 != nil:
    section.add "X-Amz-Algorithm", valid_21627989
  var valid_21627990 = header.getOrDefault("X-Amz-Signature")
  valid_21627990 = validateParameter(valid_21627990, JString, required = false,
                                   default = nil)
  if valid_21627990 != nil:
    section.add "X-Amz-Signature", valid_21627990
  var valid_21627991 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627991 = validateParameter(valid_21627991, JString, required = false,
                                   default = nil)
  if valid_21627991 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627991
  var valid_21627992 = header.getOrDefault("X-Amz-Credential")
  valid_21627992 = validateParameter(valid_21627992, JString, required = false,
                                   default = nil)
  if valid_21627992 != nil:
    section.add "X-Amz-Credential", valid_21627992
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_21627993 = formData.getOrDefault("Enabled")
  valid_21627993 = validateParameter(valid_21627993, JBool, required = true,
                                   default = nil)
  if valid_21627993 != nil:
    section.add "Enabled", valid_21627993
  var valid_21627994 = formData.getOrDefault("Identity")
  valid_21627994 = validateParameter(valid_21627994, JString, required = true,
                                   default = nil)
  if valid_21627994 != nil:
    section.add "Identity", valid_21627994
  var valid_21627995 = formData.getOrDefault("NotificationType")
  valid_21627995 = validateParameter(valid_21627995, JString, required = true,
                                   default = newJString("Bounce"))
  if valid_21627995 != nil:
    section.add "NotificationType", valid_21627995
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627996: Call_PostSetIdentityHeadersInNotificationsEnabled_21627981;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627996.validator(path, query, header, formData, body, _)
  let scheme = call_21627996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627996.makeUrl(scheme.get, call_21627996.host, call_21627996.base,
                               call_21627996.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627996, uri, valid, _)

proc call*(call_21627997: Call_PostSetIdentityHeadersInNotificationsEnabled_21627981;
          Enabled: bool; Identity: string;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_21627998 = newJObject()
  var formData_21627999 = newJObject()
  add(formData_21627999, "Enabled", newJBool(Enabled))
  add(formData_21627999, "Identity", newJString(Identity))
  add(query_21627998, "Action", newJString(Action))
  add(formData_21627999, "NotificationType", newJString(NotificationType))
  add(query_21627998, "Version", newJString(Version))
  result = call_21627997.call(nil, query_21627998, nil, formData_21627999, nil)

var postSetIdentityHeadersInNotificationsEnabled* = Call_PostSetIdentityHeadersInNotificationsEnabled_21627981(
    name: "postSetIdentityHeadersInNotificationsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_PostSetIdentityHeadersInNotificationsEnabled_21627982,
    base: "/", makeUrl: url_PostSetIdentityHeadersInNotificationsEnabled_21627983,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityHeadersInNotificationsEnabled_21627963 = ref object of OpenApiRestCall_21625435
proc url_GetSetIdentityHeadersInNotificationsEnabled_21627965(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityHeadersInNotificationsEnabled_21627964(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21627966 = query.getOrDefault("Identity")
  valid_21627966 = validateParameter(valid_21627966, JString, required = true,
                                   default = nil)
  if valid_21627966 != nil:
    section.add "Identity", valid_21627966
  var valid_21627967 = query.getOrDefault("Enabled")
  valid_21627967 = validateParameter(valid_21627967, JBool, required = true,
                                   default = nil)
  if valid_21627967 != nil:
    section.add "Enabled", valid_21627967
  var valid_21627968 = query.getOrDefault("Action")
  valid_21627968 = validateParameter(valid_21627968, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_21627968 != nil:
    section.add "Action", valid_21627968
  var valid_21627969 = query.getOrDefault("NotificationType")
  valid_21627969 = validateParameter(valid_21627969, JString, required = true,
                                   default = newJString("Bounce"))
  if valid_21627969 != nil:
    section.add "NotificationType", valid_21627969
  var valid_21627970 = query.getOrDefault("Version")
  valid_21627970 = validateParameter(valid_21627970, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21627970 != nil:
    section.add "Version", valid_21627970
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627971 = header.getOrDefault("X-Amz-Date")
  valid_21627971 = validateParameter(valid_21627971, JString, required = false,
                                   default = nil)
  if valid_21627971 != nil:
    section.add "X-Amz-Date", valid_21627971
  var valid_21627972 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627972 = validateParameter(valid_21627972, JString, required = false,
                                   default = nil)
  if valid_21627972 != nil:
    section.add "X-Amz-Security-Token", valid_21627972
  var valid_21627973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627973 = validateParameter(valid_21627973, JString, required = false,
                                   default = nil)
  if valid_21627973 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627973
  var valid_21627974 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627974 = validateParameter(valid_21627974, JString, required = false,
                                   default = nil)
  if valid_21627974 != nil:
    section.add "X-Amz-Algorithm", valid_21627974
  var valid_21627975 = header.getOrDefault("X-Amz-Signature")
  valid_21627975 = validateParameter(valid_21627975, JString, required = false,
                                   default = nil)
  if valid_21627975 != nil:
    section.add "X-Amz-Signature", valid_21627975
  var valid_21627976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627976 = validateParameter(valid_21627976, JString, required = false,
                                   default = nil)
  if valid_21627976 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627976
  var valid_21627977 = header.getOrDefault("X-Amz-Credential")
  valid_21627977 = validateParameter(valid_21627977, JString, required = false,
                                   default = nil)
  if valid_21627977 != nil:
    section.add "X-Amz-Credential", valid_21627977
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627978: Call_GetSetIdentityHeadersInNotificationsEnabled_21627963;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21627978.validator(path, query, header, formData, body, _)
  let scheme = call_21627978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627978.makeUrl(scheme.get, call_21627978.host, call_21627978.base,
                               call_21627978.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627978, uri, valid, _)

proc call*(call_21627979: Call_GetSetIdentityHeadersInNotificationsEnabled_21627963;
          Identity: string; Enabled: bool;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_21627980 = newJObject()
  add(query_21627980, "Identity", newJString(Identity))
  add(query_21627980, "Enabled", newJBool(Enabled))
  add(query_21627980, "Action", newJString(Action))
  add(query_21627980, "NotificationType", newJString(NotificationType))
  add(query_21627980, "Version", newJString(Version))
  result = call_21627979.call(nil, query_21627980, nil, nil, nil)

var getSetIdentityHeadersInNotificationsEnabled* = Call_GetSetIdentityHeadersInNotificationsEnabled_21627963(
    name: "getSetIdentityHeadersInNotificationsEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_GetSetIdentityHeadersInNotificationsEnabled_21627964,
    base: "/", makeUrl: url_GetSetIdentityHeadersInNotificationsEnabled_21627965,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityMailFromDomain_21628018 = ref object of OpenApiRestCall_21625435
proc url_PostSetIdentityMailFromDomain_21628020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityMailFromDomain_21628019(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628021 = query.getOrDefault("Action")
  valid_21628021 = validateParameter(valid_21628021, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_21628021 != nil:
    section.add "Action", valid_21628021
  var valid_21628022 = query.getOrDefault("Version")
  valid_21628022 = validateParameter(valid_21628022, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628022 != nil:
    section.add "Version", valid_21628022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628023 = header.getOrDefault("X-Amz-Date")
  valid_21628023 = validateParameter(valid_21628023, JString, required = false,
                                   default = nil)
  if valid_21628023 != nil:
    section.add "X-Amz-Date", valid_21628023
  var valid_21628024 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628024 = validateParameter(valid_21628024, JString, required = false,
                                   default = nil)
  if valid_21628024 != nil:
    section.add "X-Amz-Security-Token", valid_21628024
  var valid_21628025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628025 = validateParameter(valid_21628025, JString, required = false,
                                   default = nil)
  if valid_21628025 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628025
  var valid_21628026 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628026 = validateParameter(valid_21628026, JString, required = false,
                                   default = nil)
  if valid_21628026 != nil:
    section.add "X-Amz-Algorithm", valid_21628026
  var valid_21628027 = header.getOrDefault("X-Amz-Signature")
  valid_21628027 = validateParameter(valid_21628027, JString, required = false,
                                   default = nil)
  if valid_21628027 != nil:
    section.add "X-Amz-Signature", valid_21628027
  var valid_21628028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628028 = validateParameter(valid_21628028, JString, required = false,
                                   default = nil)
  if valid_21628028 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628028
  var valid_21628029 = header.getOrDefault("X-Amz-Credential")
  valid_21628029 = validateParameter(valid_21628029, JString, required = false,
                                   default = nil)
  if valid_21628029 != nil:
    section.add "X-Amz-Credential", valid_21628029
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_21628030 = formData.getOrDefault("Identity")
  valid_21628030 = validateParameter(valid_21628030, JString, required = true,
                                   default = nil)
  if valid_21628030 != nil:
    section.add "Identity", valid_21628030
  var valid_21628031 = formData.getOrDefault("MailFromDomain")
  valid_21628031 = validateParameter(valid_21628031, JString, required = false,
                                   default = nil)
  if valid_21628031 != nil:
    section.add "MailFromDomain", valid_21628031
  var valid_21628032 = formData.getOrDefault("BehaviorOnMXFailure")
  valid_21628032 = validateParameter(valid_21628032, JString, required = false,
                                   default = newJString("UseDefaultValue"))
  if valid_21628032 != nil:
    section.add "BehaviorOnMXFailure", valid_21628032
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628033: Call_PostSetIdentityMailFromDomain_21628018;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628033.validator(path, query, header, formData, body, _)
  let scheme = call_21628033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628033.makeUrl(scheme.get, call_21628033.host, call_21628033.base,
                               call_21628033.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628033, uri, valid, _)

proc call*(call_21628034: Call_PostSetIdentityMailFromDomain_21628018;
          Identity: string; MailFromDomain: string = "";
          Action: string = "SetIdentityMailFromDomain";
          BehaviorOnMXFailure: string = "UseDefaultValue";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Version: string (required)
  var query_21628035 = newJObject()
  var formData_21628036 = newJObject()
  add(formData_21628036, "Identity", newJString(Identity))
  add(formData_21628036, "MailFromDomain", newJString(MailFromDomain))
  add(query_21628035, "Action", newJString(Action))
  add(formData_21628036, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_21628035, "Version", newJString(Version))
  result = call_21628034.call(nil, query_21628035, nil, formData_21628036, nil)

var postSetIdentityMailFromDomain* = Call_PostSetIdentityMailFromDomain_21628018(
    name: "postSetIdentityMailFromDomain", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_PostSetIdentityMailFromDomain_21628019, base: "/",
    makeUrl: url_PostSetIdentityMailFromDomain_21628020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityMailFromDomain_21628000 = ref object of OpenApiRestCall_21625435
proc url_GetSetIdentityMailFromDomain_21628002(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityMailFromDomain_21628001(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21628003 = query.getOrDefault("Identity")
  valid_21628003 = validateParameter(valid_21628003, JString, required = true,
                                   default = nil)
  if valid_21628003 != nil:
    section.add "Identity", valid_21628003
  var valid_21628004 = query.getOrDefault("BehaviorOnMXFailure")
  valid_21628004 = validateParameter(valid_21628004, JString, required = false,
                                   default = newJString("UseDefaultValue"))
  if valid_21628004 != nil:
    section.add "BehaviorOnMXFailure", valid_21628004
  var valid_21628005 = query.getOrDefault("MailFromDomain")
  valid_21628005 = validateParameter(valid_21628005, JString, required = false,
                                   default = nil)
  if valid_21628005 != nil:
    section.add "MailFromDomain", valid_21628005
  var valid_21628006 = query.getOrDefault("Action")
  valid_21628006 = validateParameter(valid_21628006, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_21628006 != nil:
    section.add "Action", valid_21628006
  var valid_21628007 = query.getOrDefault("Version")
  valid_21628007 = validateParameter(valid_21628007, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628007 != nil:
    section.add "Version", valid_21628007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628008 = header.getOrDefault("X-Amz-Date")
  valid_21628008 = validateParameter(valid_21628008, JString, required = false,
                                   default = nil)
  if valid_21628008 != nil:
    section.add "X-Amz-Date", valid_21628008
  var valid_21628009 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628009 = validateParameter(valid_21628009, JString, required = false,
                                   default = nil)
  if valid_21628009 != nil:
    section.add "X-Amz-Security-Token", valid_21628009
  var valid_21628010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628010 = validateParameter(valid_21628010, JString, required = false,
                                   default = nil)
  if valid_21628010 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628010
  var valid_21628011 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628011 = validateParameter(valid_21628011, JString, required = false,
                                   default = nil)
  if valid_21628011 != nil:
    section.add "X-Amz-Algorithm", valid_21628011
  var valid_21628012 = header.getOrDefault("X-Amz-Signature")
  valid_21628012 = validateParameter(valid_21628012, JString, required = false,
                                   default = nil)
  if valid_21628012 != nil:
    section.add "X-Amz-Signature", valid_21628012
  var valid_21628013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628013 = validateParameter(valid_21628013, JString, required = false,
                                   default = nil)
  if valid_21628013 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628013
  var valid_21628014 = header.getOrDefault("X-Amz-Credential")
  valid_21628014 = validateParameter(valid_21628014, JString, required = false,
                                   default = nil)
  if valid_21628014 != nil:
    section.add "X-Amz-Credential", valid_21628014
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628015: Call_GetSetIdentityMailFromDomain_21628000;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628015.validator(path, query, header, formData, body, _)
  let scheme = call_21628015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628015.makeUrl(scheme.get, call_21628015.host, call_21628015.base,
                               call_21628015.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628015, uri, valid, _)

proc call*(call_21628016: Call_GetSetIdentityMailFromDomain_21628000;
          Identity: string; BehaviorOnMXFailure: string = "UseDefaultValue";
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628017 = newJObject()
  add(query_21628017, "Identity", newJString(Identity))
  add(query_21628017, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_21628017, "MailFromDomain", newJString(MailFromDomain))
  add(query_21628017, "Action", newJString(Action))
  add(query_21628017, "Version", newJString(Version))
  result = call_21628016.call(nil, query_21628017, nil, nil, nil)

var getSetIdentityMailFromDomain* = Call_GetSetIdentityMailFromDomain_21628000(
    name: "getSetIdentityMailFromDomain", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_GetSetIdentityMailFromDomain_21628001, base: "/",
    makeUrl: url_GetSetIdentityMailFromDomain_21628002,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityNotificationTopic_21628055 = ref object of OpenApiRestCall_21625435
proc url_PostSetIdentityNotificationTopic_21628057(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityNotificationTopic_21628056(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628058 = query.getOrDefault("Action")
  valid_21628058 = validateParameter(valid_21628058, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_21628058 != nil:
    section.add "Action", valid_21628058
  var valid_21628059 = query.getOrDefault("Version")
  valid_21628059 = validateParameter(valid_21628059, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628059 != nil:
    section.add "Version", valid_21628059
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628060 = header.getOrDefault("X-Amz-Date")
  valid_21628060 = validateParameter(valid_21628060, JString, required = false,
                                   default = nil)
  if valid_21628060 != nil:
    section.add "X-Amz-Date", valid_21628060
  var valid_21628061 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628061 = validateParameter(valid_21628061, JString, required = false,
                                   default = nil)
  if valid_21628061 != nil:
    section.add "X-Amz-Security-Token", valid_21628061
  var valid_21628062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628062 = validateParameter(valid_21628062, JString, required = false,
                                   default = nil)
  if valid_21628062 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628062
  var valid_21628063 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628063 = validateParameter(valid_21628063, JString, required = false,
                                   default = nil)
  if valid_21628063 != nil:
    section.add "X-Amz-Algorithm", valid_21628063
  var valid_21628064 = header.getOrDefault("X-Amz-Signature")
  valid_21628064 = validateParameter(valid_21628064, JString, required = false,
                                   default = nil)
  if valid_21628064 != nil:
    section.add "X-Amz-Signature", valid_21628064
  var valid_21628065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628065 = validateParameter(valid_21628065, JString, required = false,
                                   default = nil)
  if valid_21628065 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628065
  var valid_21628066 = header.getOrDefault("X-Amz-Credential")
  valid_21628066 = validateParameter(valid_21628066, JString, required = false,
                                   default = nil)
  if valid_21628066 != nil:
    section.add "X-Amz-Credential", valid_21628066
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_21628067 = formData.getOrDefault("Identity")
  valid_21628067 = validateParameter(valid_21628067, JString, required = true,
                                   default = nil)
  if valid_21628067 != nil:
    section.add "Identity", valid_21628067
  var valid_21628068 = formData.getOrDefault("SnsTopic")
  valid_21628068 = validateParameter(valid_21628068, JString, required = false,
                                   default = nil)
  if valid_21628068 != nil:
    section.add "SnsTopic", valid_21628068
  var valid_21628069 = formData.getOrDefault("NotificationType")
  valid_21628069 = validateParameter(valid_21628069, JString, required = true,
                                   default = newJString("Bounce"))
  if valid_21628069 != nil:
    section.add "NotificationType", valid_21628069
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628070: Call_PostSetIdentityNotificationTopic_21628055;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21628070.validator(path, query, header, formData, body, _)
  let scheme = call_21628070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628070.makeUrl(scheme.get, call_21628070.host, call_21628070.base,
                               call_21628070.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628070, uri, valid, _)

proc call*(call_21628071: Call_PostSetIdentityNotificationTopic_21628055;
          Identity: string; SnsTopic: string = "";
          Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  var query_21628072 = newJObject()
  var formData_21628073 = newJObject()
  add(formData_21628073, "Identity", newJString(Identity))
  add(formData_21628073, "SnsTopic", newJString(SnsTopic))
  add(query_21628072, "Action", newJString(Action))
  add(formData_21628073, "NotificationType", newJString(NotificationType))
  add(query_21628072, "Version", newJString(Version))
  result = call_21628071.call(nil, query_21628072, nil, formData_21628073, nil)

var postSetIdentityNotificationTopic* = Call_PostSetIdentityNotificationTopic_21628055(
    name: "postSetIdentityNotificationTopic", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_PostSetIdentityNotificationTopic_21628056, base: "/",
    makeUrl: url_PostSetIdentityNotificationTopic_21628057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityNotificationTopic_21628037 = ref object of OpenApiRestCall_21625435
proc url_GetSetIdentityNotificationTopic_21628039(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityNotificationTopic_21628038(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: JString (required)
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_21628040 = query.getOrDefault("Identity")
  valid_21628040 = validateParameter(valid_21628040, JString, required = true,
                                   default = nil)
  if valid_21628040 != nil:
    section.add "Identity", valid_21628040
  var valid_21628041 = query.getOrDefault("Action")
  valid_21628041 = validateParameter(valid_21628041, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_21628041 != nil:
    section.add "Action", valid_21628041
  var valid_21628042 = query.getOrDefault("NotificationType")
  valid_21628042 = validateParameter(valid_21628042, JString, required = true,
                                   default = newJString("Bounce"))
  if valid_21628042 != nil:
    section.add "NotificationType", valid_21628042
  var valid_21628043 = query.getOrDefault("Version")
  valid_21628043 = validateParameter(valid_21628043, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628043 != nil:
    section.add "Version", valid_21628043
  var valid_21628044 = query.getOrDefault("SnsTopic")
  valid_21628044 = validateParameter(valid_21628044, JString, required = false,
                                   default = nil)
  if valid_21628044 != nil:
    section.add "SnsTopic", valid_21628044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628045 = header.getOrDefault("X-Amz-Date")
  valid_21628045 = validateParameter(valid_21628045, JString, required = false,
                                   default = nil)
  if valid_21628045 != nil:
    section.add "X-Amz-Date", valid_21628045
  var valid_21628046 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628046 = validateParameter(valid_21628046, JString, required = false,
                                   default = nil)
  if valid_21628046 != nil:
    section.add "X-Amz-Security-Token", valid_21628046
  var valid_21628047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628047 = validateParameter(valid_21628047, JString, required = false,
                                   default = nil)
  if valid_21628047 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628047
  var valid_21628048 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628048 = validateParameter(valid_21628048, JString, required = false,
                                   default = nil)
  if valid_21628048 != nil:
    section.add "X-Amz-Algorithm", valid_21628048
  var valid_21628049 = header.getOrDefault("X-Amz-Signature")
  valid_21628049 = validateParameter(valid_21628049, JString, required = false,
                                   default = nil)
  if valid_21628049 != nil:
    section.add "X-Amz-Signature", valid_21628049
  var valid_21628050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628050 = validateParameter(valid_21628050, JString, required = false,
                                   default = nil)
  if valid_21628050 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628050
  var valid_21628051 = header.getOrDefault("X-Amz-Credential")
  valid_21628051 = validateParameter(valid_21628051, JString, required = false,
                                   default = nil)
  if valid_21628051 != nil:
    section.add "X-Amz-Credential", valid_21628051
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628052: Call_GetSetIdentityNotificationTopic_21628037;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21628052.validator(path, query, header, formData, body, _)
  let scheme = call_21628052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628052.makeUrl(scheme.get, call_21628052.host, call_21628052.base,
                               call_21628052.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628052, uri, valid, _)

proc call*(call_21628053: Call_GetSetIdentityNotificationTopic_21628037;
          Identity: string; Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01";
          SnsTopic: string = ""): Recallable =
  ## getSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  var query_21628054 = newJObject()
  add(query_21628054, "Identity", newJString(Identity))
  add(query_21628054, "Action", newJString(Action))
  add(query_21628054, "NotificationType", newJString(NotificationType))
  add(query_21628054, "Version", newJString(Version))
  add(query_21628054, "SnsTopic", newJString(SnsTopic))
  result = call_21628053.call(nil, query_21628054, nil, nil, nil)

var getSetIdentityNotificationTopic* = Call_GetSetIdentityNotificationTopic_21628037(
    name: "getSetIdentityNotificationTopic", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_GetSetIdentityNotificationTopic_21628038, base: "/",
    makeUrl: url_GetSetIdentityNotificationTopic_21628039,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetReceiptRulePosition_21628092 = ref object of OpenApiRestCall_21625435
proc url_PostSetReceiptRulePosition_21628094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetReceiptRulePosition_21628093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628095 = query.getOrDefault("Action")
  valid_21628095 = validateParameter(valid_21628095, JString, required = true, default = newJString(
      "SetReceiptRulePosition"))
  if valid_21628095 != nil:
    section.add "Action", valid_21628095
  var valid_21628096 = query.getOrDefault("Version")
  valid_21628096 = validateParameter(valid_21628096, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628096 != nil:
    section.add "Version", valid_21628096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628097 = header.getOrDefault("X-Amz-Date")
  valid_21628097 = validateParameter(valid_21628097, JString, required = false,
                                   default = nil)
  if valid_21628097 != nil:
    section.add "X-Amz-Date", valid_21628097
  var valid_21628098 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628098 = validateParameter(valid_21628098, JString, required = false,
                                   default = nil)
  if valid_21628098 != nil:
    section.add "X-Amz-Security-Token", valid_21628098
  var valid_21628099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628099 = validateParameter(valid_21628099, JString, required = false,
                                   default = nil)
  if valid_21628099 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628099
  var valid_21628100 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628100 = validateParameter(valid_21628100, JString, required = false,
                                   default = nil)
  if valid_21628100 != nil:
    section.add "X-Amz-Algorithm", valid_21628100
  var valid_21628101 = header.getOrDefault("X-Amz-Signature")
  valid_21628101 = validateParameter(valid_21628101, JString, required = false,
                                   default = nil)
  if valid_21628101 != nil:
    section.add "X-Amz-Signature", valid_21628101
  var valid_21628102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628102 = validateParameter(valid_21628102, JString, required = false,
                                   default = nil)
  if valid_21628102 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628102
  var valid_21628103 = header.getOrDefault("X-Amz-Credential")
  valid_21628103 = validateParameter(valid_21628103, JString, required = false,
                                   default = nil)
  if valid_21628103 != nil:
    section.add "X-Amz-Credential", valid_21628103
  result.add "header", section
  ## parameters in `formData` object:
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  section = newJObject()
  var valid_21628104 = formData.getOrDefault("After")
  valid_21628104 = validateParameter(valid_21628104, JString, required = false,
                                   default = nil)
  if valid_21628104 != nil:
    section.add "After", valid_21628104
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_21628105 = formData.getOrDefault("RuleName")
  valid_21628105 = validateParameter(valid_21628105, JString, required = true,
                                   default = nil)
  if valid_21628105 != nil:
    section.add "RuleName", valid_21628105
  var valid_21628106 = formData.getOrDefault("RuleSetName")
  valid_21628106 = validateParameter(valid_21628106, JString, required = true,
                                   default = nil)
  if valid_21628106 != nil:
    section.add "RuleSetName", valid_21628106
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628107: Call_PostSetReceiptRulePosition_21628092;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628107.validator(path, query, header, formData, body, _)
  let scheme = call_21628107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628107.makeUrl(scheme.get, call_21628107.host, call_21628107.base,
                               call_21628107.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628107, uri, valid, _)

proc call*(call_21628108: Call_PostSetReceiptRulePosition_21628092;
          RuleName: string; RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## postSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628109 = newJObject()
  var formData_21628110 = newJObject()
  add(formData_21628110, "After", newJString(After))
  add(formData_21628110, "RuleName", newJString(RuleName))
  add(formData_21628110, "RuleSetName", newJString(RuleSetName))
  add(query_21628109, "Action", newJString(Action))
  add(query_21628109, "Version", newJString(Version))
  result = call_21628108.call(nil, query_21628109, nil, formData_21628110, nil)

var postSetReceiptRulePosition* = Call_PostSetReceiptRulePosition_21628092(
    name: "postSetReceiptRulePosition", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_PostSetReceiptRulePosition_21628093, base: "/",
    makeUrl: url_PostSetReceiptRulePosition_21628094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetReceiptRulePosition_21628074 = ref object of OpenApiRestCall_21625435
proc url_GetSetReceiptRulePosition_21628076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetReceiptRulePosition_21628075(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_21628077 = query.getOrDefault("RuleName")
  valid_21628077 = validateParameter(valid_21628077, JString, required = true,
                                   default = nil)
  if valid_21628077 != nil:
    section.add "RuleName", valid_21628077
  var valid_21628078 = query.getOrDefault("After")
  valid_21628078 = validateParameter(valid_21628078, JString, required = false,
                                   default = nil)
  if valid_21628078 != nil:
    section.add "After", valid_21628078
  var valid_21628079 = query.getOrDefault("RuleSetName")
  valid_21628079 = validateParameter(valid_21628079, JString, required = true,
                                   default = nil)
  if valid_21628079 != nil:
    section.add "RuleSetName", valid_21628079
  var valid_21628080 = query.getOrDefault("Action")
  valid_21628080 = validateParameter(valid_21628080, JString, required = true, default = newJString(
      "SetReceiptRulePosition"))
  if valid_21628080 != nil:
    section.add "Action", valid_21628080
  var valid_21628081 = query.getOrDefault("Version")
  valid_21628081 = validateParameter(valid_21628081, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628081 != nil:
    section.add "Version", valid_21628081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628082 = header.getOrDefault("X-Amz-Date")
  valid_21628082 = validateParameter(valid_21628082, JString, required = false,
                                   default = nil)
  if valid_21628082 != nil:
    section.add "X-Amz-Date", valid_21628082
  var valid_21628083 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628083 = validateParameter(valid_21628083, JString, required = false,
                                   default = nil)
  if valid_21628083 != nil:
    section.add "X-Amz-Security-Token", valid_21628083
  var valid_21628084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628084 = validateParameter(valid_21628084, JString, required = false,
                                   default = nil)
  if valid_21628084 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628084
  var valid_21628085 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628085 = validateParameter(valid_21628085, JString, required = false,
                                   default = nil)
  if valid_21628085 != nil:
    section.add "X-Amz-Algorithm", valid_21628085
  var valid_21628086 = header.getOrDefault("X-Amz-Signature")
  valid_21628086 = validateParameter(valid_21628086, JString, required = false,
                                   default = nil)
  if valid_21628086 != nil:
    section.add "X-Amz-Signature", valid_21628086
  var valid_21628087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628087 = validateParameter(valid_21628087, JString, required = false,
                                   default = nil)
  if valid_21628087 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628087
  var valid_21628088 = header.getOrDefault("X-Amz-Credential")
  valid_21628088 = validateParameter(valid_21628088, JString, required = false,
                                   default = nil)
  if valid_21628088 != nil:
    section.add "X-Amz-Credential", valid_21628088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628089: Call_GetSetReceiptRulePosition_21628074;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628089.validator(path, query, header, formData, body, _)
  let scheme = call_21628089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628089.makeUrl(scheme.get, call_21628089.host, call_21628089.base,
                               call_21628089.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628089, uri, valid, _)

proc call*(call_21628090: Call_GetSetReceiptRulePosition_21628074;
          RuleName: string; RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## getSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628091 = newJObject()
  add(query_21628091, "RuleName", newJString(RuleName))
  add(query_21628091, "After", newJString(After))
  add(query_21628091, "RuleSetName", newJString(RuleSetName))
  add(query_21628091, "Action", newJString(Action))
  add(query_21628091, "Version", newJString(Version))
  result = call_21628090.call(nil, query_21628091, nil, nil, nil)

var getSetReceiptRulePosition* = Call_GetSetReceiptRulePosition_21628074(
    name: "getSetReceiptRulePosition", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_GetSetReceiptRulePosition_21628075, base: "/",
    makeUrl: url_GetSetReceiptRulePosition_21628076,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestRenderTemplate_21628128 = ref object of OpenApiRestCall_21625435
proc url_PostTestRenderTemplate_21628130(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTestRenderTemplate_21628129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628131 = query.getOrDefault("Action")
  valid_21628131 = validateParameter(valid_21628131, JString, required = true,
                                   default = newJString("TestRenderTemplate"))
  if valid_21628131 != nil:
    section.add "Action", valid_21628131
  var valid_21628132 = query.getOrDefault("Version")
  valid_21628132 = validateParameter(valid_21628132, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628132 != nil:
    section.add "Version", valid_21628132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628133 = header.getOrDefault("X-Amz-Date")
  valid_21628133 = validateParameter(valid_21628133, JString, required = false,
                                   default = nil)
  if valid_21628133 != nil:
    section.add "X-Amz-Date", valid_21628133
  var valid_21628134 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628134 = validateParameter(valid_21628134, JString, required = false,
                                   default = nil)
  if valid_21628134 != nil:
    section.add "X-Amz-Security-Token", valid_21628134
  var valid_21628135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628135 = validateParameter(valid_21628135, JString, required = false,
                                   default = nil)
  if valid_21628135 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628135
  var valid_21628136 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628136 = validateParameter(valid_21628136, JString, required = false,
                                   default = nil)
  if valid_21628136 != nil:
    section.add "X-Amz-Algorithm", valid_21628136
  var valid_21628137 = header.getOrDefault("X-Amz-Signature")
  valid_21628137 = validateParameter(valid_21628137, JString, required = false,
                                   default = nil)
  if valid_21628137 != nil:
    section.add "X-Amz-Signature", valid_21628137
  var valid_21628138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628138 = validateParameter(valid_21628138, JString, required = false,
                                   default = nil)
  if valid_21628138 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628138
  var valid_21628139 = header.getOrDefault("X-Amz-Credential")
  valid_21628139 = validateParameter(valid_21628139, JString, required = false,
                                   default = nil)
  if valid_21628139 != nil:
    section.add "X-Amz-Credential", valid_21628139
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateData` field"
  var valid_21628140 = formData.getOrDefault("TemplateData")
  valid_21628140 = validateParameter(valid_21628140, JString, required = true,
                                   default = nil)
  if valid_21628140 != nil:
    section.add "TemplateData", valid_21628140
  var valid_21628141 = formData.getOrDefault("TemplateName")
  valid_21628141 = validateParameter(valid_21628141, JString, required = true,
                                   default = nil)
  if valid_21628141 != nil:
    section.add "TemplateName", valid_21628141
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628142: Call_PostTestRenderTemplate_21628128;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628142.validator(path, query, header, formData, body, _)
  let scheme = call_21628142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628142.makeUrl(scheme.get, call_21628142.host, call_21628142.base,
                               call_21628142.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628142, uri, valid, _)

proc call*(call_21628143: Call_PostTestRenderTemplate_21628128;
          TemplateData: string; TemplateName: string;
          Action: string = "TestRenderTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_21628144 = newJObject()
  var formData_21628145 = newJObject()
  add(formData_21628145, "TemplateData", newJString(TemplateData))
  add(query_21628144, "Action", newJString(Action))
  add(formData_21628145, "TemplateName", newJString(TemplateName))
  add(query_21628144, "Version", newJString(Version))
  result = call_21628143.call(nil, query_21628144, nil, formData_21628145, nil)

var postTestRenderTemplate* = Call_PostTestRenderTemplate_21628128(
    name: "postTestRenderTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_PostTestRenderTemplate_21628129, base: "/",
    makeUrl: url_PostTestRenderTemplate_21628130,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestRenderTemplate_21628111 = ref object of OpenApiRestCall_21625435
proc url_GetTestRenderTemplate_21628113(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTestRenderTemplate_21628112(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_21628114 = query.getOrDefault("TemplateData")
  valid_21628114 = validateParameter(valid_21628114, JString, required = true,
                                   default = nil)
  if valid_21628114 != nil:
    section.add "TemplateData", valid_21628114
  var valid_21628115 = query.getOrDefault("Action")
  valid_21628115 = validateParameter(valid_21628115, JString, required = true,
                                   default = newJString("TestRenderTemplate"))
  if valid_21628115 != nil:
    section.add "Action", valid_21628115
  var valid_21628116 = query.getOrDefault("TemplateName")
  valid_21628116 = validateParameter(valid_21628116, JString, required = true,
                                   default = nil)
  if valid_21628116 != nil:
    section.add "TemplateName", valid_21628116
  var valid_21628117 = query.getOrDefault("Version")
  valid_21628117 = validateParameter(valid_21628117, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628117 != nil:
    section.add "Version", valid_21628117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628118 = header.getOrDefault("X-Amz-Date")
  valid_21628118 = validateParameter(valid_21628118, JString, required = false,
                                   default = nil)
  if valid_21628118 != nil:
    section.add "X-Amz-Date", valid_21628118
  var valid_21628119 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628119 = validateParameter(valid_21628119, JString, required = false,
                                   default = nil)
  if valid_21628119 != nil:
    section.add "X-Amz-Security-Token", valid_21628119
  var valid_21628120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628120 = validateParameter(valid_21628120, JString, required = false,
                                   default = nil)
  if valid_21628120 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628120
  var valid_21628121 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628121 = validateParameter(valid_21628121, JString, required = false,
                                   default = nil)
  if valid_21628121 != nil:
    section.add "X-Amz-Algorithm", valid_21628121
  var valid_21628122 = header.getOrDefault("X-Amz-Signature")
  valid_21628122 = validateParameter(valid_21628122, JString, required = false,
                                   default = nil)
  if valid_21628122 != nil:
    section.add "X-Amz-Signature", valid_21628122
  var valid_21628123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628123 = validateParameter(valid_21628123, JString, required = false,
                                   default = nil)
  if valid_21628123 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628123
  var valid_21628124 = header.getOrDefault("X-Amz-Credential")
  valid_21628124 = validateParameter(valid_21628124, JString, required = false,
                                   default = nil)
  if valid_21628124 != nil:
    section.add "X-Amz-Credential", valid_21628124
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628125: Call_GetTestRenderTemplate_21628111;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628125.validator(path, query, header, formData, body, _)
  let scheme = call_21628125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628125.makeUrl(scheme.get, call_21628125.host, call_21628125.base,
                               call_21628125.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628125, uri, valid, _)

proc call*(call_21628126: Call_GetTestRenderTemplate_21628111;
          TemplateData: string; TemplateName: string;
          Action: string = "TestRenderTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_21628127 = newJObject()
  add(query_21628127, "TemplateData", newJString(TemplateData))
  add(query_21628127, "Action", newJString(Action))
  add(query_21628127, "TemplateName", newJString(TemplateName))
  add(query_21628127, "Version", newJString(Version))
  result = call_21628126.call(nil, query_21628127, nil, nil, nil)

var getTestRenderTemplate* = Call_GetTestRenderTemplate_21628111(
    name: "getTestRenderTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_GetTestRenderTemplate_21628112, base: "/",
    makeUrl: url_GetTestRenderTemplate_21628113,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountSendingEnabled_21628162 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateAccountSendingEnabled_21628164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountSendingEnabled_21628163(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628165 = query.getOrDefault("Action")
  valid_21628165 = validateParameter(valid_21628165, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_21628165 != nil:
    section.add "Action", valid_21628165
  var valid_21628166 = query.getOrDefault("Version")
  valid_21628166 = validateParameter(valid_21628166, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628166 != nil:
    section.add "Version", valid_21628166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628167 = header.getOrDefault("X-Amz-Date")
  valid_21628167 = validateParameter(valid_21628167, JString, required = false,
                                   default = nil)
  if valid_21628167 != nil:
    section.add "X-Amz-Date", valid_21628167
  var valid_21628168 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628168 = validateParameter(valid_21628168, JString, required = false,
                                   default = nil)
  if valid_21628168 != nil:
    section.add "X-Amz-Security-Token", valid_21628168
  var valid_21628169 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628169 = validateParameter(valid_21628169, JString, required = false,
                                   default = nil)
  if valid_21628169 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628169
  var valid_21628170 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628170 = validateParameter(valid_21628170, JString, required = false,
                                   default = nil)
  if valid_21628170 != nil:
    section.add "X-Amz-Algorithm", valid_21628170
  var valid_21628171 = header.getOrDefault("X-Amz-Signature")
  valid_21628171 = validateParameter(valid_21628171, JString, required = false,
                                   default = nil)
  if valid_21628171 != nil:
    section.add "X-Amz-Signature", valid_21628171
  var valid_21628172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628172 = validateParameter(valid_21628172, JString, required = false,
                                   default = nil)
  if valid_21628172 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628172
  var valid_21628173 = header.getOrDefault("X-Amz-Credential")
  valid_21628173 = validateParameter(valid_21628173, JString, required = false,
                                   default = nil)
  if valid_21628173 != nil:
    section.add "X-Amz-Credential", valid_21628173
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  section = newJObject()
  var valid_21628174 = formData.getOrDefault("Enabled")
  valid_21628174 = validateParameter(valid_21628174, JBool, required = false,
                                   default = nil)
  if valid_21628174 != nil:
    section.add "Enabled", valid_21628174
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628175: Call_PostUpdateAccountSendingEnabled_21628162;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628175.validator(path, query, header, formData, body, _)
  let scheme = call_21628175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628175.makeUrl(scheme.get, call_21628175.host, call_21628175.base,
                               call_21628175.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628175, uri, valid, _)

proc call*(call_21628176: Call_PostUpdateAccountSendingEnabled_21628162;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628177 = newJObject()
  var formData_21628178 = newJObject()
  add(formData_21628178, "Enabled", newJBool(Enabled))
  add(query_21628177, "Action", newJString(Action))
  add(query_21628177, "Version", newJString(Version))
  result = call_21628176.call(nil, query_21628177, nil, formData_21628178, nil)

var postUpdateAccountSendingEnabled* = Call_PostUpdateAccountSendingEnabled_21628162(
    name: "postUpdateAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_PostUpdateAccountSendingEnabled_21628163, base: "/",
    makeUrl: url_PostUpdateAccountSendingEnabled_21628164,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountSendingEnabled_21628146 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateAccountSendingEnabled_21628148(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountSendingEnabled_21628147(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628149 = query.getOrDefault("Enabled")
  valid_21628149 = validateParameter(valid_21628149, JBool, required = false,
                                   default = nil)
  if valid_21628149 != nil:
    section.add "Enabled", valid_21628149
  var valid_21628150 = query.getOrDefault("Action")
  valid_21628150 = validateParameter(valid_21628150, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_21628150 != nil:
    section.add "Action", valid_21628150
  var valid_21628151 = query.getOrDefault("Version")
  valid_21628151 = validateParameter(valid_21628151, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628151 != nil:
    section.add "Version", valid_21628151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628152 = header.getOrDefault("X-Amz-Date")
  valid_21628152 = validateParameter(valid_21628152, JString, required = false,
                                   default = nil)
  if valid_21628152 != nil:
    section.add "X-Amz-Date", valid_21628152
  var valid_21628153 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628153 = validateParameter(valid_21628153, JString, required = false,
                                   default = nil)
  if valid_21628153 != nil:
    section.add "X-Amz-Security-Token", valid_21628153
  var valid_21628154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628154 = validateParameter(valid_21628154, JString, required = false,
                                   default = nil)
  if valid_21628154 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628154
  var valid_21628155 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628155 = validateParameter(valid_21628155, JString, required = false,
                                   default = nil)
  if valid_21628155 != nil:
    section.add "X-Amz-Algorithm", valid_21628155
  var valid_21628156 = header.getOrDefault("X-Amz-Signature")
  valid_21628156 = validateParameter(valid_21628156, JString, required = false,
                                   default = nil)
  if valid_21628156 != nil:
    section.add "X-Amz-Signature", valid_21628156
  var valid_21628157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628157 = validateParameter(valid_21628157, JString, required = false,
                                   default = nil)
  if valid_21628157 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628157
  var valid_21628158 = header.getOrDefault("X-Amz-Credential")
  valid_21628158 = validateParameter(valid_21628158, JString, required = false,
                                   default = nil)
  if valid_21628158 != nil:
    section.add "X-Amz-Credential", valid_21628158
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628159: Call_GetUpdateAccountSendingEnabled_21628146;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628159.validator(path, query, header, formData, body, _)
  let scheme = call_21628159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628159.makeUrl(scheme.get, call_21628159.host, call_21628159.base,
                               call_21628159.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628159, uri, valid, _)

proc call*(call_21628160: Call_GetUpdateAccountSendingEnabled_21628146;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628161 = newJObject()
  add(query_21628161, "Enabled", newJBool(Enabled))
  add(query_21628161, "Action", newJString(Action))
  add(query_21628161, "Version", newJString(Version))
  result = call_21628160.call(nil, query_21628161, nil, nil, nil)

var getUpdateAccountSendingEnabled* = Call_GetUpdateAccountSendingEnabled_21628146(
    name: "getUpdateAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_GetUpdateAccountSendingEnabled_21628147, base: "/",
    makeUrl: url_GetUpdateAccountSendingEnabled_21628148,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetEventDestination_21628201 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateConfigurationSetEventDestination_21628203(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetEventDestination_21628202(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628204 = query.getOrDefault("Action")
  valid_21628204 = validateParameter(valid_21628204, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_21628204 != nil:
    section.add "Action", valid_21628204
  var valid_21628205 = query.getOrDefault("Version")
  valid_21628205 = validateParameter(valid_21628205, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628205 != nil:
    section.add "Version", valid_21628205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628206 = header.getOrDefault("X-Amz-Date")
  valid_21628206 = validateParameter(valid_21628206, JString, required = false,
                                   default = nil)
  if valid_21628206 != nil:
    section.add "X-Amz-Date", valid_21628206
  var valid_21628207 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628207 = validateParameter(valid_21628207, JString, required = false,
                                   default = nil)
  if valid_21628207 != nil:
    section.add "X-Amz-Security-Token", valid_21628207
  var valid_21628208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628208 = validateParameter(valid_21628208, JString, required = false,
                                   default = nil)
  if valid_21628208 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628208
  var valid_21628209 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628209 = validateParameter(valid_21628209, JString, required = false,
                                   default = nil)
  if valid_21628209 != nil:
    section.add "X-Amz-Algorithm", valid_21628209
  var valid_21628210 = header.getOrDefault("X-Amz-Signature")
  valid_21628210 = validateParameter(valid_21628210, JString, required = false,
                                   default = nil)
  if valid_21628210 != nil:
    section.add "X-Amz-Signature", valid_21628210
  var valid_21628211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628211 = validateParameter(valid_21628211, JString, required = false,
                                   default = nil)
  if valid_21628211 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628211
  var valid_21628212 = header.getOrDefault("X-Amz-Credential")
  valid_21628212 = validateParameter(valid_21628212, JString, required = false,
                                   default = nil)
  if valid_21628212 != nil:
    section.add "X-Amz-Credential", valid_21628212
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21628213 = formData.getOrDefault("ConfigurationSetName")
  valid_21628213 = validateParameter(valid_21628213, JString, required = true,
                                   default = nil)
  if valid_21628213 != nil:
    section.add "ConfigurationSetName", valid_21628213
  var valid_21628214 = formData.getOrDefault("EventDestination.Name")
  valid_21628214 = validateParameter(valid_21628214, JString, required = false,
                                   default = nil)
  if valid_21628214 != nil:
    section.add "EventDestination.Name", valid_21628214
  var valid_21628215 = formData.getOrDefault(
      "EventDestination.CloudWatchDestination")
  valid_21628215 = validateParameter(valid_21628215, JString, required = false,
                                   default = nil)
  if valid_21628215 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_21628215
  var valid_21628216 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_21628216 = validateParameter(valid_21628216, JArray, required = false,
                                   default = nil)
  if valid_21628216 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_21628216
  var valid_21628217 = formData.getOrDefault(
      "EventDestination.KinesisFirehoseDestination")
  valid_21628217 = validateParameter(valid_21628217, JString, required = false,
                                   default = nil)
  if valid_21628217 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_21628217
  var valid_21628218 = formData.getOrDefault("EventDestination.Enabled")
  valid_21628218 = validateParameter(valid_21628218, JString, required = false,
                                   default = nil)
  if valid_21628218 != nil:
    section.add "EventDestination.Enabled", valid_21628218
  var valid_21628219 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_21628219 = validateParameter(valid_21628219, JString, required = false,
                                   default = nil)
  if valid_21628219 != nil:
    section.add "EventDestination.SNSDestination", valid_21628219
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628220: Call_PostUpdateConfigurationSetEventDestination_21628201;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628220.validator(path, query, header, formData, body, _)
  let scheme = call_21628220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628220.makeUrl(scheme.get, call_21628220.host, call_21628220.base,
                               call_21628220.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628220, uri, valid, _)

proc call*(call_21628221: Call_PostUpdateConfigurationSetEventDestination_21628201;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_21628222 = newJObject()
  var formData_21628223 = newJObject()
  add(formData_21628223, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21628223, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_21628223, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_21628222, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_21628223.add "EventDestination.MatchingEventTypes",
                         EventDestinationMatchingEventTypes
  add(formData_21628223, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_21628223, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_21628223, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_21628222, "Version", newJString(Version))
  result = call_21628221.call(nil, query_21628222, nil, formData_21628223, nil)

var postUpdateConfigurationSetEventDestination* = Call_PostUpdateConfigurationSetEventDestination_21628201(
    name: "postUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_PostUpdateConfigurationSetEventDestination_21628202,
    base: "/", makeUrl: url_PostUpdateConfigurationSetEventDestination_21628203,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetEventDestination_21628179 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateConfigurationSetEventDestination_21628181(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetEventDestination_21628180(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628182 = query.getOrDefault("EventDestination.Enabled")
  valid_21628182 = validateParameter(valid_21628182, JString, required = false,
                                   default = nil)
  if valid_21628182 != nil:
    section.add "EventDestination.Enabled", valid_21628182
  var valid_21628183 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_21628183 = validateParameter(valid_21628183, JString, required = false,
                                   default = nil)
  if valid_21628183 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_21628183
  var valid_21628184 = query.getOrDefault("Action")
  valid_21628184 = validateParameter(valid_21628184, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_21628184 != nil:
    section.add "Action", valid_21628184
  var valid_21628185 = query.getOrDefault("EventDestination.Name")
  valid_21628185 = validateParameter(valid_21628185, JString, required = false,
                                   default = nil)
  if valid_21628185 != nil:
    section.add "EventDestination.Name", valid_21628185
  var valid_21628186 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_21628186 = validateParameter(valid_21628186, JString, required = false,
                                   default = nil)
  if valid_21628186 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_21628186
  var valid_21628187 = query.getOrDefault("EventDestination.SNSDestination")
  valid_21628187 = validateParameter(valid_21628187, JString, required = false,
                                   default = nil)
  if valid_21628187 != nil:
    section.add "EventDestination.SNSDestination", valid_21628187
  var valid_21628188 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_21628188 = validateParameter(valid_21628188, JArray, required = false,
                                   default = nil)
  if valid_21628188 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_21628188
  var valid_21628189 = query.getOrDefault("ConfigurationSetName")
  valid_21628189 = validateParameter(valid_21628189, JString, required = true,
                                   default = nil)
  if valid_21628189 != nil:
    section.add "ConfigurationSetName", valid_21628189
  var valid_21628190 = query.getOrDefault("Version")
  valid_21628190 = validateParameter(valid_21628190, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628190 != nil:
    section.add "Version", valid_21628190
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628191 = header.getOrDefault("X-Amz-Date")
  valid_21628191 = validateParameter(valid_21628191, JString, required = false,
                                   default = nil)
  if valid_21628191 != nil:
    section.add "X-Amz-Date", valid_21628191
  var valid_21628192 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628192 = validateParameter(valid_21628192, JString, required = false,
                                   default = nil)
  if valid_21628192 != nil:
    section.add "X-Amz-Security-Token", valid_21628192
  var valid_21628193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628193 = validateParameter(valid_21628193, JString, required = false,
                                   default = nil)
  if valid_21628193 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628193
  var valid_21628194 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628194 = validateParameter(valid_21628194, JString, required = false,
                                   default = nil)
  if valid_21628194 != nil:
    section.add "X-Amz-Algorithm", valid_21628194
  var valid_21628195 = header.getOrDefault("X-Amz-Signature")
  valid_21628195 = validateParameter(valid_21628195, JString, required = false,
                                   default = nil)
  if valid_21628195 != nil:
    section.add "X-Amz-Signature", valid_21628195
  var valid_21628196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628196 = validateParameter(valid_21628196, JString, required = false,
                                   default = nil)
  if valid_21628196 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628196
  var valid_21628197 = header.getOrDefault("X-Amz-Credential")
  valid_21628197 = validateParameter(valid_21628197, JString, required = false,
                                   default = nil)
  if valid_21628197 != nil:
    section.add "X-Amz-Credential", valid_21628197
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628198: Call_GetUpdateConfigurationSetEventDestination_21628179;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628198.validator(path, query, header, formData, body, _)
  let scheme = call_21628198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628198.makeUrl(scheme.get, call_21628198.host, call_21628198.base,
                               call_21628198.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628198, uri, valid, _)

proc call*(call_21628199: Call_GetUpdateConfigurationSetEventDestination_21628179;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: string (required)
  var query_21628200 = newJObject()
  add(query_21628200, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_21628200, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_21628200, "Action", newJString(Action))
  add(query_21628200, "EventDestination.Name", newJString(EventDestinationName))
  add(query_21628200, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_21628200, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_21628200.add "EventDestination.MatchingEventTypes",
                      EventDestinationMatchingEventTypes
  add(query_21628200, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21628200, "Version", newJString(Version))
  result = call_21628199.call(nil, query_21628200, nil, nil, nil)

var getUpdateConfigurationSetEventDestination* = Call_GetUpdateConfigurationSetEventDestination_21628179(
    name: "getUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_GetUpdateConfigurationSetEventDestination_21628180,
    base: "/", makeUrl: url_GetUpdateConfigurationSetEventDestination_21628181,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetReputationMetricsEnabled_21628241 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateConfigurationSetReputationMetricsEnabled_21628243(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetReputationMetricsEnabled_21628242(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628244 = query.getOrDefault("Action")
  valid_21628244 = validateParameter(valid_21628244, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_21628244 != nil:
    section.add "Action", valid_21628244
  var valid_21628245 = query.getOrDefault("Version")
  valid_21628245 = validateParameter(valid_21628245, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628245 != nil:
    section.add "Version", valid_21628245
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628246 = header.getOrDefault("X-Amz-Date")
  valid_21628246 = validateParameter(valid_21628246, JString, required = false,
                                   default = nil)
  if valid_21628246 != nil:
    section.add "X-Amz-Date", valid_21628246
  var valid_21628247 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628247 = validateParameter(valid_21628247, JString, required = false,
                                   default = nil)
  if valid_21628247 != nil:
    section.add "X-Amz-Security-Token", valid_21628247
  var valid_21628248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628248 = validateParameter(valid_21628248, JString, required = false,
                                   default = nil)
  if valid_21628248 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628248
  var valid_21628249 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628249 = validateParameter(valid_21628249, JString, required = false,
                                   default = nil)
  if valid_21628249 != nil:
    section.add "X-Amz-Algorithm", valid_21628249
  var valid_21628250 = header.getOrDefault("X-Amz-Signature")
  valid_21628250 = validateParameter(valid_21628250, JString, required = false,
                                   default = nil)
  if valid_21628250 != nil:
    section.add "X-Amz-Signature", valid_21628250
  var valid_21628251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628251 = validateParameter(valid_21628251, JString, required = false,
                                   default = nil)
  if valid_21628251 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628251
  var valid_21628252 = header.getOrDefault("X-Amz-Credential")
  valid_21628252 = validateParameter(valid_21628252, JString, required = false,
                                   default = nil)
  if valid_21628252 != nil:
    section.add "X-Amz-Credential", valid_21628252
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21628253 = formData.getOrDefault("ConfigurationSetName")
  valid_21628253 = validateParameter(valid_21628253, JString, required = true,
                                   default = nil)
  if valid_21628253 != nil:
    section.add "ConfigurationSetName", valid_21628253
  var valid_21628254 = formData.getOrDefault("Enabled")
  valid_21628254 = validateParameter(valid_21628254, JBool, required = true,
                                   default = nil)
  if valid_21628254 != nil:
    section.add "Enabled", valid_21628254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628255: Call_PostUpdateConfigurationSetReputationMetricsEnabled_21628241;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628255.validator(path, query, header, formData, body, _)
  let scheme = call_21628255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628255.makeUrl(scheme.get, call_21628255.host, call_21628255.base,
                               call_21628255.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628255, uri, valid, _)

proc call*(call_21628256: Call_PostUpdateConfigurationSetReputationMetricsEnabled_21628241;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628257 = newJObject()
  var formData_21628258 = newJObject()
  add(formData_21628258, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21628258, "Enabled", newJBool(Enabled))
  add(query_21628257, "Action", newJString(Action))
  add(query_21628257, "Version", newJString(Version))
  result = call_21628256.call(nil, query_21628257, nil, formData_21628258, nil)

var postUpdateConfigurationSetReputationMetricsEnabled* = Call_PostUpdateConfigurationSetReputationMetricsEnabled_21628241(
    name: "postUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_PostUpdateConfigurationSetReputationMetricsEnabled_21628242,
    base: "/", makeUrl: url_PostUpdateConfigurationSetReputationMetricsEnabled_21628243,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetReputationMetricsEnabled_21628224 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateConfigurationSetReputationMetricsEnabled_21628226(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetReputationMetricsEnabled_21628225(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_21628227 = query.getOrDefault("Enabled")
  valid_21628227 = validateParameter(valid_21628227, JBool, required = true,
                                   default = nil)
  if valid_21628227 != nil:
    section.add "Enabled", valid_21628227
  var valid_21628228 = query.getOrDefault("Action")
  valid_21628228 = validateParameter(valid_21628228, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_21628228 != nil:
    section.add "Action", valid_21628228
  var valid_21628229 = query.getOrDefault("ConfigurationSetName")
  valid_21628229 = validateParameter(valid_21628229, JString, required = true,
                                   default = nil)
  if valid_21628229 != nil:
    section.add "ConfigurationSetName", valid_21628229
  var valid_21628230 = query.getOrDefault("Version")
  valid_21628230 = validateParameter(valid_21628230, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628230 != nil:
    section.add "Version", valid_21628230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628231 = header.getOrDefault("X-Amz-Date")
  valid_21628231 = validateParameter(valid_21628231, JString, required = false,
                                   default = nil)
  if valid_21628231 != nil:
    section.add "X-Amz-Date", valid_21628231
  var valid_21628232 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628232 = validateParameter(valid_21628232, JString, required = false,
                                   default = nil)
  if valid_21628232 != nil:
    section.add "X-Amz-Security-Token", valid_21628232
  var valid_21628233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628233 = validateParameter(valid_21628233, JString, required = false,
                                   default = nil)
  if valid_21628233 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628233
  var valid_21628234 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628234 = validateParameter(valid_21628234, JString, required = false,
                                   default = nil)
  if valid_21628234 != nil:
    section.add "X-Amz-Algorithm", valid_21628234
  var valid_21628235 = header.getOrDefault("X-Amz-Signature")
  valid_21628235 = validateParameter(valid_21628235, JString, required = false,
                                   default = nil)
  if valid_21628235 != nil:
    section.add "X-Amz-Signature", valid_21628235
  var valid_21628236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628236 = validateParameter(valid_21628236, JString, required = false,
                                   default = nil)
  if valid_21628236 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628236
  var valid_21628237 = header.getOrDefault("X-Amz-Credential")
  valid_21628237 = validateParameter(valid_21628237, JString, required = false,
                                   default = nil)
  if valid_21628237 != nil:
    section.add "X-Amz-Credential", valid_21628237
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628238: Call_GetUpdateConfigurationSetReputationMetricsEnabled_21628224;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628238.validator(path, query, header, formData, body, _)
  let scheme = call_21628238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628238.makeUrl(scheme.get, call_21628238.host, call_21628238.base,
                               call_21628238.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628238, uri, valid, _)

proc call*(call_21628239: Call_GetUpdateConfigurationSetReputationMetricsEnabled_21628224;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_21628240 = newJObject()
  add(query_21628240, "Enabled", newJBool(Enabled))
  add(query_21628240, "Action", newJString(Action))
  add(query_21628240, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21628240, "Version", newJString(Version))
  result = call_21628239.call(nil, query_21628240, nil, nil, nil)

var getUpdateConfigurationSetReputationMetricsEnabled* = Call_GetUpdateConfigurationSetReputationMetricsEnabled_21628224(
    name: "getUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_GetUpdateConfigurationSetReputationMetricsEnabled_21628225,
    base: "/", makeUrl: url_GetUpdateConfigurationSetReputationMetricsEnabled_21628226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetSendingEnabled_21628276 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateConfigurationSetSendingEnabled_21628278(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetSendingEnabled_21628277(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628279 = query.getOrDefault("Action")
  valid_21628279 = validateParameter(valid_21628279, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_21628279 != nil:
    section.add "Action", valid_21628279
  var valid_21628280 = query.getOrDefault("Version")
  valid_21628280 = validateParameter(valid_21628280, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628280 != nil:
    section.add "Version", valid_21628280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628281 = header.getOrDefault("X-Amz-Date")
  valid_21628281 = validateParameter(valid_21628281, JString, required = false,
                                   default = nil)
  if valid_21628281 != nil:
    section.add "X-Amz-Date", valid_21628281
  var valid_21628282 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628282 = validateParameter(valid_21628282, JString, required = false,
                                   default = nil)
  if valid_21628282 != nil:
    section.add "X-Amz-Security-Token", valid_21628282
  var valid_21628283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628283 = validateParameter(valid_21628283, JString, required = false,
                                   default = nil)
  if valid_21628283 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628283
  var valid_21628284 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628284 = validateParameter(valid_21628284, JString, required = false,
                                   default = nil)
  if valid_21628284 != nil:
    section.add "X-Amz-Algorithm", valid_21628284
  var valid_21628285 = header.getOrDefault("X-Amz-Signature")
  valid_21628285 = validateParameter(valid_21628285, JString, required = false,
                                   default = nil)
  if valid_21628285 != nil:
    section.add "X-Amz-Signature", valid_21628285
  var valid_21628286 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628286 = validateParameter(valid_21628286, JString, required = false,
                                   default = nil)
  if valid_21628286 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628286
  var valid_21628287 = header.getOrDefault("X-Amz-Credential")
  valid_21628287 = validateParameter(valid_21628287, JString, required = false,
                                   default = nil)
  if valid_21628287 != nil:
    section.add "X-Amz-Credential", valid_21628287
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21628288 = formData.getOrDefault("ConfigurationSetName")
  valid_21628288 = validateParameter(valid_21628288, JString, required = true,
                                   default = nil)
  if valid_21628288 != nil:
    section.add "ConfigurationSetName", valid_21628288
  var valid_21628289 = formData.getOrDefault("Enabled")
  valid_21628289 = validateParameter(valid_21628289, JBool, required = true,
                                   default = nil)
  if valid_21628289 != nil:
    section.add "Enabled", valid_21628289
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628290: Call_PostUpdateConfigurationSetSendingEnabled_21628276;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628290.validator(path, query, header, formData, body, _)
  let scheme = call_21628290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628290.makeUrl(scheme.get, call_21628290.host, call_21628290.base,
                               call_21628290.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628290, uri, valid, _)

proc call*(call_21628291: Call_PostUpdateConfigurationSetSendingEnabled_21628276;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628292 = newJObject()
  var formData_21628293 = newJObject()
  add(formData_21628293, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_21628293, "Enabled", newJBool(Enabled))
  add(query_21628292, "Action", newJString(Action))
  add(query_21628292, "Version", newJString(Version))
  result = call_21628291.call(nil, query_21628292, nil, formData_21628293, nil)

var postUpdateConfigurationSetSendingEnabled* = Call_PostUpdateConfigurationSetSendingEnabled_21628276(
    name: "postUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_PostUpdateConfigurationSetSendingEnabled_21628277,
    base: "/", makeUrl: url_PostUpdateConfigurationSetSendingEnabled_21628278,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetSendingEnabled_21628259 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateConfigurationSetSendingEnabled_21628261(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetSendingEnabled_21628260(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_21628262 = query.getOrDefault("Enabled")
  valid_21628262 = validateParameter(valid_21628262, JBool, required = true,
                                   default = nil)
  if valid_21628262 != nil:
    section.add "Enabled", valid_21628262
  var valid_21628263 = query.getOrDefault("Action")
  valid_21628263 = validateParameter(valid_21628263, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_21628263 != nil:
    section.add "Action", valid_21628263
  var valid_21628264 = query.getOrDefault("ConfigurationSetName")
  valid_21628264 = validateParameter(valid_21628264, JString, required = true,
                                   default = nil)
  if valid_21628264 != nil:
    section.add "ConfigurationSetName", valid_21628264
  var valid_21628265 = query.getOrDefault("Version")
  valid_21628265 = validateParameter(valid_21628265, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628265 != nil:
    section.add "Version", valid_21628265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628266 = header.getOrDefault("X-Amz-Date")
  valid_21628266 = validateParameter(valid_21628266, JString, required = false,
                                   default = nil)
  if valid_21628266 != nil:
    section.add "X-Amz-Date", valid_21628266
  var valid_21628267 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628267 = validateParameter(valid_21628267, JString, required = false,
                                   default = nil)
  if valid_21628267 != nil:
    section.add "X-Amz-Security-Token", valid_21628267
  var valid_21628268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628268 = validateParameter(valid_21628268, JString, required = false,
                                   default = nil)
  if valid_21628268 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628268
  var valid_21628269 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628269 = validateParameter(valid_21628269, JString, required = false,
                                   default = nil)
  if valid_21628269 != nil:
    section.add "X-Amz-Algorithm", valid_21628269
  var valid_21628270 = header.getOrDefault("X-Amz-Signature")
  valid_21628270 = validateParameter(valid_21628270, JString, required = false,
                                   default = nil)
  if valid_21628270 != nil:
    section.add "X-Amz-Signature", valid_21628270
  var valid_21628271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628271 = validateParameter(valid_21628271, JString, required = false,
                                   default = nil)
  if valid_21628271 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628271
  var valid_21628272 = header.getOrDefault("X-Amz-Credential")
  valid_21628272 = validateParameter(valid_21628272, JString, required = false,
                                   default = nil)
  if valid_21628272 != nil:
    section.add "X-Amz-Credential", valid_21628272
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628273: Call_GetUpdateConfigurationSetSendingEnabled_21628259;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628273.validator(path, query, header, formData, body, _)
  let scheme = call_21628273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628273.makeUrl(scheme.get, call_21628273.host, call_21628273.base,
                               call_21628273.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628273, uri, valid, _)

proc call*(call_21628274: Call_GetUpdateConfigurationSetSendingEnabled_21628259;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_21628275 = newJObject()
  add(query_21628275, "Enabled", newJBool(Enabled))
  add(query_21628275, "Action", newJString(Action))
  add(query_21628275, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21628275, "Version", newJString(Version))
  result = call_21628274.call(nil, query_21628275, nil, nil, nil)

var getUpdateConfigurationSetSendingEnabled* = Call_GetUpdateConfigurationSetSendingEnabled_21628259(
    name: "getUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_GetUpdateConfigurationSetSendingEnabled_21628260,
    base: "/", makeUrl: url_GetUpdateConfigurationSetSendingEnabled_21628261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetTrackingOptions_21628311 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateConfigurationSetTrackingOptions_21628313(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetTrackingOptions_21628312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628314 = query.getOrDefault("Action")
  valid_21628314 = validateParameter(valid_21628314, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_21628314 != nil:
    section.add "Action", valid_21628314
  var valid_21628315 = query.getOrDefault("Version")
  valid_21628315 = validateParameter(valid_21628315, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628315 != nil:
    section.add "Version", valid_21628315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628316 = header.getOrDefault("X-Amz-Date")
  valid_21628316 = validateParameter(valid_21628316, JString, required = false,
                                   default = nil)
  if valid_21628316 != nil:
    section.add "X-Amz-Date", valid_21628316
  var valid_21628317 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628317 = validateParameter(valid_21628317, JString, required = false,
                                   default = nil)
  if valid_21628317 != nil:
    section.add "X-Amz-Security-Token", valid_21628317
  var valid_21628318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628318 = validateParameter(valid_21628318, JString, required = false,
                                   default = nil)
  if valid_21628318 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628318
  var valid_21628319 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628319 = validateParameter(valid_21628319, JString, required = false,
                                   default = nil)
  if valid_21628319 != nil:
    section.add "X-Amz-Algorithm", valid_21628319
  var valid_21628320 = header.getOrDefault("X-Amz-Signature")
  valid_21628320 = validateParameter(valid_21628320, JString, required = false,
                                   default = nil)
  if valid_21628320 != nil:
    section.add "X-Amz-Signature", valid_21628320
  var valid_21628321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628321 = validateParameter(valid_21628321, JString, required = false,
                                   default = nil)
  if valid_21628321 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628321
  var valid_21628322 = header.getOrDefault("X-Amz-Credential")
  valid_21628322 = validateParameter(valid_21628322, JString, required = false,
                                   default = nil)
  if valid_21628322 != nil:
    section.add "X-Amz-Credential", valid_21628322
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_21628323 = formData.getOrDefault("ConfigurationSetName")
  valid_21628323 = validateParameter(valid_21628323, JString, required = true,
                                   default = nil)
  if valid_21628323 != nil:
    section.add "ConfigurationSetName", valid_21628323
  var valid_21628324 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_21628324 = validateParameter(valid_21628324, JString, required = false,
                                   default = nil)
  if valid_21628324 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_21628324
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628325: Call_PostUpdateConfigurationSetTrackingOptions_21628311;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21628325.validator(path, query, header, formData, body, _)
  let scheme = call_21628325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628325.makeUrl(scheme.get, call_21628325.host, call_21628325.base,
                               call_21628325.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628325, uri, valid, _)

proc call*(call_21628326: Call_PostUpdateConfigurationSetTrackingOptions_21628311;
          ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_21628327 = newJObject()
  var formData_21628328 = newJObject()
  add(formData_21628328, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21628327, "Action", newJString(Action))
  add(formData_21628328, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_21628327, "Version", newJString(Version))
  result = call_21628326.call(nil, query_21628327, nil, formData_21628328, nil)

var postUpdateConfigurationSetTrackingOptions* = Call_PostUpdateConfigurationSetTrackingOptions_21628311(
    name: "postUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_PostUpdateConfigurationSetTrackingOptions_21628312,
    base: "/", makeUrl: url_PostUpdateConfigurationSetTrackingOptions_21628313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetTrackingOptions_21628294 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateConfigurationSetTrackingOptions_21628296(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetTrackingOptions_21628295(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628297 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_21628297 = validateParameter(valid_21628297, JString, required = false,
                                   default = nil)
  if valid_21628297 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_21628297
  var valid_21628298 = query.getOrDefault("Action")
  valid_21628298 = validateParameter(valid_21628298, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_21628298 != nil:
    section.add "Action", valid_21628298
  var valid_21628299 = query.getOrDefault("ConfigurationSetName")
  valid_21628299 = validateParameter(valid_21628299, JString, required = true,
                                   default = nil)
  if valid_21628299 != nil:
    section.add "ConfigurationSetName", valid_21628299
  var valid_21628300 = query.getOrDefault("Version")
  valid_21628300 = validateParameter(valid_21628300, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628300 != nil:
    section.add "Version", valid_21628300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628301 = header.getOrDefault("X-Amz-Date")
  valid_21628301 = validateParameter(valid_21628301, JString, required = false,
                                   default = nil)
  if valid_21628301 != nil:
    section.add "X-Amz-Date", valid_21628301
  var valid_21628302 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628302 = validateParameter(valid_21628302, JString, required = false,
                                   default = nil)
  if valid_21628302 != nil:
    section.add "X-Amz-Security-Token", valid_21628302
  var valid_21628303 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628303 = validateParameter(valid_21628303, JString, required = false,
                                   default = nil)
  if valid_21628303 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628303
  var valid_21628304 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628304 = validateParameter(valid_21628304, JString, required = false,
                                   default = nil)
  if valid_21628304 != nil:
    section.add "X-Amz-Algorithm", valid_21628304
  var valid_21628305 = header.getOrDefault("X-Amz-Signature")
  valid_21628305 = validateParameter(valid_21628305, JString, required = false,
                                   default = nil)
  if valid_21628305 != nil:
    section.add "X-Amz-Signature", valid_21628305
  var valid_21628306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628306 = validateParameter(valid_21628306, JString, required = false,
                                   default = nil)
  if valid_21628306 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628306
  var valid_21628307 = header.getOrDefault("X-Amz-Credential")
  valid_21628307 = validateParameter(valid_21628307, JString, required = false,
                                   default = nil)
  if valid_21628307 != nil:
    section.add "X-Amz-Credential", valid_21628307
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628308: Call_GetUpdateConfigurationSetTrackingOptions_21628294;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_21628308.validator(path, query, header, formData, body, _)
  let scheme = call_21628308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628308.makeUrl(scheme.get, call_21628308.host, call_21628308.base,
                               call_21628308.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628308, uri, valid, _)

proc call*(call_21628309: Call_GetUpdateConfigurationSetTrackingOptions_21628294;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: string (required)
  var query_21628310 = newJObject()
  add(query_21628310, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_21628310, "Action", newJString(Action))
  add(query_21628310, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_21628310, "Version", newJString(Version))
  result = call_21628309.call(nil, query_21628310, nil, nil, nil)

var getUpdateConfigurationSetTrackingOptions* = Call_GetUpdateConfigurationSetTrackingOptions_21628294(
    name: "getUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_GetUpdateConfigurationSetTrackingOptions_21628295,
    base: "/", makeUrl: url_GetUpdateConfigurationSetTrackingOptions_21628296,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateCustomVerificationEmailTemplate_21628350 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateCustomVerificationEmailTemplate_21628352(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateCustomVerificationEmailTemplate_21628351(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628353 = query.getOrDefault("Action")
  valid_21628353 = validateParameter(valid_21628353, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_21628353 != nil:
    section.add "Action", valid_21628353
  var valid_21628354 = query.getOrDefault("Version")
  valid_21628354 = validateParameter(valid_21628354, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628354 != nil:
    section.add "Version", valid_21628354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628355 = header.getOrDefault("X-Amz-Date")
  valid_21628355 = validateParameter(valid_21628355, JString, required = false,
                                   default = nil)
  if valid_21628355 != nil:
    section.add "X-Amz-Date", valid_21628355
  var valid_21628356 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628356 = validateParameter(valid_21628356, JString, required = false,
                                   default = nil)
  if valid_21628356 != nil:
    section.add "X-Amz-Security-Token", valid_21628356
  var valid_21628357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628357 = validateParameter(valid_21628357, JString, required = false,
                                   default = nil)
  if valid_21628357 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628357
  var valid_21628358 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628358 = validateParameter(valid_21628358, JString, required = false,
                                   default = nil)
  if valid_21628358 != nil:
    section.add "X-Amz-Algorithm", valid_21628358
  var valid_21628359 = header.getOrDefault("X-Amz-Signature")
  valid_21628359 = validateParameter(valid_21628359, JString, required = false,
                                   default = nil)
  if valid_21628359 != nil:
    section.add "X-Amz-Signature", valid_21628359
  var valid_21628360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628360 = validateParameter(valid_21628360, JString, required = false,
                                   default = nil)
  if valid_21628360 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628360
  var valid_21628361 = header.getOrDefault("X-Amz-Credential")
  valid_21628361 = validateParameter(valid_21628361, JString, required = false,
                                   default = nil)
  if valid_21628361 != nil:
    section.add "X-Amz-Credential", valid_21628361
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  var valid_21628362 = formData.getOrDefault("SuccessRedirectionURL")
  valid_21628362 = validateParameter(valid_21628362, JString, required = false,
                                   default = nil)
  if valid_21628362 != nil:
    section.add "SuccessRedirectionURL", valid_21628362
  var valid_21628363 = formData.getOrDefault("FailureRedirectionURL")
  valid_21628363 = validateParameter(valid_21628363, JString, required = false,
                                   default = nil)
  if valid_21628363 != nil:
    section.add "FailureRedirectionURL", valid_21628363
  var valid_21628364 = formData.getOrDefault("FromEmailAddress")
  valid_21628364 = validateParameter(valid_21628364, JString, required = false,
                                   default = nil)
  if valid_21628364 != nil:
    section.add "FromEmailAddress", valid_21628364
  var valid_21628365 = formData.getOrDefault("TemplateContent")
  valid_21628365 = validateParameter(valid_21628365, JString, required = false,
                                   default = nil)
  if valid_21628365 != nil:
    section.add "TemplateContent", valid_21628365
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_21628366 = formData.getOrDefault("TemplateName")
  valid_21628366 = validateParameter(valid_21628366, JString, required = true,
                                   default = nil)
  if valid_21628366 != nil:
    section.add "TemplateName", valid_21628366
  var valid_21628367 = formData.getOrDefault("TemplateSubject")
  valid_21628367 = validateParameter(valid_21628367, JString, required = false,
                                   default = nil)
  if valid_21628367 != nil:
    section.add "TemplateSubject", valid_21628367
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628368: Call_PostUpdateCustomVerificationEmailTemplate_21628350;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628368.validator(path, query, header, formData, body, _)
  let scheme = call_21628368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628368.makeUrl(scheme.get, call_21628368.host, call_21628368.base,
                               call_21628368.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628368, uri, valid, _)

proc call*(call_21628369: Call_PostUpdateCustomVerificationEmailTemplate_21628350;
          TemplateName: string; SuccessRedirectionURL: string = "";
          FailureRedirectionURL: string = ""; FromEmailAddress: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          TemplateContent: string = ""; TemplateSubject: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_21628370 = newJObject()
  var formData_21628371 = newJObject()
  add(formData_21628371, "SuccessRedirectionURL",
      newJString(SuccessRedirectionURL))
  add(formData_21628371, "FailureRedirectionURL",
      newJString(FailureRedirectionURL))
  add(formData_21628371, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_21628370, "Action", newJString(Action))
  add(formData_21628371, "TemplateContent", newJString(TemplateContent))
  add(formData_21628371, "TemplateName", newJString(TemplateName))
  add(formData_21628371, "TemplateSubject", newJString(TemplateSubject))
  add(query_21628370, "Version", newJString(Version))
  result = call_21628369.call(nil, query_21628370, nil, formData_21628371, nil)

var postUpdateCustomVerificationEmailTemplate* = Call_PostUpdateCustomVerificationEmailTemplate_21628350(
    name: "postUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_PostUpdateCustomVerificationEmailTemplate_21628351,
    base: "/", makeUrl: url_PostUpdateCustomVerificationEmailTemplate_21628352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateCustomVerificationEmailTemplate_21628329 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateCustomVerificationEmailTemplate_21628331(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateCustomVerificationEmailTemplate_21628330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628332 = query.getOrDefault("TemplateSubject")
  valid_21628332 = validateParameter(valid_21628332, JString, required = false,
                                   default = nil)
  if valid_21628332 != nil:
    section.add "TemplateSubject", valid_21628332
  var valid_21628333 = query.getOrDefault("FromEmailAddress")
  valid_21628333 = validateParameter(valid_21628333, JString, required = false,
                                   default = nil)
  if valid_21628333 != nil:
    section.add "FromEmailAddress", valid_21628333
  var valid_21628334 = query.getOrDefault("TemplateContent")
  valid_21628334 = validateParameter(valid_21628334, JString, required = false,
                                   default = nil)
  if valid_21628334 != nil:
    section.add "TemplateContent", valid_21628334
  var valid_21628335 = query.getOrDefault("Action")
  valid_21628335 = validateParameter(valid_21628335, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_21628335 != nil:
    section.add "Action", valid_21628335
  var valid_21628336 = query.getOrDefault("TemplateName")
  valid_21628336 = validateParameter(valid_21628336, JString, required = true,
                                   default = nil)
  if valid_21628336 != nil:
    section.add "TemplateName", valid_21628336
  var valid_21628337 = query.getOrDefault("SuccessRedirectionURL")
  valid_21628337 = validateParameter(valid_21628337, JString, required = false,
                                   default = nil)
  if valid_21628337 != nil:
    section.add "SuccessRedirectionURL", valid_21628337
  var valid_21628338 = query.getOrDefault("FailureRedirectionURL")
  valid_21628338 = validateParameter(valid_21628338, JString, required = false,
                                   default = nil)
  if valid_21628338 != nil:
    section.add "FailureRedirectionURL", valid_21628338
  var valid_21628339 = query.getOrDefault("Version")
  valid_21628339 = validateParameter(valid_21628339, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628339 != nil:
    section.add "Version", valid_21628339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628340 = header.getOrDefault("X-Amz-Date")
  valid_21628340 = validateParameter(valid_21628340, JString, required = false,
                                   default = nil)
  if valid_21628340 != nil:
    section.add "X-Amz-Date", valid_21628340
  var valid_21628341 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628341 = validateParameter(valid_21628341, JString, required = false,
                                   default = nil)
  if valid_21628341 != nil:
    section.add "X-Amz-Security-Token", valid_21628341
  var valid_21628342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628342 = validateParameter(valid_21628342, JString, required = false,
                                   default = nil)
  if valid_21628342 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628342
  var valid_21628343 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628343 = validateParameter(valid_21628343, JString, required = false,
                                   default = nil)
  if valid_21628343 != nil:
    section.add "X-Amz-Algorithm", valid_21628343
  var valid_21628344 = header.getOrDefault("X-Amz-Signature")
  valid_21628344 = validateParameter(valid_21628344, JString, required = false,
                                   default = nil)
  if valid_21628344 != nil:
    section.add "X-Amz-Signature", valid_21628344
  var valid_21628345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628345 = validateParameter(valid_21628345, JString, required = false,
                                   default = nil)
  if valid_21628345 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628345
  var valid_21628346 = header.getOrDefault("X-Amz-Credential")
  valid_21628346 = validateParameter(valid_21628346, JString, required = false,
                                   default = nil)
  if valid_21628346 != nil:
    section.add "X-Amz-Credential", valid_21628346
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628347: Call_GetUpdateCustomVerificationEmailTemplate_21628329;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628347.validator(path, query, header, formData, body, _)
  let scheme = call_21628347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628347.makeUrl(scheme.get, call_21628347.host, call_21628347.base,
                               call_21628347.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628347, uri, valid, _)

proc call*(call_21628348: Call_GetUpdateCustomVerificationEmailTemplate_21628329;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; TemplateContent: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          SuccessRedirectionURL: string = ""; FailureRedirectionURL: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_21628349 = newJObject()
  add(query_21628349, "TemplateSubject", newJString(TemplateSubject))
  add(query_21628349, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_21628349, "TemplateContent", newJString(TemplateContent))
  add(query_21628349, "Action", newJString(Action))
  add(query_21628349, "TemplateName", newJString(TemplateName))
  add(query_21628349, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_21628349, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_21628349, "Version", newJString(Version))
  result = call_21628348.call(nil, query_21628349, nil, nil, nil)

var getUpdateCustomVerificationEmailTemplate* = Call_GetUpdateCustomVerificationEmailTemplate_21628329(
    name: "getUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_GetUpdateCustomVerificationEmailTemplate_21628330,
    base: "/", makeUrl: url_GetUpdateCustomVerificationEmailTemplate_21628331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateReceiptRule_21628394 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateReceiptRule_21628396(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateReceiptRule_21628395(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628397 = query.getOrDefault("Action")
  valid_21628397 = validateParameter(valid_21628397, JString, required = true,
                                   default = newJString("UpdateReceiptRule"))
  if valid_21628397 != nil:
    section.add "Action", valid_21628397
  var valid_21628398 = query.getOrDefault("Version")
  valid_21628398 = validateParameter(valid_21628398, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628398 != nil:
    section.add "Version", valid_21628398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628399 = header.getOrDefault("X-Amz-Date")
  valid_21628399 = validateParameter(valid_21628399, JString, required = false,
                                   default = nil)
  if valid_21628399 != nil:
    section.add "X-Amz-Date", valid_21628399
  var valid_21628400 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628400 = validateParameter(valid_21628400, JString, required = false,
                                   default = nil)
  if valid_21628400 != nil:
    section.add "X-Amz-Security-Token", valid_21628400
  var valid_21628401 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628401 = validateParameter(valid_21628401, JString, required = false,
                                   default = nil)
  if valid_21628401 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628401
  var valid_21628402 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628402 = validateParameter(valid_21628402, JString, required = false,
                                   default = nil)
  if valid_21628402 != nil:
    section.add "X-Amz-Algorithm", valid_21628402
  var valid_21628403 = header.getOrDefault("X-Amz-Signature")
  valid_21628403 = validateParameter(valid_21628403, JString, required = false,
                                   default = nil)
  if valid_21628403 != nil:
    section.add "X-Amz-Signature", valid_21628403
  var valid_21628404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628404 = validateParameter(valid_21628404, JString, required = false,
                                   default = nil)
  if valid_21628404 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628404
  var valid_21628405 = header.getOrDefault("X-Amz-Credential")
  valid_21628405 = validateParameter(valid_21628405, JString, required = false,
                                   default = nil)
  if valid_21628405 != nil:
    section.add "X-Amz-Credential", valid_21628405
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_21628406 = formData.getOrDefault("Rule.Recipients")
  valid_21628406 = validateParameter(valid_21628406, JArray, required = false,
                                   default = nil)
  if valid_21628406 != nil:
    section.add "Rule.Recipients", valid_21628406
  var valid_21628407 = formData.getOrDefault("Rule.Enabled")
  valid_21628407 = validateParameter(valid_21628407, JString, required = false,
                                   default = nil)
  if valid_21628407 != nil:
    section.add "Rule.Enabled", valid_21628407
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_21628408 = formData.getOrDefault("RuleSetName")
  valid_21628408 = validateParameter(valid_21628408, JString, required = true,
                                   default = nil)
  if valid_21628408 != nil:
    section.add "RuleSetName", valid_21628408
  var valid_21628409 = formData.getOrDefault("Rule.Actions")
  valid_21628409 = validateParameter(valid_21628409, JArray, required = false,
                                   default = nil)
  if valid_21628409 != nil:
    section.add "Rule.Actions", valid_21628409
  var valid_21628410 = formData.getOrDefault("Rule.Name")
  valid_21628410 = validateParameter(valid_21628410, JString, required = false,
                                   default = nil)
  if valid_21628410 != nil:
    section.add "Rule.Name", valid_21628410
  var valid_21628411 = formData.getOrDefault("Rule.ScanEnabled")
  valid_21628411 = validateParameter(valid_21628411, JString, required = false,
                                   default = nil)
  if valid_21628411 != nil:
    section.add "Rule.ScanEnabled", valid_21628411
  var valid_21628412 = formData.getOrDefault("Rule.TlsPolicy")
  valid_21628412 = validateParameter(valid_21628412, JString, required = false,
                                   default = nil)
  if valid_21628412 != nil:
    section.add "Rule.TlsPolicy", valid_21628412
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628413: Call_PostUpdateReceiptRule_21628394;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628413.validator(path, query, header, formData, body, _)
  let scheme = call_21628413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628413.makeUrl(scheme.get, call_21628413.host, call_21628413.base,
                               call_21628413.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628413, uri, valid, _)

proc call*(call_21628414: Call_PostUpdateReceiptRule_21628394; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = "";
          Action: string = "UpdateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_21628415 = newJObject()
  var formData_21628416 = newJObject()
  if RuleRecipients != nil:
    formData_21628416.add "Rule.Recipients", RuleRecipients
  add(formData_21628416, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_21628416, "RuleSetName", newJString(RuleSetName))
  add(query_21628415, "Action", newJString(Action))
  if RuleActions != nil:
    formData_21628416.add "Rule.Actions", RuleActions
  add(formData_21628416, "Rule.Name", newJString(RuleName))
  add(formData_21628416, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_21628416, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_21628415, "Version", newJString(Version))
  result = call_21628414.call(nil, query_21628415, nil, formData_21628416, nil)

var postUpdateReceiptRule* = Call_PostUpdateReceiptRule_21628394(
    name: "postUpdateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_PostUpdateReceiptRule_21628395, base: "/",
    makeUrl: url_PostUpdateReceiptRule_21628396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateReceiptRule_21628372 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateReceiptRule_21628374(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateReceiptRule_21628373(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628375 = query.getOrDefault("Rule.ScanEnabled")
  valid_21628375 = validateParameter(valid_21628375, JString, required = false,
                                   default = nil)
  if valid_21628375 != nil:
    section.add "Rule.ScanEnabled", valid_21628375
  var valid_21628376 = query.getOrDefault("Rule.Name")
  valid_21628376 = validateParameter(valid_21628376, JString, required = false,
                                   default = nil)
  if valid_21628376 != nil:
    section.add "Rule.Name", valid_21628376
  var valid_21628377 = query.getOrDefault("Rule.Enabled")
  valid_21628377 = validateParameter(valid_21628377, JString, required = false,
                                   default = nil)
  if valid_21628377 != nil:
    section.add "Rule.Enabled", valid_21628377
  var valid_21628378 = query.getOrDefault("Rule.TlsPolicy")
  valid_21628378 = validateParameter(valid_21628378, JString, required = false,
                                   default = nil)
  if valid_21628378 != nil:
    section.add "Rule.TlsPolicy", valid_21628378
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_21628379 = query.getOrDefault("RuleSetName")
  valid_21628379 = validateParameter(valid_21628379, JString, required = true,
                                   default = nil)
  if valid_21628379 != nil:
    section.add "RuleSetName", valid_21628379
  var valid_21628380 = query.getOrDefault("Action")
  valid_21628380 = validateParameter(valid_21628380, JString, required = true,
                                   default = newJString("UpdateReceiptRule"))
  if valid_21628380 != nil:
    section.add "Action", valid_21628380
  var valid_21628381 = query.getOrDefault("Rule.Actions")
  valid_21628381 = validateParameter(valid_21628381, JArray, required = false,
                                   default = nil)
  if valid_21628381 != nil:
    section.add "Rule.Actions", valid_21628381
  var valid_21628382 = query.getOrDefault("Rule.Recipients")
  valid_21628382 = validateParameter(valid_21628382, JArray, required = false,
                                   default = nil)
  if valid_21628382 != nil:
    section.add "Rule.Recipients", valid_21628382
  var valid_21628383 = query.getOrDefault("Version")
  valid_21628383 = validateParameter(valid_21628383, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628383 != nil:
    section.add "Version", valid_21628383
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628384 = header.getOrDefault("X-Amz-Date")
  valid_21628384 = validateParameter(valid_21628384, JString, required = false,
                                   default = nil)
  if valid_21628384 != nil:
    section.add "X-Amz-Date", valid_21628384
  var valid_21628385 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628385 = validateParameter(valid_21628385, JString, required = false,
                                   default = nil)
  if valid_21628385 != nil:
    section.add "X-Amz-Security-Token", valid_21628385
  var valid_21628386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628386 = validateParameter(valid_21628386, JString, required = false,
                                   default = nil)
  if valid_21628386 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628386
  var valid_21628387 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628387 = validateParameter(valid_21628387, JString, required = false,
                                   default = nil)
  if valid_21628387 != nil:
    section.add "X-Amz-Algorithm", valid_21628387
  var valid_21628388 = header.getOrDefault("X-Amz-Signature")
  valid_21628388 = validateParameter(valid_21628388, JString, required = false,
                                   default = nil)
  if valid_21628388 != nil:
    section.add "X-Amz-Signature", valid_21628388
  var valid_21628389 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628389 = validateParameter(valid_21628389, JString, required = false,
                                   default = nil)
  if valid_21628389 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628389
  var valid_21628390 = header.getOrDefault("X-Amz-Credential")
  valid_21628390 = validateParameter(valid_21628390, JString, required = false,
                                   default = nil)
  if valid_21628390 != nil:
    section.add "X-Amz-Credential", valid_21628390
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628391: Call_GetUpdateReceiptRule_21628372; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628391.validator(path, query, header, formData, body, _)
  let scheme = call_21628391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628391.makeUrl(scheme.get, call_21628391.host, call_21628391.base,
                               call_21628391.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628391, uri, valid, _)

proc call*(call_21628392: Call_GetUpdateReceiptRule_21628372; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          RuleTlsPolicy: string = ""; Action: string = "UpdateReceiptRule";
          RuleActions: JsonNode = nil; RuleRecipients: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_21628393 = newJObject()
  add(query_21628393, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_21628393, "Rule.Name", newJString(RuleName))
  add(query_21628393, "Rule.Enabled", newJString(RuleEnabled))
  add(query_21628393, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_21628393, "RuleSetName", newJString(RuleSetName))
  add(query_21628393, "Action", newJString(Action))
  if RuleActions != nil:
    query_21628393.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_21628393.add "Rule.Recipients", RuleRecipients
  add(query_21628393, "Version", newJString(Version))
  result = call_21628392.call(nil, query_21628393, nil, nil, nil)

var getUpdateReceiptRule* = Call_GetUpdateReceiptRule_21628372(
    name: "getUpdateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_GetUpdateReceiptRule_21628373, base: "/",
    makeUrl: url_GetUpdateReceiptRule_21628374,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateTemplate_21628436 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateTemplate_21628438(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateTemplate_21628437(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628439 = query.getOrDefault("Action")
  valid_21628439 = validateParameter(valid_21628439, JString, required = true,
                                   default = newJString("UpdateTemplate"))
  if valid_21628439 != nil:
    section.add "Action", valid_21628439
  var valid_21628440 = query.getOrDefault("Version")
  valid_21628440 = validateParameter(valid_21628440, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628440 != nil:
    section.add "Version", valid_21628440
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628441 = header.getOrDefault("X-Amz-Date")
  valid_21628441 = validateParameter(valid_21628441, JString, required = false,
                                   default = nil)
  if valid_21628441 != nil:
    section.add "X-Amz-Date", valid_21628441
  var valid_21628442 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628442 = validateParameter(valid_21628442, JString, required = false,
                                   default = nil)
  if valid_21628442 != nil:
    section.add "X-Amz-Security-Token", valid_21628442
  var valid_21628443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628443 = validateParameter(valid_21628443, JString, required = false,
                                   default = nil)
  if valid_21628443 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628443
  var valid_21628444 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628444 = validateParameter(valid_21628444, JString, required = false,
                                   default = nil)
  if valid_21628444 != nil:
    section.add "X-Amz-Algorithm", valid_21628444
  var valid_21628445 = header.getOrDefault("X-Amz-Signature")
  valid_21628445 = validateParameter(valid_21628445, JString, required = false,
                                   default = nil)
  if valid_21628445 != nil:
    section.add "X-Amz-Signature", valid_21628445
  var valid_21628446 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628446 = validateParameter(valid_21628446, JString, required = false,
                                   default = nil)
  if valid_21628446 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628446
  var valid_21628447 = header.getOrDefault("X-Amz-Credential")
  valid_21628447 = validateParameter(valid_21628447, JString, required = false,
                                   default = nil)
  if valid_21628447 != nil:
    section.add "X-Amz-Credential", valid_21628447
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_21628448 = formData.getOrDefault("Template.HtmlPart")
  valid_21628448 = validateParameter(valid_21628448, JString, required = false,
                                   default = nil)
  if valid_21628448 != nil:
    section.add "Template.HtmlPart", valid_21628448
  var valid_21628449 = formData.getOrDefault("Template.TemplateName")
  valid_21628449 = validateParameter(valid_21628449, JString, required = false,
                                   default = nil)
  if valid_21628449 != nil:
    section.add "Template.TemplateName", valid_21628449
  var valid_21628450 = formData.getOrDefault("Template.TextPart")
  valid_21628450 = validateParameter(valid_21628450, JString, required = false,
                                   default = nil)
  if valid_21628450 != nil:
    section.add "Template.TextPart", valid_21628450
  var valid_21628451 = formData.getOrDefault("Template.SubjectPart")
  valid_21628451 = validateParameter(valid_21628451, JString, required = false,
                                   default = nil)
  if valid_21628451 != nil:
    section.add "Template.SubjectPart", valid_21628451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628452: Call_PostUpdateTemplate_21628436; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628452.validator(path, query, header, formData, body, _)
  let scheme = call_21628452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628452.makeUrl(scheme.get, call_21628452.host, call_21628452.base,
                               call_21628452.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628452, uri, valid, _)

proc call*(call_21628453: Call_PostUpdateTemplate_21628436;
          Action: string = "UpdateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_21628454 = newJObject()
  var formData_21628455 = newJObject()
  add(query_21628454, "Action", newJString(Action))
  add(formData_21628455, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_21628455, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_21628455, "Template.TextPart", newJString(TemplateTextPart))
  add(query_21628454, "Version", newJString(Version))
  add(formData_21628455, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_21628453.call(nil, query_21628454, nil, formData_21628455, nil)

var postUpdateTemplate* = Call_PostUpdateTemplate_21628436(
    name: "postUpdateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateTemplate",
    validator: validate_PostUpdateTemplate_21628437, base: "/",
    makeUrl: url_PostUpdateTemplate_21628438, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateTemplate_21628417 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateTemplate_21628419(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateTemplate_21628418(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628420 = query.getOrDefault("Template.TemplateName")
  valid_21628420 = validateParameter(valid_21628420, JString, required = false,
                                   default = nil)
  if valid_21628420 != nil:
    section.add "Template.TemplateName", valid_21628420
  var valid_21628421 = query.getOrDefault("Action")
  valid_21628421 = validateParameter(valid_21628421, JString, required = true,
                                   default = newJString("UpdateTemplate"))
  if valid_21628421 != nil:
    section.add "Action", valid_21628421
  var valid_21628422 = query.getOrDefault("Template.SubjectPart")
  valid_21628422 = validateParameter(valid_21628422, JString, required = false,
                                   default = nil)
  if valid_21628422 != nil:
    section.add "Template.SubjectPart", valid_21628422
  var valid_21628423 = query.getOrDefault("Template.HtmlPart")
  valid_21628423 = validateParameter(valid_21628423, JString, required = false,
                                   default = nil)
  if valid_21628423 != nil:
    section.add "Template.HtmlPart", valid_21628423
  var valid_21628424 = query.getOrDefault("Template.TextPart")
  valid_21628424 = validateParameter(valid_21628424, JString, required = false,
                                   default = nil)
  if valid_21628424 != nil:
    section.add "Template.TextPart", valid_21628424
  var valid_21628425 = query.getOrDefault("Version")
  valid_21628425 = validateParameter(valid_21628425, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628425 != nil:
    section.add "Version", valid_21628425
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628426 = header.getOrDefault("X-Amz-Date")
  valid_21628426 = validateParameter(valid_21628426, JString, required = false,
                                   default = nil)
  if valid_21628426 != nil:
    section.add "X-Amz-Date", valid_21628426
  var valid_21628427 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628427 = validateParameter(valid_21628427, JString, required = false,
                                   default = nil)
  if valid_21628427 != nil:
    section.add "X-Amz-Security-Token", valid_21628427
  var valid_21628428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628428 = validateParameter(valid_21628428, JString, required = false,
                                   default = nil)
  if valid_21628428 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628428
  var valid_21628429 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628429 = validateParameter(valid_21628429, JString, required = false,
                                   default = nil)
  if valid_21628429 != nil:
    section.add "X-Amz-Algorithm", valid_21628429
  var valid_21628430 = header.getOrDefault("X-Amz-Signature")
  valid_21628430 = validateParameter(valid_21628430, JString, required = false,
                                   default = nil)
  if valid_21628430 != nil:
    section.add "X-Amz-Signature", valid_21628430
  var valid_21628431 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628431 = validateParameter(valid_21628431, JString, required = false,
                                   default = nil)
  if valid_21628431 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628431
  var valid_21628432 = header.getOrDefault("X-Amz-Credential")
  valid_21628432 = validateParameter(valid_21628432, JString, required = false,
                                   default = nil)
  if valid_21628432 != nil:
    section.add "X-Amz-Credential", valid_21628432
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628433: Call_GetUpdateTemplate_21628417; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628433.validator(path, query, header, formData, body, _)
  let scheme = call_21628433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628433.makeUrl(scheme.get, call_21628433.host, call_21628433.base,
                               call_21628433.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628433, uri, valid, _)

proc call*(call_21628434: Call_GetUpdateTemplate_21628417;
          TemplateTemplateName: string = ""; Action: string = "UpdateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_21628435 = newJObject()
  add(query_21628435, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_21628435, "Action", newJString(Action))
  add(query_21628435, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_21628435, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_21628435, "Template.TextPart", newJString(TemplateTextPart))
  add(query_21628435, "Version", newJString(Version))
  result = call_21628434.call(nil, query_21628435, nil, nil, nil)

var getUpdateTemplate* = Call_GetUpdateTemplate_21628417(name: "getUpdateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateTemplate", validator: validate_GetUpdateTemplate_21628418,
    base: "/", makeUrl: url_GetUpdateTemplate_21628419,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainDkim_21628472 = ref object of OpenApiRestCall_21625435
proc url_PostVerifyDomainDkim_21628474(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyDomainDkim_21628473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628475 = query.getOrDefault("Action")
  valid_21628475 = validateParameter(valid_21628475, JString, required = true,
                                   default = newJString("VerifyDomainDkim"))
  if valid_21628475 != nil:
    section.add "Action", valid_21628475
  var valid_21628476 = query.getOrDefault("Version")
  valid_21628476 = validateParameter(valid_21628476, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628476 != nil:
    section.add "Version", valid_21628476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628477 = header.getOrDefault("X-Amz-Date")
  valid_21628477 = validateParameter(valid_21628477, JString, required = false,
                                   default = nil)
  if valid_21628477 != nil:
    section.add "X-Amz-Date", valid_21628477
  var valid_21628478 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628478 = validateParameter(valid_21628478, JString, required = false,
                                   default = nil)
  if valid_21628478 != nil:
    section.add "X-Amz-Security-Token", valid_21628478
  var valid_21628479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628479 = validateParameter(valid_21628479, JString, required = false,
                                   default = nil)
  if valid_21628479 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628479
  var valid_21628480 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628480 = validateParameter(valid_21628480, JString, required = false,
                                   default = nil)
  if valid_21628480 != nil:
    section.add "X-Amz-Algorithm", valid_21628480
  var valid_21628481 = header.getOrDefault("X-Amz-Signature")
  valid_21628481 = validateParameter(valid_21628481, JString, required = false,
                                   default = nil)
  if valid_21628481 != nil:
    section.add "X-Amz-Signature", valid_21628481
  var valid_21628482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628482 = validateParameter(valid_21628482, JString, required = false,
                                   default = nil)
  if valid_21628482 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628482
  var valid_21628483 = header.getOrDefault("X-Amz-Credential")
  valid_21628483 = validateParameter(valid_21628483, JString, required = false,
                                   default = nil)
  if valid_21628483 != nil:
    section.add "X-Amz-Credential", valid_21628483
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_21628484 = formData.getOrDefault("Domain")
  valid_21628484 = validateParameter(valid_21628484, JString, required = true,
                                   default = nil)
  if valid_21628484 != nil:
    section.add "Domain", valid_21628484
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628485: Call_PostVerifyDomainDkim_21628472; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628485.validator(path, query, header, formData, body, _)
  let scheme = call_21628485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628485.makeUrl(scheme.get, call_21628485.host, call_21628485.base,
                               call_21628485.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628485, uri, valid, _)

proc call*(call_21628486: Call_PostVerifyDomainDkim_21628472; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_21628487 = newJObject()
  var formData_21628488 = newJObject()
  add(query_21628487, "Action", newJString(Action))
  add(formData_21628488, "Domain", newJString(Domain))
  add(query_21628487, "Version", newJString(Version))
  result = call_21628486.call(nil, query_21628487, nil, formData_21628488, nil)

var postVerifyDomainDkim* = Call_PostVerifyDomainDkim_21628472(
    name: "postVerifyDomainDkim", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_PostVerifyDomainDkim_21628473, base: "/",
    makeUrl: url_PostVerifyDomainDkim_21628474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainDkim_21628456 = ref object of OpenApiRestCall_21625435
proc url_GetVerifyDomainDkim_21628458(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyDomainDkim_21628457(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628459 = query.getOrDefault("Action")
  valid_21628459 = validateParameter(valid_21628459, JString, required = true,
                                   default = newJString("VerifyDomainDkim"))
  if valid_21628459 != nil:
    section.add "Action", valid_21628459
  var valid_21628460 = query.getOrDefault("Domain")
  valid_21628460 = validateParameter(valid_21628460, JString, required = true,
                                   default = nil)
  if valid_21628460 != nil:
    section.add "Domain", valid_21628460
  var valid_21628461 = query.getOrDefault("Version")
  valid_21628461 = validateParameter(valid_21628461, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628461 != nil:
    section.add "Version", valid_21628461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628462 = header.getOrDefault("X-Amz-Date")
  valid_21628462 = validateParameter(valid_21628462, JString, required = false,
                                   default = nil)
  if valid_21628462 != nil:
    section.add "X-Amz-Date", valid_21628462
  var valid_21628463 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628463 = validateParameter(valid_21628463, JString, required = false,
                                   default = nil)
  if valid_21628463 != nil:
    section.add "X-Amz-Security-Token", valid_21628463
  var valid_21628464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628464 = validateParameter(valid_21628464, JString, required = false,
                                   default = nil)
  if valid_21628464 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628464
  var valid_21628465 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628465 = validateParameter(valid_21628465, JString, required = false,
                                   default = nil)
  if valid_21628465 != nil:
    section.add "X-Amz-Algorithm", valid_21628465
  var valid_21628466 = header.getOrDefault("X-Amz-Signature")
  valid_21628466 = validateParameter(valid_21628466, JString, required = false,
                                   default = nil)
  if valid_21628466 != nil:
    section.add "X-Amz-Signature", valid_21628466
  var valid_21628467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628467 = validateParameter(valid_21628467, JString, required = false,
                                   default = nil)
  if valid_21628467 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628467
  var valid_21628468 = header.getOrDefault("X-Amz-Credential")
  valid_21628468 = validateParameter(valid_21628468, JString, required = false,
                                   default = nil)
  if valid_21628468 != nil:
    section.add "X-Amz-Credential", valid_21628468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628469: Call_GetVerifyDomainDkim_21628456; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628469.validator(path, query, header, formData, body, _)
  let scheme = call_21628469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628469.makeUrl(scheme.get, call_21628469.host, call_21628469.base,
                               call_21628469.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628469, uri, valid, _)

proc call*(call_21628470: Call_GetVerifyDomainDkim_21628456; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_21628471 = newJObject()
  add(query_21628471, "Action", newJString(Action))
  add(query_21628471, "Domain", newJString(Domain))
  add(query_21628471, "Version", newJString(Version))
  result = call_21628470.call(nil, query_21628471, nil, nil, nil)

var getVerifyDomainDkim* = Call_GetVerifyDomainDkim_21628456(
    name: "getVerifyDomainDkim", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_GetVerifyDomainDkim_21628457, base: "/",
    makeUrl: url_GetVerifyDomainDkim_21628458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainIdentity_21628505 = ref object of OpenApiRestCall_21625435
proc url_PostVerifyDomainIdentity_21628507(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyDomainIdentity_21628506(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628508 = query.getOrDefault("Action")
  valid_21628508 = validateParameter(valid_21628508, JString, required = true,
                                   default = newJString("VerifyDomainIdentity"))
  if valid_21628508 != nil:
    section.add "Action", valid_21628508
  var valid_21628509 = query.getOrDefault("Version")
  valid_21628509 = validateParameter(valid_21628509, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628509 != nil:
    section.add "Version", valid_21628509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628510 = header.getOrDefault("X-Amz-Date")
  valid_21628510 = validateParameter(valid_21628510, JString, required = false,
                                   default = nil)
  if valid_21628510 != nil:
    section.add "X-Amz-Date", valid_21628510
  var valid_21628511 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628511 = validateParameter(valid_21628511, JString, required = false,
                                   default = nil)
  if valid_21628511 != nil:
    section.add "X-Amz-Security-Token", valid_21628511
  var valid_21628512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628512 = validateParameter(valid_21628512, JString, required = false,
                                   default = nil)
  if valid_21628512 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628512
  var valid_21628513 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628513 = validateParameter(valid_21628513, JString, required = false,
                                   default = nil)
  if valid_21628513 != nil:
    section.add "X-Amz-Algorithm", valid_21628513
  var valid_21628514 = header.getOrDefault("X-Amz-Signature")
  valid_21628514 = validateParameter(valid_21628514, JString, required = false,
                                   default = nil)
  if valid_21628514 != nil:
    section.add "X-Amz-Signature", valid_21628514
  var valid_21628515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628515 = validateParameter(valid_21628515, JString, required = false,
                                   default = nil)
  if valid_21628515 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628515
  var valid_21628516 = header.getOrDefault("X-Amz-Credential")
  valid_21628516 = validateParameter(valid_21628516, JString, required = false,
                                   default = nil)
  if valid_21628516 != nil:
    section.add "X-Amz-Credential", valid_21628516
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_21628517 = formData.getOrDefault("Domain")
  valid_21628517 = validateParameter(valid_21628517, JString, required = true,
                                   default = nil)
  if valid_21628517 != nil:
    section.add "Domain", valid_21628517
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628518: Call_PostVerifyDomainIdentity_21628505;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628518.validator(path, query, header, formData, body, _)
  let scheme = call_21628518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628518.makeUrl(scheme.get, call_21628518.host, call_21628518.base,
                               call_21628518.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628518, uri, valid, _)

proc call*(call_21628519: Call_PostVerifyDomainIdentity_21628505; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_21628520 = newJObject()
  var formData_21628521 = newJObject()
  add(query_21628520, "Action", newJString(Action))
  add(formData_21628521, "Domain", newJString(Domain))
  add(query_21628520, "Version", newJString(Version))
  result = call_21628519.call(nil, query_21628520, nil, formData_21628521, nil)

var postVerifyDomainIdentity* = Call_PostVerifyDomainIdentity_21628505(
    name: "postVerifyDomainIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_PostVerifyDomainIdentity_21628506, base: "/",
    makeUrl: url_PostVerifyDomainIdentity_21628507,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainIdentity_21628489 = ref object of OpenApiRestCall_21625435
proc url_GetVerifyDomainIdentity_21628491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyDomainIdentity_21628490(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628492 = query.getOrDefault("Action")
  valid_21628492 = validateParameter(valid_21628492, JString, required = true,
                                   default = newJString("VerifyDomainIdentity"))
  if valid_21628492 != nil:
    section.add "Action", valid_21628492
  var valid_21628493 = query.getOrDefault("Domain")
  valid_21628493 = validateParameter(valid_21628493, JString, required = true,
                                   default = nil)
  if valid_21628493 != nil:
    section.add "Domain", valid_21628493
  var valid_21628494 = query.getOrDefault("Version")
  valid_21628494 = validateParameter(valid_21628494, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628494 != nil:
    section.add "Version", valid_21628494
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628495 = header.getOrDefault("X-Amz-Date")
  valid_21628495 = validateParameter(valid_21628495, JString, required = false,
                                   default = nil)
  if valid_21628495 != nil:
    section.add "X-Amz-Date", valid_21628495
  var valid_21628496 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628496 = validateParameter(valid_21628496, JString, required = false,
                                   default = nil)
  if valid_21628496 != nil:
    section.add "X-Amz-Security-Token", valid_21628496
  var valid_21628497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628497 = validateParameter(valid_21628497, JString, required = false,
                                   default = nil)
  if valid_21628497 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628497
  var valid_21628498 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628498 = validateParameter(valid_21628498, JString, required = false,
                                   default = nil)
  if valid_21628498 != nil:
    section.add "X-Amz-Algorithm", valid_21628498
  var valid_21628499 = header.getOrDefault("X-Amz-Signature")
  valid_21628499 = validateParameter(valid_21628499, JString, required = false,
                                   default = nil)
  if valid_21628499 != nil:
    section.add "X-Amz-Signature", valid_21628499
  var valid_21628500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628500 = validateParameter(valid_21628500, JString, required = false,
                                   default = nil)
  if valid_21628500 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628500
  var valid_21628501 = header.getOrDefault("X-Amz-Credential")
  valid_21628501 = validateParameter(valid_21628501, JString, required = false,
                                   default = nil)
  if valid_21628501 != nil:
    section.add "X-Amz-Credential", valid_21628501
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628502: Call_GetVerifyDomainIdentity_21628489;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628502.validator(path, query, header, formData, body, _)
  let scheme = call_21628502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628502.makeUrl(scheme.get, call_21628502.host, call_21628502.base,
                               call_21628502.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628502, uri, valid, _)

proc call*(call_21628503: Call_GetVerifyDomainIdentity_21628489; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_21628504 = newJObject()
  add(query_21628504, "Action", newJString(Action))
  add(query_21628504, "Domain", newJString(Domain))
  add(query_21628504, "Version", newJString(Version))
  result = call_21628503.call(nil, query_21628504, nil, nil, nil)

var getVerifyDomainIdentity* = Call_GetVerifyDomainIdentity_21628489(
    name: "getVerifyDomainIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_GetVerifyDomainIdentity_21628490, base: "/",
    makeUrl: url_GetVerifyDomainIdentity_21628491,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailAddress_21628538 = ref object of OpenApiRestCall_21625435
proc url_PostVerifyEmailAddress_21628540(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyEmailAddress_21628539(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628541 = query.getOrDefault("Action")
  valid_21628541 = validateParameter(valid_21628541, JString, required = true,
                                   default = newJString("VerifyEmailAddress"))
  if valid_21628541 != nil:
    section.add "Action", valid_21628541
  var valid_21628542 = query.getOrDefault("Version")
  valid_21628542 = validateParameter(valid_21628542, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628542 != nil:
    section.add "Version", valid_21628542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628543 = header.getOrDefault("X-Amz-Date")
  valid_21628543 = validateParameter(valid_21628543, JString, required = false,
                                   default = nil)
  if valid_21628543 != nil:
    section.add "X-Amz-Date", valid_21628543
  var valid_21628544 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628544 = validateParameter(valid_21628544, JString, required = false,
                                   default = nil)
  if valid_21628544 != nil:
    section.add "X-Amz-Security-Token", valid_21628544
  var valid_21628545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628545 = validateParameter(valid_21628545, JString, required = false,
                                   default = nil)
  if valid_21628545 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628545
  var valid_21628546 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628546 = validateParameter(valid_21628546, JString, required = false,
                                   default = nil)
  if valid_21628546 != nil:
    section.add "X-Amz-Algorithm", valid_21628546
  var valid_21628547 = header.getOrDefault("X-Amz-Signature")
  valid_21628547 = validateParameter(valid_21628547, JString, required = false,
                                   default = nil)
  if valid_21628547 != nil:
    section.add "X-Amz-Signature", valid_21628547
  var valid_21628548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628548 = validateParameter(valid_21628548, JString, required = false,
                                   default = nil)
  if valid_21628548 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628548
  var valid_21628549 = header.getOrDefault("X-Amz-Credential")
  valid_21628549 = validateParameter(valid_21628549, JString, required = false,
                                   default = nil)
  if valid_21628549 != nil:
    section.add "X-Amz-Credential", valid_21628549
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_21628550 = formData.getOrDefault("EmailAddress")
  valid_21628550 = validateParameter(valid_21628550, JString, required = true,
                                   default = nil)
  if valid_21628550 != nil:
    section.add "EmailAddress", valid_21628550
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628551: Call_PostVerifyEmailAddress_21628538;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_21628551.validator(path, query, header, formData, body, _)
  let scheme = call_21628551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628551.makeUrl(scheme.get, call_21628551.host, call_21628551.base,
                               call_21628551.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628551, uri, valid, _)

proc call*(call_21628552: Call_PostVerifyEmailAddress_21628538;
          EmailAddress: string; Action: string = "VerifyEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628553 = newJObject()
  var formData_21628554 = newJObject()
  add(formData_21628554, "EmailAddress", newJString(EmailAddress))
  add(query_21628553, "Action", newJString(Action))
  add(query_21628553, "Version", newJString(Version))
  result = call_21628552.call(nil, query_21628553, nil, formData_21628554, nil)

var postVerifyEmailAddress* = Call_PostVerifyEmailAddress_21628538(
    name: "postVerifyEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_PostVerifyEmailAddress_21628539, base: "/",
    makeUrl: url_PostVerifyEmailAddress_21628540,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailAddress_21628522 = ref object of OpenApiRestCall_21625435
proc url_GetVerifyEmailAddress_21628524(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyEmailAddress_21628523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628525 = query.getOrDefault("Action")
  valid_21628525 = validateParameter(valid_21628525, JString, required = true,
                                   default = newJString("VerifyEmailAddress"))
  if valid_21628525 != nil:
    section.add "Action", valid_21628525
  var valid_21628526 = query.getOrDefault("EmailAddress")
  valid_21628526 = validateParameter(valid_21628526, JString, required = true,
                                   default = nil)
  if valid_21628526 != nil:
    section.add "EmailAddress", valid_21628526
  var valid_21628527 = query.getOrDefault("Version")
  valid_21628527 = validateParameter(valid_21628527, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628527 != nil:
    section.add "Version", valid_21628527
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628528 = header.getOrDefault("X-Amz-Date")
  valid_21628528 = validateParameter(valid_21628528, JString, required = false,
                                   default = nil)
  if valid_21628528 != nil:
    section.add "X-Amz-Date", valid_21628528
  var valid_21628529 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628529 = validateParameter(valid_21628529, JString, required = false,
                                   default = nil)
  if valid_21628529 != nil:
    section.add "X-Amz-Security-Token", valid_21628529
  var valid_21628530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628530 = validateParameter(valid_21628530, JString, required = false,
                                   default = nil)
  if valid_21628530 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628530
  var valid_21628531 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628531 = validateParameter(valid_21628531, JString, required = false,
                                   default = nil)
  if valid_21628531 != nil:
    section.add "X-Amz-Algorithm", valid_21628531
  var valid_21628532 = header.getOrDefault("X-Amz-Signature")
  valid_21628532 = validateParameter(valid_21628532, JString, required = false,
                                   default = nil)
  if valid_21628532 != nil:
    section.add "X-Amz-Signature", valid_21628532
  var valid_21628533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628533 = validateParameter(valid_21628533, JString, required = false,
                                   default = nil)
  if valid_21628533 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628533
  var valid_21628534 = header.getOrDefault("X-Amz-Credential")
  valid_21628534 = validateParameter(valid_21628534, JString, required = false,
                                   default = nil)
  if valid_21628534 != nil:
    section.add "X-Amz-Credential", valid_21628534
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628535: Call_GetVerifyEmailAddress_21628522;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_21628535.validator(path, query, header, formData, body, _)
  let scheme = call_21628535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628535.makeUrl(scheme.get, call_21628535.host, call_21628535.base,
                               call_21628535.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628535, uri, valid, _)

proc call*(call_21628536: Call_GetVerifyEmailAddress_21628522;
          EmailAddress: string; Action: string = "VerifyEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_21628537 = newJObject()
  add(query_21628537, "Action", newJString(Action))
  add(query_21628537, "EmailAddress", newJString(EmailAddress))
  add(query_21628537, "Version", newJString(Version))
  result = call_21628536.call(nil, query_21628537, nil, nil, nil)

var getVerifyEmailAddress* = Call_GetVerifyEmailAddress_21628522(
    name: "getVerifyEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_GetVerifyEmailAddress_21628523, base: "/",
    makeUrl: url_GetVerifyEmailAddress_21628524,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailIdentity_21628571 = ref object of OpenApiRestCall_21625435
proc url_PostVerifyEmailIdentity_21628573(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyEmailIdentity_21628572(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628574 = query.getOrDefault("Action")
  valid_21628574 = validateParameter(valid_21628574, JString, required = true,
                                   default = newJString("VerifyEmailIdentity"))
  if valid_21628574 != nil:
    section.add "Action", valid_21628574
  var valid_21628575 = query.getOrDefault("Version")
  valid_21628575 = validateParameter(valid_21628575, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628575 != nil:
    section.add "Version", valid_21628575
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628576 = header.getOrDefault("X-Amz-Date")
  valid_21628576 = validateParameter(valid_21628576, JString, required = false,
                                   default = nil)
  if valid_21628576 != nil:
    section.add "X-Amz-Date", valid_21628576
  var valid_21628577 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628577 = validateParameter(valid_21628577, JString, required = false,
                                   default = nil)
  if valid_21628577 != nil:
    section.add "X-Amz-Security-Token", valid_21628577
  var valid_21628578 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628578 = validateParameter(valid_21628578, JString, required = false,
                                   default = nil)
  if valid_21628578 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628578
  var valid_21628579 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628579 = validateParameter(valid_21628579, JString, required = false,
                                   default = nil)
  if valid_21628579 != nil:
    section.add "X-Amz-Algorithm", valid_21628579
  var valid_21628580 = header.getOrDefault("X-Amz-Signature")
  valid_21628580 = validateParameter(valid_21628580, JString, required = false,
                                   default = nil)
  if valid_21628580 != nil:
    section.add "X-Amz-Signature", valid_21628580
  var valid_21628581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628581 = validateParameter(valid_21628581, JString, required = false,
                                   default = nil)
  if valid_21628581 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628581
  var valid_21628582 = header.getOrDefault("X-Amz-Credential")
  valid_21628582 = validateParameter(valid_21628582, JString, required = false,
                                   default = nil)
  if valid_21628582 != nil:
    section.add "X-Amz-Credential", valid_21628582
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_21628583 = formData.getOrDefault("EmailAddress")
  valid_21628583 = validateParameter(valid_21628583, JString, required = true,
                                   default = nil)
  if valid_21628583 != nil:
    section.add "EmailAddress", valid_21628583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628584: Call_PostVerifyEmailIdentity_21628571;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628584.validator(path, query, header, formData, body, _)
  let scheme = call_21628584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628584.makeUrl(scheme.get, call_21628584.host, call_21628584.base,
                               call_21628584.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628584, uri, valid, _)

proc call*(call_21628585: Call_PostVerifyEmailIdentity_21628571;
          EmailAddress: string; Action: string = "VerifyEmailIdentity";
          Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628586 = newJObject()
  var formData_21628587 = newJObject()
  add(formData_21628587, "EmailAddress", newJString(EmailAddress))
  add(query_21628586, "Action", newJString(Action))
  add(query_21628586, "Version", newJString(Version))
  result = call_21628585.call(nil, query_21628586, nil, formData_21628587, nil)

var postVerifyEmailIdentity* = Call_PostVerifyEmailIdentity_21628571(
    name: "postVerifyEmailIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_PostVerifyEmailIdentity_21628572, base: "/",
    makeUrl: url_PostVerifyEmailIdentity_21628573,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailIdentity_21628555 = ref object of OpenApiRestCall_21625435
proc url_GetVerifyEmailIdentity_21628557(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyEmailIdentity_21628556(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628558 = query.getOrDefault("Action")
  valid_21628558 = validateParameter(valid_21628558, JString, required = true,
                                   default = newJString("VerifyEmailIdentity"))
  if valid_21628558 != nil:
    section.add "Action", valid_21628558
  var valid_21628559 = query.getOrDefault("EmailAddress")
  valid_21628559 = validateParameter(valid_21628559, JString, required = true,
                                   default = nil)
  if valid_21628559 != nil:
    section.add "EmailAddress", valid_21628559
  var valid_21628560 = query.getOrDefault("Version")
  valid_21628560 = validateParameter(valid_21628560, JString, required = true,
                                   default = newJString("2010-12-01"))
  if valid_21628560 != nil:
    section.add "Version", valid_21628560
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628561 = header.getOrDefault("X-Amz-Date")
  valid_21628561 = validateParameter(valid_21628561, JString, required = false,
                                   default = nil)
  if valid_21628561 != nil:
    section.add "X-Amz-Date", valid_21628561
  var valid_21628562 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628562 = validateParameter(valid_21628562, JString, required = false,
                                   default = nil)
  if valid_21628562 != nil:
    section.add "X-Amz-Security-Token", valid_21628562
  var valid_21628563 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628563 = validateParameter(valid_21628563, JString, required = false,
                                   default = nil)
  if valid_21628563 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628563
  var valid_21628564 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628564 = validateParameter(valid_21628564, JString, required = false,
                                   default = nil)
  if valid_21628564 != nil:
    section.add "X-Amz-Algorithm", valid_21628564
  var valid_21628565 = header.getOrDefault("X-Amz-Signature")
  valid_21628565 = validateParameter(valid_21628565, JString, required = false,
                                   default = nil)
  if valid_21628565 != nil:
    section.add "X-Amz-Signature", valid_21628565
  var valid_21628566 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628566 = validateParameter(valid_21628566, JString, required = false,
                                   default = nil)
  if valid_21628566 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628566
  var valid_21628567 = header.getOrDefault("X-Amz-Credential")
  valid_21628567 = validateParameter(valid_21628567, JString, required = false,
                                   default = nil)
  if valid_21628567 != nil:
    section.add "X-Amz-Credential", valid_21628567
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628568: Call_GetVerifyEmailIdentity_21628555;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_21628568.validator(path, query, header, formData, body, _)
  let scheme = call_21628568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628568.makeUrl(scheme.get, call_21628568.host, call_21628568.base,
                               call_21628568.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628568, uri, valid, _)

proc call*(call_21628569: Call_GetVerifyEmailIdentity_21628555;
          EmailAddress: string; Action: string = "VerifyEmailIdentity";
          Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_21628570 = newJObject()
  add(query_21628570, "Action", newJString(Action))
  add(query_21628570, "EmailAddress", newJString(EmailAddress))
  add(query_21628570, "Version", newJString(Version))
  result = call_21628569.call(nil, query_21628570, nil, nil, nil)

var getVerifyEmailIdentity* = Call_GetVerifyEmailIdentity_21628555(
    name: "getVerifyEmailIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_GetVerifyEmailIdentity_21628556, base: "/",
    makeUrl: url_GetVerifyEmailIdentity_21628557,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}