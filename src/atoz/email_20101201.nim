
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Simple Email Service
## version: 2010-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>.</p> </note>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/email/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_602466 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_602466](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_602466): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "email.ap-northeast-1.amazonaws.com", "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
                           "us-west-2": "email.us-west-2.amazonaws.com",
                           "eu-west-2": "email.eu-west-2.amazonaws.com", "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "email.eu-central-1.amazonaws.com",
                           "us-east-2": "email.us-east-2.amazonaws.com",
                           "us-east-1": "email.us-east-1.amazonaws.com", "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "email.ap-south-1.amazonaws.com",
                           "eu-north-1": "email.eu-north-1.amazonaws.com", "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
                           "us-west-1": "email.us-west-1.amazonaws.com", "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "email.eu-west-3.amazonaws.com",
                           "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "email.sa-east-1.amazonaws.com",
                           "eu-west-1": "email.eu-west-1.amazonaws.com", "us-gov-west-1": "email.us-gov-west-1.amazonaws.com", "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "email.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
      "us-west-2": "email.us-west-2.amazonaws.com",
      "eu-west-2": "email.eu-west-2.amazonaws.com",
      "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
      "eu-central-1": "email.eu-central-1.amazonaws.com",
      "us-east-2": "email.us-east-2.amazonaws.com",
      "us-east-1": "email.us-east-1.amazonaws.com",
      "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "email.ap-south-1.amazonaws.com",
      "eu-north-1": "email.eu-north-1.amazonaws.com",
      "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
      "us-west-1": "email.us-west-1.amazonaws.com",
      "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
      "eu-west-3": "email.eu-west-3.amazonaws.com",
      "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "email.sa-east-1.amazonaws.com",
      "eu-west-1": "email.eu-west-1.amazonaws.com",
      "us-gov-west-1": "email.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
      "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "email"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostCloneReceiptRuleSet_603075 = ref object of OpenApiRestCall_602466
proc url_PostCloneReceiptRuleSet_603077(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCloneReceiptRuleSet_603076(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603078 = query.getOrDefault("Action")
  valid_603078 = validateParameter(valid_603078, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_603078 != nil:
    section.add "Action", valid_603078
  var valid_603079 = query.getOrDefault("Version")
  valid_603079 = validateParameter(valid_603079, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603079 != nil:
    section.add "Version", valid_603079
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603080 = header.getOrDefault("X-Amz-Date")
  valid_603080 = validateParameter(valid_603080, JString, required = false,
                                 default = nil)
  if valid_603080 != nil:
    section.add "X-Amz-Date", valid_603080
  var valid_603081 = header.getOrDefault("X-Amz-Security-Token")
  valid_603081 = validateParameter(valid_603081, JString, required = false,
                                 default = nil)
  if valid_603081 != nil:
    section.add "X-Amz-Security-Token", valid_603081
  var valid_603082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "X-Amz-Content-Sha256", valid_603082
  var valid_603083 = header.getOrDefault("X-Amz-Algorithm")
  valid_603083 = validateParameter(valid_603083, JString, required = false,
                                 default = nil)
  if valid_603083 != nil:
    section.add "X-Amz-Algorithm", valid_603083
  var valid_603084 = header.getOrDefault("X-Amz-Signature")
  valid_603084 = validateParameter(valid_603084, JString, required = false,
                                 default = nil)
  if valid_603084 != nil:
    section.add "X-Amz-Signature", valid_603084
  var valid_603085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-SignedHeaders", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-Credential")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-Credential", valid_603086
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalRuleSetName` field"
  var valid_603087 = formData.getOrDefault("OriginalRuleSetName")
  valid_603087 = validateParameter(valid_603087, JString, required = true,
                                 default = nil)
  if valid_603087 != nil:
    section.add "OriginalRuleSetName", valid_603087
  var valid_603088 = formData.getOrDefault("RuleSetName")
  valid_603088 = validateParameter(valid_603088, JString, required = true,
                                 default = nil)
  if valid_603088 != nil:
    section.add "RuleSetName", valid_603088
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603089: Call_PostCloneReceiptRuleSet_603075; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603089.validator(path, query, header, formData, body)
  let scheme = call_603089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603089.url(scheme.get, call_603089.host, call_603089.base,
                         call_603089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603089, url, valid)

proc call*(call_603090: Call_PostCloneReceiptRuleSet_603075;
          OriginalRuleSetName: string; RuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603091 = newJObject()
  var formData_603092 = newJObject()
  add(formData_603092, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(formData_603092, "RuleSetName", newJString(RuleSetName))
  add(query_603091, "Action", newJString(Action))
  add(query_603091, "Version", newJString(Version))
  result = call_603090.call(nil, query_603091, nil, formData_603092, nil)

var postCloneReceiptRuleSet* = Call_PostCloneReceiptRuleSet_603075(
    name: "postCloneReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_PostCloneReceiptRuleSet_603076, base: "/",
    url: url_PostCloneReceiptRuleSet_603077, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCloneReceiptRuleSet_602803 = ref object of OpenApiRestCall_602466
proc url_GetCloneReceiptRuleSet_602805(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCloneReceiptRuleSet_602804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_602917 = query.getOrDefault("RuleSetName")
  valid_602917 = validateParameter(valid_602917, JString, required = true,
                                 default = nil)
  if valid_602917 != nil:
    section.add "RuleSetName", valid_602917
  var valid_602931 = query.getOrDefault("Action")
  valid_602931 = validateParameter(valid_602931, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_602931 != nil:
    section.add "Action", valid_602931
  var valid_602932 = query.getOrDefault("OriginalRuleSetName")
  valid_602932 = validateParameter(valid_602932, JString, required = true,
                                 default = nil)
  if valid_602932 != nil:
    section.add "OriginalRuleSetName", valid_602932
  var valid_602933 = query.getOrDefault("Version")
  valid_602933 = validateParameter(valid_602933, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602933 != nil:
    section.add "Version", valid_602933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602934 = header.getOrDefault("X-Amz-Date")
  valid_602934 = validateParameter(valid_602934, JString, required = false,
                                 default = nil)
  if valid_602934 != nil:
    section.add "X-Amz-Date", valid_602934
  var valid_602935 = header.getOrDefault("X-Amz-Security-Token")
  valid_602935 = validateParameter(valid_602935, JString, required = false,
                                 default = nil)
  if valid_602935 != nil:
    section.add "X-Amz-Security-Token", valid_602935
  var valid_602936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602936 = validateParameter(valid_602936, JString, required = false,
                                 default = nil)
  if valid_602936 != nil:
    section.add "X-Amz-Content-Sha256", valid_602936
  var valid_602937 = header.getOrDefault("X-Amz-Algorithm")
  valid_602937 = validateParameter(valid_602937, JString, required = false,
                                 default = nil)
  if valid_602937 != nil:
    section.add "X-Amz-Algorithm", valid_602937
  var valid_602938 = header.getOrDefault("X-Amz-Signature")
  valid_602938 = validateParameter(valid_602938, JString, required = false,
                                 default = nil)
  if valid_602938 != nil:
    section.add "X-Amz-Signature", valid_602938
  var valid_602939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602939 = validateParameter(valid_602939, JString, required = false,
                                 default = nil)
  if valid_602939 != nil:
    section.add "X-Amz-SignedHeaders", valid_602939
  var valid_602940 = header.getOrDefault("X-Amz-Credential")
  valid_602940 = validateParameter(valid_602940, JString, required = false,
                                 default = nil)
  if valid_602940 != nil:
    section.add "X-Amz-Credential", valid_602940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602963: Call_GetCloneReceiptRuleSet_602803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602963.validator(path, query, header, formData, body)
  let scheme = call_602963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602963.url(scheme.get, call_602963.host, call_602963.base,
                         call_602963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602963, url, valid)

proc call*(call_603034: Call_GetCloneReceiptRuleSet_602803; RuleSetName: string;
          OriginalRuleSetName: string; Action: string = "CloneReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Version: string (required)
  var query_603035 = newJObject()
  add(query_603035, "RuleSetName", newJString(RuleSetName))
  add(query_603035, "Action", newJString(Action))
  add(query_603035, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_603035, "Version", newJString(Version))
  result = call_603034.call(nil, query_603035, nil, nil, nil)

var getCloneReceiptRuleSet* = Call_GetCloneReceiptRuleSet_602803(
    name: "getCloneReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_GetCloneReceiptRuleSet_602804, base: "/",
    url: url_GetCloneReceiptRuleSet_602805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSet_603109 = ref object of OpenApiRestCall_602466
proc url_PostCreateConfigurationSet_603111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateConfigurationSet_603110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603112 = query.getOrDefault("Action")
  valid_603112 = validateParameter(valid_603112, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_603112 != nil:
    section.add "Action", valid_603112
  var valid_603113 = query.getOrDefault("Version")
  valid_603113 = validateParameter(valid_603113, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603113 != nil:
    section.add "Version", valid_603113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603114 = header.getOrDefault("X-Amz-Date")
  valid_603114 = validateParameter(valid_603114, JString, required = false,
                                 default = nil)
  if valid_603114 != nil:
    section.add "X-Amz-Date", valid_603114
  var valid_603115 = header.getOrDefault("X-Amz-Security-Token")
  valid_603115 = validateParameter(valid_603115, JString, required = false,
                                 default = nil)
  if valid_603115 != nil:
    section.add "X-Amz-Security-Token", valid_603115
  var valid_603116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603116 = validateParameter(valid_603116, JString, required = false,
                                 default = nil)
  if valid_603116 != nil:
    section.add "X-Amz-Content-Sha256", valid_603116
  var valid_603117 = header.getOrDefault("X-Amz-Algorithm")
  valid_603117 = validateParameter(valid_603117, JString, required = false,
                                 default = nil)
  if valid_603117 != nil:
    section.add "X-Amz-Algorithm", valid_603117
  var valid_603118 = header.getOrDefault("X-Amz-Signature")
  valid_603118 = validateParameter(valid_603118, JString, required = false,
                                 default = nil)
  if valid_603118 != nil:
    section.add "X-Amz-Signature", valid_603118
  var valid_603119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603119 = validateParameter(valid_603119, JString, required = false,
                                 default = nil)
  if valid_603119 != nil:
    section.add "X-Amz-SignedHeaders", valid_603119
  var valid_603120 = header.getOrDefault("X-Amz-Credential")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "X-Amz-Credential", valid_603120
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  section = newJObject()
  var valid_603121 = formData.getOrDefault("ConfigurationSet.Name")
  valid_603121 = validateParameter(valid_603121, JString, required = false,
                                 default = nil)
  if valid_603121 != nil:
    section.add "ConfigurationSet.Name", valid_603121
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603122: Call_PostCreateConfigurationSet_603109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603122.validator(path, query, header, formData, body)
  let scheme = call_603122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603122.url(scheme.get, call_603122.host, call_603122.base,
                         call_603122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603122, url, valid)

proc call*(call_603123: Call_PostCreateConfigurationSet_603109;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603124 = newJObject()
  var formData_603125 = newJObject()
  add(formData_603125, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_603124, "Action", newJString(Action))
  add(query_603124, "Version", newJString(Version))
  result = call_603123.call(nil, query_603124, nil, formData_603125, nil)

var postCreateConfigurationSet* = Call_PostCreateConfigurationSet_603109(
    name: "postCreateConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_PostCreateConfigurationSet_603110, base: "/",
    url: url_PostCreateConfigurationSet_603111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSet_603093 = ref object of OpenApiRestCall_602466
proc url_GetCreateConfigurationSet_603095(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateConfigurationSet_603094(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603096 = query.getOrDefault("ConfigurationSet.Name")
  valid_603096 = validateParameter(valid_603096, JString, required = false,
                                 default = nil)
  if valid_603096 != nil:
    section.add "ConfigurationSet.Name", valid_603096
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603097 = query.getOrDefault("Action")
  valid_603097 = validateParameter(valid_603097, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_603097 != nil:
    section.add "Action", valid_603097
  var valid_603098 = query.getOrDefault("Version")
  valid_603098 = validateParameter(valid_603098, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603098 != nil:
    section.add "Version", valid_603098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603099 = header.getOrDefault("X-Amz-Date")
  valid_603099 = validateParameter(valid_603099, JString, required = false,
                                 default = nil)
  if valid_603099 != nil:
    section.add "X-Amz-Date", valid_603099
  var valid_603100 = header.getOrDefault("X-Amz-Security-Token")
  valid_603100 = validateParameter(valid_603100, JString, required = false,
                                 default = nil)
  if valid_603100 != nil:
    section.add "X-Amz-Security-Token", valid_603100
  var valid_603101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "X-Amz-Content-Sha256", valid_603101
  var valid_603102 = header.getOrDefault("X-Amz-Algorithm")
  valid_603102 = validateParameter(valid_603102, JString, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "X-Amz-Algorithm", valid_603102
  var valid_603103 = header.getOrDefault("X-Amz-Signature")
  valid_603103 = validateParameter(valid_603103, JString, required = false,
                                 default = nil)
  if valid_603103 != nil:
    section.add "X-Amz-Signature", valid_603103
  var valid_603104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603104 = validateParameter(valid_603104, JString, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "X-Amz-SignedHeaders", valid_603104
  var valid_603105 = header.getOrDefault("X-Amz-Credential")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-Credential", valid_603105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603106: Call_GetCreateConfigurationSet_603093; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603106.validator(path, query, header, formData, body)
  let scheme = call_603106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603106.url(scheme.get, call_603106.host, call_603106.base,
                         call_603106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603106, url, valid)

proc call*(call_603107: Call_GetCreateConfigurationSet_603093;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603108 = newJObject()
  add(query_603108, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_603108, "Action", newJString(Action))
  add(query_603108, "Version", newJString(Version))
  result = call_603107.call(nil, query_603108, nil, nil, nil)

var getCreateConfigurationSet* = Call_GetCreateConfigurationSet_603093(
    name: "getCreateConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_GetCreateConfigurationSet_603094, base: "/",
    url: url_GetCreateConfigurationSet_603095,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetEventDestination_603148 = ref object of OpenApiRestCall_602466
proc url_PostCreateConfigurationSetEventDestination_603150(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateConfigurationSetEventDestination_603149(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603151 = query.getOrDefault("Action")
  valid_603151 = validateParameter(valid_603151, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_603151 != nil:
    section.add "Action", valid_603151
  var valid_603152 = query.getOrDefault("Version")
  valid_603152 = validateParameter(valid_603152, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603152 != nil:
    section.add "Version", valid_603152
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603153 = header.getOrDefault("X-Amz-Date")
  valid_603153 = validateParameter(valid_603153, JString, required = false,
                                 default = nil)
  if valid_603153 != nil:
    section.add "X-Amz-Date", valid_603153
  var valid_603154 = header.getOrDefault("X-Amz-Security-Token")
  valid_603154 = validateParameter(valid_603154, JString, required = false,
                                 default = nil)
  if valid_603154 != nil:
    section.add "X-Amz-Security-Token", valid_603154
  var valid_603155 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603155 = validateParameter(valid_603155, JString, required = false,
                                 default = nil)
  if valid_603155 != nil:
    section.add "X-Amz-Content-Sha256", valid_603155
  var valid_603156 = header.getOrDefault("X-Amz-Algorithm")
  valid_603156 = validateParameter(valid_603156, JString, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "X-Amz-Algorithm", valid_603156
  var valid_603157 = header.getOrDefault("X-Amz-Signature")
  valid_603157 = validateParameter(valid_603157, JString, required = false,
                                 default = nil)
  if valid_603157 != nil:
    section.add "X-Amz-Signature", valid_603157
  var valid_603158 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603158 = validateParameter(valid_603158, JString, required = false,
                                 default = nil)
  if valid_603158 != nil:
    section.add "X-Amz-SignedHeaders", valid_603158
  var valid_603159 = header.getOrDefault("X-Amz-Credential")
  valid_603159 = validateParameter(valid_603159, JString, required = false,
                                 default = nil)
  if valid_603159 != nil:
    section.add "X-Amz-Credential", valid_603159
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603160 = formData.getOrDefault("ConfigurationSetName")
  valid_603160 = validateParameter(valid_603160, JString, required = true,
                                 default = nil)
  if valid_603160 != nil:
    section.add "ConfigurationSetName", valid_603160
  var valid_603161 = formData.getOrDefault("EventDestination.Name")
  valid_603161 = validateParameter(valid_603161, JString, required = false,
                                 default = nil)
  if valid_603161 != nil:
    section.add "EventDestination.Name", valid_603161
  var valid_603162 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_603162 = validateParameter(valid_603162, JString, required = false,
                                 default = nil)
  if valid_603162 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_603162
  var valid_603163 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_603163 = validateParameter(valid_603163, JArray, required = false,
                                 default = nil)
  if valid_603163 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_603163
  var valid_603164 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_603164 = validateParameter(valid_603164, JString, required = false,
                                 default = nil)
  if valid_603164 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_603164
  var valid_603165 = formData.getOrDefault("EventDestination.Enabled")
  valid_603165 = validateParameter(valid_603165, JString, required = false,
                                 default = nil)
  if valid_603165 != nil:
    section.add "EventDestination.Enabled", valid_603165
  var valid_603166 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_603166 = validateParameter(valid_603166, JString, required = false,
                                 default = nil)
  if valid_603166 != nil:
    section.add "EventDestination.SNSDestination", valid_603166
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603167: Call_PostCreateConfigurationSetEventDestination_603148;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603167.validator(path, query, header, formData, body)
  let scheme = call_603167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603167.url(scheme.get, call_603167.host, call_603167.base,
                         call_603167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603167, url, valid)

proc call*(call_603168: Call_PostCreateConfigurationSetEventDestination_603148;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_603169 = newJObject()
  var formData_603170 = newJObject()
  add(formData_603170, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_603170, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_603170, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_603169, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_603170.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_603170, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_603170, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_603170, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_603169, "Version", newJString(Version))
  result = call_603168.call(nil, query_603169, nil, formData_603170, nil)

var postCreateConfigurationSetEventDestination* = Call_PostCreateConfigurationSetEventDestination_603148(
    name: "postCreateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_PostCreateConfigurationSetEventDestination_603149,
    base: "/", url: url_PostCreateConfigurationSetEventDestination_603150,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetEventDestination_603126 = ref object of OpenApiRestCall_602466
proc url_GetCreateConfigurationSetEventDestination_603128(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateConfigurationSetEventDestination_603127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603129 = query.getOrDefault("EventDestination.Enabled")
  valid_603129 = validateParameter(valid_603129, JString, required = false,
                                 default = nil)
  if valid_603129 != nil:
    section.add "EventDestination.Enabled", valid_603129
  var valid_603130 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_603130 = validateParameter(valid_603130, JString, required = false,
                                 default = nil)
  if valid_603130 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_603130
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603131 = query.getOrDefault("Action")
  valid_603131 = validateParameter(valid_603131, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_603131 != nil:
    section.add "Action", valid_603131
  var valid_603132 = query.getOrDefault("EventDestination.Name")
  valid_603132 = validateParameter(valid_603132, JString, required = false,
                                 default = nil)
  if valid_603132 != nil:
    section.add "EventDestination.Name", valid_603132
  var valid_603133 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_603133 = validateParameter(valid_603133, JString, required = false,
                                 default = nil)
  if valid_603133 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_603133
  var valid_603134 = query.getOrDefault("EventDestination.SNSDestination")
  valid_603134 = validateParameter(valid_603134, JString, required = false,
                                 default = nil)
  if valid_603134 != nil:
    section.add "EventDestination.SNSDestination", valid_603134
  var valid_603135 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_603135 = validateParameter(valid_603135, JArray, required = false,
                                 default = nil)
  if valid_603135 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_603135
  var valid_603136 = query.getOrDefault("ConfigurationSetName")
  valid_603136 = validateParameter(valid_603136, JString, required = true,
                                 default = nil)
  if valid_603136 != nil:
    section.add "ConfigurationSetName", valid_603136
  var valid_603137 = query.getOrDefault("Version")
  valid_603137 = validateParameter(valid_603137, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603137 != nil:
    section.add "Version", valid_603137
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603138 = header.getOrDefault("X-Amz-Date")
  valid_603138 = validateParameter(valid_603138, JString, required = false,
                                 default = nil)
  if valid_603138 != nil:
    section.add "X-Amz-Date", valid_603138
  var valid_603139 = header.getOrDefault("X-Amz-Security-Token")
  valid_603139 = validateParameter(valid_603139, JString, required = false,
                                 default = nil)
  if valid_603139 != nil:
    section.add "X-Amz-Security-Token", valid_603139
  var valid_603140 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603140 = validateParameter(valid_603140, JString, required = false,
                                 default = nil)
  if valid_603140 != nil:
    section.add "X-Amz-Content-Sha256", valid_603140
  var valid_603141 = header.getOrDefault("X-Amz-Algorithm")
  valid_603141 = validateParameter(valid_603141, JString, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "X-Amz-Algorithm", valid_603141
  var valid_603142 = header.getOrDefault("X-Amz-Signature")
  valid_603142 = validateParameter(valid_603142, JString, required = false,
                                 default = nil)
  if valid_603142 != nil:
    section.add "X-Amz-Signature", valid_603142
  var valid_603143 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603143 = validateParameter(valid_603143, JString, required = false,
                                 default = nil)
  if valid_603143 != nil:
    section.add "X-Amz-SignedHeaders", valid_603143
  var valid_603144 = header.getOrDefault("X-Amz-Credential")
  valid_603144 = validateParameter(valid_603144, JString, required = false,
                                 default = nil)
  if valid_603144 != nil:
    section.add "X-Amz-Credential", valid_603144
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603145: Call_GetCreateConfigurationSetEventDestination_603126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603145.validator(path, query, header, formData, body)
  let scheme = call_603145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603145.url(scheme.get, call_603145.host, call_603145.base,
                         call_603145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603145, url, valid)

proc call*(call_603146: Call_GetCreateConfigurationSetEventDestination_603126;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: string (required)
  var query_603147 = newJObject()
  add(query_603147, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_603147, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_603147, "Action", newJString(Action))
  add(query_603147, "EventDestination.Name", newJString(EventDestinationName))
  add(query_603147, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_603147, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_603147.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_603147, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603147, "Version", newJString(Version))
  result = call_603146.call(nil, query_603147, nil, nil, nil)

var getCreateConfigurationSetEventDestination* = Call_GetCreateConfigurationSetEventDestination_603126(
    name: "getCreateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_GetCreateConfigurationSetEventDestination_603127,
    base: "/", url: url_GetCreateConfigurationSetEventDestination_603128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetTrackingOptions_603188 = ref object of OpenApiRestCall_602466
proc url_PostCreateConfigurationSetTrackingOptions_603190(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateConfigurationSetTrackingOptions_603189(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603191 = query.getOrDefault("Action")
  valid_603191 = validateParameter(valid_603191, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_603191 != nil:
    section.add "Action", valid_603191
  var valid_603192 = query.getOrDefault("Version")
  valid_603192 = validateParameter(valid_603192, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603192 != nil:
    section.add "Version", valid_603192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603193 = header.getOrDefault("X-Amz-Date")
  valid_603193 = validateParameter(valid_603193, JString, required = false,
                                 default = nil)
  if valid_603193 != nil:
    section.add "X-Amz-Date", valid_603193
  var valid_603194 = header.getOrDefault("X-Amz-Security-Token")
  valid_603194 = validateParameter(valid_603194, JString, required = false,
                                 default = nil)
  if valid_603194 != nil:
    section.add "X-Amz-Security-Token", valid_603194
  var valid_603195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603195 = validateParameter(valid_603195, JString, required = false,
                                 default = nil)
  if valid_603195 != nil:
    section.add "X-Amz-Content-Sha256", valid_603195
  var valid_603196 = header.getOrDefault("X-Amz-Algorithm")
  valid_603196 = validateParameter(valid_603196, JString, required = false,
                                 default = nil)
  if valid_603196 != nil:
    section.add "X-Amz-Algorithm", valid_603196
  var valid_603197 = header.getOrDefault("X-Amz-Signature")
  valid_603197 = validateParameter(valid_603197, JString, required = false,
                                 default = nil)
  if valid_603197 != nil:
    section.add "X-Amz-Signature", valid_603197
  var valid_603198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603198 = validateParameter(valid_603198, JString, required = false,
                                 default = nil)
  if valid_603198 != nil:
    section.add "X-Amz-SignedHeaders", valid_603198
  var valid_603199 = header.getOrDefault("X-Amz-Credential")
  valid_603199 = validateParameter(valid_603199, JString, required = false,
                                 default = nil)
  if valid_603199 != nil:
    section.add "X-Amz-Credential", valid_603199
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603200 = formData.getOrDefault("ConfigurationSetName")
  valid_603200 = validateParameter(valid_603200, JString, required = true,
                                 default = nil)
  if valid_603200 != nil:
    section.add "ConfigurationSetName", valid_603200
  var valid_603201 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_603201 = validateParameter(valid_603201, JString, required = false,
                                 default = nil)
  if valid_603201 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_603201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603202: Call_PostCreateConfigurationSetTrackingOptions_603188;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603202.validator(path, query, header, formData, body)
  let scheme = call_603202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603202.url(scheme.get, call_603202.host, call_603202.base,
                         call_603202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603202, url, valid)

proc call*(call_603203: Call_PostCreateConfigurationSetTrackingOptions_603188;
          ConfigurationSetName: string;
          Action: string = "CreateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_603204 = newJObject()
  var formData_603205 = newJObject()
  add(formData_603205, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603204, "Action", newJString(Action))
  add(formData_603205, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_603204, "Version", newJString(Version))
  result = call_603203.call(nil, query_603204, nil, formData_603205, nil)

var postCreateConfigurationSetTrackingOptions* = Call_PostCreateConfigurationSetTrackingOptions_603188(
    name: "postCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_PostCreateConfigurationSetTrackingOptions_603189,
    base: "/", url: url_PostCreateConfigurationSetTrackingOptions_603190,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetTrackingOptions_603171 = ref object of OpenApiRestCall_602466
proc url_GetCreateConfigurationSetTrackingOptions_603173(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateConfigurationSetTrackingOptions_603172(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603174 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_603174
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603175 = query.getOrDefault("Action")
  valid_603175 = validateParameter(valid_603175, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_603175 != nil:
    section.add "Action", valid_603175
  var valid_603176 = query.getOrDefault("ConfigurationSetName")
  valid_603176 = validateParameter(valid_603176, JString, required = true,
                                 default = nil)
  if valid_603176 != nil:
    section.add "ConfigurationSetName", valid_603176
  var valid_603177 = query.getOrDefault("Version")
  valid_603177 = validateParameter(valid_603177, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603177 != nil:
    section.add "Version", valid_603177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603178 = header.getOrDefault("X-Amz-Date")
  valid_603178 = validateParameter(valid_603178, JString, required = false,
                                 default = nil)
  if valid_603178 != nil:
    section.add "X-Amz-Date", valid_603178
  var valid_603179 = header.getOrDefault("X-Amz-Security-Token")
  valid_603179 = validateParameter(valid_603179, JString, required = false,
                                 default = nil)
  if valid_603179 != nil:
    section.add "X-Amz-Security-Token", valid_603179
  var valid_603180 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603180 = validateParameter(valid_603180, JString, required = false,
                                 default = nil)
  if valid_603180 != nil:
    section.add "X-Amz-Content-Sha256", valid_603180
  var valid_603181 = header.getOrDefault("X-Amz-Algorithm")
  valid_603181 = validateParameter(valid_603181, JString, required = false,
                                 default = nil)
  if valid_603181 != nil:
    section.add "X-Amz-Algorithm", valid_603181
  var valid_603182 = header.getOrDefault("X-Amz-Signature")
  valid_603182 = validateParameter(valid_603182, JString, required = false,
                                 default = nil)
  if valid_603182 != nil:
    section.add "X-Amz-Signature", valid_603182
  var valid_603183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603183 = validateParameter(valid_603183, JString, required = false,
                                 default = nil)
  if valid_603183 != nil:
    section.add "X-Amz-SignedHeaders", valid_603183
  var valid_603184 = header.getOrDefault("X-Amz-Credential")
  valid_603184 = validateParameter(valid_603184, JString, required = false,
                                 default = nil)
  if valid_603184 != nil:
    section.add "X-Amz-Credential", valid_603184
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603185: Call_GetCreateConfigurationSetTrackingOptions_603171;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603185.validator(path, query, header, formData, body)
  let scheme = call_603185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603185.url(scheme.get, call_603185.host, call_603185.base,
                         call_603185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603185, url, valid)

proc call*(call_603186: Call_GetCreateConfigurationSetTrackingOptions_603171;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: string (required)
  var query_603187 = newJObject()
  add(query_603187, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_603187, "Action", newJString(Action))
  add(query_603187, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603187, "Version", newJString(Version))
  result = call_603186.call(nil, query_603187, nil, nil, nil)

var getCreateConfigurationSetTrackingOptions* = Call_GetCreateConfigurationSetTrackingOptions_603171(
    name: "getCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_GetCreateConfigurationSetTrackingOptions_603172,
    base: "/", url: url_GetCreateConfigurationSetTrackingOptions_603173,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomVerificationEmailTemplate_603227 = ref object of OpenApiRestCall_602466
proc url_PostCreateCustomVerificationEmailTemplate_603229(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCustomVerificationEmailTemplate_603228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603230 = query.getOrDefault("Action")
  valid_603230 = validateParameter(valid_603230, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_603230 != nil:
    section.add "Action", valid_603230
  var valid_603231 = query.getOrDefault("Version")
  valid_603231 = validateParameter(valid_603231, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603231 != nil:
    section.add "Version", valid_603231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603232 = header.getOrDefault("X-Amz-Date")
  valid_603232 = validateParameter(valid_603232, JString, required = false,
                                 default = nil)
  if valid_603232 != nil:
    section.add "X-Amz-Date", valid_603232
  var valid_603233 = header.getOrDefault("X-Amz-Security-Token")
  valid_603233 = validateParameter(valid_603233, JString, required = false,
                                 default = nil)
  if valid_603233 != nil:
    section.add "X-Amz-Security-Token", valid_603233
  var valid_603234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603234 = validateParameter(valid_603234, JString, required = false,
                                 default = nil)
  if valid_603234 != nil:
    section.add "X-Amz-Content-Sha256", valid_603234
  var valid_603235 = header.getOrDefault("X-Amz-Algorithm")
  valid_603235 = validateParameter(valid_603235, JString, required = false,
                                 default = nil)
  if valid_603235 != nil:
    section.add "X-Amz-Algorithm", valid_603235
  var valid_603236 = header.getOrDefault("X-Amz-Signature")
  valid_603236 = validateParameter(valid_603236, JString, required = false,
                                 default = nil)
  if valid_603236 != nil:
    section.add "X-Amz-Signature", valid_603236
  var valid_603237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603237 = validateParameter(valid_603237, JString, required = false,
                                 default = nil)
  if valid_603237 != nil:
    section.add "X-Amz-SignedHeaders", valid_603237
  var valid_603238 = header.getOrDefault("X-Amz-Credential")
  valid_603238 = validateParameter(valid_603238, JString, required = false,
                                 default = nil)
  if valid_603238 != nil:
    section.add "X-Amz-Credential", valid_603238
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SuccessRedirectionURL` field"
  var valid_603239 = formData.getOrDefault("SuccessRedirectionURL")
  valid_603239 = validateParameter(valid_603239, JString, required = true,
                                 default = nil)
  if valid_603239 != nil:
    section.add "SuccessRedirectionURL", valid_603239
  var valid_603240 = formData.getOrDefault("FailureRedirectionURL")
  valid_603240 = validateParameter(valid_603240, JString, required = true,
                                 default = nil)
  if valid_603240 != nil:
    section.add "FailureRedirectionURL", valid_603240
  var valid_603241 = formData.getOrDefault("FromEmailAddress")
  valid_603241 = validateParameter(valid_603241, JString, required = true,
                                 default = nil)
  if valid_603241 != nil:
    section.add "FromEmailAddress", valid_603241
  var valid_603242 = formData.getOrDefault("TemplateContent")
  valid_603242 = validateParameter(valid_603242, JString, required = true,
                                 default = nil)
  if valid_603242 != nil:
    section.add "TemplateContent", valid_603242
  var valid_603243 = formData.getOrDefault("TemplateName")
  valid_603243 = validateParameter(valid_603243, JString, required = true,
                                 default = nil)
  if valid_603243 != nil:
    section.add "TemplateName", valid_603243
  var valid_603244 = formData.getOrDefault("TemplateSubject")
  valid_603244 = validateParameter(valid_603244, JString, required = true,
                                 default = nil)
  if valid_603244 != nil:
    section.add "TemplateSubject", valid_603244
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603245: Call_PostCreateCustomVerificationEmailTemplate_603227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603245.validator(path, query, header, formData, body)
  let scheme = call_603245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603245.url(scheme.get, call_603245.host, call_603245.base,
                         call_603245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603245, url, valid)

proc call*(call_603246: Call_PostCreateCustomVerificationEmailTemplate_603227;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          FromEmailAddress: string; TemplateContent: string; TemplateName: string;
          TemplateSubject: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_603247 = newJObject()
  var formData_603248 = newJObject()
  add(formData_603248, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_603248, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_603248, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_603247, "Action", newJString(Action))
  add(formData_603248, "TemplateContent", newJString(TemplateContent))
  add(formData_603248, "TemplateName", newJString(TemplateName))
  add(formData_603248, "TemplateSubject", newJString(TemplateSubject))
  add(query_603247, "Version", newJString(Version))
  result = call_603246.call(nil, query_603247, nil, formData_603248, nil)

var postCreateCustomVerificationEmailTemplate* = Call_PostCreateCustomVerificationEmailTemplate_603227(
    name: "postCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_PostCreateCustomVerificationEmailTemplate_603228,
    base: "/", url: url_PostCreateCustomVerificationEmailTemplate_603229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomVerificationEmailTemplate_603206 = ref object of OpenApiRestCall_602466
proc url_GetCreateCustomVerificationEmailTemplate_603208(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCustomVerificationEmailTemplate_603207(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateSubject` field"
  var valid_603209 = query.getOrDefault("TemplateSubject")
  valid_603209 = validateParameter(valid_603209, JString, required = true,
                                 default = nil)
  if valid_603209 != nil:
    section.add "TemplateSubject", valid_603209
  var valid_603210 = query.getOrDefault("FromEmailAddress")
  valid_603210 = validateParameter(valid_603210, JString, required = true,
                                 default = nil)
  if valid_603210 != nil:
    section.add "FromEmailAddress", valid_603210
  var valid_603211 = query.getOrDefault("TemplateContent")
  valid_603211 = validateParameter(valid_603211, JString, required = true,
                                 default = nil)
  if valid_603211 != nil:
    section.add "TemplateContent", valid_603211
  var valid_603212 = query.getOrDefault("Action")
  valid_603212 = validateParameter(valid_603212, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_603212 != nil:
    section.add "Action", valid_603212
  var valid_603213 = query.getOrDefault("TemplateName")
  valid_603213 = validateParameter(valid_603213, JString, required = true,
                                 default = nil)
  if valid_603213 != nil:
    section.add "TemplateName", valid_603213
  var valid_603214 = query.getOrDefault("SuccessRedirectionURL")
  valid_603214 = validateParameter(valid_603214, JString, required = true,
                                 default = nil)
  if valid_603214 != nil:
    section.add "SuccessRedirectionURL", valid_603214
  var valid_603215 = query.getOrDefault("FailureRedirectionURL")
  valid_603215 = validateParameter(valid_603215, JString, required = true,
                                 default = nil)
  if valid_603215 != nil:
    section.add "FailureRedirectionURL", valid_603215
  var valid_603216 = query.getOrDefault("Version")
  valid_603216 = validateParameter(valid_603216, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603216 != nil:
    section.add "Version", valid_603216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603217 = header.getOrDefault("X-Amz-Date")
  valid_603217 = validateParameter(valid_603217, JString, required = false,
                                 default = nil)
  if valid_603217 != nil:
    section.add "X-Amz-Date", valid_603217
  var valid_603218 = header.getOrDefault("X-Amz-Security-Token")
  valid_603218 = validateParameter(valid_603218, JString, required = false,
                                 default = nil)
  if valid_603218 != nil:
    section.add "X-Amz-Security-Token", valid_603218
  var valid_603219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603219 = validateParameter(valid_603219, JString, required = false,
                                 default = nil)
  if valid_603219 != nil:
    section.add "X-Amz-Content-Sha256", valid_603219
  var valid_603220 = header.getOrDefault("X-Amz-Algorithm")
  valid_603220 = validateParameter(valid_603220, JString, required = false,
                                 default = nil)
  if valid_603220 != nil:
    section.add "X-Amz-Algorithm", valid_603220
  var valid_603221 = header.getOrDefault("X-Amz-Signature")
  valid_603221 = validateParameter(valid_603221, JString, required = false,
                                 default = nil)
  if valid_603221 != nil:
    section.add "X-Amz-Signature", valid_603221
  var valid_603222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "X-Amz-SignedHeaders", valid_603222
  var valid_603223 = header.getOrDefault("X-Amz-Credential")
  valid_603223 = validateParameter(valid_603223, JString, required = false,
                                 default = nil)
  if valid_603223 != nil:
    section.add "X-Amz-Credential", valid_603223
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603224: Call_GetCreateCustomVerificationEmailTemplate_603206;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603224.validator(path, query, header, formData, body)
  let scheme = call_603224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603224.url(scheme.get, call_603224.host, call_603224.base,
                         call_603224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603224, url, valid)

proc call*(call_603225: Call_GetCreateCustomVerificationEmailTemplate_603206;
          TemplateSubject: string; FromEmailAddress: string;
          TemplateContent: string; TemplateName: string;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_603226 = newJObject()
  add(query_603226, "TemplateSubject", newJString(TemplateSubject))
  add(query_603226, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_603226, "TemplateContent", newJString(TemplateContent))
  add(query_603226, "Action", newJString(Action))
  add(query_603226, "TemplateName", newJString(TemplateName))
  add(query_603226, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_603226, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_603226, "Version", newJString(Version))
  result = call_603225.call(nil, query_603226, nil, nil, nil)

var getCreateCustomVerificationEmailTemplate* = Call_GetCreateCustomVerificationEmailTemplate_603206(
    name: "getCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_GetCreateCustomVerificationEmailTemplate_603207,
    base: "/", url: url_GetCreateCustomVerificationEmailTemplate_603208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptFilter_603266 = ref object of OpenApiRestCall_602466
proc url_PostCreateReceiptFilter_603268(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateReceiptFilter_603267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603269 = query.getOrDefault("Action")
  valid_603269 = validateParameter(valid_603269, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_603269 != nil:
    section.add "Action", valid_603269
  var valid_603270 = query.getOrDefault("Version")
  valid_603270 = validateParameter(valid_603270, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603270 != nil:
    section.add "Version", valid_603270
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603271 = header.getOrDefault("X-Amz-Date")
  valid_603271 = validateParameter(valid_603271, JString, required = false,
                                 default = nil)
  if valid_603271 != nil:
    section.add "X-Amz-Date", valid_603271
  var valid_603272 = header.getOrDefault("X-Amz-Security-Token")
  valid_603272 = validateParameter(valid_603272, JString, required = false,
                                 default = nil)
  if valid_603272 != nil:
    section.add "X-Amz-Security-Token", valid_603272
  var valid_603273 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603273 = validateParameter(valid_603273, JString, required = false,
                                 default = nil)
  if valid_603273 != nil:
    section.add "X-Amz-Content-Sha256", valid_603273
  var valid_603274 = header.getOrDefault("X-Amz-Algorithm")
  valid_603274 = validateParameter(valid_603274, JString, required = false,
                                 default = nil)
  if valid_603274 != nil:
    section.add "X-Amz-Algorithm", valid_603274
  var valid_603275 = header.getOrDefault("X-Amz-Signature")
  valid_603275 = validateParameter(valid_603275, JString, required = false,
                                 default = nil)
  if valid_603275 != nil:
    section.add "X-Amz-Signature", valid_603275
  var valid_603276 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603276 = validateParameter(valid_603276, JString, required = false,
                                 default = nil)
  if valid_603276 != nil:
    section.add "X-Amz-SignedHeaders", valid_603276
  var valid_603277 = header.getOrDefault("X-Amz-Credential")
  valid_603277 = validateParameter(valid_603277, JString, required = false,
                                 default = nil)
  if valid_603277 != nil:
    section.add "X-Amz-Credential", valid_603277
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_603278 = formData.getOrDefault("Filter.IpFilter")
  valid_603278 = validateParameter(valid_603278, JString, required = false,
                                 default = nil)
  if valid_603278 != nil:
    section.add "Filter.IpFilter", valid_603278
  var valid_603279 = formData.getOrDefault("Filter.Name")
  valid_603279 = validateParameter(valid_603279, JString, required = false,
                                 default = nil)
  if valid_603279 != nil:
    section.add "Filter.Name", valid_603279
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603280: Call_PostCreateReceiptFilter_603266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603280.validator(path, query, header, formData, body)
  let scheme = call_603280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603280.url(scheme.get, call_603280.host, call_603280.base,
                         call_603280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603280, url, valid)

proc call*(call_603281: Call_PostCreateReceiptFilter_603266;
          Action: string = "CreateReceiptFilter"; FilterIpFilter: string = "";
          FilterName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_603282 = newJObject()
  var formData_603283 = newJObject()
  add(query_603282, "Action", newJString(Action))
  add(formData_603283, "Filter.IpFilter", newJString(FilterIpFilter))
  add(formData_603283, "Filter.Name", newJString(FilterName))
  add(query_603282, "Version", newJString(Version))
  result = call_603281.call(nil, query_603282, nil, formData_603283, nil)

var postCreateReceiptFilter* = Call_PostCreateReceiptFilter_603266(
    name: "postCreateReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_PostCreateReceiptFilter_603267, base: "/",
    url: url_PostCreateReceiptFilter_603268, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptFilter_603249 = ref object of OpenApiRestCall_602466
proc url_GetCreateReceiptFilter_603251(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateReceiptFilter_603250(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_603252 = query.getOrDefault("Filter.IpFilter")
  valid_603252 = validateParameter(valid_603252, JString, required = false,
                                 default = nil)
  if valid_603252 != nil:
    section.add "Filter.IpFilter", valid_603252
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603253 = query.getOrDefault("Action")
  valid_603253 = validateParameter(valid_603253, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_603253 != nil:
    section.add "Action", valid_603253
  var valid_603254 = query.getOrDefault("Version")
  valid_603254 = validateParameter(valid_603254, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603254 != nil:
    section.add "Version", valid_603254
  var valid_603255 = query.getOrDefault("Filter.Name")
  valid_603255 = validateParameter(valid_603255, JString, required = false,
                                 default = nil)
  if valid_603255 != nil:
    section.add "Filter.Name", valid_603255
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603256 = header.getOrDefault("X-Amz-Date")
  valid_603256 = validateParameter(valid_603256, JString, required = false,
                                 default = nil)
  if valid_603256 != nil:
    section.add "X-Amz-Date", valid_603256
  var valid_603257 = header.getOrDefault("X-Amz-Security-Token")
  valid_603257 = validateParameter(valid_603257, JString, required = false,
                                 default = nil)
  if valid_603257 != nil:
    section.add "X-Amz-Security-Token", valid_603257
  var valid_603258 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603258 = validateParameter(valid_603258, JString, required = false,
                                 default = nil)
  if valid_603258 != nil:
    section.add "X-Amz-Content-Sha256", valid_603258
  var valid_603259 = header.getOrDefault("X-Amz-Algorithm")
  valid_603259 = validateParameter(valid_603259, JString, required = false,
                                 default = nil)
  if valid_603259 != nil:
    section.add "X-Amz-Algorithm", valid_603259
  var valid_603260 = header.getOrDefault("X-Amz-Signature")
  valid_603260 = validateParameter(valid_603260, JString, required = false,
                                 default = nil)
  if valid_603260 != nil:
    section.add "X-Amz-Signature", valid_603260
  var valid_603261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603261 = validateParameter(valid_603261, JString, required = false,
                                 default = nil)
  if valid_603261 != nil:
    section.add "X-Amz-SignedHeaders", valid_603261
  var valid_603262 = header.getOrDefault("X-Amz-Credential")
  valid_603262 = validateParameter(valid_603262, JString, required = false,
                                 default = nil)
  if valid_603262 != nil:
    section.add "X-Amz-Credential", valid_603262
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603263: Call_GetCreateReceiptFilter_603249; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603263.validator(path, query, header, formData, body)
  let scheme = call_603263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603263.url(scheme.get, call_603263.host, call_603263.base,
                         call_603263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603263, url, valid)

proc call*(call_603264: Call_GetCreateReceiptFilter_603249;
          FilterIpFilter: string = ""; Action: string = "CreateReceiptFilter";
          Version: string = "2010-12-01"; FilterName: string = ""): Recallable =
  ## getCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_603265 = newJObject()
  add(query_603265, "Filter.IpFilter", newJString(FilterIpFilter))
  add(query_603265, "Action", newJString(Action))
  add(query_603265, "Version", newJString(Version))
  add(query_603265, "Filter.Name", newJString(FilterName))
  result = call_603264.call(nil, query_603265, nil, nil, nil)

var getCreateReceiptFilter* = Call_GetCreateReceiptFilter_603249(
    name: "getCreateReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_GetCreateReceiptFilter_603250, base: "/",
    url: url_GetCreateReceiptFilter_603251, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRule_603307 = ref object of OpenApiRestCall_602466
proc url_PostCreateReceiptRule_603309(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateReceiptRule_603308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603310 = query.getOrDefault("Action")
  valid_603310 = validateParameter(valid_603310, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_603310 != nil:
    section.add "Action", valid_603310
  var valid_603311 = query.getOrDefault("Version")
  valid_603311 = validateParameter(valid_603311, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603311 != nil:
    section.add "Version", valid_603311
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603312 = header.getOrDefault("X-Amz-Date")
  valid_603312 = validateParameter(valid_603312, JString, required = false,
                                 default = nil)
  if valid_603312 != nil:
    section.add "X-Amz-Date", valid_603312
  var valid_603313 = header.getOrDefault("X-Amz-Security-Token")
  valid_603313 = validateParameter(valid_603313, JString, required = false,
                                 default = nil)
  if valid_603313 != nil:
    section.add "X-Amz-Security-Token", valid_603313
  var valid_603314 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603314 = validateParameter(valid_603314, JString, required = false,
                                 default = nil)
  if valid_603314 != nil:
    section.add "X-Amz-Content-Sha256", valid_603314
  var valid_603315 = header.getOrDefault("X-Amz-Algorithm")
  valid_603315 = validateParameter(valid_603315, JString, required = false,
                                 default = nil)
  if valid_603315 != nil:
    section.add "X-Amz-Algorithm", valid_603315
  var valid_603316 = header.getOrDefault("X-Amz-Signature")
  valid_603316 = validateParameter(valid_603316, JString, required = false,
                                 default = nil)
  if valid_603316 != nil:
    section.add "X-Amz-Signature", valid_603316
  var valid_603317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603317 = validateParameter(valid_603317, JString, required = false,
                                 default = nil)
  if valid_603317 != nil:
    section.add "X-Amz-SignedHeaders", valid_603317
  var valid_603318 = header.getOrDefault("X-Amz-Credential")
  valid_603318 = validateParameter(valid_603318, JString, required = false,
                                 default = nil)
  if valid_603318 != nil:
    section.add "X-Amz-Credential", valid_603318
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_603319 = formData.getOrDefault("Rule.Recipients")
  valid_603319 = validateParameter(valid_603319, JArray, required = false,
                                 default = nil)
  if valid_603319 != nil:
    section.add "Rule.Recipients", valid_603319
  var valid_603320 = formData.getOrDefault("After")
  valid_603320 = validateParameter(valid_603320, JString, required = false,
                                 default = nil)
  if valid_603320 != nil:
    section.add "After", valid_603320
  var valid_603321 = formData.getOrDefault("Rule.Enabled")
  valid_603321 = validateParameter(valid_603321, JString, required = false,
                                 default = nil)
  if valid_603321 != nil:
    section.add "Rule.Enabled", valid_603321
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603322 = formData.getOrDefault("RuleSetName")
  valid_603322 = validateParameter(valid_603322, JString, required = true,
                                 default = nil)
  if valid_603322 != nil:
    section.add "RuleSetName", valid_603322
  var valid_603323 = formData.getOrDefault("Rule.Actions")
  valid_603323 = validateParameter(valid_603323, JArray, required = false,
                                 default = nil)
  if valid_603323 != nil:
    section.add "Rule.Actions", valid_603323
  var valid_603324 = formData.getOrDefault("Rule.Name")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "Rule.Name", valid_603324
  var valid_603325 = formData.getOrDefault("Rule.ScanEnabled")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "Rule.ScanEnabled", valid_603325
  var valid_603326 = formData.getOrDefault("Rule.TlsPolicy")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "Rule.TlsPolicy", valid_603326
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603327: Call_PostCreateReceiptRule_603307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603327.validator(path, query, header, formData, body)
  let scheme = call_603327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603327.url(scheme.get, call_603327.host, call_603327.base,
                         call_603327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603327, url, valid)

proc call*(call_603328: Call_PostCreateReceiptRule_603307; RuleSetName: string;
          RuleRecipients: JsonNode = nil; After: string = ""; RuleEnabled: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_603329 = newJObject()
  var formData_603330 = newJObject()
  if RuleRecipients != nil:
    formData_603330.add "Rule.Recipients", RuleRecipients
  add(formData_603330, "After", newJString(After))
  add(formData_603330, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_603330, "RuleSetName", newJString(RuleSetName))
  add(query_603329, "Action", newJString(Action))
  if RuleActions != nil:
    formData_603330.add "Rule.Actions", RuleActions
  add(formData_603330, "Rule.Name", newJString(RuleName))
  add(formData_603330, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_603330, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_603329, "Version", newJString(Version))
  result = call_603328.call(nil, query_603329, nil, formData_603330, nil)

var postCreateReceiptRule* = Call_PostCreateReceiptRule_603307(
    name: "postCreateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_PostCreateReceiptRule_603308, base: "/",
    url: url_PostCreateReceiptRule_603309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRule_603284 = ref object of OpenApiRestCall_602466
proc url_GetCreateReceiptRule_603286(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateReceiptRule_603285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603287 = query.getOrDefault("Rule.ScanEnabled")
  valid_603287 = validateParameter(valid_603287, JString, required = false,
                                 default = nil)
  if valid_603287 != nil:
    section.add "Rule.ScanEnabled", valid_603287
  var valid_603288 = query.getOrDefault("Rule.Name")
  valid_603288 = validateParameter(valid_603288, JString, required = false,
                                 default = nil)
  if valid_603288 != nil:
    section.add "Rule.Name", valid_603288
  var valid_603289 = query.getOrDefault("Rule.Enabled")
  valid_603289 = validateParameter(valid_603289, JString, required = false,
                                 default = nil)
  if valid_603289 != nil:
    section.add "Rule.Enabled", valid_603289
  var valid_603290 = query.getOrDefault("After")
  valid_603290 = validateParameter(valid_603290, JString, required = false,
                                 default = nil)
  if valid_603290 != nil:
    section.add "After", valid_603290
  var valid_603291 = query.getOrDefault("Rule.TlsPolicy")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "Rule.TlsPolicy", valid_603291
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603292 = query.getOrDefault("RuleSetName")
  valid_603292 = validateParameter(valid_603292, JString, required = true,
                                 default = nil)
  if valid_603292 != nil:
    section.add "RuleSetName", valid_603292
  var valid_603293 = query.getOrDefault("Action")
  valid_603293 = validateParameter(valid_603293, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_603293 != nil:
    section.add "Action", valid_603293
  var valid_603294 = query.getOrDefault("Rule.Actions")
  valid_603294 = validateParameter(valid_603294, JArray, required = false,
                                 default = nil)
  if valid_603294 != nil:
    section.add "Rule.Actions", valid_603294
  var valid_603295 = query.getOrDefault("Rule.Recipients")
  valid_603295 = validateParameter(valid_603295, JArray, required = false,
                                 default = nil)
  if valid_603295 != nil:
    section.add "Rule.Recipients", valid_603295
  var valid_603296 = query.getOrDefault("Version")
  valid_603296 = validateParameter(valid_603296, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603296 != nil:
    section.add "Version", valid_603296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603297 = header.getOrDefault("X-Amz-Date")
  valid_603297 = validateParameter(valid_603297, JString, required = false,
                                 default = nil)
  if valid_603297 != nil:
    section.add "X-Amz-Date", valid_603297
  var valid_603298 = header.getOrDefault("X-Amz-Security-Token")
  valid_603298 = validateParameter(valid_603298, JString, required = false,
                                 default = nil)
  if valid_603298 != nil:
    section.add "X-Amz-Security-Token", valid_603298
  var valid_603299 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603299 = validateParameter(valid_603299, JString, required = false,
                                 default = nil)
  if valid_603299 != nil:
    section.add "X-Amz-Content-Sha256", valid_603299
  var valid_603300 = header.getOrDefault("X-Amz-Algorithm")
  valid_603300 = validateParameter(valid_603300, JString, required = false,
                                 default = nil)
  if valid_603300 != nil:
    section.add "X-Amz-Algorithm", valid_603300
  var valid_603301 = header.getOrDefault("X-Amz-Signature")
  valid_603301 = validateParameter(valid_603301, JString, required = false,
                                 default = nil)
  if valid_603301 != nil:
    section.add "X-Amz-Signature", valid_603301
  var valid_603302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603302 = validateParameter(valid_603302, JString, required = false,
                                 default = nil)
  if valid_603302 != nil:
    section.add "X-Amz-SignedHeaders", valid_603302
  var valid_603303 = header.getOrDefault("X-Amz-Credential")
  valid_603303 = validateParameter(valid_603303, JString, required = false,
                                 default = nil)
  if valid_603303 != nil:
    section.add "X-Amz-Credential", valid_603303
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603304: Call_GetCreateReceiptRule_603284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603304.validator(path, query, header, formData, body)
  let scheme = call_603304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603304.url(scheme.get, call_603304.host, call_603304.base,
                         call_603304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603304, url, valid)

proc call*(call_603305: Call_GetCreateReceiptRule_603284; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          After: string = ""; RuleTlsPolicy: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleRecipients: JsonNode = nil; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_603306 = newJObject()
  add(query_603306, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_603306, "Rule.Name", newJString(RuleName))
  add(query_603306, "Rule.Enabled", newJString(RuleEnabled))
  add(query_603306, "After", newJString(After))
  add(query_603306, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_603306, "RuleSetName", newJString(RuleSetName))
  add(query_603306, "Action", newJString(Action))
  if RuleActions != nil:
    query_603306.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_603306.add "Rule.Recipients", RuleRecipients
  add(query_603306, "Version", newJString(Version))
  result = call_603305.call(nil, query_603306, nil, nil, nil)

var getCreateReceiptRule* = Call_GetCreateReceiptRule_603284(
    name: "getCreateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_GetCreateReceiptRule_603285, base: "/",
    url: url_GetCreateReceiptRule_603286, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRuleSet_603347 = ref object of OpenApiRestCall_602466
proc url_PostCreateReceiptRuleSet_603349(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateReceiptRuleSet_603348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603350 = query.getOrDefault("Action")
  valid_603350 = validateParameter(valid_603350, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_603350 != nil:
    section.add "Action", valid_603350
  var valid_603351 = query.getOrDefault("Version")
  valid_603351 = validateParameter(valid_603351, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603351 != nil:
    section.add "Version", valid_603351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603352 = header.getOrDefault("X-Amz-Date")
  valid_603352 = validateParameter(valid_603352, JString, required = false,
                                 default = nil)
  if valid_603352 != nil:
    section.add "X-Amz-Date", valid_603352
  var valid_603353 = header.getOrDefault("X-Amz-Security-Token")
  valid_603353 = validateParameter(valid_603353, JString, required = false,
                                 default = nil)
  if valid_603353 != nil:
    section.add "X-Amz-Security-Token", valid_603353
  var valid_603354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603354 = validateParameter(valid_603354, JString, required = false,
                                 default = nil)
  if valid_603354 != nil:
    section.add "X-Amz-Content-Sha256", valid_603354
  var valid_603355 = header.getOrDefault("X-Amz-Algorithm")
  valid_603355 = validateParameter(valid_603355, JString, required = false,
                                 default = nil)
  if valid_603355 != nil:
    section.add "X-Amz-Algorithm", valid_603355
  var valid_603356 = header.getOrDefault("X-Amz-Signature")
  valid_603356 = validateParameter(valid_603356, JString, required = false,
                                 default = nil)
  if valid_603356 != nil:
    section.add "X-Amz-Signature", valid_603356
  var valid_603357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603357 = validateParameter(valid_603357, JString, required = false,
                                 default = nil)
  if valid_603357 != nil:
    section.add "X-Amz-SignedHeaders", valid_603357
  var valid_603358 = header.getOrDefault("X-Amz-Credential")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "X-Amz-Credential", valid_603358
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603359 = formData.getOrDefault("RuleSetName")
  valid_603359 = validateParameter(valid_603359, JString, required = true,
                                 default = nil)
  if valid_603359 != nil:
    section.add "RuleSetName", valid_603359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603360: Call_PostCreateReceiptRuleSet_603347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603360.validator(path, query, header, formData, body)
  let scheme = call_603360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603360.url(scheme.get, call_603360.host, call_603360.base,
                         call_603360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603360, url, valid)

proc call*(call_603361: Call_PostCreateReceiptRuleSet_603347; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603362 = newJObject()
  var formData_603363 = newJObject()
  add(formData_603363, "RuleSetName", newJString(RuleSetName))
  add(query_603362, "Action", newJString(Action))
  add(query_603362, "Version", newJString(Version))
  result = call_603361.call(nil, query_603362, nil, formData_603363, nil)

var postCreateReceiptRuleSet* = Call_PostCreateReceiptRuleSet_603347(
    name: "postCreateReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_PostCreateReceiptRuleSet_603348, base: "/",
    url: url_PostCreateReceiptRuleSet_603349, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRuleSet_603331 = ref object of OpenApiRestCall_602466
proc url_GetCreateReceiptRuleSet_603333(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateReceiptRuleSet_603332(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603334 = query.getOrDefault("RuleSetName")
  valid_603334 = validateParameter(valid_603334, JString, required = true,
                                 default = nil)
  if valid_603334 != nil:
    section.add "RuleSetName", valid_603334
  var valid_603335 = query.getOrDefault("Action")
  valid_603335 = validateParameter(valid_603335, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_603335 != nil:
    section.add "Action", valid_603335
  var valid_603336 = query.getOrDefault("Version")
  valid_603336 = validateParameter(valid_603336, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603336 != nil:
    section.add "Version", valid_603336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603337 = header.getOrDefault("X-Amz-Date")
  valid_603337 = validateParameter(valid_603337, JString, required = false,
                                 default = nil)
  if valid_603337 != nil:
    section.add "X-Amz-Date", valid_603337
  var valid_603338 = header.getOrDefault("X-Amz-Security-Token")
  valid_603338 = validateParameter(valid_603338, JString, required = false,
                                 default = nil)
  if valid_603338 != nil:
    section.add "X-Amz-Security-Token", valid_603338
  var valid_603339 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603339 = validateParameter(valid_603339, JString, required = false,
                                 default = nil)
  if valid_603339 != nil:
    section.add "X-Amz-Content-Sha256", valid_603339
  var valid_603340 = header.getOrDefault("X-Amz-Algorithm")
  valid_603340 = validateParameter(valid_603340, JString, required = false,
                                 default = nil)
  if valid_603340 != nil:
    section.add "X-Amz-Algorithm", valid_603340
  var valid_603341 = header.getOrDefault("X-Amz-Signature")
  valid_603341 = validateParameter(valid_603341, JString, required = false,
                                 default = nil)
  if valid_603341 != nil:
    section.add "X-Amz-Signature", valid_603341
  var valid_603342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603342 = validateParameter(valid_603342, JString, required = false,
                                 default = nil)
  if valid_603342 != nil:
    section.add "X-Amz-SignedHeaders", valid_603342
  var valid_603343 = header.getOrDefault("X-Amz-Credential")
  valid_603343 = validateParameter(valid_603343, JString, required = false,
                                 default = nil)
  if valid_603343 != nil:
    section.add "X-Amz-Credential", valid_603343
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603344: Call_GetCreateReceiptRuleSet_603331; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603344.validator(path, query, header, formData, body)
  let scheme = call_603344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603344.url(scheme.get, call_603344.host, call_603344.base,
                         call_603344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603344, url, valid)

proc call*(call_603345: Call_GetCreateReceiptRuleSet_603331; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603346 = newJObject()
  add(query_603346, "RuleSetName", newJString(RuleSetName))
  add(query_603346, "Action", newJString(Action))
  add(query_603346, "Version", newJString(Version))
  result = call_603345.call(nil, query_603346, nil, nil, nil)

var getCreateReceiptRuleSet* = Call_GetCreateReceiptRuleSet_603331(
    name: "getCreateReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_GetCreateReceiptRuleSet_603332, base: "/",
    url: url_GetCreateReceiptRuleSet_603333, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTemplate_603383 = ref object of OpenApiRestCall_602466
proc url_PostCreateTemplate_603385(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateTemplate_603384(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603386 = query.getOrDefault("Action")
  valid_603386 = validateParameter(valid_603386, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_603386 != nil:
    section.add "Action", valid_603386
  var valid_603387 = query.getOrDefault("Version")
  valid_603387 = validateParameter(valid_603387, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603387 != nil:
    section.add "Version", valid_603387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603388 = header.getOrDefault("X-Amz-Date")
  valid_603388 = validateParameter(valid_603388, JString, required = false,
                                 default = nil)
  if valid_603388 != nil:
    section.add "X-Amz-Date", valid_603388
  var valid_603389 = header.getOrDefault("X-Amz-Security-Token")
  valid_603389 = validateParameter(valid_603389, JString, required = false,
                                 default = nil)
  if valid_603389 != nil:
    section.add "X-Amz-Security-Token", valid_603389
  var valid_603390 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603390 = validateParameter(valid_603390, JString, required = false,
                                 default = nil)
  if valid_603390 != nil:
    section.add "X-Amz-Content-Sha256", valid_603390
  var valid_603391 = header.getOrDefault("X-Amz-Algorithm")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Algorithm", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Signature")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Signature", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-SignedHeaders", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Credential")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Credential", valid_603394
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_603395 = formData.getOrDefault("Template.HtmlPart")
  valid_603395 = validateParameter(valid_603395, JString, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "Template.HtmlPart", valid_603395
  var valid_603396 = formData.getOrDefault("Template.TemplateName")
  valid_603396 = validateParameter(valid_603396, JString, required = false,
                                 default = nil)
  if valid_603396 != nil:
    section.add "Template.TemplateName", valid_603396
  var valid_603397 = formData.getOrDefault("Template.TextPart")
  valid_603397 = validateParameter(valid_603397, JString, required = false,
                                 default = nil)
  if valid_603397 != nil:
    section.add "Template.TextPart", valid_603397
  var valid_603398 = formData.getOrDefault("Template.SubjectPart")
  valid_603398 = validateParameter(valid_603398, JString, required = false,
                                 default = nil)
  if valid_603398 != nil:
    section.add "Template.SubjectPart", valid_603398
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603399: Call_PostCreateTemplate_603383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603399.validator(path, query, header, formData, body)
  let scheme = call_603399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603399.url(scheme.get, call_603399.host, call_603399.base,
                         call_603399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603399, url, valid)

proc call*(call_603400: Call_PostCreateTemplate_603383;
          Action: string = "CreateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_603401 = newJObject()
  var formData_603402 = newJObject()
  add(query_603401, "Action", newJString(Action))
  add(formData_603402, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_603402, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_603402, "Template.TextPart", newJString(TemplateTextPart))
  add(query_603401, "Version", newJString(Version))
  add(formData_603402, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_603400.call(nil, query_603401, nil, formData_603402, nil)

var postCreateTemplate* = Call_PostCreateTemplate_603383(
    name: "postCreateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateTemplate",
    validator: validate_PostCreateTemplate_603384, base: "/",
    url: url_PostCreateTemplate_603385, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTemplate_603364 = ref object of OpenApiRestCall_602466
proc url_GetCreateTemplate_603366(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateTemplate_603365(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603367 = query.getOrDefault("Template.TemplateName")
  valid_603367 = validateParameter(valid_603367, JString, required = false,
                                 default = nil)
  if valid_603367 != nil:
    section.add "Template.TemplateName", valid_603367
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603368 = query.getOrDefault("Action")
  valid_603368 = validateParameter(valid_603368, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_603368 != nil:
    section.add "Action", valid_603368
  var valid_603369 = query.getOrDefault("Template.SubjectPart")
  valid_603369 = validateParameter(valid_603369, JString, required = false,
                                 default = nil)
  if valid_603369 != nil:
    section.add "Template.SubjectPart", valid_603369
  var valid_603370 = query.getOrDefault("Template.HtmlPart")
  valid_603370 = validateParameter(valid_603370, JString, required = false,
                                 default = nil)
  if valid_603370 != nil:
    section.add "Template.HtmlPart", valid_603370
  var valid_603371 = query.getOrDefault("Template.TextPart")
  valid_603371 = validateParameter(valid_603371, JString, required = false,
                                 default = nil)
  if valid_603371 != nil:
    section.add "Template.TextPart", valid_603371
  var valid_603372 = query.getOrDefault("Version")
  valid_603372 = validateParameter(valid_603372, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603372 != nil:
    section.add "Version", valid_603372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603373 = header.getOrDefault("X-Amz-Date")
  valid_603373 = validateParameter(valid_603373, JString, required = false,
                                 default = nil)
  if valid_603373 != nil:
    section.add "X-Amz-Date", valid_603373
  var valid_603374 = header.getOrDefault("X-Amz-Security-Token")
  valid_603374 = validateParameter(valid_603374, JString, required = false,
                                 default = nil)
  if valid_603374 != nil:
    section.add "X-Amz-Security-Token", valid_603374
  var valid_603375 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603375 = validateParameter(valid_603375, JString, required = false,
                                 default = nil)
  if valid_603375 != nil:
    section.add "X-Amz-Content-Sha256", valid_603375
  var valid_603376 = header.getOrDefault("X-Amz-Algorithm")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "X-Amz-Algorithm", valid_603376
  var valid_603377 = header.getOrDefault("X-Amz-Signature")
  valid_603377 = validateParameter(valid_603377, JString, required = false,
                                 default = nil)
  if valid_603377 != nil:
    section.add "X-Amz-Signature", valid_603377
  var valid_603378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603378 = validateParameter(valid_603378, JString, required = false,
                                 default = nil)
  if valid_603378 != nil:
    section.add "X-Amz-SignedHeaders", valid_603378
  var valid_603379 = header.getOrDefault("X-Amz-Credential")
  valid_603379 = validateParameter(valid_603379, JString, required = false,
                                 default = nil)
  if valid_603379 != nil:
    section.add "X-Amz-Credential", valid_603379
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603380: Call_GetCreateTemplate_603364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603380.validator(path, query, header, formData, body)
  let scheme = call_603380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603380.url(scheme.get, call_603380.host, call_603380.base,
                         call_603380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603380, url, valid)

proc call*(call_603381: Call_GetCreateTemplate_603364;
          TemplateTemplateName: string = ""; Action: string = "CreateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_603382 = newJObject()
  add(query_603382, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_603382, "Action", newJString(Action))
  add(query_603382, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_603382, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_603382, "Template.TextPart", newJString(TemplateTextPart))
  add(query_603382, "Version", newJString(Version))
  result = call_603381.call(nil, query_603382, nil, nil, nil)

var getCreateTemplate* = Call_GetCreateTemplate_603364(name: "getCreateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=CreateTemplate", validator: validate_GetCreateTemplate_603365,
    base: "/", url: url_GetCreateTemplate_603366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSet_603419 = ref object of OpenApiRestCall_602466
proc url_PostDeleteConfigurationSet_603421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteConfigurationSet_603420(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603422 = query.getOrDefault("Action")
  valid_603422 = validateParameter(valid_603422, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_603422 != nil:
    section.add "Action", valid_603422
  var valid_603423 = query.getOrDefault("Version")
  valid_603423 = validateParameter(valid_603423, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603423 != nil:
    section.add "Version", valid_603423
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603424 = header.getOrDefault("X-Amz-Date")
  valid_603424 = validateParameter(valid_603424, JString, required = false,
                                 default = nil)
  if valid_603424 != nil:
    section.add "X-Amz-Date", valid_603424
  var valid_603425 = header.getOrDefault("X-Amz-Security-Token")
  valid_603425 = validateParameter(valid_603425, JString, required = false,
                                 default = nil)
  if valid_603425 != nil:
    section.add "X-Amz-Security-Token", valid_603425
  var valid_603426 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603426 = validateParameter(valid_603426, JString, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "X-Amz-Content-Sha256", valid_603426
  var valid_603427 = header.getOrDefault("X-Amz-Algorithm")
  valid_603427 = validateParameter(valid_603427, JString, required = false,
                                 default = nil)
  if valid_603427 != nil:
    section.add "X-Amz-Algorithm", valid_603427
  var valid_603428 = header.getOrDefault("X-Amz-Signature")
  valid_603428 = validateParameter(valid_603428, JString, required = false,
                                 default = nil)
  if valid_603428 != nil:
    section.add "X-Amz-Signature", valid_603428
  var valid_603429 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603429 = validateParameter(valid_603429, JString, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "X-Amz-SignedHeaders", valid_603429
  var valid_603430 = header.getOrDefault("X-Amz-Credential")
  valid_603430 = validateParameter(valid_603430, JString, required = false,
                                 default = nil)
  if valid_603430 != nil:
    section.add "X-Amz-Credential", valid_603430
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603431 = formData.getOrDefault("ConfigurationSetName")
  valid_603431 = validateParameter(valid_603431, JString, required = true,
                                 default = nil)
  if valid_603431 != nil:
    section.add "ConfigurationSetName", valid_603431
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603432: Call_PostDeleteConfigurationSet_603419; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603432.validator(path, query, header, formData, body)
  let scheme = call_603432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603432.url(scheme.get, call_603432.host, call_603432.base,
                         call_603432.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603432, url, valid)

proc call*(call_603433: Call_PostDeleteConfigurationSet_603419;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603434 = newJObject()
  var formData_603435 = newJObject()
  add(formData_603435, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603434, "Action", newJString(Action))
  add(query_603434, "Version", newJString(Version))
  result = call_603433.call(nil, query_603434, nil, formData_603435, nil)

var postDeleteConfigurationSet* = Call_PostDeleteConfigurationSet_603419(
    name: "postDeleteConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_PostDeleteConfigurationSet_603420, base: "/",
    url: url_PostDeleteConfigurationSet_603421,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSet_603403 = ref object of OpenApiRestCall_602466
proc url_GetDeleteConfigurationSet_603405(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteConfigurationSet_603404(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603406 = query.getOrDefault("Action")
  valid_603406 = validateParameter(valid_603406, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_603406 != nil:
    section.add "Action", valid_603406
  var valid_603407 = query.getOrDefault("ConfigurationSetName")
  valid_603407 = validateParameter(valid_603407, JString, required = true,
                                 default = nil)
  if valid_603407 != nil:
    section.add "ConfigurationSetName", valid_603407
  var valid_603408 = query.getOrDefault("Version")
  valid_603408 = validateParameter(valid_603408, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603408 != nil:
    section.add "Version", valid_603408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603409 = header.getOrDefault("X-Amz-Date")
  valid_603409 = validateParameter(valid_603409, JString, required = false,
                                 default = nil)
  if valid_603409 != nil:
    section.add "X-Amz-Date", valid_603409
  var valid_603410 = header.getOrDefault("X-Amz-Security-Token")
  valid_603410 = validateParameter(valid_603410, JString, required = false,
                                 default = nil)
  if valid_603410 != nil:
    section.add "X-Amz-Security-Token", valid_603410
  var valid_603411 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603411 = validateParameter(valid_603411, JString, required = false,
                                 default = nil)
  if valid_603411 != nil:
    section.add "X-Amz-Content-Sha256", valid_603411
  var valid_603412 = header.getOrDefault("X-Amz-Algorithm")
  valid_603412 = validateParameter(valid_603412, JString, required = false,
                                 default = nil)
  if valid_603412 != nil:
    section.add "X-Amz-Algorithm", valid_603412
  var valid_603413 = header.getOrDefault("X-Amz-Signature")
  valid_603413 = validateParameter(valid_603413, JString, required = false,
                                 default = nil)
  if valid_603413 != nil:
    section.add "X-Amz-Signature", valid_603413
  var valid_603414 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603414 = validateParameter(valid_603414, JString, required = false,
                                 default = nil)
  if valid_603414 != nil:
    section.add "X-Amz-SignedHeaders", valid_603414
  var valid_603415 = header.getOrDefault("X-Amz-Credential")
  valid_603415 = validateParameter(valid_603415, JString, required = false,
                                 default = nil)
  if valid_603415 != nil:
    section.add "X-Amz-Credential", valid_603415
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603416: Call_GetDeleteConfigurationSet_603403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603416.validator(path, query, header, formData, body)
  let scheme = call_603416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603416.url(scheme.get, call_603416.host, call_603416.base,
                         call_603416.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603416, url, valid)

proc call*(call_603417: Call_GetDeleteConfigurationSet_603403;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: string (required)
  var query_603418 = newJObject()
  add(query_603418, "Action", newJString(Action))
  add(query_603418, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603418, "Version", newJString(Version))
  result = call_603417.call(nil, query_603418, nil, nil, nil)

var getDeleteConfigurationSet* = Call_GetDeleteConfigurationSet_603403(
    name: "getDeleteConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_GetDeleteConfigurationSet_603404, base: "/",
    url: url_GetDeleteConfigurationSet_603405,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetEventDestination_603453 = ref object of OpenApiRestCall_602466
proc url_PostDeleteConfigurationSetEventDestination_603455(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteConfigurationSetEventDestination_603454(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603456 = query.getOrDefault("Action")
  valid_603456 = validateParameter(valid_603456, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_603456 != nil:
    section.add "Action", valid_603456
  var valid_603457 = query.getOrDefault("Version")
  valid_603457 = validateParameter(valid_603457, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603457 != nil:
    section.add "Version", valid_603457
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603458 = header.getOrDefault("X-Amz-Date")
  valid_603458 = validateParameter(valid_603458, JString, required = false,
                                 default = nil)
  if valid_603458 != nil:
    section.add "X-Amz-Date", valid_603458
  var valid_603459 = header.getOrDefault("X-Amz-Security-Token")
  valid_603459 = validateParameter(valid_603459, JString, required = false,
                                 default = nil)
  if valid_603459 != nil:
    section.add "X-Amz-Security-Token", valid_603459
  var valid_603460 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603460 = validateParameter(valid_603460, JString, required = false,
                                 default = nil)
  if valid_603460 != nil:
    section.add "X-Amz-Content-Sha256", valid_603460
  var valid_603461 = header.getOrDefault("X-Amz-Algorithm")
  valid_603461 = validateParameter(valid_603461, JString, required = false,
                                 default = nil)
  if valid_603461 != nil:
    section.add "X-Amz-Algorithm", valid_603461
  var valid_603462 = header.getOrDefault("X-Amz-Signature")
  valid_603462 = validateParameter(valid_603462, JString, required = false,
                                 default = nil)
  if valid_603462 != nil:
    section.add "X-Amz-Signature", valid_603462
  var valid_603463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603463 = validateParameter(valid_603463, JString, required = false,
                                 default = nil)
  if valid_603463 != nil:
    section.add "X-Amz-SignedHeaders", valid_603463
  var valid_603464 = header.getOrDefault("X-Amz-Credential")
  valid_603464 = validateParameter(valid_603464, JString, required = false,
                                 default = nil)
  if valid_603464 != nil:
    section.add "X-Amz-Credential", valid_603464
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603465 = formData.getOrDefault("ConfigurationSetName")
  valid_603465 = validateParameter(valid_603465, JString, required = true,
                                 default = nil)
  if valid_603465 != nil:
    section.add "ConfigurationSetName", valid_603465
  var valid_603466 = formData.getOrDefault("EventDestinationName")
  valid_603466 = validateParameter(valid_603466, JString, required = true,
                                 default = nil)
  if valid_603466 != nil:
    section.add "EventDestinationName", valid_603466
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603467: Call_PostDeleteConfigurationSetEventDestination_603453;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603467.validator(path, query, header, formData, body)
  let scheme = call_603467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603467.url(scheme.get, call_603467.host, call_603467.base,
                         call_603467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603467, url, valid)

proc call*(call_603468: Call_PostDeleteConfigurationSetEventDestination_603453;
          ConfigurationSetName: string; EventDestinationName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603469 = newJObject()
  var formData_603470 = newJObject()
  add(formData_603470, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_603470, "EventDestinationName", newJString(EventDestinationName))
  add(query_603469, "Action", newJString(Action))
  add(query_603469, "Version", newJString(Version))
  result = call_603468.call(nil, query_603469, nil, formData_603470, nil)

var postDeleteConfigurationSetEventDestination* = Call_PostDeleteConfigurationSetEventDestination_603453(
    name: "postDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_PostDeleteConfigurationSetEventDestination_603454,
    base: "/", url: url_PostDeleteConfigurationSetEventDestination_603455,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetEventDestination_603436 = ref object of OpenApiRestCall_602466
proc url_GetDeleteConfigurationSetEventDestination_603438(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteConfigurationSetEventDestination_603437(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603439 = query.getOrDefault("Action")
  valid_603439 = validateParameter(valid_603439, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_603439 != nil:
    section.add "Action", valid_603439
  var valid_603440 = query.getOrDefault("EventDestinationName")
  valid_603440 = validateParameter(valid_603440, JString, required = true,
                                 default = nil)
  if valid_603440 != nil:
    section.add "EventDestinationName", valid_603440
  var valid_603441 = query.getOrDefault("ConfigurationSetName")
  valid_603441 = validateParameter(valid_603441, JString, required = true,
                                 default = nil)
  if valid_603441 != nil:
    section.add "ConfigurationSetName", valid_603441
  var valid_603442 = query.getOrDefault("Version")
  valid_603442 = validateParameter(valid_603442, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603442 != nil:
    section.add "Version", valid_603442
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603443 = header.getOrDefault("X-Amz-Date")
  valid_603443 = validateParameter(valid_603443, JString, required = false,
                                 default = nil)
  if valid_603443 != nil:
    section.add "X-Amz-Date", valid_603443
  var valid_603444 = header.getOrDefault("X-Amz-Security-Token")
  valid_603444 = validateParameter(valid_603444, JString, required = false,
                                 default = nil)
  if valid_603444 != nil:
    section.add "X-Amz-Security-Token", valid_603444
  var valid_603445 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603445 = validateParameter(valid_603445, JString, required = false,
                                 default = nil)
  if valid_603445 != nil:
    section.add "X-Amz-Content-Sha256", valid_603445
  var valid_603446 = header.getOrDefault("X-Amz-Algorithm")
  valid_603446 = validateParameter(valid_603446, JString, required = false,
                                 default = nil)
  if valid_603446 != nil:
    section.add "X-Amz-Algorithm", valid_603446
  var valid_603447 = header.getOrDefault("X-Amz-Signature")
  valid_603447 = validateParameter(valid_603447, JString, required = false,
                                 default = nil)
  if valid_603447 != nil:
    section.add "X-Amz-Signature", valid_603447
  var valid_603448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603448 = validateParameter(valid_603448, JString, required = false,
                                 default = nil)
  if valid_603448 != nil:
    section.add "X-Amz-SignedHeaders", valid_603448
  var valid_603449 = header.getOrDefault("X-Amz-Credential")
  valid_603449 = validateParameter(valid_603449, JString, required = false,
                                 default = nil)
  if valid_603449 != nil:
    section.add "X-Amz-Credential", valid_603449
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603450: Call_GetDeleteConfigurationSetEventDestination_603436;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603450.validator(path, query, header, formData, body)
  let scheme = call_603450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603450.url(scheme.get, call_603450.host, call_603450.base,
                         call_603450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603450, url, valid)

proc call*(call_603451: Call_GetDeleteConfigurationSetEventDestination_603436;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: string (required)
  var query_603452 = newJObject()
  add(query_603452, "Action", newJString(Action))
  add(query_603452, "EventDestinationName", newJString(EventDestinationName))
  add(query_603452, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603452, "Version", newJString(Version))
  result = call_603451.call(nil, query_603452, nil, nil, nil)

var getDeleteConfigurationSetEventDestination* = Call_GetDeleteConfigurationSetEventDestination_603436(
    name: "getDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_GetDeleteConfigurationSetEventDestination_603437,
    base: "/", url: url_GetDeleteConfigurationSetEventDestination_603438,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetTrackingOptions_603487 = ref object of OpenApiRestCall_602466
proc url_PostDeleteConfigurationSetTrackingOptions_603489(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteConfigurationSetTrackingOptions_603488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603490 = query.getOrDefault("Action")
  valid_603490 = validateParameter(valid_603490, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_603490 != nil:
    section.add "Action", valid_603490
  var valid_603491 = query.getOrDefault("Version")
  valid_603491 = validateParameter(valid_603491, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603491 != nil:
    section.add "Version", valid_603491
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603492 = header.getOrDefault("X-Amz-Date")
  valid_603492 = validateParameter(valid_603492, JString, required = false,
                                 default = nil)
  if valid_603492 != nil:
    section.add "X-Amz-Date", valid_603492
  var valid_603493 = header.getOrDefault("X-Amz-Security-Token")
  valid_603493 = validateParameter(valid_603493, JString, required = false,
                                 default = nil)
  if valid_603493 != nil:
    section.add "X-Amz-Security-Token", valid_603493
  var valid_603494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-Content-Sha256", valid_603494
  var valid_603495 = header.getOrDefault("X-Amz-Algorithm")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "X-Amz-Algorithm", valid_603495
  var valid_603496 = header.getOrDefault("X-Amz-Signature")
  valid_603496 = validateParameter(valid_603496, JString, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "X-Amz-Signature", valid_603496
  var valid_603497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603497 = validateParameter(valid_603497, JString, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "X-Amz-SignedHeaders", valid_603497
  var valid_603498 = header.getOrDefault("X-Amz-Credential")
  valid_603498 = validateParameter(valid_603498, JString, required = false,
                                 default = nil)
  if valid_603498 != nil:
    section.add "X-Amz-Credential", valid_603498
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603499 = formData.getOrDefault("ConfigurationSetName")
  valid_603499 = validateParameter(valid_603499, JString, required = true,
                                 default = nil)
  if valid_603499 != nil:
    section.add "ConfigurationSetName", valid_603499
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603500: Call_PostDeleteConfigurationSetTrackingOptions_603487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_603500.validator(path, query, header, formData, body)
  let scheme = call_603500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603500.url(scheme.get, call_603500.host, call_603500.base,
                         call_603500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603500, url, valid)

proc call*(call_603501: Call_PostDeleteConfigurationSetTrackingOptions_603487;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603502 = newJObject()
  var formData_603503 = newJObject()
  add(formData_603503, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603502, "Action", newJString(Action))
  add(query_603502, "Version", newJString(Version))
  result = call_603501.call(nil, query_603502, nil, formData_603503, nil)

var postDeleteConfigurationSetTrackingOptions* = Call_PostDeleteConfigurationSetTrackingOptions_603487(
    name: "postDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_PostDeleteConfigurationSetTrackingOptions_603488,
    base: "/", url: url_PostDeleteConfigurationSetTrackingOptions_603489,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetTrackingOptions_603471 = ref object of OpenApiRestCall_602466
proc url_GetDeleteConfigurationSetTrackingOptions_603473(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteConfigurationSetTrackingOptions_603472(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603474 = query.getOrDefault("Action")
  valid_603474 = validateParameter(valid_603474, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_603474 != nil:
    section.add "Action", valid_603474
  var valid_603475 = query.getOrDefault("ConfigurationSetName")
  valid_603475 = validateParameter(valid_603475, JString, required = true,
                                 default = nil)
  if valid_603475 != nil:
    section.add "ConfigurationSetName", valid_603475
  var valid_603476 = query.getOrDefault("Version")
  valid_603476 = validateParameter(valid_603476, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603476 != nil:
    section.add "Version", valid_603476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603477 = header.getOrDefault("X-Amz-Date")
  valid_603477 = validateParameter(valid_603477, JString, required = false,
                                 default = nil)
  if valid_603477 != nil:
    section.add "X-Amz-Date", valid_603477
  var valid_603478 = header.getOrDefault("X-Amz-Security-Token")
  valid_603478 = validateParameter(valid_603478, JString, required = false,
                                 default = nil)
  if valid_603478 != nil:
    section.add "X-Amz-Security-Token", valid_603478
  var valid_603479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603479 = validateParameter(valid_603479, JString, required = false,
                                 default = nil)
  if valid_603479 != nil:
    section.add "X-Amz-Content-Sha256", valid_603479
  var valid_603480 = header.getOrDefault("X-Amz-Algorithm")
  valid_603480 = validateParameter(valid_603480, JString, required = false,
                                 default = nil)
  if valid_603480 != nil:
    section.add "X-Amz-Algorithm", valid_603480
  var valid_603481 = header.getOrDefault("X-Amz-Signature")
  valid_603481 = validateParameter(valid_603481, JString, required = false,
                                 default = nil)
  if valid_603481 != nil:
    section.add "X-Amz-Signature", valid_603481
  var valid_603482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603482 = validateParameter(valid_603482, JString, required = false,
                                 default = nil)
  if valid_603482 != nil:
    section.add "X-Amz-SignedHeaders", valid_603482
  var valid_603483 = header.getOrDefault("X-Amz-Credential")
  valid_603483 = validateParameter(valid_603483, JString, required = false,
                                 default = nil)
  if valid_603483 != nil:
    section.add "X-Amz-Credential", valid_603483
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603484: Call_GetDeleteConfigurationSetTrackingOptions_603471;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_603484.validator(path, query, header, formData, body)
  let scheme = call_603484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603484.url(scheme.get, call_603484.host, call_603484.base,
                         call_603484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603484, url, valid)

proc call*(call_603485: Call_GetDeleteConfigurationSetTrackingOptions_603471;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: string (required)
  var query_603486 = newJObject()
  add(query_603486, "Action", newJString(Action))
  add(query_603486, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603486, "Version", newJString(Version))
  result = call_603485.call(nil, query_603486, nil, nil, nil)

var getDeleteConfigurationSetTrackingOptions* = Call_GetDeleteConfigurationSetTrackingOptions_603471(
    name: "getDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_GetDeleteConfigurationSetTrackingOptions_603472,
    base: "/", url: url_GetDeleteConfigurationSetTrackingOptions_603473,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomVerificationEmailTemplate_603520 = ref object of OpenApiRestCall_602466
proc url_PostDeleteCustomVerificationEmailTemplate_603522(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCustomVerificationEmailTemplate_603521(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603523 = query.getOrDefault("Action")
  valid_603523 = validateParameter(valid_603523, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_603523 != nil:
    section.add "Action", valid_603523
  var valid_603524 = query.getOrDefault("Version")
  valid_603524 = validateParameter(valid_603524, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603524 != nil:
    section.add "Version", valid_603524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603525 = header.getOrDefault("X-Amz-Date")
  valid_603525 = validateParameter(valid_603525, JString, required = false,
                                 default = nil)
  if valid_603525 != nil:
    section.add "X-Amz-Date", valid_603525
  var valid_603526 = header.getOrDefault("X-Amz-Security-Token")
  valid_603526 = validateParameter(valid_603526, JString, required = false,
                                 default = nil)
  if valid_603526 != nil:
    section.add "X-Amz-Security-Token", valid_603526
  var valid_603527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603527 = validateParameter(valid_603527, JString, required = false,
                                 default = nil)
  if valid_603527 != nil:
    section.add "X-Amz-Content-Sha256", valid_603527
  var valid_603528 = header.getOrDefault("X-Amz-Algorithm")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-Algorithm", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Signature")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Signature", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-SignedHeaders", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Credential")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Credential", valid_603531
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_603532 = formData.getOrDefault("TemplateName")
  valid_603532 = validateParameter(valid_603532, JString, required = true,
                                 default = nil)
  if valid_603532 != nil:
    section.add "TemplateName", valid_603532
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603533: Call_PostDeleteCustomVerificationEmailTemplate_603520;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603533.validator(path, query, header, formData, body)
  let scheme = call_603533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603533.url(scheme.get, call_603533.host, call_603533.base,
                         call_603533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603533, url, valid)

proc call*(call_603534: Call_PostDeleteCustomVerificationEmailTemplate_603520;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_603535 = newJObject()
  var formData_603536 = newJObject()
  add(query_603535, "Action", newJString(Action))
  add(formData_603536, "TemplateName", newJString(TemplateName))
  add(query_603535, "Version", newJString(Version))
  result = call_603534.call(nil, query_603535, nil, formData_603536, nil)

var postDeleteCustomVerificationEmailTemplate* = Call_PostDeleteCustomVerificationEmailTemplate_603520(
    name: "postDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_PostDeleteCustomVerificationEmailTemplate_603521,
    base: "/", url: url_PostDeleteCustomVerificationEmailTemplate_603522,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomVerificationEmailTemplate_603504 = ref object of OpenApiRestCall_602466
proc url_GetDeleteCustomVerificationEmailTemplate_603506(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCustomVerificationEmailTemplate_603505(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603507 = query.getOrDefault("Action")
  valid_603507 = validateParameter(valid_603507, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_603507 != nil:
    section.add "Action", valid_603507
  var valid_603508 = query.getOrDefault("TemplateName")
  valid_603508 = validateParameter(valid_603508, JString, required = true,
                                 default = nil)
  if valid_603508 != nil:
    section.add "TemplateName", valid_603508
  var valid_603509 = query.getOrDefault("Version")
  valid_603509 = validateParameter(valid_603509, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603509 != nil:
    section.add "Version", valid_603509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603510 = header.getOrDefault("X-Amz-Date")
  valid_603510 = validateParameter(valid_603510, JString, required = false,
                                 default = nil)
  if valid_603510 != nil:
    section.add "X-Amz-Date", valid_603510
  var valid_603511 = header.getOrDefault("X-Amz-Security-Token")
  valid_603511 = validateParameter(valid_603511, JString, required = false,
                                 default = nil)
  if valid_603511 != nil:
    section.add "X-Amz-Security-Token", valid_603511
  var valid_603512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603512 = validateParameter(valid_603512, JString, required = false,
                                 default = nil)
  if valid_603512 != nil:
    section.add "X-Amz-Content-Sha256", valid_603512
  var valid_603513 = header.getOrDefault("X-Amz-Algorithm")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "X-Amz-Algorithm", valid_603513
  var valid_603514 = header.getOrDefault("X-Amz-Signature")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "X-Amz-Signature", valid_603514
  var valid_603515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603515 = validateParameter(valid_603515, JString, required = false,
                                 default = nil)
  if valid_603515 != nil:
    section.add "X-Amz-SignedHeaders", valid_603515
  var valid_603516 = header.getOrDefault("X-Amz-Credential")
  valid_603516 = validateParameter(valid_603516, JString, required = false,
                                 default = nil)
  if valid_603516 != nil:
    section.add "X-Amz-Credential", valid_603516
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603517: Call_GetDeleteCustomVerificationEmailTemplate_603504;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603517.validator(path, query, header, formData, body)
  let scheme = call_603517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603517.url(scheme.get, call_603517.host, call_603517.base,
                         call_603517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603517, url, valid)

proc call*(call_603518: Call_GetDeleteCustomVerificationEmailTemplate_603504;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_603519 = newJObject()
  add(query_603519, "Action", newJString(Action))
  add(query_603519, "TemplateName", newJString(TemplateName))
  add(query_603519, "Version", newJString(Version))
  result = call_603518.call(nil, query_603519, nil, nil, nil)

var getDeleteCustomVerificationEmailTemplate* = Call_GetDeleteCustomVerificationEmailTemplate_603504(
    name: "getDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_GetDeleteCustomVerificationEmailTemplate_603505,
    base: "/", url: url_GetDeleteCustomVerificationEmailTemplate_603506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentity_603553 = ref object of OpenApiRestCall_602466
proc url_PostDeleteIdentity_603555(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteIdentity_603554(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603556 = query.getOrDefault("Action")
  valid_603556 = validateParameter(valid_603556, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_603556 != nil:
    section.add "Action", valid_603556
  var valid_603557 = query.getOrDefault("Version")
  valid_603557 = validateParameter(valid_603557, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603557 != nil:
    section.add "Version", valid_603557
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603558 = header.getOrDefault("X-Amz-Date")
  valid_603558 = validateParameter(valid_603558, JString, required = false,
                                 default = nil)
  if valid_603558 != nil:
    section.add "X-Amz-Date", valid_603558
  var valid_603559 = header.getOrDefault("X-Amz-Security-Token")
  valid_603559 = validateParameter(valid_603559, JString, required = false,
                                 default = nil)
  if valid_603559 != nil:
    section.add "X-Amz-Security-Token", valid_603559
  var valid_603560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603560 = validateParameter(valid_603560, JString, required = false,
                                 default = nil)
  if valid_603560 != nil:
    section.add "X-Amz-Content-Sha256", valid_603560
  var valid_603561 = header.getOrDefault("X-Amz-Algorithm")
  valid_603561 = validateParameter(valid_603561, JString, required = false,
                                 default = nil)
  if valid_603561 != nil:
    section.add "X-Amz-Algorithm", valid_603561
  var valid_603562 = header.getOrDefault("X-Amz-Signature")
  valid_603562 = validateParameter(valid_603562, JString, required = false,
                                 default = nil)
  if valid_603562 != nil:
    section.add "X-Amz-Signature", valid_603562
  var valid_603563 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603563 = validateParameter(valid_603563, JString, required = false,
                                 default = nil)
  if valid_603563 != nil:
    section.add "X-Amz-SignedHeaders", valid_603563
  var valid_603564 = header.getOrDefault("X-Amz-Credential")
  valid_603564 = validateParameter(valid_603564, JString, required = false,
                                 default = nil)
  if valid_603564 != nil:
    section.add "X-Amz-Credential", valid_603564
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_603565 = formData.getOrDefault("Identity")
  valid_603565 = validateParameter(valid_603565, JString, required = true,
                                 default = nil)
  if valid_603565 != nil:
    section.add "Identity", valid_603565
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603566: Call_PostDeleteIdentity_603553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603566.validator(path, query, header, formData, body)
  let scheme = call_603566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603566.url(scheme.get, call_603566.host, call_603566.base,
                         call_603566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603566, url, valid)

proc call*(call_603567: Call_PostDeleteIdentity_603553; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603568 = newJObject()
  var formData_603569 = newJObject()
  add(formData_603569, "Identity", newJString(Identity))
  add(query_603568, "Action", newJString(Action))
  add(query_603568, "Version", newJString(Version))
  result = call_603567.call(nil, query_603568, nil, formData_603569, nil)

var postDeleteIdentity* = Call_PostDeleteIdentity_603553(
    name: "postDeleteIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentity",
    validator: validate_PostDeleteIdentity_603554, base: "/",
    url: url_PostDeleteIdentity_603555, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentity_603537 = ref object of OpenApiRestCall_602466
proc url_GetDeleteIdentity_603539(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteIdentity_603538(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_603540 = query.getOrDefault("Identity")
  valid_603540 = validateParameter(valid_603540, JString, required = true,
                                 default = nil)
  if valid_603540 != nil:
    section.add "Identity", valid_603540
  var valid_603541 = query.getOrDefault("Action")
  valid_603541 = validateParameter(valid_603541, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_603541 != nil:
    section.add "Action", valid_603541
  var valid_603542 = query.getOrDefault("Version")
  valid_603542 = validateParameter(valid_603542, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603542 != nil:
    section.add "Version", valid_603542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603543 = header.getOrDefault("X-Amz-Date")
  valid_603543 = validateParameter(valid_603543, JString, required = false,
                                 default = nil)
  if valid_603543 != nil:
    section.add "X-Amz-Date", valid_603543
  var valid_603544 = header.getOrDefault("X-Amz-Security-Token")
  valid_603544 = validateParameter(valid_603544, JString, required = false,
                                 default = nil)
  if valid_603544 != nil:
    section.add "X-Amz-Security-Token", valid_603544
  var valid_603545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603545 = validateParameter(valid_603545, JString, required = false,
                                 default = nil)
  if valid_603545 != nil:
    section.add "X-Amz-Content-Sha256", valid_603545
  var valid_603546 = header.getOrDefault("X-Amz-Algorithm")
  valid_603546 = validateParameter(valid_603546, JString, required = false,
                                 default = nil)
  if valid_603546 != nil:
    section.add "X-Amz-Algorithm", valid_603546
  var valid_603547 = header.getOrDefault("X-Amz-Signature")
  valid_603547 = validateParameter(valid_603547, JString, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "X-Amz-Signature", valid_603547
  var valid_603548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603548 = validateParameter(valid_603548, JString, required = false,
                                 default = nil)
  if valid_603548 != nil:
    section.add "X-Amz-SignedHeaders", valid_603548
  var valid_603549 = header.getOrDefault("X-Amz-Credential")
  valid_603549 = validateParameter(valid_603549, JString, required = false,
                                 default = nil)
  if valid_603549 != nil:
    section.add "X-Amz-Credential", valid_603549
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603550: Call_GetDeleteIdentity_603537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603550.validator(path, query, header, formData, body)
  let scheme = call_603550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603550.url(scheme.get, call_603550.host, call_603550.base,
                         call_603550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603550, url, valid)

proc call*(call_603551: Call_GetDeleteIdentity_603537; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603552 = newJObject()
  add(query_603552, "Identity", newJString(Identity))
  add(query_603552, "Action", newJString(Action))
  add(query_603552, "Version", newJString(Version))
  result = call_603551.call(nil, query_603552, nil, nil, nil)

var getDeleteIdentity* = Call_GetDeleteIdentity_603537(name: "getDeleteIdentity",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteIdentity", validator: validate_GetDeleteIdentity_603538,
    base: "/", url: url_GetDeleteIdentity_603539,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentityPolicy_603587 = ref object of OpenApiRestCall_602466
proc url_PostDeleteIdentityPolicy_603589(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteIdentityPolicy_603588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603590 = query.getOrDefault("Action")
  valid_603590 = validateParameter(valid_603590, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_603590 != nil:
    section.add "Action", valid_603590
  var valid_603591 = query.getOrDefault("Version")
  valid_603591 = validateParameter(valid_603591, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603591 != nil:
    section.add "Version", valid_603591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603592 = header.getOrDefault("X-Amz-Date")
  valid_603592 = validateParameter(valid_603592, JString, required = false,
                                 default = nil)
  if valid_603592 != nil:
    section.add "X-Amz-Date", valid_603592
  var valid_603593 = header.getOrDefault("X-Amz-Security-Token")
  valid_603593 = validateParameter(valid_603593, JString, required = false,
                                 default = nil)
  if valid_603593 != nil:
    section.add "X-Amz-Security-Token", valid_603593
  var valid_603594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603594 = validateParameter(valid_603594, JString, required = false,
                                 default = nil)
  if valid_603594 != nil:
    section.add "X-Amz-Content-Sha256", valid_603594
  var valid_603595 = header.getOrDefault("X-Amz-Algorithm")
  valid_603595 = validateParameter(valid_603595, JString, required = false,
                                 default = nil)
  if valid_603595 != nil:
    section.add "X-Amz-Algorithm", valid_603595
  var valid_603596 = header.getOrDefault("X-Amz-Signature")
  valid_603596 = validateParameter(valid_603596, JString, required = false,
                                 default = nil)
  if valid_603596 != nil:
    section.add "X-Amz-Signature", valid_603596
  var valid_603597 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603597 = validateParameter(valid_603597, JString, required = false,
                                 default = nil)
  if valid_603597 != nil:
    section.add "X-Amz-SignedHeaders", valid_603597
  var valid_603598 = header.getOrDefault("X-Amz-Credential")
  valid_603598 = validateParameter(valid_603598, JString, required = false,
                                 default = nil)
  if valid_603598 != nil:
    section.add "X-Amz-Credential", valid_603598
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603599 = formData.getOrDefault("PolicyName")
  valid_603599 = validateParameter(valid_603599, JString, required = true,
                                 default = nil)
  if valid_603599 != nil:
    section.add "PolicyName", valid_603599
  var valid_603600 = formData.getOrDefault("Identity")
  valid_603600 = validateParameter(valid_603600, JString, required = true,
                                 default = nil)
  if valid_603600 != nil:
    section.add "Identity", valid_603600
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603601: Call_PostDeleteIdentityPolicy_603587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603601.validator(path, query, header, formData, body)
  let scheme = call_603601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603601.url(scheme.get, call_603601.host, call_603601.base,
                         call_603601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603601, url, valid)

proc call*(call_603602: Call_PostDeleteIdentityPolicy_603587; PolicyName: string;
          Identity: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603603 = newJObject()
  var formData_603604 = newJObject()
  add(formData_603604, "PolicyName", newJString(PolicyName))
  add(formData_603604, "Identity", newJString(Identity))
  add(query_603603, "Action", newJString(Action))
  add(query_603603, "Version", newJString(Version))
  result = call_603602.call(nil, query_603603, nil, formData_603604, nil)

var postDeleteIdentityPolicy* = Call_PostDeleteIdentityPolicy_603587(
    name: "postDeleteIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_PostDeleteIdentityPolicy_603588, base: "/",
    url: url_PostDeleteIdentityPolicy_603589, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentityPolicy_603570 = ref object of OpenApiRestCall_602466
proc url_GetDeleteIdentityPolicy_603572(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteIdentityPolicy_603571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_603573 = query.getOrDefault("Identity")
  valid_603573 = validateParameter(valid_603573, JString, required = true,
                                 default = nil)
  if valid_603573 != nil:
    section.add "Identity", valid_603573
  var valid_603574 = query.getOrDefault("Action")
  valid_603574 = validateParameter(valid_603574, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_603574 != nil:
    section.add "Action", valid_603574
  var valid_603575 = query.getOrDefault("Version")
  valid_603575 = validateParameter(valid_603575, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603575 != nil:
    section.add "Version", valid_603575
  var valid_603576 = query.getOrDefault("PolicyName")
  valid_603576 = validateParameter(valid_603576, JString, required = true,
                                 default = nil)
  if valid_603576 != nil:
    section.add "PolicyName", valid_603576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603577 = header.getOrDefault("X-Amz-Date")
  valid_603577 = validateParameter(valid_603577, JString, required = false,
                                 default = nil)
  if valid_603577 != nil:
    section.add "X-Amz-Date", valid_603577
  var valid_603578 = header.getOrDefault("X-Amz-Security-Token")
  valid_603578 = validateParameter(valid_603578, JString, required = false,
                                 default = nil)
  if valid_603578 != nil:
    section.add "X-Amz-Security-Token", valid_603578
  var valid_603579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603579 = validateParameter(valid_603579, JString, required = false,
                                 default = nil)
  if valid_603579 != nil:
    section.add "X-Amz-Content-Sha256", valid_603579
  var valid_603580 = header.getOrDefault("X-Amz-Algorithm")
  valid_603580 = validateParameter(valid_603580, JString, required = false,
                                 default = nil)
  if valid_603580 != nil:
    section.add "X-Amz-Algorithm", valid_603580
  var valid_603581 = header.getOrDefault("X-Amz-Signature")
  valid_603581 = validateParameter(valid_603581, JString, required = false,
                                 default = nil)
  if valid_603581 != nil:
    section.add "X-Amz-Signature", valid_603581
  var valid_603582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603582 = validateParameter(valid_603582, JString, required = false,
                                 default = nil)
  if valid_603582 != nil:
    section.add "X-Amz-SignedHeaders", valid_603582
  var valid_603583 = header.getOrDefault("X-Amz-Credential")
  valid_603583 = validateParameter(valid_603583, JString, required = false,
                                 default = nil)
  if valid_603583 != nil:
    section.add "X-Amz-Credential", valid_603583
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603584: Call_GetDeleteIdentityPolicy_603570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603584.validator(path, query, header, formData, body)
  let scheme = call_603584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603584.url(scheme.get, call_603584.host, call_603584.base,
                         call_603584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603584, url, valid)

proc call*(call_603585: Call_GetDeleteIdentityPolicy_603570; Identity: string;
          PolicyName: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  var query_603586 = newJObject()
  add(query_603586, "Identity", newJString(Identity))
  add(query_603586, "Action", newJString(Action))
  add(query_603586, "Version", newJString(Version))
  add(query_603586, "PolicyName", newJString(PolicyName))
  result = call_603585.call(nil, query_603586, nil, nil, nil)

var getDeleteIdentityPolicy* = Call_GetDeleteIdentityPolicy_603570(
    name: "getDeleteIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_GetDeleteIdentityPolicy_603571, base: "/",
    url: url_GetDeleteIdentityPolicy_603572, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptFilter_603621 = ref object of OpenApiRestCall_602466
proc url_PostDeleteReceiptFilter_603623(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteReceiptFilter_603622(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603624 = query.getOrDefault("Action")
  valid_603624 = validateParameter(valid_603624, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_603624 != nil:
    section.add "Action", valid_603624
  var valid_603625 = query.getOrDefault("Version")
  valid_603625 = validateParameter(valid_603625, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603625 != nil:
    section.add "Version", valid_603625
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603626 = header.getOrDefault("X-Amz-Date")
  valid_603626 = validateParameter(valid_603626, JString, required = false,
                                 default = nil)
  if valid_603626 != nil:
    section.add "X-Amz-Date", valid_603626
  var valid_603627 = header.getOrDefault("X-Amz-Security-Token")
  valid_603627 = validateParameter(valid_603627, JString, required = false,
                                 default = nil)
  if valid_603627 != nil:
    section.add "X-Amz-Security-Token", valid_603627
  var valid_603628 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603628 = validateParameter(valid_603628, JString, required = false,
                                 default = nil)
  if valid_603628 != nil:
    section.add "X-Amz-Content-Sha256", valid_603628
  var valid_603629 = header.getOrDefault("X-Amz-Algorithm")
  valid_603629 = validateParameter(valid_603629, JString, required = false,
                                 default = nil)
  if valid_603629 != nil:
    section.add "X-Amz-Algorithm", valid_603629
  var valid_603630 = header.getOrDefault("X-Amz-Signature")
  valid_603630 = validateParameter(valid_603630, JString, required = false,
                                 default = nil)
  if valid_603630 != nil:
    section.add "X-Amz-Signature", valid_603630
  var valid_603631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603631 = validateParameter(valid_603631, JString, required = false,
                                 default = nil)
  if valid_603631 != nil:
    section.add "X-Amz-SignedHeaders", valid_603631
  var valid_603632 = header.getOrDefault("X-Amz-Credential")
  valid_603632 = validateParameter(valid_603632, JString, required = false,
                                 default = nil)
  if valid_603632 != nil:
    section.add "X-Amz-Credential", valid_603632
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FilterName` field"
  var valid_603633 = formData.getOrDefault("FilterName")
  valid_603633 = validateParameter(valid_603633, JString, required = true,
                                 default = nil)
  if valid_603633 != nil:
    section.add "FilterName", valid_603633
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603634: Call_PostDeleteReceiptFilter_603621; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603634.validator(path, query, header, formData, body)
  let scheme = call_603634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603634.url(scheme.get, call_603634.host, call_603634.base,
                         call_603634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603634, url, valid)

proc call*(call_603635: Call_PostDeleteReceiptFilter_603621; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603636 = newJObject()
  var formData_603637 = newJObject()
  add(formData_603637, "FilterName", newJString(FilterName))
  add(query_603636, "Action", newJString(Action))
  add(query_603636, "Version", newJString(Version))
  result = call_603635.call(nil, query_603636, nil, formData_603637, nil)

var postDeleteReceiptFilter* = Call_PostDeleteReceiptFilter_603621(
    name: "postDeleteReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_PostDeleteReceiptFilter_603622, base: "/",
    url: url_PostDeleteReceiptFilter_603623, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptFilter_603605 = ref object of OpenApiRestCall_602466
proc url_GetDeleteReceiptFilter_603607(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteReceiptFilter_603606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603608 = query.getOrDefault("Action")
  valid_603608 = validateParameter(valid_603608, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_603608 != nil:
    section.add "Action", valid_603608
  var valid_603609 = query.getOrDefault("Version")
  valid_603609 = validateParameter(valid_603609, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603609 != nil:
    section.add "Version", valid_603609
  var valid_603610 = query.getOrDefault("FilterName")
  valid_603610 = validateParameter(valid_603610, JString, required = true,
                                 default = nil)
  if valid_603610 != nil:
    section.add "FilterName", valid_603610
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603611 = header.getOrDefault("X-Amz-Date")
  valid_603611 = validateParameter(valid_603611, JString, required = false,
                                 default = nil)
  if valid_603611 != nil:
    section.add "X-Amz-Date", valid_603611
  var valid_603612 = header.getOrDefault("X-Amz-Security-Token")
  valid_603612 = validateParameter(valid_603612, JString, required = false,
                                 default = nil)
  if valid_603612 != nil:
    section.add "X-Amz-Security-Token", valid_603612
  var valid_603613 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603613 = validateParameter(valid_603613, JString, required = false,
                                 default = nil)
  if valid_603613 != nil:
    section.add "X-Amz-Content-Sha256", valid_603613
  var valid_603614 = header.getOrDefault("X-Amz-Algorithm")
  valid_603614 = validateParameter(valid_603614, JString, required = false,
                                 default = nil)
  if valid_603614 != nil:
    section.add "X-Amz-Algorithm", valid_603614
  var valid_603615 = header.getOrDefault("X-Amz-Signature")
  valid_603615 = validateParameter(valid_603615, JString, required = false,
                                 default = nil)
  if valid_603615 != nil:
    section.add "X-Amz-Signature", valid_603615
  var valid_603616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603616 = validateParameter(valid_603616, JString, required = false,
                                 default = nil)
  if valid_603616 != nil:
    section.add "X-Amz-SignedHeaders", valid_603616
  var valid_603617 = header.getOrDefault("X-Amz-Credential")
  valid_603617 = validateParameter(valid_603617, JString, required = false,
                                 default = nil)
  if valid_603617 != nil:
    section.add "X-Amz-Credential", valid_603617
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603618: Call_GetDeleteReceiptFilter_603605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603618.validator(path, query, header, formData, body)
  let scheme = call_603618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603618.url(scheme.get, call_603618.host, call_603618.base,
                         call_603618.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603618, url, valid)

proc call*(call_603619: Call_GetDeleteReceiptFilter_603605; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  var query_603620 = newJObject()
  add(query_603620, "Action", newJString(Action))
  add(query_603620, "Version", newJString(Version))
  add(query_603620, "FilterName", newJString(FilterName))
  result = call_603619.call(nil, query_603620, nil, nil, nil)

var getDeleteReceiptFilter* = Call_GetDeleteReceiptFilter_603605(
    name: "getDeleteReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_GetDeleteReceiptFilter_603606, base: "/",
    url: url_GetDeleteReceiptFilter_603607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRule_603655 = ref object of OpenApiRestCall_602466
proc url_PostDeleteReceiptRule_603657(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteReceiptRule_603656(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603658 = query.getOrDefault("Action")
  valid_603658 = validateParameter(valid_603658, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_603658 != nil:
    section.add "Action", valid_603658
  var valid_603659 = query.getOrDefault("Version")
  valid_603659 = validateParameter(valid_603659, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603659 != nil:
    section.add "Version", valid_603659
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603660 = header.getOrDefault("X-Amz-Date")
  valid_603660 = validateParameter(valid_603660, JString, required = false,
                                 default = nil)
  if valid_603660 != nil:
    section.add "X-Amz-Date", valid_603660
  var valid_603661 = header.getOrDefault("X-Amz-Security-Token")
  valid_603661 = validateParameter(valid_603661, JString, required = false,
                                 default = nil)
  if valid_603661 != nil:
    section.add "X-Amz-Security-Token", valid_603661
  var valid_603662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603662 = validateParameter(valid_603662, JString, required = false,
                                 default = nil)
  if valid_603662 != nil:
    section.add "X-Amz-Content-Sha256", valid_603662
  var valid_603663 = header.getOrDefault("X-Amz-Algorithm")
  valid_603663 = validateParameter(valid_603663, JString, required = false,
                                 default = nil)
  if valid_603663 != nil:
    section.add "X-Amz-Algorithm", valid_603663
  var valid_603664 = header.getOrDefault("X-Amz-Signature")
  valid_603664 = validateParameter(valid_603664, JString, required = false,
                                 default = nil)
  if valid_603664 != nil:
    section.add "X-Amz-Signature", valid_603664
  var valid_603665 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603665 = validateParameter(valid_603665, JString, required = false,
                                 default = nil)
  if valid_603665 != nil:
    section.add "X-Amz-SignedHeaders", valid_603665
  var valid_603666 = header.getOrDefault("X-Amz-Credential")
  valid_603666 = validateParameter(valid_603666, JString, required = false,
                                 default = nil)
  if valid_603666 != nil:
    section.add "X-Amz-Credential", valid_603666
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_603667 = formData.getOrDefault("RuleName")
  valid_603667 = validateParameter(valid_603667, JString, required = true,
                                 default = nil)
  if valid_603667 != nil:
    section.add "RuleName", valid_603667
  var valid_603668 = formData.getOrDefault("RuleSetName")
  valid_603668 = validateParameter(valid_603668, JString, required = true,
                                 default = nil)
  if valid_603668 != nil:
    section.add "RuleSetName", valid_603668
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603669: Call_PostDeleteReceiptRule_603655; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603669.validator(path, query, header, formData, body)
  let scheme = call_603669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603669.url(scheme.get, call_603669.host, call_603669.base,
                         call_603669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603669, url, valid)

proc call*(call_603670: Call_PostDeleteReceiptRule_603655; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603671 = newJObject()
  var formData_603672 = newJObject()
  add(formData_603672, "RuleName", newJString(RuleName))
  add(formData_603672, "RuleSetName", newJString(RuleSetName))
  add(query_603671, "Action", newJString(Action))
  add(query_603671, "Version", newJString(Version))
  result = call_603670.call(nil, query_603671, nil, formData_603672, nil)

var postDeleteReceiptRule* = Call_PostDeleteReceiptRule_603655(
    name: "postDeleteReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_PostDeleteReceiptRule_603656, base: "/",
    url: url_PostDeleteReceiptRule_603657, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRule_603638 = ref object of OpenApiRestCall_602466
proc url_GetDeleteReceiptRule_603640(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteReceiptRule_603639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_603641 = query.getOrDefault("RuleName")
  valid_603641 = validateParameter(valid_603641, JString, required = true,
                                 default = nil)
  if valid_603641 != nil:
    section.add "RuleName", valid_603641
  var valid_603642 = query.getOrDefault("RuleSetName")
  valid_603642 = validateParameter(valid_603642, JString, required = true,
                                 default = nil)
  if valid_603642 != nil:
    section.add "RuleSetName", valid_603642
  var valid_603643 = query.getOrDefault("Action")
  valid_603643 = validateParameter(valid_603643, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_603643 != nil:
    section.add "Action", valid_603643
  var valid_603644 = query.getOrDefault("Version")
  valid_603644 = validateParameter(valid_603644, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603644 != nil:
    section.add "Version", valid_603644
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603645 = header.getOrDefault("X-Amz-Date")
  valid_603645 = validateParameter(valid_603645, JString, required = false,
                                 default = nil)
  if valid_603645 != nil:
    section.add "X-Amz-Date", valid_603645
  var valid_603646 = header.getOrDefault("X-Amz-Security-Token")
  valid_603646 = validateParameter(valid_603646, JString, required = false,
                                 default = nil)
  if valid_603646 != nil:
    section.add "X-Amz-Security-Token", valid_603646
  var valid_603647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603647 = validateParameter(valid_603647, JString, required = false,
                                 default = nil)
  if valid_603647 != nil:
    section.add "X-Amz-Content-Sha256", valid_603647
  var valid_603648 = header.getOrDefault("X-Amz-Algorithm")
  valid_603648 = validateParameter(valid_603648, JString, required = false,
                                 default = nil)
  if valid_603648 != nil:
    section.add "X-Amz-Algorithm", valid_603648
  var valid_603649 = header.getOrDefault("X-Amz-Signature")
  valid_603649 = validateParameter(valid_603649, JString, required = false,
                                 default = nil)
  if valid_603649 != nil:
    section.add "X-Amz-Signature", valid_603649
  var valid_603650 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603650 = validateParameter(valid_603650, JString, required = false,
                                 default = nil)
  if valid_603650 != nil:
    section.add "X-Amz-SignedHeaders", valid_603650
  var valid_603651 = header.getOrDefault("X-Amz-Credential")
  valid_603651 = validateParameter(valid_603651, JString, required = false,
                                 default = nil)
  if valid_603651 != nil:
    section.add "X-Amz-Credential", valid_603651
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603652: Call_GetDeleteReceiptRule_603638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603652.validator(path, query, header, formData, body)
  let scheme = call_603652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603652.url(scheme.get, call_603652.host, call_603652.base,
                         call_603652.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603652, url, valid)

proc call*(call_603653: Call_GetDeleteReceiptRule_603638; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603654 = newJObject()
  add(query_603654, "RuleName", newJString(RuleName))
  add(query_603654, "RuleSetName", newJString(RuleSetName))
  add(query_603654, "Action", newJString(Action))
  add(query_603654, "Version", newJString(Version))
  result = call_603653.call(nil, query_603654, nil, nil, nil)

var getDeleteReceiptRule* = Call_GetDeleteReceiptRule_603638(
    name: "getDeleteReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_GetDeleteReceiptRule_603639, base: "/",
    url: url_GetDeleteReceiptRule_603640, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRuleSet_603689 = ref object of OpenApiRestCall_602466
proc url_PostDeleteReceiptRuleSet_603691(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteReceiptRuleSet_603690(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603692 = query.getOrDefault("Action")
  valid_603692 = validateParameter(valid_603692, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_603692 != nil:
    section.add "Action", valid_603692
  var valid_603693 = query.getOrDefault("Version")
  valid_603693 = validateParameter(valid_603693, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603693 != nil:
    section.add "Version", valid_603693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603694 = header.getOrDefault("X-Amz-Date")
  valid_603694 = validateParameter(valid_603694, JString, required = false,
                                 default = nil)
  if valid_603694 != nil:
    section.add "X-Amz-Date", valid_603694
  var valid_603695 = header.getOrDefault("X-Amz-Security-Token")
  valid_603695 = validateParameter(valid_603695, JString, required = false,
                                 default = nil)
  if valid_603695 != nil:
    section.add "X-Amz-Security-Token", valid_603695
  var valid_603696 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603696 = validateParameter(valid_603696, JString, required = false,
                                 default = nil)
  if valid_603696 != nil:
    section.add "X-Amz-Content-Sha256", valid_603696
  var valid_603697 = header.getOrDefault("X-Amz-Algorithm")
  valid_603697 = validateParameter(valid_603697, JString, required = false,
                                 default = nil)
  if valid_603697 != nil:
    section.add "X-Amz-Algorithm", valid_603697
  var valid_603698 = header.getOrDefault("X-Amz-Signature")
  valid_603698 = validateParameter(valid_603698, JString, required = false,
                                 default = nil)
  if valid_603698 != nil:
    section.add "X-Amz-Signature", valid_603698
  var valid_603699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603699 = validateParameter(valid_603699, JString, required = false,
                                 default = nil)
  if valid_603699 != nil:
    section.add "X-Amz-SignedHeaders", valid_603699
  var valid_603700 = header.getOrDefault("X-Amz-Credential")
  valid_603700 = validateParameter(valid_603700, JString, required = false,
                                 default = nil)
  if valid_603700 != nil:
    section.add "X-Amz-Credential", valid_603700
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603701 = formData.getOrDefault("RuleSetName")
  valid_603701 = validateParameter(valid_603701, JString, required = true,
                                 default = nil)
  if valid_603701 != nil:
    section.add "RuleSetName", valid_603701
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603702: Call_PostDeleteReceiptRuleSet_603689; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603702.validator(path, query, header, formData, body)
  let scheme = call_603702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603702.url(scheme.get, call_603702.host, call_603702.base,
                         call_603702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603702, url, valid)

proc call*(call_603703: Call_PostDeleteReceiptRuleSet_603689; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603704 = newJObject()
  var formData_603705 = newJObject()
  add(formData_603705, "RuleSetName", newJString(RuleSetName))
  add(query_603704, "Action", newJString(Action))
  add(query_603704, "Version", newJString(Version))
  result = call_603703.call(nil, query_603704, nil, formData_603705, nil)

var postDeleteReceiptRuleSet* = Call_PostDeleteReceiptRuleSet_603689(
    name: "postDeleteReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_PostDeleteReceiptRuleSet_603690, base: "/",
    url: url_PostDeleteReceiptRuleSet_603691, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRuleSet_603673 = ref object of OpenApiRestCall_602466
proc url_GetDeleteReceiptRuleSet_603675(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteReceiptRuleSet_603674(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603676 = query.getOrDefault("RuleSetName")
  valid_603676 = validateParameter(valid_603676, JString, required = true,
                                 default = nil)
  if valid_603676 != nil:
    section.add "RuleSetName", valid_603676
  var valid_603677 = query.getOrDefault("Action")
  valid_603677 = validateParameter(valid_603677, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_603677 != nil:
    section.add "Action", valid_603677
  var valid_603678 = query.getOrDefault("Version")
  valid_603678 = validateParameter(valid_603678, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603678 != nil:
    section.add "Version", valid_603678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603679 = header.getOrDefault("X-Amz-Date")
  valid_603679 = validateParameter(valid_603679, JString, required = false,
                                 default = nil)
  if valid_603679 != nil:
    section.add "X-Amz-Date", valid_603679
  var valid_603680 = header.getOrDefault("X-Amz-Security-Token")
  valid_603680 = validateParameter(valid_603680, JString, required = false,
                                 default = nil)
  if valid_603680 != nil:
    section.add "X-Amz-Security-Token", valid_603680
  var valid_603681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603681 = validateParameter(valid_603681, JString, required = false,
                                 default = nil)
  if valid_603681 != nil:
    section.add "X-Amz-Content-Sha256", valid_603681
  var valid_603682 = header.getOrDefault("X-Amz-Algorithm")
  valid_603682 = validateParameter(valid_603682, JString, required = false,
                                 default = nil)
  if valid_603682 != nil:
    section.add "X-Amz-Algorithm", valid_603682
  var valid_603683 = header.getOrDefault("X-Amz-Signature")
  valid_603683 = validateParameter(valid_603683, JString, required = false,
                                 default = nil)
  if valid_603683 != nil:
    section.add "X-Amz-Signature", valid_603683
  var valid_603684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603684 = validateParameter(valid_603684, JString, required = false,
                                 default = nil)
  if valid_603684 != nil:
    section.add "X-Amz-SignedHeaders", valid_603684
  var valid_603685 = header.getOrDefault("X-Amz-Credential")
  valid_603685 = validateParameter(valid_603685, JString, required = false,
                                 default = nil)
  if valid_603685 != nil:
    section.add "X-Amz-Credential", valid_603685
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603686: Call_GetDeleteReceiptRuleSet_603673; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603686.validator(path, query, header, formData, body)
  let scheme = call_603686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603686.url(scheme.get, call_603686.host, call_603686.base,
                         call_603686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603686, url, valid)

proc call*(call_603687: Call_GetDeleteReceiptRuleSet_603673; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603688 = newJObject()
  add(query_603688, "RuleSetName", newJString(RuleSetName))
  add(query_603688, "Action", newJString(Action))
  add(query_603688, "Version", newJString(Version))
  result = call_603687.call(nil, query_603688, nil, nil, nil)

var getDeleteReceiptRuleSet* = Call_GetDeleteReceiptRuleSet_603673(
    name: "getDeleteReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_GetDeleteReceiptRuleSet_603674, base: "/",
    url: url_GetDeleteReceiptRuleSet_603675, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTemplate_603722 = ref object of OpenApiRestCall_602466
proc url_PostDeleteTemplate_603724(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteTemplate_603723(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603725 = query.getOrDefault("Action")
  valid_603725 = validateParameter(valid_603725, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_603725 != nil:
    section.add "Action", valid_603725
  var valid_603726 = query.getOrDefault("Version")
  valid_603726 = validateParameter(valid_603726, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603726 != nil:
    section.add "Version", valid_603726
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603727 = header.getOrDefault("X-Amz-Date")
  valid_603727 = validateParameter(valid_603727, JString, required = false,
                                 default = nil)
  if valid_603727 != nil:
    section.add "X-Amz-Date", valid_603727
  var valid_603728 = header.getOrDefault("X-Amz-Security-Token")
  valid_603728 = validateParameter(valid_603728, JString, required = false,
                                 default = nil)
  if valid_603728 != nil:
    section.add "X-Amz-Security-Token", valid_603728
  var valid_603729 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603729 = validateParameter(valid_603729, JString, required = false,
                                 default = nil)
  if valid_603729 != nil:
    section.add "X-Amz-Content-Sha256", valid_603729
  var valid_603730 = header.getOrDefault("X-Amz-Algorithm")
  valid_603730 = validateParameter(valid_603730, JString, required = false,
                                 default = nil)
  if valid_603730 != nil:
    section.add "X-Amz-Algorithm", valid_603730
  var valid_603731 = header.getOrDefault("X-Amz-Signature")
  valid_603731 = validateParameter(valid_603731, JString, required = false,
                                 default = nil)
  if valid_603731 != nil:
    section.add "X-Amz-Signature", valid_603731
  var valid_603732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603732 = validateParameter(valid_603732, JString, required = false,
                                 default = nil)
  if valid_603732 != nil:
    section.add "X-Amz-SignedHeaders", valid_603732
  var valid_603733 = header.getOrDefault("X-Amz-Credential")
  valid_603733 = validateParameter(valid_603733, JString, required = false,
                                 default = nil)
  if valid_603733 != nil:
    section.add "X-Amz-Credential", valid_603733
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_603734 = formData.getOrDefault("TemplateName")
  valid_603734 = validateParameter(valid_603734, JString, required = true,
                                 default = nil)
  if valid_603734 != nil:
    section.add "TemplateName", valid_603734
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603735: Call_PostDeleteTemplate_603722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603735.validator(path, query, header, formData, body)
  let scheme = call_603735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603735.url(scheme.get, call_603735.host, call_603735.base,
                         call_603735.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603735, url, valid)

proc call*(call_603736: Call_PostDeleteTemplate_603722; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_603737 = newJObject()
  var formData_603738 = newJObject()
  add(query_603737, "Action", newJString(Action))
  add(formData_603738, "TemplateName", newJString(TemplateName))
  add(query_603737, "Version", newJString(Version))
  result = call_603736.call(nil, query_603737, nil, formData_603738, nil)

var postDeleteTemplate* = Call_PostDeleteTemplate_603722(
    name: "postDeleteTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteTemplate",
    validator: validate_PostDeleteTemplate_603723, base: "/",
    url: url_PostDeleteTemplate_603724, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTemplate_603706 = ref object of OpenApiRestCall_602466
proc url_GetDeleteTemplate_603708(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteTemplate_603707(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603709 = query.getOrDefault("Action")
  valid_603709 = validateParameter(valid_603709, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_603709 != nil:
    section.add "Action", valid_603709
  var valid_603710 = query.getOrDefault("TemplateName")
  valid_603710 = validateParameter(valid_603710, JString, required = true,
                                 default = nil)
  if valid_603710 != nil:
    section.add "TemplateName", valid_603710
  var valid_603711 = query.getOrDefault("Version")
  valid_603711 = validateParameter(valid_603711, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603711 != nil:
    section.add "Version", valid_603711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603712 = header.getOrDefault("X-Amz-Date")
  valid_603712 = validateParameter(valid_603712, JString, required = false,
                                 default = nil)
  if valid_603712 != nil:
    section.add "X-Amz-Date", valid_603712
  var valid_603713 = header.getOrDefault("X-Amz-Security-Token")
  valid_603713 = validateParameter(valid_603713, JString, required = false,
                                 default = nil)
  if valid_603713 != nil:
    section.add "X-Amz-Security-Token", valid_603713
  var valid_603714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603714 = validateParameter(valid_603714, JString, required = false,
                                 default = nil)
  if valid_603714 != nil:
    section.add "X-Amz-Content-Sha256", valid_603714
  var valid_603715 = header.getOrDefault("X-Amz-Algorithm")
  valid_603715 = validateParameter(valid_603715, JString, required = false,
                                 default = nil)
  if valid_603715 != nil:
    section.add "X-Amz-Algorithm", valid_603715
  var valid_603716 = header.getOrDefault("X-Amz-Signature")
  valid_603716 = validateParameter(valid_603716, JString, required = false,
                                 default = nil)
  if valid_603716 != nil:
    section.add "X-Amz-Signature", valid_603716
  var valid_603717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603717 = validateParameter(valid_603717, JString, required = false,
                                 default = nil)
  if valid_603717 != nil:
    section.add "X-Amz-SignedHeaders", valid_603717
  var valid_603718 = header.getOrDefault("X-Amz-Credential")
  valid_603718 = validateParameter(valid_603718, JString, required = false,
                                 default = nil)
  if valid_603718 != nil:
    section.add "X-Amz-Credential", valid_603718
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603719: Call_GetDeleteTemplate_603706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603719.validator(path, query, header, formData, body)
  let scheme = call_603719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603719.url(scheme.get, call_603719.host, call_603719.base,
                         call_603719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603719, url, valid)

proc call*(call_603720: Call_GetDeleteTemplate_603706; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_603721 = newJObject()
  add(query_603721, "Action", newJString(Action))
  add(query_603721, "TemplateName", newJString(TemplateName))
  add(query_603721, "Version", newJString(Version))
  result = call_603720.call(nil, query_603721, nil, nil, nil)

var getDeleteTemplate* = Call_GetDeleteTemplate_603706(name: "getDeleteTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteTemplate", validator: validate_GetDeleteTemplate_603707,
    base: "/", url: url_GetDeleteTemplate_603708,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVerifiedEmailAddress_603755 = ref object of OpenApiRestCall_602466
proc url_PostDeleteVerifiedEmailAddress_603757(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteVerifiedEmailAddress_603756(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603758 = query.getOrDefault("Action")
  valid_603758 = validateParameter(valid_603758, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_603758 != nil:
    section.add "Action", valid_603758
  var valid_603759 = query.getOrDefault("Version")
  valid_603759 = validateParameter(valid_603759, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603759 != nil:
    section.add "Version", valid_603759
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603760 = header.getOrDefault("X-Amz-Date")
  valid_603760 = validateParameter(valid_603760, JString, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "X-Amz-Date", valid_603760
  var valid_603761 = header.getOrDefault("X-Amz-Security-Token")
  valid_603761 = validateParameter(valid_603761, JString, required = false,
                                 default = nil)
  if valid_603761 != nil:
    section.add "X-Amz-Security-Token", valid_603761
  var valid_603762 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603762 = validateParameter(valid_603762, JString, required = false,
                                 default = nil)
  if valid_603762 != nil:
    section.add "X-Amz-Content-Sha256", valid_603762
  var valid_603763 = header.getOrDefault("X-Amz-Algorithm")
  valid_603763 = validateParameter(valid_603763, JString, required = false,
                                 default = nil)
  if valid_603763 != nil:
    section.add "X-Amz-Algorithm", valid_603763
  var valid_603764 = header.getOrDefault("X-Amz-Signature")
  valid_603764 = validateParameter(valid_603764, JString, required = false,
                                 default = nil)
  if valid_603764 != nil:
    section.add "X-Amz-Signature", valid_603764
  var valid_603765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603765 = validateParameter(valid_603765, JString, required = false,
                                 default = nil)
  if valid_603765 != nil:
    section.add "X-Amz-SignedHeaders", valid_603765
  var valid_603766 = header.getOrDefault("X-Amz-Credential")
  valid_603766 = validateParameter(valid_603766, JString, required = false,
                                 default = nil)
  if valid_603766 != nil:
    section.add "X-Amz-Credential", valid_603766
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_603767 = formData.getOrDefault("EmailAddress")
  valid_603767 = validateParameter(valid_603767, JString, required = true,
                                 default = nil)
  if valid_603767 != nil:
    section.add "EmailAddress", valid_603767
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603768: Call_PostDeleteVerifiedEmailAddress_603755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_603768.validator(path, query, header, formData, body)
  let scheme = call_603768.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603768.url(scheme.get, call_603768.host, call_603768.base,
                         call_603768.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603768, url, valid)

proc call*(call_603769: Call_PostDeleteVerifiedEmailAddress_603755;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603770 = newJObject()
  var formData_603771 = newJObject()
  add(formData_603771, "EmailAddress", newJString(EmailAddress))
  add(query_603770, "Action", newJString(Action))
  add(query_603770, "Version", newJString(Version))
  result = call_603769.call(nil, query_603770, nil, formData_603771, nil)

var postDeleteVerifiedEmailAddress* = Call_PostDeleteVerifiedEmailAddress_603755(
    name: "postDeleteVerifiedEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_PostDeleteVerifiedEmailAddress_603756, base: "/",
    url: url_PostDeleteVerifiedEmailAddress_603757,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVerifiedEmailAddress_603739 = ref object of OpenApiRestCall_602466
proc url_GetDeleteVerifiedEmailAddress_603741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteVerifiedEmailAddress_603740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603742 = query.getOrDefault("Action")
  valid_603742 = validateParameter(valid_603742, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_603742 != nil:
    section.add "Action", valid_603742
  var valid_603743 = query.getOrDefault("EmailAddress")
  valid_603743 = validateParameter(valid_603743, JString, required = true,
                                 default = nil)
  if valid_603743 != nil:
    section.add "EmailAddress", valid_603743
  var valid_603744 = query.getOrDefault("Version")
  valid_603744 = validateParameter(valid_603744, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603744 != nil:
    section.add "Version", valid_603744
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603745 = header.getOrDefault("X-Amz-Date")
  valid_603745 = validateParameter(valid_603745, JString, required = false,
                                 default = nil)
  if valid_603745 != nil:
    section.add "X-Amz-Date", valid_603745
  var valid_603746 = header.getOrDefault("X-Amz-Security-Token")
  valid_603746 = validateParameter(valid_603746, JString, required = false,
                                 default = nil)
  if valid_603746 != nil:
    section.add "X-Amz-Security-Token", valid_603746
  var valid_603747 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603747 = validateParameter(valid_603747, JString, required = false,
                                 default = nil)
  if valid_603747 != nil:
    section.add "X-Amz-Content-Sha256", valid_603747
  var valid_603748 = header.getOrDefault("X-Amz-Algorithm")
  valid_603748 = validateParameter(valid_603748, JString, required = false,
                                 default = nil)
  if valid_603748 != nil:
    section.add "X-Amz-Algorithm", valid_603748
  var valid_603749 = header.getOrDefault("X-Amz-Signature")
  valid_603749 = validateParameter(valid_603749, JString, required = false,
                                 default = nil)
  if valid_603749 != nil:
    section.add "X-Amz-Signature", valid_603749
  var valid_603750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603750 = validateParameter(valid_603750, JString, required = false,
                                 default = nil)
  if valid_603750 != nil:
    section.add "X-Amz-SignedHeaders", valid_603750
  var valid_603751 = header.getOrDefault("X-Amz-Credential")
  valid_603751 = validateParameter(valid_603751, JString, required = false,
                                 default = nil)
  if valid_603751 != nil:
    section.add "X-Amz-Credential", valid_603751
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603752: Call_GetDeleteVerifiedEmailAddress_603739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_603752.validator(path, query, header, formData, body)
  let scheme = call_603752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603752.url(scheme.get, call_603752.host, call_603752.base,
                         call_603752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603752, url, valid)

proc call*(call_603753: Call_GetDeleteVerifiedEmailAddress_603739;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: string (required)
  var query_603754 = newJObject()
  add(query_603754, "Action", newJString(Action))
  add(query_603754, "EmailAddress", newJString(EmailAddress))
  add(query_603754, "Version", newJString(Version))
  result = call_603753.call(nil, query_603754, nil, nil, nil)

var getDeleteVerifiedEmailAddress* = Call_GetDeleteVerifiedEmailAddress_603739(
    name: "getDeleteVerifiedEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_GetDeleteVerifiedEmailAddress_603740, base: "/",
    url: url_GetDeleteVerifiedEmailAddress_603741,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeActiveReceiptRuleSet_603787 = ref object of OpenApiRestCall_602466
proc url_PostDescribeActiveReceiptRuleSet_603789(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeActiveReceiptRuleSet_603788(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603790 = query.getOrDefault("Action")
  valid_603790 = validateParameter(valid_603790, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_603790 != nil:
    section.add "Action", valid_603790
  var valid_603791 = query.getOrDefault("Version")
  valid_603791 = validateParameter(valid_603791, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603791 != nil:
    section.add "Version", valid_603791
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603792 = header.getOrDefault("X-Amz-Date")
  valid_603792 = validateParameter(valid_603792, JString, required = false,
                                 default = nil)
  if valid_603792 != nil:
    section.add "X-Amz-Date", valid_603792
  var valid_603793 = header.getOrDefault("X-Amz-Security-Token")
  valid_603793 = validateParameter(valid_603793, JString, required = false,
                                 default = nil)
  if valid_603793 != nil:
    section.add "X-Amz-Security-Token", valid_603793
  var valid_603794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603794 = validateParameter(valid_603794, JString, required = false,
                                 default = nil)
  if valid_603794 != nil:
    section.add "X-Amz-Content-Sha256", valid_603794
  var valid_603795 = header.getOrDefault("X-Amz-Algorithm")
  valid_603795 = validateParameter(valid_603795, JString, required = false,
                                 default = nil)
  if valid_603795 != nil:
    section.add "X-Amz-Algorithm", valid_603795
  var valid_603796 = header.getOrDefault("X-Amz-Signature")
  valid_603796 = validateParameter(valid_603796, JString, required = false,
                                 default = nil)
  if valid_603796 != nil:
    section.add "X-Amz-Signature", valid_603796
  var valid_603797 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603797 = validateParameter(valid_603797, JString, required = false,
                                 default = nil)
  if valid_603797 != nil:
    section.add "X-Amz-SignedHeaders", valid_603797
  var valid_603798 = header.getOrDefault("X-Amz-Credential")
  valid_603798 = validateParameter(valid_603798, JString, required = false,
                                 default = nil)
  if valid_603798 != nil:
    section.add "X-Amz-Credential", valid_603798
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603799: Call_PostDescribeActiveReceiptRuleSet_603787;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603799.validator(path, query, header, formData, body)
  let scheme = call_603799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603799.url(scheme.get, call_603799.host, call_603799.base,
                         call_603799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603799, url, valid)

proc call*(call_603800: Call_PostDescribeActiveReceiptRuleSet_603787;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603801 = newJObject()
  add(query_603801, "Action", newJString(Action))
  add(query_603801, "Version", newJString(Version))
  result = call_603800.call(nil, query_603801, nil, nil, nil)

var postDescribeActiveReceiptRuleSet* = Call_PostDescribeActiveReceiptRuleSet_603787(
    name: "postDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_PostDescribeActiveReceiptRuleSet_603788, base: "/",
    url: url_PostDescribeActiveReceiptRuleSet_603789,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeActiveReceiptRuleSet_603772 = ref object of OpenApiRestCall_602466
proc url_GetDescribeActiveReceiptRuleSet_603774(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeActiveReceiptRuleSet_603773(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603775 = query.getOrDefault("Action")
  valid_603775 = validateParameter(valid_603775, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_603775 != nil:
    section.add "Action", valid_603775
  var valid_603776 = query.getOrDefault("Version")
  valid_603776 = validateParameter(valid_603776, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603776 != nil:
    section.add "Version", valid_603776
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603777 = header.getOrDefault("X-Amz-Date")
  valid_603777 = validateParameter(valid_603777, JString, required = false,
                                 default = nil)
  if valid_603777 != nil:
    section.add "X-Amz-Date", valid_603777
  var valid_603778 = header.getOrDefault("X-Amz-Security-Token")
  valid_603778 = validateParameter(valid_603778, JString, required = false,
                                 default = nil)
  if valid_603778 != nil:
    section.add "X-Amz-Security-Token", valid_603778
  var valid_603779 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603779 = validateParameter(valid_603779, JString, required = false,
                                 default = nil)
  if valid_603779 != nil:
    section.add "X-Amz-Content-Sha256", valid_603779
  var valid_603780 = header.getOrDefault("X-Amz-Algorithm")
  valid_603780 = validateParameter(valid_603780, JString, required = false,
                                 default = nil)
  if valid_603780 != nil:
    section.add "X-Amz-Algorithm", valid_603780
  var valid_603781 = header.getOrDefault("X-Amz-Signature")
  valid_603781 = validateParameter(valid_603781, JString, required = false,
                                 default = nil)
  if valid_603781 != nil:
    section.add "X-Amz-Signature", valid_603781
  var valid_603782 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603782 = validateParameter(valid_603782, JString, required = false,
                                 default = nil)
  if valid_603782 != nil:
    section.add "X-Amz-SignedHeaders", valid_603782
  var valid_603783 = header.getOrDefault("X-Amz-Credential")
  valid_603783 = validateParameter(valid_603783, JString, required = false,
                                 default = nil)
  if valid_603783 != nil:
    section.add "X-Amz-Credential", valid_603783
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603784: Call_GetDescribeActiveReceiptRuleSet_603772;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603784.validator(path, query, header, formData, body)
  let scheme = call_603784.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603784.url(scheme.get, call_603784.host, call_603784.base,
                         call_603784.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603784, url, valid)

proc call*(call_603785: Call_GetDescribeActiveReceiptRuleSet_603772;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603786 = newJObject()
  add(query_603786, "Action", newJString(Action))
  add(query_603786, "Version", newJString(Version))
  result = call_603785.call(nil, query_603786, nil, nil, nil)

var getDescribeActiveReceiptRuleSet* = Call_GetDescribeActiveReceiptRuleSet_603772(
    name: "getDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_GetDescribeActiveReceiptRuleSet_603773, base: "/",
    url: url_GetDescribeActiveReceiptRuleSet_603774,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeConfigurationSet_603819 = ref object of OpenApiRestCall_602466
proc url_PostDescribeConfigurationSet_603821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeConfigurationSet_603820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603822 = query.getOrDefault("Action")
  valid_603822 = validateParameter(valid_603822, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_603822 != nil:
    section.add "Action", valid_603822
  var valid_603823 = query.getOrDefault("Version")
  valid_603823 = validateParameter(valid_603823, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603823 != nil:
    section.add "Version", valid_603823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603824 = header.getOrDefault("X-Amz-Date")
  valid_603824 = validateParameter(valid_603824, JString, required = false,
                                 default = nil)
  if valid_603824 != nil:
    section.add "X-Amz-Date", valid_603824
  var valid_603825 = header.getOrDefault("X-Amz-Security-Token")
  valid_603825 = validateParameter(valid_603825, JString, required = false,
                                 default = nil)
  if valid_603825 != nil:
    section.add "X-Amz-Security-Token", valid_603825
  var valid_603826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603826 = validateParameter(valid_603826, JString, required = false,
                                 default = nil)
  if valid_603826 != nil:
    section.add "X-Amz-Content-Sha256", valid_603826
  var valid_603827 = header.getOrDefault("X-Amz-Algorithm")
  valid_603827 = validateParameter(valid_603827, JString, required = false,
                                 default = nil)
  if valid_603827 != nil:
    section.add "X-Amz-Algorithm", valid_603827
  var valid_603828 = header.getOrDefault("X-Amz-Signature")
  valid_603828 = validateParameter(valid_603828, JString, required = false,
                                 default = nil)
  if valid_603828 != nil:
    section.add "X-Amz-Signature", valid_603828
  var valid_603829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603829 = validateParameter(valid_603829, JString, required = false,
                                 default = nil)
  if valid_603829 != nil:
    section.add "X-Amz-SignedHeaders", valid_603829
  var valid_603830 = header.getOrDefault("X-Amz-Credential")
  valid_603830 = validateParameter(valid_603830, JString, required = false,
                                 default = nil)
  if valid_603830 != nil:
    section.add "X-Amz-Credential", valid_603830
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  section = newJObject()
  var valid_603831 = formData.getOrDefault("ConfigurationSetAttributeNames")
  valid_603831 = validateParameter(valid_603831, JArray, required = false,
                                 default = nil)
  if valid_603831 != nil:
    section.add "ConfigurationSetAttributeNames", valid_603831
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603832 = formData.getOrDefault("ConfigurationSetName")
  valid_603832 = validateParameter(valid_603832, JString, required = true,
                                 default = nil)
  if valid_603832 != nil:
    section.add "ConfigurationSetName", valid_603832
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603833: Call_PostDescribeConfigurationSet_603819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603833.validator(path, query, header, formData, body)
  let scheme = call_603833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603833.url(scheme.get, call_603833.host, call_603833.base,
                         call_603833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603833, url, valid)

proc call*(call_603834: Call_PostDescribeConfigurationSet_603819;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603835 = newJObject()
  var formData_603836 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    formData_603836.add "ConfigurationSetAttributeNames",
                       ConfigurationSetAttributeNames
  add(formData_603836, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603835, "Action", newJString(Action))
  add(query_603835, "Version", newJString(Version))
  result = call_603834.call(nil, query_603835, nil, formData_603836, nil)

var postDescribeConfigurationSet* = Call_PostDescribeConfigurationSet_603819(
    name: "postDescribeConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_PostDescribeConfigurationSet_603820, base: "/",
    url: url_PostDescribeConfigurationSet_603821,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeConfigurationSet_603802 = ref object of OpenApiRestCall_602466
proc url_GetDescribeConfigurationSet_603804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeConfigurationSet_603803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603805 = query.getOrDefault("Action")
  valid_603805 = validateParameter(valid_603805, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_603805 != nil:
    section.add "Action", valid_603805
  var valid_603806 = query.getOrDefault("ConfigurationSetAttributeNames")
  valid_603806 = validateParameter(valid_603806, JArray, required = false,
                                 default = nil)
  if valid_603806 != nil:
    section.add "ConfigurationSetAttributeNames", valid_603806
  var valid_603807 = query.getOrDefault("ConfigurationSetName")
  valid_603807 = validateParameter(valid_603807, JString, required = true,
                                 default = nil)
  if valid_603807 != nil:
    section.add "ConfigurationSetName", valid_603807
  var valid_603808 = query.getOrDefault("Version")
  valid_603808 = validateParameter(valid_603808, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603808 != nil:
    section.add "Version", valid_603808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603809 = header.getOrDefault("X-Amz-Date")
  valid_603809 = validateParameter(valid_603809, JString, required = false,
                                 default = nil)
  if valid_603809 != nil:
    section.add "X-Amz-Date", valid_603809
  var valid_603810 = header.getOrDefault("X-Amz-Security-Token")
  valid_603810 = validateParameter(valid_603810, JString, required = false,
                                 default = nil)
  if valid_603810 != nil:
    section.add "X-Amz-Security-Token", valid_603810
  var valid_603811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603811 = validateParameter(valid_603811, JString, required = false,
                                 default = nil)
  if valid_603811 != nil:
    section.add "X-Amz-Content-Sha256", valid_603811
  var valid_603812 = header.getOrDefault("X-Amz-Algorithm")
  valid_603812 = validateParameter(valid_603812, JString, required = false,
                                 default = nil)
  if valid_603812 != nil:
    section.add "X-Amz-Algorithm", valid_603812
  var valid_603813 = header.getOrDefault("X-Amz-Signature")
  valid_603813 = validateParameter(valid_603813, JString, required = false,
                                 default = nil)
  if valid_603813 != nil:
    section.add "X-Amz-Signature", valid_603813
  var valid_603814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603814 = validateParameter(valid_603814, JString, required = false,
                                 default = nil)
  if valid_603814 != nil:
    section.add "X-Amz-SignedHeaders", valid_603814
  var valid_603815 = header.getOrDefault("X-Amz-Credential")
  valid_603815 = validateParameter(valid_603815, JString, required = false,
                                 default = nil)
  if valid_603815 != nil:
    section.add "X-Amz-Credential", valid_603815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603816: Call_GetDescribeConfigurationSet_603802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603816.validator(path, query, header, formData, body)
  let scheme = call_603816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603816.url(scheme.get, call_603816.host, call_603816.base,
                         call_603816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603816, url, valid)

proc call*(call_603817: Call_GetDescribeConfigurationSet_603802;
          ConfigurationSetName: string;
          Action: string = "DescribeConfigurationSet";
          ConfigurationSetAttributeNames: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: string (required)
  var query_603818 = newJObject()
  add(query_603818, "Action", newJString(Action))
  if ConfigurationSetAttributeNames != nil:
    query_603818.add "ConfigurationSetAttributeNames",
                    ConfigurationSetAttributeNames
  add(query_603818, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603818, "Version", newJString(Version))
  result = call_603817.call(nil, query_603818, nil, nil, nil)

var getDescribeConfigurationSet* = Call_GetDescribeConfigurationSet_603802(
    name: "getDescribeConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_GetDescribeConfigurationSet_603803, base: "/",
    url: url_GetDescribeConfigurationSet_603804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRule_603854 = ref object of OpenApiRestCall_602466
proc url_PostDescribeReceiptRule_603856(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReceiptRule_603855(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603857 = query.getOrDefault("Action")
  valid_603857 = validateParameter(valid_603857, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_603857 != nil:
    section.add "Action", valid_603857
  var valid_603858 = query.getOrDefault("Version")
  valid_603858 = validateParameter(valid_603858, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603858 != nil:
    section.add "Version", valid_603858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603859 = header.getOrDefault("X-Amz-Date")
  valid_603859 = validateParameter(valid_603859, JString, required = false,
                                 default = nil)
  if valid_603859 != nil:
    section.add "X-Amz-Date", valid_603859
  var valid_603860 = header.getOrDefault("X-Amz-Security-Token")
  valid_603860 = validateParameter(valid_603860, JString, required = false,
                                 default = nil)
  if valid_603860 != nil:
    section.add "X-Amz-Security-Token", valid_603860
  var valid_603861 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603861 = validateParameter(valid_603861, JString, required = false,
                                 default = nil)
  if valid_603861 != nil:
    section.add "X-Amz-Content-Sha256", valid_603861
  var valid_603862 = header.getOrDefault("X-Amz-Algorithm")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "X-Amz-Algorithm", valid_603862
  var valid_603863 = header.getOrDefault("X-Amz-Signature")
  valid_603863 = validateParameter(valid_603863, JString, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "X-Amz-Signature", valid_603863
  var valid_603864 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603864 = validateParameter(valid_603864, JString, required = false,
                                 default = nil)
  if valid_603864 != nil:
    section.add "X-Amz-SignedHeaders", valid_603864
  var valid_603865 = header.getOrDefault("X-Amz-Credential")
  valid_603865 = validateParameter(valid_603865, JString, required = false,
                                 default = nil)
  if valid_603865 != nil:
    section.add "X-Amz-Credential", valid_603865
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_603866 = formData.getOrDefault("RuleName")
  valid_603866 = validateParameter(valid_603866, JString, required = true,
                                 default = nil)
  if valid_603866 != nil:
    section.add "RuleName", valid_603866
  var valid_603867 = formData.getOrDefault("RuleSetName")
  valid_603867 = validateParameter(valid_603867, JString, required = true,
                                 default = nil)
  if valid_603867 != nil:
    section.add "RuleSetName", valid_603867
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603868: Call_PostDescribeReceiptRule_603854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603868.validator(path, query, header, formData, body)
  let scheme = call_603868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603868.url(scheme.get, call_603868.host, call_603868.base,
                         call_603868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603868, url, valid)

proc call*(call_603869: Call_PostDescribeReceiptRule_603854; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603870 = newJObject()
  var formData_603871 = newJObject()
  add(formData_603871, "RuleName", newJString(RuleName))
  add(formData_603871, "RuleSetName", newJString(RuleSetName))
  add(query_603870, "Action", newJString(Action))
  add(query_603870, "Version", newJString(Version))
  result = call_603869.call(nil, query_603870, nil, formData_603871, nil)

var postDescribeReceiptRule* = Call_PostDescribeReceiptRule_603854(
    name: "postDescribeReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_PostDescribeReceiptRule_603855, base: "/",
    url: url_PostDescribeReceiptRule_603856, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRule_603837 = ref object of OpenApiRestCall_602466
proc url_GetDescribeReceiptRule_603839(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReceiptRule_603838(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_603840 = query.getOrDefault("RuleName")
  valid_603840 = validateParameter(valid_603840, JString, required = true,
                                 default = nil)
  if valid_603840 != nil:
    section.add "RuleName", valid_603840
  var valid_603841 = query.getOrDefault("RuleSetName")
  valid_603841 = validateParameter(valid_603841, JString, required = true,
                                 default = nil)
  if valid_603841 != nil:
    section.add "RuleSetName", valid_603841
  var valid_603842 = query.getOrDefault("Action")
  valid_603842 = validateParameter(valid_603842, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_603842 != nil:
    section.add "Action", valid_603842
  var valid_603843 = query.getOrDefault("Version")
  valid_603843 = validateParameter(valid_603843, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603843 != nil:
    section.add "Version", valid_603843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603844 = header.getOrDefault("X-Amz-Date")
  valid_603844 = validateParameter(valid_603844, JString, required = false,
                                 default = nil)
  if valid_603844 != nil:
    section.add "X-Amz-Date", valid_603844
  var valid_603845 = header.getOrDefault("X-Amz-Security-Token")
  valid_603845 = validateParameter(valid_603845, JString, required = false,
                                 default = nil)
  if valid_603845 != nil:
    section.add "X-Amz-Security-Token", valid_603845
  var valid_603846 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603846 = validateParameter(valid_603846, JString, required = false,
                                 default = nil)
  if valid_603846 != nil:
    section.add "X-Amz-Content-Sha256", valid_603846
  var valid_603847 = header.getOrDefault("X-Amz-Algorithm")
  valid_603847 = validateParameter(valid_603847, JString, required = false,
                                 default = nil)
  if valid_603847 != nil:
    section.add "X-Amz-Algorithm", valid_603847
  var valid_603848 = header.getOrDefault("X-Amz-Signature")
  valid_603848 = validateParameter(valid_603848, JString, required = false,
                                 default = nil)
  if valid_603848 != nil:
    section.add "X-Amz-Signature", valid_603848
  var valid_603849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603849 = validateParameter(valid_603849, JString, required = false,
                                 default = nil)
  if valid_603849 != nil:
    section.add "X-Amz-SignedHeaders", valid_603849
  var valid_603850 = header.getOrDefault("X-Amz-Credential")
  valid_603850 = validateParameter(valid_603850, JString, required = false,
                                 default = nil)
  if valid_603850 != nil:
    section.add "X-Amz-Credential", valid_603850
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603851: Call_GetDescribeReceiptRule_603837; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603851.validator(path, query, header, formData, body)
  let scheme = call_603851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603851.url(scheme.get, call_603851.host, call_603851.base,
                         call_603851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603851, url, valid)

proc call*(call_603852: Call_GetDescribeReceiptRule_603837; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603853 = newJObject()
  add(query_603853, "RuleName", newJString(RuleName))
  add(query_603853, "RuleSetName", newJString(RuleSetName))
  add(query_603853, "Action", newJString(Action))
  add(query_603853, "Version", newJString(Version))
  result = call_603852.call(nil, query_603853, nil, nil, nil)

var getDescribeReceiptRule* = Call_GetDescribeReceiptRule_603837(
    name: "getDescribeReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_GetDescribeReceiptRule_603838, base: "/",
    url: url_GetDescribeReceiptRule_603839, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRuleSet_603888 = ref object of OpenApiRestCall_602466
proc url_PostDescribeReceiptRuleSet_603890(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReceiptRuleSet_603889(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603891 = query.getOrDefault("Action")
  valid_603891 = validateParameter(valid_603891, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_603891 != nil:
    section.add "Action", valid_603891
  var valid_603892 = query.getOrDefault("Version")
  valid_603892 = validateParameter(valid_603892, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603892 != nil:
    section.add "Version", valid_603892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603893 = header.getOrDefault("X-Amz-Date")
  valid_603893 = validateParameter(valid_603893, JString, required = false,
                                 default = nil)
  if valid_603893 != nil:
    section.add "X-Amz-Date", valid_603893
  var valid_603894 = header.getOrDefault("X-Amz-Security-Token")
  valid_603894 = validateParameter(valid_603894, JString, required = false,
                                 default = nil)
  if valid_603894 != nil:
    section.add "X-Amz-Security-Token", valid_603894
  var valid_603895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603895 = validateParameter(valid_603895, JString, required = false,
                                 default = nil)
  if valid_603895 != nil:
    section.add "X-Amz-Content-Sha256", valid_603895
  var valid_603896 = header.getOrDefault("X-Amz-Algorithm")
  valid_603896 = validateParameter(valid_603896, JString, required = false,
                                 default = nil)
  if valid_603896 != nil:
    section.add "X-Amz-Algorithm", valid_603896
  var valid_603897 = header.getOrDefault("X-Amz-Signature")
  valid_603897 = validateParameter(valid_603897, JString, required = false,
                                 default = nil)
  if valid_603897 != nil:
    section.add "X-Amz-Signature", valid_603897
  var valid_603898 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603898 = validateParameter(valid_603898, JString, required = false,
                                 default = nil)
  if valid_603898 != nil:
    section.add "X-Amz-SignedHeaders", valid_603898
  var valid_603899 = header.getOrDefault("X-Amz-Credential")
  valid_603899 = validateParameter(valid_603899, JString, required = false,
                                 default = nil)
  if valid_603899 != nil:
    section.add "X-Amz-Credential", valid_603899
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603900 = formData.getOrDefault("RuleSetName")
  valid_603900 = validateParameter(valid_603900, JString, required = true,
                                 default = nil)
  if valid_603900 != nil:
    section.add "RuleSetName", valid_603900
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603901: Call_PostDescribeReceiptRuleSet_603888; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603901.validator(path, query, header, formData, body)
  let scheme = call_603901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603901.url(scheme.get, call_603901.host, call_603901.base,
                         call_603901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603901, url, valid)

proc call*(call_603902: Call_PostDescribeReceiptRuleSet_603888;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603903 = newJObject()
  var formData_603904 = newJObject()
  add(formData_603904, "RuleSetName", newJString(RuleSetName))
  add(query_603903, "Action", newJString(Action))
  add(query_603903, "Version", newJString(Version))
  result = call_603902.call(nil, query_603903, nil, formData_603904, nil)

var postDescribeReceiptRuleSet* = Call_PostDescribeReceiptRuleSet_603888(
    name: "postDescribeReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_PostDescribeReceiptRuleSet_603889, base: "/",
    url: url_PostDescribeReceiptRuleSet_603890,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRuleSet_603872 = ref object of OpenApiRestCall_602466
proc url_GetDescribeReceiptRuleSet_603874(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReceiptRuleSet_603873(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603875 = query.getOrDefault("RuleSetName")
  valid_603875 = validateParameter(valid_603875, JString, required = true,
                                 default = nil)
  if valid_603875 != nil:
    section.add "RuleSetName", valid_603875
  var valid_603876 = query.getOrDefault("Action")
  valid_603876 = validateParameter(valid_603876, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_603876 != nil:
    section.add "Action", valid_603876
  var valid_603877 = query.getOrDefault("Version")
  valid_603877 = validateParameter(valid_603877, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603877 != nil:
    section.add "Version", valid_603877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603878 = header.getOrDefault("X-Amz-Date")
  valid_603878 = validateParameter(valid_603878, JString, required = false,
                                 default = nil)
  if valid_603878 != nil:
    section.add "X-Amz-Date", valid_603878
  var valid_603879 = header.getOrDefault("X-Amz-Security-Token")
  valid_603879 = validateParameter(valid_603879, JString, required = false,
                                 default = nil)
  if valid_603879 != nil:
    section.add "X-Amz-Security-Token", valid_603879
  var valid_603880 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603880 = validateParameter(valid_603880, JString, required = false,
                                 default = nil)
  if valid_603880 != nil:
    section.add "X-Amz-Content-Sha256", valid_603880
  var valid_603881 = header.getOrDefault("X-Amz-Algorithm")
  valid_603881 = validateParameter(valid_603881, JString, required = false,
                                 default = nil)
  if valid_603881 != nil:
    section.add "X-Amz-Algorithm", valid_603881
  var valid_603882 = header.getOrDefault("X-Amz-Signature")
  valid_603882 = validateParameter(valid_603882, JString, required = false,
                                 default = nil)
  if valid_603882 != nil:
    section.add "X-Amz-Signature", valid_603882
  var valid_603883 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603883 = validateParameter(valid_603883, JString, required = false,
                                 default = nil)
  if valid_603883 != nil:
    section.add "X-Amz-SignedHeaders", valid_603883
  var valid_603884 = header.getOrDefault("X-Amz-Credential")
  valid_603884 = validateParameter(valid_603884, JString, required = false,
                                 default = nil)
  if valid_603884 != nil:
    section.add "X-Amz-Credential", valid_603884
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603885: Call_GetDescribeReceiptRuleSet_603872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603885.validator(path, query, header, formData, body)
  let scheme = call_603885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603885.url(scheme.get, call_603885.host, call_603885.base,
                         call_603885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603885, url, valid)

proc call*(call_603886: Call_GetDescribeReceiptRuleSet_603872; RuleSetName: string;
          Action: string = "DescribeReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603887 = newJObject()
  add(query_603887, "RuleSetName", newJString(RuleSetName))
  add(query_603887, "Action", newJString(Action))
  add(query_603887, "Version", newJString(Version))
  result = call_603886.call(nil, query_603887, nil, nil, nil)

var getDescribeReceiptRuleSet* = Call_GetDescribeReceiptRuleSet_603872(
    name: "getDescribeReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_GetDescribeReceiptRuleSet_603873, base: "/",
    url: url_GetDescribeReceiptRuleSet_603874,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSendingEnabled_603920 = ref object of OpenApiRestCall_602466
proc url_PostGetAccountSendingEnabled_603922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetAccountSendingEnabled_603921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603923 = query.getOrDefault("Action")
  valid_603923 = validateParameter(valid_603923, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_603923 != nil:
    section.add "Action", valid_603923
  var valid_603924 = query.getOrDefault("Version")
  valid_603924 = validateParameter(valid_603924, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603924 != nil:
    section.add "Version", valid_603924
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603925 = header.getOrDefault("X-Amz-Date")
  valid_603925 = validateParameter(valid_603925, JString, required = false,
                                 default = nil)
  if valid_603925 != nil:
    section.add "X-Amz-Date", valid_603925
  var valid_603926 = header.getOrDefault("X-Amz-Security-Token")
  valid_603926 = validateParameter(valid_603926, JString, required = false,
                                 default = nil)
  if valid_603926 != nil:
    section.add "X-Amz-Security-Token", valid_603926
  var valid_603927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603927 = validateParameter(valid_603927, JString, required = false,
                                 default = nil)
  if valid_603927 != nil:
    section.add "X-Amz-Content-Sha256", valid_603927
  var valid_603928 = header.getOrDefault("X-Amz-Algorithm")
  valid_603928 = validateParameter(valid_603928, JString, required = false,
                                 default = nil)
  if valid_603928 != nil:
    section.add "X-Amz-Algorithm", valid_603928
  var valid_603929 = header.getOrDefault("X-Amz-Signature")
  valid_603929 = validateParameter(valid_603929, JString, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "X-Amz-Signature", valid_603929
  var valid_603930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603930 = validateParameter(valid_603930, JString, required = false,
                                 default = nil)
  if valid_603930 != nil:
    section.add "X-Amz-SignedHeaders", valid_603930
  var valid_603931 = header.getOrDefault("X-Amz-Credential")
  valid_603931 = validateParameter(valid_603931, JString, required = false,
                                 default = nil)
  if valid_603931 != nil:
    section.add "X-Amz-Credential", valid_603931
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603932: Call_PostGetAccountSendingEnabled_603920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603932.validator(path, query, header, formData, body)
  let scheme = call_603932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603932.url(scheme.get, call_603932.host, call_603932.base,
                         call_603932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603932, url, valid)

proc call*(call_603933: Call_PostGetAccountSendingEnabled_603920;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603934 = newJObject()
  add(query_603934, "Action", newJString(Action))
  add(query_603934, "Version", newJString(Version))
  result = call_603933.call(nil, query_603934, nil, nil, nil)

var postGetAccountSendingEnabled* = Call_PostGetAccountSendingEnabled_603920(
    name: "postGetAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_PostGetAccountSendingEnabled_603921, base: "/",
    url: url_PostGetAccountSendingEnabled_603922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSendingEnabled_603905 = ref object of OpenApiRestCall_602466
proc url_GetGetAccountSendingEnabled_603907(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetAccountSendingEnabled_603906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603908 = query.getOrDefault("Action")
  valid_603908 = validateParameter(valid_603908, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_603908 != nil:
    section.add "Action", valid_603908
  var valid_603909 = query.getOrDefault("Version")
  valid_603909 = validateParameter(valid_603909, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603909 != nil:
    section.add "Version", valid_603909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603910 = header.getOrDefault("X-Amz-Date")
  valid_603910 = validateParameter(valid_603910, JString, required = false,
                                 default = nil)
  if valid_603910 != nil:
    section.add "X-Amz-Date", valid_603910
  var valid_603911 = header.getOrDefault("X-Amz-Security-Token")
  valid_603911 = validateParameter(valid_603911, JString, required = false,
                                 default = nil)
  if valid_603911 != nil:
    section.add "X-Amz-Security-Token", valid_603911
  var valid_603912 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603912 = validateParameter(valid_603912, JString, required = false,
                                 default = nil)
  if valid_603912 != nil:
    section.add "X-Amz-Content-Sha256", valid_603912
  var valid_603913 = header.getOrDefault("X-Amz-Algorithm")
  valid_603913 = validateParameter(valid_603913, JString, required = false,
                                 default = nil)
  if valid_603913 != nil:
    section.add "X-Amz-Algorithm", valid_603913
  var valid_603914 = header.getOrDefault("X-Amz-Signature")
  valid_603914 = validateParameter(valid_603914, JString, required = false,
                                 default = nil)
  if valid_603914 != nil:
    section.add "X-Amz-Signature", valid_603914
  var valid_603915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603915 = validateParameter(valid_603915, JString, required = false,
                                 default = nil)
  if valid_603915 != nil:
    section.add "X-Amz-SignedHeaders", valid_603915
  var valid_603916 = header.getOrDefault("X-Amz-Credential")
  valid_603916 = validateParameter(valid_603916, JString, required = false,
                                 default = nil)
  if valid_603916 != nil:
    section.add "X-Amz-Credential", valid_603916
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603917: Call_GetGetAccountSendingEnabled_603905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603917.validator(path, query, header, formData, body)
  let scheme = call_603917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603917.url(scheme.get, call_603917.host, call_603917.base,
                         call_603917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603917, url, valid)

proc call*(call_603918: Call_GetGetAccountSendingEnabled_603905;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603919 = newJObject()
  add(query_603919, "Action", newJString(Action))
  add(query_603919, "Version", newJString(Version))
  result = call_603918.call(nil, query_603919, nil, nil, nil)

var getGetAccountSendingEnabled* = Call_GetGetAccountSendingEnabled_603905(
    name: "getGetAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_GetGetAccountSendingEnabled_603906, base: "/",
    url: url_GetGetAccountSendingEnabled_603907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCustomVerificationEmailTemplate_603951 = ref object of OpenApiRestCall_602466
proc url_PostGetCustomVerificationEmailTemplate_603953(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetCustomVerificationEmailTemplate_603952(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603954 = query.getOrDefault("Action")
  valid_603954 = validateParameter(valid_603954, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_603954 != nil:
    section.add "Action", valid_603954
  var valid_603955 = query.getOrDefault("Version")
  valid_603955 = validateParameter(valid_603955, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603955 != nil:
    section.add "Version", valid_603955
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603956 = header.getOrDefault("X-Amz-Date")
  valid_603956 = validateParameter(valid_603956, JString, required = false,
                                 default = nil)
  if valid_603956 != nil:
    section.add "X-Amz-Date", valid_603956
  var valid_603957 = header.getOrDefault("X-Amz-Security-Token")
  valid_603957 = validateParameter(valid_603957, JString, required = false,
                                 default = nil)
  if valid_603957 != nil:
    section.add "X-Amz-Security-Token", valid_603957
  var valid_603958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603958 = validateParameter(valid_603958, JString, required = false,
                                 default = nil)
  if valid_603958 != nil:
    section.add "X-Amz-Content-Sha256", valid_603958
  var valid_603959 = header.getOrDefault("X-Amz-Algorithm")
  valid_603959 = validateParameter(valid_603959, JString, required = false,
                                 default = nil)
  if valid_603959 != nil:
    section.add "X-Amz-Algorithm", valid_603959
  var valid_603960 = header.getOrDefault("X-Amz-Signature")
  valid_603960 = validateParameter(valid_603960, JString, required = false,
                                 default = nil)
  if valid_603960 != nil:
    section.add "X-Amz-Signature", valid_603960
  var valid_603961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603961 = validateParameter(valid_603961, JString, required = false,
                                 default = nil)
  if valid_603961 != nil:
    section.add "X-Amz-SignedHeaders", valid_603961
  var valid_603962 = header.getOrDefault("X-Amz-Credential")
  valid_603962 = validateParameter(valid_603962, JString, required = false,
                                 default = nil)
  if valid_603962 != nil:
    section.add "X-Amz-Credential", valid_603962
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_603963 = formData.getOrDefault("TemplateName")
  valid_603963 = validateParameter(valid_603963, JString, required = true,
                                 default = nil)
  if valid_603963 != nil:
    section.add "TemplateName", valid_603963
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603964: Call_PostGetCustomVerificationEmailTemplate_603951;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603964.validator(path, query, header, formData, body)
  let scheme = call_603964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603964.url(scheme.get, call_603964.host, call_603964.base,
                         call_603964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603964, url, valid)

proc call*(call_603965: Call_PostGetCustomVerificationEmailTemplate_603951;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_603966 = newJObject()
  var formData_603967 = newJObject()
  add(query_603966, "Action", newJString(Action))
  add(formData_603967, "TemplateName", newJString(TemplateName))
  add(query_603966, "Version", newJString(Version))
  result = call_603965.call(nil, query_603966, nil, formData_603967, nil)

var postGetCustomVerificationEmailTemplate* = Call_PostGetCustomVerificationEmailTemplate_603951(
    name: "postGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_PostGetCustomVerificationEmailTemplate_603952, base: "/",
    url: url_PostGetCustomVerificationEmailTemplate_603953,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCustomVerificationEmailTemplate_603935 = ref object of OpenApiRestCall_602466
proc url_GetGetCustomVerificationEmailTemplate_603937(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetCustomVerificationEmailTemplate_603936(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603938 = query.getOrDefault("Action")
  valid_603938 = validateParameter(valid_603938, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_603938 != nil:
    section.add "Action", valid_603938
  var valid_603939 = query.getOrDefault("TemplateName")
  valid_603939 = validateParameter(valid_603939, JString, required = true,
                                 default = nil)
  if valid_603939 != nil:
    section.add "TemplateName", valid_603939
  var valid_603940 = query.getOrDefault("Version")
  valid_603940 = validateParameter(valid_603940, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603940 != nil:
    section.add "Version", valid_603940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603941 = header.getOrDefault("X-Amz-Date")
  valid_603941 = validateParameter(valid_603941, JString, required = false,
                                 default = nil)
  if valid_603941 != nil:
    section.add "X-Amz-Date", valid_603941
  var valid_603942 = header.getOrDefault("X-Amz-Security-Token")
  valid_603942 = validateParameter(valid_603942, JString, required = false,
                                 default = nil)
  if valid_603942 != nil:
    section.add "X-Amz-Security-Token", valid_603942
  var valid_603943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603943 = validateParameter(valid_603943, JString, required = false,
                                 default = nil)
  if valid_603943 != nil:
    section.add "X-Amz-Content-Sha256", valid_603943
  var valid_603944 = header.getOrDefault("X-Amz-Algorithm")
  valid_603944 = validateParameter(valid_603944, JString, required = false,
                                 default = nil)
  if valid_603944 != nil:
    section.add "X-Amz-Algorithm", valid_603944
  var valid_603945 = header.getOrDefault("X-Amz-Signature")
  valid_603945 = validateParameter(valid_603945, JString, required = false,
                                 default = nil)
  if valid_603945 != nil:
    section.add "X-Amz-Signature", valid_603945
  var valid_603946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603946 = validateParameter(valid_603946, JString, required = false,
                                 default = nil)
  if valid_603946 != nil:
    section.add "X-Amz-SignedHeaders", valid_603946
  var valid_603947 = header.getOrDefault("X-Amz-Credential")
  valid_603947 = validateParameter(valid_603947, JString, required = false,
                                 default = nil)
  if valid_603947 != nil:
    section.add "X-Amz-Credential", valid_603947
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603948: Call_GetGetCustomVerificationEmailTemplate_603935;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603948.validator(path, query, header, formData, body)
  let scheme = call_603948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603948.url(scheme.get, call_603948.host, call_603948.base,
                         call_603948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603948, url, valid)

proc call*(call_603949: Call_GetGetCustomVerificationEmailTemplate_603935;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_603950 = newJObject()
  add(query_603950, "Action", newJString(Action))
  add(query_603950, "TemplateName", newJString(TemplateName))
  add(query_603950, "Version", newJString(Version))
  result = call_603949.call(nil, query_603950, nil, nil, nil)

var getGetCustomVerificationEmailTemplate* = Call_GetGetCustomVerificationEmailTemplate_603935(
    name: "getGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_GetGetCustomVerificationEmailTemplate_603936, base: "/",
    url: url_GetGetCustomVerificationEmailTemplate_603937,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityDkimAttributes_603984 = ref object of OpenApiRestCall_602466
proc url_PostGetIdentityDkimAttributes_603986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetIdentityDkimAttributes_603985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603987 = query.getOrDefault("Action")
  valid_603987 = validateParameter(valid_603987, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_603987 != nil:
    section.add "Action", valid_603987
  var valid_603988 = query.getOrDefault("Version")
  valid_603988 = validateParameter(valid_603988, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603988 != nil:
    section.add "Version", valid_603988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603989 = header.getOrDefault("X-Amz-Date")
  valid_603989 = validateParameter(valid_603989, JString, required = false,
                                 default = nil)
  if valid_603989 != nil:
    section.add "X-Amz-Date", valid_603989
  var valid_603990 = header.getOrDefault("X-Amz-Security-Token")
  valid_603990 = validateParameter(valid_603990, JString, required = false,
                                 default = nil)
  if valid_603990 != nil:
    section.add "X-Amz-Security-Token", valid_603990
  var valid_603991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603991 = validateParameter(valid_603991, JString, required = false,
                                 default = nil)
  if valid_603991 != nil:
    section.add "X-Amz-Content-Sha256", valid_603991
  var valid_603992 = header.getOrDefault("X-Amz-Algorithm")
  valid_603992 = validateParameter(valid_603992, JString, required = false,
                                 default = nil)
  if valid_603992 != nil:
    section.add "X-Amz-Algorithm", valid_603992
  var valid_603993 = header.getOrDefault("X-Amz-Signature")
  valid_603993 = validateParameter(valid_603993, JString, required = false,
                                 default = nil)
  if valid_603993 != nil:
    section.add "X-Amz-Signature", valid_603993
  var valid_603994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603994 = validateParameter(valid_603994, JString, required = false,
                                 default = nil)
  if valid_603994 != nil:
    section.add "X-Amz-SignedHeaders", valid_603994
  var valid_603995 = header.getOrDefault("X-Amz-Credential")
  valid_603995 = validateParameter(valid_603995, JString, required = false,
                                 default = nil)
  if valid_603995 != nil:
    section.add "X-Amz-Credential", valid_603995
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_603996 = formData.getOrDefault("Identities")
  valid_603996 = validateParameter(valid_603996, JArray, required = true, default = nil)
  if valid_603996 != nil:
    section.add "Identities", valid_603996
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603997: Call_PostGetIdentityDkimAttributes_603984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603997.validator(path, query, header, formData, body)
  let scheme = call_603997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603997.url(scheme.get, call_603997.host, call_603997.base,
                         call_603997.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603997, url, valid)

proc call*(call_603998: Call_PostGetIdentityDkimAttributes_603984;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603999 = newJObject()
  var formData_604000 = newJObject()
  if Identities != nil:
    formData_604000.add "Identities", Identities
  add(query_603999, "Action", newJString(Action))
  add(query_603999, "Version", newJString(Version))
  result = call_603998.call(nil, query_603999, nil, formData_604000, nil)

var postGetIdentityDkimAttributes* = Call_PostGetIdentityDkimAttributes_603984(
    name: "postGetIdentityDkimAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_PostGetIdentityDkimAttributes_603985, base: "/",
    url: url_PostGetIdentityDkimAttributes_603986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityDkimAttributes_603968 = ref object of OpenApiRestCall_602466
proc url_GetGetIdentityDkimAttributes_603970(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetIdentityDkimAttributes_603969(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_603971 = query.getOrDefault("Identities")
  valid_603971 = validateParameter(valid_603971, JArray, required = true, default = nil)
  if valid_603971 != nil:
    section.add "Identities", valid_603971
  var valid_603972 = query.getOrDefault("Action")
  valid_603972 = validateParameter(valid_603972, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_603972 != nil:
    section.add "Action", valid_603972
  var valid_603973 = query.getOrDefault("Version")
  valid_603973 = validateParameter(valid_603973, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603973 != nil:
    section.add "Version", valid_603973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603974 = header.getOrDefault("X-Amz-Date")
  valid_603974 = validateParameter(valid_603974, JString, required = false,
                                 default = nil)
  if valid_603974 != nil:
    section.add "X-Amz-Date", valid_603974
  var valid_603975 = header.getOrDefault("X-Amz-Security-Token")
  valid_603975 = validateParameter(valid_603975, JString, required = false,
                                 default = nil)
  if valid_603975 != nil:
    section.add "X-Amz-Security-Token", valid_603975
  var valid_603976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603976 = validateParameter(valid_603976, JString, required = false,
                                 default = nil)
  if valid_603976 != nil:
    section.add "X-Amz-Content-Sha256", valid_603976
  var valid_603977 = header.getOrDefault("X-Amz-Algorithm")
  valid_603977 = validateParameter(valid_603977, JString, required = false,
                                 default = nil)
  if valid_603977 != nil:
    section.add "X-Amz-Algorithm", valid_603977
  var valid_603978 = header.getOrDefault("X-Amz-Signature")
  valid_603978 = validateParameter(valid_603978, JString, required = false,
                                 default = nil)
  if valid_603978 != nil:
    section.add "X-Amz-Signature", valid_603978
  var valid_603979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603979 = validateParameter(valid_603979, JString, required = false,
                                 default = nil)
  if valid_603979 != nil:
    section.add "X-Amz-SignedHeaders", valid_603979
  var valid_603980 = header.getOrDefault("X-Amz-Credential")
  valid_603980 = validateParameter(valid_603980, JString, required = false,
                                 default = nil)
  if valid_603980 != nil:
    section.add "X-Amz-Credential", valid_603980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603981: Call_GetGetIdentityDkimAttributes_603968; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603981.validator(path, query, header, formData, body)
  let scheme = call_603981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603981.url(scheme.get, call_603981.host, call_603981.base,
                         call_603981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603981, url, valid)

proc call*(call_603982: Call_GetGetIdentityDkimAttributes_603968;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603983 = newJObject()
  if Identities != nil:
    query_603983.add "Identities", Identities
  add(query_603983, "Action", newJString(Action))
  add(query_603983, "Version", newJString(Version))
  result = call_603982.call(nil, query_603983, nil, nil, nil)

var getGetIdentityDkimAttributes* = Call_GetGetIdentityDkimAttributes_603968(
    name: "getGetIdentityDkimAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_GetGetIdentityDkimAttributes_603969, base: "/",
    url: url_GetGetIdentityDkimAttributes_603970,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityMailFromDomainAttributes_604017 = ref object of OpenApiRestCall_602466
proc url_PostGetIdentityMailFromDomainAttributes_604019(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetIdentityMailFromDomainAttributes_604018(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604020 = query.getOrDefault("Action")
  valid_604020 = validateParameter(valid_604020, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_604020 != nil:
    section.add "Action", valid_604020
  var valid_604021 = query.getOrDefault("Version")
  valid_604021 = validateParameter(valid_604021, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604021 != nil:
    section.add "Version", valid_604021
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604022 = header.getOrDefault("X-Amz-Date")
  valid_604022 = validateParameter(valid_604022, JString, required = false,
                                 default = nil)
  if valid_604022 != nil:
    section.add "X-Amz-Date", valid_604022
  var valid_604023 = header.getOrDefault("X-Amz-Security-Token")
  valid_604023 = validateParameter(valid_604023, JString, required = false,
                                 default = nil)
  if valid_604023 != nil:
    section.add "X-Amz-Security-Token", valid_604023
  var valid_604024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604024 = validateParameter(valid_604024, JString, required = false,
                                 default = nil)
  if valid_604024 != nil:
    section.add "X-Amz-Content-Sha256", valid_604024
  var valid_604025 = header.getOrDefault("X-Amz-Algorithm")
  valid_604025 = validateParameter(valid_604025, JString, required = false,
                                 default = nil)
  if valid_604025 != nil:
    section.add "X-Amz-Algorithm", valid_604025
  var valid_604026 = header.getOrDefault("X-Amz-Signature")
  valid_604026 = validateParameter(valid_604026, JString, required = false,
                                 default = nil)
  if valid_604026 != nil:
    section.add "X-Amz-Signature", valid_604026
  var valid_604027 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604027 = validateParameter(valid_604027, JString, required = false,
                                 default = nil)
  if valid_604027 != nil:
    section.add "X-Amz-SignedHeaders", valid_604027
  var valid_604028 = header.getOrDefault("X-Amz-Credential")
  valid_604028 = validateParameter(valid_604028, JString, required = false,
                                 default = nil)
  if valid_604028 != nil:
    section.add "X-Amz-Credential", valid_604028
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_604029 = formData.getOrDefault("Identities")
  valid_604029 = validateParameter(valid_604029, JArray, required = true, default = nil)
  if valid_604029 != nil:
    section.add "Identities", valid_604029
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604030: Call_PostGetIdentityMailFromDomainAttributes_604017;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_604030.validator(path, query, header, formData, body)
  let scheme = call_604030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604030.url(scheme.get, call_604030.host, call_604030.base,
                         call_604030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604030, url, valid)

proc call*(call_604031: Call_PostGetIdentityMailFromDomainAttributes_604017;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604032 = newJObject()
  var formData_604033 = newJObject()
  if Identities != nil:
    formData_604033.add "Identities", Identities
  add(query_604032, "Action", newJString(Action))
  add(query_604032, "Version", newJString(Version))
  result = call_604031.call(nil, query_604032, nil, formData_604033, nil)

var postGetIdentityMailFromDomainAttributes* = Call_PostGetIdentityMailFromDomainAttributes_604017(
    name: "postGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_PostGetIdentityMailFromDomainAttributes_604018, base: "/",
    url: url_PostGetIdentityMailFromDomainAttributes_604019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityMailFromDomainAttributes_604001 = ref object of OpenApiRestCall_602466
proc url_GetGetIdentityMailFromDomainAttributes_604003(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetIdentityMailFromDomainAttributes_604002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_604004 = query.getOrDefault("Identities")
  valid_604004 = validateParameter(valid_604004, JArray, required = true, default = nil)
  if valid_604004 != nil:
    section.add "Identities", valid_604004
  var valid_604005 = query.getOrDefault("Action")
  valid_604005 = validateParameter(valid_604005, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_604005 != nil:
    section.add "Action", valid_604005
  var valid_604006 = query.getOrDefault("Version")
  valid_604006 = validateParameter(valid_604006, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604006 != nil:
    section.add "Version", valid_604006
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604007 = header.getOrDefault("X-Amz-Date")
  valid_604007 = validateParameter(valid_604007, JString, required = false,
                                 default = nil)
  if valid_604007 != nil:
    section.add "X-Amz-Date", valid_604007
  var valid_604008 = header.getOrDefault("X-Amz-Security-Token")
  valid_604008 = validateParameter(valid_604008, JString, required = false,
                                 default = nil)
  if valid_604008 != nil:
    section.add "X-Amz-Security-Token", valid_604008
  var valid_604009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604009 = validateParameter(valid_604009, JString, required = false,
                                 default = nil)
  if valid_604009 != nil:
    section.add "X-Amz-Content-Sha256", valid_604009
  var valid_604010 = header.getOrDefault("X-Amz-Algorithm")
  valid_604010 = validateParameter(valid_604010, JString, required = false,
                                 default = nil)
  if valid_604010 != nil:
    section.add "X-Amz-Algorithm", valid_604010
  var valid_604011 = header.getOrDefault("X-Amz-Signature")
  valid_604011 = validateParameter(valid_604011, JString, required = false,
                                 default = nil)
  if valid_604011 != nil:
    section.add "X-Amz-Signature", valid_604011
  var valid_604012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604012 = validateParameter(valid_604012, JString, required = false,
                                 default = nil)
  if valid_604012 != nil:
    section.add "X-Amz-SignedHeaders", valid_604012
  var valid_604013 = header.getOrDefault("X-Amz-Credential")
  valid_604013 = validateParameter(valid_604013, JString, required = false,
                                 default = nil)
  if valid_604013 != nil:
    section.add "X-Amz-Credential", valid_604013
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604014: Call_GetGetIdentityMailFromDomainAttributes_604001;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_604014.validator(path, query, header, formData, body)
  let scheme = call_604014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604014.url(scheme.get, call_604014.host, call_604014.base,
                         call_604014.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604014, url, valid)

proc call*(call_604015: Call_GetGetIdentityMailFromDomainAttributes_604001;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604016 = newJObject()
  if Identities != nil:
    query_604016.add "Identities", Identities
  add(query_604016, "Action", newJString(Action))
  add(query_604016, "Version", newJString(Version))
  result = call_604015.call(nil, query_604016, nil, nil, nil)

var getGetIdentityMailFromDomainAttributes* = Call_GetGetIdentityMailFromDomainAttributes_604001(
    name: "getGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_GetGetIdentityMailFromDomainAttributes_604002, base: "/",
    url: url_GetGetIdentityMailFromDomainAttributes_604003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityNotificationAttributes_604050 = ref object of OpenApiRestCall_602466
proc url_PostGetIdentityNotificationAttributes_604052(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetIdentityNotificationAttributes_604051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604053 = query.getOrDefault("Action")
  valid_604053 = validateParameter(valid_604053, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_604053 != nil:
    section.add "Action", valid_604053
  var valid_604054 = query.getOrDefault("Version")
  valid_604054 = validateParameter(valid_604054, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604054 != nil:
    section.add "Version", valid_604054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604055 = header.getOrDefault("X-Amz-Date")
  valid_604055 = validateParameter(valid_604055, JString, required = false,
                                 default = nil)
  if valid_604055 != nil:
    section.add "X-Amz-Date", valid_604055
  var valid_604056 = header.getOrDefault("X-Amz-Security-Token")
  valid_604056 = validateParameter(valid_604056, JString, required = false,
                                 default = nil)
  if valid_604056 != nil:
    section.add "X-Amz-Security-Token", valid_604056
  var valid_604057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604057 = validateParameter(valid_604057, JString, required = false,
                                 default = nil)
  if valid_604057 != nil:
    section.add "X-Amz-Content-Sha256", valid_604057
  var valid_604058 = header.getOrDefault("X-Amz-Algorithm")
  valid_604058 = validateParameter(valid_604058, JString, required = false,
                                 default = nil)
  if valid_604058 != nil:
    section.add "X-Amz-Algorithm", valid_604058
  var valid_604059 = header.getOrDefault("X-Amz-Signature")
  valid_604059 = validateParameter(valid_604059, JString, required = false,
                                 default = nil)
  if valid_604059 != nil:
    section.add "X-Amz-Signature", valid_604059
  var valid_604060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604060 = validateParameter(valid_604060, JString, required = false,
                                 default = nil)
  if valid_604060 != nil:
    section.add "X-Amz-SignedHeaders", valid_604060
  var valid_604061 = header.getOrDefault("X-Amz-Credential")
  valid_604061 = validateParameter(valid_604061, JString, required = false,
                                 default = nil)
  if valid_604061 != nil:
    section.add "X-Amz-Credential", valid_604061
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_604062 = formData.getOrDefault("Identities")
  valid_604062 = validateParameter(valid_604062, JArray, required = true, default = nil)
  if valid_604062 != nil:
    section.add "Identities", valid_604062
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604063: Call_PostGetIdentityNotificationAttributes_604050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604063.validator(path, query, header, formData, body)
  let scheme = call_604063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604063.url(scheme.get, call_604063.host, call_604063.base,
                         call_604063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604063, url, valid)

proc call*(call_604064: Call_PostGetIdentityNotificationAttributes_604050;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604065 = newJObject()
  var formData_604066 = newJObject()
  if Identities != nil:
    formData_604066.add "Identities", Identities
  add(query_604065, "Action", newJString(Action))
  add(query_604065, "Version", newJString(Version))
  result = call_604064.call(nil, query_604065, nil, formData_604066, nil)

var postGetIdentityNotificationAttributes* = Call_PostGetIdentityNotificationAttributes_604050(
    name: "postGetIdentityNotificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_PostGetIdentityNotificationAttributes_604051, base: "/",
    url: url_PostGetIdentityNotificationAttributes_604052,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityNotificationAttributes_604034 = ref object of OpenApiRestCall_602466
proc url_GetGetIdentityNotificationAttributes_604036(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetIdentityNotificationAttributes_604035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_604037 = query.getOrDefault("Identities")
  valid_604037 = validateParameter(valid_604037, JArray, required = true, default = nil)
  if valid_604037 != nil:
    section.add "Identities", valid_604037
  var valid_604038 = query.getOrDefault("Action")
  valid_604038 = validateParameter(valid_604038, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_604038 != nil:
    section.add "Action", valid_604038
  var valid_604039 = query.getOrDefault("Version")
  valid_604039 = validateParameter(valid_604039, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604039 != nil:
    section.add "Version", valid_604039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604040 = header.getOrDefault("X-Amz-Date")
  valid_604040 = validateParameter(valid_604040, JString, required = false,
                                 default = nil)
  if valid_604040 != nil:
    section.add "X-Amz-Date", valid_604040
  var valid_604041 = header.getOrDefault("X-Amz-Security-Token")
  valid_604041 = validateParameter(valid_604041, JString, required = false,
                                 default = nil)
  if valid_604041 != nil:
    section.add "X-Amz-Security-Token", valid_604041
  var valid_604042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604042 = validateParameter(valid_604042, JString, required = false,
                                 default = nil)
  if valid_604042 != nil:
    section.add "X-Amz-Content-Sha256", valid_604042
  var valid_604043 = header.getOrDefault("X-Amz-Algorithm")
  valid_604043 = validateParameter(valid_604043, JString, required = false,
                                 default = nil)
  if valid_604043 != nil:
    section.add "X-Amz-Algorithm", valid_604043
  var valid_604044 = header.getOrDefault("X-Amz-Signature")
  valid_604044 = validateParameter(valid_604044, JString, required = false,
                                 default = nil)
  if valid_604044 != nil:
    section.add "X-Amz-Signature", valid_604044
  var valid_604045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604045 = validateParameter(valid_604045, JString, required = false,
                                 default = nil)
  if valid_604045 != nil:
    section.add "X-Amz-SignedHeaders", valid_604045
  var valid_604046 = header.getOrDefault("X-Amz-Credential")
  valid_604046 = validateParameter(valid_604046, JString, required = false,
                                 default = nil)
  if valid_604046 != nil:
    section.add "X-Amz-Credential", valid_604046
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604047: Call_GetGetIdentityNotificationAttributes_604034;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604047.validator(path, query, header, formData, body)
  let scheme = call_604047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604047.url(scheme.get, call_604047.host, call_604047.base,
                         call_604047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604047, url, valid)

proc call*(call_604048: Call_GetGetIdentityNotificationAttributes_604034;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604049 = newJObject()
  if Identities != nil:
    query_604049.add "Identities", Identities
  add(query_604049, "Action", newJString(Action))
  add(query_604049, "Version", newJString(Version))
  result = call_604048.call(nil, query_604049, nil, nil, nil)

var getGetIdentityNotificationAttributes* = Call_GetGetIdentityNotificationAttributes_604034(
    name: "getGetIdentityNotificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_GetGetIdentityNotificationAttributes_604035, base: "/",
    url: url_GetGetIdentityNotificationAttributes_604036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityPolicies_604084 = ref object of OpenApiRestCall_602466
proc url_PostGetIdentityPolicies_604086(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetIdentityPolicies_604085(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604087 = query.getOrDefault("Action")
  valid_604087 = validateParameter(valid_604087, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_604087 != nil:
    section.add "Action", valid_604087
  var valid_604088 = query.getOrDefault("Version")
  valid_604088 = validateParameter(valid_604088, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604088 != nil:
    section.add "Version", valid_604088
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604089 = header.getOrDefault("X-Amz-Date")
  valid_604089 = validateParameter(valid_604089, JString, required = false,
                                 default = nil)
  if valid_604089 != nil:
    section.add "X-Amz-Date", valid_604089
  var valid_604090 = header.getOrDefault("X-Amz-Security-Token")
  valid_604090 = validateParameter(valid_604090, JString, required = false,
                                 default = nil)
  if valid_604090 != nil:
    section.add "X-Amz-Security-Token", valid_604090
  var valid_604091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604091 = validateParameter(valid_604091, JString, required = false,
                                 default = nil)
  if valid_604091 != nil:
    section.add "X-Amz-Content-Sha256", valid_604091
  var valid_604092 = header.getOrDefault("X-Amz-Algorithm")
  valid_604092 = validateParameter(valid_604092, JString, required = false,
                                 default = nil)
  if valid_604092 != nil:
    section.add "X-Amz-Algorithm", valid_604092
  var valid_604093 = header.getOrDefault("X-Amz-Signature")
  valid_604093 = validateParameter(valid_604093, JString, required = false,
                                 default = nil)
  if valid_604093 != nil:
    section.add "X-Amz-Signature", valid_604093
  var valid_604094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604094 = validateParameter(valid_604094, JString, required = false,
                                 default = nil)
  if valid_604094 != nil:
    section.add "X-Amz-SignedHeaders", valid_604094
  var valid_604095 = header.getOrDefault("X-Amz-Credential")
  valid_604095 = validateParameter(valid_604095, JString, required = false,
                                 default = nil)
  if valid_604095 != nil:
    section.add "X-Amz-Credential", valid_604095
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyNames` field"
  var valid_604096 = formData.getOrDefault("PolicyNames")
  valid_604096 = validateParameter(valid_604096, JArray, required = true, default = nil)
  if valid_604096 != nil:
    section.add "PolicyNames", valid_604096
  var valid_604097 = formData.getOrDefault("Identity")
  valid_604097 = validateParameter(valid_604097, JString, required = true,
                                 default = nil)
  if valid_604097 != nil:
    section.add "Identity", valid_604097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604098: Call_PostGetIdentityPolicies_604084; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604098.validator(path, query, header, formData, body)
  let scheme = call_604098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604098.url(scheme.get, call_604098.host, call_604098.base,
                         call_604098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604098, url, valid)

proc call*(call_604099: Call_PostGetIdentityPolicies_604084; PolicyNames: JsonNode;
          Identity: string; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604100 = newJObject()
  var formData_604101 = newJObject()
  if PolicyNames != nil:
    formData_604101.add "PolicyNames", PolicyNames
  add(formData_604101, "Identity", newJString(Identity))
  add(query_604100, "Action", newJString(Action))
  add(query_604100, "Version", newJString(Version))
  result = call_604099.call(nil, query_604100, nil, formData_604101, nil)

var postGetIdentityPolicies* = Call_PostGetIdentityPolicies_604084(
    name: "postGetIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_PostGetIdentityPolicies_604085, base: "/",
    url: url_PostGetIdentityPolicies_604086, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityPolicies_604067 = ref object of OpenApiRestCall_602466
proc url_GetGetIdentityPolicies_604069(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetIdentityPolicies_604068(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604070 = query.getOrDefault("Identity")
  valid_604070 = validateParameter(valid_604070, JString, required = true,
                                 default = nil)
  if valid_604070 != nil:
    section.add "Identity", valid_604070
  var valid_604071 = query.getOrDefault("Action")
  valid_604071 = validateParameter(valid_604071, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_604071 != nil:
    section.add "Action", valid_604071
  var valid_604072 = query.getOrDefault("PolicyNames")
  valid_604072 = validateParameter(valid_604072, JArray, required = true, default = nil)
  if valid_604072 != nil:
    section.add "PolicyNames", valid_604072
  var valid_604073 = query.getOrDefault("Version")
  valid_604073 = validateParameter(valid_604073, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604073 != nil:
    section.add "Version", valid_604073
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604074 = header.getOrDefault("X-Amz-Date")
  valid_604074 = validateParameter(valid_604074, JString, required = false,
                                 default = nil)
  if valid_604074 != nil:
    section.add "X-Amz-Date", valid_604074
  var valid_604075 = header.getOrDefault("X-Amz-Security-Token")
  valid_604075 = validateParameter(valid_604075, JString, required = false,
                                 default = nil)
  if valid_604075 != nil:
    section.add "X-Amz-Security-Token", valid_604075
  var valid_604076 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604076 = validateParameter(valid_604076, JString, required = false,
                                 default = nil)
  if valid_604076 != nil:
    section.add "X-Amz-Content-Sha256", valid_604076
  var valid_604077 = header.getOrDefault("X-Amz-Algorithm")
  valid_604077 = validateParameter(valid_604077, JString, required = false,
                                 default = nil)
  if valid_604077 != nil:
    section.add "X-Amz-Algorithm", valid_604077
  var valid_604078 = header.getOrDefault("X-Amz-Signature")
  valid_604078 = validateParameter(valid_604078, JString, required = false,
                                 default = nil)
  if valid_604078 != nil:
    section.add "X-Amz-Signature", valid_604078
  var valid_604079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604079 = validateParameter(valid_604079, JString, required = false,
                                 default = nil)
  if valid_604079 != nil:
    section.add "X-Amz-SignedHeaders", valid_604079
  var valid_604080 = header.getOrDefault("X-Amz-Credential")
  valid_604080 = validateParameter(valid_604080, JString, required = false,
                                 default = nil)
  if valid_604080 != nil:
    section.add "X-Amz-Credential", valid_604080
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604081: Call_GetGetIdentityPolicies_604067; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604081.validator(path, query, header, formData, body)
  let scheme = call_604081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604081.url(scheme.get, call_604081.host, call_604081.base,
                         call_604081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604081, url, valid)

proc call*(call_604082: Call_GetGetIdentityPolicies_604067; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: string (required)
  var query_604083 = newJObject()
  add(query_604083, "Identity", newJString(Identity))
  add(query_604083, "Action", newJString(Action))
  if PolicyNames != nil:
    query_604083.add "PolicyNames", PolicyNames
  add(query_604083, "Version", newJString(Version))
  result = call_604082.call(nil, query_604083, nil, nil, nil)

var getGetIdentityPolicies* = Call_GetGetIdentityPolicies_604067(
    name: "getGetIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_GetGetIdentityPolicies_604068, base: "/",
    url: url_GetGetIdentityPolicies_604069, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityVerificationAttributes_604118 = ref object of OpenApiRestCall_602466
proc url_PostGetIdentityVerificationAttributes_604120(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetIdentityVerificationAttributes_604119(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604121 = query.getOrDefault("Action")
  valid_604121 = validateParameter(valid_604121, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_604121 != nil:
    section.add "Action", valid_604121
  var valid_604122 = query.getOrDefault("Version")
  valid_604122 = validateParameter(valid_604122, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604122 != nil:
    section.add "Version", valid_604122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604123 = header.getOrDefault("X-Amz-Date")
  valid_604123 = validateParameter(valid_604123, JString, required = false,
                                 default = nil)
  if valid_604123 != nil:
    section.add "X-Amz-Date", valid_604123
  var valid_604124 = header.getOrDefault("X-Amz-Security-Token")
  valid_604124 = validateParameter(valid_604124, JString, required = false,
                                 default = nil)
  if valid_604124 != nil:
    section.add "X-Amz-Security-Token", valid_604124
  var valid_604125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604125 = validateParameter(valid_604125, JString, required = false,
                                 default = nil)
  if valid_604125 != nil:
    section.add "X-Amz-Content-Sha256", valid_604125
  var valid_604126 = header.getOrDefault("X-Amz-Algorithm")
  valid_604126 = validateParameter(valid_604126, JString, required = false,
                                 default = nil)
  if valid_604126 != nil:
    section.add "X-Amz-Algorithm", valid_604126
  var valid_604127 = header.getOrDefault("X-Amz-Signature")
  valid_604127 = validateParameter(valid_604127, JString, required = false,
                                 default = nil)
  if valid_604127 != nil:
    section.add "X-Amz-Signature", valid_604127
  var valid_604128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604128 = validateParameter(valid_604128, JString, required = false,
                                 default = nil)
  if valid_604128 != nil:
    section.add "X-Amz-SignedHeaders", valid_604128
  var valid_604129 = header.getOrDefault("X-Amz-Credential")
  valid_604129 = validateParameter(valid_604129, JString, required = false,
                                 default = nil)
  if valid_604129 != nil:
    section.add "X-Amz-Credential", valid_604129
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_604130 = formData.getOrDefault("Identities")
  valid_604130 = validateParameter(valid_604130, JArray, required = true, default = nil)
  if valid_604130 != nil:
    section.add "Identities", valid_604130
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604131: Call_PostGetIdentityVerificationAttributes_604118;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_604131.validator(path, query, header, formData, body)
  let scheme = call_604131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604131.url(scheme.get, call_604131.host, call_604131.base,
                         call_604131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604131, url, valid)

proc call*(call_604132: Call_PostGetIdentityVerificationAttributes_604118;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604133 = newJObject()
  var formData_604134 = newJObject()
  if Identities != nil:
    formData_604134.add "Identities", Identities
  add(query_604133, "Action", newJString(Action))
  add(query_604133, "Version", newJString(Version))
  result = call_604132.call(nil, query_604133, nil, formData_604134, nil)

var postGetIdentityVerificationAttributes* = Call_PostGetIdentityVerificationAttributes_604118(
    name: "postGetIdentityVerificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_PostGetIdentityVerificationAttributes_604119, base: "/",
    url: url_PostGetIdentityVerificationAttributes_604120,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityVerificationAttributes_604102 = ref object of OpenApiRestCall_602466
proc url_GetGetIdentityVerificationAttributes_604104(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetIdentityVerificationAttributes_604103(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_604105 = query.getOrDefault("Identities")
  valid_604105 = validateParameter(valid_604105, JArray, required = true, default = nil)
  if valid_604105 != nil:
    section.add "Identities", valid_604105
  var valid_604106 = query.getOrDefault("Action")
  valid_604106 = validateParameter(valid_604106, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_604106 != nil:
    section.add "Action", valid_604106
  var valid_604107 = query.getOrDefault("Version")
  valid_604107 = validateParameter(valid_604107, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604107 != nil:
    section.add "Version", valid_604107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604108 = header.getOrDefault("X-Amz-Date")
  valid_604108 = validateParameter(valid_604108, JString, required = false,
                                 default = nil)
  if valid_604108 != nil:
    section.add "X-Amz-Date", valid_604108
  var valid_604109 = header.getOrDefault("X-Amz-Security-Token")
  valid_604109 = validateParameter(valid_604109, JString, required = false,
                                 default = nil)
  if valid_604109 != nil:
    section.add "X-Amz-Security-Token", valid_604109
  var valid_604110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604110 = validateParameter(valid_604110, JString, required = false,
                                 default = nil)
  if valid_604110 != nil:
    section.add "X-Amz-Content-Sha256", valid_604110
  var valid_604111 = header.getOrDefault("X-Amz-Algorithm")
  valid_604111 = validateParameter(valid_604111, JString, required = false,
                                 default = nil)
  if valid_604111 != nil:
    section.add "X-Amz-Algorithm", valid_604111
  var valid_604112 = header.getOrDefault("X-Amz-Signature")
  valid_604112 = validateParameter(valid_604112, JString, required = false,
                                 default = nil)
  if valid_604112 != nil:
    section.add "X-Amz-Signature", valid_604112
  var valid_604113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604113 = validateParameter(valid_604113, JString, required = false,
                                 default = nil)
  if valid_604113 != nil:
    section.add "X-Amz-SignedHeaders", valid_604113
  var valid_604114 = header.getOrDefault("X-Amz-Credential")
  valid_604114 = validateParameter(valid_604114, JString, required = false,
                                 default = nil)
  if valid_604114 != nil:
    section.add "X-Amz-Credential", valid_604114
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604115: Call_GetGetIdentityVerificationAttributes_604102;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_604115.validator(path, query, header, formData, body)
  let scheme = call_604115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604115.url(scheme.get, call_604115.host, call_604115.base,
                         call_604115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604115, url, valid)

proc call*(call_604116: Call_GetGetIdentityVerificationAttributes_604102;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604117 = newJObject()
  if Identities != nil:
    query_604117.add "Identities", Identities
  add(query_604117, "Action", newJString(Action))
  add(query_604117, "Version", newJString(Version))
  result = call_604116.call(nil, query_604117, nil, nil, nil)

var getGetIdentityVerificationAttributes* = Call_GetGetIdentityVerificationAttributes_604102(
    name: "getGetIdentityVerificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_GetGetIdentityVerificationAttributes_604103, base: "/",
    url: url_GetGetIdentityVerificationAttributes_604104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendQuota_604150 = ref object of OpenApiRestCall_602466
proc url_PostGetSendQuota_604152(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetSendQuota_604151(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604153 = query.getOrDefault("Action")
  valid_604153 = validateParameter(valid_604153, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_604153 != nil:
    section.add "Action", valid_604153
  var valid_604154 = query.getOrDefault("Version")
  valid_604154 = validateParameter(valid_604154, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604154 != nil:
    section.add "Version", valid_604154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604155 = header.getOrDefault("X-Amz-Date")
  valid_604155 = validateParameter(valid_604155, JString, required = false,
                                 default = nil)
  if valid_604155 != nil:
    section.add "X-Amz-Date", valid_604155
  var valid_604156 = header.getOrDefault("X-Amz-Security-Token")
  valid_604156 = validateParameter(valid_604156, JString, required = false,
                                 default = nil)
  if valid_604156 != nil:
    section.add "X-Amz-Security-Token", valid_604156
  var valid_604157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604157 = validateParameter(valid_604157, JString, required = false,
                                 default = nil)
  if valid_604157 != nil:
    section.add "X-Amz-Content-Sha256", valid_604157
  var valid_604158 = header.getOrDefault("X-Amz-Algorithm")
  valid_604158 = validateParameter(valid_604158, JString, required = false,
                                 default = nil)
  if valid_604158 != nil:
    section.add "X-Amz-Algorithm", valid_604158
  var valid_604159 = header.getOrDefault("X-Amz-Signature")
  valid_604159 = validateParameter(valid_604159, JString, required = false,
                                 default = nil)
  if valid_604159 != nil:
    section.add "X-Amz-Signature", valid_604159
  var valid_604160 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604160 = validateParameter(valid_604160, JString, required = false,
                                 default = nil)
  if valid_604160 != nil:
    section.add "X-Amz-SignedHeaders", valid_604160
  var valid_604161 = header.getOrDefault("X-Amz-Credential")
  valid_604161 = validateParameter(valid_604161, JString, required = false,
                                 default = nil)
  if valid_604161 != nil:
    section.add "X-Amz-Credential", valid_604161
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604162: Call_PostGetSendQuota_604150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604162.validator(path, query, header, formData, body)
  let scheme = call_604162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604162.url(scheme.get, call_604162.host, call_604162.base,
                         call_604162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604162, url, valid)

proc call*(call_604163: Call_PostGetSendQuota_604150;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604164 = newJObject()
  add(query_604164, "Action", newJString(Action))
  add(query_604164, "Version", newJString(Version))
  result = call_604163.call(nil, query_604164, nil, nil, nil)

var postGetSendQuota* = Call_PostGetSendQuota_604150(name: "postGetSendQuota",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_PostGetSendQuota_604151,
    base: "/", url: url_PostGetSendQuota_604152,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendQuota_604135 = ref object of OpenApiRestCall_602466
proc url_GetGetSendQuota_604137(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetSendQuota_604136(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604138 = query.getOrDefault("Action")
  valid_604138 = validateParameter(valid_604138, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_604138 != nil:
    section.add "Action", valid_604138
  var valid_604139 = query.getOrDefault("Version")
  valid_604139 = validateParameter(valid_604139, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604139 != nil:
    section.add "Version", valid_604139
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604140 = header.getOrDefault("X-Amz-Date")
  valid_604140 = validateParameter(valid_604140, JString, required = false,
                                 default = nil)
  if valid_604140 != nil:
    section.add "X-Amz-Date", valid_604140
  var valid_604141 = header.getOrDefault("X-Amz-Security-Token")
  valid_604141 = validateParameter(valid_604141, JString, required = false,
                                 default = nil)
  if valid_604141 != nil:
    section.add "X-Amz-Security-Token", valid_604141
  var valid_604142 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604142 = validateParameter(valid_604142, JString, required = false,
                                 default = nil)
  if valid_604142 != nil:
    section.add "X-Amz-Content-Sha256", valid_604142
  var valid_604143 = header.getOrDefault("X-Amz-Algorithm")
  valid_604143 = validateParameter(valid_604143, JString, required = false,
                                 default = nil)
  if valid_604143 != nil:
    section.add "X-Amz-Algorithm", valid_604143
  var valid_604144 = header.getOrDefault("X-Amz-Signature")
  valid_604144 = validateParameter(valid_604144, JString, required = false,
                                 default = nil)
  if valid_604144 != nil:
    section.add "X-Amz-Signature", valid_604144
  var valid_604145 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604145 = validateParameter(valid_604145, JString, required = false,
                                 default = nil)
  if valid_604145 != nil:
    section.add "X-Amz-SignedHeaders", valid_604145
  var valid_604146 = header.getOrDefault("X-Amz-Credential")
  valid_604146 = validateParameter(valid_604146, JString, required = false,
                                 default = nil)
  if valid_604146 != nil:
    section.add "X-Amz-Credential", valid_604146
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604147: Call_GetGetSendQuota_604135; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604147.validator(path, query, header, formData, body)
  let scheme = call_604147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604147.url(scheme.get, call_604147.host, call_604147.base,
                         call_604147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604147, url, valid)

proc call*(call_604148: Call_GetGetSendQuota_604135;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604149 = newJObject()
  add(query_604149, "Action", newJString(Action))
  add(query_604149, "Version", newJString(Version))
  result = call_604148.call(nil, query_604149, nil, nil, nil)

var getGetSendQuota* = Call_GetGetSendQuota_604135(name: "getGetSendQuota",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_GetGetSendQuota_604136,
    base: "/", url: url_GetGetSendQuota_604137, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendStatistics_604180 = ref object of OpenApiRestCall_602466
proc url_PostGetSendStatistics_604182(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetSendStatistics_604181(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604183 = query.getOrDefault("Action")
  valid_604183 = validateParameter(valid_604183, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_604183 != nil:
    section.add "Action", valid_604183
  var valid_604184 = query.getOrDefault("Version")
  valid_604184 = validateParameter(valid_604184, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604184 != nil:
    section.add "Version", valid_604184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604185 = header.getOrDefault("X-Amz-Date")
  valid_604185 = validateParameter(valid_604185, JString, required = false,
                                 default = nil)
  if valid_604185 != nil:
    section.add "X-Amz-Date", valid_604185
  var valid_604186 = header.getOrDefault("X-Amz-Security-Token")
  valid_604186 = validateParameter(valid_604186, JString, required = false,
                                 default = nil)
  if valid_604186 != nil:
    section.add "X-Amz-Security-Token", valid_604186
  var valid_604187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604187 = validateParameter(valid_604187, JString, required = false,
                                 default = nil)
  if valid_604187 != nil:
    section.add "X-Amz-Content-Sha256", valid_604187
  var valid_604188 = header.getOrDefault("X-Amz-Algorithm")
  valid_604188 = validateParameter(valid_604188, JString, required = false,
                                 default = nil)
  if valid_604188 != nil:
    section.add "X-Amz-Algorithm", valid_604188
  var valid_604189 = header.getOrDefault("X-Amz-Signature")
  valid_604189 = validateParameter(valid_604189, JString, required = false,
                                 default = nil)
  if valid_604189 != nil:
    section.add "X-Amz-Signature", valid_604189
  var valid_604190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604190 = validateParameter(valid_604190, JString, required = false,
                                 default = nil)
  if valid_604190 != nil:
    section.add "X-Amz-SignedHeaders", valid_604190
  var valid_604191 = header.getOrDefault("X-Amz-Credential")
  valid_604191 = validateParameter(valid_604191, JString, required = false,
                                 default = nil)
  if valid_604191 != nil:
    section.add "X-Amz-Credential", valid_604191
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604192: Call_PostGetSendStatistics_604180; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604192.validator(path, query, header, formData, body)
  let scheme = call_604192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604192.url(scheme.get, call_604192.host, call_604192.base,
                         call_604192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604192, url, valid)

proc call*(call_604193: Call_PostGetSendStatistics_604180;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604194 = newJObject()
  add(query_604194, "Action", newJString(Action))
  add(query_604194, "Version", newJString(Version))
  result = call_604193.call(nil, query_604194, nil, nil, nil)

var postGetSendStatistics* = Call_PostGetSendStatistics_604180(
    name: "postGetSendStatistics", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_PostGetSendStatistics_604181, base: "/",
    url: url_PostGetSendStatistics_604182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendStatistics_604165 = ref object of OpenApiRestCall_602466
proc url_GetGetSendStatistics_604167(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetSendStatistics_604166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604168 = query.getOrDefault("Action")
  valid_604168 = validateParameter(valid_604168, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_604168 != nil:
    section.add "Action", valid_604168
  var valid_604169 = query.getOrDefault("Version")
  valid_604169 = validateParameter(valid_604169, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604169 != nil:
    section.add "Version", valid_604169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604170 = header.getOrDefault("X-Amz-Date")
  valid_604170 = validateParameter(valid_604170, JString, required = false,
                                 default = nil)
  if valid_604170 != nil:
    section.add "X-Amz-Date", valid_604170
  var valid_604171 = header.getOrDefault("X-Amz-Security-Token")
  valid_604171 = validateParameter(valid_604171, JString, required = false,
                                 default = nil)
  if valid_604171 != nil:
    section.add "X-Amz-Security-Token", valid_604171
  var valid_604172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604172 = validateParameter(valid_604172, JString, required = false,
                                 default = nil)
  if valid_604172 != nil:
    section.add "X-Amz-Content-Sha256", valid_604172
  var valid_604173 = header.getOrDefault("X-Amz-Algorithm")
  valid_604173 = validateParameter(valid_604173, JString, required = false,
                                 default = nil)
  if valid_604173 != nil:
    section.add "X-Amz-Algorithm", valid_604173
  var valid_604174 = header.getOrDefault("X-Amz-Signature")
  valid_604174 = validateParameter(valid_604174, JString, required = false,
                                 default = nil)
  if valid_604174 != nil:
    section.add "X-Amz-Signature", valid_604174
  var valid_604175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604175 = validateParameter(valid_604175, JString, required = false,
                                 default = nil)
  if valid_604175 != nil:
    section.add "X-Amz-SignedHeaders", valid_604175
  var valid_604176 = header.getOrDefault("X-Amz-Credential")
  valid_604176 = validateParameter(valid_604176, JString, required = false,
                                 default = nil)
  if valid_604176 != nil:
    section.add "X-Amz-Credential", valid_604176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604177: Call_GetGetSendStatistics_604165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604177.validator(path, query, header, formData, body)
  let scheme = call_604177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604177.url(scheme.get, call_604177.host, call_604177.base,
                         call_604177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604177, url, valid)

proc call*(call_604178: Call_GetGetSendStatistics_604165;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604179 = newJObject()
  add(query_604179, "Action", newJString(Action))
  add(query_604179, "Version", newJString(Version))
  result = call_604178.call(nil, query_604179, nil, nil, nil)

var getGetSendStatistics* = Call_GetGetSendStatistics_604165(
    name: "getGetSendStatistics", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_GetGetSendStatistics_604166, base: "/",
    url: url_GetGetSendStatistics_604167, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetTemplate_604211 = ref object of OpenApiRestCall_602466
proc url_PostGetTemplate_604213(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetTemplate_604212(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604214 = query.getOrDefault("Action")
  valid_604214 = validateParameter(valid_604214, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_604214 != nil:
    section.add "Action", valid_604214
  var valid_604215 = query.getOrDefault("Version")
  valid_604215 = validateParameter(valid_604215, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604215 != nil:
    section.add "Version", valid_604215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604216 = header.getOrDefault("X-Amz-Date")
  valid_604216 = validateParameter(valid_604216, JString, required = false,
                                 default = nil)
  if valid_604216 != nil:
    section.add "X-Amz-Date", valid_604216
  var valid_604217 = header.getOrDefault("X-Amz-Security-Token")
  valid_604217 = validateParameter(valid_604217, JString, required = false,
                                 default = nil)
  if valid_604217 != nil:
    section.add "X-Amz-Security-Token", valid_604217
  var valid_604218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604218 = validateParameter(valid_604218, JString, required = false,
                                 default = nil)
  if valid_604218 != nil:
    section.add "X-Amz-Content-Sha256", valid_604218
  var valid_604219 = header.getOrDefault("X-Amz-Algorithm")
  valid_604219 = validateParameter(valid_604219, JString, required = false,
                                 default = nil)
  if valid_604219 != nil:
    section.add "X-Amz-Algorithm", valid_604219
  var valid_604220 = header.getOrDefault("X-Amz-Signature")
  valid_604220 = validateParameter(valid_604220, JString, required = false,
                                 default = nil)
  if valid_604220 != nil:
    section.add "X-Amz-Signature", valid_604220
  var valid_604221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604221 = validateParameter(valid_604221, JString, required = false,
                                 default = nil)
  if valid_604221 != nil:
    section.add "X-Amz-SignedHeaders", valid_604221
  var valid_604222 = header.getOrDefault("X-Amz-Credential")
  valid_604222 = validateParameter(valid_604222, JString, required = false,
                                 default = nil)
  if valid_604222 != nil:
    section.add "X-Amz-Credential", valid_604222
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_604223 = formData.getOrDefault("TemplateName")
  valid_604223 = validateParameter(valid_604223, JString, required = true,
                                 default = nil)
  if valid_604223 != nil:
    section.add "TemplateName", valid_604223
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604224: Call_PostGetTemplate_604211; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604224.validator(path, query, header, formData, body)
  let scheme = call_604224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604224.url(scheme.get, call_604224.host, call_604224.base,
                         call_604224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604224, url, valid)

proc call*(call_604225: Call_PostGetTemplate_604211; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_604226 = newJObject()
  var formData_604227 = newJObject()
  add(query_604226, "Action", newJString(Action))
  add(formData_604227, "TemplateName", newJString(TemplateName))
  add(query_604226, "Version", newJString(Version))
  result = call_604225.call(nil, query_604226, nil, formData_604227, nil)

var postGetTemplate* = Call_PostGetTemplate_604211(name: "postGetTemplate",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_PostGetTemplate_604212,
    base: "/", url: url_PostGetTemplate_604213, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetTemplate_604195 = ref object of OpenApiRestCall_602466
proc url_GetGetTemplate_604197(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetTemplate_604196(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604198 = query.getOrDefault("Action")
  valid_604198 = validateParameter(valid_604198, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_604198 != nil:
    section.add "Action", valid_604198
  var valid_604199 = query.getOrDefault("TemplateName")
  valid_604199 = validateParameter(valid_604199, JString, required = true,
                                 default = nil)
  if valid_604199 != nil:
    section.add "TemplateName", valid_604199
  var valid_604200 = query.getOrDefault("Version")
  valid_604200 = validateParameter(valid_604200, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604200 != nil:
    section.add "Version", valid_604200
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604201 = header.getOrDefault("X-Amz-Date")
  valid_604201 = validateParameter(valid_604201, JString, required = false,
                                 default = nil)
  if valid_604201 != nil:
    section.add "X-Amz-Date", valid_604201
  var valid_604202 = header.getOrDefault("X-Amz-Security-Token")
  valid_604202 = validateParameter(valid_604202, JString, required = false,
                                 default = nil)
  if valid_604202 != nil:
    section.add "X-Amz-Security-Token", valid_604202
  var valid_604203 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604203 = validateParameter(valid_604203, JString, required = false,
                                 default = nil)
  if valid_604203 != nil:
    section.add "X-Amz-Content-Sha256", valid_604203
  var valid_604204 = header.getOrDefault("X-Amz-Algorithm")
  valid_604204 = validateParameter(valid_604204, JString, required = false,
                                 default = nil)
  if valid_604204 != nil:
    section.add "X-Amz-Algorithm", valid_604204
  var valid_604205 = header.getOrDefault("X-Amz-Signature")
  valid_604205 = validateParameter(valid_604205, JString, required = false,
                                 default = nil)
  if valid_604205 != nil:
    section.add "X-Amz-Signature", valid_604205
  var valid_604206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604206 = validateParameter(valid_604206, JString, required = false,
                                 default = nil)
  if valid_604206 != nil:
    section.add "X-Amz-SignedHeaders", valid_604206
  var valid_604207 = header.getOrDefault("X-Amz-Credential")
  valid_604207 = validateParameter(valid_604207, JString, required = false,
                                 default = nil)
  if valid_604207 != nil:
    section.add "X-Amz-Credential", valid_604207
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604208: Call_GetGetTemplate_604195; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604208.validator(path, query, header, formData, body)
  let scheme = call_604208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604208.url(scheme.get, call_604208.host, call_604208.base,
                         call_604208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604208, url, valid)

proc call*(call_604209: Call_GetGetTemplate_604195; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_604210 = newJObject()
  add(query_604210, "Action", newJString(Action))
  add(query_604210, "TemplateName", newJString(TemplateName))
  add(query_604210, "Version", newJString(Version))
  result = call_604209.call(nil, query_604210, nil, nil, nil)

var getGetTemplate* = Call_GetGetTemplate_604195(name: "getGetTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_GetGetTemplate_604196,
    base: "/", url: url_GetGetTemplate_604197, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListConfigurationSets_604245 = ref object of OpenApiRestCall_602466
proc url_PostListConfigurationSets_604247(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListConfigurationSets_604246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604248 = query.getOrDefault("Action")
  valid_604248 = validateParameter(valid_604248, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_604248 != nil:
    section.add "Action", valid_604248
  var valid_604249 = query.getOrDefault("Version")
  valid_604249 = validateParameter(valid_604249, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604249 != nil:
    section.add "Version", valid_604249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604250 = header.getOrDefault("X-Amz-Date")
  valid_604250 = validateParameter(valid_604250, JString, required = false,
                                 default = nil)
  if valid_604250 != nil:
    section.add "X-Amz-Date", valid_604250
  var valid_604251 = header.getOrDefault("X-Amz-Security-Token")
  valid_604251 = validateParameter(valid_604251, JString, required = false,
                                 default = nil)
  if valid_604251 != nil:
    section.add "X-Amz-Security-Token", valid_604251
  var valid_604252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604252 = validateParameter(valid_604252, JString, required = false,
                                 default = nil)
  if valid_604252 != nil:
    section.add "X-Amz-Content-Sha256", valid_604252
  var valid_604253 = header.getOrDefault("X-Amz-Algorithm")
  valid_604253 = validateParameter(valid_604253, JString, required = false,
                                 default = nil)
  if valid_604253 != nil:
    section.add "X-Amz-Algorithm", valid_604253
  var valid_604254 = header.getOrDefault("X-Amz-Signature")
  valid_604254 = validateParameter(valid_604254, JString, required = false,
                                 default = nil)
  if valid_604254 != nil:
    section.add "X-Amz-Signature", valid_604254
  var valid_604255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604255 = validateParameter(valid_604255, JString, required = false,
                                 default = nil)
  if valid_604255 != nil:
    section.add "X-Amz-SignedHeaders", valid_604255
  var valid_604256 = header.getOrDefault("X-Amz-Credential")
  valid_604256 = validateParameter(valid_604256, JString, required = false,
                                 default = nil)
  if valid_604256 != nil:
    section.add "X-Amz-Credential", valid_604256
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  section = newJObject()
  var valid_604257 = formData.getOrDefault("NextToken")
  valid_604257 = validateParameter(valid_604257, JString, required = false,
                                 default = nil)
  if valid_604257 != nil:
    section.add "NextToken", valid_604257
  var valid_604258 = formData.getOrDefault("MaxItems")
  valid_604258 = validateParameter(valid_604258, JInt, required = false, default = nil)
  if valid_604258 != nil:
    section.add "MaxItems", valid_604258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604259: Call_PostListConfigurationSets_604245; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_604259.validator(path, query, header, formData, body)
  let scheme = call_604259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604259.url(scheme.get, call_604259.host, call_604259.base,
                         call_604259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604259, url, valid)

proc call*(call_604260: Call_PostListConfigurationSets_604245;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_604261 = newJObject()
  var formData_604262 = newJObject()
  add(formData_604262, "NextToken", newJString(NextToken))
  add(query_604261, "Action", newJString(Action))
  add(formData_604262, "MaxItems", newJInt(MaxItems))
  add(query_604261, "Version", newJString(Version))
  result = call_604260.call(nil, query_604261, nil, formData_604262, nil)

var postListConfigurationSets* = Call_PostListConfigurationSets_604245(
    name: "postListConfigurationSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_PostListConfigurationSets_604246, base: "/",
    url: url_PostListConfigurationSets_604247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListConfigurationSets_604228 = ref object of OpenApiRestCall_602466
proc url_GetListConfigurationSets_604230(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListConfigurationSets_604229(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604231 = query.getOrDefault("NextToken")
  valid_604231 = validateParameter(valid_604231, JString, required = false,
                                 default = nil)
  if valid_604231 != nil:
    section.add "NextToken", valid_604231
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604232 = query.getOrDefault("Action")
  valid_604232 = validateParameter(valid_604232, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_604232 != nil:
    section.add "Action", valid_604232
  var valid_604233 = query.getOrDefault("MaxItems")
  valid_604233 = validateParameter(valid_604233, JInt, required = false, default = nil)
  if valid_604233 != nil:
    section.add "MaxItems", valid_604233
  var valid_604234 = query.getOrDefault("Version")
  valid_604234 = validateParameter(valid_604234, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604234 != nil:
    section.add "Version", valid_604234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604235 = header.getOrDefault("X-Amz-Date")
  valid_604235 = validateParameter(valid_604235, JString, required = false,
                                 default = nil)
  if valid_604235 != nil:
    section.add "X-Amz-Date", valid_604235
  var valid_604236 = header.getOrDefault("X-Amz-Security-Token")
  valid_604236 = validateParameter(valid_604236, JString, required = false,
                                 default = nil)
  if valid_604236 != nil:
    section.add "X-Amz-Security-Token", valid_604236
  var valid_604237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604237 = validateParameter(valid_604237, JString, required = false,
                                 default = nil)
  if valid_604237 != nil:
    section.add "X-Amz-Content-Sha256", valid_604237
  var valid_604238 = header.getOrDefault("X-Amz-Algorithm")
  valid_604238 = validateParameter(valid_604238, JString, required = false,
                                 default = nil)
  if valid_604238 != nil:
    section.add "X-Amz-Algorithm", valid_604238
  var valid_604239 = header.getOrDefault("X-Amz-Signature")
  valid_604239 = validateParameter(valid_604239, JString, required = false,
                                 default = nil)
  if valid_604239 != nil:
    section.add "X-Amz-Signature", valid_604239
  var valid_604240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604240 = validateParameter(valid_604240, JString, required = false,
                                 default = nil)
  if valid_604240 != nil:
    section.add "X-Amz-SignedHeaders", valid_604240
  var valid_604241 = header.getOrDefault("X-Amz-Credential")
  valid_604241 = validateParameter(valid_604241, JString, required = false,
                                 default = nil)
  if valid_604241 != nil:
    section.add "X-Amz-Credential", valid_604241
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604242: Call_GetListConfigurationSets_604228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_604242.validator(path, query, header, formData, body)
  let scheme = call_604242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604242.url(scheme.get, call_604242.host, call_604242.base,
                         call_604242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604242, url, valid)

proc call*(call_604243: Call_GetListConfigurationSets_604228;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_604244 = newJObject()
  add(query_604244, "NextToken", newJString(NextToken))
  add(query_604244, "Action", newJString(Action))
  add(query_604244, "MaxItems", newJInt(MaxItems))
  add(query_604244, "Version", newJString(Version))
  result = call_604243.call(nil, query_604244, nil, nil, nil)

var getListConfigurationSets* = Call_GetListConfigurationSets_604228(
    name: "getListConfigurationSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_GetListConfigurationSets_604229, base: "/",
    url: url_GetListConfigurationSets_604230, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListCustomVerificationEmailTemplates_604280 = ref object of OpenApiRestCall_602466
proc url_PostListCustomVerificationEmailTemplates_604282(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListCustomVerificationEmailTemplates_604281(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604283 = query.getOrDefault("Action")
  valid_604283 = validateParameter(valid_604283, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_604283 != nil:
    section.add "Action", valid_604283
  var valid_604284 = query.getOrDefault("Version")
  valid_604284 = validateParameter(valid_604284, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604284 != nil:
    section.add "Version", valid_604284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604285 = header.getOrDefault("X-Amz-Date")
  valid_604285 = validateParameter(valid_604285, JString, required = false,
                                 default = nil)
  if valid_604285 != nil:
    section.add "X-Amz-Date", valid_604285
  var valid_604286 = header.getOrDefault("X-Amz-Security-Token")
  valid_604286 = validateParameter(valid_604286, JString, required = false,
                                 default = nil)
  if valid_604286 != nil:
    section.add "X-Amz-Security-Token", valid_604286
  var valid_604287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604287 = validateParameter(valid_604287, JString, required = false,
                                 default = nil)
  if valid_604287 != nil:
    section.add "X-Amz-Content-Sha256", valid_604287
  var valid_604288 = header.getOrDefault("X-Amz-Algorithm")
  valid_604288 = validateParameter(valid_604288, JString, required = false,
                                 default = nil)
  if valid_604288 != nil:
    section.add "X-Amz-Algorithm", valid_604288
  var valid_604289 = header.getOrDefault("X-Amz-Signature")
  valid_604289 = validateParameter(valid_604289, JString, required = false,
                                 default = nil)
  if valid_604289 != nil:
    section.add "X-Amz-Signature", valid_604289
  var valid_604290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604290 = validateParameter(valid_604290, JString, required = false,
                                 default = nil)
  if valid_604290 != nil:
    section.add "X-Amz-SignedHeaders", valid_604290
  var valid_604291 = header.getOrDefault("X-Amz-Credential")
  valid_604291 = validateParameter(valid_604291, JString, required = false,
                                 default = nil)
  if valid_604291 != nil:
    section.add "X-Amz-Credential", valid_604291
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_604292 = formData.getOrDefault("NextToken")
  valid_604292 = validateParameter(valid_604292, JString, required = false,
                                 default = nil)
  if valid_604292 != nil:
    section.add "NextToken", valid_604292
  var valid_604293 = formData.getOrDefault("MaxResults")
  valid_604293 = validateParameter(valid_604293, JInt, required = false, default = nil)
  if valid_604293 != nil:
    section.add "MaxResults", valid_604293
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604294: Call_PostListCustomVerificationEmailTemplates_604280;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604294.validator(path, query, header, formData, body)
  let scheme = call_604294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604294.url(scheme.get, call_604294.host, call_604294.base,
                         call_604294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604294, url, valid)

proc call*(call_604295: Call_PostListCustomVerificationEmailTemplates_604280;
          NextToken: string = ""; MaxResults: int = 0;
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## postListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604296 = newJObject()
  var formData_604297 = newJObject()
  add(formData_604297, "NextToken", newJString(NextToken))
  add(formData_604297, "MaxResults", newJInt(MaxResults))
  add(query_604296, "Action", newJString(Action))
  add(query_604296, "Version", newJString(Version))
  result = call_604295.call(nil, query_604296, nil, formData_604297, nil)

var postListCustomVerificationEmailTemplates* = Call_PostListCustomVerificationEmailTemplates_604280(
    name: "postListCustomVerificationEmailTemplates", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_PostListCustomVerificationEmailTemplates_604281,
    base: "/", url: url_PostListCustomVerificationEmailTemplates_604282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListCustomVerificationEmailTemplates_604263 = ref object of OpenApiRestCall_602466
proc url_GetListCustomVerificationEmailTemplates_604265(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListCustomVerificationEmailTemplates_604264(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_604266 = query.getOrDefault("NextToken")
  valid_604266 = validateParameter(valid_604266, JString, required = false,
                                 default = nil)
  if valid_604266 != nil:
    section.add "NextToken", valid_604266
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604267 = query.getOrDefault("Action")
  valid_604267 = validateParameter(valid_604267, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_604267 != nil:
    section.add "Action", valid_604267
  var valid_604268 = query.getOrDefault("Version")
  valid_604268 = validateParameter(valid_604268, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604268 != nil:
    section.add "Version", valid_604268
  var valid_604269 = query.getOrDefault("MaxResults")
  valid_604269 = validateParameter(valid_604269, JInt, required = false, default = nil)
  if valid_604269 != nil:
    section.add "MaxResults", valid_604269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604270 = header.getOrDefault("X-Amz-Date")
  valid_604270 = validateParameter(valid_604270, JString, required = false,
                                 default = nil)
  if valid_604270 != nil:
    section.add "X-Amz-Date", valid_604270
  var valid_604271 = header.getOrDefault("X-Amz-Security-Token")
  valid_604271 = validateParameter(valid_604271, JString, required = false,
                                 default = nil)
  if valid_604271 != nil:
    section.add "X-Amz-Security-Token", valid_604271
  var valid_604272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604272 = validateParameter(valid_604272, JString, required = false,
                                 default = nil)
  if valid_604272 != nil:
    section.add "X-Amz-Content-Sha256", valid_604272
  var valid_604273 = header.getOrDefault("X-Amz-Algorithm")
  valid_604273 = validateParameter(valid_604273, JString, required = false,
                                 default = nil)
  if valid_604273 != nil:
    section.add "X-Amz-Algorithm", valid_604273
  var valid_604274 = header.getOrDefault("X-Amz-Signature")
  valid_604274 = validateParameter(valid_604274, JString, required = false,
                                 default = nil)
  if valid_604274 != nil:
    section.add "X-Amz-Signature", valid_604274
  var valid_604275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604275 = validateParameter(valid_604275, JString, required = false,
                                 default = nil)
  if valid_604275 != nil:
    section.add "X-Amz-SignedHeaders", valid_604275
  var valid_604276 = header.getOrDefault("X-Amz-Credential")
  valid_604276 = validateParameter(valid_604276, JString, required = false,
                                 default = nil)
  if valid_604276 != nil:
    section.add "X-Amz-Credential", valid_604276
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604277: Call_GetListCustomVerificationEmailTemplates_604263;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604277.validator(path, query, header, formData, body)
  let scheme = call_604277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604277.url(scheme.get, call_604277.host, call_604277.base,
                         call_604277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604277, url, valid)

proc call*(call_604278: Call_GetListCustomVerificationEmailTemplates_604263;
          NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"; MaxResults: int = 0): Recallable =
  ## getListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  var query_604279 = newJObject()
  add(query_604279, "NextToken", newJString(NextToken))
  add(query_604279, "Action", newJString(Action))
  add(query_604279, "Version", newJString(Version))
  add(query_604279, "MaxResults", newJInt(MaxResults))
  result = call_604278.call(nil, query_604279, nil, nil, nil)

var getListCustomVerificationEmailTemplates* = Call_GetListCustomVerificationEmailTemplates_604263(
    name: "getListCustomVerificationEmailTemplates", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_GetListCustomVerificationEmailTemplates_604264, base: "/",
    url: url_GetListCustomVerificationEmailTemplates_604265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentities_604316 = ref object of OpenApiRestCall_602466
proc url_PostListIdentities_604318(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListIdentities_604317(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604319 = query.getOrDefault("Action")
  valid_604319 = validateParameter(valid_604319, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_604319 != nil:
    section.add "Action", valid_604319
  var valid_604320 = query.getOrDefault("Version")
  valid_604320 = validateParameter(valid_604320, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604320 != nil:
    section.add "Version", valid_604320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604321 = header.getOrDefault("X-Amz-Date")
  valid_604321 = validateParameter(valid_604321, JString, required = false,
                                 default = nil)
  if valid_604321 != nil:
    section.add "X-Amz-Date", valid_604321
  var valid_604322 = header.getOrDefault("X-Amz-Security-Token")
  valid_604322 = validateParameter(valid_604322, JString, required = false,
                                 default = nil)
  if valid_604322 != nil:
    section.add "X-Amz-Security-Token", valid_604322
  var valid_604323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604323 = validateParameter(valid_604323, JString, required = false,
                                 default = nil)
  if valid_604323 != nil:
    section.add "X-Amz-Content-Sha256", valid_604323
  var valid_604324 = header.getOrDefault("X-Amz-Algorithm")
  valid_604324 = validateParameter(valid_604324, JString, required = false,
                                 default = nil)
  if valid_604324 != nil:
    section.add "X-Amz-Algorithm", valid_604324
  var valid_604325 = header.getOrDefault("X-Amz-Signature")
  valid_604325 = validateParameter(valid_604325, JString, required = false,
                                 default = nil)
  if valid_604325 != nil:
    section.add "X-Amz-Signature", valid_604325
  var valid_604326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604326 = validateParameter(valid_604326, JString, required = false,
                                 default = nil)
  if valid_604326 != nil:
    section.add "X-Amz-SignedHeaders", valid_604326
  var valid_604327 = header.getOrDefault("X-Amz-Credential")
  valid_604327 = validateParameter(valid_604327, JString, required = false,
                                 default = nil)
  if valid_604327 != nil:
    section.add "X-Amz-Credential", valid_604327
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  section = newJObject()
  var valid_604328 = formData.getOrDefault("NextToken")
  valid_604328 = validateParameter(valid_604328, JString, required = false,
                                 default = nil)
  if valid_604328 != nil:
    section.add "NextToken", valid_604328
  var valid_604329 = formData.getOrDefault("IdentityType")
  valid_604329 = validateParameter(valid_604329, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_604329 != nil:
    section.add "IdentityType", valid_604329
  var valid_604330 = formData.getOrDefault("MaxItems")
  valid_604330 = validateParameter(valid_604330, JInt, required = false, default = nil)
  if valid_604330 != nil:
    section.add "MaxItems", valid_604330
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604331: Call_PostListIdentities_604316; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604331.validator(path, query, header, formData, body)
  let scheme = call_604331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604331.url(scheme.get, call_604331.host, call_604331.base,
                         call_604331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604331, url, valid)

proc call*(call_604332: Call_PostListIdentities_604316; NextToken: string = "";
          IdentityType: string = "EmailAddress"; Action: string = "ListIdentities";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_604333 = newJObject()
  var formData_604334 = newJObject()
  add(formData_604334, "NextToken", newJString(NextToken))
  add(formData_604334, "IdentityType", newJString(IdentityType))
  add(query_604333, "Action", newJString(Action))
  add(formData_604334, "MaxItems", newJInt(MaxItems))
  add(query_604333, "Version", newJString(Version))
  result = call_604332.call(nil, query_604333, nil, formData_604334, nil)

var postListIdentities* = Call_PostListIdentities_604316(
    name: "postListIdentities", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentities",
    validator: validate_PostListIdentities_604317, base: "/",
    url: url_PostListIdentities_604318, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentities_604298 = ref object of OpenApiRestCall_602466
proc url_GetListIdentities_604300(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListIdentities_604299(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   Action: JString (required)
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604301 = query.getOrDefault("NextToken")
  valid_604301 = validateParameter(valid_604301, JString, required = false,
                                 default = nil)
  if valid_604301 != nil:
    section.add "NextToken", valid_604301
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604302 = query.getOrDefault("Action")
  valid_604302 = validateParameter(valid_604302, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_604302 != nil:
    section.add "Action", valid_604302
  var valid_604303 = query.getOrDefault("IdentityType")
  valid_604303 = validateParameter(valid_604303, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_604303 != nil:
    section.add "IdentityType", valid_604303
  var valid_604304 = query.getOrDefault("MaxItems")
  valid_604304 = validateParameter(valid_604304, JInt, required = false, default = nil)
  if valid_604304 != nil:
    section.add "MaxItems", valid_604304
  var valid_604305 = query.getOrDefault("Version")
  valid_604305 = validateParameter(valid_604305, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604305 != nil:
    section.add "Version", valid_604305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604306 = header.getOrDefault("X-Amz-Date")
  valid_604306 = validateParameter(valid_604306, JString, required = false,
                                 default = nil)
  if valid_604306 != nil:
    section.add "X-Amz-Date", valid_604306
  var valid_604307 = header.getOrDefault("X-Amz-Security-Token")
  valid_604307 = validateParameter(valid_604307, JString, required = false,
                                 default = nil)
  if valid_604307 != nil:
    section.add "X-Amz-Security-Token", valid_604307
  var valid_604308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604308 = validateParameter(valid_604308, JString, required = false,
                                 default = nil)
  if valid_604308 != nil:
    section.add "X-Amz-Content-Sha256", valid_604308
  var valid_604309 = header.getOrDefault("X-Amz-Algorithm")
  valid_604309 = validateParameter(valid_604309, JString, required = false,
                                 default = nil)
  if valid_604309 != nil:
    section.add "X-Amz-Algorithm", valid_604309
  var valid_604310 = header.getOrDefault("X-Amz-Signature")
  valid_604310 = validateParameter(valid_604310, JString, required = false,
                                 default = nil)
  if valid_604310 != nil:
    section.add "X-Amz-Signature", valid_604310
  var valid_604311 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604311 = validateParameter(valid_604311, JString, required = false,
                                 default = nil)
  if valid_604311 != nil:
    section.add "X-Amz-SignedHeaders", valid_604311
  var valid_604312 = header.getOrDefault("X-Amz-Credential")
  valid_604312 = validateParameter(valid_604312, JString, required = false,
                                 default = nil)
  if valid_604312 != nil:
    section.add "X-Amz-Credential", valid_604312
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604313: Call_GetListIdentities_604298; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604313.validator(path, query, header, formData, body)
  let scheme = call_604313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604313.url(scheme.get, call_604313.host, call_604313.base,
                         call_604313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604313, url, valid)

proc call*(call_604314: Call_GetListIdentities_604298; NextToken: string = "";
          Action: string = "ListIdentities"; IdentityType: string = "EmailAddress";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   Action: string (required)
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_604315 = newJObject()
  add(query_604315, "NextToken", newJString(NextToken))
  add(query_604315, "Action", newJString(Action))
  add(query_604315, "IdentityType", newJString(IdentityType))
  add(query_604315, "MaxItems", newJInt(MaxItems))
  add(query_604315, "Version", newJString(Version))
  result = call_604314.call(nil, query_604315, nil, nil, nil)

var getListIdentities* = Call_GetListIdentities_604298(name: "getListIdentities",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListIdentities", validator: validate_GetListIdentities_604299,
    base: "/", url: url_GetListIdentities_604300,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentityPolicies_604351 = ref object of OpenApiRestCall_602466
proc url_PostListIdentityPolicies_604353(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListIdentityPolicies_604352(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604354 = query.getOrDefault("Action")
  valid_604354 = validateParameter(valid_604354, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_604354 != nil:
    section.add "Action", valid_604354
  var valid_604355 = query.getOrDefault("Version")
  valid_604355 = validateParameter(valid_604355, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604355 != nil:
    section.add "Version", valid_604355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604356 = header.getOrDefault("X-Amz-Date")
  valid_604356 = validateParameter(valid_604356, JString, required = false,
                                 default = nil)
  if valid_604356 != nil:
    section.add "X-Amz-Date", valid_604356
  var valid_604357 = header.getOrDefault("X-Amz-Security-Token")
  valid_604357 = validateParameter(valid_604357, JString, required = false,
                                 default = nil)
  if valid_604357 != nil:
    section.add "X-Amz-Security-Token", valid_604357
  var valid_604358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604358 = validateParameter(valid_604358, JString, required = false,
                                 default = nil)
  if valid_604358 != nil:
    section.add "X-Amz-Content-Sha256", valid_604358
  var valid_604359 = header.getOrDefault("X-Amz-Algorithm")
  valid_604359 = validateParameter(valid_604359, JString, required = false,
                                 default = nil)
  if valid_604359 != nil:
    section.add "X-Amz-Algorithm", valid_604359
  var valid_604360 = header.getOrDefault("X-Amz-Signature")
  valid_604360 = validateParameter(valid_604360, JString, required = false,
                                 default = nil)
  if valid_604360 != nil:
    section.add "X-Amz-Signature", valid_604360
  var valid_604361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604361 = validateParameter(valid_604361, JString, required = false,
                                 default = nil)
  if valid_604361 != nil:
    section.add "X-Amz-SignedHeaders", valid_604361
  var valid_604362 = header.getOrDefault("X-Amz-Credential")
  valid_604362 = validateParameter(valid_604362, JString, required = false,
                                 default = nil)
  if valid_604362 != nil:
    section.add "X-Amz-Credential", valid_604362
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_604363 = formData.getOrDefault("Identity")
  valid_604363 = validateParameter(valid_604363, JString, required = true,
                                 default = nil)
  if valid_604363 != nil:
    section.add "Identity", valid_604363
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604364: Call_PostListIdentityPolicies_604351; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604364.validator(path, query, header, formData, body)
  let scheme = call_604364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604364.url(scheme.get, call_604364.host, call_604364.base,
                         call_604364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604364, url, valid)

proc call*(call_604365: Call_PostListIdentityPolicies_604351; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604366 = newJObject()
  var formData_604367 = newJObject()
  add(formData_604367, "Identity", newJString(Identity))
  add(query_604366, "Action", newJString(Action))
  add(query_604366, "Version", newJString(Version))
  result = call_604365.call(nil, query_604366, nil, formData_604367, nil)

var postListIdentityPolicies* = Call_PostListIdentityPolicies_604351(
    name: "postListIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_PostListIdentityPolicies_604352, base: "/",
    url: url_PostListIdentityPolicies_604353, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentityPolicies_604335 = ref object of OpenApiRestCall_602466
proc url_GetListIdentityPolicies_604337(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListIdentityPolicies_604336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604338 = query.getOrDefault("Identity")
  valid_604338 = validateParameter(valid_604338, JString, required = true,
                                 default = nil)
  if valid_604338 != nil:
    section.add "Identity", valid_604338
  var valid_604339 = query.getOrDefault("Action")
  valid_604339 = validateParameter(valid_604339, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_604339 != nil:
    section.add "Action", valid_604339
  var valid_604340 = query.getOrDefault("Version")
  valid_604340 = validateParameter(valid_604340, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604340 != nil:
    section.add "Version", valid_604340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604341 = header.getOrDefault("X-Amz-Date")
  valid_604341 = validateParameter(valid_604341, JString, required = false,
                                 default = nil)
  if valid_604341 != nil:
    section.add "X-Amz-Date", valid_604341
  var valid_604342 = header.getOrDefault("X-Amz-Security-Token")
  valid_604342 = validateParameter(valid_604342, JString, required = false,
                                 default = nil)
  if valid_604342 != nil:
    section.add "X-Amz-Security-Token", valid_604342
  var valid_604343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604343 = validateParameter(valid_604343, JString, required = false,
                                 default = nil)
  if valid_604343 != nil:
    section.add "X-Amz-Content-Sha256", valid_604343
  var valid_604344 = header.getOrDefault("X-Amz-Algorithm")
  valid_604344 = validateParameter(valid_604344, JString, required = false,
                                 default = nil)
  if valid_604344 != nil:
    section.add "X-Amz-Algorithm", valid_604344
  var valid_604345 = header.getOrDefault("X-Amz-Signature")
  valid_604345 = validateParameter(valid_604345, JString, required = false,
                                 default = nil)
  if valid_604345 != nil:
    section.add "X-Amz-Signature", valid_604345
  var valid_604346 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604346 = validateParameter(valid_604346, JString, required = false,
                                 default = nil)
  if valid_604346 != nil:
    section.add "X-Amz-SignedHeaders", valid_604346
  var valid_604347 = header.getOrDefault("X-Amz-Credential")
  valid_604347 = validateParameter(valid_604347, JString, required = false,
                                 default = nil)
  if valid_604347 != nil:
    section.add "X-Amz-Credential", valid_604347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604348: Call_GetListIdentityPolicies_604335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604348.validator(path, query, header, formData, body)
  let scheme = call_604348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604348.url(scheme.get, call_604348.host, call_604348.base,
                         call_604348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604348, url, valid)

proc call*(call_604349: Call_GetListIdentityPolicies_604335; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604350 = newJObject()
  add(query_604350, "Identity", newJString(Identity))
  add(query_604350, "Action", newJString(Action))
  add(query_604350, "Version", newJString(Version))
  result = call_604349.call(nil, query_604350, nil, nil, nil)

var getListIdentityPolicies* = Call_GetListIdentityPolicies_604335(
    name: "getListIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_GetListIdentityPolicies_604336, base: "/",
    url: url_GetListIdentityPolicies_604337, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptFilters_604383 = ref object of OpenApiRestCall_602466
proc url_PostListReceiptFilters_604385(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListReceiptFilters_604384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604386 = query.getOrDefault("Action")
  valid_604386 = validateParameter(valid_604386, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_604386 != nil:
    section.add "Action", valid_604386
  var valid_604387 = query.getOrDefault("Version")
  valid_604387 = validateParameter(valid_604387, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604387 != nil:
    section.add "Version", valid_604387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604388 = header.getOrDefault("X-Amz-Date")
  valid_604388 = validateParameter(valid_604388, JString, required = false,
                                 default = nil)
  if valid_604388 != nil:
    section.add "X-Amz-Date", valid_604388
  var valid_604389 = header.getOrDefault("X-Amz-Security-Token")
  valid_604389 = validateParameter(valid_604389, JString, required = false,
                                 default = nil)
  if valid_604389 != nil:
    section.add "X-Amz-Security-Token", valid_604389
  var valid_604390 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604390 = validateParameter(valid_604390, JString, required = false,
                                 default = nil)
  if valid_604390 != nil:
    section.add "X-Amz-Content-Sha256", valid_604390
  var valid_604391 = header.getOrDefault("X-Amz-Algorithm")
  valid_604391 = validateParameter(valid_604391, JString, required = false,
                                 default = nil)
  if valid_604391 != nil:
    section.add "X-Amz-Algorithm", valid_604391
  var valid_604392 = header.getOrDefault("X-Amz-Signature")
  valid_604392 = validateParameter(valid_604392, JString, required = false,
                                 default = nil)
  if valid_604392 != nil:
    section.add "X-Amz-Signature", valid_604392
  var valid_604393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604393 = validateParameter(valid_604393, JString, required = false,
                                 default = nil)
  if valid_604393 != nil:
    section.add "X-Amz-SignedHeaders", valid_604393
  var valid_604394 = header.getOrDefault("X-Amz-Credential")
  valid_604394 = validateParameter(valid_604394, JString, required = false,
                                 default = nil)
  if valid_604394 != nil:
    section.add "X-Amz-Credential", valid_604394
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604395: Call_PostListReceiptFilters_604383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604395.validator(path, query, header, formData, body)
  let scheme = call_604395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604395.url(scheme.get, call_604395.host, call_604395.base,
                         call_604395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604395, url, valid)

proc call*(call_604396: Call_PostListReceiptFilters_604383;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## postListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604397 = newJObject()
  add(query_604397, "Action", newJString(Action))
  add(query_604397, "Version", newJString(Version))
  result = call_604396.call(nil, query_604397, nil, nil, nil)

var postListReceiptFilters* = Call_PostListReceiptFilters_604383(
    name: "postListReceiptFilters", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_PostListReceiptFilters_604384, base: "/",
    url: url_PostListReceiptFilters_604385, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptFilters_604368 = ref object of OpenApiRestCall_602466
proc url_GetListReceiptFilters_604370(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListReceiptFilters_604369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604371 = query.getOrDefault("Action")
  valid_604371 = validateParameter(valid_604371, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_604371 != nil:
    section.add "Action", valid_604371
  var valid_604372 = query.getOrDefault("Version")
  valid_604372 = validateParameter(valid_604372, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604372 != nil:
    section.add "Version", valid_604372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604373 = header.getOrDefault("X-Amz-Date")
  valid_604373 = validateParameter(valid_604373, JString, required = false,
                                 default = nil)
  if valid_604373 != nil:
    section.add "X-Amz-Date", valid_604373
  var valid_604374 = header.getOrDefault("X-Amz-Security-Token")
  valid_604374 = validateParameter(valid_604374, JString, required = false,
                                 default = nil)
  if valid_604374 != nil:
    section.add "X-Amz-Security-Token", valid_604374
  var valid_604375 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604375 = validateParameter(valid_604375, JString, required = false,
                                 default = nil)
  if valid_604375 != nil:
    section.add "X-Amz-Content-Sha256", valid_604375
  var valid_604376 = header.getOrDefault("X-Amz-Algorithm")
  valid_604376 = validateParameter(valid_604376, JString, required = false,
                                 default = nil)
  if valid_604376 != nil:
    section.add "X-Amz-Algorithm", valid_604376
  var valid_604377 = header.getOrDefault("X-Amz-Signature")
  valid_604377 = validateParameter(valid_604377, JString, required = false,
                                 default = nil)
  if valid_604377 != nil:
    section.add "X-Amz-Signature", valid_604377
  var valid_604378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604378 = validateParameter(valid_604378, JString, required = false,
                                 default = nil)
  if valid_604378 != nil:
    section.add "X-Amz-SignedHeaders", valid_604378
  var valid_604379 = header.getOrDefault("X-Amz-Credential")
  valid_604379 = validateParameter(valid_604379, JString, required = false,
                                 default = nil)
  if valid_604379 != nil:
    section.add "X-Amz-Credential", valid_604379
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604380: Call_GetListReceiptFilters_604368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604380.validator(path, query, header, formData, body)
  let scheme = call_604380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604380.url(scheme.get, call_604380.host, call_604380.base,
                         call_604380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604380, url, valid)

proc call*(call_604381: Call_GetListReceiptFilters_604368;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604382 = newJObject()
  add(query_604382, "Action", newJString(Action))
  add(query_604382, "Version", newJString(Version))
  result = call_604381.call(nil, query_604382, nil, nil, nil)

var getListReceiptFilters* = Call_GetListReceiptFilters_604368(
    name: "getListReceiptFilters", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_GetListReceiptFilters_604369, base: "/",
    url: url_GetListReceiptFilters_604370, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptRuleSets_604414 = ref object of OpenApiRestCall_602466
proc url_PostListReceiptRuleSets_604416(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListReceiptRuleSets_604415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604417 = query.getOrDefault("Action")
  valid_604417 = validateParameter(valid_604417, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_604417 != nil:
    section.add "Action", valid_604417
  var valid_604418 = query.getOrDefault("Version")
  valid_604418 = validateParameter(valid_604418, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604418 != nil:
    section.add "Version", valid_604418
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604419 = header.getOrDefault("X-Amz-Date")
  valid_604419 = validateParameter(valid_604419, JString, required = false,
                                 default = nil)
  if valid_604419 != nil:
    section.add "X-Amz-Date", valid_604419
  var valid_604420 = header.getOrDefault("X-Amz-Security-Token")
  valid_604420 = validateParameter(valid_604420, JString, required = false,
                                 default = nil)
  if valid_604420 != nil:
    section.add "X-Amz-Security-Token", valid_604420
  var valid_604421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604421 = validateParameter(valid_604421, JString, required = false,
                                 default = nil)
  if valid_604421 != nil:
    section.add "X-Amz-Content-Sha256", valid_604421
  var valid_604422 = header.getOrDefault("X-Amz-Algorithm")
  valid_604422 = validateParameter(valid_604422, JString, required = false,
                                 default = nil)
  if valid_604422 != nil:
    section.add "X-Amz-Algorithm", valid_604422
  var valid_604423 = header.getOrDefault("X-Amz-Signature")
  valid_604423 = validateParameter(valid_604423, JString, required = false,
                                 default = nil)
  if valid_604423 != nil:
    section.add "X-Amz-Signature", valid_604423
  var valid_604424 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604424 = validateParameter(valid_604424, JString, required = false,
                                 default = nil)
  if valid_604424 != nil:
    section.add "X-Amz-SignedHeaders", valid_604424
  var valid_604425 = header.getOrDefault("X-Amz-Credential")
  valid_604425 = validateParameter(valid_604425, JString, required = false,
                                 default = nil)
  if valid_604425 != nil:
    section.add "X-Amz-Credential", valid_604425
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  section = newJObject()
  var valid_604426 = formData.getOrDefault("NextToken")
  valid_604426 = validateParameter(valid_604426, JString, required = false,
                                 default = nil)
  if valid_604426 != nil:
    section.add "NextToken", valid_604426
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604427: Call_PostListReceiptRuleSets_604414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604427.validator(path, query, header, formData, body)
  let scheme = call_604427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604427.url(scheme.get, call_604427.host, call_604427.base,
                         call_604427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604427, url, valid)

proc call*(call_604428: Call_PostListReceiptRuleSets_604414;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## postListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604429 = newJObject()
  var formData_604430 = newJObject()
  add(formData_604430, "NextToken", newJString(NextToken))
  add(query_604429, "Action", newJString(Action))
  add(query_604429, "Version", newJString(Version))
  result = call_604428.call(nil, query_604429, nil, formData_604430, nil)

var postListReceiptRuleSets* = Call_PostListReceiptRuleSets_604414(
    name: "postListReceiptRuleSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_PostListReceiptRuleSets_604415, base: "/",
    url: url_PostListReceiptRuleSets_604416, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptRuleSets_604398 = ref object of OpenApiRestCall_602466
proc url_GetListReceiptRuleSets_604400(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListReceiptRuleSets_604399(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604401 = query.getOrDefault("NextToken")
  valid_604401 = validateParameter(valid_604401, JString, required = false,
                                 default = nil)
  if valid_604401 != nil:
    section.add "NextToken", valid_604401
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604402 = query.getOrDefault("Action")
  valid_604402 = validateParameter(valid_604402, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_604402 != nil:
    section.add "Action", valid_604402
  var valid_604403 = query.getOrDefault("Version")
  valid_604403 = validateParameter(valid_604403, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604403 != nil:
    section.add "Version", valid_604403
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604404 = header.getOrDefault("X-Amz-Date")
  valid_604404 = validateParameter(valid_604404, JString, required = false,
                                 default = nil)
  if valid_604404 != nil:
    section.add "X-Amz-Date", valid_604404
  var valid_604405 = header.getOrDefault("X-Amz-Security-Token")
  valid_604405 = validateParameter(valid_604405, JString, required = false,
                                 default = nil)
  if valid_604405 != nil:
    section.add "X-Amz-Security-Token", valid_604405
  var valid_604406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604406 = validateParameter(valid_604406, JString, required = false,
                                 default = nil)
  if valid_604406 != nil:
    section.add "X-Amz-Content-Sha256", valid_604406
  var valid_604407 = header.getOrDefault("X-Amz-Algorithm")
  valid_604407 = validateParameter(valid_604407, JString, required = false,
                                 default = nil)
  if valid_604407 != nil:
    section.add "X-Amz-Algorithm", valid_604407
  var valid_604408 = header.getOrDefault("X-Amz-Signature")
  valid_604408 = validateParameter(valid_604408, JString, required = false,
                                 default = nil)
  if valid_604408 != nil:
    section.add "X-Amz-Signature", valid_604408
  var valid_604409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604409 = validateParameter(valid_604409, JString, required = false,
                                 default = nil)
  if valid_604409 != nil:
    section.add "X-Amz-SignedHeaders", valid_604409
  var valid_604410 = header.getOrDefault("X-Amz-Credential")
  valid_604410 = validateParameter(valid_604410, JString, required = false,
                                 default = nil)
  if valid_604410 != nil:
    section.add "X-Amz-Credential", valid_604410
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604411: Call_GetListReceiptRuleSets_604398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604411.validator(path, query, header, formData, body)
  let scheme = call_604411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604411.url(scheme.get, call_604411.host, call_604411.base,
                         call_604411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604411, url, valid)

proc call*(call_604412: Call_GetListReceiptRuleSets_604398; NextToken: string = "";
          Action: string = "ListReceiptRuleSets"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604413 = newJObject()
  add(query_604413, "NextToken", newJString(NextToken))
  add(query_604413, "Action", newJString(Action))
  add(query_604413, "Version", newJString(Version))
  result = call_604412.call(nil, query_604413, nil, nil, nil)

var getListReceiptRuleSets* = Call_GetListReceiptRuleSets_604398(
    name: "getListReceiptRuleSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_GetListReceiptRuleSets_604399, base: "/",
    url: url_GetListReceiptRuleSets_604400, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTemplates_604448 = ref object of OpenApiRestCall_602466
proc url_PostListTemplates_604450(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTemplates_604449(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604451 = query.getOrDefault("Action")
  valid_604451 = validateParameter(valid_604451, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_604451 != nil:
    section.add "Action", valid_604451
  var valid_604452 = query.getOrDefault("Version")
  valid_604452 = validateParameter(valid_604452, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604452 != nil:
    section.add "Version", valid_604452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604453 = header.getOrDefault("X-Amz-Date")
  valid_604453 = validateParameter(valid_604453, JString, required = false,
                                 default = nil)
  if valid_604453 != nil:
    section.add "X-Amz-Date", valid_604453
  var valid_604454 = header.getOrDefault("X-Amz-Security-Token")
  valid_604454 = validateParameter(valid_604454, JString, required = false,
                                 default = nil)
  if valid_604454 != nil:
    section.add "X-Amz-Security-Token", valid_604454
  var valid_604455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604455 = validateParameter(valid_604455, JString, required = false,
                                 default = nil)
  if valid_604455 != nil:
    section.add "X-Amz-Content-Sha256", valid_604455
  var valid_604456 = header.getOrDefault("X-Amz-Algorithm")
  valid_604456 = validateParameter(valid_604456, JString, required = false,
                                 default = nil)
  if valid_604456 != nil:
    section.add "X-Amz-Algorithm", valid_604456
  var valid_604457 = header.getOrDefault("X-Amz-Signature")
  valid_604457 = validateParameter(valid_604457, JString, required = false,
                                 default = nil)
  if valid_604457 != nil:
    section.add "X-Amz-Signature", valid_604457
  var valid_604458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604458 = validateParameter(valid_604458, JString, required = false,
                                 default = nil)
  if valid_604458 != nil:
    section.add "X-Amz-SignedHeaders", valid_604458
  var valid_604459 = header.getOrDefault("X-Amz-Credential")
  valid_604459 = validateParameter(valid_604459, JString, required = false,
                                 default = nil)
  if valid_604459 != nil:
    section.add "X-Amz-Credential", valid_604459
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  section = newJObject()
  var valid_604460 = formData.getOrDefault("NextToken")
  valid_604460 = validateParameter(valid_604460, JString, required = false,
                                 default = nil)
  if valid_604460 != nil:
    section.add "NextToken", valid_604460
  var valid_604461 = formData.getOrDefault("MaxItems")
  valid_604461 = validateParameter(valid_604461, JInt, required = false, default = nil)
  if valid_604461 != nil:
    section.add "MaxItems", valid_604461
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604462: Call_PostListTemplates_604448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604462.validator(path, query, header, formData, body)
  let scheme = call_604462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604462.url(scheme.get, call_604462.host, call_604462.base,
                         call_604462.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604462, url, valid)

proc call*(call_604463: Call_PostListTemplates_604448; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## postListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_604464 = newJObject()
  var formData_604465 = newJObject()
  add(formData_604465, "NextToken", newJString(NextToken))
  add(query_604464, "Action", newJString(Action))
  add(formData_604465, "MaxItems", newJInt(MaxItems))
  add(query_604464, "Version", newJString(Version))
  result = call_604463.call(nil, query_604464, nil, formData_604465, nil)

var postListTemplates* = Call_PostListTemplates_604448(name: "postListTemplates",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_PostListTemplates_604449,
    base: "/", url: url_PostListTemplates_604450,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTemplates_604431 = ref object of OpenApiRestCall_602466
proc url_GetListTemplates_604433(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTemplates_604432(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604434 = query.getOrDefault("NextToken")
  valid_604434 = validateParameter(valid_604434, JString, required = false,
                                 default = nil)
  if valid_604434 != nil:
    section.add "NextToken", valid_604434
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604435 = query.getOrDefault("Action")
  valid_604435 = validateParameter(valid_604435, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_604435 != nil:
    section.add "Action", valid_604435
  var valid_604436 = query.getOrDefault("MaxItems")
  valid_604436 = validateParameter(valid_604436, JInt, required = false, default = nil)
  if valid_604436 != nil:
    section.add "MaxItems", valid_604436
  var valid_604437 = query.getOrDefault("Version")
  valid_604437 = validateParameter(valid_604437, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604437 != nil:
    section.add "Version", valid_604437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604438 = header.getOrDefault("X-Amz-Date")
  valid_604438 = validateParameter(valid_604438, JString, required = false,
                                 default = nil)
  if valid_604438 != nil:
    section.add "X-Amz-Date", valid_604438
  var valid_604439 = header.getOrDefault("X-Amz-Security-Token")
  valid_604439 = validateParameter(valid_604439, JString, required = false,
                                 default = nil)
  if valid_604439 != nil:
    section.add "X-Amz-Security-Token", valid_604439
  var valid_604440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604440 = validateParameter(valid_604440, JString, required = false,
                                 default = nil)
  if valid_604440 != nil:
    section.add "X-Amz-Content-Sha256", valid_604440
  var valid_604441 = header.getOrDefault("X-Amz-Algorithm")
  valid_604441 = validateParameter(valid_604441, JString, required = false,
                                 default = nil)
  if valid_604441 != nil:
    section.add "X-Amz-Algorithm", valid_604441
  var valid_604442 = header.getOrDefault("X-Amz-Signature")
  valid_604442 = validateParameter(valid_604442, JString, required = false,
                                 default = nil)
  if valid_604442 != nil:
    section.add "X-Amz-Signature", valid_604442
  var valid_604443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604443 = validateParameter(valid_604443, JString, required = false,
                                 default = nil)
  if valid_604443 != nil:
    section.add "X-Amz-SignedHeaders", valid_604443
  var valid_604444 = header.getOrDefault("X-Amz-Credential")
  valid_604444 = validateParameter(valid_604444, JString, required = false,
                                 default = nil)
  if valid_604444 != nil:
    section.add "X-Amz-Credential", valid_604444
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604445: Call_GetListTemplates_604431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604445.validator(path, query, header, formData, body)
  let scheme = call_604445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604445.url(scheme.get, call_604445.host, call_604445.base,
                         call_604445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604445, url, valid)

proc call*(call_604446: Call_GetListTemplates_604431; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## getListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_604447 = newJObject()
  add(query_604447, "NextToken", newJString(NextToken))
  add(query_604447, "Action", newJString(Action))
  add(query_604447, "MaxItems", newJInt(MaxItems))
  add(query_604447, "Version", newJString(Version))
  result = call_604446.call(nil, query_604447, nil, nil, nil)

var getListTemplates* = Call_GetListTemplates_604431(name: "getListTemplates",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_GetListTemplates_604432,
    base: "/", url: url_GetListTemplates_604433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVerifiedEmailAddresses_604481 = ref object of OpenApiRestCall_602466
proc url_PostListVerifiedEmailAddresses_604483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListVerifiedEmailAddresses_604482(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604484 = query.getOrDefault("Action")
  valid_604484 = validateParameter(valid_604484, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_604484 != nil:
    section.add "Action", valid_604484
  var valid_604485 = query.getOrDefault("Version")
  valid_604485 = validateParameter(valid_604485, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604485 != nil:
    section.add "Version", valid_604485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604486 = header.getOrDefault("X-Amz-Date")
  valid_604486 = validateParameter(valid_604486, JString, required = false,
                                 default = nil)
  if valid_604486 != nil:
    section.add "X-Amz-Date", valid_604486
  var valid_604487 = header.getOrDefault("X-Amz-Security-Token")
  valid_604487 = validateParameter(valid_604487, JString, required = false,
                                 default = nil)
  if valid_604487 != nil:
    section.add "X-Amz-Security-Token", valid_604487
  var valid_604488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604488 = validateParameter(valid_604488, JString, required = false,
                                 default = nil)
  if valid_604488 != nil:
    section.add "X-Amz-Content-Sha256", valid_604488
  var valid_604489 = header.getOrDefault("X-Amz-Algorithm")
  valid_604489 = validateParameter(valid_604489, JString, required = false,
                                 default = nil)
  if valid_604489 != nil:
    section.add "X-Amz-Algorithm", valid_604489
  var valid_604490 = header.getOrDefault("X-Amz-Signature")
  valid_604490 = validateParameter(valid_604490, JString, required = false,
                                 default = nil)
  if valid_604490 != nil:
    section.add "X-Amz-Signature", valid_604490
  var valid_604491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604491 = validateParameter(valid_604491, JString, required = false,
                                 default = nil)
  if valid_604491 != nil:
    section.add "X-Amz-SignedHeaders", valid_604491
  var valid_604492 = header.getOrDefault("X-Amz-Credential")
  valid_604492 = validateParameter(valid_604492, JString, required = false,
                                 default = nil)
  if valid_604492 != nil:
    section.add "X-Amz-Credential", valid_604492
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604493: Call_PostListVerifiedEmailAddresses_604481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_604493.validator(path, query, header, formData, body)
  let scheme = call_604493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604493.url(scheme.get, call_604493.host, call_604493.base,
                         call_604493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604493, url, valid)

proc call*(call_604494: Call_PostListVerifiedEmailAddresses_604481;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## postListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604495 = newJObject()
  add(query_604495, "Action", newJString(Action))
  add(query_604495, "Version", newJString(Version))
  result = call_604494.call(nil, query_604495, nil, nil, nil)

var postListVerifiedEmailAddresses* = Call_PostListVerifiedEmailAddresses_604481(
    name: "postListVerifiedEmailAddresses", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_PostListVerifiedEmailAddresses_604482, base: "/",
    url: url_PostListVerifiedEmailAddresses_604483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVerifiedEmailAddresses_604466 = ref object of OpenApiRestCall_602466
proc url_GetListVerifiedEmailAddresses_604468(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListVerifiedEmailAddresses_604467(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604469 = query.getOrDefault("Action")
  valid_604469 = validateParameter(valid_604469, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_604469 != nil:
    section.add "Action", valid_604469
  var valid_604470 = query.getOrDefault("Version")
  valid_604470 = validateParameter(valid_604470, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604470 != nil:
    section.add "Version", valid_604470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604471 = header.getOrDefault("X-Amz-Date")
  valid_604471 = validateParameter(valid_604471, JString, required = false,
                                 default = nil)
  if valid_604471 != nil:
    section.add "X-Amz-Date", valid_604471
  var valid_604472 = header.getOrDefault("X-Amz-Security-Token")
  valid_604472 = validateParameter(valid_604472, JString, required = false,
                                 default = nil)
  if valid_604472 != nil:
    section.add "X-Amz-Security-Token", valid_604472
  var valid_604473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604473 = validateParameter(valid_604473, JString, required = false,
                                 default = nil)
  if valid_604473 != nil:
    section.add "X-Amz-Content-Sha256", valid_604473
  var valid_604474 = header.getOrDefault("X-Amz-Algorithm")
  valid_604474 = validateParameter(valid_604474, JString, required = false,
                                 default = nil)
  if valid_604474 != nil:
    section.add "X-Amz-Algorithm", valid_604474
  var valid_604475 = header.getOrDefault("X-Amz-Signature")
  valid_604475 = validateParameter(valid_604475, JString, required = false,
                                 default = nil)
  if valid_604475 != nil:
    section.add "X-Amz-Signature", valid_604475
  var valid_604476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604476 = validateParameter(valid_604476, JString, required = false,
                                 default = nil)
  if valid_604476 != nil:
    section.add "X-Amz-SignedHeaders", valid_604476
  var valid_604477 = header.getOrDefault("X-Amz-Credential")
  valid_604477 = validateParameter(valid_604477, JString, required = false,
                                 default = nil)
  if valid_604477 != nil:
    section.add "X-Amz-Credential", valid_604477
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604478: Call_GetListVerifiedEmailAddresses_604466; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_604478.validator(path, query, header, formData, body)
  let scheme = call_604478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604478.url(scheme.get, call_604478.host, call_604478.base,
                         call_604478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604478, url, valid)

proc call*(call_604479: Call_GetListVerifiedEmailAddresses_604466;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## getListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604480 = newJObject()
  add(query_604480, "Action", newJString(Action))
  add(query_604480, "Version", newJString(Version))
  result = call_604479.call(nil, query_604480, nil, nil, nil)

var getListVerifiedEmailAddresses* = Call_GetListVerifiedEmailAddresses_604466(
    name: "getListVerifiedEmailAddresses", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_GetListVerifiedEmailAddresses_604467, base: "/",
    url: url_GetListVerifiedEmailAddresses_604468,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutConfigurationSetDeliveryOptions_604513 = ref object of OpenApiRestCall_602466
proc url_PostPutConfigurationSetDeliveryOptions_604515(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutConfigurationSetDeliveryOptions_604514(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604516 = query.getOrDefault("Action")
  valid_604516 = validateParameter(valid_604516, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_604516 != nil:
    section.add "Action", valid_604516
  var valid_604517 = query.getOrDefault("Version")
  valid_604517 = validateParameter(valid_604517, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604517 != nil:
    section.add "Version", valid_604517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604518 = header.getOrDefault("X-Amz-Date")
  valid_604518 = validateParameter(valid_604518, JString, required = false,
                                 default = nil)
  if valid_604518 != nil:
    section.add "X-Amz-Date", valid_604518
  var valid_604519 = header.getOrDefault("X-Amz-Security-Token")
  valid_604519 = validateParameter(valid_604519, JString, required = false,
                                 default = nil)
  if valid_604519 != nil:
    section.add "X-Amz-Security-Token", valid_604519
  var valid_604520 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604520 = validateParameter(valid_604520, JString, required = false,
                                 default = nil)
  if valid_604520 != nil:
    section.add "X-Amz-Content-Sha256", valid_604520
  var valid_604521 = header.getOrDefault("X-Amz-Algorithm")
  valid_604521 = validateParameter(valid_604521, JString, required = false,
                                 default = nil)
  if valid_604521 != nil:
    section.add "X-Amz-Algorithm", valid_604521
  var valid_604522 = header.getOrDefault("X-Amz-Signature")
  valid_604522 = validateParameter(valid_604522, JString, required = false,
                                 default = nil)
  if valid_604522 != nil:
    section.add "X-Amz-Signature", valid_604522
  var valid_604523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604523 = validateParameter(valid_604523, JString, required = false,
                                 default = nil)
  if valid_604523 != nil:
    section.add "X-Amz-SignedHeaders", valid_604523
  var valid_604524 = header.getOrDefault("X-Amz-Credential")
  valid_604524 = validateParameter(valid_604524, JString, required = false,
                                 default = nil)
  if valid_604524 != nil:
    section.add "X-Amz-Credential", valid_604524
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_604525 = formData.getOrDefault("ConfigurationSetName")
  valid_604525 = validateParameter(valid_604525, JString, required = true,
                                 default = nil)
  if valid_604525 != nil:
    section.add "ConfigurationSetName", valid_604525
  var valid_604526 = formData.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_604526 = validateParameter(valid_604526, JString, required = false,
                                 default = nil)
  if valid_604526 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_604526
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604527: Call_PostPutConfigurationSetDeliveryOptions_604513;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_604527.validator(path, query, header, formData, body)
  let scheme = call_604527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604527.url(scheme.get, call_604527.host, call_604527.base,
                         call_604527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604527, url, valid)

proc call*(call_604528: Call_PostPutConfigurationSetDeliveryOptions_604513;
          ConfigurationSetName: string;
          Action: string = "PutConfigurationSetDeliveryOptions";
          DeliveryOptionsTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Action: string (required)
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Version: string (required)
  var query_604529 = newJObject()
  var formData_604530 = newJObject()
  add(formData_604530, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604529, "Action", newJString(Action))
  add(formData_604530, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_604529, "Version", newJString(Version))
  result = call_604528.call(nil, query_604529, nil, formData_604530, nil)

var postPutConfigurationSetDeliveryOptions* = Call_PostPutConfigurationSetDeliveryOptions_604513(
    name: "postPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_PostPutConfigurationSetDeliveryOptions_604514, base: "/",
    url: url_PostPutConfigurationSetDeliveryOptions_604515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutConfigurationSetDeliveryOptions_604496 = ref object of OpenApiRestCall_602466
proc url_GetPutConfigurationSetDeliveryOptions_604498(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutConfigurationSetDeliveryOptions_604497(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604499 = query.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_604499 = validateParameter(valid_604499, JString, required = false,
                                 default = nil)
  if valid_604499 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_604499
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604500 = query.getOrDefault("Action")
  valid_604500 = validateParameter(valid_604500, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_604500 != nil:
    section.add "Action", valid_604500
  var valid_604501 = query.getOrDefault("ConfigurationSetName")
  valid_604501 = validateParameter(valid_604501, JString, required = true,
                                 default = nil)
  if valid_604501 != nil:
    section.add "ConfigurationSetName", valid_604501
  var valid_604502 = query.getOrDefault("Version")
  valid_604502 = validateParameter(valid_604502, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604502 != nil:
    section.add "Version", valid_604502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604503 = header.getOrDefault("X-Amz-Date")
  valid_604503 = validateParameter(valid_604503, JString, required = false,
                                 default = nil)
  if valid_604503 != nil:
    section.add "X-Amz-Date", valid_604503
  var valid_604504 = header.getOrDefault("X-Amz-Security-Token")
  valid_604504 = validateParameter(valid_604504, JString, required = false,
                                 default = nil)
  if valid_604504 != nil:
    section.add "X-Amz-Security-Token", valid_604504
  var valid_604505 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604505 = validateParameter(valid_604505, JString, required = false,
                                 default = nil)
  if valid_604505 != nil:
    section.add "X-Amz-Content-Sha256", valid_604505
  var valid_604506 = header.getOrDefault("X-Amz-Algorithm")
  valid_604506 = validateParameter(valid_604506, JString, required = false,
                                 default = nil)
  if valid_604506 != nil:
    section.add "X-Amz-Algorithm", valid_604506
  var valid_604507 = header.getOrDefault("X-Amz-Signature")
  valid_604507 = validateParameter(valid_604507, JString, required = false,
                                 default = nil)
  if valid_604507 != nil:
    section.add "X-Amz-Signature", valid_604507
  var valid_604508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604508 = validateParameter(valid_604508, JString, required = false,
                                 default = nil)
  if valid_604508 != nil:
    section.add "X-Amz-SignedHeaders", valid_604508
  var valid_604509 = header.getOrDefault("X-Amz-Credential")
  valid_604509 = validateParameter(valid_604509, JString, required = false,
                                 default = nil)
  if valid_604509 != nil:
    section.add "X-Amz-Credential", valid_604509
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604510: Call_GetPutConfigurationSetDeliveryOptions_604496;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_604510.validator(path, query, header, formData, body)
  let scheme = call_604510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604510.url(scheme.get, call_604510.host, call_604510.base,
                         call_604510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604510, url, valid)

proc call*(call_604511: Call_GetPutConfigurationSetDeliveryOptions_604496;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: string (required)
  var query_604512 = newJObject()
  add(query_604512, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_604512, "Action", newJString(Action))
  add(query_604512, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604512, "Version", newJString(Version))
  result = call_604511.call(nil, query_604512, nil, nil, nil)

var getPutConfigurationSetDeliveryOptions* = Call_GetPutConfigurationSetDeliveryOptions_604496(
    name: "getPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_GetPutConfigurationSetDeliveryOptions_604497, base: "/",
    url: url_GetPutConfigurationSetDeliveryOptions_604498,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutIdentityPolicy_604549 = ref object of OpenApiRestCall_602466
proc url_PostPutIdentityPolicy_604551(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutIdentityPolicy_604550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604552 = query.getOrDefault("Action")
  valid_604552 = validateParameter(valid_604552, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_604552 != nil:
    section.add "Action", valid_604552
  var valid_604553 = query.getOrDefault("Version")
  valid_604553 = validateParameter(valid_604553, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604553 != nil:
    section.add "Version", valid_604553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604554 = header.getOrDefault("X-Amz-Date")
  valid_604554 = validateParameter(valid_604554, JString, required = false,
                                 default = nil)
  if valid_604554 != nil:
    section.add "X-Amz-Date", valid_604554
  var valid_604555 = header.getOrDefault("X-Amz-Security-Token")
  valid_604555 = validateParameter(valid_604555, JString, required = false,
                                 default = nil)
  if valid_604555 != nil:
    section.add "X-Amz-Security-Token", valid_604555
  var valid_604556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604556 = validateParameter(valid_604556, JString, required = false,
                                 default = nil)
  if valid_604556 != nil:
    section.add "X-Amz-Content-Sha256", valid_604556
  var valid_604557 = header.getOrDefault("X-Amz-Algorithm")
  valid_604557 = validateParameter(valid_604557, JString, required = false,
                                 default = nil)
  if valid_604557 != nil:
    section.add "X-Amz-Algorithm", valid_604557
  var valid_604558 = header.getOrDefault("X-Amz-Signature")
  valid_604558 = validateParameter(valid_604558, JString, required = false,
                                 default = nil)
  if valid_604558 != nil:
    section.add "X-Amz-Signature", valid_604558
  var valid_604559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604559 = validateParameter(valid_604559, JString, required = false,
                                 default = nil)
  if valid_604559 != nil:
    section.add "X-Amz-SignedHeaders", valid_604559
  var valid_604560 = header.getOrDefault("X-Amz-Credential")
  valid_604560 = validateParameter(valid_604560, JString, required = false,
                                 default = nil)
  if valid_604560 != nil:
    section.add "X-Amz-Credential", valid_604560
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604561 = formData.getOrDefault("PolicyName")
  valid_604561 = validateParameter(valid_604561, JString, required = true,
                                 default = nil)
  if valid_604561 != nil:
    section.add "PolicyName", valid_604561
  var valid_604562 = formData.getOrDefault("Identity")
  valid_604562 = validateParameter(valid_604562, JString, required = true,
                                 default = nil)
  if valid_604562 != nil:
    section.add "Identity", valid_604562
  var valid_604563 = formData.getOrDefault("Policy")
  valid_604563 = validateParameter(valid_604563, JString, required = true,
                                 default = nil)
  if valid_604563 != nil:
    section.add "Policy", valid_604563
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604564: Call_PostPutIdentityPolicy_604549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604564.validator(path, query, header, formData, body)
  let scheme = call_604564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604564.url(scheme.get, call_604564.host, call_604564.base,
                         call_604564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604564, url, valid)

proc call*(call_604565: Call_PostPutIdentityPolicy_604549; PolicyName: string;
          Identity: string; Policy: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  var query_604566 = newJObject()
  var formData_604567 = newJObject()
  add(formData_604567, "PolicyName", newJString(PolicyName))
  add(formData_604567, "Identity", newJString(Identity))
  add(query_604566, "Action", newJString(Action))
  add(formData_604567, "Policy", newJString(Policy))
  add(query_604566, "Version", newJString(Version))
  result = call_604565.call(nil, query_604566, nil, formData_604567, nil)

var postPutIdentityPolicy* = Call_PostPutIdentityPolicy_604549(
    name: "postPutIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_PostPutIdentityPolicy_604550, base: "/",
    url: url_PostPutIdentityPolicy_604551, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutIdentityPolicy_604531 = ref object of OpenApiRestCall_602466
proc url_GetPutIdentityPolicy_604533(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutIdentityPolicy_604532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604534 = query.getOrDefault("Identity")
  valid_604534 = validateParameter(valid_604534, JString, required = true,
                                 default = nil)
  if valid_604534 != nil:
    section.add "Identity", valid_604534
  var valid_604535 = query.getOrDefault("Action")
  valid_604535 = validateParameter(valid_604535, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_604535 != nil:
    section.add "Action", valid_604535
  var valid_604536 = query.getOrDefault("Policy")
  valid_604536 = validateParameter(valid_604536, JString, required = true,
                                 default = nil)
  if valid_604536 != nil:
    section.add "Policy", valid_604536
  var valid_604537 = query.getOrDefault("Version")
  valid_604537 = validateParameter(valid_604537, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604537 != nil:
    section.add "Version", valid_604537
  var valid_604538 = query.getOrDefault("PolicyName")
  valid_604538 = validateParameter(valid_604538, JString, required = true,
                                 default = nil)
  if valid_604538 != nil:
    section.add "PolicyName", valid_604538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604539 = header.getOrDefault("X-Amz-Date")
  valid_604539 = validateParameter(valid_604539, JString, required = false,
                                 default = nil)
  if valid_604539 != nil:
    section.add "X-Amz-Date", valid_604539
  var valid_604540 = header.getOrDefault("X-Amz-Security-Token")
  valid_604540 = validateParameter(valid_604540, JString, required = false,
                                 default = nil)
  if valid_604540 != nil:
    section.add "X-Amz-Security-Token", valid_604540
  var valid_604541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604541 = validateParameter(valid_604541, JString, required = false,
                                 default = nil)
  if valid_604541 != nil:
    section.add "X-Amz-Content-Sha256", valid_604541
  var valid_604542 = header.getOrDefault("X-Amz-Algorithm")
  valid_604542 = validateParameter(valid_604542, JString, required = false,
                                 default = nil)
  if valid_604542 != nil:
    section.add "X-Amz-Algorithm", valid_604542
  var valid_604543 = header.getOrDefault("X-Amz-Signature")
  valid_604543 = validateParameter(valid_604543, JString, required = false,
                                 default = nil)
  if valid_604543 != nil:
    section.add "X-Amz-Signature", valid_604543
  var valid_604544 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604544 = validateParameter(valid_604544, JString, required = false,
                                 default = nil)
  if valid_604544 != nil:
    section.add "X-Amz-SignedHeaders", valid_604544
  var valid_604545 = header.getOrDefault("X-Amz-Credential")
  valid_604545 = validateParameter(valid_604545, JString, required = false,
                                 default = nil)
  if valid_604545 != nil:
    section.add "X-Amz-Credential", valid_604545
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604546: Call_GetPutIdentityPolicy_604531; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604546.validator(path, query, header, formData, body)
  let scheme = call_604546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604546.url(scheme.get, call_604546.host, call_604546.base,
                         call_604546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604546, url, valid)

proc call*(call_604547: Call_GetPutIdentityPolicy_604531; Identity: string;
          Policy: string; PolicyName: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  var query_604548 = newJObject()
  add(query_604548, "Identity", newJString(Identity))
  add(query_604548, "Action", newJString(Action))
  add(query_604548, "Policy", newJString(Policy))
  add(query_604548, "Version", newJString(Version))
  add(query_604548, "PolicyName", newJString(PolicyName))
  result = call_604547.call(nil, query_604548, nil, nil, nil)

var getPutIdentityPolicy* = Call_GetPutIdentityPolicy_604531(
    name: "getPutIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_GetPutIdentityPolicy_604532, base: "/",
    url: url_GetPutIdentityPolicy_604533, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostReorderReceiptRuleSet_604585 = ref object of OpenApiRestCall_602466
proc url_PostReorderReceiptRuleSet_604587(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostReorderReceiptRuleSet_604586(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604588 = query.getOrDefault("Action")
  valid_604588 = validateParameter(valid_604588, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_604588 != nil:
    section.add "Action", valid_604588
  var valid_604589 = query.getOrDefault("Version")
  valid_604589 = validateParameter(valid_604589, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604589 != nil:
    section.add "Version", valid_604589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604590 = header.getOrDefault("X-Amz-Date")
  valid_604590 = validateParameter(valid_604590, JString, required = false,
                                 default = nil)
  if valid_604590 != nil:
    section.add "X-Amz-Date", valid_604590
  var valid_604591 = header.getOrDefault("X-Amz-Security-Token")
  valid_604591 = validateParameter(valid_604591, JString, required = false,
                                 default = nil)
  if valid_604591 != nil:
    section.add "X-Amz-Security-Token", valid_604591
  var valid_604592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604592 = validateParameter(valid_604592, JString, required = false,
                                 default = nil)
  if valid_604592 != nil:
    section.add "X-Amz-Content-Sha256", valid_604592
  var valid_604593 = header.getOrDefault("X-Amz-Algorithm")
  valid_604593 = validateParameter(valid_604593, JString, required = false,
                                 default = nil)
  if valid_604593 != nil:
    section.add "X-Amz-Algorithm", valid_604593
  var valid_604594 = header.getOrDefault("X-Amz-Signature")
  valid_604594 = validateParameter(valid_604594, JString, required = false,
                                 default = nil)
  if valid_604594 != nil:
    section.add "X-Amz-Signature", valid_604594
  var valid_604595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604595 = validateParameter(valid_604595, JString, required = false,
                                 default = nil)
  if valid_604595 != nil:
    section.add "X-Amz-SignedHeaders", valid_604595
  var valid_604596 = header.getOrDefault("X-Amz-Credential")
  valid_604596 = validateParameter(valid_604596, JString, required = false,
                                 default = nil)
  if valid_604596 != nil:
    section.add "X-Amz-Credential", valid_604596
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleNames` field"
  var valid_604597 = formData.getOrDefault("RuleNames")
  valid_604597 = validateParameter(valid_604597, JArray, required = true, default = nil)
  if valid_604597 != nil:
    section.add "RuleNames", valid_604597
  var valid_604598 = formData.getOrDefault("RuleSetName")
  valid_604598 = validateParameter(valid_604598, JString, required = true,
                                 default = nil)
  if valid_604598 != nil:
    section.add "RuleSetName", valid_604598
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604599: Call_PostReorderReceiptRuleSet_604585; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604599.validator(path, query, header, formData, body)
  let scheme = call_604599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604599.url(scheme.get, call_604599.host, call_604599.base,
                         call_604599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604599, url, valid)

proc call*(call_604600: Call_PostReorderReceiptRuleSet_604585; RuleNames: JsonNode;
          RuleSetName: string; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604601 = newJObject()
  var formData_604602 = newJObject()
  if RuleNames != nil:
    formData_604602.add "RuleNames", RuleNames
  add(formData_604602, "RuleSetName", newJString(RuleSetName))
  add(query_604601, "Action", newJString(Action))
  add(query_604601, "Version", newJString(Version))
  result = call_604600.call(nil, query_604601, nil, formData_604602, nil)

var postReorderReceiptRuleSet* = Call_PostReorderReceiptRuleSet_604585(
    name: "postReorderReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_PostReorderReceiptRuleSet_604586, base: "/",
    url: url_PostReorderReceiptRuleSet_604587,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReorderReceiptRuleSet_604568 = ref object of OpenApiRestCall_602466
proc url_GetReorderReceiptRuleSet_604570(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetReorderReceiptRuleSet_604569(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: JString (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_604571 = query.getOrDefault("RuleSetName")
  valid_604571 = validateParameter(valid_604571, JString, required = true,
                                 default = nil)
  if valid_604571 != nil:
    section.add "RuleSetName", valid_604571
  var valid_604572 = query.getOrDefault("Action")
  valid_604572 = validateParameter(valid_604572, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_604572 != nil:
    section.add "Action", valid_604572
  var valid_604573 = query.getOrDefault("RuleNames")
  valid_604573 = validateParameter(valid_604573, JArray, required = true, default = nil)
  if valid_604573 != nil:
    section.add "RuleNames", valid_604573
  var valid_604574 = query.getOrDefault("Version")
  valid_604574 = validateParameter(valid_604574, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604574 != nil:
    section.add "Version", valid_604574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604575 = header.getOrDefault("X-Amz-Date")
  valid_604575 = validateParameter(valid_604575, JString, required = false,
                                 default = nil)
  if valid_604575 != nil:
    section.add "X-Amz-Date", valid_604575
  var valid_604576 = header.getOrDefault("X-Amz-Security-Token")
  valid_604576 = validateParameter(valid_604576, JString, required = false,
                                 default = nil)
  if valid_604576 != nil:
    section.add "X-Amz-Security-Token", valid_604576
  var valid_604577 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604577 = validateParameter(valid_604577, JString, required = false,
                                 default = nil)
  if valid_604577 != nil:
    section.add "X-Amz-Content-Sha256", valid_604577
  var valid_604578 = header.getOrDefault("X-Amz-Algorithm")
  valid_604578 = validateParameter(valid_604578, JString, required = false,
                                 default = nil)
  if valid_604578 != nil:
    section.add "X-Amz-Algorithm", valid_604578
  var valid_604579 = header.getOrDefault("X-Amz-Signature")
  valid_604579 = validateParameter(valid_604579, JString, required = false,
                                 default = nil)
  if valid_604579 != nil:
    section.add "X-Amz-Signature", valid_604579
  var valid_604580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604580 = validateParameter(valid_604580, JString, required = false,
                                 default = nil)
  if valid_604580 != nil:
    section.add "X-Amz-SignedHeaders", valid_604580
  var valid_604581 = header.getOrDefault("X-Amz-Credential")
  valid_604581 = validateParameter(valid_604581, JString, required = false,
                                 default = nil)
  if valid_604581 != nil:
    section.add "X-Amz-Credential", valid_604581
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604582: Call_GetReorderReceiptRuleSet_604568; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604582.validator(path, query, header, formData, body)
  let scheme = call_604582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604582.url(scheme.get, call_604582.host, call_604582.base,
                         call_604582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604582, url, valid)

proc call*(call_604583: Call_GetReorderReceiptRuleSet_604568; RuleSetName: string;
          RuleNames: JsonNode; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: string (required)
  var query_604584 = newJObject()
  add(query_604584, "RuleSetName", newJString(RuleSetName))
  add(query_604584, "Action", newJString(Action))
  if RuleNames != nil:
    query_604584.add "RuleNames", RuleNames
  add(query_604584, "Version", newJString(Version))
  result = call_604583.call(nil, query_604584, nil, nil, nil)

var getReorderReceiptRuleSet* = Call_GetReorderReceiptRuleSet_604568(
    name: "getReorderReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_GetReorderReceiptRuleSet_604569, base: "/",
    url: url_GetReorderReceiptRuleSet_604570, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBounce_604626 = ref object of OpenApiRestCall_602466
proc url_PostSendBounce_604628(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSendBounce_604627(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604629 = query.getOrDefault("Action")
  valid_604629 = validateParameter(valid_604629, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_604629 != nil:
    section.add "Action", valid_604629
  var valid_604630 = query.getOrDefault("Version")
  valid_604630 = validateParameter(valid_604630, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604630 != nil:
    section.add "Version", valid_604630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604631 = header.getOrDefault("X-Amz-Date")
  valid_604631 = validateParameter(valid_604631, JString, required = false,
                                 default = nil)
  if valid_604631 != nil:
    section.add "X-Amz-Date", valid_604631
  var valid_604632 = header.getOrDefault("X-Amz-Security-Token")
  valid_604632 = validateParameter(valid_604632, JString, required = false,
                                 default = nil)
  if valid_604632 != nil:
    section.add "X-Amz-Security-Token", valid_604632
  var valid_604633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604633 = validateParameter(valid_604633, JString, required = false,
                                 default = nil)
  if valid_604633 != nil:
    section.add "X-Amz-Content-Sha256", valid_604633
  var valid_604634 = header.getOrDefault("X-Amz-Algorithm")
  valid_604634 = validateParameter(valid_604634, JString, required = false,
                                 default = nil)
  if valid_604634 != nil:
    section.add "X-Amz-Algorithm", valid_604634
  var valid_604635 = header.getOrDefault("X-Amz-Signature")
  valid_604635 = validateParameter(valid_604635, JString, required = false,
                                 default = nil)
  if valid_604635 != nil:
    section.add "X-Amz-Signature", valid_604635
  var valid_604636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604636 = validateParameter(valid_604636, JString, required = false,
                                 default = nil)
  if valid_604636 != nil:
    section.add "X-Amz-SignedHeaders", valid_604636
  var valid_604637 = header.getOrDefault("X-Amz-Credential")
  valid_604637 = validateParameter(valid_604637, JString, required = false,
                                 default = nil)
  if valid_604637 != nil:
    section.add "X-Amz-Credential", valid_604637
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalMessageId` field"
  var valid_604638 = formData.getOrDefault("OriginalMessageId")
  valid_604638 = validateParameter(valid_604638, JString, required = true,
                                 default = nil)
  if valid_604638 != nil:
    section.add "OriginalMessageId", valid_604638
  var valid_604639 = formData.getOrDefault("BounceSenderArn")
  valid_604639 = validateParameter(valid_604639, JString, required = false,
                                 default = nil)
  if valid_604639 != nil:
    section.add "BounceSenderArn", valid_604639
  var valid_604640 = formData.getOrDefault("MessageDsn.ReportingMta")
  valid_604640 = validateParameter(valid_604640, JString, required = false,
                                 default = nil)
  if valid_604640 != nil:
    section.add "MessageDsn.ReportingMta", valid_604640
  var valid_604641 = formData.getOrDefault("MessageDsn.ExtensionFields")
  valid_604641 = validateParameter(valid_604641, JArray, required = false,
                                 default = nil)
  if valid_604641 != nil:
    section.add "MessageDsn.ExtensionFields", valid_604641
  var valid_604642 = formData.getOrDefault("BounceSender")
  valid_604642 = validateParameter(valid_604642, JString, required = true,
                                 default = nil)
  if valid_604642 != nil:
    section.add "BounceSender", valid_604642
  var valid_604643 = formData.getOrDefault("Explanation")
  valid_604643 = validateParameter(valid_604643, JString, required = false,
                                 default = nil)
  if valid_604643 != nil:
    section.add "Explanation", valid_604643
  var valid_604644 = formData.getOrDefault("MessageDsn.ArrivalDate")
  valid_604644 = validateParameter(valid_604644, JString, required = false,
                                 default = nil)
  if valid_604644 != nil:
    section.add "MessageDsn.ArrivalDate", valid_604644
  var valid_604645 = formData.getOrDefault("BouncedRecipientInfoList")
  valid_604645 = validateParameter(valid_604645, JArray, required = true, default = nil)
  if valid_604645 != nil:
    section.add "BouncedRecipientInfoList", valid_604645
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604646: Call_PostSendBounce_604626; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604646.validator(path, query, header, formData, body)
  let scheme = call_604646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604646.url(scheme.get, call_604646.host, call_604646.base,
                         call_604646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604646, url, valid)

proc call*(call_604647: Call_PostSendBounce_604626; OriginalMessageId: string;
          BounceSender: string; BouncedRecipientInfoList: JsonNode;
          BounceSenderArn: string = ""; MessageDsnReportingMta: string = "";
          MessageDsnExtensionFields: JsonNode = nil; Explanation: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Version: string (required)
  var query_604648 = newJObject()
  var formData_604649 = newJObject()
  add(formData_604649, "OriginalMessageId", newJString(OriginalMessageId))
  add(formData_604649, "BounceSenderArn", newJString(BounceSenderArn))
  add(formData_604649, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  if MessageDsnExtensionFields != nil:
    formData_604649.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  add(formData_604649, "BounceSender", newJString(BounceSender))
  add(formData_604649, "Explanation", newJString(Explanation))
  add(query_604648, "Action", newJString(Action))
  add(formData_604649, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  if BouncedRecipientInfoList != nil:
    formData_604649.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_604648, "Version", newJString(Version))
  result = call_604647.call(nil, query_604648, nil, formData_604649, nil)

var postSendBounce* = Call_PostSendBounce_604626(name: "postSendBounce",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_PostSendBounce_604627,
    base: "/", url: url_PostSendBounce_604628, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBounce_604603 = ref object of OpenApiRestCall_602466
proc url_GetSendBounce_604605(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSendBounce_604604(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: JString (required)
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: JString (required)
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  section = newJObject()
  var valid_604606 = query.getOrDefault("Explanation")
  valid_604606 = validateParameter(valid_604606, JString, required = false,
                                 default = nil)
  if valid_604606 != nil:
    section.add "Explanation", valid_604606
  assert query != nil,
        "query argument is necessary due to required `BounceSender` field"
  var valid_604607 = query.getOrDefault("BounceSender")
  valid_604607 = validateParameter(valid_604607, JString, required = true,
                                 default = nil)
  if valid_604607 != nil:
    section.add "BounceSender", valid_604607
  var valid_604608 = query.getOrDefault("OriginalMessageId")
  valid_604608 = validateParameter(valid_604608, JString, required = true,
                                 default = nil)
  if valid_604608 != nil:
    section.add "OriginalMessageId", valid_604608
  var valid_604609 = query.getOrDefault("BouncedRecipientInfoList")
  valid_604609 = validateParameter(valid_604609, JArray, required = true, default = nil)
  if valid_604609 != nil:
    section.add "BouncedRecipientInfoList", valid_604609
  var valid_604610 = query.getOrDefault("Action")
  valid_604610 = validateParameter(valid_604610, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_604610 != nil:
    section.add "Action", valid_604610
  var valid_604611 = query.getOrDefault("BounceSenderArn")
  valid_604611 = validateParameter(valid_604611, JString, required = false,
                                 default = nil)
  if valid_604611 != nil:
    section.add "BounceSenderArn", valid_604611
  var valid_604612 = query.getOrDefault("MessageDsn.ArrivalDate")
  valid_604612 = validateParameter(valid_604612, JString, required = false,
                                 default = nil)
  if valid_604612 != nil:
    section.add "MessageDsn.ArrivalDate", valid_604612
  var valid_604613 = query.getOrDefault("MessageDsn.ReportingMta")
  valid_604613 = validateParameter(valid_604613, JString, required = false,
                                 default = nil)
  if valid_604613 != nil:
    section.add "MessageDsn.ReportingMta", valid_604613
  var valid_604614 = query.getOrDefault("Version")
  valid_604614 = validateParameter(valid_604614, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604614 != nil:
    section.add "Version", valid_604614
  var valid_604615 = query.getOrDefault("MessageDsn.ExtensionFields")
  valid_604615 = validateParameter(valid_604615, JArray, required = false,
                                 default = nil)
  if valid_604615 != nil:
    section.add "MessageDsn.ExtensionFields", valid_604615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604616 = header.getOrDefault("X-Amz-Date")
  valid_604616 = validateParameter(valid_604616, JString, required = false,
                                 default = nil)
  if valid_604616 != nil:
    section.add "X-Amz-Date", valid_604616
  var valid_604617 = header.getOrDefault("X-Amz-Security-Token")
  valid_604617 = validateParameter(valid_604617, JString, required = false,
                                 default = nil)
  if valid_604617 != nil:
    section.add "X-Amz-Security-Token", valid_604617
  var valid_604618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604618 = validateParameter(valid_604618, JString, required = false,
                                 default = nil)
  if valid_604618 != nil:
    section.add "X-Amz-Content-Sha256", valid_604618
  var valid_604619 = header.getOrDefault("X-Amz-Algorithm")
  valid_604619 = validateParameter(valid_604619, JString, required = false,
                                 default = nil)
  if valid_604619 != nil:
    section.add "X-Amz-Algorithm", valid_604619
  var valid_604620 = header.getOrDefault("X-Amz-Signature")
  valid_604620 = validateParameter(valid_604620, JString, required = false,
                                 default = nil)
  if valid_604620 != nil:
    section.add "X-Amz-Signature", valid_604620
  var valid_604621 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604621 = validateParameter(valid_604621, JString, required = false,
                                 default = nil)
  if valid_604621 != nil:
    section.add "X-Amz-SignedHeaders", valid_604621
  var valid_604622 = header.getOrDefault("X-Amz-Credential")
  valid_604622 = validateParameter(valid_604622, JString, required = false,
                                 default = nil)
  if valid_604622 != nil:
    section.add "X-Amz-Credential", valid_604622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604623: Call_GetSendBounce_604603; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604623.validator(path, query, header, formData, body)
  let scheme = call_604623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604623.url(scheme.get, call_604623.host, call_604623.base,
                         call_604623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604623, url, valid)

proc call*(call_604624: Call_GetSendBounce_604603; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          Explanation: string = ""; Action: string = "SendBounce";
          BounceSenderArn: string = ""; MessageDsnArrivalDate: string = "";
          MessageDsnReportingMta: string = ""; Version: string = "2010-12-01";
          MessageDsnExtensionFields: JsonNode = nil): Recallable =
  ## getSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: string (required)
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: string (required)
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  var query_604625 = newJObject()
  add(query_604625, "Explanation", newJString(Explanation))
  add(query_604625, "BounceSender", newJString(BounceSender))
  add(query_604625, "OriginalMessageId", newJString(OriginalMessageId))
  if BouncedRecipientInfoList != nil:
    query_604625.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_604625, "Action", newJString(Action))
  add(query_604625, "BounceSenderArn", newJString(BounceSenderArn))
  add(query_604625, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  add(query_604625, "MessageDsn.ReportingMta", newJString(MessageDsnReportingMta))
  add(query_604625, "Version", newJString(Version))
  if MessageDsnExtensionFields != nil:
    query_604625.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  result = call_604624.call(nil, query_604625, nil, nil, nil)

var getSendBounce* = Call_GetSendBounce_604603(name: "getSendBounce",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_GetSendBounce_604604,
    base: "/", url: url_GetSendBounce_604605, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBulkTemplatedEmail_604676 = ref object of OpenApiRestCall_602466
proc url_PostSendBulkTemplatedEmail_604678(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSendBulkTemplatedEmail_604677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604679 = query.getOrDefault("Action")
  valid_604679 = validateParameter(valid_604679, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_604679 != nil:
    section.add "Action", valid_604679
  var valid_604680 = query.getOrDefault("Version")
  valid_604680 = validateParameter(valid_604680, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604680 != nil:
    section.add "Version", valid_604680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604681 = header.getOrDefault("X-Amz-Date")
  valid_604681 = validateParameter(valid_604681, JString, required = false,
                                 default = nil)
  if valid_604681 != nil:
    section.add "X-Amz-Date", valid_604681
  var valid_604682 = header.getOrDefault("X-Amz-Security-Token")
  valid_604682 = validateParameter(valid_604682, JString, required = false,
                                 default = nil)
  if valid_604682 != nil:
    section.add "X-Amz-Security-Token", valid_604682
  var valid_604683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604683 = validateParameter(valid_604683, JString, required = false,
                                 default = nil)
  if valid_604683 != nil:
    section.add "X-Amz-Content-Sha256", valid_604683
  var valid_604684 = header.getOrDefault("X-Amz-Algorithm")
  valid_604684 = validateParameter(valid_604684, JString, required = false,
                                 default = nil)
  if valid_604684 != nil:
    section.add "X-Amz-Algorithm", valid_604684
  var valid_604685 = header.getOrDefault("X-Amz-Signature")
  valid_604685 = validateParameter(valid_604685, JString, required = false,
                                 default = nil)
  if valid_604685 != nil:
    section.add "X-Amz-Signature", valid_604685
  var valid_604686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604686 = validateParameter(valid_604686, JString, required = false,
                                 default = nil)
  if valid_604686 != nil:
    section.add "X-Amz-SignedHeaders", valid_604686
  var valid_604687 = header.getOrDefault("X-Amz-Credential")
  valid_604687 = validateParameter(valid_604687, JString, required = false,
                                 default = nil)
  if valid_604687 != nil:
    section.add "X-Amz-Credential", valid_604687
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  section = newJObject()
  var valid_604688 = formData.getOrDefault("ConfigurationSetName")
  valid_604688 = validateParameter(valid_604688, JString, required = false,
                                 default = nil)
  if valid_604688 != nil:
    section.add "ConfigurationSetName", valid_604688
  var valid_604689 = formData.getOrDefault("SourceArn")
  valid_604689 = validateParameter(valid_604689, JString, required = false,
                                 default = nil)
  if valid_604689 != nil:
    section.add "SourceArn", valid_604689
  assert formData != nil,
        "formData argument is necessary due to required `Destinations` field"
  var valid_604690 = formData.getOrDefault("Destinations")
  valid_604690 = validateParameter(valid_604690, JArray, required = true, default = nil)
  if valid_604690 != nil:
    section.add "Destinations", valid_604690
  var valid_604691 = formData.getOrDefault("DefaultTags")
  valid_604691 = validateParameter(valid_604691, JArray, required = false,
                                 default = nil)
  if valid_604691 != nil:
    section.add "DefaultTags", valid_604691
  var valid_604692 = formData.getOrDefault("ReplyToAddresses")
  valid_604692 = validateParameter(valid_604692, JArray, required = false,
                                 default = nil)
  if valid_604692 != nil:
    section.add "ReplyToAddresses", valid_604692
  var valid_604693 = formData.getOrDefault("Template")
  valid_604693 = validateParameter(valid_604693, JString, required = true,
                                 default = nil)
  if valid_604693 != nil:
    section.add "Template", valid_604693
  var valid_604694 = formData.getOrDefault("ReturnPath")
  valid_604694 = validateParameter(valid_604694, JString, required = false,
                                 default = nil)
  if valid_604694 != nil:
    section.add "ReturnPath", valid_604694
  var valid_604695 = formData.getOrDefault("ReturnPathArn")
  valid_604695 = validateParameter(valid_604695, JString, required = false,
                                 default = nil)
  if valid_604695 != nil:
    section.add "ReturnPathArn", valid_604695
  var valid_604696 = formData.getOrDefault("DefaultTemplateData")
  valid_604696 = validateParameter(valid_604696, JString, required = false,
                                 default = nil)
  if valid_604696 != nil:
    section.add "DefaultTemplateData", valid_604696
  var valid_604697 = formData.getOrDefault("TemplateArn")
  valid_604697 = validateParameter(valid_604697, JString, required = false,
                                 default = nil)
  if valid_604697 != nil:
    section.add "TemplateArn", valid_604697
  var valid_604698 = formData.getOrDefault("Source")
  valid_604698 = validateParameter(valid_604698, JString, required = true,
                                 default = nil)
  if valid_604698 != nil:
    section.add "Source", valid_604698
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604699: Call_PostSendBulkTemplatedEmail_604676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_604699.validator(path, query, header, formData, body)
  let scheme = call_604699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604699.url(scheme.get, call_604699.host, call_604699.base,
                         call_604699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604699, url, valid)

proc call*(call_604700: Call_PostSendBulkTemplatedEmail_604676;
          Destinations: JsonNode; Template: string; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendBulkTemplatedEmail";
          DefaultTemplateData: string = ""; TemplateArn: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  var query_604701 = newJObject()
  var formData_604702 = newJObject()
  add(formData_604702, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604702, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_604702.add "Destinations", Destinations
  if DefaultTags != nil:
    formData_604702.add "DefaultTags", DefaultTags
  if ReplyToAddresses != nil:
    formData_604702.add "ReplyToAddresses", ReplyToAddresses
  add(formData_604702, "Template", newJString(Template))
  add(formData_604702, "ReturnPath", newJString(ReturnPath))
  add(formData_604702, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604701, "Action", newJString(Action))
  add(formData_604702, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(formData_604702, "TemplateArn", newJString(TemplateArn))
  add(query_604701, "Version", newJString(Version))
  add(formData_604702, "Source", newJString(Source))
  result = call_604700.call(nil, query_604701, nil, formData_604702, nil)

var postSendBulkTemplatedEmail* = Call_PostSendBulkTemplatedEmail_604676(
    name: "postSendBulkTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_PostSendBulkTemplatedEmail_604677, base: "/",
    url: url_PostSendBulkTemplatedEmail_604678,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBulkTemplatedEmail_604650 = ref object of OpenApiRestCall_602466
proc url_GetSendBulkTemplatedEmail_604652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSendBulkTemplatedEmail_604651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: JString (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604653 = query.getOrDefault("ReplyToAddresses")
  valid_604653 = validateParameter(valid_604653, JArray, required = false,
                                 default = nil)
  if valid_604653 != nil:
    section.add "ReplyToAddresses", valid_604653
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_604654 = query.getOrDefault("Template")
  valid_604654 = validateParameter(valid_604654, JString, required = true,
                                 default = nil)
  if valid_604654 != nil:
    section.add "Template", valid_604654
  var valid_604655 = query.getOrDefault("ReturnPathArn")
  valid_604655 = validateParameter(valid_604655, JString, required = false,
                                 default = nil)
  if valid_604655 != nil:
    section.add "ReturnPathArn", valid_604655
  var valid_604656 = query.getOrDefault("TemplateArn")
  valid_604656 = validateParameter(valid_604656, JString, required = false,
                                 default = nil)
  if valid_604656 != nil:
    section.add "TemplateArn", valid_604656
  var valid_604657 = query.getOrDefault("DefaultTemplateData")
  valid_604657 = validateParameter(valid_604657, JString, required = false,
                                 default = nil)
  if valid_604657 != nil:
    section.add "DefaultTemplateData", valid_604657
  var valid_604658 = query.getOrDefault("SourceArn")
  valid_604658 = validateParameter(valid_604658, JString, required = false,
                                 default = nil)
  if valid_604658 != nil:
    section.add "SourceArn", valid_604658
  var valid_604659 = query.getOrDefault("DefaultTags")
  valid_604659 = validateParameter(valid_604659, JArray, required = false,
                                 default = nil)
  if valid_604659 != nil:
    section.add "DefaultTags", valid_604659
  var valid_604660 = query.getOrDefault("Action")
  valid_604660 = validateParameter(valid_604660, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_604660 != nil:
    section.add "Action", valid_604660
  var valid_604661 = query.getOrDefault("Destinations")
  valid_604661 = validateParameter(valid_604661, JArray, required = true, default = nil)
  if valid_604661 != nil:
    section.add "Destinations", valid_604661
  var valid_604662 = query.getOrDefault("Source")
  valid_604662 = validateParameter(valid_604662, JString, required = true,
                                 default = nil)
  if valid_604662 != nil:
    section.add "Source", valid_604662
  var valid_604663 = query.getOrDefault("ReturnPath")
  valid_604663 = validateParameter(valid_604663, JString, required = false,
                                 default = nil)
  if valid_604663 != nil:
    section.add "ReturnPath", valid_604663
  var valid_604664 = query.getOrDefault("ConfigurationSetName")
  valid_604664 = validateParameter(valid_604664, JString, required = false,
                                 default = nil)
  if valid_604664 != nil:
    section.add "ConfigurationSetName", valid_604664
  var valid_604665 = query.getOrDefault("Version")
  valid_604665 = validateParameter(valid_604665, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604665 != nil:
    section.add "Version", valid_604665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604666 = header.getOrDefault("X-Amz-Date")
  valid_604666 = validateParameter(valid_604666, JString, required = false,
                                 default = nil)
  if valid_604666 != nil:
    section.add "X-Amz-Date", valid_604666
  var valid_604667 = header.getOrDefault("X-Amz-Security-Token")
  valid_604667 = validateParameter(valid_604667, JString, required = false,
                                 default = nil)
  if valid_604667 != nil:
    section.add "X-Amz-Security-Token", valid_604667
  var valid_604668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604668 = validateParameter(valid_604668, JString, required = false,
                                 default = nil)
  if valid_604668 != nil:
    section.add "X-Amz-Content-Sha256", valid_604668
  var valid_604669 = header.getOrDefault("X-Amz-Algorithm")
  valid_604669 = validateParameter(valid_604669, JString, required = false,
                                 default = nil)
  if valid_604669 != nil:
    section.add "X-Amz-Algorithm", valid_604669
  var valid_604670 = header.getOrDefault("X-Amz-Signature")
  valid_604670 = validateParameter(valid_604670, JString, required = false,
                                 default = nil)
  if valid_604670 != nil:
    section.add "X-Amz-Signature", valid_604670
  var valid_604671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604671 = validateParameter(valid_604671, JString, required = false,
                                 default = nil)
  if valid_604671 != nil:
    section.add "X-Amz-SignedHeaders", valid_604671
  var valid_604672 = header.getOrDefault("X-Amz-Credential")
  valid_604672 = validateParameter(valid_604672, JString, required = false,
                                 default = nil)
  if valid_604672 != nil:
    section.add "X-Amz-Credential", valid_604672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604673: Call_GetSendBulkTemplatedEmail_604650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_604673.validator(path, query, header, formData, body)
  let scheme = call_604673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604673.url(scheme.get, call_604673.host, call_604673.base,
                         call_604673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604673, url, valid)

proc call*(call_604674: Call_GetSendBulkTemplatedEmail_604650; Template: string;
          Destinations: JsonNode; Source: string; ReplyToAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; TemplateArn: string = "";
          DefaultTemplateData: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; Action: string = "SendBulkTemplatedEmail";
          ReturnPath: string = ""; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: string (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: string (required)
  var query_604675 = newJObject()
  if ReplyToAddresses != nil:
    query_604675.add "ReplyToAddresses", ReplyToAddresses
  add(query_604675, "Template", newJString(Template))
  add(query_604675, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604675, "TemplateArn", newJString(TemplateArn))
  add(query_604675, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(query_604675, "SourceArn", newJString(SourceArn))
  if DefaultTags != nil:
    query_604675.add "DefaultTags", DefaultTags
  add(query_604675, "Action", newJString(Action))
  if Destinations != nil:
    query_604675.add "Destinations", Destinations
  add(query_604675, "Source", newJString(Source))
  add(query_604675, "ReturnPath", newJString(ReturnPath))
  add(query_604675, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604675, "Version", newJString(Version))
  result = call_604674.call(nil, query_604675, nil, nil, nil)

var getSendBulkTemplatedEmail* = Call_GetSendBulkTemplatedEmail_604650(
    name: "getSendBulkTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_GetSendBulkTemplatedEmail_604651, base: "/",
    url: url_GetSendBulkTemplatedEmail_604652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendCustomVerificationEmail_604721 = ref object of OpenApiRestCall_602466
proc url_PostSendCustomVerificationEmail_604723(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSendCustomVerificationEmail_604722(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604724 = query.getOrDefault("Action")
  valid_604724 = validateParameter(valid_604724, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_604724 != nil:
    section.add "Action", valid_604724
  var valid_604725 = query.getOrDefault("Version")
  valid_604725 = validateParameter(valid_604725, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604725 != nil:
    section.add "Version", valid_604725
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604726 = header.getOrDefault("X-Amz-Date")
  valid_604726 = validateParameter(valid_604726, JString, required = false,
                                 default = nil)
  if valid_604726 != nil:
    section.add "X-Amz-Date", valid_604726
  var valid_604727 = header.getOrDefault("X-Amz-Security-Token")
  valid_604727 = validateParameter(valid_604727, JString, required = false,
                                 default = nil)
  if valid_604727 != nil:
    section.add "X-Amz-Security-Token", valid_604727
  var valid_604728 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604728 = validateParameter(valid_604728, JString, required = false,
                                 default = nil)
  if valid_604728 != nil:
    section.add "X-Amz-Content-Sha256", valid_604728
  var valid_604729 = header.getOrDefault("X-Amz-Algorithm")
  valid_604729 = validateParameter(valid_604729, JString, required = false,
                                 default = nil)
  if valid_604729 != nil:
    section.add "X-Amz-Algorithm", valid_604729
  var valid_604730 = header.getOrDefault("X-Amz-Signature")
  valid_604730 = validateParameter(valid_604730, JString, required = false,
                                 default = nil)
  if valid_604730 != nil:
    section.add "X-Amz-Signature", valid_604730
  var valid_604731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604731 = validateParameter(valid_604731, JString, required = false,
                                 default = nil)
  if valid_604731 != nil:
    section.add "X-Amz-SignedHeaders", valid_604731
  var valid_604732 = header.getOrDefault("X-Amz-Credential")
  valid_604732 = validateParameter(valid_604732, JString, required = false,
                                 default = nil)
  if valid_604732 != nil:
    section.add "X-Amz-Credential", valid_604732
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  section = newJObject()
  var valid_604733 = formData.getOrDefault("ConfigurationSetName")
  valid_604733 = validateParameter(valid_604733, JString, required = false,
                                 default = nil)
  if valid_604733 != nil:
    section.add "ConfigurationSetName", valid_604733
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_604734 = formData.getOrDefault("EmailAddress")
  valid_604734 = validateParameter(valid_604734, JString, required = true,
                                 default = nil)
  if valid_604734 != nil:
    section.add "EmailAddress", valid_604734
  var valid_604735 = formData.getOrDefault("TemplateName")
  valid_604735 = validateParameter(valid_604735, JString, required = true,
                                 default = nil)
  if valid_604735 != nil:
    section.add "TemplateName", valid_604735
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604736: Call_PostSendCustomVerificationEmail_604721;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604736.validator(path, query, header, formData, body)
  let scheme = call_604736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604736.url(scheme.get, call_604736.host, call_604736.base,
                         call_604736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604736, url, valid)

proc call*(call_604737: Call_PostSendCustomVerificationEmail_604721;
          EmailAddress: string; TemplateName: string;
          ConfigurationSetName: string = "";
          Action: string = "SendCustomVerificationEmail";
          Version: string = "2010-12-01"): Recallable =
  ## postSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: string (required)
  var query_604738 = newJObject()
  var formData_604739 = newJObject()
  add(formData_604739, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604739, "EmailAddress", newJString(EmailAddress))
  add(query_604738, "Action", newJString(Action))
  add(formData_604739, "TemplateName", newJString(TemplateName))
  add(query_604738, "Version", newJString(Version))
  result = call_604737.call(nil, query_604738, nil, formData_604739, nil)

var postSendCustomVerificationEmail* = Call_PostSendCustomVerificationEmail_604721(
    name: "postSendCustomVerificationEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_PostSendCustomVerificationEmail_604722, base: "/",
    url: url_PostSendCustomVerificationEmail_604723,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendCustomVerificationEmail_604703 = ref object of OpenApiRestCall_602466
proc url_GetSendCustomVerificationEmail_604705(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSendCustomVerificationEmail_604704(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604706 = query.getOrDefault("Action")
  valid_604706 = validateParameter(valid_604706, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_604706 != nil:
    section.add "Action", valid_604706
  var valid_604707 = query.getOrDefault("TemplateName")
  valid_604707 = validateParameter(valid_604707, JString, required = true,
                                 default = nil)
  if valid_604707 != nil:
    section.add "TemplateName", valid_604707
  var valid_604708 = query.getOrDefault("EmailAddress")
  valid_604708 = validateParameter(valid_604708, JString, required = true,
                                 default = nil)
  if valid_604708 != nil:
    section.add "EmailAddress", valid_604708
  var valid_604709 = query.getOrDefault("ConfigurationSetName")
  valid_604709 = validateParameter(valid_604709, JString, required = false,
                                 default = nil)
  if valid_604709 != nil:
    section.add "ConfigurationSetName", valid_604709
  var valid_604710 = query.getOrDefault("Version")
  valid_604710 = validateParameter(valid_604710, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604710 != nil:
    section.add "Version", valid_604710
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604711 = header.getOrDefault("X-Amz-Date")
  valid_604711 = validateParameter(valid_604711, JString, required = false,
                                 default = nil)
  if valid_604711 != nil:
    section.add "X-Amz-Date", valid_604711
  var valid_604712 = header.getOrDefault("X-Amz-Security-Token")
  valid_604712 = validateParameter(valid_604712, JString, required = false,
                                 default = nil)
  if valid_604712 != nil:
    section.add "X-Amz-Security-Token", valid_604712
  var valid_604713 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604713 = validateParameter(valid_604713, JString, required = false,
                                 default = nil)
  if valid_604713 != nil:
    section.add "X-Amz-Content-Sha256", valid_604713
  var valid_604714 = header.getOrDefault("X-Amz-Algorithm")
  valid_604714 = validateParameter(valid_604714, JString, required = false,
                                 default = nil)
  if valid_604714 != nil:
    section.add "X-Amz-Algorithm", valid_604714
  var valid_604715 = header.getOrDefault("X-Amz-Signature")
  valid_604715 = validateParameter(valid_604715, JString, required = false,
                                 default = nil)
  if valid_604715 != nil:
    section.add "X-Amz-Signature", valid_604715
  var valid_604716 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604716 = validateParameter(valid_604716, JString, required = false,
                                 default = nil)
  if valid_604716 != nil:
    section.add "X-Amz-SignedHeaders", valid_604716
  var valid_604717 = header.getOrDefault("X-Amz-Credential")
  valid_604717 = validateParameter(valid_604717, JString, required = false,
                                 default = nil)
  if valid_604717 != nil:
    section.add "X-Amz-Credential", valid_604717
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604718: Call_GetSendCustomVerificationEmail_604703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604718.validator(path, query, header, formData, body)
  let scheme = call_604718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604718.url(scheme.get, call_604718.host, call_604718.base,
                         call_604718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604718, url, valid)

proc call*(call_604719: Call_GetSendCustomVerificationEmail_604703;
          TemplateName: string; EmailAddress: string;
          Action: string = "SendCustomVerificationEmail";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: string (required)
  var query_604720 = newJObject()
  add(query_604720, "Action", newJString(Action))
  add(query_604720, "TemplateName", newJString(TemplateName))
  add(query_604720, "EmailAddress", newJString(EmailAddress))
  add(query_604720, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604720, "Version", newJString(Version))
  result = call_604719.call(nil, query_604720, nil, nil, nil)

var getSendCustomVerificationEmail* = Call_GetSendCustomVerificationEmail_604703(
    name: "getSendCustomVerificationEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_GetSendCustomVerificationEmail_604704, base: "/",
    url: url_GetSendCustomVerificationEmail_604705,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendEmail_604767 = ref object of OpenApiRestCall_602466
proc url_PostSendEmail_604769(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSendEmail_604768(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604770 = query.getOrDefault("Action")
  valid_604770 = validateParameter(valid_604770, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_604770 != nil:
    section.add "Action", valid_604770
  var valid_604771 = query.getOrDefault("Version")
  valid_604771 = validateParameter(valid_604771, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604771 != nil:
    section.add "Version", valid_604771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604772 = header.getOrDefault("X-Amz-Date")
  valid_604772 = validateParameter(valid_604772, JString, required = false,
                                 default = nil)
  if valid_604772 != nil:
    section.add "X-Amz-Date", valid_604772
  var valid_604773 = header.getOrDefault("X-Amz-Security-Token")
  valid_604773 = validateParameter(valid_604773, JString, required = false,
                                 default = nil)
  if valid_604773 != nil:
    section.add "X-Amz-Security-Token", valid_604773
  var valid_604774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604774 = validateParameter(valid_604774, JString, required = false,
                                 default = nil)
  if valid_604774 != nil:
    section.add "X-Amz-Content-Sha256", valid_604774
  var valid_604775 = header.getOrDefault("X-Amz-Algorithm")
  valid_604775 = validateParameter(valid_604775, JString, required = false,
                                 default = nil)
  if valid_604775 != nil:
    section.add "X-Amz-Algorithm", valid_604775
  var valid_604776 = header.getOrDefault("X-Amz-Signature")
  valid_604776 = validateParameter(valid_604776, JString, required = false,
                                 default = nil)
  if valid_604776 != nil:
    section.add "X-Amz-Signature", valid_604776
  var valid_604777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604777 = validateParameter(valid_604777, JString, required = false,
                                 default = nil)
  if valid_604777 != nil:
    section.add "X-Amz-SignedHeaders", valid_604777
  var valid_604778 = header.getOrDefault("X-Amz-Credential")
  valid_604778 = validateParameter(valid_604778, JString, required = false,
                                 default = nil)
  if valid_604778 != nil:
    section.add "X-Amz-Credential", valid_604778
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_604779 = formData.getOrDefault("ConfigurationSetName")
  valid_604779 = validateParameter(valid_604779, JString, required = false,
                                 default = nil)
  if valid_604779 != nil:
    section.add "ConfigurationSetName", valid_604779
  var valid_604780 = formData.getOrDefault("SourceArn")
  valid_604780 = validateParameter(valid_604780, JString, required = false,
                                 default = nil)
  if valid_604780 != nil:
    section.add "SourceArn", valid_604780
  var valid_604781 = formData.getOrDefault("Destination.BccAddresses")
  valid_604781 = validateParameter(valid_604781, JArray, required = false,
                                 default = nil)
  if valid_604781 != nil:
    section.add "Destination.BccAddresses", valid_604781
  var valid_604782 = formData.getOrDefault("ReplyToAddresses")
  valid_604782 = validateParameter(valid_604782, JArray, required = false,
                                 default = nil)
  if valid_604782 != nil:
    section.add "ReplyToAddresses", valid_604782
  var valid_604783 = formData.getOrDefault("Message.Body")
  valid_604783 = validateParameter(valid_604783, JString, required = false,
                                 default = nil)
  if valid_604783 != nil:
    section.add "Message.Body", valid_604783
  var valid_604784 = formData.getOrDefault("Tags")
  valid_604784 = validateParameter(valid_604784, JArray, required = false,
                                 default = nil)
  if valid_604784 != nil:
    section.add "Tags", valid_604784
  var valid_604785 = formData.getOrDefault("ReturnPath")
  valid_604785 = validateParameter(valid_604785, JString, required = false,
                                 default = nil)
  if valid_604785 != nil:
    section.add "ReturnPath", valid_604785
  var valid_604786 = formData.getOrDefault("ReturnPathArn")
  valid_604786 = validateParameter(valid_604786, JString, required = false,
                                 default = nil)
  if valid_604786 != nil:
    section.add "ReturnPathArn", valid_604786
  var valid_604787 = formData.getOrDefault("Destination.CcAddresses")
  valid_604787 = validateParameter(valid_604787, JArray, required = false,
                                 default = nil)
  if valid_604787 != nil:
    section.add "Destination.CcAddresses", valid_604787
  var valid_604788 = formData.getOrDefault("Message.Subject")
  valid_604788 = validateParameter(valid_604788, JString, required = false,
                                 default = nil)
  if valid_604788 != nil:
    section.add "Message.Subject", valid_604788
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_604789 = formData.getOrDefault("Source")
  valid_604789 = validateParameter(valid_604789, JString, required = true,
                                 default = nil)
  if valid_604789 != nil:
    section.add "Source", valid_604789
  var valid_604790 = formData.getOrDefault("Destination.ToAddresses")
  valid_604790 = validateParameter(valid_604790, JArray, required = false,
                                 default = nil)
  if valid_604790 != nil:
    section.add "Destination.ToAddresses", valid_604790
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604791: Call_PostSendEmail_604767; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_604791.validator(path, query, header, formData, body)
  let scheme = call_604791.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604791.url(scheme.get, call_604791.host, call_604791.base,
                         call_604791.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604791, url, valid)

proc call*(call_604792: Call_PostSendEmail_604767; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DestinationBccAddresses: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""; Tags: JsonNode = nil; ReturnPath: string = "";
          ReturnPathArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          Version: string = "2010-12-01"; DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_604793 = newJObject()
  var formData_604794 = newJObject()
  add(formData_604794, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604794, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_604794.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_604794.add "ReplyToAddresses", ReplyToAddresses
  add(formData_604794, "Message.Body", newJString(MessageBody))
  if Tags != nil:
    formData_604794.add "Tags", Tags
  add(formData_604794, "ReturnPath", newJString(ReturnPath))
  add(formData_604794, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604793, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    formData_604794.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_604794, "Message.Subject", newJString(MessageSubject))
  add(query_604793, "Version", newJString(Version))
  add(formData_604794, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_604794.add "Destination.ToAddresses", DestinationToAddresses
  result = call_604792.call(nil, query_604793, nil, formData_604794, nil)

var postSendEmail* = Call_PostSendEmail_604767(name: "postSendEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_PostSendEmail_604768,
    base: "/", url: url_PostSendEmail_604769, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendEmail_604740 = ref object of OpenApiRestCall_602466
proc url_GetSendEmail_604742(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSendEmail_604741(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604743 = query.getOrDefault("ReplyToAddresses")
  valid_604743 = validateParameter(valid_604743, JArray, required = false,
                                 default = nil)
  if valid_604743 != nil:
    section.add "ReplyToAddresses", valid_604743
  var valid_604744 = query.getOrDefault("Destination.BccAddresses")
  valid_604744 = validateParameter(valid_604744, JArray, required = false,
                                 default = nil)
  if valid_604744 != nil:
    section.add "Destination.BccAddresses", valid_604744
  var valid_604745 = query.getOrDefault("ReturnPathArn")
  valid_604745 = validateParameter(valid_604745, JString, required = false,
                                 default = nil)
  if valid_604745 != nil:
    section.add "ReturnPathArn", valid_604745
  var valid_604746 = query.getOrDefault("Destination.ToAddresses")
  valid_604746 = validateParameter(valid_604746, JArray, required = false,
                                 default = nil)
  if valid_604746 != nil:
    section.add "Destination.ToAddresses", valid_604746
  var valid_604747 = query.getOrDefault("Tags")
  valid_604747 = validateParameter(valid_604747, JArray, required = false,
                                 default = nil)
  if valid_604747 != nil:
    section.add "Tags", valid_604747
  var valid_604748 = query.getOrDefault("SourceArn")
  valid_604748 = validateParameter(valid_604748, JString, required = false,
                                 default = nil)
  if valid_604748 != nil:
    section.add "SourceArn", valid_604748
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604749 = query.getOrDefault("Action")
  valid_604749 = validateParameter(valid_604749, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_604749 != nil:
    section.add "Action", valid_604749
  var valid_604750 = query.getOrDefault("Destination.CcAddresses")
  valid_604750 = validateParameter(valid_604750, JArray, required = false,
                                 default = nil)
  if valid_604750 != nil:
    section.add "Destination.CcAddresses", valid_604750
  var valid_604751 = query.getOrDefault("Message.Subject")
  valid_604751 = validateParameter(valid_604751, JString, required = false,
                                 default = nil)
  if valid_604751 != nil:
    section.add "Message.Subject", valid_604751
  var valid_604752 = query.getOrDefault("Source")
  valid_604752 = validateParameter(valid_604752, JString, required = true,
                                 default = nil)
  if valid_604752 != nil:
    section.add "Source", valid_604752
  var valid_604753 = query.getOrDefault("ReturnPath")
  valid_604753 = validateParameter(valid_604753, JString, required = false,
                                 default = nil)
  if valid_604753 != nil:
    section.add "ReturnPath", valid_604753
  var valid_604754 = query.getOrDefault("Message.Body")
  valid_604754 = validateParameter(valid_604754, JString, required = false,
                                 default = nil)
  if valid_604754 != nil:
    section.add "Message.Body", valid_604754
  var valid_604755 = query.getOrDefault("ConfigurationSetName")
  valid_604755 = validateParameter(valid_604755, JString, required = false,
                                 default = nil)
  if valid_604755 != nil:
    section.add "ConfigurationSetName", valid_604755
  var valid_604756 = query.getOrDefault("Version")
  valid_604756 = validateParameter(valid_604756, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604756 != nil:
    section.add "Version", valid_604756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604757 = header.getOrDefault("X-Amz-Date")
  valid_604757 = validateParameter(valid_604757, JString, required = false,
                                 default = nil)
  if valid_604757 != nil:
    section.add "X-Amz-Date", valid_604757
  var valid_604758 = header.getOrDefault("X-Amz-Security-Token")
  valid_604758 = validateParameter(valid_604758, JString, required = false,
                                 default = nil)
  if valid_604758 != nil:
    section.add "X-Amz-Security-Token", valid_604758
  var valid_604759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604759 = validateParameter(valid_604759, JString, required = false,
                                 default = nil)
  if valid_604759 != nil:
    section.add "X-Amz-Content-Sha256", valid_604759
  var valid_604760 = header.getOrDefault("X-Amz-Algorithm")
  valid_604760 = validateParameter(valid_604760, JString, required = false,
                                 default = nil)
  if valid_604760 != nil:
    section.add "X-Amz-Algorithm", valid_604760
  var valid_604761 = header.getOrDefault("X-Amz-Signature")
  valid_604761 = validateParameter(valid_604761, JString, required = false,
                                 default = nil)
  if valid_604761 != nil:
    section.add "X-Amz-Signature", valid_604761
  var valid_604762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604762 = validateParameter(valid_604762, JString, required = false,
                                 default = nil)
  if valid_604762 != nil:
    section.add "X-Amz-SignedHeaders", valid_604762
  var valid_604763 = header.getOrDefault("X-Amz-Credential")
  valid_604763 = validateParameter(valid_604763, JString, required = false,
                                 default = nil)
  if valid_604763 != nil:
    section.add "X-Amz-Credential", valid_604763
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604764: Call_GetSendEmail_604740; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_604764.validator(path, query, header, formData, body)
  let scheme = call_604764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604764.url(scheme.get, call_604764.host, call_604764.base,
                         call_604764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604764, url, valid)

proc call*(call_604765: Call_GetSendEmail_604740; Source: string;
          ReplyToAddresses: JsonNode = nil; DestinationBccAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; DestinationToAddresses: JsonNode = nil;
          Tags: JsonNode = nil; SourceArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          ReturnPath: string = ""; MessageBody: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: string (required)
  var query_604766 = newJObject()
  if ReplyToAddresses != nil:
    query_604766.add "ReplyToAddresses", ReplyToAddresses
  if DestinationBccAddresses != nil:
    query_604766.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_604766, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_604766.add "Destination.ToAddresses", DestinationToAddresses
  if Tags != nil:
    query_604766.add "Tags", Tags
  add(query_604766, "SourceArn", newJString(SourceArn))
  add(query_604766, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_604766.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_604766, "Message.Subject", newJString(MessageSubject))
  add(query_604766, "Source", newJString(Source))
  add(query_604766, "ReturnPath", newJString(ReturnPath))
  add(query_604766, "Message.Body", newJString(MessageBody))
  add(query_604766, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604766, "Version", newJString(Version))
  result = call_604765.call(nil, query_604766, nil, nil, nil)

var getSendEmail* = Call_GetSendEmail_604740(name: "getSendEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_GetSendEmail_604741, base: "/",
    url: url_GetSendEmail_604742, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendRawEmail_604818 = ref object of OpenApiRestCall_602466
proc url_PostSendRawEmail_604820(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSendRawEmail_604819(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604821 = query.getOrDefault("Action")
  valid_604821 = validateParameter(valid_604821, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_604821 != nil:
    section.add "Action", valid_604821
  var valid_604822 = query.getOrDefault("Version")
  valid_604822 = validateParameter(valid_604822, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604822 != nil:
    section.add "Version", valid_604822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604823 = header.getOrDefault("X-Amz-Date")
  valid_604823 = validateParameter(valid_604823, JString, required = false,
                                 default = nil)
  if valid_604823 != nil:
    section.add "X-Amz-Date", valid_604823
  var valid_604824 = header.getOrDefault("X-Amz-Security-Token")
  valid_604824 = validateParameter(valid_604824, JString, required = false,
                                 default = nil)
  if valid_604824 != nil:
    section.add "X-Amz-Security-Token", valid_604824
  var valid_604825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604825 = validateParameter(valid_604825, JString, required = false,
                                 default = nil)
  if valid_604825 != nil:
    section.add "X-Amz-Content-Sha256", valid_604825
  var valid_604826 = header.getOrDefault("X-Amz-Algorithm")
  valid_604826 = validateParameter(valid_604826, JString, required = false,
                                 default = nil)
  if valid_604826 != nil:
    section.add "X-Amz-Algorithm", valid_604826
  var valid_604827 = header.getOrDefault("X-Amz-Signature")
  valid_604827 = validateParameter(valid_604827, JString, required = false,
                                 default = nil)
  if valid_604827 != nil:
    section.add "X-Amz-Signature", valid_604827
  var valid_604828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604828 = validateParameter(valid_604828, JString, required = false,
                                 default = nil)
  if valid_604828 != nil:
    section.add "X-Amz-SignedHeaders", valid_604828
  var valid_604829 = header.getOrDefault("X-Amz-Credential")
  valid_604829 = validateParameter(valid_604829, JString, required = false,
                                 default = nil)
  if valid_604829 != nil:
    section.add "X-Amz-Credential", valid_604829
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  section = newJObject()
  var valid_604830 = formData.getOrDefault("ConfigurationSetName")
  valid_604830 = validateParameter(valid_604830, JString, required = false,
                                 default = nil)
  if valid_604830 != nil:
    section.add "ConfigurationSetName", valid_604830
  var valid_604831 = formData.getOrDefault("SourceArn")
  valid_604831 = validateParameter(valid_604831, JString, required = false,
                                 default = nil)
  if valid_604831 != nil:
    section.add "SourceArn", valid_604831
  var valid_604832 = formData.getOrDefault("Destinations")
  valid_604832 = validateParameter(valid_604832, JArray, required = false,
                                 default = nil)
  if valid_604832 != nil:
    section.add "Destinations", valid_604832
  var valid_604833 = formData.getOrDefault("FromArn")
  valid_604833 = validateParameter(valid_604833, JString, required = false,
                                 default = nil)
  if valid_604833 != nil:
    section.add "FromArn", valid_604833
  var valid_604834 = formData.getOrDefault("Tags")
  valid_604834 = validateParameter(valid_604834, JArray, required = false,
                                 default = nil)
  if valid_604834 != nil:
    section.add "Tags", valid_604834
  var valid_604835 = formData.getOrDefault("ReturnPathArn")
  valid_604835 = validateParameter(valid_604835, JString, required = false,
                                 default = nil)
  if valid_604835 != nil:
    section.add "ReturnPathArn", valid_604835
  var valid_604836 = formData.getOrDefault("Source")
  valid_604836 = validateParameter(valid_604836, JString, required = false,
                                 default = nil)
  if valid_604836 != nil:
    section.add "Source", valid_604836
  var valid_604837 = formData.getOrDefault("RawMessage.Data")
  valid_604837 = validateParameter(valid_604837, JString, required = false,
                                 default = nil)
  if valid_604837 != nil:
    section.add "RawMessage.Data", valid_604837
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604838: Call_PostSendRawEmail_604818; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_604838.validator(path, query, header, formData, body)
  let scheme = call_604838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604838.url(scheme.get, call_604838.host, call_604838.base,
                         call_604838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604838, url, valid)

proc call*(call_604839: Call_PostSendRawEmail_604818;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          Destinations: JsonNode = nil; FromArn: string = ""; Tags: JsonNode = nil;
          ReturnPathArn: string = ""; Action: string = "SendRawEmail";
          Version: string = "2010-12-01"; Source: string = "";
          RawMessageData: string = ""): Recallable =
  ## postSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  var query_604840 = newJObject()
  var formData_604841 = newJObject()
  add(formData_604841, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604841, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_604841.add "Destinations", Destinations
  add(formData_604841, "FromArn", newJString(FromArn))
  if Tags != nil:
    formData_604841.add "Tags", Tags
  add(formData_604841, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604840, "Action", newJString(Action))
  add(query_604840, "Version", newJString(Version))
  add(formData_604841, "Source", newJString(Source))
  add(formData_604841, "RawMessage.Data", newJString(RawMessageData))
  result = call_604839.call(nil, query_604840, nil, formData_604841, nil)

var postSendRawEmail* = Call_PostSendRawEmail_604818(name: "postSendRawEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_PostSendRawEmail_604819,
    base: "/", url: url_PostSendRawEmail_604820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendRawEmail_604795 = ref object of OpenApiRestCall_602466
proc url_GetSendRawEmail_604797(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSendRawEmail_604796(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: JString (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604798 = query.getOrDefault("FromArn")
  valid_604798 = validateParameter(valid_604798, JString, required = false,
                                 default = nil)
  if valid_604798 != nil:
    section.add "FromArn", valid_604798
  var valid_604799 = query.getOrDefault("RawMessage.Data")
  valid_604799 = validateParameter(valid_604799, JString, required = false,
                                 default = nil)
  if valid_604799 != nil:
    section.add "RawMessage.Data", valid_604799
  var valid_604800 = query.getOrDefault("ReturnPathArn")
  valid_604800 = validateParameter(valid_604800, JString, required = false,
                                 default = nil)
  if valid_604800 != nil:
    section.add "ReturnPathArn", valid_604800
  var valid_604801 = query.getOrDefault("Tags")
  valid_604801 = validateParameter(valid_604801, JArray, required = false,
                                 default = nil)
  if valid_604801 != nil:
    section.add "Tags", valid_604801
  var valid_604802 = query.getOrDefault("SourceArn")
  valid_604802 = validateParameter(valid_604802, JString, required = false,
                                 default = nil)
  if valid_604802 != nil:
    section.add "SourceArn", valid_604802
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604803 = query.getOrDefault("Action")
  valid_604803 = validateParameter(valid_604803, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_604803 != nil:
    section.add "Action", valid_604803
  var valid_604804 = query.getOrDefault("Destinations")
  valid_604804 = validateParameter(valid_604804, JArray, required = false,
                                 default = nil)
  if valid_604804 != nil:
    section.add "Destinations", valid_604804
  var valid_604805 = query.getOrDefault("Source")
  valid_604805 = validateParameter(valid_604805, JString, required = false,
                                 default = nil)
  if valid_604805 != nil:
    section.add "Source", valid_604805
  var valid_604806 = query.getOrDefault("ConfigurationSetName")
  valid_604806 = validateParameter(valid_604806, JString, required = false,
                                 default = nil)
  if valid_604806 != nil:
    section.add "ConfigurationSetName", valid_604806
  var valid_604807 = query.getOrDefault("Version")
  valid_604807 = validateParameter(valid_604807, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604807 != nil:
    section.add "Version", valid_604807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604808 = header.getOrDefault("X-Amz-Date")
  valid_604808 = validateParameter(valid_604808, JString, required = false,
                                 default = nil)
  if valid_604808 != nil:
    section.add "X-Amz-Date", valid_604808
  var valid_604809 = header.getOrDefault("X-Amz-Security-Token")
  valid_604809 = validateParameter(valid_604809, JString, required = false,
                                 default = nil)
  if valid_604809 != nil:
    section.add "X-Amz-Security-Token", valid_604809
  var valid_604810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604810 = validateParameter(valid_604810, JString, required = false,
                                 default = nil)
  if valid_604810 != nil:
    section.add "X-Amz-Content-Sha256", valid_604810
  var valid_604811 = header.getOrDefault("X-Amz-Algorithm")
  valid_604811 = validateParameter(valid_604811, JString, required = false,
                                 default = nil)
  if valid_604811 != nil:
    section.add "X-Amz-Algorithm", valid_604811
  var valid_604812 = header.getOrDefault("X-Amz-Signature")
  valid_604812 = validateParameter(valid_604812, JString, required = false,
                                 default = nil)
  if valid_604812 != nil:
    section.add "X-Amz-Signature", valid_604812
  var valid_604813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604813 = validateParameter(valid_604813, JString, required = false,
                                 default = nil)
  if valid_604813 != nil:
    section.add "X-Amz-SignedHeaders", valid_604813
  var valid_604814 = header.getOrDefault("X-Amz-Credential")
  valid_604814 = validateParameter(valid_604814, JString, required = false,
                                 default = nil)
  if valid_604814 != nil:
    section.add "X-Amz-Credential", valid_604814
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604815: Call_GetSendRawEmail_604795; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_604815.validator(path, query, header, formData, body)
  let scheme = call_604815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604815.url(scheme.get, call_604815.host, call_604815.base,
                         call_604815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604815, url, valid)

proc call*(call_604816: Call_GetSendRawEmail_604795; FromArn: string = "";
          RawMessageData: string = ""; ReturnPathArn: string = ""; Tags: JsonNode = nil;
          SourceArn: string = ""; Action: string = "SendRawEmail";
          Destinations: JsonNode = nil; Source: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: string (required)
  var query_604817 = newJObject()
  add(query_604817, "FromArn", newJString(FromArn))
  add(query_604817, "RawMessage.Data", newJString(RawMessageData))
  add(query_604817, "ReturnPathArn", newJString(ReturnPathArn))
  if Tags != nil:
    query_604817.add "Tags", Tags
  add(query_604817, "SourceArn", newJString(SourceArn))
  add(query_604817, "Action", newJString(Action))
  if Destinations != nil:
    query_604817.add "Destinations", Destinations
  add(query_604817, "Source", newJString(Source))
  add(query_604817, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604817, "Version", newJString(Version))
  result = call_604816.call(nil, query_604817, nil, nil, nil)

var getSendRawEmail* = Call_GetSendRawEmail_604795(name: "getSendRawEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_GetSendRawEmail_604796,
    base: "/", url: url_GetSendRawEmail_604797, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendTemplatedEmail_604870 = ref object of OpenApiRestCall_602466
proc url_PostSendTemplatedEmail_604872(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSendTemplatedEmail_604871(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604873 = query.getOrDefault("Action")
  valid_604873 = validateParameter(valid_604873, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_604873 != nil:
    section.add "Action", valid_604873
  var valid_604874 = query.getOrDefault("Version")
  valid_604874 = validateParameter(valid_604874, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604874 != nil:
    section.add "Version", valid_604874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604875 = header.getOrDefault("X-Amz-Date")
  valid_604875 = validateParameter(valid_604875, JString, required = false,
                                 default = nil)
  if valid_604875 != nil:
    section.add "X-Amz-Date", valid_604875
  var valid_604876 = header.getOrDefault("X-Amz-Security-Token")
  valid_604876 = validateParameter(valid_604876, JString, required = false,
                                 default = nil)
  if valid_604876 != nil:
    section.add "X-Amz-Security-Token", valid_604876
  var valid_604877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604877 = validateParameter(valid_604877, JString, required = false,
                                 default = nil)
  if valid_604877 != nil:
    section.add "X-Amz-Content-Sha256", valid_604877
  var valid_604878 = header.getOrDefault("X-Amz-Algorithm")
  valid_604878 = validateParameter(valid_604878, JString, required = false,
                                 default = nil)
  if valid_604878 != nil:
    section.add "X-Amz-Algorithm", valid_604878
  var valid_604879 = header.getOrDefault("X-Amz-Signature")
  valid_604879 = validateParameter(valid_604879, JString, required = false,
                                 default = nil)
  if valid_604879 != nil:
    section.add "X-Amz-Signature", valid_604879
  var valid_604880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604880 = validateParameter(valid_604880, JString, required = false,
                                 default = nil)
  if valid_604880 != nil:
    section.add "X-Amz-SignedHeaders", valid_604880
  var valid_604881 = header.getOrDefault("X-Amz-Credential")
  valid_604881 = validateParameter(valid_604881, JString, required = false,
                                 default = nil)
  if valid_604881 != nil:
    section.add "X-Amz-Credential", valid_604881
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_604882 = formData.getOrDefault("ConfigurationSetName")
  valid_604882 = validateParameter(valid_604882, JString, required = false,
                                 default = nil)
  if valid_604882 != nil:
    section.add "ConfigurationSetName", valid_604882
  var valid_604883 = formData.getOrDefault("SourceArn")
  valid_604883 = validateParameter(valid_604883, JString, required = false,
                                 default = nil)
  if valid_604883 != nil:
    section.add "SourceArn", valid_604883
  var valid_604884 = formData.getOrDefault("Destination.BccAddresses")
  valid_604884 = validateParameter(valid_604884, JArray, required = false,
                                 default = nil)
  if valid_604884 != nil:
    section.add "Destination.BccAddresses", valid_604884
  var valid_604885 = formData.getOrDefault("ReplyToAddresses")
  valid_604885 = validateParameter(valid_604885, JArray, required = false,
                                 default = nil)
  if valid_604885 != nil:
    section.add "ReplyToAddresses", valid_604885
  assert formData != nil,
        "formData argument is necessary due to required `Template` field"
  var valid_604886 = formData.getOrDefault("Template")
  valid_604886 = validateParameter(valid_604886, JString, required = true,
                                 default = nil)
  if valid_604886 != nil:
    section.add "Template", valid_604886
  var valid_604887 = formData.getOrDefault("TemplateData")
  valid_604887 = validateParameter(valid_604887, JString, required = true,
                                 default = nil)
  if valid_604887 != nil:
    section.add "TemplateData", valid_604887
  var valid_604888 = formData.getOrDefault("Tags")
  valid_604888 = validateParameter(valid_604888, JArray, required = false,
                                 default = nil)
  if valid_604888 != nil:
    section.add "Tags", valid_604888
  var valid_604889 = formData.getOrDefault("ReturnPath")
  valid_604889 = validateParameter(valid_604889, JString, required = false,
                                 default = nil)
  if valid_604889 != nil:
    section.add "ReturnPath", valid_604889
  var valid_604890 = formData.getOrDefault("ReturnPathArn")
  valid_604890 = validateParameter(valid_604890, JString, required = false,
                                 default = nil)
  if valid_604890 != nil:
    section.add "ReturnPathArn", valid_604890
  var valid_604891 = formData.getOrDefault("TemplateArn")
  valid_604891 = validateParameter(valid_604891, JString, required = false,
                                 default = nil)
  if valid_604891 != nil:
    section.add "TemplateArn", valid_604891
  var valid_604892 = formData.getOrDefault("Destination.CcAddresses")
  valid_604892 = validateParameter(valid_604892, JArray, required = false,
                                 default = nil)
  if valid_604892 != nil:
    section.add "Destination.CcAddresses", valid_604892
  var valid_604893 = formData.getOrDefault("Source")
  valid_604893 = validateParameter(valid_604893, JString, required = true,
                                 default = nil)
  if valid_604893 != nil:
    section.add "Source", valid_604893
  var valid_604894 = formData.getOrDefault("Destination.ToAddresses")
  valid_604894 = validateParameter(valid_604894, JArray, required = false,
                                 default = nil)
  if valid_604894 != nil:
    section.add "Destination.ToAddresses", valid_604894
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604895: Call_PostSendTemplatedEmail_604870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_604895.validator(path, query, header, formData, body)
  let scheme = call_604895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604895.url(scheme.get, call_604895.host, call_604895.base,
                         call_604895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604895, url, valid)

proc call*(call_604896: Call_PostSendTemplatedEmail_604870; Template: string;
          TemplateData: string; Source: string; ConfigurationSetName: string = "";
          SourceArn: string = ""; DestinationBccAddresses: JsonNode = nil;
          ReplyToAddresses: JsonNode = nil; Tags: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendTemplatedEmail"; TemplateArn: string = "";
          DestinationCcAddresses: JsonNode = nil; Version: string = "2010-12-01";
          DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_604897 = newJObject()
  var formData_604898 = newJObject()
  add(formData_604898, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604898, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_604898.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_604898.add "ReplyToAddresses", ReplyToAddresses
  add(formData_604898, "Template", newJString(Template))
  add(formData_604898, "TemplateData", newJString(TemplateData))
  if Tags != nil:
    formData_604898.add "Tags", Tags
  add(formData_604898, "ReturnPath", newJString(ReturnPath))
  add(formData_604898, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604897, "Action", newJString(Action))
  add(formData_604898, "TemplateArn", newJString(TemplateArn))
  if DestinationCcAddresses != nil:
    formData_604898.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_604897, "Version", newJString(Version))
  add(formData_604898, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_604898.add "Destination.ToAddresses", DestinationToAddresses
  result = call_604896.call(nil, query_604897, nil, formData_604898, nil)

var postSendTemplatedEmail* = Call_PostSendTemplatedEmail_604870(
    name: "postSendTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_PostSendTemplatedEmail_604871, base: "/",
    url: url_PostSendTemplatedEmail_604872, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendTemplatedEmail_604842 = ref object of OpenApiRestCall_602466
proc url_GetSendTemplatedEmail_604844(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSendTemplatedEmail_604843(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604845 = query.getOrDefault("ReplyToAddresses")
  valid_604845 = validateParameter(valid_604845, JArray, required = false,
                                 default = nil)
  if valid_604845 != nil:
    section.add "ReplyToAddresses", valid_604845
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_604846 = query.getOrDefault("Template")
  valid_604846 = validateParameter(valid_604846, JString, required = true,
                                 default = nil)
  if valid_604846 != nil:
    section.add "Template", valid_604846
  var valid_604847 = query.getOrDefault("Destination.BccAddresses")
  valid_604847 = validateParameter(valid_604847, JArray, required = false,
                                 default = nil)
  if valid_604847 != nil:
    section.add "Destination.BccAddresses", valid_604847
  var valid_604848 = query.getOrDefault("ReturnPathArn")
  valid_604848 = validateParameter(valid_604848, JString, required = false,
                                 default = nil)
  if valid_604848 != nil:
    section.add "ReturnPathArn", valid_604848
  var valid_604849 = query.getOrDefault("Destination.ToAddresses")
  valid_604849 = validateParameter(valid_604849, JArray, required = false,
                                 default = nil)
  if valid_604849 != nil:
    section.add "Destination.ToAddresses", valid_604849
  var valid_604850 = query.getOrDefault("TemplateArn")
  valid_604850 = validateParameter(valid_604850, JString, required = false,
                                 default = nil)
  if valid_604850 != nil:
    section.add "TemplateArn", valid_604850
  var valid_604851 = query.getOrDefault("Tags")
  valid_604851 = validateParameter(valid_604851, JArray, required = false,
                                 default = nil)
  if valid_604851 != nil:
    section.add "Tags", valid_604851
  var valid_604852 = query.getOrDefault("SourceArn")
  valid_604852 = validateParameter(valid_604852, JString, required = false,
                                 default = nil)
  if valid_604852 != nil:
    section.add "SourceArn", valid_604852
  var valid_604853 = query.getOrDefault("TemplateData")
  valid_604853 = validateParameter(valid_604853, JString, required = true,
                                 default = nil)
  if valid_604853 != nil:
    section.add "TemplateData", valid_604853
  var valid_604854 = query.getOrDefault("Action")
  valid_604854 = validateParameter(valid_604854, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_604854 != nil:
    section.add "Action", valid_604854
  var valid_604855 = query.getOrDefault("Destination.CcAddresses")
  valid_604855 = validateParameter(valid_604855, JArray, required = false,
                                 default = nil)
  if valid_604855 != nil:
    section.add "Destination.CcAddresses", valid_604855
  var valid_604856 = query.getOrDefault("Source")
  valid_604856 = validateParameter(valid_604856, JString, required = true,
                                 default = nil)
  if valid_604856 != nil:
    section.add "Source", valid_604856
  var valid_604857 = query.getOrDefault("ReturnPath")
  valid_604857 = validateParameter(valid_604857, JString, required = false,
                                 default = nil)
  if valid_604857 != nil:
    section.add "ReturnPath", valid_604857
  var valid_604858 = query.getOrDefault("ConfigurationSetName")
  valid_604858 = validateParameter(valid_604858, JString, required = false,
                                 default = nil)
  if valid_604858 != nil:
    section.add "ConfigurationSetName", valid_604858
  var valid_604859 = query.getOrDefault("Version")
  valid_604859 = validateParameter(valid_604859, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604859 != nil:
    section.add "Version", valid_604859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604860 = header.getOrDefault("X-Amz-Date")
  valid_604860 = validateParameter(valid_604860, JString, required = false,
                                 default = nil)
  if valid_604860 != nil:
    section.add "X-Amz-Date", valid_604860
  var valid_604861 = header.getOrDefault("X-Amz-Security-Token")
  valid_604861 = validateParameter(valid_604861, JString, required = false,
                                 default = nil)
  if valid_604861 != nil:
    section.add "X-Amz-Security-Token", valid_604861
  var valid_604862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604862 = validateParameter(valid_604862, JString, required = false,
                                 default = nil)
  if valid_604862 != nil:
    section.add "X-Amz-Content-Sha256", valid_604862
  var valid_604863 = header.getOrDefault("X-Amz-Algorithm")
  valid_604863 = validateParameter(valid_604863, JString, required = false,
                                 default = nil)
  if valid_604863 != nil:
    section.add "X-Amz-Algorithm", valid_604863
  var valid_604864 = header.getOrDefault("X-Amz-Signature")
  valid_604864 = validateParameter(valid_604864, JString, required = false,
                                 default = nil)
  if valid_604864 != nil:
    section.add "X-Amz-Signature", valid_604864
  var valid_604865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604865 = validateParameter(valid_604865, JString, required = false,
                                 default = nil)
  if valid_604865 != nil:
    section.add "X-Amz-SignedHeaders", valid_604865
  var valid_604866 = header.getOrDefault("X-Amz-Credential")
  valid_604866 = validateParameter(valid_604866, JString, required = false,
                                 default = nil)
  if valid_604866 != nil:
    section.add "X-Amz-Credential", valid_604866
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604867: Call_GetSendTemplatedEmail_604842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_604867.validator(path, query, header, formData, body)
  let scheme = call_604867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604867.url(scheme.get, call_604867.host, call_604867.base,
                         call_604867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604867, url, valid)

proc call*(call_604868: Call_GetSendTemplatedEmail_604842; Template: string;
          TemplateData: string; Source: string; ReplyToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; ReturnPathArn: string = "";
          DestinationToAddresses: JsonNode = nil; TemplateArn: string = "";
          Tags: JsonNode = nil; SourceArn: string = "";
          Action: string = "SendTemplatedEmail";
          DestinationCcAddresses: JsonNode = nil; ReturnPath: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: string (required)
  var query_604869 = newJObject()
  if ReplyToAddresses != nil:
    query_604869.add "ReplyToAddresses", ReplyToAddresses
  add(query_604869, "Template", newJString(Template))
  if DestinationBccAddresses != nil:
    query_604869.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_604869, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_604869.add "Destination.ToAddresses", DestinationToAddresses
  add(query_604869, "TemplateArn", newJString(TemplateArn))
  if Tags != nil:
    query_604869.add "Tags", Tags
  add(query_604869, "SourceArn", newJString(SourceArn))
  add(query_604869, "TemplateData", newJString(TemplateData))
  add(query_604869, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_604869.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_604869, "Source", newJString(Source))
  add(query_604869, "ReturnPath", newJString(ReturnPath))
  add(query_604869, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604869, "Version", newJString(Version))
  result = call_604868.call(nil, query_604869, nil, nil, nil)

var getSendTemplatedEmail* = Call_GetSendTemplatedEmail_604842(
    name: "getSendTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_GetSendTemplatedEmail_604843, base: "/",
    url: url_GetSendTemplatedEmail_604844, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetActiveReceiptRuleSet_604915 = ref object of OpenApiRestCall_602466
proc url_PostSetActiveReceiptRuleSet_604917(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetActiveReceiptRuleSet_604916(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604918 = query.getOrDefault("Action")
  valid_604918 = validateParameter(valid_604918, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_604918 != nil:
    section.add "Action", valid_604918
  var valid_604919 = query.getOrDefault("Version")
  valid_604919 = validateParameter(valid_604919, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604919 != nil:
    section.add "Version", valid_604919
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604920 = header.getOrDefault("X-Amz-Date")
  valid_604920 = validateParameter(valid_604920, JString, required = false,
                                 default = nil)
  if valid_604920 != nil:
    section.add "X-Amz-Date", valid_604920
  var valid_604921 = header.getOrDefault("X-Amz-Security-Token")
  valid_604921 = validateParameter(valid_604921, JString, required = false,
                                 default = nil)
  if valid_604921 != nil:
    section.add "X-Amz-Security-Token", valid_604921
  var valid_604922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604922 = validateParameter(valid_604922, JString, required = false,
                                 default = nil)
  if valid_604922 != nil:
    section.add "X-Amz-Content-Sha256", valid_604922
  var valid_604923 = header.getOrDefault("X-Amz-Algorithm")
  valid_604923 = validateParameter(valid_604923, JString, required = false,
                                 default = nil)
  if valid_604923 != nil:
    section.add "X-Amz-Algorithm", valid_604923
  var valid_604924 = header.getOrDefault("X-Amz-Signature")
  valid_604924 = validateParameter(valid_604924, JString, required = false,
                                 default = nil)
  if valid_604924 != nil:
    section.add "X-Amz-Signature", valid_604924
  var valid_604925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604925 = validateParameter(valid_604925, JString, required = false,
                                 default = nil)
  if valid_604925 != nil:
    section.add "X-Amz-SignedHeaders", valid_604925
  var valid_604926 = header.getOrDefault("X-Amz-Credential")
  valid_604926 = validateParameter(valid_604926, JString, required = false,
                                 default = nil)
  if valid_604926 != nil:
    section.add "X-Amz-Credential", valid_604926
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  section = newJObject()
  var valid_604927 = formData.getOrDefault("RuleSetName")
  valid_604927 = validateParameter(valid_604927, JString, required = false,
                                 default = nil)
  if valid_604927 != nil:
    section.add "RuleSetName", valid_604927
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604928: Call_PostSetActiveReceiptRuleSet_604915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604928.validator(path, query, header, formData, body)
  let scheme = call_604928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604928.url(scheme.get, call_604928.host, call_604928.base,
                         call_604928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604928, url, valid)

proc call*(call_604929: Call_PostSetActiveReceiptRuleSet_604915;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604930 = newJObject()
  var formData_604931 = newJObject()
  add(formData_604931, "RuleSetName", newJString(RuleSetName))
  add(query_604930, "Action", newJString(Action))
  add(query_604930, "Version", newJString(Version))
  result = call_604929.call(nil, query_604930, nil, formData_604931, nil)

var postSetActiveReceiptRuleSet* = Call_PostSetActiveReceiptRuleSet_604915(
    name: "postSetActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_PostSetActiveReceiptRuleSet_604916, base: "/",
    url: url_PostSetActiveReceiptRuleSet_604917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetActiveReceiptRuleSet_604899 = ref object of OpenApiRestCall_602466
proc url_GetSetActiveReceiptRuleSet_604901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetActiveReceiptRuleSet_604900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604902 = query.getOrDefault("RuleSetName")
  valid_604902 = validateParameter(valid_604902, JString, required = false,
                                 default = nil)
  if valid_604902 != nil:
    section.add "RuleSetName", valid_604902
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604903 = query.getOrDefault("Action")
  valid_604903 = validateParameter(valid_604903, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_604903 != nil:
    section.add "Action", valid_604903
  var valid_604904 = query.getOrDefault("Version")
  valid_604904 = validateParameter(valid_604904, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604904 != nil:
    section.add "Version", valid_604904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604905 = header.getOrDefault("X-Amz-Date")
  valid_604905 = validateParameter(valid_604905, JString, required = false,
                                 default = nil)
  if valid_604905 != nil:
    section.add "X-Amz-Date", valid_604905
  var valid_604906 = header.getOrDefault("X-Amz-Security-Token")
  valid_604906 = validateParameter(valid_604906, JString, required = false,
                                 default = nil)
  if valid_604906 != nil:
    section.add "X-Amz-Security-Token", valid_604906
  var valid_604907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604907 = validateParameter(valid_604907, JString, required = false,
                                 default = nil)
  if valid_604907 != nil:
    section.add "X-Amz-Content-Sha256", valid_604907
  var valid_604908 = header.getOrDefault("X-Amz-Algorithm")
  valid_604908 = validateParameter(valid_604908, JString, required = false,
                                 default = nil)
  if valid_604908 != nil:
    section.add "X-Amz-Algorithm", valid_604908
  var valid_604909 = header.getOrDefault("X-Amz-Signature")
  valid_604909 = validateParameter(valid_604909, JString, required = false,
                                 default = nil)
  if valid_604909 != nil:
    section.add "X-Amz-Signature", valid_604909
  var valid_604910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604910 = validateParameter(valid_604910, JString, required = false,
                                 default = nil)
  if valid_604910 != nil:
    section.add "X-Amz-SignedHeaders", valid_604910
  var valid_604911 = header.getOrDefault("X-Amz-Credential")
  valid_604911 = validateParameter(valid_604911, JString, required = false,
                                 default = nil)
  if valid_604911 != nil:
    section.add "X-Amz-Credential", valid_604911
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604912: Call_GetSetActiveReceiptRuleSet_604899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604912.validator(path, query, header, formData, body)
  let scheme = call_604912.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604912.url(scheme.get, call_604912.host, call_604912.base,
                         call_604912.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604912, url, valid)

proc call*(call_604913: Call_GetSetActiveReceiptRuleSet_604899;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604914 = newJObject()
  add(query_604914, "RuleSetName", newJString(RuleSetName))
  add(query_604914, "Action", newJString(Action))
  add(query_604914, "Version", newJString(Version))
  result = call_604913.call(nil, query_604914, nil, nil, nil)

var getSetActiveReceiptRuleSet* = Call_GetSetActiveReceiptRuleSet_604899(
    name: "getSetActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_GetSetActiveReceiptRuleSet_604900, base: "/",
    url: url_GetSetActiveReceiptRuleSet_604901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityDkimEnabled_604949 = ref object of OpenApiRestCall_602466
proc url_PostSetIdentityDkimEnabled_604951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetIdentityDkimEnabled_604950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604952 = query.getOrDefault("Action")
  valid_604952 = validateParameter(valid_604952, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_604952 != nil:
    section.add "Action", valid_604952
  var valid_604953 = query.getOrDefault("Version")
  valid_604953 = validateParameter(valid_604953, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604953 != nil:
    section.add "Version", valid_604953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604954 = header.getOrDefault("X-Amz-Date")
  valid_604954 = validateParameter(valid_604954, JString, required = false,
                                 default = nil)
  if valid_604954 != nil:
    section.add "X-Amz-Date", valid_604954
  var valid_604955 = header.getOrDefault("X-Amz-Security-Token")
  valid_604955 = validateParameter(valid_604955, JString, required = false,
                                 default = nil)
  if valid_604955 != nil:
    section.add "X-Amz-Security-Token", valid_604955
  var valid_604956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604956 = validateParameter(valid_604956, JString, required = false,
                                 default = nil)
  if valid_604956 != nil:
    section.add "X-Amz-Content-Sha256", valid_604956
  var valid_604957 = header.getOrDefault("X-Amz-Algorithm")
  valid_604957 = validateParameter(valid_604957, JString, required = false,
                                 default = nil)
  if valid_604957 != nil:
    section.add "X-Amz-Algorithm", valid_604957
  var valid_604958 = header.getOrDefault("X-Amz-Signature")
  valid_604958 = validateParameter(valid_604958, JString, required = false,
                                 default = nil)
  if valid_604958 != nil:
    section.add "X-Amz-Signature", valid_604958
  var valid_604959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604959 = validateParameter(valid_604959, JString, required = false,
                                 default = nil)
  if valid_604959 != nil:
    section.add "X-Amz-SignedHeaders", valid_604959
  var valid_604960 = header.getOrDefault("X-Amz-Credential")
  valid_604960 = validateParameter(valid_604960, JString, required = false,
                                 default = nil)
  if valid_604960 != nil:
    section.add "X-Amz-Credential", valid_604960
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_604961 = formData.getOrDefault("Identity")
  valid_604961 = validateParameter(valid_604961, JString, required = true,
                                 default = nil)
  if valid_604961 != nil:
    section.add "Identity", valid_604961
  var valid_604962 = formData.getOrDefault("DkimEnabled")
  valid_604962 = validateParameter(valid_604962, JBool, required = true, default = nil)
  if valid_604962 != nil:
    section.add "DkimEnabled", valid_604962
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604963: Call_PostSetIdentityDkimEnabled_604949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604963.validator(path, query, header, formData, body)
  let scheme = call_604963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604963.url(scheme.get, call_604963.host, call_604963.base,
                         call_604963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604963, url, valid)

proc call*(call_604964: Call_PostSetIdentityDkimEnabled_604949; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: string (required)
  var query_604965 = newJObject()
  var formData_604966 = newJObject()
  add(formData_604966, "Identity", newJString(Identity))
  add(query_604965, "Action", newJString(Action))
  add(formData_604966, "DkimEnabled", newJBool(DkimEnabled))
  add(query_604965, "Version", newJString(Version))
  result = call_604964.call(nil, query_604965, nil, formData_604966, nil)

var postSetIdentityDkimEnabled* = Call_PostSetIdentityDkimEnabled_604949(
    name: "postSetIdentityDkimEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_PostSetIdentityDkimEnabled_604950, base: "/",
    url: url_PostSetIdentityDkimEnabled_604951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityDkimEnabled_604932 = ref object of OpenApiRestCall_602466
proc url_GetSetIdentityDkimEnabled_604934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetIdentityDkimEnabled_604933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604935 = query.getOrDefault("Identity")
  valid_604935 = validateParameter(valid_604935, JString, required = true,
                                 default = nil)
  if valid_604935 != nil:
    section.add "Identity", valid_604935
  var valid_604936 = query.getOrDefault("DkimEnabled")
  valid_604936 = validateParameter(valid_604936, JBool, required = true, default = nil)
  if valid_604936 != nil:
    section.add "DkimEnabled", valid_604936
  var valid_604937 = query.getOrDefault("Action")
  valid_604937 = validateParameter(valid_604937, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_604937 != nil:
    section.add "Action", valid_604937
  var valid_604938 = query.getOrDefault("Version")
  valid_604938 = validateParameter(valid_604938, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604938 != nil:
    section.add "Version", valid_604938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604939 = header.getOrDefault("X-Amz-Date")
  valid_604939 = validateParameter(valid_604939, JString, required = false,
                                 default = nil)
  if valid_604939 != nil:
    section.add "X-Amz-Date", valid_604939
  var valid_604940 = header.getOrDefault("X-Amz-Security-Token")
  valid_604940 = validateParameter(valid_604940, JString, required = false,
                                 default = nil)
  if valid_604940 != nil:
    section.add "X-Amz-Security-Token", valid_604940
  var valid_604941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604941 = validateParameter(valid_604941, JString, required = false,
                                 default = nil)
  if valid_604941 != nil:
    section.add "X-Amz-Content-Sha256", valid_604941
  var valid_604942 = header.getOrDefault("X-Amz-Algorithm")
  valid_604942 = validateParameter(valid_604942, JString, required = false,
                                 default = nil)
  if valid_604942 != nil:
    section.add "X-Amz-Algorithm", valid_604942
  var valid_604943 = header.getOrDefault("X-Amz-Signature")
  valid_604943 = validateParameter(valid_604943, JString, required = false,
                                 default = nil)
  if valid_604943 != nil:
    section.add "X-Amz-Signature", valid_604943
  var valid_604944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604944 = validateParameter(valid_604944, JString, required = false,
                                 default = nil)
  if valid_604944 != nil:
    section.add "X-Amz-SignedHeaders", valid_604944
  var valid_604945 = header.getOrDefault("X-Amz-Credential")
  valid_604945 = validateParameter(valid_604945, JString, required = false,
                                 default = nil)
  if valid_604945 != nil:
    section.add "X-Amz-Credential", valid_604945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604946: Call_GetSetIdentityDkimEnabled_604932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604946.validator(path, query, header, formData, body)
  let scheme = call_604946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604946.url(scheme.get, call_604946.host, call_604946.base,
                         call_604946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604946, url, valid)

proc call*(call_604947: Call_GetSetIdentityDkimEnabled_604932; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604948 = newJObject()
  add(query_604948, "Identity", newJString(Identity))
  add(query_604948, "DkimEnabled", newJBool(DkimEnabled))
  add(query_604948, "Action", newJString(Action))
  add(query_604948, "Version", newJString(Version))
  result = call_604947.call(nil, query_604948, nil, nil, nil)

var getSetIdentityDkimEnabled* = Call_GetSetIdentityDkimEnabled_604932(
    name: "getSetIdentityDkimEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_GetSetIdentityDkimEnabled_604933, base: "/",
    url: url_GetSetIdentityDkimEnabled_604934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityFeedbackForwardingEnabled_604984 = ref object of OpenApiRestCall_602466
proc url_PostSetIdentityFeedbackForwardingEnabled_604986(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetIdentityFeedbackForwardingEnabled_604985(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604987 = query.getOrDefault("Action")
  valid_604987 = validateParameter(valid_604987, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_604987 != nil:
    section.add "Action", valid_604987
  var valid_604988 = query.getOrDefault("Version")
  valid_604988 = validateParameter(valid_604988, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604988 != nil:
    section.add "Version", valid_604988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604989 = header.getOrDefault("X-Amz-Date")
  valid_604989 = validateParameter(valid_604989, JString, required = false,
                                 default = nil)
  if valid_604989 != nil:
    section.add "X-Amz-Date", valid_604989
  var valid_604990 = header.getOrDefault("X-Amz-Security-Token")
  valid_604990 = validateParameter(valid_604990, JString, required = false,
                                 default = nil)
  if valid_604990 != nil:
    section.add "X-Amz-Security-Token", valid_604990
  var valid_604991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604991 = validateParameter(valid_604991, JString, required = false,
                                 default = nil)
  if valid_604991 != nil:
    section.add "X-Amz-Content-Sha256", valid_604991
  var valid_604992 = header.getOrDefault("X-Amz-Algorithm")
  valid_604992 = validateParameter(valid_604992, JString, required = false,
                                 default = nil)
  if valid_604992 != nil:
    section.add "X-Amz-Algorithm", valid_604992
  var valid_604993 = header.getOrDefault("X-Amz-Signature")
  valid_604993 = validateParameter(valid_604993, JString, required = false,
                                 default = nil)
  if valid_604993 != nil:
    section.add "X-Amz-Signature", valid_604993
  var valid_604994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604994 = validateParameter(valid_604994, JString, required = false,
                                 default = nil)
  if valid_604994 != nil:
    section.add "X-Amz-SignedHeaders", valid_604994
  var valid_604995 = header.getOrDefault("X-Amz-Credential")
  valid_604995 = validateParameter(valid_604995, JString, required = false,
                                 default = nil)
  if valid_604995 != nil:
    section.add "X-Amz-Credential", valid_604995
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_604996 = formData.getOrDefault("Identity")
  valid_604996 = validateParameter(valid_604996, JString, required = true,
                                 default = nil)
  if valid_604996 != nil:
    section.add "Identity", valid_604996
  var valid_604997 = formData.getOrDefault("ForwardingEnabled")
  valid_604997 = validateParameter(valid_604997, JBool, required = true, default = nil)
  if valid_604997 != nil:
    section.add "ForwardingEnabled", valid_604997
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604998: Call_PostSetIdentityFeedbackForwardingEnabled_604984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604998.validator(path, query, header, formData, body)
  let scheme = call_604998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604998.url(scheme.get, call_604998.host, call_604998.base,
                         call_604998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604998, url, valid)

proc call*(call_604999: Call_PostSetIdentityFeedbackForwardingEnabled_604984;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  var query_605000 = newJObject()
  var formData_605001 = newJObject()
  add(formData_605001, "Identity", newJString(Identity))
  add(query_605000, "Action", newJString(Action))
  add(query_605000, "Version", newJString(Version))
  add(formData_605001, "ForwardingEnabled", newJBool(ForwardingEnabled))
  result = call_604999.call(nil, query_605000, nil, formData_605001, nil)

var postSetIdentityFeedbackForwardingEnabled* = Call_PostSetIdentityFeedbackForwardingEnabled_604984(
    name: "postSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_PostSetIdentityFeedbackForwardingEnabled_604985,
    base: "/", url: url_PostSetIdentityFeedbackForwardingEnabled_604986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityFeedbackForwardingEnabled_604967 = ref object of OpenApiRestCall_602466
proc url_GetSetIdentityFeedbackForwardingEnabled_604969(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetIdentityFeedbackForwardingEnabled_604968(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604970 = query.getOrDefault("Identity")
  valid_604970 = validateParameter(valid_604970, JString, required = true,
                                 default = nil)
  if valid_604970 != nil:
    section.add "Identity", valid_604970
  var valid_604971 = query.getOrDefault("ForwardingEnabled")
  valid_604971 = validateParameter(valid_604971, JBool, required = true, default = nil)
  if valid_604971 != nil:
    section.add "ForwardingEnabled", valid_604971
  var valid_604972 = query.getOrDefault("Action")
  valid_604972 = validateParameter(valid_604972, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_604972 != nil:
    section.add "Action", valid_604972
  var valid_604973 = query.getOrDefault("Version")
  valid_604973 = validateParameter(valid_604973, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604973 != nil:
    section.add "Version", valid_604973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604974 = header.getOrDefault("X-Amz-Date")
  valid_604974 = validateParameter(valid_604974, JString, required = false,
                                 default = nil)
  if valid_604974 != nil:
    section.add "X-Amz-Date", valid_604974
  var valid_604975 = header.getOrDefault("X-Amz-Security-Token")
  valid_604975 = validateParameter(valid_604975, JString, required = false,
                                 default = nil)
  if valid_604975 != nil:
    section.add "X-Amz-Security-Token", valid_604975
  var valid_604976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604976 = validateParameter(valid_604976, JString, required = false,
                                 default = nil)
  if valid_604976 != nil:
    section.add "X-Amz-Content-Sha256", valid_604976
  var valid_604977 = header.getOrDefault("X-Amz-Algorithm")
  valid_604977 = validateParameter(valid_604977, JString, required = false,
                                 default = nil)
  if valid_604977 != nil:
    section.add "X-Amz-Algorithm", valid_604977
  var valid_604978 = header.getOrDefault("X-Amz-Signature")
  valid_604978 = validateParameter(valid_604978, JString, required = false,
                                 default = nil)
  if valid_604978 != nil:
    section.add "X-Amz-Signature", valid_604978
  var valid_604979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604979 = validateParameter(valid_604979, JString, required = false,
                                 default = nil)
  if valid_604979 != nil:
    section.add "X-Amz-SignedHeaders", valid_604979
  var valid_604980 = header.getOrDefault("X-Amz-Credential")
  valid_604980 = validateParameter(valid_604980, JString, required = false,
                                 default = nil)
  if valid_604980 != nil:
    section.add "X-Amz-Credential", valid_604980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604981: Call_GetSetIdentityFeedbackForwardingEnabled_604967;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604981.validator(path, query, header, formData, body)
  let scheme = call_604981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604981.url(scheme.get, call_604981.host, call_604981.base,
                         call_604981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604981, url, valid)

proc call*(call_604982: Call_GetSetIdentityFeedbackForwardingEnabled_604967;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604983 = newJObject()
  add(query_604983, "Identity", newJString(Identity))
  add(query_604983, "ForwardingEnabled", newJBool(ForwardingEnabled))
  add(query_604983, "Action", newJString(Action))
  add(query_604983, "Version", newJString(Version))
  result = call_604982.call(nil, query_604983, nil, nil, nil)

var getSetIdentityFeedbackForwardingEnabled* = Call_GetSetIdentityFeedbackForwardingEnabled_604967(
    name: "getSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_GetSetIdentityFeedbackForwardingEnabled_604968, base: "/",
    url: url_GetSetIdentityFeedbackForwardingEnabled_604969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityHeadersInNotificationsEnabled_605020 = ref object of OpenApiRestCall_602466
proc url_PostSetIdentityHeadersInNotificationsEnabled_605022(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetIdentityHeadersInNotificationsEnabled_605021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605023 = query.getOrDefault("Action")
  valid_605023 = validateParameter(valid_605023, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_605023 != nil:
    section.add "Action", valid_605023
  var valid_605024 = query.getOrDefault("Version")
  valid_605024 = validateParameter(valid_605024, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605024 != nil:
    section.add "Version", valid_605024
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605025 = header.getOrDefault("X-Amz-Date")
  valid_605025 = validateParameter(valid_605025, JString, required = false,
                                 default = nil)
  if valid_605025 != nil:
    section.add "X-Amz-Date", valid_605025
  var valid_605026 = header.getOrDefault("X-Amz-Security-Token")
  valid_605026 = validateParameter(valid_605026, JString, required = false,
                                 default = nil)
  if valid_605026 != nil:
    section.add "X-Amz-Security-Token", valid_605026
  var valid_605027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605027 = validateParameter(valid_605027, JString, required = false,
                                 default = nil)
  if valid_605027 != nil:
    section.add "X-Amz-Content-Sha256", valid_605027
  var valid_605028 = header.getOrDefault("X-Amz-Algorithm")
  valid_605028 = validateParameter(valid_605028, JString, required = false,
                                 default = nil)
  if valid_605028 != nil:
    section.add "X-Amz-Algorithm", valid_605028
  var valid_605029 = header.getOrDefault("X-Amz-Signature")
  valid_605029 = validateParameter(valid_605029, JString, required = false,
                                 default = nil)
  if valid_605029 != nil:
    section.add "X-Amz-Signature", valid_605029
  var valid_605030 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605030 = validateParameter(valid_605030, JString, required = false,
                                 default = nil)
  if valid_605030 != nil:
    section.add "X-Amz-SignedHeaders", valid_605030
  var valid_605031 = header.getOrDefault("X-Amz-Credential")
  valid_605031 = validateParameter(valid_605031, JString, required = false,
                                 default = nil)
  if valid_605031 != nil:
    section.add "X-Amz-Credential", valid_605031
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_605032 = formData.getOrDefault("Enabled")
  valid_605032 = validateParameter(valid_605032, JBool, required = true, default = nil)
  if valid_605032 != nil:
    section.add "Enabled", valid_605032
  var valid_605033 = formData.getOrDefault("Identity")
  valid_605033 = validateParameter(valid_605033, JString, required = true,
                                 default = nil)
  if valid_605033 != nil:
    section.add "Identity", valid_605033
  var valid_605034 = formData.getOrDefault("NotificationType")
  valid_605034 = validateParameter(valid_605034, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_605034 != nil:
    section.add "NotificationType", valid_605034
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605035: Call_PostSetIdentityHeadersInNotificationsEnabled_605020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605035.validator(path, query, header, formData, body)
  let scheme = call_605035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605035.url(scheme.get, call_605035.host, call_605035.base,
                         call_605035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605035, url, valid)

proc call*(call_605036: Call_PostSetIdentityHeadersInNotificationsEnabled_605020;
          Enabled: bool; Identity: string;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_605037 = newJObject()
  var formData_605038 = newJObject()
  add(formData_605038, "Enabled", newJBool(Enabled))
  add(formData_605038, "Identity", newJString(Identity))
  add(query_605037, "Action", newJString(Action))
  add(formData_605038, "NotificationType", newJString(NotificationType))
  add(query_605037, "Version", newJString(Version))
  result = call_605036.call(nil, query_605037, nil, formData_605038, nil)

var postSetIdentityHeadersInNotificationsEnabled* = Call_PostSetIdentityHeadersInNotificationsEnabled_605020(
    name: "postSetIdentityHeadersInNotificationsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_PostSetIdentityHeadersInNotificationsEnabled_605021,
    base: "/", url: url_PostSetIdentityHeadersInNotificationsEnabled_605022,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityHeadersInNotificationsEnabled_605002 = ref object of OpenApiRestCall_602466
proc url_GetSetIdentityHeadersInNotificationsEnabled_605004(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetIdentityHeadersInNotificationsEnabled_605003(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_605005 = query.getOrDefault("Identity")
  valid_605005 = validateParameter(valid_605005, JString, required = true,
                                 default = nil)
  if valid_605005 != nil:
    section.add "Identity", valid_605005
  var valid_605006 = query.getOrDefault("Enabled")
  valid_605006 = validateParameter(valid_605006, JBool, required = true, default = nil)
  if valid_605006 != nil:
    section.add "Enabled", valid_605006
  var valid_605007 = query.getOrDefault("Action")
  valid_605007 = validateParameter(valid_605007, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_605007 != nil:
    section.add "Action", valid_605007
  var valid_605008 = query.getOrDefault("NotificationType")
  valid_605008 = validateParameter(valid_605008, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_605008 != nil:
    section.add "NotificationType", valid_605008
  var valid_605009 = query.getOrDefault("Version")
  valid_605009 = validateParameter(valid_605009, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605009 != nil:
    section.add "Version", valid_605009
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605010 = header.getOrDefault("X-Amz-Date")
  valid_605010 = validateParameter(valid_605010, JString, required = false,
                                 default = nil)
  if valid_605010 != nil:
    section.add "X-Amz-Date", valid_605010
  var valid_605011 = header.getOrDefault("X-Amz-Security-Token")
  valid_605011 = validateParameter(valid_605011, JString, required = false,
                                 default = nil)
  if valid_605011 != nil:
    section.add "X-Amz-Security-Token", valid_605011
  var valid_605012 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605012 = validateParameter(valid_605012, JString, required = false,
                                 default = nil)
  if valid_605012 != nil:
    section.add "X-Amz-Content-Sha256", valid_605012
  var valid_605013 = header.getOrDefault("X-Amz-Algorithm")
  valid_605013 = validateParameter(valid_605013, JString, required = false,
                                 default = nil)
  if valid_605013 != nil:
    section.add "X-Amz-Algorithm", valid_605013
  var valid_605014 = header.getOrDefault("X-Amz-Signature")
  valid_605014 = validateParameter(valid_605014, JString, required = false,
                                 default = nil)
  if valid_605014 != nil:
    section.add "X-Amz-Signature", valid_605014
  var valid_605015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605015 = validateParameter(valid_605015, JString, required = false,
                                 default = nil)
  if valid_605015 != nil:
    section.add "X-Amz-SignedHeaders", valid_605015
  var valid_605016 = header.getOrDefault("X-Amz-Credential")
  valid_605016 = validateParameter(valid_605016, JString, required = false,
                                 default = nil)
  if valid_605016 != nil:
    section.add "X-Amz-Credential", valid_605016
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605017: Call_GetSetIdentityHeadersInNotificationsEnabled_605002;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605017.validator(path, query, header, formData, body)
  let scheme = call_605017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605017.url(scheme.get, call_605017.host, call_605017.base,
                         call_605017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605017, url, valid)

proc call*(call_605018: Call_GetSetIdentityHeadersInNotificationsEnabled_605002;
          Identity: string; Enabled: bool;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_605019 = newJObject()
  add(query_605019, "Identity", newJString(Identity))
  add(query_605019, "Enabled", newJBool(Enabled))
  add(query_605019, "Action", newJString(Action))
  add(query_605019, "NotificationType", newJString(NotificationType))
  add(query_605019, "Version", newJString(Version))
  result = call_605018.call(nil, query_605019, nil, nil, nil)

var getSetIdentityHeadersInNotificationsEnabled* = Call_GetSetIdentityHeadersInNotificationsEnabled_605002(
    name: "getSetIdentityHeadersInNotificationsEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_GetSetIdentityHeadersInNotificationsEnabled_605003,
    base: "/", url: url_GetSetIdentityHeadersInNotificationsEnabled_605004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityMailFromDomain_605057 = ref object of OpenApiRestCall_602466
proc url_PostSetIdentityMailFromDomain_605059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetIdentityMailFromDomain_605058(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605060 = query.getOrDefault("Action")
  valid_605060 = validateParameter(valid_605060, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_605060 != nil:
    section.add "Action", valid_605060
  var valid_605061 = query.getOrDefault("Version")
  valid_605061 = validateParameter(valid_605061, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605061 != nil:
    section.add "Version", valid_605061
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605062 = header.getOrDefault("X-Amz-Date")
  valid_605062 = validateParameter(valid_605062, JString, required = false,
                                 default = nil)
  if valid_605062 != nil:
    section.add "X-Amz-Date", valid_605062
  var valid_605063 = header.getOrDefault("X-Amz-Security-Token")
  valid_605063 = validateParameter(valid_605063, JString, required = false,
                                 default = nil)
  if valid_605063 != nil:
    section.add "X-Amz-Security-Token", valid_605063
  var valid_605064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605064 = validateParameter(valid_605064, JString, required = false,
                                 default = nil)
  if valid_605064 != nil:
    section.add "X-Amz-Content-Sha256", valid_605064
  var valid_605065 = header.getOrDefault("X-Amz-Algorithm")
  valid_605065 = validateParameter(valid_605065, JString, required = false,
                                 default = nil)
  if valid_605065 != nil:
    section.add "X-Amz-Algorithm", valid_605065
  var valid_605066 = header.getOrDefault("X-Amz-Signature")
  valid_605066 = validateParameter(valid_605066, JString, required = false,
                                 default = nil)
  if valid_605066 != nil:
    section.add "X-Amz-Signature", valid_605066
  var valid_605067 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "X-Amz-SignedHeaders", valid_605067
  var valid_605068 = header.getOrDefault("X-Amz-Credential")
  valid_605068 = validateParameter(valid_605068, JString, required = false,
                                 default = nil)
  if valid_605068 != nil:
    section.add "X-Amz-Credential", valid_605068
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_605069 = formData.getOrDefault("Identity")
  valid_605069 = validateParameter(valid_605069, JString, required = true,
                                 default = nil)
  if valid_605069 != nil:
    section.add "Identity", valid_605069
  var valid_605070 = formData.getOrDefault("MailFromDomain")
  valid_605070 = validateParameter(valid_605070, JString, required = false,
                                 default = nil)
  if valid_605070 != nil:
    section.add "MailFromDomain", valid_605070
  var valid_605071 = formData.getOrDefault("BehaviorOnMXFailure")
  valid_605071 = validateParameter(valid_605071, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_605071 != nil:
    section.add "BehaviorOnMXFailure", valid_605071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605072: Call_PostSetIdentityMailFromDomain_605057; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605072.validator(path, query, header, formData, body)
  let scheme = call_605072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605072.url(scheme.get, call_605072.host, call_605072.base,
                         call_605072.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605072, url, valid)

proc call*(call_605073: Call_PostSetIdentityMailFromDomain_605057;
          Identity: string; MailFromDomain: string = "";
          Action: string = "SetIdentityMailFromDomain";
          BehaviorOnMXFailure: string = "UseDefaultValue";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Version: string (required)
  var query_605074 = newJObject()
  var formData_605075 = newJObject()
  add(formData_605075, "Identity", newJString(Identity))
  add(formData_605075, "MailFromDomain", newJString(MailFromDomain))
  add(query_605074, "Action", newJString(Action))
  add(formData_605075, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_605074, "Version", newJString(Version))
  result = call_605073.call(nil, query_605074, nil, formData_605075, nil)

var postSetIdentityMailFromDomain* = Call_PostSetIdentityMailFromDomain_605057(
    name: "postSetIdentityMailFromDomain", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_PostSetIdentityMailFromDomain_605058, base: "/",
    url: url_PostSetIdentityMailFromDomain_605059,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityMailFromDomain_605039 = ref object of OpenApiRestCall_602466
proc url_GetSetIdentityMailFromDomain_605041(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetIdentityMailFromDomain_605040(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_605042 = query.getOrDefault("Identity")
  valid_605042 = validateParameter(valid_605042, JString, required = true,
                                 default = nil)
  if valid_605042 != nil:
    section.add "Identity", valid_605042
  var valid_605043 = query.getOrDefault("BehaviorOnMXFailure")
  valid_605043 = validateParameter(valid_605043, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_605043 != nil:
    section.add "BehaviorOnMXFailure", valid_605043
  var valid_605044 = query.getOrDefault("MailFromDomain")
  valid_605044 = validateParameter(valid_605044, JString, required = false,
                                 default = nil)
  if valid_605044 != nil:
    section.add "MailFromDomain", valid_605044
  var valid_605045 = query.getOrDefault("Action")
  valid_605045 = validateParameter(valid_605045, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_605045 != nil:
    section.add "Action", valid_605045
  var valid_605046 = query.getOrDefault("Version")
  valid_605046 = validateParameter(valid_605046, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605046 != nil:
    section.add "Version", valid_605046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605047 = header.getOrDefault("X-Amz-Date")
  valid_605047 = validateParameter(valid_605047, JString, required = false,
                                 default = nil)
  if valid_605047 != nil:
    section.add "X-Amz-Date", valid_605047
  var valid_605048 = header.getOrDefault("X-Amz-Security-Token")
  valid_605048 = validateParameter(valid_605048, JString, required = false,
                                 default = nil)
  if valid_605048 != nil:
    section.add "X-Amz-Security-Token", valid_605048
  var valid_605049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605049 = validateParameter(valid_605049, JString, required = false,
                                 default = nil)
  if valid_605049 != nil:
    section.add "X-Amz-Content-Sha256", valid_605049
  var valid_605050 = header.getOrDefault("X-Amz-Algorithm")
  valid_605050 = validateParameter(valid_605050, JString, required = false,
                                 default = nil)
  if valid_605050 != nil:
    section.add "X-Amz-Algorithm", valid_605050
  var valid_605051 = header.getOrDefault("X-Amz-Signature")
  valid_605051 = validateParameter(valid_605051, JString, required = false,
                                 default = nil)
  if valid_605051 != nil:
    section.add "X-Amz-Signature", valid_605051
  var valid_605052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605052 = validateParameter(valid_605052, JString, required = false,
                                 default = nil)
  if valid_605052 != nil:
    section.add "X-Amz-SignedHeaders", valid_605052
  var valid_605053 = header.getOrDefault("X-Amz-Credential")
  valid_605053 = validateParameter(valid_605053, JString, required = false,
                                 default = nil)
  if valid_605053 != nil:
    section.add "X-Amz-Credential", valid_605053
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605054: Call_GetSetIdentityMailFromDomain_605039; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605054.validator(path, query, header, formData, body)
  let scheme = call_605054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605054.url(scheme.get, call_605054.host, call_605054.base,
                         call_605054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605054, url, valid)

proc call*(call_605055: Call_GetSetIdentityMailFromDomain_605039; Identity: string;
          BehaviorOnMXFailure: string = "UseDefaultValue";
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605056 = newJObject()
  add(query_605056, "Identity", newJString(Identity))
  add(query_605056, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_605056, "MailFromDomain", newJString(MailFromDomain))
  add(query_605056, "Action", newJString(Action))
  add(query_605056, "Version", newJString(Version))
  result = call_605055.call(nil, query_605056, nil, nil, nil)

var getSetIdentityMailFromDomain* = Call_GetSetIdentityMailFromDomain_605039(
    name: "getSetIdentityMailFromDomain", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_GetSetIdentityMailFromDomain_605040, base: "/",
    url: url_GetSetIdentityMailFromDomain_605041,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityNotificationTopic_605094 = ref object of OpenApiRestCall_602466
proc url_PostSetIdentityNotificationTopic_605096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetIdentityNotificationTopic_605095(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605097 = query.getOrDefault("Action")
  valid_605097 = validateParameter(valid_605097, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_605097 != nil:
    section.add "Action", valid_605097
  var valid_605098 = query.getOrDefault("Version")
  valid_605098 = validateParameter(valid_605098, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605098 != nil:
    section.add "Version", valid_605098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605099 = header.getOrDefault("X-Amz-Date")
  valid_605099 = validateParameter(valid_605099, JString, required = false,
                                 default = nil)
  if valid_605099 != nil:
    section.add "X-Amz-Date", valid_605099
  var valid_605100 = header.getOrDefault("X-Amz-Security-Token")
  valid_605100 = validateParameter(valid_605100, JString, required = false,
                                 default = nil)
  if valid_605100 != nil:
    section.add "X-Amz-Security-Token", valid_605100
  var valid_605101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605101 = validateParameter(valid_605101, JString, required = false,
                                 default = nil)
  if valid_605101 != nil:
    section.add "X-Amz-Content-Sha256", valid_605101
  var valid_605102 = header.getOrDefault("X-Amz-Algorithm")
  valid_605102 = validateParameter(valid_605102, JString, required = false,
                                 default = nil)
  if valid_605102 != nil:
    section.add "X-Amz-Algorithm", valid_605102
  var valid_605103 = header.getOrDefault("X-Amz-Signature")
  valid_605103 = validateParameter(valid_605103, JString, required = false,
                                 default = nil)
  if valid_605103 != nil:
    section.add "X-Amz-Signature", valid_605103
  var valid_605104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605104 = validateParameter(valid_605104, JString, required = false,
                                 default = nil)
  if valid_605104 != nil:
    section.add "X-Amz-SignedHeaders", valid_605104
  var valid_605105 = header.getOrDefault("X-Amz-Credential")
  valid_605105 = validateParameter(valid_605105, JString, required = false,
                                 default = nil)
  if valid_605105 != nil:
    section.add "X-Amz-Credential", valid_605105
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_605106 = formData.getOrDefault("Identity")
  valid_605106 = validateParameter(valid_605106, JString, required = true,
                                 default = nil)
  if valid_605106 != nil:
    section.add "Identity", valid_605106
  var valid_605107 = formData.getOrDefault("SnsTopic")
  valid_605107 = validateParameter(valid_605107, JString, required = false,
                                 default = nil)
  if valid_605107 != nil:
    section.add "SnsTopic", valid_605107
  var valid_605108 = formData.getOrDefault("NotificationType")
  valid_605108 = validateParameter(valid_605108, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_605108 != nil:
    section.add "NotificationType", valid_605108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605109: Call_PostSetIdentityNotificationTopic_605094;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605109.validator(path, query, header, formData, body)
  let scheme = call_605109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605109.url(scheme.get, call_605109.host, call_605109.base,
                         call_605109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605109, url, valid)

proc call*(call_605110: Call_PostSetIdentityNotificationTopic_605094;
          Identity: string; SnsTopic: string = "";
          Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  var query_605111 = newJObject()
  var formData_605112 = newJObject()
  add(formData_605112, "Identity", newJString(Identity))
  add(formData_605112, "SnsTopic", newJString(SnsTopic))
  add(query_605111, "Action", newJString(Action))
  add(formData_605112, "NotificationType", newJString(NotificationType))
  add(query_605111, "Version", newJString(Version))
  result = call_605110.call(nil, query_605111, nil, formData_605112, nil)

var postSetIdentityNotificationTopic* = Call_PostSetIdentityNotificationTopic_605094(
    name: "postSetIdentityNotificationTopic", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_PostSetIdentityNotificationTopic_605095, base: "/",
    url: url_PostSetIdentityNotificationTopic_605096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityNotificationTopic_605076 = ref object of OpenApiRestCall_602466
proc url_GetSetIdentityNotificationTopic_605078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetIdentityNotificationTopic_605077(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: JString (required)
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_605079 = query.getOrDefault("Identity")
  valid_605079 = validateParameter(valid_605079, JString, required = true,
                                 default = nil)
  if valid_605079 != nil:
    section.add "Identity", valid_605079
  var valid_605080 = query.getOrDefault("Action")
  valid_605080 = validateParameter(valid_605080, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_605080 != nil:
    section.add "Action", valid_605080
  var valid_605081 = query.getOrDefault("NotificationType")
  valid_605081 = validateParameter(valid_605081, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_605081 != nil:
    section.add "NotificationType", valid_605081
  var valid_605082 = query.getOrDefault("Version")
  valid_605082 = validateParameter(valid_605082, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605082 != nil:
    section.add "Version", valid_605082
  var valid_605083 = query.getOrDefault("SnsTopic")
  valid_605083 = validateParameter(valid_605083, JString, required = false,
                                 default = nil)
  if valid_605083 != nil:
    section.add "SnsTopic", valid_605083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605084 = header.getOrDefault("X-Amz-Date")
  valid_605084 = validateParameter(valid_605084, JString, required = false,
                                 default = nil)
  if valid_605084 != nil:
    section.add "X-Amz-Date", valid_605084
  var valid_605085 = header.getOrDefault("X-Amz-Security-Token")
  valid_605085 = validateParameter(valid_605085, JString, required = false,
                                 default = nil)
  if valid_605085 != nil:
    section.add "X-Amz-Security-Token", valid_605085
  var valid_605086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605086 = validateParameter(valid_605086, JString, required = false,
                                 default = nil)
  if valid_605086 != nil:
    section.add "X-Amz-Content-Sha256", valid_605086
  var valid_605087 = header.getOrDefault("X-Amz-Algorithm")
  valid_605087 = validateParameter(valid_605087, JString, required = false,
                                 default = nil)
  if valid_605087 != nil:
    section.add "X-Amz-Algorithm", valid_605087
  var valid_605088 = header.getOrDefault("X-Amz-Signature")
  valid_605088 = validateParameter(valid_605088, JString, required = false,
                                 default = nil)
  if valid_605088 != nil:
    section.add "X-Amz-Signature", valid_605088
  var valid_605089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605089 = validateParameter(valid_605089, JString, required = false,
                                 default = nil)
  if valid_605089 != nil:
    section.add "X-Amz-SignedHeaders", valid_605089
  var valid_605090 = header.getOrDefault("X-Amz-Credential")
  valid_605090 = validateParameter(valid_605090, JString, required = false,
                                 default = nil)
  if valid_605090 != nil:
    section.add "X-Amz-Credential", valid_605090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605091: Call_GetSetIdentityNotificationTopic_605076;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605091.validator(path, query, header, formData, body)
  let scheme = call_605091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605091.url(scheme.get, call_605091.host, call_605091.base,
                         call_605091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605091, url, valid)

proc call*(call_605092: Call_GetSetIdentityNotificationTopic_605076;
          Identity: string; Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01";
          SnsTopic: string = ""): Recallable =
  ## getSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  var query_605093 = newJObject()
  add(query_605093, "Identity", newJString(Identity))
  add(query_605093, "Action", newJString(Action))
  add(query_605093, "NotificationType", newJString(NotificationType))
  add(query_605093, "Version", newJString(Version))
  add(query_605093, "SnsTopic", newJString(SnsTopic))
  result = call_605092.call(nil, query_605093, nil, nil, nil)

var getSetIdentityNotificationTopic* = Call_GetSetIdentityNotificationTopic_605076(
    name: "getSetIdentityNotificationTopic", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_GetSetIdentityNotificationTopic_605077, base: "/",
    url: url_GetSetIdentityNotificationTopic_605078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetReceiptRulePosition_605131 = ref object of OpenApiRestCall_602466
proc url_PostSetReceiptRulePosition_605133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetReceiptRulePosition_605132(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605134 = query.getOrDefault("Action")
  valid_605134 = validateParameter(valid_605134, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_605134 != nil:
    section.add "Action", valid_605134
  var valid_605135 = query.getOrDefault("Version")
  valid_605135 = validateParameter(valid_605135, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605135 != nil:
    section.add "Version", valid_605135
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605136 = header.getOrDefault("X-Amz-Date")
  valid_605136 = validateParameter(valid_605136, JString, required = false,
                                 default = nil)
  if valid_605136 != nil:
    section.add "X-Amz-Date", valid_605136
  var valid_605137 = header.getOrDefault("X-Amz-Security-Token")
  valid_605137 = validateParameter(valid_605137, JString, required = false,
                                 default = nil)
  if valid_605137 != nil:
    section.add "X-Amz-Security-Token", valid_605137
  var valid_605138 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605138 = validateParameter(valid_605138, JString, required = false,
                                 default = nil)
  if valid_605138 != nil:
    section.add "X-Amz-Content-Sha256", valid_605138
  var valid_605139 = header.getOrDefault("X-Amz-Algorithm")
  valid_605139 = validateParameter(valid_605139, JString, required = false,
                                 default = nil)
  if valid_605139 != nil:
    section.add "X-Amz-Algorithm", valid_605139
  var valid_605140 = header.getOrDefault("X-Amz-Signature")
  valid_605140 = validateParameter(valid_605140, JString, required = false,
                                 default = nil)
  if valid_605140 != nil:
    section.add "X-Amz-Signature", valid_605140
  var valid_605141 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605141 = validateParameter(valid_605141, JString, required = false,
                                 default = nil)
  if valid_605141 != nil:
    section.add "X-Amz-SignedHeaders", valid_605141
  var valid_605142 = header.getOrDefault("X-Amz-Credential")
  valid_605142 = validateParameter(valid_605142, JString, required = false,
                                 default = nil)
  if valid_605142 != nil:
    section.add "X-Amz-Credential", valid_605142
  result.add "header", section
  ## parameters in `formData` object:
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  section = newJObject()
  var valid_605143 = formData.getOrDefault("After")
  valid_605143 = validateParameter(valid_605143, JString, required = false,
                                 default = nil)
  if valid_605143 != nil:
    section.add "After", valid_605143
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_605144 = formData.getOrDefault("RuleName")
  valid_605144 = validateParameter(valid_605144, JString, required = true,
                                 default = nil)
  if valid_605144 != nil:
    section.add "RuleName", valid_605144
  var valid_605145 = formData.getOrDefault("RuleSetName")
  valid_605145 = validateParameter(valid_605145, JString, required = true,
                                 default = nil)
  if valid_605145 != nil:
    section.add "RuleSetName", valid_605145
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605146: Call_PostSetReceiptRulePosition_605131; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605146.validator(path, query, header, formData, body)
  let scheme = call_605146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605146.url(scheme.get, call_605146.host, call_605146.base,
                         call_605146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605146, url, valid)

proc call*(call_605147: Call_PostSetReceiptRulePosition_605131; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## postSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605148 = newJObject()
  var formData_605149 = newJObject()
  add(formData_605149, "After", newJString(After))
  add(formData_605149, "RuleName", newJString(RuleName))
  add(formData_605149, "RuleSetName", newJString(RuleSetName))
  add(query_605148, "Action", newJString(Action))
  add(query_605148, "Version", newJString(Version))
  result = call_605147.call(nil, query_605148, nil, formData_605149, nil)

var postSetReceiptRulePosition* = Call_PostSetReceiptRulePosition_605131(
    name: "postSetReceiptRulePosition", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_PostSetReceiptRulePosition_605132, base: "/",
    url: url_PostSetReceiptRulePosition_605133,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetReceiptRulePosition_605113 = ref object of OpenApiRestCall_602466
proc url_GetSetReceiptRulePosition_605115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetReceiptRulePosition_605114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_605116 = query.getOrDefault("RuleName")
  valid_605116 = validateParameter(valid_605116, JString, required = true,
                                 default = nil)
  if valid_605116 != nil:
    section.add "RuleName", valid_605116
  var valid_605117 = query.getOrDefault("After")
  valid_605117 = validateParameter(valid_605117, JString, required = false,
                                 default = nil)
  if valid_605117 != nil:
    section.add "After", valid_605117
  var valid_605118 = query.getOrDefault("RuleSetName")
  valid_605118 = validateParameter(valid_605118, JString, required = true,
                                 default = nil)
  if valid_605118 != nil:
    section.add "RuleSetName", valid_605118
  var valid_605119 = query.getOrDefault("Action")
  valid_605119 = validateParameter(valid_605119, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_605119 != nil:
    section.add "Action", valid_605119
  var valid_605120 = query.getOrDefault("Version")
  valid_605120 = validateParameter(valid_605120, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605120 != nil:
    section.add "Version", valid_605120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605121 = header.getOrDefault("X-Amz-Date")
  valid_605121 = validateParameter(valid_605121, JString, required = false,
                                 default = nil)
  if valid_605121 != nil:
    section.add "X-Amz-Date", valid_605121
  var valid_605122 = header.getOrDefault("X-Amz-Security-Token")
  valid_605122 = validateParameter(valid_605122, JString, required = false,
                                 default = nil)
  if valid_605122 != nil:
    section.add "X-Amz-Security-Token", valid_605122
  var valid_605123 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605123 = validateParameter(valid_605123, JString, required = false,
                                 default = nil)
  if valid_605123 != nil:
    section.add "X-Amz-Content-Sha256", valid_605123
  var valid_605124 = header.getOrDefault("X-Amz-Algorithm")
  valid_605124 = validateParameter(valid_605124, JString, required = false,
                                 default = nil)
  if valid_605124 != nil:
    section.add "X-Amz-Algorithm", valid_605124
  var valid_605125 = header.getOrDefault("X-Amz-Signature")
  valid_605125 = validateParameter(valid_605125, JString, required = false,
                                 default = nil)
  if valid_605125 != nil:
    section.add "X-Amz-Signature", valid_605125
  var valid_605126 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605126 = validateParameter(valid_605126, JString, required = false,
                                 default = nil)
  if valid_605126 != nil:
    section.add "X-Amz-SignedHeaders", valid_605126
  var valid_605127 = header.getOrDefault("X-Amz-Credential")
  valid_605127 = validateParameter(valid_605127, JString, required = false,
                                 default = nil)
  if valid_605127 != nil:
    section.add "X-Amz-Credential", valid_605127
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605128: Call_GetSetReceiptRulePosition_605113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605128.validator(path, query, header, formData, body)
  let scheme = call_605128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605128.url(scheme.get, call_605128.host, call_605128.base,
                         call_605128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605128, url, valid)

proc call*(call_605129: Call_GetSetReceiptRulePosition_605113; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## getSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605130 = newJObject()
  add(query_605130, "RuleName", newJString(RuleName))
  add(query_605130, "After", newJString(After))
  add(query_605130, "RuleSetName", newJString(RuleSetName))
  add(query_605130, "Action", newJString(Action))
  add(query_605130, "Version", newJString(Version))
  result = call_605129.call(nil, query_605130, nil, nil, nil)

var getSetReceiptRulePosition* = Call_GetSetReceiptRulePosition_605113(
    name: "getSetReceiptRulePosition", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_GetSetReceiptRulePosition_605114, base: "/",
    url: url_GetSetReceiptRulePosition_605115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestRenderTemplate_605167 = ref object of OpenApiRestCall_602466
proc url_PostTestRenderTemplate_605169(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTestRenderTemplate_605168(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605170 = query.getOrDefault("Action")
  valid_605170 = validateParameter(valid_605170, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_605170 != nil:
    section.add "Action", valid_605170
  var valid_605171 = query.getOrDefault("Version")
  valid_605171 = validateParameter(valid_605171, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605171 != nil:
    section.add "Version", valid_605171
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605172 = header.getOrDefault("X-Amz-Date")
  valid_605172 = validateParameter(valid_605172, JString, required = false,
                                 default = nil)
  if valid_605172 != nil:
    section.add "X-Amz-Date", valid_605172
  var valid_605173 = header.getOrDefault("X-Amz-Security-Token")
  valid_605173 = validateParameter(valid_605173, JString, required = false,
                                 default = nil)
  if valid_605173 != nil:
    section.add "X-Amz-Security-Token", valid_605173
  var valid_605174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605174 = validateParameter(valid_605174, JString, required = false,
                                 default = nil)
  if valid_605174 != nil:
    section.add "X-Amz-Content-Sha256", valid_605174
  var valid_605175 = header.getOrDefault("X-Amz-Algorithm")
  valid_605175 = validateParameter(valid_605175, JString, required = false,
                                 default = nil)
  if valid_605175 != nil:
    section.add "X-Amz-Algorithm", valid_605175
  var valid_605176 = header.getOrDefault("X-Amz-Signature")
  valid_605176 = validateParameter(valid_605176, JString, required = false,
                                 default = nil)
  if valid_605176 != nil:
    section.add "X-Amz-Signature", valid_605176
  var valid_605177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605177 = validateParameter(valid_605177, JString, required = false,
                                 default = nil)
  if valid_605177 != nil:
    section.add "X-Amz-SignedHeaders", valid_605177
  var valid_605178 = header.getOrDefault("X-Amz-Credential")
  valid_605178 = validateParameter(valid_605178, JString, required = false,
                                 default = nil)
  if valid_605178 != nil:
    section.add "X-Amz-Credential", valid_605178
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateData` field"
  var valid_605179 = formData.getOrDefault("TemplateData")
  valid_605179 = validateParameter(valid_605179, JString, required = true,
                                 default = nil)
  if valid_605179 != nil:
    section.add "TemplateData", valid_605179
  var valid_605180 = formData.getOrDefault("TemplateName")
  valid_605180 = validateParameter(valid_605180, JString, required = true,
                                 default = nil)
  if valid_605180 != nil:
    section.add "TemplateName", valid_605180
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605181: Call_PostTestRenderTemplate_605167; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605181.validator(path, query, header, formData, body)
  let scheme = call_605181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605181.url(scheme.get, call_605181.host, call_605181.base,
                         call_605181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605181, url, valid)

proc call*(call_605182: Call_PostTestRenderTemplate_605167; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_605183 = newJObject()
  var formData_605184 = newJObject()
  add(formData_605184, "TemplateData", newJString(TemplateData))
  add(query_605183, "Action", newJString(Action))
  add(formData_605184, "TemplateName", newJString(TemplateName))
  add(query_605183, "Version", newJString(Version))
  result = call_605182.call(nil, query_605183, nil, formData_605184, nil)

var postTestRenderTemplate* = Call_PostTestRenderTemplate_605167(
    name: "postTestRenderTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_PostTestRenderTemplate_605168, base: "/",
    url: url_PostTestRenderTemplate_605169, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestRenderTemplate_605150 = ref object of OpenApiRestCall_602466
proc url_GetTestRenderTemplate_605152(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTestRenderTemplate_605151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_605153 = query.getOrDefault("TemplateData")
  valid_605153 = validateParameter(valid_605153, JString, required = true,
                                 default = nil)
  if valid_605153 != nil:
    section.add "TemplateData", valid_605153
  var valid_605154 = query.getOrDefault("Action")
  valid_605154 = validateParameter(valid_605154, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_605154 != nil:
    section.add "Action", valid_605154
  var valid_605155 = query.getOrDefault("TemplateName")
  valid_605155 = validateParameter(valid_605155, JString, required = true,
                                 default = nil)
  if valid_605155 != nil:
    section.add "TemplateName", valid_605155
  var valid_605156 = query.getOrDefault("Version")
  valid_605156 = validateParameter(valid_605156, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605156 != nil:
    section.add "Version", valid_605156
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605157 = header.getOrDefault("X-Amz-Date")
  valid_605157 = validateParameter(valid_605157, JString, required = false,
                                 default = nil)
  if valid_605157 != nil:
    section.add "X-Amz-Date", valid_605157
  var valid_605158 = header.getOrDefault("X-Amz-Security-Token")
  valid_605158 = validateParameter(valid_605158, JString, required = false,
                                 default = nil)
  if valid_605158 != nil:
    section.add "X-Amz-Security-Token", valid_605158
  var valid_605159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605159 = validateParameter(valid_605159, JString, required = false,
                                 default = nil)
  if valid_605159 != nil:
    section.add "X-Amz-Content-Sha256", valid_605159
  var valid_605160 = header.getOrDefault("X-Amz-Algorithm")
  valid_605160 = validateParameter(valid_605160, JString, required = false,
                                 default = nil)
  if valid_605160 != nil:
    section.add "X-Amz-Algorithm", valid_605160
  var valid_605161 = header.getOrDefault("X-Amz-Signature")
  valid_605161 = validateParameter(valid_605161, JString, required = false,
                                 default = nil)
  if valid_605161 != nil:
    section.add "X-Amz-Signature", valid_605161
  var valid_605162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605162 = validateParameter(valid_605162, JString, required = false,
                                 default = nil)
  if valid_605162 != nil:
    section.add "X-Amz-SignedHeaders", valid_605162
  var valid_605163 = header.getOrDefault("X-Amz-Credential")
  valid_605163 = validateParameter(valid_605163, JString, required = false,
                                 default = nil)
  if valid_605163 != nil:
    section.add "X-Amz-Credential", valid_605163
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605164: Call_GetTestRenderTemplate_605150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605164.validator(path, query, header, formData, body)
  let scheme = call_605164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605164.url(scheme.get, call_605164.host, call_605164.base,
                         call_605164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605164, url, valid)

proc call*(call_605165: Call_GetTestRenderTemplate_605150; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_605166 = newJObject()
  add(query_605166, "TemplateData", newJString(TemplateData))
  add(query_605166, "Action", newJString(Action))
  add(query_605166, "TemplateName", newJString(TemplateName))
  add(query_605166, "Version", newJString(Version))
  result = call_605165.call(nil, query_605166, nil, nil, nil)

var getTestRenderTemplate* = Call_GetTestRenderTemplate_605150(
    name: "getTestRenderTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_GetTestRenderTemplate_605151, base: "/",
    url: url_GetTestRenderTemplate_605152, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountSendingEnabled_605201 = ref object of OpenApiRestCall_602466
proc url_PostUpdateAccountSendingEnabled_605203(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateAccountSendingEnabled_605202(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605204 = query.getOrDefault("Action")
  valid_605204 = validateParameter(valid_605204, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_605204 != nil:
    section.add "Action", valid_605204
  var valid_605205 = query.getOrDefault("Version")
  valid_605205 = validateParameter(valid_605205, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605205 != nil:
    section.add "Version", valid_605205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605206 = header.getOrDefault("X-Amz-Date")
  valid_605206 = validateParameter(valid_605206, JString, required = false,
                                 default = nil)
  if valid_605206 != nil:
    section.add "X-Amz-Date", valid_605206
  var valid_605207 = header.getOrDefault("X-Amz-Security-Token")
  valid_605207 = validateParameter(valid_605207, JString, required = false,
                                 default = nil)
  if valid_605207 != nil:
    section.add "X-Amz-Security-Token", valid_605207
  var valid_605208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605208 = validateParameter(valid_605208, JString, required = false,
                                 default = nil)
  if valid_605208 != nil:
    section.add "X-Amz-Content-Sha256", valid_605208
  var valid_605209 = header.getOrDefault("X-Amz-Algorithm")
  valid_605209 = validateParameter(valid_605209, JString, required = false,
                                 default = nil)
  if valid_605209 != nil:
    section.add "X-Amz-Algorithm", valid_605209
  var valid_605210 = header.getOrDefault("X-Amz-Signature")
  valid_605210 = validateParameter(valid_605210, JString, required = false,
                                 default = nil)
  if valid_605210 != nil:
    section.add "X-Amz-Signature", valid_605210
  var valid_605211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605211 = validateParameter(valid_605211, JString, required = false,
                                 default = nil)
  if valid_605211 != nil:
    section.add "X-Amz-SignedHeaders", valid_605211
  var valid_605212 = header.getOrDefault("X-Amz-Credential")
  valid_605212 = validateParameter(valid_605212, JString, required = false,
                                 default = nil)
  if valid_605212 != nil:
    section.add "X-Amz-Credential", valid_605212
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  section = newJObject()
  var valid_605213 = formData.getOrDefault("Enabled")
  valid_605213 = validateParameter(valid_605213, JBool, required = false, default = nil)
  if valid_605213 != nil:
    section.add "Enabled", valid_605213
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605214: Call_PostUpdateAccountSendingEnabled_605201;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605214.validator(path, query, header, formData, body)
  let scheme = call_605214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605214.url(scheme.get, call_605214.host, call_605214.base,
                         call_605214.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605214, url, valid)

proc call*(call_605215: Call_PostUpdateAccountSendingEnabled_605201;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605216 = newJObject()
  var formData_605217 = newJObject()
  add(formData_605217, "Enabled", newJBool(Enabled))
  add(query_605216, "Action", newJString(Action))
  add(query_605216, "Version", newJString(Version))
  result = call_605215.call(nil, query_605216, nil, formData_605217, nil)

var postUpdateAccountSendingEnabled* = Call_PostUpdateAccountSendingEnabled_605201(
    name: "postUpdateAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_PostUpdateAccountSendingEnabled_605202, base: "/",
    url: url_PostUpdateAccountSendingEnabled_605203,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountSendingEnabled_605185 = ref object of OpenApiRestCall_602466
proc url_GetUpdateAccountSendingEnabled_605187(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateAccountSendingEnabled_605186(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_605188 = query.getOrDefault("Enabled")
  valid_605188 = validateParameter(valid_605188, JBool, required = false, default = nil)
  if valid_605188 != nil:
    section.add "Enabled", valid_605188
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605189 = query.getOrDefault("Action")
  valid_605189 = validateParameter(valid_605189, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_605189 != nil:
    section.add "Action", valid_605189
  var valid_605190 = query.getOrDefault("Version")
  valid_605190 = validateParameter(valid_605190, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605190 != nil:
    section.add "Version", valid_605190
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605191 = header.getOrDefault("X-Amz-Date")
  valid_605191 = validateParameter(valid_605191, JString, required = false,
                                 default = nil)
  if valid_605191 != nil:
    section.add "X-Amz-Date", valid_605191
  var valid_605192 = header.getOrDefault("X-Amz-Security-Token")
  valid_605192 = validateParameter(valid_605192, JString, required = false,
                                 default = nil)
  if valid_605192 != nil:
    section.add "X-Amz-Security-Token", valid_605192
  var valid_605193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605193 = validateParameter(valid_605193, JString, required = false,
                                 default = nil)
  if valid_605193 != nil:
    section.add "X-Amz-Content-Sha256", valid_605193
  var valid_605194 = header.getOrDefault("X-Amz-Algorithm")
  valid_605194 = validateParameter(valid_605194, JString, required = false,
                                 default = nil)
  if valid_605194 != nil:
    section.add "X-Amz-Algorithm", valid_605194
  var valid_605195 = header.getOrDefault("X-Amz-Signature")
  valid_605195 = validateParameter(valid_605195, JString, required = false,
                                 default = nil)
  if valid_605195 != nil:
    section.add "X-Amz-Signature", valid_605195
  var valid_605196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605196 = validateParameter(valid_605196, JString, required = false,
                                 default = nil)
  if valid_605196 != nil:
    section.add "X-Amz-SignedHeaders", valid_605196
  var valid_605197 = header.getOrDefault("X-Amz-Credential")
  valid_605197 = validateParameter(valid_605197, JString, required = false,
                                 default = nil)
  if valid_605197 != nil:
    section.add "X-Amz-Credential", valid_605197
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605198: Call_GetUpdateAccountSendingEnabled_605185; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605198.validator(path, query, header, formData, body)
  let scheme = call_605198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605198.url(scheme.get, call_605198.host, call_605198.base,
                         call_605198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605198, url, valid)

proc call*(call_605199: Call_GetUpdateAccountSendingEnabled_605185;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605200 = newJObject()
  add(query_605200, "Enabled", newJBool(Enabled))
  add(query_605200, "Action", newJString(Action))
  add(query_605200, "Version", newJString(Version))
  result = call_605199.call(nil, query_605200, nil, nil, nil)

var getUpdateAccountSendingEnabled* = Call_GetUpdateAccountSendingEnabled_605185(
    name: "getUpdateAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_GetUpdateAccountSendingEnabled_605186, base: "/",
    url: url_GetUpdateAccountSendingEnabled_605187,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetEventDestination_605240 = ref object of OpenApiRestCall_602466
proc url_PostUpdateConfigurationSetEventDestination_605242(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateConfigurationSetEventDestination_605241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605243 = query.getOrDefault("Action")
  valid_605243 = validateParameter(valid_605243, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_605243 != nil:
    section.add "Action", valid_605243
  var valid_605244 = query.getOrDefault("Version")
  valid_605244 = validateParameter(valid_605244, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605244 != nil:
    section.add "Version", valid_605244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605245 = header.getOrDefault("X-Amz-Date")
  valid_605245 = validateParameter(valid_605245, JString, required = false,
                                 default = nil)
  if valid_605245 != nil:
    section.add "X-Amz-Date", valid_605245
  var valid_605246 = header.getOrDefault("X-Amz-Security-Token")
  valid_605246 = validateParameter(valid_605246, JString, required = false,
                                 default = nil)
  if valid_605246 != nil:
    section.add "X-Amz-Security-Token", valid_605246
  var valid_605247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605247 = validateParameter(valid_605247, JString, required = false,
                                 default = nil)
  if valid_605247 != nil:
    section.add "X-Amz-Content-Sha256", valid_605247
  var valid_605248 = header.getOrDefault("X-Amz-Algorithm")
  valid_605248 = validateParameter(valid_605248, JString, required = false,
                                 default = nil)
  if valid_605248 != nil:
    section.add "X-Amz-Algorithm", valid_605248
  var valid_605249 = header.getOrDefault("X-Amz-Signature")
  valid_605249 = validateParameter(valid_605249, JString, required = false,
                                 default = nil)
  if valid_605249 != nil:
    section.add "X-Amz-Signature", valid_605249
  var valid_605250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605250 = validateParameter(valid_605250, JString, required = false,
                                 default = nil)
  if valid_605250 != nil:
    section.add "X-Amz-SignedHeaders", valid_605250
  var valid_605251 = header.getOrDefault("X-Amz-Credential")
  valid_605251 = validateParameter(valid_605251, JString, required = false,
                                 default = nil)
  if valid_605251 != nil:
    section.add "X-Amz-Credential", valid_605251
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605252 = formData.getOrDefault("ConfigurationSetName")
  valid_605252 = validateParameter(valid_605252, JString, required = true,
                                 default = nil)
  if valid_605252 != nil:
    section.add "ConfigurationSetName", valid_605252
  var valid_605253 = formData.getOrDefault("EventDestination.Name")
  valid_605253 = validateParameter(valid_605253, JString, required = false,
                                 default = nil)
  if valid_605253 != nil:
    section.add "EventDestination.Name", valid_605253
  var valid_605254 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_605254 = validateParameter(valid_605254, JString, required = false,
                                 default = nil)
  if valid_605254 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_605254
  var valid_605255 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_605255 = validateParameter(valid_605255, JArray, required = false,
                                 default = nil)
  if valid_605255 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_605255
  var valid_605256 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_605256 = validateParameter(valid_605256, JString, required = false,
                                 default = nil)
  if valid_605256 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_605256
  var valid_605257 = formData.getOrDefault("EventDestination.Enabled")
  valid_605257 = validateParameter(valid_605257, JString, required = false,
                                 default = nil)
  if valid_605257 != nil:
    section.add "EventDestination.Enabled", valid_605257
  var valid_605258 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_605258 = validateParameter(valid_605258, JString, required = false,
                                 default = nil)
  if valid_605258 != nil:
    section.add "EventDestination.SNSDestination", valid_605258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605259: Call_PostUpdateConfigurationSetEventDestination_605240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605259.validator(path, query, header, formData, body)
  let scheme = call_605259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605259.url(scheme.get, call_605259.host, call_605259.base,
                         call_605259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605259, url, valid)

proc call*(call_605260: Call_PostUpdateConfigurationSetEventDestination_605240;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_605261 = newJObject()
  var formData_605262 = newJObject()
  add(formData_605262, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_605262, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_605262, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_605261, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_605262.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_605262, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_605262, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_605262, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_605261, "Version", newJString(Version))
  result = call_605260.call(nil, query_605261, nil, formData_605262, nil)

var postUpdateConfigurationSetEventDestination* = Call_PostUpdateConfigurationSetEventDestination_605240(
    name: "postUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_PostUpdateConfigurationSetEventDestination_605241,
    base: "/", url: url_PostUpdateConfigurationSetEventDestination_605242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetEventDestination_605218 = ref object of OpenApiRestCall_602466
proc url_GetUpdateConfigurationSetEventDestination_605220(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateConfigurationSetEventDestination_605219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605221 = query.getOrDefault("EventDestination.Enabled")
  valid_605221 = validateParameter(valid_605221, JString, required = false,
                                 default = nil)
  if valid_605221 != nil:
    section.add "EventDestination.Enabled", valid_605221
  var valid_605222 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_605222 = validateParameter(valid_605222, JString, required = false,
                                 default = nil)
  if valid_605222 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_605222
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605223 = query.getOrDefault("Action")
  valid_605223 = validateParameter(valid_605223, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_605223 != nil:
    section.add "Action", valid_605223
  var valid_605224 = query.getOrDefault("EventDestination.Name")
  valid_605224 = validateParameter(valid_605224, JString, required = false,
                                 default = nil)
  if valid_605224 != nil:
    section.add "EventDestination.Name", valid_605224
  var valid_605225 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_605225 = validateParameter(valid_605225, JString, required = false,
                                 default = nil)
  if valid_605225 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_605225
  var valid_605226 = query.getOrDefault("EventDestination.SNSDestination")
  valid_605226 = validateParameter(valid_605226, JString, required = false,
                                 default = nil)
  if valid_605226 != nil:
    section.add "EventDestination.SNSDestination", valid_605226
  var valid_605227 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_605227 = validateParameter(valid_605227, JArray, required = false,
                                 default = nil)
  if valid_605227 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_605227
  var valid_605228 = query.getOrDefault("ConfigurationSetName")
  valid_605228 = validateParameter(valid_605228, JString, required = true,
                                 default = nil)
  if valid_605228 != nil:
    section.add "ConfigurationSetName", valid_605228
  var valid_605229 = query.getOrDefault("Version")
  valid_605229 = validateParameter(valid_605229, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605229 != nil:
    section.add "Version", valid_605229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605230 = header.getOrDefault("X-Amz-Date")
  valid_605230 = validateParameter(valid_605230, JString, required = false,
                                 default = nil)
  if valid_605230 != nil:
    section.add "X-Amz-Date", valid_605230
  var valid_605231 = header.getOrDefault("X-Amz-Security-Token")
  valid_605231 = validateParameter(valid_605231, JString, required = false,
                                 default = nil)
  if valid_605231 != nil:
    section.add "X-Amz-Security-Token", valid_605231
  var valid_605232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605232 = validateParameter(valid_605232, JString, required = false,
                                 default = nil)
  if valid_605232 != nil:
    section.add "X-Amz-Content-Sha256", valid_605232
  var valid_605233 = header.getOrDefault("X-Amz-Algorithm")
  valid_605233 = validateParameter(valid_605233, JString, required = false,
                                 default = nil)
  if valid_605233 != nil:
    section.add "X-Amz-Algorithm", valid_605233
  var valid_605234 = header.getOrDefault("X-Amz-Signature")
  valid_605234 = validateParameter(valid_605234, JString, required = false,
                                 default = nil)
  if valid_605234 != nil:
    section.add "X-Amz-Signature", valid_605234
  var valid_605235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605235 = validateParameter(valid_605235, JString, required = false,
                                 default = nil)
  if valid_605235 != nil:
    section.add "X-Amz-SignedHeaders", valid_605235
  var valid_605236 = header.getOrDefault("X-Amz-Credential")
  valid_605236 = validateParameter(valid_605236, JString, required = false,
                                 default = nil)
  if valid_605236 != nil:
    section.add "X-Amz-Credential", valid_605236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605237: Call_GetUpdateConfigurationSetEventDestination_605218;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605237.validator(path, query, header, formData, body)
  let scheme = call_605237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605237.url(scheme.get, call_605237.host, call_605237.base,
                         call_605237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605237, url, valid)

proc call*(call_605238: Call_GetUpdateConfigurationSetEventDestination_605218;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: string (required)
  var query_605239 = newJObject()
  add(query_605239, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_605239, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_605239, "Action", newJString(Action))
  add(query_605239, "EventDestination.Name", newJString(EventDestinationName))
  add(query_605239, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_605239, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_605239.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_605239, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605239, "Version", newJString(Version))
  result = call_605238.call(nil, query_605239, nil, nil, nil)

var getUpdateConfigurationSetEventDestination* = Call_GetUpdateConfigurationSetEventDestination_605218(
    name: "getUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_GetUpdateConfigurationSetEventDestination_605219,
    base: "/", url: url_GetUpdateConfigurationSetEventDestination_605220,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetReputationMetricsEnabled_605280 = ref object of OpenApiRestCall_602466
proc url_PostUpdateConfigurationSetReputationMetricsEnabled_605282(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateConfigurationSetReputationMetricsEnabled_605281(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605283 = query.getOrDefault("Action")
  valid_605283 = validateParameter(valid_605283, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_605283 != nil:
    section.add "Action", valid_605283
  var valid_605284 = query.getOrDefault("Version")
  valid_605284 = validateParameter(valid_605284, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605284 != nil:
    section.add "Version", valid_605284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605285 = header.getOrDefault("X-Amz-Date")
  valid_605285 = validateParameter(valid_605285, JString, required = false,
                                 default = nil)
  if valid_605285 != nil:
    section.add "X-Amz-Date", valid_605285
  var valid_605286 = header.getOrDefault("X-Amz-Security-Token")
  valid_605286 = validateParameter(valid_605286, JString, required = false,
                                 default = nil)
  if valid_605286 != nil:
    section.add "X-Amz-Security-Token", valid_605286
  var valid_605287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605287 = validateParameter(valid_605287, JString, required = false,
                                 default = nil)
  if valid_605287 != nil:
    section.add "X-Amz-Content-Sha256", valid_605287
  var valid_605288 = header.getOrDefault("X-Amz-Algorithm")
  valid_605288 = validateParameter(valid_605288, JString, required = false,
                                 default = nil)
  if valid_605288 != nil:
    section.add "X-Amz-Algorithm", valid_605288
  var valid_605289 = header.getOrDefault("X-Amz-Signature")
  valid_605289 = validateParameter(valid_605289, JString, required = false,
                                 default = nil)
  if valid_605289 != nil:
    section.add "X-Amz-Signature", valid_605289
  var valid_605290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605290 = validateParameter(valid_605290, JString, required = false,
                                 default = nil)
  if valid_605290 != nil:
    section.add "X-Amz-SignedHeaders", valid_605290
  var valid_605291 = header.getOrDefault("X-Amz-Credential")
  valid_605291 = validateParameter(valid_605291, JString, required = false,
                                 default = nil)
  if valid_605291 != nil:
    section.add "X-Amz-Credential", valid_605291
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605292 = formData.getOrDefault("ConfigurationSetName")
  valid_605292 = validateParameter(valid_605292, JString, required = true,
                                 default = nil)
  if valid_605292 != nil:
    section.add "ConfigurationSetName", valid_605292
  var valid_605293 = formData.getOrDefault("Enabled")
  valid_605293 = validateParameter(valid_605293, JBool, required = true, default = nil)
  if valid_605293 != nil:
    section.add "Enabled", valid_605293
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605294: Call_PostUpdateConfigurationSetReputationMetricsEnabled_605280;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605294.validator(path, query, header, formData, body)
  let scheme = call_605294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605294.url(scheme.get, call_605294.host, call_605294.base,
                         call_605294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605294, url, valid)

proc call*(call_605295: Call_PostUpdateConfigurationSetReputationMetricsEnabled_605280;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605296 = newJObject()
  var formData_605297 = newJObject()
  add(formData_605297, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_605297, "Enabled", newJBool(Enabled))
  add(query_605296, "Action", newJString(Action))
  add(query_605296, "Version", newJString(Version))
  result = call_605295.call(nil, query_605296, nil, formData_605297, nil)

var postUpdateConfigurationSetReputationMetricsEnabled* = Call_PostUpdateConfigurationSetReputationMetricsEnabled_605280(
    name: "postUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_PostUpdateConfigurationSetReputationMetricsEnabled_605281,
    base: "/", url: url_PostUpdateConfigurationSetReputationMetricsEnabled_605282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetReputationMetricsEnabled_605263 = ref object of OpenApiRestCall_602466
proc url_GetUpdateConfigurationSetReputationMetricsEnabled_605265(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateConfigurationSetReputationMetricsEnabled_605264(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_605266 = query.getOrDefault("Enabled")
  valid_605266 = validateParameter(valid_605266, JBool, required = true, default = nil)
  if valid_605266 != nil:
    section.add "Enabled", valid_605266
  var valid_605267 = query.getOrDefault("Action")
  valid_605267 = validateParameter(valid_605267, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_605267 != nil:
    section.add "Action", valid_605267
  var valid_605268 = query.getOrDefault("ConfigurationSetName")
  valid_605268 = validateParameter(valid_605268, JString, required = true,
                                 default = nil)
  if valid_605268 != nil:
    section.add "ConfigurationSetName", valid_605268
  var valid_605269 = query.getOrDefault("Version")
  valid_605269 = validateParameter(valid_605269, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605269 != nil:
    section.add "Version", valid_605269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605270 = header.getOrDefault("X-Amz-Date")
  valid_605270 = validateParameter(valid_605270, JString, required = false,
                                 default = nil)
  if valid_605270 != nil:
    section.add "X-Amz-Date", valid_605270
  var valid_605271 = header.getOrDefault("X-Amz-Security-Token")
  valid_605271 = validateParameter(valid_605271, JString, required = false,
                                 default = nil)
  if valid_605271 != nil:
    section.add "X-Amz-Security-Token", valid_605271
  var valid_605272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605272 = validateParameter(valid_605272, JString, required = false,
                                 default = nil)
  if valid_605272 != nil:
    section.add "X-Amz-Content-Sha256", valid_605272
  var valid_605273 = header.getOrDefault("X-Amz-Algorithm")
  valid_605273 = validateParameter(valid_605273, JString, required = false,
                                 default = nil)
  if valid_605273 != nil:
    section.add "X-Amz-Algorithm", valid_605273
  var valid_605274 = header.getOrDefault("X-Amz-Signature")
  valid_605274 = validateParameter(valid_605274, JString, required = false,
                                 default = nil)
  if valid_605274 != nil:
    section.add "X-Amz-Signature", valid_605274
  var valid_605275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605275 = validateParameter(valid_605275, JString, required = false,
                                 default = nil)
  if valid_605275 != nil:
    section.add "X-Amz-SignedHeaders", valid_605275
  var valid_605276 = header.getOrDefault("X-Amz-Credential")
  valid_605276 = validateParameter(valid_605276, JString, required = false,
                                 default = nil)
  if valid_605276 != nil:
    section.add "X-Amz-Credential", valid_605276
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605277: Call_GetUpdateConfigurationSetReputationMetricsEnabled_605263;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605277.validator(path, query, header, formData, body)
  let scheme = call_605277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605277.url(scheme.get, call_605277.host, call_605277.base,
                         call_605277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605277, url, valid)

proc call*(call_605278: Call_GetUpdateConfigurationSetReputationMetricsEnabled_605263;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_605279 = newJObject()
  add(query_605279, "Enabled", newJBool(Enabled))
  add(query_605279, "Action", newJString(Action))
  add(query_605279, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605279, "Version", newJString(Version))
  result = call_605278.call(nil, query_605279, nil, nil, nil)

var getUpdateConfigurationSetReputationMetricsEnabled* = Call_GetUpdateConfigurationSetReputationMetricsEnabled_605263(
    name: "getUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_GetUpdateConfigurationSetReputationMetricsEnabled_605264,
    base: "/", url: url_GetUpdateConfigurationSetReputationMetricsEnabled_605265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetSendingEnabled_605315 = ref object of OpenApiRestCall_602466
proc url_PostUpdateConfigurationSetSendingEnabled_605317(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateConfigurationSetSendingEnabled_605316(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605318 = query.getOrDefault("Action")
  valid_605318 = validateParameter(valid_605318, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_605318 != nil:
    section.add "Action", valid_605318
  var valid_605319 = query.getOrDefault("Version")
  valid_605319 = validateParameter(valid_605319, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605319 != nil:
    section.add "Version", valid_605319
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605320 = header.getOrDefault("X-Amz-Date")
  valid_605320 = validateParameter(valid_605320, JString, required = false,
                                 default = nil)
  if valid_605320 != nil:
    section.add "X-Amz-Date", valid_605320
  var valid_605321 = header.getOrDefault("X-Amz-Security-Token")
  valid_605321 = validateParameter(valid_605321, JString, required = false,
                                 default = nil)
  if valid_605321 != nil:
    section.add "X-Amz-Security-Token", valid_605321
  var valid_605322 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605322 = validateParameter(valid_605322, JString, required = false,
                                 default = nil)
  if valid_605322 != nil:
    section.add "X-Amz-Content-Sha256", valid_605322
  var valid_605323 = header.getOrDefault("X-Amz-Algorithm")
  valid_605323 = validateParameter(valid_605323, JString, required = false,
                                 default = nil)
  if valid_605323 != nil:
    section.add "X-Amz-Algorithm", valid_605323
  var valid_605324 = header.getOrDefault("X-Amz-Signature")
  valid_605324 = validateParameter(valid_605324, JString, required = false,
                                 default = nil)
  if valid_605324 != nil:
    section.add "X-Amz-Signature", valid_605324
  var valid_605325 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605325 = validateParameter(valid_605325, JString, required = false,
                                 default = nil)
  if valid_605325 != nil:
    section.add "X-Amz-SignedHeaders", valid_605325
  var valid_605326 = header.getOrDefault("X-Amz-Credential")
  valid_605326 = validateParameter(valid_605326, JString, required = false,
                                 default = nil)
  if valid_605326 != nil:
    section.add "X-Amz-Credential", valid_605326
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605327 = formData.getOrDefault("ConfigurationSetName")
  valid_605327 = validateParameter(valid_605327, JString, required = true,
                                 default = nil)
  if valid_605327 != nil:
    section.add "ConfigurationSetName", valid_605327
  var valid_605328 = formData.getOrDefault("Enabled")
  valid_605328 = validateParameter(valid_605328, JBool, required = true, default = nil)
  if valid_605328 != nil:
    section.add "Enabled", valid_605328
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605329: Call_PostUpdateConfigurationSetSendingEnabled_605315;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605329.validator(path, query, header, formData, body)
  let scheme = call_605329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605329.url(scheme.get, call_605329.host, call_605329.base,
                         call_605329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605329, url, valid)

proc call*(call_605330: Call_PostUpdateConfigurationSetSendingEnabled_605315;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605331 = newJObject()
  var formData_605332 = newJObject()
  add(formData_605332, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_605332, "Enabled", newJBool(Enabled))
  add(query_605331, "Action", newJString(Action))
  add(query_605331, "Version", newJString(Version))
  result = call_605330.call(nil, query_605331, nil, formData_605332, nil)

var postUpdateConfigurationSetSendingEnabled* = Call_PostUpdateConfigurationSetSendingEnabled_605315(
    name: "postUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_PostUpdateConfigurationSetSendingEnabled_605316,
    base: "/", url: url_PostUpdateConfigurationSetSendingEnabled_605317,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetSendingEnabled_605298 = ref object of OpenApiRestCall_602466
proc url_GetUpdateConfigurationSetSendingEnabled_605300(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateConfigurationSetSendingEnabled_605299(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_605301 = query.getOrDefault("Enabled")
  valid_605301 = validateParameter(valid_605301, JBool, required = true, default = nil)
  if valid_605301 != nil:
    section.add "Enabled", valid_605301
  var valid_605302 = query.getOrDefault("Action")
  valid_605302 = validateParameter(valid_605302, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_605302 != nil:
    section.add "Action", valid_605302
  var valid_605303 = query.getOrDefault("ConfigurationSetName")
  valid_605303 = validateParameter(valid_605303, JString, required = true,
                                 default = nil)
  if valid_605303 != nil:
    section.add "ConfigurationSetName", valid_605303
  var valid_605304 = query.getOrDefault("Version")
  valid_605304 = validateParameter(valid_605304, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605304 != nil:
    section.add "Version", valid_605304
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605305 = header.getOrDefault("X-Amz-Date")
  valid_605305 = validateParameter(valid_605305, JString, required = false,
                                 default = nil)
  if valid_605305 != nil:
    section.add "X-Amz-Date", valid_605305
  var valid_605306 = header.getOrDefault("X-Amz-Security-Token")
  valid_605306 = validateParameter(valid_605306, JString, required = false,
                                 default = nil)
  if valid_605306 != nil:
    section.add "X-Amz-Security-Token", valid_605306
  var valid_605307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605307 = validateParameter(valid_605307, JString, required = false,
                                 default = nil)
  if valid_605307 != nil:
    section.add "X-Amz-Content-Sha256", valid_605307
  var valid_605308 = header.getOrDefault("X-Amz-Algorithm")
  valid_605308 = validateParameter(valid_605308, JString, required = false,
                                 default = nil)
  if valid_605308 != nil:
    section.add "X-Amz-Algorithm", valid_605308
  var valid_605309 = header.getOrDefault("X-Amz-Signature")
  valid_605309 = validateParameter(valid_605309, JString, required = false,
                                 default = nil)
  if valid_605309 != nil:
    section.add "X-Amz-Signature", valid_605309
  var valid_605310 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605310 = validateParameter(valid_605310, JString, required = false,
                                 default = nil)
  if valid_605310 != nil:
    section.add "X-Amz-SignedHeaders", valid_605310
  var valid_605311 = header.getOrDefault("X-Amz-Credential")
  valid_605311 = validateParameter(valid_605311, JString, required = false,
                                 default = nil)
  if valid_605311 != nil:
    section.add "X-Amz-Credential", valid_605311
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605312: Call_GetUpdateConfigurationSetSendingEnabled_605298;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605312.validator(path, query, header, formData, body)
  let scheme = call_605312.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605312.url(scheme.get, call_605312.host, call_605312.base,
                         call_605312.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605312, url, valid)

proc call*(call_605313: Call_GetUpdateConfigurationSetSendingEnabled_605298;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_605314 = newJObject()
  add(query_605314, "Enabled", newJBool(Enabled))
  add(query_605314, "Action", newJString(Action))
  add(query_605314, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605314, "Version", newJString(Version))
  result = call_605313.call(nil, query_605314, nil, nil, nil)

var getUpdateConfigurationSetSendingEnabled* = Call_GetUpdateConfigurationSetSendingEnabled_605298(
    name: "getUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_GetUpdateConfigurationSetSendingEnabled_605299, base: "/",
    url: url_GetUpdateConfigurationSetSendingEnabled_605300,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetTrackingOptions_605350 = ref object of OpenApiRestCall_602466
proc url_PostUpdateConfigurationSetTrackingOptions_605352(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateConfigurationSetTrackingOptions_605351(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605353 = query.getOrDefault("Action")
  valid_605353 = validateParameter(valid_605353, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_605353 != nil:
    section.add "Action", valid_605353
  var valid_605354 = query.getOrDefault("Version")
  valid_605354 = validateParameter(valid_605354, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605354 != nil:
    section.add "Version", valid_605354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605355 = header.getOrDefault("X-Amz-Date")
  valid_605355 = validateParameter(valid_605355, JString, required = false,
                                 default = nil)
  if valid_605355 != nil:
    section.add "X-Amz-Date", valid_605355
  var valid_605356 = header.getOrDefault("X-Amz-Security-Token")
  valid_605356 = validateParameter(valid_605356, JString, required = false,
                                 default = nil)
  if valid_605356 != nil:
    section.add "X-Amz-Security-Token", valid_605356
  var valid_605357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605357 = validateParameter(valid_605357, JString, required = false,
                                 default = nil)
  if valid_605357 != nil:
    section.add "X-Amz-Content-Sha256", valid_605357
  var valid_605358 = header.getOrDefault("X-Amz-Algorithm")
  valid_605358 = validateParameter(valid_605358, JString, required = false,
                                 default = nil)
  if valid_605358 != nil:
    section.add "X-Amz-Algorithm", valid_605358
  var valid_605359 = header.getOrDefault("X-Amz-Signature")
  valid_605359 = validateParameter(valid_605359, JString, required = false,
                                 default = nil)
  if valid_605359 != nil:
    section.add "X-Amz-Signature", valid_605359
  var valid_605360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605360 = validateParameter(valid_605360, JString, required = false,
                                 default = nil)
  if valid_605360 != nil:
    section.add "X-Amz-SignedHeaders", valid_605360
  var valid_605361 = header.getOrDefault("X-Amz-Credential")
  valid_605361 = validateParameter(valid_605361, JString, required = false,
                                 default = nil)
  if valid_605361 != nil:
    section.add "X-Amz-Credential", valid_605361
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605362 = formData.getOrDefault("ConfigurationSetName")
  valid_605362 = validateParameter(valid_605362, JString, required = true,
                                 default = nil)
  if valid_605362 != nil:
    section.add "ConfigurationSetName", valid_605362
  var valid_605363 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_605363 = validateParameter(valid_605363, JString, required = false,
                                 default = nil)
  if valid_605363 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_605363
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605364: Call_PostUpdateConfigurationSetTrackingOptions_605350;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605364.validator(path, query, header, formData, body)
  let scheme = call_605364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605364.url(scheme.get, call_605364.host, call_605364.base,
                         call_605364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605364, url, valid)

proc call*(call_605365: Call_PostUpdateConfigurationSetTrackingOptions_605350;
          ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_605366 = newJObject()
  var formData_605367 = newJObject()
  add(formData_605367, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605366, "Action", newJString(Action))
  add(formData_605367, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_605366, "Version", newJString(Version))
  result = call_605365.call(nil, query_605366, nil, formData_605367, nil)

var postUpdateConfigurationSetTrackingOptions* = Call_PostUpdateConfigurationSetTrackingOptions_605350(
    name: "postUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_PostUpdateConfigurationSetTrackingOptions_605351,
    base: "/", url: url_PostUpdateConfigurationSetTrackingOptions_605352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetTrackingOptions_605333 = ref object of OpenApiRestCall_602466
proc url_GetUpdateConfigurationSetTrackingOptions_605335(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateConfigurationSetTrackingOptions_605334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605336 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_605336 = validateParameter(valid_605336, JString, required = false,
                                 default = nil)
  if valid_605336 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_605336
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605337 = query.getOrDefault("Action")
  valid_605337 = validateParameter(valid_605337, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_605337 != nil:
    section.add "Action", valid_605337
  var valid_605338 = query.getOrDefault("ConfigurationSetName")
  valid_605338 = validateParameter(valid_605338, JString, required = true,
                                 default = nil)
  if valid_605338 != nil:
    section.add "ConfigurationSetName", valid_605338
  var valid_605339 = query.getOrDefault("Version")
  valid_605339 = validateParameter(valid_605339, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605339 != nil:
    section.add "Version", valid_605339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605340 = header.getOrDefault("X-Amz-Date")
  valid_605340 = validateParameter(valid_605340, JString, required = false,
                                 default = nil)
  if valid_605340 != nil:
    section.add "X-Amz-Date", valid_605340
  var valid_605341 = header.getOrDefault("X-Amz-Security-Token")
  valid_605341 = validateParameter(valid_605341, JString, required = false,
                                 default = nil)
  if valid_605341 != nil:
    section.add "X-Amz-Security-Token", valid_605341
  var valid_605342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605342 = validateParameter(valid_605342, JString, required = false,
                                 default = nil)
  if valid_605342 != nil:
    section.add "X-Amz-Content-Sha256", valid_605342
  var valid_605343 = header.getOrDefault("X-Amz-Algorithm")
  valid_605343 = validateParameter(valid_605343, JString, required = false,
                                 default = nil)
  if valid_605343 != nil:
    section.add "X-Amz-Algorithm", valid_605343
  var valid_605344 = header.getOrDefault("X-Amz-Signature")
  valid_605344 = validateParameter(valid_605344, JString, required = false,
                                 default = nil)
  if valid_605344 != nil:
    section.add "X-Amz-Signature", valid_605344
  var valid_605345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605345 = validateParameter(valid_605345, JString, required = false,
                                 default = nil)
  if valid_605345 != nil:
    section.add "X-Amz-SignedHeaders", valid_605345
  var valid_605346 = header.getOrDefault("X-Amz-Credential")
  valid_605346 = validateParameter(valid_605346, JString, required = false,
                                 default = nil)
  if valid_605346 != nil:
    section.add "X-Amz-Credential", valid_605346
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605347: Call_GetUpdateConfigurationSetTrackingOptions_605333;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605347.validator(path, query, header, formData, body)
  let scheme = call_605347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605347.url(scheme.get, call_605347.host, call_605347.base,
                         call_605347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605347, url, valid)

proc call*(call_605348: Call_GetUpdateConfigurationSetTrackingOptions_605333;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: string (required)
  var query_605349 = newJObject()
  add(query_605349, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_605349, "Action", newJString(Action))
  add(query_605349, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605349, "Version", newJString(Version))
  result = call_605348.call(nil, query_605349, nil, nil, nil)

var getUpdateConfigurationSetTrackingOptions* = Call_GetUpdateConfigurationSetTrackingOptions_605333(
    name: "getUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_GetUpdateConfigurationSetTrackingOptions_605334,
    base: "/", url: url_GetUpdateConfigurationSetTrackingOptions_605335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateCustomVerificationEmailTemplate_605389 = ref object of OpenApiRestCall_602466
proc url_PostUpdateCustomVerificationEmailTemplate_605391(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateCustomVerificationEmailTemplate_605390(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605392 = query.getOrDefault("Action")
  valid_605392 = validateParameter(valid_605392, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_605392 != nil:
    section.add "Action", valid_605392
  var valid_605393 = query.getOrDefault("Version")
  valid_605393 = validateParameter(valid_605393, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605393 != nil:
    section.add "Version", valid_605393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605394 = header.getOrDefault("X-Amz-Date")
  valid_605394 = validateParameter(valid_605394, JString, required = false,
                                 default = nil)
  if valid_605394 != nil:
    section.add "X-Amz-Date", valid_605394
  var valid_605395 = header.getOrDefault("X-Amz-Security-Token")
  valid_605395 = validateParameter(valid_605395, JString, required = false,
                                 default = nil)
  if valid_605395 != nil:
    section.add "X-Amz-Security-Token", valid_605395
  var valid_605396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605396 = validateParameter(valid_605396, JString, required = false,
                                 default = nil)
  if valid_605396 != nil:
    section.add "X-Amz-Content-Sha256", valid_605396
  var valid_605397 = header.getOrDefault("X-Amz-Algorithm")
  valid_605397 = validateParameter(valid_605397, JString, required = false,
                                 default = nil)
  if valid_605397 != nil:
    section.add "X-Amz-Algorithm", valid_605397
  var valid_605398 = header.getOrDefault("X-Amz-Signature")
  valid_605398 = validateParameter(valid_605398, JString, required = false,
                                 default = nil)
  if valid_605398 != nil:
    section.add "X-Amz-Signature", valid_605398
  var valid_605399 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605399 = validateParameter(valid_605399, JString, required = false,
                                 default = nil)
  if valid_605399 != nil:
    section.add "X-Amz-SignedHeaders", valid_605399
  var valid_605400 = header.getOrDefault("X-Amz-Credential")
  valid_605400 = validateParameter(valid_605400, JString, required = false,
                                 default = nil)
  if valid_605400 != nil:
    section.add "X-Amz-Credential", valid_605400
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  var valid_605401 = formData.getOrDefault("SuccessRedirectionURL")
  valid_605401 = validateParameter(valid_605401, JString, required = false,
                                 default = nil)
  if valid_605401 != nil:
    section.add "SuccessRedirectionURL", valid_605401
  var valid_605402 = formData.getOrDefault("FailureRedirectionURL")
  valid_605402 = validateParameter(valid_605402, JString, required = false,
                                 default = nil)
  if valid_605402 != nil:
    section.add "FailureRedirectionURL", valid_605402
  var valid_605403 = formData.getOrDefault("FromEmailAddress")
  valid_605403 = validateParameter(valid_605403, JString, required = false,
                                 default = nil)
  if valid_605403 != nil:
    section.add "FromEmailAddress", valid_605403
  var valid_605404 = formData.getOrDefault("TemplateContent")
  valid_605404 = validateParameter(valid_605404, JString, required = false,
                                 default = nil)
  if valid_605404 != nil:
    section.add "TemplateContent", valid_605404
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_605405 = formData.getOrDefault("TemplateName")
  valid_605405 = validateParameter(valid_605405, JString, required = true,
                                 default = nil)
  if valid_605405 != nil:
    section.add "TemplateName", valid_605405
  var valid_605406 = formData.getOrDefault("TemplateSubject")
  valid_605406 = validateParameter(valid_605406, JString, required = false,
                                 default = nil)
  if valid_605406 != nil:
    section.add "TemplateSubject", valid_605406
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605407: Call_PostUpdateCustomVerificationEmailTemplate_605389;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605407.validator(path, query, header, formData, body)
  let scheme = call_605407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605407.url(scheme.get, call_605407.host, call_605407.base,
                         call_605407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605407, url, valid)

proc call*(call_605408: Call_PostUpdateCustomVerificationEmailTemplate_605389;
          TemplateName: string; SuccessRedirectionURL: string = "";
          FailureRedirectionURL: string = ""; FromEmailAddress: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          TemplateContent: string = ""; TemplateSubject: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_605409 = newJObject()
  var formData_605410 = newJObject()
  add(formData_605410, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_605410, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_605410, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_605409, "Action", newJString(Action))
  add(formData_605410, "TemplateContent", newJString(TemplateContent))
  add(formData_605410, "TemplateName", newJString(TemplateName))
  add(formData_605410, "TemplateSubject", newJString(TemplateSubject))
  add(query_605409, "Version", newJString(Version))
  result = call_605408.call(nil, query_605409, nil, formData_605410, nil)

var postUpdateCustomVerificationEmailTemplate* = Call_PostUpdateCustomVerificationEmailTemplate_605389(
    name: "postUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_PostUpdateCustomVerificationEmailTemplate_605390,
    base: "/", url: url_PostUpdateCustomVerificationEmailTemplate_605391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateCustomVerificationEmailTemplate_605368 = ref object of OpenApiRestCall_602466
proc url_GetUpdateCustomVerificationEmailTemplate_605370(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateCustomVerificationEmailTemplate_605369(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605371 = query.getOrDefault("TemplateSubject")
  valid_605371 = validateParameter(valid_605371, JString, required = false,
                                 default = nil)
  if valid_605371 != nil:
    section.add "TemplateSubject", valid_605371
  var valid_605372 = query.getOrDefault("FromEmailAddress")
  valid_605372 = validateParameter(valid_605372, JString, required = false,
                                 default = nil)
  if valid_605372 != nil:
    section.add "FromEmailAddress", valid_605372
  var valid_605373 = query.getOrDefault("TemplateContent")
  valid_605373 = validateParameter(valid_605373, JString, required = false,
                                 default = nil)
  if valid_605373 != nil:
    section.add "TemplateContent", valid_605373
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605374 = query.getOrDefault("Action")
  valid_605374 = validateParameter(valid_605374, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_605374 != nil:
    section.add "Action", valid_605374
  var valid_605375 = query.getOrDefault("TemplateName")
  valid_605375 = validateParameter(valid_605375, JString, required = true,
                                 default = nil)
  if valid_605375 != nil:
    section.add "TemplateName", valid_605375
  var valid_605376 = query.getOrDefault("SuccessRedirectionURL")
  valid_605376 = validateParameter(valid_605376, JString, required = false,
                                 default = nil)
  if valid_605376 != nil:
    section.add "SuccessRedirectionURL", valid_605376
  var valid_605377 = query.getOrDefault("FailureRedirectionURL")
  valid_605377 = validateParameter(valid_605377, JString, required = false,
                                 default = nil)
  if valid_605377 != nil:
    section.add "FailureRedirectionURL", valid_605377
  var valid_605378 = query.getOrDefault("Version")
  valid_605378 = validateParameter(valid_605378, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605378 != nil:
    section.add "Version", valid_605378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605379 = header.getOrDefault("X-Amz-Date")
  valid_605379 = validateParameter(valid_605379, JString, required = false,
                                 default = nil)
  if valid_605379 != nil:
    section.add "X-Amz-Date", valid_605379
  var valid_605380 = header.getOrDefault("X-Amz-Security-Token")
  valid_605380 = validateParameter(valid_605380, JString, required = false,
                                 default = nil)
  if valid_605380 != nil:
    section.add "X-Amz-Security-Token", valid_605380
  var valid_605381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605381 = validateParameter(valid_605381, JString, required = false,
                                 default = nil)
  if valid_605381 != nil:
    section.add "X-Amz-Content-Sha256", valid_605381
  var valid_605382 = header.getOrDefault("X-Amz-Algorithm")
  valid_605382 = validateParameter(valid_605382, JString, required = false,
                                 default = nil)
  if valid_605382 != nil:
    section.add "X-Amz-Algorithm", valid_605382
  var valid_605383 = header.getOrDefault("X-Amz-Signature")
  valid_605383 = validateParameter(valid_605383, JString, required = false,
                                 default = nil)
  if valid_605383 != nil:
    section.add "X-Amz-Signature", valid_605383
  var valid_605384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605384 = validateParameter(valid_605384, JString, required = false,
                                 default = nil)
  if valid_605384 != nil:
    section.add "X-Amz-SignedHeaders", valid_605384
  var valid_605385 = header.getOrDefault("X-Amz-Credential")
  valid_605385 = validateParameter(valid_605385, JString, required = false,
                                 default = nil)
  if valid_605385 != nil:
    section.add "X-Amz-Credential", valid_605385
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605386: Call_GetUpdateCustomVerificationEmailTemplate_605368;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605386.validator(path, query, header, formData, body)
  let scheme = call_605386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605386.url(scheme.get, call_605386.host, call_605386.base,
                         call_605386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605386, url, valid)

proc call*(call_605387: Call_GetUpdateCustomVerificationEmailTemplate_605368;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; TemplateContent: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          SuccessRedirectionURL: string = ""; FailureRedirectionURL: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_605388 = newJObject()
  add(query_605388, "TemplateSubject", newJString(TemplateSubject))
  add(query_605388, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_605388, "TemplateContent", newJString(TemplateContent))
  add(query_605388, "Action", newJString(Action))
  add(query_605388, "TemplateName", newJString(TemplateName))
  add(query_605388, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_605388, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_605388, "Version", newJString(Version))
  result = call_605387.call(nil, query_605388, nil, nil, nil)

var getUpdateCustomVerificationEmailTemplate* = Call_GetUpdateCustomVerificationEmailTemplate_605368(
    name: "getUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_GetUpdateCustomVerificationEmailTemplate_605369,
    base: "/", url: url_GetUpdateCustomVerificationEmailTemplate_605370,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateReceiptRule_605433 = ref object of OpenApiRestCall_602466
proc url_PostUpdateReceiptRule_605435(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateReceiptRule_605434(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605436 = query.getOrDefault("Action")
  valid_605436 = validateParameter(valid_605436, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_605436 != nil:
    section.add "Action", valid_605436
  var valid_605437 = query.getOrDefault("Version")
  valid_605437 = validateParameter(valid_605437, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605437 != nil:
    section.add "Version", valid_605437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605438 = header.getOrDefault("X-Amz-Date")
  valid_605438 = validateParameter(valid_605438, JString, required = false,
                                 default = nil)
  if valid_605438 != nil:
    section.add "X-Amz-Date", valid_605438
  var valid_605439 = header.getOrDefault("X-Amz-Security-Token")
  valid_605439 = validateParameter(valid_605439, JString, required = false,
                                 default = nil)
  if valid_605439 != nil:
    section.add "X-Amz-Security-Token", valid_605439
  var valid_605440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605440 = validateParameter(valid_605440, JString, required = false,
                                 default = nil)
  if valid_605440 != nil:
    section.add "X-Amz-Content-Sha256", valid_605440
  var valid_605441 = header.getOrDefault("X-Amz-Algorithm")
  valid_605441 = validateParameter(valid_605441, JString, required = false,
                                 default = nil)
  if valid_605441 != nil:
    section.add "X-Amz-Algorithm", valid_605441
  var valid_605442 = header.getOrDefault("X-Amz-Signature")
  valid_605442 = validateParameter(valid_605442, JString, required = false,
                                 default = nil)
  if valid_605442 != nil:
    section.add "X-Amz-Signature", valid_605442
  var valid_605443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605443 = validateParameter(valid_605443, JString, required = false,
                                 default = nil)
  if valid_605443 != nil:
    section.add "X-Amz-SignedHeaders", valid_605443
  var valid_605444 = header.getOrDefault("X-Amz-Credential")
  valid_605444 = validateParameter(valid_605444, JString, required = false,
                                 default = nil)
  if valid_605444 != nil:
    section.add "X-Amz-Credential", valid_605444
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_605445 = formData.getOrDefault("Rule.Recipients")
  valid_605445 = validateParameter(valid_605445, JArray, required = false,
                                 default = nil)
  if valid_605445 != nil:
    section.add "Rule.Recipients", valid_605445
  var valid_605446 = formData.getOrDefault("Rule.Enabled")
  valid_605446 = validateParameter(valid_605446, JString, required = false,
                                 default = nil)
  if valid_605446 != nil:
    section.add "Rule.Enabled", valid_605446
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_605447 = formData.getOrDefault("RuleSetName")
  valid_605447 = validateParameter(valid_605447, JString, required = true,
                                 default = nil)
  if valid_605447 != nil:
    section.add "RuleSetName", valid_605447
  var valid_605448 = formData.getOrDefault("Rule.Actions")
  valid_605448 = validateParameter(valid_605448, JArray, required = false,
                                 default = nil)
  if valid_605448 != nil:
    section.add "Rule.Actions", valid_605448
  var valid_605449 = formData.getOrDefault("Rule.Name")
  valid_605449 = validateParameter(valid_605449, JString, required = false,
                                 default = nil)
  if valid_605449 != nil:
    section.add "Rule.Name", valid_605449
  var valid_605450 = formData.getOrDefault("Rule.ScanEnabled")
  valid_605450 = validateParameter(valid_605450, JString, required = false,
                                 default = nil)
  if valid_605450 != nil:
    section.add "Rule.ScanEnabled", valid_605450
  var valid_605451 = formData.getOrDefault("Rule.TlsPolicy")
  valid_605451 = validateParameter(valid_605451, JString, required = false,
                                 default = nil)
  if valid_605451 != nil:
    section.add "Rule.TlsPolicy", valid_605451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605452: Call_PostUpdateReceiptRule_605433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605452.validator(path, query, header, formData, body)
  let scheme = call_605452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605452.url(scheme.get, call_605452.host, call_605452.base,
                         call_605452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605452, url, valid)

proc call*(call_605453: Call_PostUpdateReceiptRule_605433; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = "";
          Action: string = "UpdateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_605454 = newJObject()
  var formData_605455 = newJObject()
  if RuleRecipients != nil:
    formData_605455.add "Rule.Recipients", RuleRecipients
  add(formData_605455, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_605455, "RuleSetName", newJString(RuleSetName))
  add(query_605454, "Action", newJString(Action))
  if RuleActions != nil:
    formData_605455.add "Rule.Actions", RuleActions
  add(formData_605455, "Rule.Name", newJString(RuleName))
  add(formData_605455, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_605455, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_605454, "Version", newJString(Version))
  result = call_605453.call(nil, query_605454, nil, formData_605455, nil)

var postUpdateReceiptRule* = Call_PostUpdateReceiptRule_605433(
    name: "postUpdateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_PostUpdateReceiptRule_605434, base: "/",
    url: url_PostUpdateReceiptRule_605435, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateReceiptRule_605411 = ref object of OpenApiRestCall_602466
proc url_GetUpdateReceiptRule_605413(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateReceiptRule_605412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605414 = query.getOrDefault("Rule.ScanEnabled")
  valid_605414 = validateParameter(valid_605414, JString, required = false,
                                 default = nil)
  if valid_605414 != nil:
    section.add "Rule.ScanEnabled", valid_605414
  var valid_605415 = query.getOrDefault("Rule.Name")
  valid_605415 = validateParameter(valid_605415, JString, required = false,
                                 default = nil)
  if valid_605415 != nil:
    section.add "Rule.Name", valid_605415
  var valid_605416 = query.getOrDefault("Rule.Enabled")
  valid_605416 = validateParameter(valid_605416, JString, required = false,
                                 default = nil)
  if valid_605416 != nil:
    section.add "Rule.Enabled", valid_605416
  var valid_605417 = query.getOrDefault("Rule.TlsPolicy")
  valid_605417 = validateParameter(valid_605417, JString, required = false,
                                 default = nil)
  if valid_605417 != nil:
    section.add "Rule.TlsPolicy", valid_605417
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_605418 = query.getOrDefault("RuleSetName")
  valid_605418 = validateParameter(valid_605418, JString, required = true,
                                 default = nil)
  if valid_605418 != nil:
    section.add "RuleSetName", valid_605418
  var valid_605419 = query.getOrDefault("Action")
  valid_605419 = validateParameter(valid_605419, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_605419 != nil:
    section.add "Action", valid_605419
  var valid_605420 = query.getOrDefault("Rule.Actions")
  valid_605420 = validateParameter(valid_605420, JArray, required = false,
                                 default = nil)
  if valid_605420 != nil:
    section.add "Rule.Actions", valid_605420
  var valid_605421 = query.getOrDefault("Rule.Recipients")
  valid_605421 = validateParameter(valid_605421, JArray, required = false,
                                 default = nil)
  if valid_605421 != nil:
    section.add "Rule.Recipients", valid_605421
  var valid_605422 = query.getOrDefault("Version")
  valid_605422 = validateParameter(valid_605422, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605422 != nil:
    section.add "Version", valid_605422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605423 = header.getOrDefault("X-Amz-Date")
  valid_605423 = validateParameter(valid_605423, JString, required = false,
                                 default = nil)
  if valid_605423 != nil:
    section.add "X-Amz-Date", valid_605423
  var valid_605424 = header.getOrDefault("X-Amz-Security-Token")
  valid_605424 = validateParameter(valid_605424, JString, required = false,
                                 default = nil)
  if valid_605424 != nil:
    section.add "X-Amz-Security-Token", valid_605424
  var valid_605425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605425 = validateParameter(valid_605425, JString, required = false,
                                 default = nil)
  if valid_605425 != nil:
    section.add "X-Amz-Content-Sha256", valid_605425
  var valid_605426 = header.getOrDefault("X-Amz-Algorithm")
  valid_605426 = validateParameter(valid_605426, JString, required = false,
                                 default = nil)
  if valid_605426 != nil:
    section.add "X-Amz-Algorithm", valid_605426
  var valid_605427 = header.getOrDefault("X-Amz-Signature")
  valid_605427 = validateParameter(valid_605427, JString, required = false,
                                 default = nil)
  if valid_605427 != nil:
    section.add "X-Amz-Signature", valid_605427
  var valid_605428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605428 = validateParameter(valid_605428, JString, required = false,
                                 default = nil)
  if valid_605428 != nil:
    section.add "X-Amz-SignedHeaders", valid_605428
  var valid_605429 = header.getOrDefault("X-Amz-Credential")
  valid_605429 = validateParameter(valid_605429, JString, required = false,
                                 default = nil)
  if valid_605429 != nil:
    section.add "X-Amz-Credential", valid_605429
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605430: Call_GetUpdateReceiptRule_605411; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605430.validator(path, query, header, formData, body)
  let scheme = call_605430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605430.url(scheme.get, call_605430.host, call_605430.base,
                         call_605430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605430, url, valid)

proc call*(call_605431: Call_GetUpdateReceiptRule_605411; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          RuleTlsPolicy: string = ""; Action: string = "UpdateReceiptRule";
          RuleActions: JsonNode = nil; RuleRecipients: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_605432 = newJObject()
  add(query_605432, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_605432, "Rule.Name", newJString(RuleName))
  add(query_605432, "Rule.Enabled", newJString(RuleEnabled))
  add(query_605432, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_605432, "RuleSetName", newJString(RuleSetName))
  add(query_605432, "Action", newJString(Action))
  if RuleActions != nil:
    query_605432.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_605432.add "Rule.Recipients", RuleRecipients
  add(query_605432, "Version", newJString(Version))
  result = call_605431.call(nil, query_605432, nil, nil, nil)

var getUpdateReceiptRule* = Call_GetUpdateReceiptRule_605411(
    name: "getUpdateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_GetUpdateReceiptRule_605412, base: "/",
    url: url_GetUpdateReceiptRule_605413, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateTemplate_605475 = ref object of OpenApiRestCall_602466
proc url_PostUpdateTemplate_605477(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateTemplate_605476(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605478 = query.getOrDefault("Action")
  valid_605478 = validateParameter(valid_605478, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_605478 != nil:
    section.add "Action", valid_605478
  var valid_605479 = query.getOrDefault("Version")
  valid_605479 = validateParameter(valid_605479, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605479 != nil:
    section.add "Version", valid_605479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605480 = header.getOrDefault("X-Amz-Date")
  valid_605480 = validateParameter(valid_605480, JString, required = false,
                                 default = nil)
  if valid_605480 != nil:
    section.add "X-Amz-Date", valid_605480
  var valid_605481 = header.getOrDefault("X-Amz-Security-Token")
  valid_605481 = validateParameter(valid_605481, JString, required = false,
                                 default = nil)
  if valid_605481 != nil:
    section.add "X-Amz-Security-Token", valid_605481
  var valid_605482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605482 = validateParameter(valid_605482, JString, required = false,
                                 default = nil)
  if valid_605482 != nil:
    section.add "X-Amz-Content-Sha256", valid_605482
  var valid_605483 = header.getOrDefault("X-Amz-Algorithm")
  valid_605483 = validateParameter(valid_605483, JString, required = false,
                                 default = nil)
  if valid_605483 != nil:
    section.add "X-Amz-Algorithm", valid_605483
  var valid_605484 = header.getOrDefault("X-Amz-Signature")
  valid_605484 = validateParameter(valid_605484, JString, required = false,
                                 default = nil)
  if valid_605484 != nil:
    section.add "X-Amz-Signature", valid_605484
  var valid_605485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605485 = validateParameter(valid_605485, JString, required = false,
                                 default = nil)
  if valid_605485 != nil:
    section.add "X-Amz-SignedHeaders", valid_605485
  var valid_605486 = header.getOrDefault("X-Amz-Credential")
  valid_605486 = validateParameter(valid_605486, JString, required = false,
                                 default = nil)
  if valid_605486 != nil:
    section.add "X-Amz-Credential", valid_605486
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_605487 = formData.getOrDefault("Template.HtmlPart")
  valid_605487 = validateParameter(valid_605487, JString, required = false,
                                 default = nil)
  if valid_605487 != nil:
    section.add "Template.HtmlPart", valid_605487
  var valid_605488 = formData.getOrDefault("Template.TemplateName")
  valid_605488 = validateParameter(valid_605488, JString, required = false,
                                 default = nil)
  if valid_605488 != nil:
    section.add "Template.TemplateName", valid_605488
  var valid_605489 = formData.getOrDefault("Template.TextPart")
  valid_605489 = validateParameter(valid_605489, JString, required = false,
                                 default = nil)
  if valid_605489 != nil:
    section.add "Template.TextPart", valid_605489
  var valid_605490 = formData.getOrDefault("Template.SubjectPart")
  valid_605490 = validateParameter(valid_605490, JString, required = false,
                                 default = nil)
  if valid_605490 != nil:
    section.add "Template.SubjectPart", valid_605490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605491: Call_PostUpdateTemplate_605475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605491.validator(path, query, header, formData, body)
  let scheme = call_605491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605491.url(scheme.get, call_605491.host, call_605491.base,
                         call_605491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605491, url, valid)

proc call*(call_605492: Call_PostUpdateTemplate_605475;
          Action: string = "UpdateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_605493 = newJObject()
  var formData_605494 = newJObject()
  add(query_605493, "Action", newJString(Action))
  add(formData_605494, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_605494, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_605494, "Template.TextPart", newJString(TemplateTextPart))
  add(query_605493, "Version", newJString(Version))
  add(formData_605494, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_605492.call(nil, query_605493, nil, formData_605494, nil)

var postUpdateTemplate* = Call_PostUpdateTemplate_605475(
    name: "postUpdateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateTemplate",
    validator: validate_PostUpdateTemplate_605476, base: "/",
    url: url_PostUpdateTemplate_605477, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateTemplate_605456 = ref object of OpenApiRestCall_602466
proc url_GetUpdateTemplate_605458(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateTemplate_605457(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605459 = query.getOrDefault("Template.TemplateName")
  valid_605459 = validateParameter(valid_605459, JString, required = false,
                                 default = nil)
  if valid_605459 != nil:
    section.add "Template.TemplateName", valid_605459
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605460 = query.getOrDefault("Action")
  valid_605460 = validateParameter(valid_605460, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_605460 != nil:
    section.add "Action", valid_605460
  var valid_605461 = query.getOrDefault("Template.SubjectPart")
  valid_605461 = validateParameter(valid_605461, JString, required = false,
                                 default = nil)
  if valid_605461 != nil:
    section.add "Template.SubjectPart", valid_605461
  var valid_605462 = query.getOrDefault("Template.HtmlPart")
  valid_605462 = validateParameter(valid_605462, JString, required = false,
                                 default = nil)
  if valid_605462 != nil:
    section.add "Template.HtmlPart", valid_605462
  var valid_605463 = query.getOrDefault("Template.TextPart")
  valid_605463 = validateParameter(valid_605463, JString, required = false,
                                 default = nil)
  if valid_605463 != nil:
    section.add "Template.TextPart", valid_605463
  var valid_605464 = query.getOrDefault("Version")
  valid_605464 = validateParameter(valid_605464, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605464 != nil:
    section.add "Version", valid_605464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605465 = header.getOrDefault("X-Amz-Date")
  valid_605465 = validateParameter(valid_605465, JString, required = false,
                                 default = nil)
  if valid_605465 != nil:
    section.add "X-Amz-Date", valid_605465
  var valid_605466 = header.getOrDefault("X-Amz-Security-Token")
  valid_605466 = validateParameter(valid_605466, JString, required = false,
                                 default = nil)
  if valid_605466 != nil:
    section.add "X-Amz-Security-Token", valid_605466
  var valid_605467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605467 = validateParameter(valid_605467, JString, required = false,
                                 default = nil)
  if valid_605467 != nil:
    section.add "X-Amz-Content-Sha256", valid_605467
  var valid_605468 = header.getOrDefault("X-Amz-Algorithm")
  valid_605468 = validateParameter(valid_605468, JString, required = false,
                                 default = nil)
  if valid_605468 != nil:
    section.add "X-Amz-Algorithm", valid_605468
  var valid_605469 = header.getOrDefault("X-Amz-Signature")
  valid_605469 = validateParameter(valid_605469, JString, required = false,
                                 default = nil)
  if valid_605469 != nil:
    section.add "X-Amz-Signature", valid_605469
  var valid_605470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605470 = validateParameter(valid_605470, JString, required = false,
                                 default = nil)
  if valid_605470 != nil:
    section.add "X-Amz-SignedHeaders", valid_605470
  var valid_605471 = header.getOrDefault("X-Amz-Credential")
  valid_605471 = validateParameter(valid_605471, JString, required = false,
                                 default = nil)
  if valid_605471 != nil:
    section.add "X-Amz-Credential", valid_605471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605472: Call_GetUpdateTemplate_605456; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605472.validator(path, query, header, formData, body)
  let scheme = call_605472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605472.url(scheme.get, call_605472.host, call_605472.base,
                         call_605472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605472, url, valid)

proc call*(call_605473: Call_GetUpdateTemplate_605456;
          TemplateTemplateName: string = ""; Action: string = "UpdateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_605474 = newJObject()
  add(query_605474, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_605474, "Action", newJString(Action))
  add(query_605474, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_605474, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_605474, "Template.TextPart", newJString(TemplateTextPart))
  add(query_605474, "Version", newJString(Version))
  result = call_605473.call(nil, query_605474, nil, nil, nil)

var getUpdateTemplate* = Call_GetUpdateTemplate_605456(name: "getUpdateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateTemplate", validator: validate_GetUpdateTemplate_605457,
    base: "/", url: url_GetUpdateTemplate_605458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainDkim_605511 = ref object of OpenApiRestCall_602466
proc url_PostVerifyDomainDkim_605513(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostVerifyDomainDkim_605512(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605514 = query.getOrDefault("Action")
  valid_605514 = validateParameter(valid_605514, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_605514 != nil:
    section.add "Action", valid_605514
  var valid_605515 = query.getOrDefault("Version")
  valid_605515 = validateParameter(valid_605515, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605515 != nil:
    section.add "Version", valid_605515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605516 = header.getOrDefault("X-Amz-Date")
  valid_605516 = validateParameter(valid_605516, JString, required = false,
                                 default = nil)
  if valid_605516 != nil:
    section.add "X-Amz-Date", valid_605516
  var valid_605517 = header.getOrDefault("X-Amz-Security-Token")
  valid_605517 = validateParameter(valid_605517, JString, required = false,
                                 default = nil)
  if valid_605517 != nil:
    section.add "X-Amz-Security-Token", valid_605517
  var valid_605518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605518 = validateParameter(valid_605518, JString, required = false,
                                 default = nil)
  if valid_605518 != nil:
    section.add "X-Amz-Content-Sha256", valid_605518
  var valid_605519 = header.getOrDefault("X-Amz-Algorithm")
  valid_605519 = validateParameter(valid_605519, JString, required = false,
                                 default = nil)
  if valid_605519 != nil:
    section.add "X-Amz-Algorithm", valid_605519
  var valid_605520 = header.getOrDefault("X-Amz-Signature")
  valid_605520 = validateParameter(valid_605520, JString, required = false,
                                 default = nil)
  if valid_605520 != nil:
    section.add "X-Amz-Signature", valid_605520
  var valid_605521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605521 = validateParameter(valid_605521, JString, required = false,
                                 default = nil)
  if valid_605521 != nil:
    section.add "X-Amz-SignedHeaders", valid_605521
  var valid_605522 = header.getOrDefault("X-Amz-Credential")
  valid_605522 = validateParameter(valid_605522, JString, required = false,
                                 default = nil)
  if valid_605522 != nil:
    section.add "X-Amz-Credential", valid_605522
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_605523 = formData.getOrDefault("Domain")
  valid_605523 = validateParameter(valid_605523, JString, required = true,
                                 default = nil)
  if valid_605523 != nil:
    section.add "Domain", valid_605523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605524: Call_PostVerifyDomainDkim_605511; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605524.validator(path, query, header, formData, body)
  let scheme = call_605524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605524.url(scheme.get, call_605524.host, call_605524.base,
                         call_605524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605524, url, valid)

proc call*(call_605525: Call_PostVerifyDomainDkim_605511; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_605526 = newJObject()
  var formData_605527 = newJObject()
  add(query_605526, "Action", newJString(Action))
  add(formData_605527, "Domain", newJString(Domain))
  add(query_605526, "Version", newJString(Version))
  result = call_605525.call(nil, query_605526, nil, formData_605527, nil)

var postVerifyDomainDkim* = Call_PostVerifyDomainDkim_605511(
    name: "postVerifyDomainDkim", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_PostVerifyDomainDkim_605512, base: "/",
    url: url_PostVerifyDomainDkim_605513, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainDkim_605495 = ref object of OpenApiRestCall_602466
proc url_GetVerifyDomainDkim_605497(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetVerifyDomainDkim_605496(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605498 = query.getOrDefault("Action")
  valid_605498 = validateParameter(valid_605498, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_605498 != nil:
    section.add "Action", valid_605498
  var valid_605499 = query.getOrDefault("Domain")
  valid_605499 = validateParameter(valid_605499, JString, required = true,
                                 default = nil)
  if valid_605499 != nil:
    section.add "Domain", valid_605499
  var valid_605500 = query.getOrDefault("Version")
  valid_605500 = validateParameter(valid_605500, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605500 != nil:
    section.add "Version", valid_605500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605501 = header.getOrDefault("X-Amz-Date")
  valid_605501 = validateParameter(valid_605501, JString, required = false,
                                 default = nil)
  if valid_605501 != nil:
    section.add "X-Amz-Date", valid_605501
  var valid_605502 = header.getOrDefault("X-Amz-Security-Token")
  valid_605502 = validateParameter(valid_605502, JString, required = false,
                                 default = nil)
  if valid_605502 != nil:
    section.add "X-Amz-Security-Token", valid_605502
  var valid_605503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605503 = validateParameter(valid_605503, JString, required = false,
                                 default = nil)
  if valid_605503 != nil:
    section.add "X-Amz-Content-Sha256", valid_605503
  var valid_605504 = header.getOrDefault("X-Amz-Algorithm")
  valid_605504 = validateParameter(valid_605504, JString, required = false,
                                 default = nil)
  if valid_605504 != nil:
    section.add "X-Amz-Algorithm", valid_605504
  var valid_605505 = header.getOrDefault("X-Amz-Signature")
  valid_605505 = validateParameter(valid_605505, JString, required = false,
                                 default = nil)
  if valid_605505 != nil:
    section.add "X-Amz-Signature", valid_605505
  var valid_605506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605506 = validateParameter(valid_605506, JString, required = false,
                                 default = nil)
  if valid_605506 != nil:
    section.add "X-Amz-SignedHeaders", valid_605506
  var valid_605507 = header.getOrDefault("X-Amz-Credential")
  valid_605507 = validateParameter(valid_605507, JString, required = false,
                                 default = nil)
  if valid_605507 != nil:
    section.add "X-Amz-Credential", valid_605507
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605508: Call_GetVerifyDomainDkim_605495; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605508.validator(path, query, header, formData, body)
  let scheme = call_605508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605508.url(scheme.get, call_605508.host, call_605508.base,
                         call_605508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605508, url, valid)

proc call*(call_605509: Call_GetVerifyDomainDkim_605495; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_605510 = newJObject()
  add(query_605510, "Action", newJString(Action))
  add(query_605510, "Domain", newJString(Domain))
  add(query_605510, "Version", newJString(Version))
  result = call_605509.call(nil, query_605510, nil, nil, nil)

var getVerifyDomainDkim* = Call_GetVerifyDomainDkim_605495(
    name: "getVerifyDomainDkim", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_GetVerifyDomainDkim_605496, base: "/",
    url: url_GetVerifyDomainDkim_605497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainIdentity_605544 = ref object of OpenApiRestCall_602466
proc url_PostVerifyDomainIdentity_605546(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostVerifyDomainIdentity_605545(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605547 = query.getOrDefault("Action")
  valid_605547 = validateParameter(valid_605547, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_605547 != nil:
    section.add "Action", valid_605547
  var valid_605548 = query.getOrDefault("Version")
  valid_605548 = validateParameter(valid_605548, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605548 != nil:
    section.add "Version", valid_605548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605549 = header.getOrDefault("X-Amz-Date")
  valid_605549 = validateParameter(valid_605549, JString, required = false,
                                 default = nil)
  if valid_605549 != nil:
    section.add "X-Amz-Date", valid_605549
  var valid_605550 = header.getOrDefault("X-Amz-Security-Token")
  valid_605550 = validateParameter(valid_605550, JString, required = false,
                                 default = nil)
  if valid_605550 != nil:
    section.add "X-Amz-Security-Token", valid_605550
  var valid_605551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605551 = validateParameter(valid_605551, JString, required = false,
                                 default = nil)
  if valid_605551 != nil:
    section.add "X-Amz-Content-Sha256", valid_605551
  var valid_605552 = header.getOrDefault("X-Amz-Algorithm")
  valid_605552 = validateParameter(valid_605552, JString, required = false,
                                 default = nil)
  if valid_605552 != nil:
    section.add "X-Amz-Algorithm", valid_605552
  var valid_605553 = header.getOrDefault("X-Amz-Signature")
  valid_605553 = validateParameter(valid_605553, JString, required = false,
                                 default = nil)
  if valid_605553 != nil:
    section.add "X-Amz-Signature", valid_605553
  var valid_605554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605554 = validateParameter(valid_605554, JString, required = false,
                                 default = nil)
  if valid_605554 != nil:
    section.add "X-Amz-SignedHeaders", valid_605554
  var valid_605555 = header.getOrDefault("X-Amz-Credential")
  valid_605555 = validateParameter(valid_605555, JString, required = false,
                                 default = nil)
  if valid_605555 != nil:
    section.add "X-Amz-Credential", valid_605555
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_605556 = formData.getOrDefault("Domain")
  valid_605556 = validateParameter(valid_605556, JString, required = true,
                                 default = nil)
  if valid_605556 != nil:
    section.add "Domain", valid_605556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605557: Call_PostVerifyDomainIdentity_605544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605557.validator(path, query, header, formData, body)
  let scheme = call_605557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605557.url(scheme.get, call_605557.host, call_605557.base,
                         call_605557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605557, url, valid)

proc call*(call_605558: Call_PostVerifyDomainIdentity_605544; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_605559 = newJObject()
  var formData_605560 = newJObject()
  add(query_605559, "Action", newJString(Action))
  add(formData_605560, "Domain", newJString(Domain))
  add(query_605559, "Version", newJString(Version))
  result = call_605558.call(nil, query_605559, nil, formData_605560, nil)

var postVerifyDomainIdentity* = Call_PostVerifyDomainIdentity_605544(
    name: "postVerifyDomainIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_PostVerifyDomainIdentity_605545, base: "/",
    url: url_PostVerifyDomainIdentity_605546, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainIdentity_605528 = ref object of OpenApiRestCall_602466
proc url_GetVerifyDomainIdentity_605530(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetVerifyDomainIdentity_605529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605531 = query.getOrDefault("Action")
  valid_605531 = validateParameter(valid_605531, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_605531 != nil:
    section.add "Action", valid_605531
  var valid_605532 = query.getOrDefault("Domain")
  valid_605532 = validateParameter(valid_605532, JString, required = true,
                                 default = nil)
  if valid_605532 != nil:
    section.add "Domain", valid_605532
  var valid_605533 = query.getOrDefault("Version")
  valid_605533 = validateParameter(valid_605533, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605533 != nil:
    section.add "Version", valid_605533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605534 = header.getOrDefault("X-Amz-Date")
  valid_605534 = validateParameter(valid_605534, JString, required = false,
                                 default = nil)
  if valid_605534 != nil:
    section.add "X-Amz-Date", valid_605534
  var valid_605535 = header.getOrDefault("X-Amz-Security-Token")
  valid_605535 = validateParameter(valid_605535, JString, required = false,
                                 default = nil)
  if valid_605535 != nil:
    section.add "X-Amz-Security-Token", valid_605535
  var valid_605536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605536 = validateParameter(valid_605536, JString, required = false,
                                 default = nil)
  if valid_605536 != nil:
    section.add "X-Amz-Content-Sha256", valid_605536
  var valid_605537 = header.getOrDefault("X-Amz-Algorithm")
  valid_605537 = validateParameter(valid_605537, JString, required = false,
                                 default = nil)
  if valid_605537 != nil:
    section.add "X-Amz-Algorithm", valid_605537
  var valid_605538 = header.getOrDefault("X-Amz-Signature")
  valid_605538 = validateParameter(valid_605538, JString, required = false,
                                 default = nil)
  if valid_605538 != nil:
    section.add "X-Amz-Signature", valid_605538
  var valid_605539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605539 = validateParameter(valid_605539, JString, required = false,
                                 default = nil)
  if valid_605539 != nil:
    section.add "X-Amz-SignedHeaders", valid_605539
  var valid_605540 = header.getOrDefault("X-Amz-Credential")
  valid_605540 = validateParameter(valid_605540, JString, required = false,
                                 default = nil)
  if valid_605540 != nil:
    section.add "X-Amz-Credential", valid_605540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605541: Call_GetVerifyDomainIdentity_605528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605541.validator(path, query, header, formData, body)
  let scheme = call_605541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605541.url(scheme.get, call_605541.host, call_605541.base,
                         call_605541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605541, url, valid)

proc call*(call_605542: Call_GetVerifyDomainIdentity_605528; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_605543 = newJObject()
  add(query_605543, "Action", newJString(Action))
  add(query_605543, "Domain", newJString(Domain))
  add(query_605543, "Version", newJString(Version))
  result = call_605542.call(nil, query_605543, nil, nil, nil)

var getVerifyDomainIdentity* = Call_GetVerifyDomainIdentity_605528(
    name: "getVerifyDomainIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_GetVerifyDomainIdentity_605529, base: "/",
    url: url_GetVerifyDomainIdentity_605530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailAddress_605577 = ref object of OpenApiRestCall_602466
proc url_PostVerifyEmailAddress_605579(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostVerifyEmailAddress_605578(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605580 = query.getOrDefault("Action")
  valid_605580 = validateParameter(valid_605580, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_605580 != nil:
    section.add "Action", valid_605580
  var valid_605581 = query.getOrDefault("Version")
  valid_605581 = validateParameter(valid_605581, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605581 != nil:
    section.add "Version", valid_605581
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605582 = header.getOrDefault("X-Amz-Date")
  valid_605582 = validateParameter(valid_605582, JString, required = false,
                                 default = nil)
  if valid_605582 != nil:
    section.add "X-Amz-Date", valid_605582
  var valid_605583 = header.getOrDefault("X-Amz-Security-Token")
  valid_605583 = validateParameter(valid_605583, JString, required = false,
                                 default = nil)
  if valid_605583 != nil:
    section.add "X-Amz-Security-Token", valid_605583
  var valid_605584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605584 = validateParameter(valid_605584, JString, required = false,
                                 default = nil)
  if valid_605584 != nil:
    section.add "X-Amz-Content-Sha256", valid_605584
  var valid_605585 = header.getOrDefault("X-Amz-Algorithm")
  valid_605585 = validateParameter(valid_605585, JString, required = false,
                                 default = nil)
  if valid_605585 != nil:
    section.add "X-Amz-Algorithm", valid_605585
  var valid_605586 = header.getOrDefault("X-Amz-Signature")
  valid_605586 = validateParameter(valid_605586, JString, required = false,
                                 default = nil)
  if valid_605586 != nil:
    section.add "X-Amz-Signature", valid_605586
  var valid_605587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605587 = validateParameter(valid_605587, JString, required = false,
                                 default = nil)
  if valid_605587 != nil:
    section.add "X-Amz-SignedHeaders", valid_605587
  var valid_605588 = header.getOrDefault("X-Amz-Credential")
  valid_605588 = validateParameter(valid_605588, JString, required = false,
                                 default = nil)
  if valid_605588 != nil:
    section.add "X-Amz-Credential", valid_605588
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_605589 = formData.getOrDefault("EmailAddress")
  valid_605589 = validateParameter(valid_605589, JString, required = true,
                                 default = nil)
  if valid_605589 != nil:
    section.add "EmailAddress", valid_605589
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605590: Call_PostVerifyEmailAddress_605577; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_605590.validator(path, query, header, formData, body)
  let scheme = call_605590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605590.url(scheme.get, call_605590.host, call_605590.base,
                         call_605590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605590, url, valid)

proc call*(call_605591: Call_PostVerifyEmailAddress_605577; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605592 = newJObject()
  var formData_605593 = newJObject()
  add(formData_605593, "EmailAddress", newJString(EmailAddress))
  add(query_605592, "Action", newJString(Action))
  add(query_605592, "Version", newJString(Version))
  result = call_605591.call(nil, query_605592, nil, formData_605593, nil)

var postVerifyEmailAddress* = Call_PostVerifyEmailAddress_605577(
    name: "postVerifyEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_PostVerifyEmailAddress_605578, base: "/",
    url: url_PostVerifyEmailAddress_605579, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailAddress_605561 = ref object of OpenApiRestCall_602466
proc url_GetVerifyEmailAddress_605563(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetVerifyEmailAddress_605562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605564 = query.getOrDefault("Action")
  valid_605564 = validateParameter(valid_605564, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_605564 != nil:
    section.add "Action", valid_605564
  var valid_605565 = query.getOrDefault("EmailAddress")
  valid_605565 = validateParameter(valid_605565, JString, required = true,
                                 default = nil)
  if valid_605565 != nil:
    section.add "EmailAddress", valid_605565
  var valid_605566 = query.getOrDefault("Version")
  valid_605566 = validateParameter(valid_605566, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605566 != nil:
    section.add "Version", valid_605566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605567 = header.getOrDefault("X-Amz-Date")
  valid_605567 = validateParameter(valid_605567, JString, required = false,
                                 default = nil)
  if valid_605567 != nil:
    section.add "X-Amz-Date", valid_605567
  var valid_605568 = header.getOrDefault("X-Amz-Security-Token")
  valid_605568 = validateParameter(valid_605568, JString, required = false,
                                 default = nil)
  if valid_605568 != nil:
    section.add "X-Amz-Security-Token", valid_605568
  var valid_605569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605569 = validateParameter(valid_605569, JString, required = false,
                                 default = nil)
  if valid_605569 != nil:
    section.add "X-Amz-Content-Sha256", valid_605569
  var valid_605570 = header.getOrDefault("X-Amz-Algorithm")
  valid_605570 = validateParameter(valid_605570, JString, required = false,
                                 default = nil)
  if valid_605570 != nil:
    section.add "X-Amz-Algorithm", valid_605570
  var valid_605571 = header.getOrDefault("X-Amz-Signature")
  valid_605571 = validateParameter(valid_605571, JString, required = false,
                                 default = nil)
  if valid_605571 != nil:
    section.add "X-Amz-Signature", valid_605571
  var valid_605572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605572 = validateParameter(valid_605572, JString, required = false,
                                 default = nil)
  if valid_605572 != nil:
    section.add "X-Amz-SignedHeaders", valid_605572
  var valid_605573 = header.getOrDefault("X-Amz-Credential")
  valid_605573 = validateParameter(valid_605573, JString, required = false,
                                 default = nil)
  if valid_605573 != nil:
    section.add "X-Amz-Credential", valid_605573
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605574: Call_GetVerifyEmailAddress_605561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_605574.validator(path, query, header, formData, body)
  let scheme = call_605574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605574.url(scheme.get, call_605574.host, call_605574.base,
                         call_605574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605574, url, valid)

proc call*(call_605575: Call_GetVerifyEmailAddress_605561; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_605576 = newJObject()
  add(query_605576, "Action", newJString(Action))
  add(query_605576, "EmailAddress", newJString(EmailAddress))
  add(query_605576, "Version", newJString(Version))
  result = call_605575.call(nil, query_605576, nil, nil, nil)

var getVerifyEmailAddress* = Call_GetVerifyEmailAddress_605561(
    name: "getVerifyEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_GetVerifyEmailAddress_605562, base: "/",
    url: url_GetVerifyEmailAddress_605563, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailIdentity_605610 = ref object of OpenApiRestCall_602466
proc url_PostVerifyEmailIdentity_605612(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostVerifyEmailIdentity_605611(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605613 = query.getOrDefault("Action")
  valid_605613 = validateParameter(valid_605613, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_605613 != nil:
    section.add "Action", valid_605613
  var valid_605614 = query.getOrDefault("Version")
  valid_605614 = validateParameter(valid_605614, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605614 != nil:
    section.add "Version", valid_605614
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605615 = header.getOrDefault("X-Amz-Date")
  valid_605615 = validateParameter(valid_605615, JString, required = false,
                                 default = nil)
  if valid_605615 != nil:
    section.add "X-Amz-Date", valid_605615
  var valid_605616 = header.getOrDefault("X-Amz-Security-Token")
  valid_605616 = validateParameter(valid_605616, JString, required = false,
                                 default = nil)
  if valid_605616 != nil:
    section.add "X-Amz-Security-Token", valid_605616
  var valid_605617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605617 = validateParameter(valid_605617, JString, required = false,
                                 default = nil)
  if valid_605617 != nil:
    section.add "X-Amz-Content-Sha256", valid_605617
  var valid_605618 = header.getOrDefault("X-Amz-Algorithm")
  valid_605618 = validateParameter(valid_605618, JString, required = false,
                                 default = nil)
  if valid_605618 != nil:
    section.add "X-Amz-Algorithm", valid_605618
  var valid_605619 = header.getOrDefault("X-Amz-Signature")
  valid_605619 = validateParameter(valid_605619, JString, required = false,
                                 default = nil)
  if valid_605619 != nil:
    section.add "X-Amz-Signature", valid_605619
  var valid_605620 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605620 = validateParameter(valid_605620, JString, required = false,
                                 default = nil)
  if valid_605620 != nil:
    section.add "X-Amz-SignedHeaders", valid_605620
  var valid_605621 = header.getOrDefault("X-Amz-Credential")
  valid_605621 = validateParameter(valid_605621, JString, required = false,
                                 default = nil)
  if valid_605621 != nil:
    section.add "X-Amz-Credential", valid_605621
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_605622 = formData.getOrDefault("EmailAddress")
  valid_605622 = validateParameter(valid_605622, JString, required = true,
                                 default = nil)
  if valid_605622 != nil:
    section.add "EmailAddress", valid_605622
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605623: Call_PostVerifyEmailIdentity_605610; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605623.validator(path, query, header, formData, body)
  let scheme = call_605623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605623.url(scheme.get, call_605623.host, call_605623.base,
                         call_605623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605623, url, valid)

proc call*(call_605624: Call_PostVerifyEmailIdentity_605610; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605625 = newJObject()
  var formData_605626 = newJObject()
  add(formData_605626, "EmailAddress", newJString(EmailAddress))
  add(query_605625, "Action", newJString(Action))
  add(query_605625, "Version", newJString(Version))
  result = call_605624.call(nil, query_605625, nil, formData_605626, nil)

var postVerifyEmailIdentity* = Call_PostVerifyEmailIdentity_605610(
    name: "postVerifyEmailIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_PostVerifyEmailIdentity_605611, base: "/",
    url: url_PostVerifyEmailIdentity_605612, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailIdentity_605594 = ref object of OpenApiRestCall_602466
proc url_GetVerifyEmailIdentity_605596(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetVerifyEmailIdentity_605595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605597 = query.getOrDefault("Action")
  valid_605597 = validateParameter(valid_605597, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_605597 != nil:
    section.add "Action", valid_605597
  var valid_605598 = query.getOrDefault("EmailAddress")
  valid_605598 = validateParameter(valid_605598, JString, required = true,
                                 default = nil)
  if valid_605598 != nil:
    section.add "EmailAddress", valid_605598
  var valid_605599 = query.getOrDefault("Version")
  valid_605599 = validateParameter(valid_605599, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605599 != nil:
    section.add "Version", valid_605599
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605600 = header.getOrDefault("X-Amz-Date")
  valid_605600 = validateParameter(valid_605600, JString, required = false,
                                 default = nil)
  if valid_605600 != nil:
    section.add "X-Amz-Date", valid_605600
  var valid_605601 = header.getOrDefault("X-Amz-Security-Token")
  valid_605601 = validateParameter(valid_605601, JString, required = false,
                                 default = nil)
  if valid_605601 != nil:
    section.add "X-Amz-Security-Token", valid_605601
  var valid_605602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605602 = validateParameter(valid_605602, JString, required = false,
                                 default = nil)
  if valid_605602 != nil:
    section.add "X-Amz-Content-Sha256", valid_605602
  var valid_605603 = header.getOrDefault("X-Amz-Algorithm")
  valid_605603 = validateParameter(valid_605603, JString, required = false,
                                 default = nil)
  if valid_605603 != nil:
    section.add "X-Amz-Algorithm", valid_605603
  var valid_605604 = header.getOrDefault("X-Amz-Signature")
  valid_605604 = validateParameter(valid_605604, JString, required = false,
                                 default = nil)
  if valid_605604 != nil:
    section.add "X-Amz-Signature", valid_605604
  var valid_605605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605605 = validateParameter(valid_605605, JString, required = false,
                                 default = nil)
  if valid_605605 != nil:
    section.add "X-Amz-SignedHeaders", valid_605605
  var valid_605606 = header.getOrDefault("X-Amz-Credential")
  valid_605606 = validateParameter(valid_605606, JString, required = false,
                                 default = nil)
  if valid_605606 != nil:
    section.add "X-Amz-Credential", valid_605606
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605607: Call_GetVerifyEmailIdentity_605594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605607.validator(path, query, header, formData, body)
  let scheme = call_605607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605607.url(scheme.get, call_605607.host, call_605607.base,
                         call_605607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605607, url, valid)

proc call*(call_605608: Call_GetVerifyEmailIdentity_605594; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_605609 = newJObject()
  add(query_605609, "Action", newJString(Action))
  add(query_605609, "EmailAddress", newJString(EmailAddress))
  add(query_605609, "Version", newJString(Version))
  result = call_605608.call(nil, query_605609, nil, nil, nil)

var getVerifyEmailIdentity* = Call_GetVerifyEmailIdentity_605594(
    name: "getVerifyEmailIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_GetVerifyEmailIdentity_605595, base: "/",
    url: url_GetVerifyEmailIdentity_605596, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
