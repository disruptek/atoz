
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Simple Email Service
## version: 2010-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>.</p> </note>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/email/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_612658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_612658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_612658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "email.ap-northeast-1.amazonaws.com", "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
                           "us-west-2": "email.us-west-2.amazonaws.com",
                           "eu-west-2": "email.eu-west-2.amazonaws.com", "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "email.eu-central-1.amazonaws.com",
                           "us-east-2": "email.us-east-2.amazonaws.com",
                           "us-east-1": "email.us-east-1.amazonaws.com", "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "email.ap-south-1.amazonaws.com",
                           "eu-north-1": "email.eu-north-1.amazonaws.com", "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
                           "us-west-1": "email.us-west-1.amazonaws.com", "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "email.eu-west-3.amazonaws.com",
                           "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "email.sa-east-1.amazonaws.com",
                           "eu-west-1": "email.eu-west-1.amazonaws.com", "us-gov-west-1": "email.us-gov-west-1.amazonaws.com", "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "email.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
      "us-west-2": "email.us-west-2.amazonaws.com",
      "eu-west-2": "email.eu-west-2.amazonaws.com",
      "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
      "eu-central-1": "email.eu-central-1.amazonaws.com",
      "us-east-2": "email.us-east-2.amazonaws.com",
      "us-east-1": "email.us-east-1.amazonaws.com",
      "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "email.ap-south-1.amazonaws.com",
      "eu-north-1": "email.eu-north-1.amazonaws.com",
      "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
      "us-west-1": "email.us-west-1.amazonaws.com",
      "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
      "eu-west-3": "email.eu-west-3.amazonaws.com",
      "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "email.sa-east-1.amazonaws.com",
      "eu-west-1": "email.eu-west-1.amazonaws.com",
      "us-gov-west-1": "email.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
      "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "email"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostCloneReceiptRuleSet_613268 = ref object of OpenApiRestCall_612658
proc url_PostCloneReceiptRuleSet_613270(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCloneReceiptRuleSet_613269(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613271 = query.getOrDefault("Action")
  valid_613271 = validateParameter(valid_613271, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_613271 != nil:
    section.add "Action", valid_613271
  var valid_613272 = query.getOrDefault("Version")
  valid_613272 = validateParameter(valid_613272, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613272 != nil:
    section.add "Version", valid_613272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613273 = header.getOrDefault("X-Amz-Signature")
  valid_613273 = validateParameter(valid_613273, JString, required = false,
                                 default = nil)
  if valid_613273 != nil:
    section.add "X-Amz-Signature", valid_613273
  var valid_613274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613274 = validateParameter(valid_613274, JString, required = false,
                                 default = nil)
  if valid_613274 != nil:
    section.add "X-Amz-Content-Sha256", valid_613274
  var valid_613275 = header.getOrDefault("X-Amz-Date")
  valid_613275 = validateParameter(valid_613275, JString, required = false,
                                 default = nil)
  if valid_613275 != nil:
    section.add "X-Amz-Date", valid_613275
  var valid_613276 = header.getOrDefault("X-Amz-Credential")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "X-Amz-Credential", valid_613276
  var valid_613277 = header.getOrDefault("X-Amz-Security-Token")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Security-Token", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Algorithm")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Algorithm", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-SignedHeaders", valid_613279
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_613280 = formData.getOrDefault("RuleSetName")
  valid_613280 = validateParameter(valid_613280, JString, required = true,
                                 default = nil)
  if valid_613280 != nil:
    section.add "RuleSetName", valid_613280
  var valid_613281 = formData.getOrDefault("OriginalRuleSetName")
  valid_613281 = validateParameter(valid_613281, JString, required = true,
                                 default = nil)
  if valid_613281 != nil:
    section.add "OriginalRuleSetName", valid_613281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613282: Call_PostCloneReceiptRuleSet_613268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613282.validator(path, query, header, formData, body)
  let scheme = call_613282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613282.url(scheme.get, call_613282.host, call_613282.base,
                         call_613282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613282, url, valid)

proc call*(call_613283: Call_PostCloneReceiptRuleSet_613268; RuleSetName: string;
          OriginalRuleSetName: string; Action: string = "CloneReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613284 = newJObject()
  var formData_613285 = newJObject()
  add(formData_613285, "RuleSetName", newJString(RuleSetName))
  add(formData_613285, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_613284, "Action", newJString(Action))
  add(query_613284, "Version", newJString(Version))
  result = call_613283.call(nil, query_613284, nil, formData_613285, nil)

var postCloneReceiptRuleSet* = Call_PostCloneReceiptRuleSet_613268(
    name: "postCloneReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_PostCloneReceiptRuleSet_613269, base: "/",
    url: url_PostCloneReceiptRuleSet_613270, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCloneReceiptRuleSet_612996 = ref object of OpenApiRestCall_612658
proc url_GetCloneReceiptRuleSet_612998(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCloneReceiptRuleSet_612997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OriginalRuleSetName` field"
  var valid_613110 = query.getOrDefault("OriginalRuleSetName")
  valid_613110 = validateParameter(valid_613110, JString, required = true,
                                 default = nil)
  if valid_613110 != nil:
    section.add "OriginalRuleSetName", valid_613110
  var valid_613124 = query.getOrDefault("Action")
  valid_613124 = validateParameter(valid_613124, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_613124 != nil:
    section.add "Action", valid_613124
  var valid_613125 = query.getOrDefault("RuleSetName")
  valid_613125 = validateParameter(valid_613125, JString, required = true,
                                 default = nil)
  if valid_613125 != nil:
    section.add "RuleSetName", valid_613125
  var valid_613126 = query.getOrDefault("Version")
  valid_613126 = validateParameter(valid_613126, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613126 != nil:
    section.add "Version", valid_613126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613127 = header.getOrDefault("X-Amz-Signature")
  valid_613127 = validateParameter(valid_613127, JString, required = false,
                                 default = nil)
  if valid_613127 != nil:
    section.add "X-Amz-Signature", valid_613127
  var valid_613128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613128 = validateParameter(valid_613128, JString, required = false,
                                 default = nil)
  if valid_613128 != nil:
    section.add "X-Amz-Content-Sha256", valid_613128
  var valid_613129 = header.getOrDefault("X-Amz-Date")
  valid_613129 = validateParameter(valid_613129, JString, required = false,
                                 default = nil)
  if valid_613129 != nil:
    section.add "X-Amz-Date", valid_613129
  var valid_613130 = header.getOrDefault("X-Amz-Credential")
  valid_613130 = validateParameter(valid_613130, JString, required = false,
                                 default = nil)
  if valid_613130 != nil:
    section.add "X-Amz-Credential", valid_613130
  var valid_613131 = header.getOrDefault("X-Amz-Security-Token")
  valid_613131 = validateParameter(valid_613131, JString, required = false,
                                 default = nil)
  if valid_613131 != nil:
    section.add "X-Amz-Security-Token", valid_613131
  var valid_613132 = header.getOrDefault("X-Amz-Algorithm")
  valid_613132 = validateParameter(valid_613132, JString, required = false,
                                 default = nil)
  if valid_613132 != nil:
    section.add "X-Amz-Algorithm", valid_613132
  var valid_613133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613133 = validateParameter(valid_613133, JString, required = false,
                                 default = nil)
  if valid_613133 != nil:
    section.add "X-Amz-SignedHeaders", valid_613133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613156: Call_GetCloneReceiptRuleSet_612996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613156.validator(path, query, header, formData, body)
  let scheme = call_613156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613156.url(scheme.get, call_613156.host, call_613156.base,
                         call_613156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613156, url, valid)

proc call*(call_613227: Call_GetCloneReceiptRuleSet_612996;
          OriginalRuleSetName: string; RuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_613228 = newJObject()
  add(query_613228, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_613228, "Action", newJString(Action))
  add(query_613228, "RuleSetName", newJString(RuleSetName))
  add(query_613228, "Version", newJString(Version))
  result = call_613227.call(nil, query_613228, nil, nil, nil)

var getCloneReceiptRuleSet* = Call_GetCloneReceiptRuleSet_612996(
    name: "getCloneReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_GetCloneReceiptRuleSet_612997, base: "/",
    url: url_GetCloneReceiptRuleSet_612998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSet_613302 = ref object of OpenApiRestCall_612658
proc url_PostCreateConfigurationSet_613304(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSet_613303(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613305 = query.getOrDefault("Action")
  valid_613305 = validateParameter(valid_613305, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_613305 != nil:
    section.add "Action", valid_613305
  var valid_613306 = query.getOrDefault("Version")
  valid_613306 = validateParameter(valid_613306, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613306 != nil:
    section.add "Version", valid_613306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613307 = header.getOrDefault("X-Amz-Signature")
  valid_613307 = validateParameter(valid_613307, JString, required = false,
                                 default = nil)
  if valid_613307 != nil:
    section.add "X-Amz-Signature", valid_613307
  var valid_613308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613308 = validateParameter(valid_613308, JString, required = false,
                                 default = nil)
  if valid_613308 != nil:
    section.add "X-Amz-Content-Sha256", valid_613308
  var valid_613309 = header.getOrDefault("X-Amz-Date")
  valid_613309 = validateParameter(valid_613309, JString, required = false,
                                 default = nil)
  if valid_613309 != nil:
    section.add "X-Amz-Date", valid_613309
  var valid_613310 = header.getOrDefault("X-Amz-Credential")
  valid_613310 = validateParameter(valid_613310, JString, required = false,
                                 default = nil)
  if valid_613310 != nil:
    section.add "X-Amz-Credential", valid_613310
  var valid_613311 = header.getOrDefault("X-Amz-Security-Token")
  valid_613311 = validateParameter(valid_613311, JString, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "X-Amz-Security-Token", valid_613311
  var valid_613312 = header.getOrDefault("X-Amz-Algorithm")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "X-Amz-Algorithm", valid_613312
  var valid_613313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "X-Amz-SignedHeaders", valid_613313
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  section = newJObject()
  var valid_613314 = formData.getOrDefault("ConfigurationSet.Name")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "ConfigurationSet.Name", valid_613314
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613315: Call_PostCreateConfigurationSet_613302; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613315.validator(path, query, header, formData, body)
  let scheme = call_613315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613315.url(scheme.get, call_613315.host, call_613315.base,
                         call_613315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613315, url, valid)

proc call*(call_613316: Call_PostCreateConfigurationSet_613302;
          Action: string = "CreateConfigurationSet";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Version: string (required)
  var query_613317 = newJObject()
  var formData_613318 = newJObject()
  add(query_613317, "Action", newJString(Action))
  add(formData_613318, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_613317, "Version", newJString(Version))
  result = call_613316.call(nil, query_613317, nil, formData_613318, nil)

var postCreateConfigurationSet* = Call_PostCreateConfigurationSet_613302(
    name: "postCreateConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_PostCreateConfigurationSet_613303, base: "/",
    url: url_PostCreateConfigurationSet_613304,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSet_613286 = ref object of OpenApiRestCall_612658
proc url_GetCreateConfigurationSet_613288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSet_613287(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613289 = query.getOrDefault("ConfigurationSet.Name")
  valid_613289 = validateParameter(valid_613289, JString, required = false,
                                 default = nil)
  if valid_613289 != nil:
    section.add "ConfigurationSet.Name", valid_613289
  var valid_613290 = query.getOrDefault("Action")
  valid_613290 = validateParameter(valid_613290, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_613290 != nil:
    section.add "Action", valid_613290
  var valid_613291 = query.getOrDefault("Version")
  valid_613291 = validateParameter(valid_613291, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613291 != nil:
    section.add "Version", valid_613291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613292 = header.getOrDefault("X-Amz-Signature")
  valid_613292 = validateParameter(valid_613292, JString, required = false,
                                 default = nil)
  if valid_613292 != nil:
    section.add "X-Amz-Signature", valid_613292
  var valid_613293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613293 = validateParameter(valid_613293, JString, required = false,
                                 default = nil)
  if valid_613293 != nil:
    section.add "X-Amz-Content-Sha256", valid_613293
  var valid_613294 = header.getOrDefault("X-Amz-Date")
  valid_613294 = validateParameter(valid_613294, JString, required = false,
                                 default = nil)
  if valid_613294 != nil:
    section.add "X-Amz-Date", valid_613294
  var valid_613295 = header.getOrDefault("X-Amz-Credential")
  valid_613295 = validateParameter(valid_613295, JString, required = false,
                                 default = nil)
  if valid_613295 != nil:
    section.add "X-Amz-Credential", valid_613295
  var valid_613296 = header.getOrDefault("X-Amz-Security-Token")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Security-Token", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-Algorithm")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Algorithm", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-SignedHeaders", valid_613298
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613299: Call_GetCreateConfigurationSet_613286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613299.validator(path, query, header, formData, body)
  let scheme = call_613299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613299.url(scheme.get, call_613299.host, call_613299.base,
                         call_613299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613299, url, valid)

proc call*(call_613300: Call_GetCreateConfigurationSet_613286;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613301 = newJObject()
  add(query_613301, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_613301, "Action", newJString(Action))
  add(query_613301, "Version", newJString(Version))
  result = call_613300.call(nil, query_613301, nil, nil, nil)

var getCreateConfigurationSet* = Call_GetCreateConfigurationSet_613286(
    name: "getCreateConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_GetCreateConfigurationSet_613287, base: "/",
    url: url_GetCreateConfigurationSet_613288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetEventDestination_613341 = ref object of OpenApiRestCall_612658
proc url_PostCreateConfigurationSetEventDestination_613343(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSetEventDestination_613342(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613344 = query.getOrDefault("Action")
  valid_613344 = validateParameter(valid_613344, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_613344 != nil:
    section.add "Action", valid_613344
  var valid_613345 = query.getOrDefault("Version")
  valid_613345 = validateParameter(valid_613345, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613345 != nil:
    section.add "Version", valid_613345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613346 = header.getOrDefault("X-Amz-Signature")
  valid_613346 = validateParameter(valid_613346, JString, required = false,
                                 default = nil)
  if valid_613346 != nil:
    section.add "X-Amz-Signature", valid_613346
  var valid_613347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613347 = validateParameter(valid_613347, JString, required = false,
                                 default = nil)
  if valid_613347 != nil:
    section.add "X-Amz-Content-Sha256", valid_613347
  var valid_613348 = header.getOrDefault("X-Amz-Date")
  valid_613348 = validateParameter(valid_613348, JString, required = false,
                                 default = nil)
  if valid_613348 != nil:
    section.add "X-Amz-Date", valid_613348
  var valid_613349 = header.getOrDefault("X-Amz-Credential")
  valid_613349 = validateParameter(valid_613349, JString, required = false,
                                 default = nil)
  if valid_613349 != nil:
    section.add "X-Amz-Credential", valid_613349
  var valid_613350 = header.getOrDefault("X-Amz-Security-Token")
  valid_613350 = validateParameter(valid_613350, JString, required = false,
                                 default = nil)
  if valid_613350 != nil:
    section.add "X-Amz-Security-Token", valid_613350
  var valid_613351 = header.getOrDefault("X-Amz-Algorithm")
  valid_613351 = validateParameter(valid_613351, JString, required = false,
                                 default = nil)
  if valid_613351 != nil:
    section.add "X-Amz-Algorithm", valid_613351
  var valid_613352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613352 = validateParameter(valid_613352, JString, required = false,
                                 default = nil)
  if valid_613352 != nil:
    section.add "X-Amz-SignedHeaders", valid_613352
  result.add "header", section
  ## parameters in `formData` object:
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  var valid_613353 = formData.getOrDefault("EventDestination.Name")
  valid_613353 = validateParameter(valid_613353, JString, required = false,
                                 default = nil)
  if valid_613353 != nil:
    section.add "EventDestination.Name", valid_613353
  var valid_613354 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_613354 = validateParameter(valid_613354, JArray, required = false,
                                 default = nil)
  if valid_613354 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_613354
  var valid_613355 = formData.getOrDefault("EventDestination.Enabled")
  valid_613355 = validateParameter(valid_613355, JString, required = false,
                                 default = nil)
  if valid_613355 != nil:
    section.add "EventDestination.Enabled", valid_613355
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_613356 = formData.getOrDefault("ConfigurationSetName")
  valid_613356 = validateParameter(valid_613356, JString, required = true,
                                 default = nil)
  if valid_613356 != nil:
    section.add "ConfigurationSetName", valid_613356
  var valid_613357 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_613357 = validateParameter(valid_613357, JString, required = false,
                                 default = nil)
  if valid_613357 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_613357
  var valid_613358 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_613358 = validateParameter(valid_613358, JString, required = false,
                                 default = nil)
  if valid_613358 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_613358
  var valid_613359 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_613359 = validateParameter(valid_613359, JString, required = false,
                                 default = nil)
  if valid_613359 != nil:
    section.add "EventDestination.SNSDestination", valid_613359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613360: Call_PostCreateConfigurationSetEventDestination_613341;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613360.validator(path, query, header, formData, body)
  let scheme = call_613360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613360.url(scheme.get, call_613360.host, call_613360.base,
                         call_613360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613360, url, valid)

proc call*(call_613361: Call_PostCreateConfigurationSetEventDestination_613341;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationEnabled: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          Version: string = "2010-12-01";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationSNSDestination: string = ""): Recallable =
  ## postCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: string (required)
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  var query_613362 = newJObject()
  var formData_613363 = newJObject()
  add(formData_613363, "EventDestination.Name", newJString(EventDestinationName))
  if EventDestinationMatchingEventTypes != nil:
    formData_613363.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_613363, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_613362, "Action", newJString(Action))
  add(formData_613363, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613362, "Version", newJString(Version))
  add(formData_613363, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(formData_613363, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_613363, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  result = call_613361.call(nil, query_613362, nil, formData_613363, nil)

var postCreateConfigurationSetEventDestination* = Call_PostCreateConfigurationSetEventDestination_613341(
    name: "postCreateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_PostCreateConfigurationSetEventDestination_613342,
    base: "/", url: url_PostCreateConfigurationSetEventDestination_613343,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetEventDestination_613319 = ref object of OpenApiRestCall_612658
proc url_GetCreateConfigurationSetEventDestination_613321(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSetEventDestination_613320(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: JString (required)
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  section = newJObject()
  var valid_613322 = query.getOrDefault("EventDestination.Enabled")
  valid_613322 = validateParameter(valid_613322, JString, required = false,
                                 default = nil)
  if valid_613322 != nil:
    section.add "EventDestination.Enabled", valid_613322
  var valid_613323 = query.getOrDefault("EventDestination.SNSDestination")
  valid_613323 = validateParameter(valid_613323, JString, required = false,
                                 default = nil)
  if valid_613323 != nil:
    section.add "EventDestination.SNSDestination", valid_613323
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_613324 = query.getOrDefault("ConfigurationSetName")
  valid_613324 = validateParameter(valid_613324, JString, required = true,
                                 default = nil)
  if valid_613324 != nil:
    section.add "ConfigurationSetName", valid_613324
  var valid_613325 = query.getOrDefault("Action")
  valid_613325 = validateParameter(valid_613325, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_613325 != nil:
    section.add "Action", valid_613325
  var valid_613326 = query.getOrDefault("EventDestination.Name")
  valid_613326 = validateParameter(valid_613326, JString, required = false,
                                 default = nil)
  if valid_613326 != nil:
    section.add "EventDestination.Name", valid_613326
  var valid_613327 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_613327 = validateParameter(valid_613327, JString, required = false,
                                 default = nil)
  if valid_613327 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_613327
  var valid_613328 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_613328 = validateParameter(valid_613328, JString, required = false,
                                 default = nil)
  if valid_613328 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_613328
  var valid_613329 = query.getOrDefault("Version")
  valid_613329 = validateParameter(valid_613329, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613329 != nil:
    section.add "Version", valid_613329
  var valid_613330 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_613330 = validateParameter(valid_613330, JArray, required = false,
                                 default = nil)
  if valid_613330 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_613330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613331 = header.getOrDefault("X-Amz-Signature")
  valid_613331 = validateParameter(valid_613331, JString, required = false,
                                 default = nil)
  if valid_613331 != nil:
    section.add "X-Amz-Signature", valid_613331
  var valid_613332 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Content-Sha256", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-Date")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-Date", valid_613333
  var valid_613334 = header.getOrDefault("X-Amz-Credential")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "X-Amz-Credential", valid_613334
  var valid_613335 = header.getOrDefault("X-Amz-Security-Token")
  valid_613335 = validateParameter(valid_613335, JString, required = false,
                                 default = nil)
  if valid_613335 != nil:
    section.add "X-Amz-Security-Token", valid_613335
  var valid_613336 = header.getOrDefault("X-Amz-Algorithm")
  valid_613336 = validateParameter(valid_613336, JString, required = false,
                                 default = nil)
  if valid_613336 != nil:
    section.add "X-Amz-Algorithm", valid_613336
  var valid_613337 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613337 = validateParameter(valid_613337, JString, required = false,
                                 default = nil)
  if valid_613337 != nil:
    section.add "X-Amz-SignedHeaders", valid_613337
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613338: Call_GetCreateConfigurationSetEventDestination_613319;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613338.validator(path, query, header, formData, body)
  let scheme = call_613338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613338.url(scheme.get, call_613338.host, call_613338.base,
                         call_613338.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613338, url, valid)

proc call*(call_613339: Call_GetCreateConfigurationSetEventDestination_613319;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Version: string = "2010-12-01";
          EventDestinationMatchingEventTypes: JsonNode = nil): Recallable =
  ## getCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  var query_613340 = newJObject()
  add(query_613340, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_613340, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_613340, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613340, "Action", newJString(Action))
  add(query_613340, "EventDestination.Name", newJString(EventDestinationName))
  add(query_613340, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_613340, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_613340, "Version", newJString(Version))
  if EventDestinationMatchingEventTypes != nil:
    query_613340.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  result = call_613339.call(nil, query_613340, nil, nil, nil)

var getCreateConfigurationSetEventDestination* = Call_GetCreateConfigurationSetEventDestination_613319(
    name: "getCreateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_GetCreateConfigurationSetEventDestination_613320,
    base: "/", url: url_GetCreateConfigurationSetEventDestination_613321,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetTrackingOptions_613381 = ref object of OpenApiRestCall_612658
proc url_PostCreateConfigurationSetTrackingOptions_613383(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSetTrackingOptions_613382(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613384 = query.getOrDefault("Action")
  valid_613384 = validateParameter(valid_613384, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_613384 != nil:
    section.add "Action", valid_613384
  var valid_613385 = query.getOrDefault("Version")
  valid_613385 = validateParameter(valid_613385, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613385 != nil:
    section.add "Version", valid_613385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613386 = header.getOrDefault("X-Amz-Signature")
  valid_613386 = validateParameter(valid_613386, JString, required = false,
                                 default = nil)
  if valid_613386 != nil:
    section.add "X-Amz-Signature", valid_613386
  var valid_613387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613387 = validateParameter(valid_613387, JString, required = false,
                                 default = nil)
  if valid_613387 != nil:
    section.add "X-Amz-Content-Sha256", valid_613387
  var valid_613388 = header.getOrDefault("X-Amz-Date")
  valid_613388 = validateParameter(valid_613388, JString, required = false,
                                 default = nil)
  if valid_613388 != nil:
    section.add "X-Amz-Date", valid_613388
  var valid_613389 = header.getOrDefault("X-Amz-Credential")
  valid_613389 = validateParameter(valid_613389, JString, required = false,
                                 default = nil)
  if valid_613389 != nil:
    section.add "X-Amz-Credential", valid_613389
  var valid_613390 = header.getOrDefault("X-Amz-Security-Token")
  valid_613390 = validateParameter(valid_613390, JString, required = false,
                                 default = nil)
  if valid_613390 != nil:
    section.add "X-Amz-Security-Token", valid_613390
  var valid_613391 = header.getOrDefault("X-Amz-Algorithm")
  valid_613391 = validateParameter(valid_613391, JString, required = false,
                                 default = nil)
  if valid_613391 != nil:
    section.add "X-Amz-Algorithm", valid_613391
  var valid_613392 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613392 = validateParameter(valid_613392, JString, required = false,
                                 default = nil)
  if valid_613392 != nil:
    section.add "X-Amz-SignedHeaders", valid_613392
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_613393 = formData.getOrDefault("ConfigurationSetName")
  valid_613393 = validateParameter(valid_613393, JString, required = true,
                                 default = nil)
  if valid_613393 != nil:
    section.add "ConfigurationSetName", valid_613393
  var valid_613394 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_613394 = validateParameter(valid_613394, JString, required = false,
                                 default = nil)
  if valid_613394 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_613394
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613395: Call_PostCreateConfigurationSetTrackingOptions_613381;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_613395.validator(path, query, header, formData, body)
  let scheme = call_613395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613395.url(scheme.get, call_613395.host, call_613395.base,
                         call_613395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613395, url, valid)

proc call*(call_613396: Call_PostCreateConfigurationSetTrackingOptions_613381;
          ConfigurationSetName: string;
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01";
          TrackingOptionsCustomRedirectDomain: string = ""): Recallable =
  ## postCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  var query_613397 = newJObject()
  var formData_613398 = newJObject()
  add(query_613397, "Action", newJString(Action))
  add(formData_613398, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613397, "Version", newJString(Version))
  add(formData_613398, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  result = call_613396.call(nil, query_613397, nil, formData_613398, nil)

var postCreateConfigurationSetTrackingOptions* = Call_PostCreateConfigurationSetTrackingOptions_613381(
    name: "postCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_PostCreateConfigurationSetTrackingOptions_613382,
    base: "/", url: url_PostCreateConfigurationSetTrackingOptions_613383,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetTrackingOptions_613364 = ref object of OpenApiRestCall_612658
proc url_GetCreateConfigurationSetTrackingOptions_613366(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSetTrackingOptions_613365(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613367 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_613367 = validateParameter(valid_613367, JString, required = false,
                                 default = nil)
  if valid_613367 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_613367
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_613368 = query.getOrDefault("ConfigurationSetName")
  valid_613368 = validateParameter(valid_613368, JString, required = true,
                                 default = nil)
  if valid_613368 != nil:
    section.add "ConfigurationSetName", valid_613368
  var valid_613369 = query.getOrDefault("Action")
  valid_613369 = validateParameter(valid_613369, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_613369 != nil:
    section.add "Action", valid_613369
  var valid_613370 = query.getOrDefault("Version")
  valid_613370 = validateParameter(valid_613370, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613370 != nil:
    section.add "Version", valid_613370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613371 = header.getOrDefault("X-Amz-Signature")
  valid_613371 = validateParameter(valid_613371, JString, required = false,
                                 default = nil)
  if valid_613371 != nil:
    section.add "X-Amz-Signature", valid_613371
  var valid_613372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613372 = validateParameter(valid_613372, JString, required = false,
                                 default = nil)
  if valid_613372 != nil:
    section.add "X-Amz-Content-Sha256", valid_613372
  var valid_613373 = header.getOrDefault("X-Amz-Date")
  valid_613373 = validateParameter(valid_613373, JString, required = false,
                                 default = nil)
  if valid_613373 != nil:
    section.add "X-Amz-Date", valid_613373
  var valid_613374 = header.getOrDefault("X-Amz-Credential")
  valid_613374 = validateParameter(valid_613374, JString, required = false,
                                 default = nil)
  if valid_613374 != nil:
    section.add "X-Amz-Credential", valid_613374
  var valid_613375 = header.getOrDefault("X-Amz-Security-Token")
  valid_613375 = validateParameter(valid_613375, JString, required = false,
                                 default = nil)
  if valid_613375 != nil:
    section.add "X-Amz-Security-Token", valid_613375
  var valid_613376 = header.getOrDefault("X-Amz-Algorithm")
  valid_613376 = validateParameter(valid_613376, JString, required = false,
                                 default = nil)
  if valid_613376 != nil:
    section.add "X-Amz-Algorithm", valid_613376
  var valid_613377 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613377 = validateParameter(valid_613377, JString, required = false,
                                 default = nil)
  if valid_613377 != nil:
    section.add "X-Amz-SignedHeaders", valid_613377
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613378: Call_GetCreateConfigurationSetTrackingOptions_613364;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_613378.validator(path, query, header, formData, body)
  let scheme = call_613378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613378.url(scheme.get, call_613378.host, call_613378.base,
                         call_613378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613378, url, valid)

proc call*(call_613379: Call_GetCreateConfigurationSetTrackingOptions_613364;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613380 = newJObject()
  add(query_613380, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_613380, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613380, "Action", newJString(Action))
  add(query_613380, "Version", newJString(Version))
  result = call_613379.call(nil, query_613380, nil, nil, nil)

var getCreateConfigurationSetTrackingOptions* = Call_GetCreateConfigurationSetTrackingOptions_613364(
    name: "getCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_GetCreateConfigurationSetTrackingOptions_613365,
    base: "/", url: url_GetCreateConfigurationSetTrackingOptions_613366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomVerificationEmailTemplate_613420 = ref object of OpenApiRestCall_612658
proc url_PostCreateCustomVerificationEmailTemplate_613422(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomVerificationEmailTemplate_613421(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613423 = query.getOrDefault("Action")
  valid_613423 = validateParameter(valid_613423, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_613423 != nil:
    section.add "Action", valid_613423
  var valid_613424 = query.getOrDefault("Version")
  valid_613424 = validateParameter(valid_613424, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613424 != nil:
    section.add "Version", valid_613424
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613425 = header.getOrDefault("X-Amz-Signature")
  valid_613425 = validateParameter(valid_613425, JString, required = false,
                                 default = nil)
  if valid_613425 != nil:
    section.add "X-Amz-Signature", valid_613425
  var valid_613426 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613426 = validateParameter(valid_613426, JString, required = false,
                                 default = nil)
  if valid_613426 != nil:
    section.add "X-Amz-Content-Sha256", valid_613426
  var valid_613427 = header.getOrDefault("X-Amz-Date")
  valid_613427 = validateParameter(valid_613427, JString, required = false,
                                 default = nil)
  if valid_613427 != nil:
    section.add "X-Amz-Date", valid_613427
  var valid_613428 = header.getOrDefault("X-Amz-Credential")
  valid_613428 = validateParameter(valid_613428, JString, required = false,
                                 default = nil)
  if valid_613428 != nil:
    section.add "X-Amz-Credential", valid_613428
  var valid_613429 = header.getOrDefault("X-Amz-Security-Token")
  valid_613429 = validateParameter(valid_613429, JString, required = false,
                                 default = nil)
  if valid_613429 != nil:
    section.add "X-Amz-Security-Token", valid_613429
  var valid_613430 = header.getOrDefault("X-Amz-Algorithm")
  valid_613430 = validateParameter(valid_613430, JString, required = false,
                                 default = nil)
  if valid_613430 != nil:
    section.add "X-Amz-Algorithm", valid_613430
  var valid_613431 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613431 = validateParameter(valid_613431, JString, required = false,
                                 default = nil)
  if valid_613431 != nil:
    section.add "X-Amz-SignedHeaders", valid_613431
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TemplateSubject` field"
  var valid_613432 = formData.getOrDefault("TemplateSubject")
  valid_613432 = validateParameter(valid_613432, JString, required = true,
                                 default = nil)
  if valid_613432 != nil:
    section.add "TemplateSubject", valid_613432
  var valid_613433 = formData.getOrDefault("FromEmailAddress")
  valid_613433 = validateParameter(valid_613433, JString, required = true,
                                 default = nil)
  if valid_613433 != nil:
    section.add "FromEmailAddress", valid_613433
  var valid_613434 = formData.getOrDefault("TemplateName")
  valid_613434 = validateParameter(valid_613434, JString, required = true,
                                 default = nil)
  if valid_613434 != nil:
    section.add "TemplateName", valid_613434
  var valid_613435 = formData.getOrDefault("SuccessRedirectionURL")
  valid_613435 = validateParameter(valid_613435, JString, required = true,
                                 default = nil)
  if valid_613435 != nil:
    section.add "SuccessRedirectionURL", valid_613435
  var valid_613436 = formData.getOrDefault("TemplateContent")
  valid_613436 = validateParameter(valid_613436, JString, required = true,
                                 default = nil)
  if valid_613436 != nil:
    section.add "TemplateContent", valid_613436
  var valid_613437 = formData.getOrDefault("FailureRedirectionURL")
  valid_613437 = validateParameter(valid_613437, JString, required = true,
                                 default = nil)
  if valid_613437 != nil:
    section.add "FailureRedirectionURL", valid_613437
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613438: Call_PostCreateCustomVerificationEmailTemplate_613420;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613438.validator(path, query, header, formData, body)
  let scheme = call_613438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613438.url(scheme.get, call_613438.host, call_613438.base,
                         call_613438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613438, url, valid)

proc call*(call_613439: Call_PostCreateCustomVerificationEmailTemplate_613420;
          TemplateSubject: string; FromEmailAddress: string; TemplateName: string;
          SuccessRedirectionURL: string; TemplateContent: string;
          FailureRedirectionURL: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_613440 = newJObject()
  var formData_613441 = newJObject()
  add(formData_613441, "TemplateSubject", newJString(TemplateSubject))
  add(formData_613441, "FromEmailAddress", newJString(FromEmailAddress))
  add(formData_613441, "TemplateName", newJString(TemplateName))
  add(formData_613441, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_613441, "TemplateContent", newJString(TemplateContent))
  add(query_613440, "Action", newJString(Action))
  add(formData_613441, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_613440, "Version", newJString(Version))
  result = call_613439.call(nil, query_613440, nil, formData_613441, nil)

var postCreateCustomVerificationEmailTemplate* = Call_PostCreateCustomVerificationEmailTemplate_613420(
    name: "postCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_PostCreateCustomVerificationEmailTemplate_613421,
    base: "/", url: url_PostCreateCustomVerificationEmailTemplate_613422,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomVerificationEmailTemplate_613399 = ref object of OpenApiRestCall_612658
proc url_GetCreateCustomVerificationEmailTemplate_613401(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomVerificationEmailTemplate_613400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: JString (required)
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateSubject` field"
  var valid_613402 = query.getOrDefault("TemplateSubject")
  valid_613402 = validateParameter(valid_613402, JString, required = true,
                                 default = nil)
  if valid_613402 != nil:
    section.add "TemplateSubject", valid_613402
  var valid_613403 = query.getOrDefault("FromEmailAddress")
  valid_613403 = validateParameter(valid_613403, JString, required = true,
                                 default = nil)
  if valid_613403 != nil:
    section.add "FromEmailAddress", valid_613403
  var valid_613404 = query.getOrDefault("TemplateContent")
  valid_613404 = validateParameter(valid_613404, JString, required = true,
                                 default = nil)
  if valid_613404 != nil:
    section.add "TemplateContent", valid_613404
  var valid_613405 = query.getOrDefault("SuccessRedirectionURL")
  valid_613405 = validateParameter(valid_613405, JString, required = true,
                                 default = nil)
  if valid_613405 != nil:
    section.add "SuccessRedirectionURL", valid_613405
  var valid_613406 = query.getOrDefault("Action")
  valid_613406 = validateParameter(valid_613406, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_613406 != nil:
    section.add "Action", valid_613406
  var valid_613407 = query.getOrDefault("FailureRedirectionURL")
  valid_613407 = validateParameter(valid_613407, JString, required = true,
                                 default = nil)
  if valid_613407 != nil:
    section.add "FailureRedirectionURL", valid_613407
  var valid_613408 = query.getOrDefault("Version")
  valid_613408 = validateParameter(valid_613408, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613408 != nil:
    section.add "Version", valid_613408
  var valid_613409 = query.getOrDefault("TemplateName")
  valid_613409 = validateParameter(valid_613409, JString, required = true,
                                 default = nil)
  if valid_613409 != nil:
    section.add "TemplateName", valid_613409
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613410 = header.getOrDefault("X-Amz-Signature")
  valid_613410 = validateParameter(valid_613410, JString, required = false,
                                 default = nil)
  if valid_613410 != nil:
    section.add "X-Amz-Signature", valid_613410
  var valid_613411 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613411 = validateParameter(valid_613411, JString, required = false,
                                 default = nil)
  if valid_613411 != nil:
    section.add "X-Amz-Content-Sha256", valid_613411
  var valid_613412 = header.getOrDefault("X-Amz-Date")
  valid_613412 = validateParameter(valid_613412, JString, required = false,
                                 default = nil)
  if valid_613412 != nil:
    section.add "X-Amz-Date", valid_613412
  var valid_613413 = header.getOrDefault("X-Amz-Credential")
  valid_613413 = validateParameter(valid_613413, JString, required = false,
                                 default = nil)
  if valid_613413 != nil:
    section.add "X-Amz-Credential", valid_613413
  var valid_613414 = header.getOrDefault("X-Amz-Security-Token")
  valid_613414 = validateParameter(valid_613414, JString, required = false,
                                 default = nil)
  if valid_613414 != nil:
    section.add "X-Amz-Security-Token", valid_613414
  var valid_613415 = header.getOrDefault("X-Amz-Algorithm")
  valid_613415 = validateParameter(valid_613415, JString, required = false,
                                 default = nil)
  if valid_613415 != nil:
    section.add "X-Amz-Algorithm", valid_613415
  var valid_613416 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613416 = validateParameter(valid_613416, JString, required = false,
                                 default = nil)
  if valid_613416 != nil:
    section.add "X-Amz-SignedHeaders", valid_613416
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613417: Call_GetCreateCustomVerificationEmailTemplate_613399;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613417.validator(path, query, header, formData, body)
  let scheme = call_613417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613417.url(scheme.get, call_613417.host, call_613417.base,
                         call_613417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613417, url, valid)

proc call*(call_613418: Call_GetCreateCustomVerificationEmailTemplate_613399;
          TemplateSubject: string; FromEmailAddress: string;
          TemplateContent: string; SuccessRedirectionURL: string;
          FailureRedirectionURL: string; TemplateName: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  var query_613419 = newJObject()
  add(query_613419, "TemplateSubject", newJString(TemplateSubject))
  add(query_613419, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_613419, "TemplateContent", newJString(TemplateContent))
  add(query_613419, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_613419, "Action", newJString(Action))
  add(query_613419, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_613419, "Version", newJString(Version))
  add(query_613419, "TemplateName", newJString(TemplateName))
  result = call_613418.call(nil, query_613419, nil, nil, nil)

var getCreateCustomVerificationEmailTemplate* = Call_GetCreateCustomVerificationEmailTemplate_613399(
    name: "getCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_GetCreateCustomVerificationEmailTemplate_613400,
    base: "/", url: url_GetCreateCustomVerificationEmailTemplate_613401,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptFilter_613459 = ref object of OpenApiRestCall_612658
proc url_PostCreateReceiptFilter_613461(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptFilter_613460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613462 = query.getOrDefault("Action")
  valid_613462 = validateParameter(valid_613462, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_613462 != nil:
    section.add "Action", valid_613462
  var valid_613463 = query.getOrDefault("Version")
  valid_613463 = validateParameter(valid_613463, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613463 != nil:
    section.add "Version", valid_613463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613464 = header.getOrDefault("X-Amz-Signature")
  valid_613464 = validateParameter(valid_613464, JString, required = false,
                                 default = nil)
  if valid_613464 != nil:
    section.add "X-Amz-Signature", valid_613464
  var valid_613465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613465 = validateParameter(valid_613465, JString, required = false,
                                 default = nil)
  if valid_613465 != nil:
    section.add "X-Amz-Content-Sha256", valid_613465
  var valid_613466 = header.getOrDefault("X-Amz-Date")
  valid_613466 = validateParameter(valid_613466, JString, required = false,
                                 default = nil)
  if valid_613466 != nil:
    section.add "X-Amz-Date", valid_613466
  var valid_613467 = header.getOrDefault("X-Amz-Credential")
  valid_613467 = validateParameter(valid_613467, JString, required = false,
                                 default = nil)
  if valid_613467 != nil:
    section.add "X-Amz-Credential", valid_613467
  var valid_613468 = header.getOrDefault("X-Amz-Security-Token")
  valid_613468 = validateParameter(valid_613468, JString, required = false,
                                 default = nil)
  if valid_613468 != nil:
    section.add "X-Amz-Security-Token", valid_613468
  var valid_613469 = header.getOrDefault("X-Amz-Algorithm")
  valid_613469 = validateParameter(valid_613469, JString, required = false,
                                 default = nil)
  if valid_613469 != nil:
    section.add "X-Amz-Algorithm", valid_613469
  var valid_613470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613470 = validateParameter(valid_613470, JString, required = false,
                                 default = nil)
  if valid_613470 != nil:
    section.add "X-Amz-SignedHeaders", valid_613470
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_613471 = formData.getOrDefault("Filter.IpFilter")
  valid_613471 = validateParameter(valid_613471, JString, required = false,
                                 default = nil)
  if valid_613471 != nil:
    section.add "Filter.IpFilter", valid_613471
  var valid_613472 = formData.getOrDefault("Filter.Name")
  valid_613472 = validateParameter(valid_613472, JString, required = false,
                                 default = nil)
  if valid_613472 != nil:
    section.add "Filter.Name", valid_613472
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613473: Call_PostCreateReceiptFilter_613459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613473.validator(path, query, header, formData, body)
  let scheme = call_613473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613473.url(scheme.get, call_613473.host, call_613473.base,
                         call_613473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613473, url, valid)

proc call*(call_613474: Call_PostCreateReceiptFilter_613459;
          FilterIpFilter: string = ""; FilterName: string = "";
          Action: string = "CreateReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613475 = newJObject()
  var formData_613476 = newJObject()
  add(formData_613476, "Filter.IpFilter", newJString(FilterIpFilter))
  add(formData_613476, "Filter.Name", newJString(FilterName))
  add(query_613475, "Action", newJString(Action))
  add(query_613475, "Version", newJString(Version))
  result = call_613474.call(nil, query_613475, nil, formData_613476, nil)

var postCreateReceiptFilter* = Call_PostCreateReceiptFilter_613459(
    name: "postCreateReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_PostCreateReceiptFilter_613460, base: "/",
    url: url_PostCreateReceiptFilter_613461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptFilter_613442 = ref object of OpenApiRestCall_612658
proc url_GetCreateReceiptFilter_613444(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptFilter_613443(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613445 = query.getOrDefault("Filter.Name")
  valid_613445 = validateParameter(valid_613445, JString, required = false,
                                 default = nil)
  if valid_613445 != nil:
    section.add "Filter.Name", valid_613445
  var valid_613446 = query.getOrDefault("Filter.IpFilter")
  valid_613446 = validateParameter(valid_613446, JString, required = false,
                                 default = nil)
  if valid_613446 != nil:
    section.add "Filter.IpFilter", valid_613446
  var valid_613447 = query.getOrDefault("Action")
  valid_613447 = validateParameter(valid_613447, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_613447 != nil:
    section.add "Action", valid_613447
  var valid_613448 = query.getOrDefault("Version")
  valid_613448 = validateParameter(valid_613448, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613448 != nil:
    section.add "Version", valid_613448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613449 = header.getOrDefault("X-Amz-Signature")
  valid_613449 = validateParameter(valid_613449, JString, required = false,
                                 default = nil)
  if valid_613449 != nil:
    section.add "X-Amz-Signature", valid_613449
  var valid_613450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613450 = validateParameter(valid_613450, JString, required = false,
                                 default = nil)
  if valid_613450 != nil:
    section.add "X-Amz-Content-Sha256", valid_613450
  var valid_613451 = header.getOrDefault("X-Amz-Date")
  valid_613451 = validateParameter(valid_613451, JString, required = false,
                                 default = nil)
  if valid_613451 != nil:
    section.add "X-Amz-Date", valid_613451
  var valid_613452 = header.getOrDefault("X-Amz-Credential")
  valid_613452 = validateParameter(valid_613452, JString, required = false,
                                 default = nil)
  if valid_613452 != nil:
    section.add "X-Amz-Credential", valid_613452
  var valid_613453 = header.getOrDefault("X-Amz-Security-Token")
  valid_613453 = validateParameter(valid_613453, JString, required = false,
                                 default = nil)
  if valid_613453 != nil:
    section.add "X-Amz-Security-Token", valid_613453
  var valid_613454 = header.getOrDefault("X-Amz-Algorithm")
  valid_613454 = validateParameter(valid_613454, JString, required = false,
                                 default = nil)
  if valid_613454 != nil:
    section.add "X-Amz-Algorithm", valid_613454
  var valid_613455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613455 = validateParameter(valid_613455, JString, required = false,
                                 default = nil)
  if valid_613455 != nil:
    section.add "X-Amz-SignedHeaders", valid_613455
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613456: Call_GetCreateReceiptFilter_613442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613456.validator(path, query, header, formData, body)
  let scheme = call_613456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613456.url(scheme.get, call_613456.host, call_613456.base,
                         call_613456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613456, url, valid)

proc call*(call_613457: Call_GetCreateReceiptFilter_613442;
          FilterName: string = ""; FilterIpFilter: string = "";
          Action: string = "CreateReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613458 = newJObject()
  add(query_613458, "Filter.Name", newJString(FilterName))
  add(query_613458, "Filter.IpFilter", newJString(FilterIpFilter))
  add(query_613458, "Action", newJString(Action))
  add(query_613458, "Version", newJString(Version))
  result = call_613457.call(nil, query_613458, nil, nil, nil)

var getCreateReceiptFilter* = Call_GetCreateReceiptFilter_613442(
    name: "getCreateReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_GetCreateReceiptFilter_613443, base: "/",
    url: url_GetCreateReceiptFilter_613444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRule_613500 = ref object of OpenApiRestCall_612658
proc url_PostCreateReceiptRule_613502(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptRule_613501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613503 = query.getOrDefault("Action")
  valid_613503 = validateParameter(valid_613503, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_613503 != nil:
    section.add "Action", valid_613503
  var valid_613504 = query.getOrDefault("Version")
  valid_613504 = validateParameter(valid_613504, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613504 != nil:
    section.add "Version", valid_613504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613505 = header.getOrDefault("X-Amz-Signature")
  valid_613505 = validateParameter(valid_613505, JString, required = false,
                                 default = nil)
  if valid_613505 != nil:
    section.add "X-Amz-Signature", valid_613505
  var valid_613506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613506 = validateParameter(valid_613506, JString, required = false,
                                 default = nil)
  if valid_613506 != nil:
    section.add "X-Amz-Content-Sha256", valid_613506
  var valid_613507 = header.getOrDefault("X-Amz-Date")
  valid_613507 = validateParameter(valid_613507, JString, required = false,
                                 default = nil)
  if valid_613507 != nil:
    section.add "X-Amz-Date", valid_613507
  var valid_613508 = header.getOrDefault("X-Amz-Credential")
  valid_613508 = validateParameter(valid_613508, JString, required = false,
                                 default = nil)
  if valid_613508 != nil:
    section.add "X-Amz-Credential", valid_613508
  var valid_613509 = header.getOrDefault("X-Amz-Security-Token")
  valid_613509 = validateParameter(valid_613509, JString, required = false,
                                 default = nil)
  if valid_613509 != nil:
    section.add "X-Amz-Security-Token", valid_613509
  var valid_613510 = header.getOrDefault("X-Amz-Algorithm")
  valid_613510 = validateParameter(valid_613510, JString, required = false,
                                 default = nil)
  if valid_613510 != nil:
    section.add "X-Amz-Algorithm", valid_613510
  var valid_613511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613511 = validateParameter(valid_613511, JString, required = false,
                                 default = nil)
  if valid_613511 != nil:
    section.add "X-Amz-SignedHeaders", valid_613511
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_613512 = formData.getOrDefault("RuleSetName")
  valid_613512 = validateParameter(valid_613512, JString, required = true,
                                 default = nil)
  if valid_613512 != nil:
    section.add "RuleSetName", valid_613512
  var valid_613513 = formData.getOrDefault("Rule.Recipients")
  valid_613513 = validateParameter(valid_613513, JArray, required = false,
                                 default = nil)
  if valid_613513 != nil:
    section.add "Rule.Recipients", valid_613513
  var valid_613514 = formData.getOrDefault("Rule.Enabled")
  valid_613514 = validateParameter(valid_613514, JString, required = false,
                                 default = nil)
  if valid_613514 != nil:
    section.add "Rule.Enabled", valid_613514
  var valid_613515 = formData.getOrDefault("After")
  valid_613515 = validateParameter(valid_613515, JString, required = false,
                                 default = nil)
  if valid_613515 != nil:
    section.add "After", valid_613515
  var valid_613516 = formData.getOrDefault("Rule.Actions")
  valid_613516 = validateParameter(valid_613516, JArray, required = false,
                                 default = nil)
  if valid_613516 != nil:
    section.add "Rule.Actions", valid_613516
  var valid_613517 = formData.getOrDefault("Rule.TlsPolicy")
  valid_613517 = validateParameter(valid_613517, JString, required = false,
                                 default = nil)
  if valid_613517 != nil:
    section.add "Rule.TlsPolicy", valid_613517
  var valid_613518 = formData.getOrDefault("Rule.ScanEnabled")
  valid_613518 = validateParameter(valid_613518, JString, required = false,
                                 default = nil)
  if valid_613518 != nil:
    section.add "Rule.ScanEnabled", valid_613518
  var valid_613519 = formData.getOrDefault("Rule.Name")
  valid_613519 = validateParameter(valid_613519, JString, required = false,
                                 default = nil)
  if valid_613519 != nil:
    section.add "Rule.Name", valid_613519
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613520: Call_PostCreateReceiptRule_613500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613520.validator(path, query, header, formData, body)
  let scheme = call_613520.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613520.url(scheme.get, call_613520.host, call_613520.base,
                         call_613520.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613520, url, valid)

proc call*(call_613521: Call_PostCreateReceiptRule_613500; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = ""; After: string = "";
          RuleActions: JsonNode = nil; RuleTlsPolicy: string = "";
          Action: string = "CreateReceiptRule"; Version: string = "2010-12-01";
          RuleScanEnabled: string = ""; RuleName: string = ""): Recallable =
  ## postCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_613522 = newJObject()
  var formData_613523 = newJObject()
  add(formData_613523, "RuleSetName", newJString(RuleSetName))
  if RuleRecipients != nil:
    formData_613523.add "Rule.Recipients", RuleRecipients
  add(formData_613523, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_613523, "After", newJString(After))
  if RuleActions != nil:
    formData_613523.add "Rule.Actions", RuleActions
  add(formData_613523, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_613522, "Action", newJString(Action))
  add(query_613522, "Version", newJString(Version))
  add(formData_613523, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_613523, "Rule.Name", newJString(RuleName))
  result = call_613521.call(nil, query_613522, nil, formData_613523, nil)

var postCreateReceiptRule* = Call_PostCreateReceiptRule_613500(
    name: "postCreateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_PostCreateReceiptRule_613501, base: "/",
    url: url_PostCreateReceiptRule_613502, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRule_613477 = ref object of OpenApiRestCall_612658
proc url_GetCreateReceiptRule_613479(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptRule_613478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613480 = query.getOrDefault("Rule.Enabled")
  valid_613480 = validateParameter(valid_613480, JString, required = false,
                                 default = nil)
  if valid_613480 != nil:
    section.add "Rule.Enabled", valid_613480
  var valid_613481 = query.getOrDefault("Rule.Name")
  valid_613481 = validateParameter(valid_613481, JString, required = false,
                                 default = nil)
  if valid_613481 != nil:
    section.add "Rule.Name", valid_613481
  var valid_613482 = query.getOrDefault("After")
  valid_613482 = validateParameter(valid_613482, JString, required = false,
                                 default = nil)
  if valid_613482 != nil:
    section.add "After", valid_613482
  var valid_613483 = query.getOrDefault("Rule.ScanEnabled")
  valid_613483 = validateParameter(valid_613483, JString, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "Rule.ScanEnabled", valid_613483
  var valid_613484 = query.getOrDefault("Rule.Recipients")
  valid_613484 = validateParameter(valid_613484, JArray, required = false,
                                 default = nil)
  if valid_613484 != nil:
    section.add "Rule.Recipients", valid_613484
  var valid_613485 = query.getOrDefault("Action")
  valid_613485 = validateParameter(valid_613485, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_613485 != nil:
    section.add "Action", valid_613485
  var valid_613486 = query.getOrDefault("RuleSetName")
  valid_613486 = validateParameter(valid_613486, JString, required = true,
                                 default = nil)
  if valid_613486 != nil:
    section.add "RuleSetName", valid_613486
  var valid_613487 = query.getOrDefault("Rule.TlsPolicy")
  valid_613487 = validateParameter(valid_613487, JString, required = false,
                                 default = nil)
  if valid_613487 != nil:
    section.add "Rule.TlsPolicy", valid_613487
  var valid_613488 = query.getOrDefault("Rule.Actions")
  valid_613488 = validateParameter(valid_613488, JArray, required = false,
                                 default = nil)
  if valid_613488 != nil:
    section.add "Rule.Actions", valid_613488
  var valid_613489 = query.getOrDefault("Version")
  valid_613489 = validateParameter(valid_613489, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613489 != nil:
    section.add "Version", valid_613489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613490 = header.getOrDefault("X-Amz-Signature")
  valid_613490 = validateParameter(valid_613490, JString, required = false,
                                 default = nil)
  if valid_613490 != nil:
    section.add "X-Amz-Signature", valid_613490
  var valid_613491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613491 = validateParameter(valid_613491, JString, required = false,
                                 default = nil)
  if valid_613491 != nil:
    section.add "X-Amz-Content-Sha256", valid_613491
  var valid_613492 = header.getOrDefault("X-Amz-Date")
  valid_613492 = validateParameter(valid_613492, JString, required = false,
                                 default = nil)
  if valid_613492 != nil:
    section.add "X-Amz-Date", valid_613492
  var valid_613493 = header.getOrDefault("X-Amz-Credential")
  valid_613493 = validateParameter(valid_613493, JString, required = false,
                                 default = nil)
  if valid_613493 != nil:
    section.add "X-Amz-Credential", valid_613493
  var valid_613494 = header.getOrDefault("X-Amz-Security-Token")
  valid_613494 = validateParameter(valid_613494, JString, required = false,
                                 default = nil)
  if valid_613494 != nil:
    section.add "X-Amz-Security-Token", valid_613494
  var valid_613495 = header.getOrDefault("X-Amz-Algorithm")
  valid_613495 = validateParameter(valid_613495, JString, required = false,
                                 default = nil)
  if valid_613495 != nil:
    section.add "X-Amz-Algorithm", valid_613495
  var valid_613496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613496 = validateParameter(valid_613496, JString, required = false,
                                 default = nil)
  if valid_613496 != nil:
    section.add "X-Amz-SignedHeaders", valid_613496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613497: Call_GetCreateReceiptRule_613477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613497.validator(path, query, header, formData, body)
  let scheme = call_613497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613497.url(scheme.get, call_613497.host, call_613497.base,
                         call_613497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613497, url, valid)

proc call*(call_613498: Call_GetCreateReceiptRule_613477; RuleSetName: string;
          RuleEnabled: string = ""; RuleName: string = ""; After: string = "";
          RuleScanEnabled: string = ""; RuleRecipients: JsonNode = nil;
          Action: string = "CreateReceiptRule"; RuleTlsPolicy: string = "";
          RuleActions: JsonNode = nil; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: string (required)
  var query_613499 = newJObject()
  add(query_613499, "Rule.Enabled", newJString(RuleEnabled))
  add(query_613499, "Rule.Name", newJString(RuleName))
  add(query_613499, "After", newJString(After))
  add(query_613499, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  if RuleRecipients != nil:
    query_613499.add "Rule.Recipients", RuleRecipients
  add(query_613499, "Action", newJString(Action))
  add(query_613499, "RuleSetName", newJString(RuleSetName))
  add(query_613499, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  if RuleActions != nil:
    query_613499.add "Rule.Actions", RuleActions
  add(query_613499, "Version", newJString(Version))
  result = call_613498.call(nil, query_613499, nil, nil, nil)

var getCreateReceiptRule* = Call_GetCreateReceiptRule_613477(
    name: "getCreateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_GetCreateReceiptRule_613478, base: "/",
    url: url_GetCreateReceiptRule_613479, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRuleSet_613540 = ref object of OpenApiRestCall_612658
proc url_PostCreateReceiptRuleSet_613542(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptRuleSet_613541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613543 = query.getOrDefault("Action")
  valid_613543 = validateParameter(valid_613543, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_613543 != nil:
    section.add "Action", valid_613543
  var valid_613544 = query.getOrDefault("Version")
  valid_613544 = validateParameter(valid_613544, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613544 != nil:
    section.add "Version", valid_613544
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613545 = header.getOrDefault("X-Amz-Signature")
  valid_613545 = validateParameter(valid_613545, JString, required = false,
                                 default = nil)
  if valid_613545 != nil:
    section.add "X-Amz-Signature", valid_613545
  var valid_613546 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613546 = validateParameter(valid_613546, JString, required = false,
                                 default = nil)
  if valid_613546 != nil:
    section.add "X-Amz-Content-Sha256", valid_613546
  var valid_613547 = header.getOrDefault("X-Amz-Date")
  valid_613547 = validateParameter(valid_613547, JString, required = false,
                                 default = nil)
  if valid_613547 != nil:
    section.add "X-Amz-Date", valid_613547
  var valid_613548 = header.getOrDefault("X-Amz-Credential")
  valid_613548 = validateParameter(valid_613548, JString, required = false,
                                 default = nil)
  if valid_613548 != nil:
    section.add "X-Amz-Credential", valid_613548
  var valid_613549 = header.getOrDefault("X-Amz-Security-Token")
  valid_613549 = validateParameter(valid_613549, JString, required = false,
                                 default = nil)
  if valid_613549 != nil:
    section.add "X-Amz-Security-Token", valid_613549
  var valid_613550 = header.getOrDefault("X-Amz-Algorithm")
  valid_613550 = validateParameter(valid_613550, JString, required = false,
                                 default = nil)
  if valid_613550 != nil:
    section.add "X-Amz-Algorithm", valid_613550
  var valid_613551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613551 = validateParameter(valid_613551, JString, required = false,
                                 default = nil)
  if valid_613551 != nil:
    section.add "X-Amz-SignedHeaders", valid_613551
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_613552 = formData.getOrDefault("RuleSetName")
  valid_613552 = validateParameter(valid_613552, JString, required = true,
                                 default = nil)
  if valid_613552 != nil:
    section.add "RuleSetName", valid_613552
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613553: Call_PostCreateReceiptRuleSet_613540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613553.validator(path, query, header, formData, body)
  let scheme = call_613553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613553.url(scheme.get, call_613553.host, call_613553.base,
                         call_613553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613553, url, valid)

proc call*(call_613554: Call_PostCreateReceiptRuleSet_613540; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613555 = newJObject()
  var formData_613556 = newJObject()
  add(formData_613556, "RuleSetName", newJString(RuleSetName))
  add(query_613555, "Action", newJString(Action))
  add(query_613555, "Version", newJString(Version))
  result = call_613554.call(nil, query_613555, nil, formData_613556, nil)

var postCreateReceiptRuleSet* = Call_PostCreateReceiptRuleSet_613540(
    name: "postCreateReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_PostCreateReceiptRuleSet_613541, base: "/",
    url: url_PostCreateReceiptRuleSet_613542, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRuleSet_613524 = ref object of OpenApiRestCall_612658
proc url_GetCreateReceiptRuleSet_613526(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptRuleSet_613525(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613527 = query.getOrDefault("Action")
  valid_613527 = validateParameter(valid_613527, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_613527 != nil:
    section.add "Action", valid_613527
  var valid_613528 = query.getOrDefault("RuleSetName")
  valid_613528 = validateParameter(valid_613528, JString, required = true,
                                 default = nil)
  if valid_613528 != nil:
    section.add "RuleSetName", valid_613528
  var valid_613529 = query.getOrDefault("Version")
  valid_613529 = validateParameter(valid_613529, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613529 != nil:
    section.add "Version", valid_613529
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613530 = header.getOrDefault("X-Amz-Signature")
  valid_613530 = validateParameter(valid_613530, JString, required = false,
                                 default = nil)
  if valid_613530 != nil:
    section.add "X-Amz-Signature", valid_613530
  var valid_613531 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613531 = validateParameter(valid_613531, JString, required = false,
                                 default = nil)
  if valid_613531 != nil:
    section.add "X-Amz-Content-Sha256", valid_613531
  var valid_613532 = header.getOrDefault("X-Amz-Date")
  valid_613532 = validateParameter(valid_613532, JString, required = false,
                                 default = nil)
  if valid_613532 != nil:
    section.add "X-Amz-Date", valid_613532
  var valid_613533 = header.getOrDefault("X-Amz-Credential")
  valid_613533 = validateParameter(valid_613533, JString, required = false,
                                 default = nil)
  if valid_613533 != nil:
    section.add "X-Amz-Credential", valid_613533
  var valid_613534 = header.getOrDefault("X-Amz-Security-Token")
  valid_613534 = validateParameter(valid_613534, JString, required = false,
                                 default = nil)
  if valid_613534 != nil:
    section.add "X-Amz-Security-Token", valid_613534
  var valid_613535 = header.getOrDefault("X-Amz-Algorithm")
  valid_613535 = validateParameter(valid_613535, JString, required = false,
                                 default = nil)
  if valid_613535 != nil:
    section.add "X-Amz-Algorithm", valid_613535
  var valid_613536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613536 = validateParameter(valid_613536, JString, required = false,
                                 default = nil)
  if valid_613536 != nil:
    section.add "X-Amz-SignedHeaders", valid_613536
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613537: Call_GetCreateReceiptRuleSet_613524; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613537.validator(path, query, header, formData, body)
  let scheme = call_613537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613537.url(scheme.get, call_613537.host, call_613537.base,
                         call_613537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613537, url, valid)

proc call*(call_613538: Call_GetCreateReceiptRuleSet_613524; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_613539 = newJObject()
  add(query_613539, "Action", newJString(Action))
  add(query_613539, "RuleSetName", newJString(RuleSetName))
  add(query_613539, "Version", newJString(Version))
  result = call_613538.call(nil, query_613539, nil, nil, nil)

var getCreateReceiptRuleSet* = Call_GetCreateReceiptRuleSet_613524(
    name: "getCreateReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_GetCreateReceiptRuleSet_613525, base: "/",
    url: url_GetCreateReceiptRuleSet_613526, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTemplate_613576 = ref object of OpenApiRestCall_612658
proc url_PostCreateTemplate_613578(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateTemplate_613577(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613579 = query.getOrDefault("Action")
  valid_613579 = validateParameter(valid_613579, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_613579 != nil:
    section.add "Action", valid_613579
  var valid_613580 = query.getOrDefault("Version")
  valid_613580 = validateParameter(valid_613580, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613580 != nil:
    section.add "Version", valid_613580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613581 = header.getOrDefault("X-Amz-Signature")
  valid_613581 = validateParameter(valid_613581, JString, required = false,
                                 default = nil)
  if valid_613581 != nil:
    section.add "X-Amz-Signature", valid_613581
  var valid_613582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613582 = validateParameter(valid_613582, JString, required = false,
                                 default = nil)
  if valid_613582 != nil:
    section.add "X-Amz-Content-Sha256", valid_613582
  var valid_613583 = header.getOrDefault("X-Amz-Date")
  valid_613583 = validateParameter(valid_613583, JString, required = false,
                                 default = nil)
  if valid_613583 != nil:
    section.add "X-Amz-Date", valid_613583
  var valid_613584 = header.getOrDefault("X-Amz-Credential")
  valid_613584 = validateParameter(valid_613584, JString, required = false,
                                 default = nil)
  if valid_613584 != nil:
    section.add "X-Amz-Credential", valid_613584
  var valid_613585 = header.getOrDefault("X-Amz-Security-Token")
  valid_613585 = validateParameter(valid_613585, JString, required = false,
                                 default = nil)
  if valid_613585 != nil:
    section.add "X-Amz-Security-Token", valid_613585
  var valid_613586 = header.getOrDefault("X-Amz-Algorithm")
  valid_613586 = validateParameter(valid_613586, JString, required = false,
                                 default = nil)
  if valid_613586 != nil:
    section.add "X-Amz-Algorithm", valid_613586
  var valid_613587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613587 = validateParameter(valid_613587, JString, required = false,
                                 default = nil)
  if valid_613587 != nil:
    section.add "X-Amz-SignedHeaders", valid_613587
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  section = newJObject()
  var valid_613588 = formData.getOrDefault("Template.TextPart")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "Template.TextPart", valid_613588
  var valid_613589 = formData.getOrDefault("Template.TemplateName")
  valid_613589 = validateParameter(valid_613589, JString, required = false,
                                 default = nil)
  if valid_613589 != nil:
    section.add "Template.TemplateName", valid_613589
  var valid_613590 = formData.getOrDefault("Template.SubjectPart")
  valid_613590 = validateParameter(valid_613590, JString, required = false,
                                 default = nil)
  if valid_613590 != nil:
    section.add "Template.SubjectPart", valid_613590
  var valid_613591 = formData.getOrDefault("Template.HtmlPart")
  valid_613591 = validateParameter(valid_613591, JString, required = false,
                                 default = nil)
  if valid_613591 != nil:
    section.add "Template.HtmlPart", valid_613591
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613592: Call_PostCreateTemplate_613576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613592.validator(path, query, header, formData, body)
  let scheme = call_613592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613592.url(scheme.get, call_613592.host, call_613592.base,
                         call_613592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613592, url, valid)

proc call*(call_613593: Call_PostCreateTemplate_613576;
          TemplateTextPart: string = ""; TemplateTemplateName: string = "";
          TemplateSubjectPart: string = ""; Action: string = "CreateTemplate";
          Version: string = "2010-12-01"; TemplateHtmlPart: string = ""): Recallable =
  ## postCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  var query_613594 = newJObject()
  var formData_613595 = newJObject()
  add(formData_613595, "Template.TextPart", newJString(TemplateTextPart))
  add(formData_613595, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_613595, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_613594, "Action", newJString(Action))
  add(query_613594, "Version", newJString(Version))
  add(formData_613595, "Template.HtmlPart", newJString(TemplateHtmlPart))
  result = call_613593.call(nil, query_613594, nil, formData_613595, nil)

var postCreateTemplate* = Call_PostCreateTemplate_613576(
    name: "postCreateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateTemplate",
    validator: validate_PostCreateTemplate_613577, base: "/",
    url: url_PostCreateTemplate_613578, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTemplate_613557 = ref object of OpenApiRestCall_612658
proc url_GetCreateTemplate_613559(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateTemplate_613558(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613560 = query.getOrDefault("Template.HtmlPart")
  valid_613560 = validateParameter(valid_613560, JString, required = false,
                                 default = nil)
  if valid_613560 != nil:
    section.add "Template.HtmlPart", valid_613560
  var valid_613561 = query.getOrDefault("Template.TemplateName")
  valid_613561 = validateParameter(valid_613561, JString, required = false,
                                 default = nil)
  if valid_613561 != nil:
    section.add "Template.TemplateName", valid_613561
  var valid_613562 = query.getOrDefault("Template.TextPart")
  valid_613562 = validateParameter(valid_613562, JString, required = false,
                                 default = nil)
  if valid_613562 != nil:
    section.add "Template.TextPart", valid_613562
  var valid_613563 = query.getOrDefault("Action")
  valid_613563 = validateParameter(valid_613563, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_613563 != nil:
    section.add "Action", valid_613563
  var valid_613564 = query.getOrDefault("Template.SubjectPart")
  valid_613564 = validateParameter(valid_613564, JString, required = false,
                                 default = nil)
  if valid_613564 != nil:
    section.add "Template.SubjectPart", valid_613564
  var valid_613565 = query.getOrDefault("Version")
  valid_613565 = validateParameter(valid_613565, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613565 != nil:
    section.add "Version", valid_613565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613566 = header.getOrDefault("X-Amz-Signature")
  valid_613566 = validateParameter(valid_613566, JString, required = false,
                                 default = nil)
  if valid_613566 != nil:
    section.add "X-Amz-Signature", valid_613566
  var valid_613567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613567 = validateParameter(valid_613567, JString, required = false,
                                 default = nil)
  if valid_613567 != nil:
    section.add "X-Amz-Content-Sha256", valid_613567
  var valid_613568 = header.getOrDefault("X-Amz-Date")
  valid_613568 = validateParameter(valid_613568, JString, required = false,
                                 default = nil)
  if valid_613568 != nil:
    section.add "X-Amz-Date", valid_613568
  var valid_613569 = header.getOrDefault("X-Amz-Credential")
  valid_613569 = validateParameter(valid_613569, JString, required = false,
                                 default = nil)
  if valid_613569 != nil:
    section.add "X-Amz-Credential", valid_613569
  var valid_613570 = header.getOrDefault("X-Amz-Security-Token")
  valid_613570 = validateParameter(valid_613570, JString, required = false,
                                 default = nil)
  if valid_613570 != nil:
    section.add "X-Amz-Security-Token", valid_613570
  var valid_613571 = header.getOrDefault("X-Amz-Algorithm")
  valid_613571 = validateParameter(valid_613571, JString, required = false,
                                 default = nil)
  if valid_613571 != nil:
    section.add "X-Amz-Algorithm", valid_613571
  var valid_613572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613572 = validateParameter(valid_613572, JString, required = false,
                                 default = nil)
  if valid_613572 != nil:
    section.add "X-Amz-SignedHeaders", valid_613572
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613573: Call_GetCreateTemplate_613557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613573.validator(path, query, header, formData, body)
  let scheme = call_613573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613573.url(scheme.get, call_613573.host, call_613573.base,
                         call_613573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613573, url, valid)

proc call*(call_613574: Call_GetCreateTemplate_613557;
          TemplateHtmlPart: string = ""; TemplateTemplateName: string = "";
          TemplateTextPart: string = ""; Action: string = "CreateTemplate";
          TemplateSubjectPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: string (required)
  var query_613575 = newJObject()
  add(query_613575, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_613575, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_613575, "Template.TextPart", newJString(TemplateTextPart))
  add(query_613575, "Action", newJString(Action))
  add(query_613575, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_613575, "Version", newJString(Version))
  result = call_613574.call(nil, query_613575, nil, nil, nil)

var getCreateTemplate* = Call_GetCreateTemplate_613557(name: "getCreateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=CreateTemplate", validator: validate_GetCreateTemplate_613558,
    base: "/", url: url_GetCreateTemplate_613559,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSet_613612 = ref object of OpenApiRestCall_612658
proc url_PostDeleteConfigurationSet_613614(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSet_613613(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613615 = query.getOrDefault("Action")
  valid_613615 = validateParameter(valid_613615, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_613615 != nil:
    section.add "Action", valid_613615
  var valid_613616 = query.getOrDefault("Version")
  valid_613616 = validateParameter(valid_613616, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613616 != nil:
    section.add "Version", valid_613616
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613617 = header.getOrDefault("X-Amz-Signature")
  valid_613617 = validateParameter(valid_613617, JString, required = false,
                                 default = nil)
  if valid_613617 != nil:
    section.add "X-Amz-Signature", valid_613617
  var valid_613618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613618 = validateParameter(valid_613618, JString, required = false,
                                 default = nil)
  if valid_613618 != nil:
    section.add "X-Amz-Content-Sha256", valid_613618
  var valid_613619 = header.getOrDefault("X-Amz-Date")
  valid_613619 = validateParameter(valid_613619, JString, required = false,
                                 default = nil)
  if valid_613619 != nil:
    section.add "X-Amz-Date", valid_613619
  var valid_613620 = header.getOrDefault("X-Amz-Credential")
  valid_613620 = validateParameter(valid_613620, JString, required = false,
                                 default = nil)
  if valid_613620 != nil:
    section.add "X-Amz-Credential", valid_613620
  var valid_613621 = header.getOrDefault("X-Amz-Security-Token")
  valid_613621 = validateParameter(valid_613621, JString, required = false,
                                 default = nil)
  if valid_613621 != nil:
    section.add "X-Amz-Security-Token", valid_613621
  var valid_613622 = header.getOrDefault("X-Amz-Algorithm")
  valid_613622 = validateParameter(valid_613622, JString, required = false,
                                 default = nil)
  if valid_613622 != nil:
    section.add "X-Amz-Algorithm", valid_613622
  var valid_613623 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613623 = validateParameter(valid_613623, JString, required = false,
                                 default = nil)
  if valid_613623 != nil:
    section.add "X-Amz-SignedHeaders", valid_613623
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_613624 = formData.getOrDefault("ConfigurationSetName")
  valid_613624 = validateParameter(valid_613624, JString, required = true,
                                 default = nil)
  if valid_613624 != nil:
    section.add "ConfigurationSetName", valid_613624
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613625: Call_PostDeleteConfigurationSet_613612; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613625.validator(path, query, header, formData, body)
  let scheme = call_613625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613625.url(scheme.get, call_613625.host, call_613625.base,
                         call_613625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613625, url, valid)

proc call*(call_613626: Call_PostDeleteConfigurationSet_613612;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: string (required)
  var query_613627 = newJObject()
  var formData_613628 = newJObject()
  add(query_613627, "Action", newJString(Action))
  add(formData_613628, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613627, "Version", newJString(Version))
  result = call_613626.call(nil, query_613627, nil, formData_613628, nil)

var postDeleteConfigurationSet* = Call_PostDeleteConfigurationSet_613612(
    name: "postDeleteConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_PostDeleteConfigurationSet_613613, base: "/",
    url: url_PostDeleteConfigurationSet_613614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSet_613596 = ref object of OpenApiRestCall_612658
proc url_GetDeleteConfigurationSet_613598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSet_613597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_613599 = query.getOrDefault("ConfigurationSetName")
  valid_613599 = validateParameter(valid_613599, JString, required = true,
                                 default = nil)
  if valid_613599 != nil:
    section.add "ConfigurationSetName", valid_613599
  var valid_613600 = query.getOrDefault("Action")
  valid_613600 = validateParameter(valid_613600, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_613600 != nil:
    section.add "Action", valid_613600
  var valid_613601 = query.getOrDefault("Version")
  valid_613601 = validateParameter(valid_613601, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613601 != nil:
    section.add "Version", valid_613601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613602 = header.getOrDefault("X-Amz-Signature")
  valid_613602 = validateParameter(valid_613602, JString, required = false,
                                 default = nil)
  if valid_613602 != nil:
    section.add "X-Amz-Signature", valid_613602
  var valid_613603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613603 = validateParameter(valid_613603, JString, required = false,
                                 default = nil)
  if valid_613603 != nil:
    section.add "X-Amz-Content-Sha256", valid_613603
  var valid_613604 = header.getOrDefault("X-Amz-Date")
  valid_613604 = validateParameter(valid_613604, JString, required = false,
                                 default = nil)
  if valid_613604 != nil:
    section.add "X-Amz-Date", valid_613604
  var valid_613605 = header.getOrDefault("X-Amz-Credential")
  valid_613605 = validateParameter(valid_613605, JString, required = false,
                                 default = nil)
  if valid_613605 != nil:
    section.add "X-Amz-Credential", valid_613605
  var valid_613606 = header.getOrDefault("X-Amz-Security-Token")
  valid_613606 = validateParameter(valid_613606, JString, required = false,
                                 default = nil)
  if valid_613606 != nil:
    section.add "X-Amz-Security-Token", valid_613606
  var valid_613607 = header.getOrDefault("X-Amz-Algorithm")
  valid_613607 = validateParameter(valid_613607, JString, required = false,
                                 default = nil)
  if valid_613607 != nil:
    section.add "X-Amz-Algorithm", valid_613607
  var valid_613608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613608 = validateParameter(valid_613608, JString, required = false,
                                 default = nil)
  if valid_613608 != nil:
    section.add "X-Amz-SignedHeaders", valid_613608
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613609: Call_GetDeleteConfigurationSet_613596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613609.validator(path, query, header, formData, body)
  let scheme = call_613609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613609.url(scheme.get, call_613609.host, call_613609.base,
                         call_613609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613609, url, valid)

proc call*(call_613610: Call_GetDeleteConfigurationSet_613596;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613611 = newJObject()
  add(query_613611, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613611, "Action", newJString(Action))
  add(query_613611, "Version", newJString(Version))
  result = call_613610.call(nil, query_613611, nil, nil, nil)

var getDeleteConfigurationSet* = Call_GetDeleteConfigurationSet_613596(
    name: "getDeleteConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_GetDeleteConfigurationSet_613597, base: "/",
    url: url_GetDeleteConfigurationSet_613598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetEventDestination_613646 = ref object of OpenApiRestCall_612658
proc url_PostDeleteConfigurationSetEventDestination_613648(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSetEventDestination_613647(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613649 = query.getOrDefault("Action")
  valid_613649 = validateParameter(valid_613649, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_613649 != nil:
    section.add "Action", valid_613649
  var valid_613650 = query.getOrDefault("Version")
  valid_613650 = validateParameter(valid_613650, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613650 != nil:
    section.add "Version", valid_613650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613651 = header.getOrDefault("X-Amz-Signature")
  valid_613651 = validateParameter(valid_613651, JString, required = false,
                                 default = nil)
  if valid_613651 != nil:
    section.add "X-Amz-Signature", valid_613651
  var valid_613652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613652 = validateParameter(valid_613652, JString, required = false,
                                 default = nil)
  if valid_613652 != nil:
    section.add "X-Amz-Content-Sha256", valid_613652
  var valid_613653 = header.getOrDefault("X-Amz-Date")
  valid_613653 = validateParameter(valid_613653, JString, required = false,
                                 default = nil)
  if valid_613653 != nil:
    section.add "X-Amz-Date", valid_613653
  var valid_613654 = header.getOrDefault("X-Amz-Credential")
  valid_613654 = validateParameter(valid_613654, JString, required = false,
                                 default = nil)
  if valid_613654 != nil:
    section.add "X-Amz-Credential", valid_613654
  var valid_613655 = header.getOrDefault("X-Amz-Security-Token")
  valid_613655 = validateParameter(valid_613655, JString, required = false,
                                 default = nil)
  if valid_613655 != nil:
    section.add "X-Amz-Security-Token", valid_613655
  var valid_613656 = header.getOrDefault("X-Amz-Algorithm")
  valid_613656 = validateParameter(valid_613656, JString, required = false,
                                 default = nil)
  if valid_613656 != nil:
    section.add "X-Amz-Algorithm", valid_613656
  var valid_613657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613657 = validateParameter(valid_613657, JString, required = false,
                                 default = nil)
  if valid_613657 != nil:
    section.add "X-Amz-SignedHeaders", valid_613657
  result.add "header", section
  ## parameters in `formData` object:
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `EventDestinationName` field"
  var valid_613658 = formData.getOrDefault("EventDestinationName")
  valid_613658 = validateParameter(valid_613658, JString, required = true,
                                 default = nil)
  if valid_613658 != nil:
    section.add "EventDestinationName", valid_613658
  var valid_613659 = formData.getOrDefault("ConfigurationSetName")
  valid_613659 = validateParameter(valid_613659, JString, required = true,
                                 default = nil)
  if valid_613659 != nil:
    section.add "ConfigurationSetName", valid_613659
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613660: Call_PostDeleteConfigurationSetEventDestination_613646;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613660.validator(path, query, header, formData, body)
  let scheme = call_613660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613660.url(scheme.get, call_613660.host, call_613660.base,
                         call_613660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613660, url, valid)

proc call*(call_613661: Call_PostDeleteConfigurationSetEventDestination_613646;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: string (required)
  var query_613662 = newJObject()
  var formData_613663 = newJObject()
  add(formData_613663, "EventDestinationName", newJString(EventDestinationName))
  add(query_613662, "Action", newJString(Action))
  add(formData_613663, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613662, "Version", newJString(Version))
  result = call_613661.call(nil, query_613662, nil, formData_613663, nil)

var postDeleteConfigurationSetEventDestination* = Call_PostDeleteConfigurationSetEventDestination_613646(
    name: "postDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_PostDeleteConfigurationSetEventDestination_613647,
    base: "/", url: url_PostDeleteConfigurationSetEventDestination_613648,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetEventDestination_613629 = ref object of OpenApiRestCall_612658
proc url_GetDeleteConfigurationSetEventDestination_613631(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSetEventDestination_613630(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EventDestinationName` field"
  var valid_613632 = query.getOrDefault("EventDestinationName")
  valid_613632 = validateParameter(valid_613632, JString, required = true,
                                 default = nil)
  if valid_613632 != nil:
    section.add "EventDestinationName", valid_613632
  var valid_613633 = query.getOrDefault("ConfigurationSetName")
  valid_613633 = validateParameter(valid_613633, JString, required = true,
                                 default = nil)
  if valid_613633 != nil:
    section.add "ConfigurationSetName", valid_613633
  var valid_613634 = query.getOrDefault("Action")
  valid_613634 = validateParameter(valid_613634, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_613634 != nil:
    section.add "Action", valid_613634
  var valid_613635 = query.getOrDefault("Version")
  valid_613635 = validateParameter(valid_613635, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613635 != nil:
    section.add "Version", valid_613635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613636 = header.getOrDefault("X-Amz-Signature")
  valid_613636 = validateParameter(valid_613636, JString, required = false,
                                 default = nil)
  if valid_613636 != nil:
    section.add "X-Amz-Signature", valid_613636
  var valid_613637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613637 = validateParameter(valid_613637, JString, required = false,
                                 default = nil)
  if valid_613637 != nil:
    section.add "X-Amz-Content-Sha256", valid_613637
  var valid_613638 = header.getOrDefault("X-Amz-Date")
  valid_613638 = validateParameter(valid_613638, JString, required = false,
                                 default = nil)
  if valid_613638 != nil:
    section.add "X-Amz-Date", valid_613638
  var valid_613639 = header.getOrDefault("X-Amz-Credential")
  valid_613639 = validateParameter(valid_613639, JString, required = false,
                                 default = nil)
  if valid_613639 != nil:
    section.add "X-Amz-Credential", valid_613639
  var valid_613640 = header.getOrDefault("X-Amz-Security-Token")
  valid_613640 = validateParameter(valid_613640, JString, required = false,
                                 default = nil)
  if valid_613640 != nil:
    section.add "X-Amz-Security-Token", valid_613640
  var valid_613641 = header.getOrDefault("X-Amz-Algorithm")
  valid_613641 = validateParameter(valid_613641, JString, required = false,
                                 default = nil)
  if valid_613641 != nil:
    section.add "X-Amz-Algorithm", valid_613641
  var valid_613642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613642 = validateParameter(valid_613642, JString, required = false,
                                 default = nil)
  if valid_613642 != nil:
    section.add "X-Amz-SignedHeaders", valid_613642
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613643: Call_GetDeleteConfigurationSetEventDestination_613629;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613643.validator(path, query, header, formData, body)
  let scheme = call_613643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613643.url(scheme.get, call_613643.host, call_613643.base,
                         call_613643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613643, url, valid)

proc call*(call_613644: Call_GetDeleteConfigurationSetEventDestination_613629;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613645 = newJObject()
  add(query_613645, "EventDestinationName", newJString(EventDestinationName))
  add(query_613645, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613645, "Action", newJString(Action))
  add(query_613645, "Version", newJString(Version))
  result = call_613644.call(nil, query_613645, nil, nil, nil)

var getDeleteConfigurationSetEventDestination* = Call_GetDeleteConfigurationSetEventDestination_613629(
    name: "getDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_GetDeleteConfigurationSetEventDestination_613630,
    base: "/", url: url_GetDeleteConfigurationSetEventDestination_613631,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetTrackingOptions_613680 = ref object of OpenApiRestCall_612658
proc url_PostDeleteConfigurationSetTrackingOptions_613682(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSetTrackingOptions_613681(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613683 = query.getOrDefault("Action")
  valid_613683 = validateParameter(valid_613683, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_613683 != nil:
    section.add "Action", valid_613683
  var valid_613684 = query.getOrDefault("Version")
  valid_613684 = validateParameter(valid_613684, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613684 != nil:
    section.add "Version", valid_613684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613685 = header.getOrDefault("X-Amz-Signature")
  valid_613685 = validateParameter(valid_613685, JString, required = false,
                                 default = nil)
  if valid_613685 != nil:
    section.add "X-Amz-Signature", valid_613685
  var valid_613686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613686 = validateParameter(valid_613686, JString, required = false,
                                 default = nil)
  if valid_613686 != nil:
    section.add "X-Amz-Content-Sha256", valid_613686
  var valid_613687 = header.getOrDefault("X-Amz-Date")
  valid_613687 = validateParameter(valid_613687, JString, required = false,
                                 default = nil)
  if valid_613687 != nil:
    section.add "X-Amz-Date", valid_613687
  var valid_613688 = header.getOrDefault("X-Amz-Credential")
  valid_613688 = validateParameter(valid_613688, JString, required = false,
                                 default = nil)
  if valid_613688 != nil:
    section.add "X-Amz-Credential", valid_613688
  var valid_613689 = header.getOrDefault("X-Amz-Security-Token")
  valid_613689 = validateParameter(valid_613689, JString, required = false,
                                 default = nil)
  if valid_613689 != nil:
    section.add "X-Amz-Security-Token", valid_613689
  var valid_613690 = header.getOrDefault("X-Amz-Algorithm")
  valid_613690 = validateParameter(valid_613690, JString, required = false,
                                 default = nil)
  if valid_613690 != nil:
    section.add "X-Amz-Algorithm", valid_613690
  var valid_613691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613691 = validateParameter(valid_613691, JString, required = false,
                                 default = nil)
  if valid_613691 != nil:
    section.add "X-Amz-SignedHeaders", valid_613691
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_613692 = formData.getOrDefault("ConfigurationSetName")
  valid_613692 = validateParameter(valid_613692, JString, required = true,
                                 default = nil)
  if valid_613692 != nil:
    section.add "ConfigurationSetName", valid_613692
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613693: Call_PostDeleteConfigurationSetTrackingOptions_613680;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_613693.validator(path, query, header, formData, body)
  let scheme = call_613693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613693.url(scheme.get, call_613693.host, call_613693.base,
                         call_613693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613693, url, valid)

proc call*(call_613694: Call_PostDeleteConfigurationSetTrackingOptions_613680;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: string (required)
  var query_613695 = newJObject()
  var formData_613696 = newJObject()
  add(query_613695, "Action", newJString(Action))
  add(formData_613696, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613695, "Version", newJString(Version))
  result = call_613694.call(nil, query_613695, nil, formData_613696, nil)

var postDeleteConfigurationSetTrackingOptions* = Call_PostDeleteConfigurationSetTrackingOptions_613680(
    name: "postDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_PostDeleteConfigurationSetTrackingOptions_613681,
    base: "/", url: url_PostDeleteConfigurationSetTrackingOptions_613682,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetTrackingOptions_613664 = ref object of OpenApiRestCall_612658
proc url_GetDeleteConfigurationSetTrackingOptions_613666(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSetTrackingOptions_613665(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_613667 = query.getOrDefault("ConfigurationSetName")
  valid_613667 = validateParameter(valid_613667, JString, required = true,
                                 default = nil)
  if valid_613667 != nil:
    section.add "ConfigurationSetName", valid_613667
  var valid_613668 = query.getOrDefault("Action")
  valid_613668 = validateParameter(valid_613668, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_613668 != nil:
    section.add "Action", valid_613668
  var valid_613669 = query.getOrDefault("Version")
  valid_613669 = validateParameter(valid_613669, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613669 != nil:
    section.add "Version", valid_613669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613670 = header.getOrDefault("X-Amz-Signature")
  valid_613670 = validateParameter(valid_613670, JString, required = false,
                                 default = nil)
  if valid_613670 != nil:
    section.add "X-Amz-Signature", valid_613670
  var valid_613671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613671 = validateParameter(valid_613671, JString, required = false,
                                 default = nil)
  if valid_613671 != nil:
    section.add "X-Amz-Content-Sha256", valid_613671
  var valid_613672 = header.getOrDefault("X-Amz-Date")
  valid_613672 = validateParameter(valid_613672, JString, required = false,
                                 default = nil)
  if valid_613672 != nil:
    section.add "X-Amz-Date", valid_613672
  var valid_613673 = header.getOrDefault("X-Amz-Credential")
  valid_613673 = validateParameter(valid_613673, JString, required = false,
                                 default = nil)
  if valid_613673 != nil:
    section.add "X-Amz-Credential", valid_613673
  var valid_613674 = header.getOrDefault("X-Amz-Security-Token")
  valid_613674 = validateParameter(valid_613674, JString, required = false,
                                 default = nil)
  if valid_613674 != nil:
    section.add "X-Amz-Security-Token", valid_613674
  var valid_613675 = header.getOrDefault("X-Amz-Algorithm")
  valid_613675 = validateParameter(valid_613675, JString, required = false,
                                 default = nil)
  if valid_613675 != nil:
    section.add "X-Amz-Algorithm", valid_613675
  var valid_613676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613676 = validateParameter(valid_613676, JString, required = false,
                                 default = nil)
  if valid_613676 != nil:
    section.add "X-Amz-SignedHeaders", valid_613676
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613677: Call_GetDeleteConfigurationSetTrackingOptions_613664;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_613677.validator(path, query, header, formData, body)
  let scheme = call_613677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613677.url(scheme.get, call_613677.host, call_613677.base,
                         call_613677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613677, url, valid)

proc call*(call_613678: Call_GetDeleteConfigurationSetTrackingOptions_613664;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613679 = newJObject()
  add(query_613679, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_613679, "Action", newJString(Action))
  add(query_613679, "Version", newJString(Version))
  result = call_613678.call(nil, query_613679, nil, nil, nil)

var getDeleteConfigurationSetTrackingOptions* = Call_GetDeleteConfigurationSetTrackingOptions_613664(
    name: "getDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_GetDeleteConfigurationSetTrackingOptions_613665,
    base: "/", url: url_GetDeleteConfigurationSetTrackingOptions_613666,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomVerificationEmailTemplate_613713 = ref object of OpenApiRestCall_612658
proc url_PostDeleteCustomVerificationEmailTemplate_613715(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomVerificationEmailTemplate_613714(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613716 = query.getOrDefault("Action")
  valid_613716 = validateParameter(valid_613716, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_613716 != nil:
    section.add "Action", valid_613716
  var valid_613717 = query.getOrDefault("Version")
  valid_613717 = validateParameter(valid_613717, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613717 != nil:
    section.add "Version", valid_613717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613718 = header.getOrDefault("X-Amz-Signature")
  valid_613718 = validateParameter(valid_613718, JString, required = false,
                                 default = nil)
  if valid_613718 != nil:
    section.add "X-Amz-Signature", valid_613718
  var valid_613719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613719 = validateParameter(valid_613719, JString, required = false,
                                 default = nil)
  if valid_613719 != nil:
    section.add "X-Amz-Content-Sha256", valid_613719
  var valid_613720 = header.getOrDefault("X-Amz-Date")
  valid_613720 = validateParameter(valid_613720, JString, required = false,
                                 default = nil)
  if valid_613720 != nil:
    section.add "X-Amz-Date", valid_613720
  var valid_613721 = header.getOrDefault("X-Amz-Credential")
  valid_613721 = validateParameter(valid_613721, JString, required = false,
                                 default = nil)
  if valid_613721 != nil:
    section.add "X-Amz-Credential", valid_613721
  var valid_613722 = header.getOrDefault("X-Amz-Security-Token")
  valid_613722 = validateParameter(valid_613722, JString, required = false,
                                 default = nil)
  if valid_613722 != nil:
    section.add "X-Amz-Security-Token", valid_613722
  var valid_613723 = header.getOrDefault("X-Amz-Algorithm")
  valid_613723 = validateParameter(valid_613723, JString, required = false,
                                 default = nil)
  if valid_613723 != nil:
    section.add "X-Amz-Algorithm", valid_613723
  var valid_613724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613724 = validateParameter(valid_613724, JString, required = false,
                                 default = nil)
  if valid_613724 != nil:
    section.add "X-Amz-SignedHeaders", valid_613724
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_613725 = formData.getOrDefault("TemplateName")
  valid_613725 = validateParameter(valid_613725, JString, required = true,
                                 default = nil)
  if valid_613725 != nil:
    section.add "TemplateName", valid_613725
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613726: Call_PostDeleteCustomVerificationEmailTemplate_613713;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613726.validator(path, query, header, formData, body)
  let scheme = call_613726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613726.url(scheme.get, call_613726.host, call_613726.base,
                         call_613726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613726, url, valid)

proc call*(call_613727: Call_PostDeleteCustomVerificationEmailTemplate_613713;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613728 = newJObject()
  var formData_613729 = newJObject()
  add(formData_613729, "TemplateName", newJString(TemplateName))
  add(query_613728, "Action", newJString(Action))
  add(query_613728, "Version", newJString(Version))
  result = call_613727.call(nil, query_613728, nil, formData_613729, nil)

var postDeleteCustomVerificationEmailTemplate* = Call_PostDeleteCustomVerificationEmailTemplate_613713(
    name: "postDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_PostDeleteCustomVerificationEmailTemplate_613714,
    base: "/", url: url_PostDeleteCustomVerificationEmailTemplate_613715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomVerificationEmailTemplate_613697 = ref object of OpenApiRestCall_612658
proc url_GetDeleteCustomVerificationEmailTemplate_613699(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomVerificationEmailTemplate_613698(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  var valid_613700 = query.getOrDefault("Action")
  valid_613700 = validateParameter(valid_613700, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_613700 != nil:
    section.add "Action", valid_613700
  var valid_613701 = query.getOrDefault("Version")
  valid_613701 = validateParameter(valid_613701, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613701 != nil:
    section.add "Version", valid_613701
  var valid_613702 = query.getOrDefault("TemplateName")
  valid_613702 = validateParameter(valid_613702, JString, required = true,
                                 default = nil)
  if valid_613702 != nil:
    section.add "TemplateName", valid_613702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613703 = header.getOrDefault("X-Amz-Signature")
  valid_613703 = validateParameter(valid_613703, JString, required = false,
                                 default = nil)
  if valid_613703 != nil:
    section.add "X-Amz-Signature", valid_613703
  var valid_613704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613704 = validateParameter(valid_613704, JString, required = false,
                                 default = nil)
  if valid_613704 != nil:
    section.add "X-Amz-Content-Sha256", valid_613704
  var valid_613705 = header.getOrDefault("X-Amz-Date")
  valid_613705 = validateParameter(valid_613705, JString, required = false,
                                 default = nil)
  if valid_613705 != nil:
    section.add "X-Amz-Date", valid_613705
  var valid_613706 = header.getOrDefault("X-Amz-Credential")
  valid_613706 = validateParameter(valid_613706, JString, required = false,
                                 default = nil)
  if valid_613706 != nil:
    section.add "X-Amz-Credential", valid_613706
  var valid_613707 = header.getOrDefault("X-Amz-Security-Token")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "X-Amz-Security-Token", valid_613707
  var valid_613708 = header.getOrDefault("X-Amz-Algorithm")
  valid_613708 = validateParameter(valid_613708, JString, required = false,
                                 default = nil)
  if valid_613708 != nil:
    section.add "X-Amz-Algorithm", valid_613708
  var valid_613709 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613709 = validateParameter(valid_613709, JString, required = false,
                                 default = nil)
  if valid_613709 != nil:
    section.add "X-Amz-SignedHeaders", valid_613709
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613710: Call_GetDeleteCustomVerificationEmailTemplate_613697;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613710.validator(path, query, header, formData, body)
  let scheme = call_613710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613710.url(scheme.get, call_613710.host, call_613710.base,
                         call_613710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613710, url, valid)

proc call*(call_613711: Call_GetDeleteCustomVerificationEmailTemplate_613697;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  var query_613712 = newJObject()
  add(query_613712, "Action", newJString(Action))
  add(query_613712, "Version", newJString(Version))
  add(query_613712, "TemplateName", newJString(TemplateName))
  result = call_613711.call(nil, query_613712, nil, nil, nil)

var getDeleteCustomVerificationEmailTemplate* = Call_GetDeleteCustomVerificationEmailTemplate_613697(
    name: "getDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_GetDeleteCustomVerificationEmailTemplate_613698,
    base: "/", url: url_GetDeleteCustomVerificationEmailTemplate_613699,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentity_613746 = ref object of OpenApiRestCall_612658
proc url_PostDeleteIdentity_613748(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteIdentity_613747(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613749 = query.getOrDefault("Action")
  valid_613749 = validateParameter(valid_613749, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_613749 != nil:
    section.add "Action", valid_613749
  var valid_613750 = query.getOrDefault("Version")
  valid_613750 = validateParameter(valid_613750, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613750 != nil:
    section.add "Version", valid_613750
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613751 = header.getOrDefault("X-Amz-Signature")
  valid_613751 = validateParameter(valid_613751, JString, required = false,
                                 default = nil)
  if valid_613751 != nil:
    section.add "X-Amz-Signature", valid_613751
  var valid_613752 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613752 = validateParameter(valid_613752, JString, required = false,
                                 default = nil)
  if valid_613752 != nil:
    section.add "X-Amz-Content-Sha256", valid_613752
  var valid_613753 = header.getOrDefault("X-Amz-Date")
  valid_613753 = validateParameter(valid_613753, JString, required = false,
                                 default = nil)
  if valid_613753 != nil:
    section.add "X-Amz-Date", valid_613753
  var valid_613754 = header.getOrDefault("X-Amz-Credential")
  valid_613754 = validateParameter(valid_613754, JString, required = false,
                                 default = nil)
  if valid_613754 != nil:
    section.add "X-Amz-Credential", valid_613754
  var valid_613755 = header.getOrDefault("X-Amz-Security-Token")
  valid_613755 = validateParameter(valid_613755, JString, required = false,
                                 default = nil)
  if valid_613755 != nil:
    section.add "X-Amz-Security-Token", valid_613755
  var valid_613756 = header.getOrDefault("X-Amz-Algorithm")
  valid_613756 = validateParameter(valid_613756, JString, required = false,
                                 default = nil)
  if valid_613756 != nil:
    section.add "X-Amz-Algorithm", valid_613756
  var valid_613757 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613757 = validateParameter(valid_613757, JString, required = false,
                                 default = nil)
  if valid_613757 != nil:
    section.add "X-Amz-SignedHeaders", valid_613757
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_613758 = formData.getOrDefault("Identity")
  valid_613758 = validateParameter(valid_613758, JString, required = true,
                                 default = nil)
  if valid_613758 != nil:
    section.add "Identity", valid_613758
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613759: Call_PostDeleteIdentity_613746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613759.validator(path, query, header, formData, body)
  let scheme = call_613759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613759.url(scheme.get, call_613759.host, call_613759.base,
                         call_613759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613759, url, valid)

proc call*(call_613760: Call_PostDeleteIdentity_613746; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613761 = newJObject()
  var formData_613762 = newJObject()
  add(formData_613762, "Identity", newJString(Identity))
  add(query_613761, "Action", newJString(Action))
  add(query_613761, "Version", newJString(Version))
  result = call_613760.call(nil, query_613761, nil, formData_613762, nil)

var postDeleteIdentity* = Call_PostDeleteIdentity_613746(
    name: "postDeleteIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentity",
    validator: validate_PostDeleteIdentity_613747, base: "/",
    url: url_PostDeleteIdentity_613748, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentity_613730 = ref object of OpenApiRestCall_612658
proc url_GetDeleteIdentity_613732(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteIdentity_613731(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_613733 = query.getOrDefault("Identity")
  valid_613733 = validateParameter(valid_613733, JString, required = true,
                                 default = nil)
  if valid_613733 != nil:
    section.add "Identity", valid_613733
  var valid_613734 = query.getOrDefault("Action")
  valid_613734 = validateParameter(valid_613734, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_613734 != nil:
    section.add "Action", valid_613734
  var valid_613735 = query.getOrDefault("Version")
  valid_613735 = validateParameter(valid_613735, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613735 != nil:
    section.add "Version", valid_613735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613736 = header.getOrDefault("X-Amz-Signature")
  valid_613736 = validateParameter(valid_613736, JString, required = false,
                                 default = nil)
  if valid_613736 != nil:
    section.add "X-Amz-Signature", valid_613736
  var valid_613737 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613737 = validateParameter(valid_613737, JString, required = false,
                                 default = nil)
  if valid_613737 != nil:
    section.add "X-Amz-Content-Sha256", valid_613737
  var valid_613738 = header.getOrDefault("X-Amz-Date")
  valid_613738 = validateParameter(valid_613738, JString, required = false,
                                 default = nil)
  if valid_613738 != nil:
    section.add "X-Amz-Date", valid_613738
  var valid_613739 = header.getOrDefault("X-Amz-Credential")
  valid_613739 = validateParameter(valid_613739, JString, required = false,
                                 default = nil)
  if valid_613739 != nil:
    section.add "X-Amz-Credential", valid_613739
  var valid_613740 = header.getOrDefault("X-Amz-Security-Token")
  valid_613740 = validateParameter(valid_613740, JString, required = false,
                                 default = nil)
  if valid_613740 != nil:
    section.add "X-Amz-Security-Token", valid_613740
  var valid_613741 = header.getOrDefault("X-Amz-Algorithm")
  valid_613741 = validateParameter(valid_613741, JString, required = false,
                                 default = nil)
  if valid_613741 != nil:
    section.add "X-Amz-Algorithm", valid_613741
  var valid_613742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613742 = validateParameter(valid_613742, JString, required = false,
                                 default = nil)
  if valid_613742 != nil:
    section.add "X-Amz-SignedHeaders", valid_613742
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613743: Call_GetDeleteIdentity_613730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613743.validator(path, query, header, formData, body)
  let scheme = call_613743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613743.url(scheme.get, call_613743.host, call_613743.base,
                         call_613743.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613743, url, valid)

proc call*(call_613744: Call_GetDeleteIdentity_613730; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613745 = newJObject()
  add(query_613745, "Identity", newJString(Identity))
  add(query_613745, "Action", newJString(Action))
  add(query_613745, "Version", newJString(Version))
  result = call_613744.call(nil, query_613745, nil, nil, nil)

var getDeleteIdentity* = Call_GetDeleteIdentity_613730(name: "getDeleteIdentity",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteIdentity", validator: validate_GetDeleteIdentity_613731,
    base: "/", url: url_GetDeleteIdentity_613732,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentityPolicy_613780 = ref object of OpenApiRestCall_612658
proc url_PostDeleteIdentityPolicy_613782(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteIdentityPolicy_613781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613783 = query.getOrDefault("Action")
  valid_613783 = validateParameter(valid_613783, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_613783 != nil:
    section.add "Action", valid_613783
  var valid_613784 = query.getOrDefault("Version")
  valid_613784 = validateParameter(valid_613784, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613784 != nil:
    section.add "Version", valid_613784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613785 = header.getOrDefault("X-Amz-Signature")
  valid_613785 = validateParameter(valid_613785, JString, required = false,
                                 default = nil)
  if valid_613785 != nil:
    section.add "X-Amz-Signature", valid_613785
  var valid_613786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613786 = validateParameter(valid_613786, JString, required = false,
                                 default = nil)
  if valid_613786 != nil:
    section.add "X-Amz-Content-Sha256", valid_613786
  var valid_613787 = header.getOrDefault("X-Amz-Date")
  valid_613787 = validateParameter(valid_613787, JString, required = false,
                                 default = nil)
  if valid_613787 != nil:
    section.add "X-Amz-Date", valid_613787
  var valid_613788 = header.getOrDefault("X-Amz-Credential")
  valid_613788 = validateParameter(valid_613788, JString, required = false,
                                 default = nil)
  if valid_613788 != nil:
    section.add "X-Amz-Credential", valid_613788
  var valid_613789 = header.getOrDefault("X-Amz-Security-Token")
  valid_613789 = validateParameter(valid_613789, JString, required = false,
                                 default = nil)
  if valid_613789 != nil:
    section.add "X-Amz-Security-Token", valid_613789
  var valid_613790 = header.getOrDefault("X-Amz-Algorithm")
  valid_613790 = validateParameter(valid_613790, JString, required = false,
                                 default = nil)
  if valid_613790 != nil:
    section.add "X-Amz-Algorithm", valid_613790
  var valid_613791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613791 = validateParameter(valid_613791, JString, required = false,
                                 default = nil)
  if valid_613791 != nil:
    section.add "X-Amz-SignedHeaders", valid_613791
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_613792 = formData.getOrDefault("Identity")
  valid_613792 = validateParameter(valid_613792, JString, required = true,
                                 default = nil)
  if valid_613792 != nil:
    section.add "Identity", valid_613792
  var valid_613793 = formData.getOrDefault("PolicyName")
  valid_613793 = validateParameter(valid_613793, JString, required = true,
                                 default = nil)
  if valid_613793 != nil:
    section.add "PolicyName", valid_613793
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613794: Call_PostDeleteIdentityPolicy_613780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613794.validator(path, query, header, formData, body)
  let scheme = call_613794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613794.url(scheme.get, call_613794.host, call_613794.base,
                         call_613794.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613794, url, valid)

proc call*(call_613795: Call_PostDeleteIdentityPolicy_613780; Identity: string;
          PolicyName: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  var query_613796 = newJObject()
  var formData_613797 = newJObject()
  add(formData_613797, "Identity", newJString(Identity))
  add(query_613796, "Action", newJString(Action))
  add(query_613796, "Version", newJString(Version))
  add(formData_613797, "PolicyName", newJString(PolicyName))
  result = call_613795.call(nil, query_613796, nil, formData_613797, nil)

var postDeleteIdentityPolicy* = Call_PostDeleteIdentityPolicy_613780(
    name: "postDeleteIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_PostDeleteIdentityPolicy_613781, base: "/",
    url: url_PostDeleteIdentityPolicy_613782, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentityPolicy_613763 = ref object of OpenApiRestCall_612658
proc url_GetDeleteIdentityPolicy_613765(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteIdentityPolicy_613764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_613766 = query.getOrDefault("PolicyName")
  valid_613766 = validateParameter(valid_613766, JString, required = true,
                                 default = nil)
  if valid_613766 != nil:
    section.add "PolicyName", valid_613766
  var valid_613767 = query.getOrDefault("Identity")
  valid_613767 = validateParameter(valid_613767, JString, required = true,
                                 default = nil)
  if valid_613767 != nil:
    section.add "Identity", valid_613767
  var valid_613768 = query.getOrDefault("Action")
  valid_613768 = validateParameter(valid_613768, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_613768 != nil:
    section.add "Action", valid_613768
  var valid_613769 = query.getOrDefault("Version")
  valid_613769 = validateParameter(valid_613769, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613769 != nil:
    section.add "Version", valid_613769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613770 = header.getOrDefault("X-Amz-Signature")
  valid_613770 = validateParameter(valid_613770, JString, required = false,
                                 default = nil)
  if valid_613770 != nil:
    section.add "X-Amz-Signature", valid_613770
  var valid_613771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613771 = validateParameter(valid_613771, JString, required = false,
                                 default = nil)
  if valid_613771 != nil:
    section.add "X-Amz-Content-Sha256", valid_613771
  var valid_613772 = header.getOrDefault("X-Amz-Date")
  valid_613772 = validateParameter(valid_613772, JString, required = false,
                                 default = nil)
  if valid_613772 != nil:
    section.add "X-Amz-Date", valid_613772
  var valid_613773 = header.getOrDefault("X-Amz-Credential")
  valid_613773 = validateParameter(valid_613773, JString, required = false,
                                 default = nil)
  if valid_613773 != nil:
    section.add "X-Amz-Credential", valid_613773
  var valid_613774 = header.getOrDefault("X-Amz-Security-Token")
  valid_613774 = validateParameter(valid_613774, JString, required = false,
                                 default = nil)
  if valid_613774 != nil:
    section.add "X-Amz-Security-Token", valid_613774
  var valid_613775 = header.getOrDefault("X-Amz-Algorithm")
  valid_613775 = validateParameter(valid_613775, JString, required = false,
                                 default = nil)
  if valid_613775 != nil:
    section.add "X-Amz-Algorithm", valid_613775
  var valid_613776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613776 = validateParameter(valid_613776, JString, required = false,
                                 default = nil)
  if valid_613776 != nil:
    section.add "X-Amz-SignedHeaders", valid_613776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613777: Call_GetDeleteIdentityPolicy_613763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613777.validator(path, query, header, formData, body)
  let scheme = call_613777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613777.url(scheme.get, call_613777.host, call_613777.base,
                         call_613777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613777, url, valid)

proc call*(call_613778: Call_GetDeleteIdentityPolicy_613763; PolicyName: string;
          Identity: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613779 = newJObject()
  add(query_613779, "PolicyName", newJString(PolicyName))
  add(query_613779, "Identity", newJString(Identity))
  add(query_613779, "Action", newJString(Action))
  add(query_613779, "Version", newJString(Version))
  result = call_613778.call(nil, query_613779, nil, nil, nil)

var getDeleteIdentityPolicy* = Call_GetDeleteIdentityPolicy_613763(
    name: "getDeleteIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_GetDeleteIdentityPolicy_613764, base: "/",
    url: url_GetDeleteIdentityPolicy_613765, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptFilter_613814 = ref object of OpenApiRestCall_612658
proc url_PostDeleteReceiptFilter_613816(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptFilter_613815(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613817 = query.getOrDefault("Action")
  valid_613817 = validateParameter(valid_613817, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_613817 != nil:
    section.add "Action", valid_613817
  var valid_613818 = query.getOrDefault("Version")
  valid_613818 = validateParameter(valid_613818, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613818 != nil:
    section.add "Version", valid_613818
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613819 = header.getOrDefault("X-Amz-Signature")
  valid_613819 = validateParameter(valid_613819, JString, required = false,
                                 default = nil)
  if valid_613819 != nil:
    section.add "X-Amz-Signature", valid_613819
  var valid_613820 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613820 = validateParameter(valid_613820, JString, required = false,
                                 default = nil)
  if valid_613820 != nil:
    section.add "X-Amz-Content-Sha256", valid_613820
  var valid_613821 = header.getOrDefault("X-Amz-Date")
  valid_613821 = validateParameter(valid_613821, JString, required = false,
                                 default = nil)
  if valid_613821 != nil:
    section.add "X-Amz-Date", valid_613821
  var valid_613822 = header.getOrDefault("X-Amz-Credential")
  valid_613822 = validateParameter(valid_613822, JString, required = false,
                                 default = nil)
  if valid_613822 != nil:
    section.add "X-Amz-Credential", valid_613822
  var valid_613823 = header.getOrDefault("X-Amz-Security-Token")
  valid_613823 = validateParameter(valid_613823, JString, required = false,
                                 default = nil)
  if valid_613823 != nil:
    section.add "X-Amz-Security-Token", valid_613823
  var valid_613824 = header.getOrDefault("X-Amz-Algorithm")
  valid_613824 = validateParameter(valid_613824, JString, required = false,
                                 default = nil)
  if valid_613824 != nil:
    section.add "X-Amz-Algorithm", valid_613824
  var valid_613825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613825 = validateParameter(valid_613825, JString, required = false,
                                 default = nil)
  if valid_613825 != nil:
    section.add "X-Amz-SignedHeaders", valid_613825
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FilterName` field"
  var valid_613826 = formData.getOrDefault("FilterName")
  valid_613826 = validateParameter(valid_613826, JString, required = true,
                                 default = nil)
  if valid_613826 != nil:
    section.add "FilterName", valid_613826
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613827: Call_PostDeleteReceiptFilter_613814; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613827.validator(path, query, header, formData, body)
  let scheme = call_613827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613827.url(scheme.get, call_613827.host, call_613827.base,
                         call_613827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613827, url, valid)

proc call*(call_613828: Call_PostDeleteReceiptFilter_613814; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613829 = newJObject()
  var formData_613830 = newJObject()
  add(formData_613830, "FilterName", newJString(FilterName))
  add(query_613829, "Action", newJString(Action))
  add(query_613829, "Version", newJString(Version))
  result = call_613828.call(nil, query_613829, nil, formData_613830, nil)

var postDeleteReceiptFilter* = Call_PostDeleteReceiptFilter_613814(
    name: "postDeleteReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_PostDeleteReceiptFilter_613815, base: "/",
    url: url_PostDeleteReceiptFilter_613816, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptFilter_613798 = ref object of OpenApiRestCall_612658
proc url_GetDeleteReceiptFilter_613800(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptFilter_613799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `FilterName` field"
  var valid_613801 = query.getOrDefault("FilterName")
  valid_613801 = validateParameter(valid_613801, JString, required = true,
                                 default = nil)
  if valid_613801 != nil:
    section.add "FilterName", valid_613801
  var valid_613802 = query.getOrDefault("Action")
  valid_613802 = validateParameter(valid_613802, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_613802 != nil:
    section.add "Action", valid_613802
  var valid_613803 = query.getOrDefault("Version")
  valid_613803 = validateParameter(valid_613803, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613803 != nil:
    section.add "Version", valid_613803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613804 = header.getOrDefault("X-Amz-Signature")
  valid_613804 = validateParameter(valid_613804, JString, required = false,
                                 default = nil)
  if valid_613804 != nil:
    section.add "X-Amz-Signature", valid_613804
  var valid_613805 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613805 = validateParameter(valid_613805, JString, required = false,
                                 default = nil)
  if valid_613805 != nil:
    section.add "X-Amz-Content-Sha256", valid_613805
  var valid_613806 = header.getOrDefault("X-Amz-Date")
  valid_613806 = validateParameter(valid_613806, JString, required = false,
                                 default = nil)
  if valid_613806 != nil:
    section.add "X-Amz-Date", valid_613806
  var valid_613807 = header.getOrDefault("X-Amz-Credential")
  valid_613807 = validateParameter(valid_613807, JString, required = false,
                                 default = nil)
  if valid_613807 != nil:
    section.add "X-Amz-Credential", valid_613807
  var valid_613808 = header.getOrDefault("X-Amz-Security-Token")
  valid_613808 = validateParameter(valid_613808, JString, required = false,
                                 default = nil)
  if valid_613808 != nil:
    section.add "X-Amz-Security-Token", valid_613808
  var valid_613809 = header.getOrDefault("X-Amz-Algorithm")
  valid_613809 = validateParameter(valid_613809, JString, required = false,
                                 default = nil)
  if valid_613809 != nil:
    section.add "X-Amz-Algorithm", valid_613809
  var valid_613810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613810 = validateParameter(valid_613810, JString, required = false,
                                 default = nil)
  if valid_613810 != nil:
    section.add "X-Amz-SignedHeaders", valid_613810
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613811: Call_GetDeleteReceiptFilter_613798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613811.validator(path, query, header, formData, body)
  let scheme = call_613811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613811.url(scheme.get, call_613811.host, call_613811.base,
                         call_613811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613811, url, valid)

proc call*(call_613812: Call_GetDeleteReceiptFilter_613798; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613813 = newJObject()
  add(query_613813, "FilterName", newJString(FilterName))
  add(query_613813, "Action", newJString(Action))
  add(query_613813, "Version", newJString(Version))
  result = call_613812.call(nil, query_613813, nil, nil, nil)

var getDeleteReceiptFilter* = Call_GetDeleteReceiptFilter_613798(
    name: "getDeleteReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_GetDeleteReceiptFilter_613799, base: "/",
    url: url_GetDeleteReceiptFilter_613800, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRule_613848 = ref object of OpenApiRestCall_612658
proc url_PostDeleteReceiptRule_613850(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptRule_613849(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613851 = query.getOrDefault("Action")
  valid_613851 = validateParameter(valid_613851, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_613851 != nil:
    section.add "Action", valid_613851
  var valid_613852 = query.getOrDefault("Version")
  valid_613852 = validateParameter(valid_613852, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613852 != nil:
    section.add "Version", valid_613852
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613853 = header.getOrDefault("X-Amz-Signature")
  valid_613853 = validateParameter(valid_613853, JString, required = false,
                                 default = nil)
  if valid_613853 != nil:
    section.add "X-Amz-Signature", valid_613853
  var valid_613854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-Content-Sha256", valid_613854
  var valid_613855 = header.getOrDefault("X-Amz-Date")
  valid_613855 = validateParameter(valid_613855, JString, required = false,
                                 default = nil)
  if valid_613855 != nil:
    section.add "X-Amz-Date", valid_613855
  var valid_613856 = header.getOrDefault("X-Amz-Credential")
  valid_613856 = validateParameter(valid_613856, JString, required = false,
                                 default = nil)
  if valid_613856 != nil:
    section.add "X-Amz-Credential", valid_613856
  var valid_613857 = header.getOrDefault("X-Amz-Security-Token")
  valid_613857 = validateParameter(valid_613857, JString, required = false,
                                 default = nil)
  if valid_613857 != nil:
    section.add "X-Amz-Security-Token", valid_613857
  var valid_613858 = header.getOrDefault("X-Amz-Algorithm")
  valid_613858 = validateParameter(valid_613858, JString, required = false,
                                 default = nil)
  if valid_613858 != nil:
    section.add "X-Amz-Algorithm", valid_613858
  var valid_613859 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613859 = validateParameter(valid_613859, JString, required = false,
                                 default = nil)
  if valid_613859 != nil:
    section.add "X-Amz-SignedHeaders", valid_613859
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_613860 = formData.getOrDefault("RuleName")
  valid_613860 = validateParameter(valid_613860, JString, required = true,
                                 default = nil)
  if valid_613860 != nil:
    section.add "RuleName", valid_613860
  var valid_613861 = formData.getOrDefault("RuleSetName")
  valid_613861 = validateParameter(valid_613861, JString, required = true,
                                 default = nil)
  if valid_613861 != nil:
    section.add "RuleSetName", valid_613861
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613862: Call_PostDeleteReceiptRule_613848; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613862.validator(path, query, header, formData, body)
  let scheme = call_613862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613862.url(scheme.get, call_613862.host, call_613862.base,
                         call_613862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613862, url, valid)

proc call*(call_613863: Call_PostDeleteReceiptRule_613848; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613864 = newJObject()
  var formData_613865 = newJObject()
  add(formData_613865, "RuleName", newJString(RuleName))
  add(formData_613865, "RuleSetName", newJString(RuleSetName))
  add(query_613864, "Action", newJString(Action))
  add(query_613864, "Version", newJString(Version))
  result = call_613863.call(nil, query_613864, nil, formData_613865, nil)

var postDeleteReceiptRule* = Call_PostDeleteReceiptRule_613848(
    name: "postDeleteReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_PostDeleteReceiptRule_613849, base: "/",
    url: url_PostDeleteReceiptRule_613850, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRule_613831 = ref object of OpenApiRestCall_612658
proc url_GetDeleteReceiptRule_613833(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptRule_613832(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_613834 = query.getOrDefault("RuleName")
  valid_613834 = validateParameter(valid_613834, JString, required = true,
                                 default = nil)
  if valid_613834 != nil:
    section.add "RuleName", valid_613834
  var valid_613835 = query.getOrDefault("Action")
  valid_613835 = validateParameter(valid_613835, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_613835 != nil:
    section.add "Action", valid_613835
  var valid_613836 = query.getOrDefault("RuleSetName")
  valid_613836 = validateParameter(valid_613836, JString, required = true,
                                 default = nil)
  if valid_613836 != nil:
    section.add "RuleSetName", valid_613836
  var valid_613837 = query.getOrDefault("Version")
  valid_613837 = validateParameter(valid_613837, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613837 != nil:
    section.add "Version", valid_613837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613838 = header.getOrDefault("X-Amz-Signature")
  valid_613838 = validateParameter(valid_613838, JString, required = false,
                                 default = nil)
  if valid_613838 != nil:
    section.add "X-Amz-Signature", valid_613838
  var valid_613839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613839 = validateParameter(valid_613839, JString, required = false,
                                 default = nil)
  if valid_613839 != nil:
    section.add "X-Amz-Content-Sha256", valid_613839
  var valid_613840 = header.getOrDefault("X-Amz-Date")
  valid_613840 = validateParameter(valid_613840, JString, required = false,
                                 default = nil)
  if valid_613840 != nil:
    section.add "X-Amz-Date", valid_613840
  var valid_613841 = header.getOrDefault("X-Amz-Credential")
  valid_613841 = validateParameter(valid_613841, JString, required = false,
                                 default = nil)
  if valid_613841 != nil:
    section.add "X-Amz-Credential", valid_613841
  var valid_613842 = header.getOrDefault("X-Amz-Security-Token")
  valid_613842 = validateParameter(valid_613842, JString, required = false,
                                 default = nil)
  if valid_613842 != nil:
    section.add "X-Amz-Security-Token", valid_613842
  var valid_613843 = header.getOrDefault("X-Amz-Algorithm")
  valid_613843 = validateParameter(valid_613843, JString, required = false,
                                 default = nil)
  if valid_613843 != nil:
    section.add "X-Amz-Algorithm", valid_613843
  var valid_613844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613844 = validateParameter(valid_613844, JString, required = false,
                                 default = nil)
  if valid_613844 != nil:
    section.add "X-Amz-SignedHeaders", valid_613844
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613845: Call_GetDeleteReceiptRule_613831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613845.validator(path, query, header, formData, body)
  let scheme = call_613845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613845.url(scheme.get, call_613845.host, call_613845.base,
                         call_613845.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613845, url, valid)

proc call*(call_613846: Call_GetDeleteReceiptRule_613831; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Version: string (required)
  var query_613847 = newJObject()
  add(query_613847, "RuleName", newJString(RuleName))
  add(query_613847, "Action", newJString(Action))
  add(query_613847, "RuleSetName", newJString(RuleSetName))
  add(query_613847, "Version", newJString(Version))
  result = call_613846.call(nil, query_613847, nil, nil, nil)

var getDeleteReceiptRule* = Call_GetDeleteReceiptRule_613831(
    name: "getDeleteReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_GetDeleteReceiptRule_613832, base: "/",
    url: url_GetDeleteReceiptRule_613833, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRuleSet_613882 = ref object of OpenApiRestCall_612658
proc url_PostDeleteReceiptRuleSet_613884(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptRuleSet_613883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613885 = query.getOrDefault("Action")
  valid_613885 = validateParameter(valid_613885, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_613885 != nil:
    section.add "Action", valid_613885
  var valid_613886 = query.getOrDefault("Version")
  valid_613886 = validateParameter(valid_613886, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613886 != nil:
    section.add "Version", valid_613886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613887 = header.getOrDefault("X-Amz-Signature")
  valid_613887 = validateParameter(valid_613887, JString, required = false,
                                 default = nil)
  if valid_613887 != nil:
    section.add "X-Amz-Signature", valid_613887
  var valid_613888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613888 = validateParameter(valid_613888, JString, required = false,
                                 default = nil)
  if valid_613888 != nil:
    section.add "X-Amz-Content-Sha256", valid_613888
  var valid_613889 = header.getOrDefault("X-Amz-Date")
  valid_613889 = validateParameter(valid_613889, JString, required = false,
                                 default = nil)
  if valid_613889 != nil:
    section.add "X-Amz-Date", valid_613889
  var valid_613890 = header.getOrDefault("X-Amz-Credential")
  valid_613890 = validateParameter(valid_613890, JString, required = false,
                                 default = nil)
  if valid_613890 != nil:
    section.add "X-Amz-Credential", valid_613890
  var valid_613891 = header.getOrDefault("X-Amz-Security-Token")
  valid_613891 = validateParameter(valid_613891, JString, required = false,
                                 default = nil)
  if valid_613891 != nil:
    section.add "X-Amz-Security-Token", valid_613891
  var valid_613892 = header.getOrDefault("X-Amz-Algorithm")
  valid_613892 = validateParameter(valid_613892, JString, required = false,
                                 default = nil)
  if valid_613892 != nil:
    section.add "X-Amz-Algorithm", valid_613892
  var valid_613893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613893 = validateParameter(valid_613893, JString, required = false,
                                 default = nil)
  if valid_613893 != nil:
    section.add "X-Amz-SignedHeaders", valid_613893
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_613894 = formData.getOrDefault("RuleSetName")
  valid_613894 = validateParameter(valid_613894, JString, required = true,
                                 default = nil)
  if valid_613894 != nil:
    section.add "RuleSetName", valid_613894
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613895: Call_PostDeleteReceiptRuleSet_613882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613895.validator(path, query, header, formData, body)
  let scheme = call_613895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613895.url(scheme.get, call_613895.host, call_613895.base,
                         call_613895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613895, url, valid)

proc call*(call_613896: Call_PostDeleteReceiptRuleSet_613882; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613897 = newJObject()
  var formData_613898 = newJObject()
  add(formData_613898, "RuleSetName", newJString(RuleSetName))
  add(query_613897, "Action", newJString(Action))
  add(query_613897, "Version", newJString(Version))
  result = call_613896.call(nil, query_613897, nil, formData_613898, nil)

var postDeleteReceiptRuleSet* = Call_PostDeleteReceiptRuleSet_613882(
    name: "postDeleteReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_PostDeleteReceiptRuleSet_613883, base: "/",
    url: url_PostDeleteReceiptRuleSet_613884, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRuleSet_613866 = ref object of OpenApiRestCall_612658
proc url_GetDeleteReceiptRuleSet_613868(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptRuleSet_613867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613869 = query.getOrDefault("Action")
  valid_613869 = validateParameter(valid_613869, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_613869 != nil:
    section.add "Action", valid_613869
  var valid_613870 = query.getOrDefault("RuleSetName")
  valid_613870 = validateParameter(valid_613870, JString, required = true,
                                 default = nil)
  if valid_613870 != nil:
    section.add "RuleSetName", valid_613870
  var valid_613871 = query.getOrDefault("Version")
  valid_613871 = validateParameter(valid_613871, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613871 != nil:
    section.add "Version", valid_613871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613872 = header.getOrDefault("X-Amz-Signature")
  valid_613872 = validateParameter(valid_613872, JString, required = false,
                                 default = nil)
  if valid_613872 != nil:
    section.add "X-Amz-Signature", valid_613872
  var valid_613873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613873 = validateParameter(valid_613873, JString, required = false,
                                 default = nil)
  if valid_613873 != nil:
    section.add "X-Amz-Content-Sha256", valid_613873
  var valid_613874 = header.getOrDefault("X-Amz-Date")
  valid_613874 = validateParameter(valid_613874, JString, required = false,
                                 default = nil)
  if valid_613874 != nil:
    section.add "X-Amz-Date", valid_613874
  var valid_613875 = header.getOrDefault("X-Amz-Credential")
  valid_613875 = validateParameter(valid_613875, JString, required = false,
                                 default = nil)
  if valid_613875 != nil:
    section.add "X-Amz-Credential", valid_613875
  var valid_613876 = header.getOrDefault("X-Amz-Security-Token")
  valid_613876 = validateParameter(valid_613876, JString, required = false,
                                 default = nil)
  if valid_613876 != nil:
    section.add "X-Amz-Security-Token", valid_613876
  var valid_613877 = header.getOrDefault("X-Amz-Algorithm")
  valid_613877 = validateParameter(valid_613877, JString, required = false,
                                 default = nil)
  if valid_613877 != nil:
    section.add "X-Amz-Algorithm", valid_613877
  var valid_613878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613878 = validateParameter(valid_613878, JString, required = false,
                                 default = nil)
  if valid_613878 != nil:
    section.add "X-Amz-SignedHeaders", valid_613878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613879: Call_GetDeleteReceiptRuleSet_613866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613879.validator(path, query, header, formData, body)
  let scheme = call_613879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613879.url(scheme.get, call_613879.host, call_613879.base,
                         call_613879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613879, url, valid)

proc call*(call_613880: Call_GetDeleteReceiptRuleSet_613866; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Version: string (required)
  var query_613881 = newJObject()
  add(query_613881, "Action", newJString(Action))
  add(query_613881, "RuleSetName", newJString(RuleSetName))
  add(query_613881, "Version", newJString(Version))
  result = call_613880.call(nil, query_613881, nil, nil, nil)

var getDeleteReceiptRuleSet* = Call_GetDeleteReceiptRuleSet_613866(
    name: "getDeleteReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_GetDeleteReceiptRuleSet_613867, base: "/",
    url: url_GetDeleteReceiptRuleSet_613868, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTemplate_613915 = ref object of OpenApiRestCall_612658
proc url_PostDeleteTemplate_613917(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTemplate_613916(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613918 = query.getOrDefault("Action")
  valid_613918 = validateParameter(valid_613918, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_613918 != nil:
    section.add "Action", valid_613918
  var valid_613919 = query.getOrDefault("Version")
  valid_613919 = validateParameter(valid_613919, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613919 != nil:
    section.add "Version", valid_613919
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613920 = header.getOrDefault("X-Amz-Signature")
  valid_613920 = validateParameter(valid_613920, JString, required = false,
                                 default = nil)
  if valid_613920 != nil:
    section.add "X-Amz-Signature", valid_613920
  var valid_613921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613921 = validateParameter(valid_613921, JString, required = false,
                                 default = nil)
  if valid_613921 != nil:
    section.add "X-Amz-Content-Sha256", valid_613921
  var valid_613922 = header.getOrDefault("X-Amz-Date")
  valid_613922 = validateParameter(valid_613922, JString, required = false,
                                 default = nil)
  if valid_613922 != nil:
    section.add "X-Amz-Date", valid_613922
  var valid_613923 = header.getOrDefault("X-Amz-Credential")
  valid_613923 = validateParameter(valid_613923, JString, required = false,
                                 default = nil)
  if valid_613923 != nil:
    section.add "X-Amz-Credential", valid_613923
  var valid_613924 = header.getOrDefault("X-Amz-Security-Token")
  valid_613924 = validateParameter(valid_613924, JString, required = false,
                                 default = nil)
  if valid_613924 != nil:
    section.add "X-Amz-Security-Token", valid_613924
  var valid_613925 = header.getOrDefault("X-Amz-Algorithm")
  valid_613925 = validateParameter(valid_613925, JString, required = false,
                                 default = nil)
  if valid_613925 != nil:
    section.add "X-Amz-Algorithm", valid_613925
  var valid_613926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613926 = validateParameter(valid_613926, JString, required = false,
                                 default = nil)
  if valid_613926 != nil:
    section.add "X-Amz-SignedHeaders", valid_613926
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_613927 = formData.getOrDefault("TemplateName")
  valid_613927 = validateParameter(valid_613927, JString, required = true,
                                 default = nil)
  if valid_613927 != nil:
    section.add "TemplateName", valid_613927
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613928: Call_PostDeleteTemplate_613915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613928.validator(path, query, header, formData, body)
  let scheme = call_613928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613928.url(scheme.get, call_613928.host, call_613928.base,
                         call_613928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613928, url, valid)

proc call*(call_613929: Call_PostDeleteTemplate_613915; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613930 = newJObject()
  var formData_613931 = newJObject()
  add(formData_613931, "TemplateName", newJString(TemplateName))
  add(query_613930, "Action", newJString(Action))
  add(query_613930, "Version", newJString(Version))
  result = call_613929.call(nil, query_613930, nil, formData_613931, nil)

var postDeleteTemplate* = Call_PostDeleteTemplate_613915(
    name: "postDeleteTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteTemplate",
    validator: validate_PostDeleteTemplate_613916, base: "/",
    url: url_PostDeleteTemplate_613917, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTemplate_613899 = ref object of OpenApiRestCall_612658
proc url_GetDeleteTemplate_613901(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTemplate_613900(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  var valid_613902 = query.getOrDefault("Action")
  valid_613902 = validateParameter(valid_613902, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_613902 != nil:
    section.add "Action", valid_613902
  var valid_613903 = query.getOrDefault("Version")
  valid_613903 = validateParameter(valid_613903, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613903 != nil:
    section.add "Version", valid_613903
  var valid_613904 = query.getOrDefault("TemplateName")
  valid_613904 = validateParameter(valid_613904, JString, required = true,
                                 default = nil)
  if valid_613904 != nil:
    section.add "TemplateName", valid_613904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613905 = header.getOrDefault("X-Amz-Signature")
  valid_613905 = validateParameter(valid_613905, JString, required = false,
                                 default = nil)
  if valid_613905 != nil:
    section.add "X-Amz-Signature", valid_613905
  var valid_613906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613906 = validateParameter(valid_613906, JString, required = false,
                                 default = nil)
  if valid_613906 != nil:
    section.add "X-Amz-Content-Sha256", valid_613906
  var valid_613907 = header.getOrDefault("X-Amz-Date")
  valid_613907 = validateParameter(valid_613907, JString, required = false,
                                 default = nil)
  if valid_613907 != nil:
    section.add "X-Amz-Date", valid_613907
  var valid_613908 = header.getOrDefault("X-Amz-Credential")
  valid_613908 = validateParameter(valid_613908, JString, required = false,
                                 default = nil)
  if valid_613908 != nil:
    section.add "X-Amz-Credential", valid_613908
  var valid_613909 = header.getOrDefault("X-Amz-Security-Token")
  valid_613909 = validateParameter(valid_613909, JString, required = false,
                                 default = nil)
  if valid_613909 != nil:
    section.add "X-Amz-Security-Token", valid_613909
  var valid_613910 = header.getOrDefault("X-Amz-Algorithm")
  valid_613910 = validateParameter(valid_613910, JString, required = false,
                                 default = nil)
  if valid_613910 != nil:
    section.add "X-Amz-Algorithm", valid_613910
  var valid_613911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613911 = validateParameter(valid_613911, JString, required = false,
                                 default = nil)
  if valid_613911 != nil:
    section.add "X-Amz-SignedHeaders", valid_613911
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613912: Call_GetDeleteTemplate_613899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613912.validator(path, query, header, formData, body)
  let scheme = call_613912.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613912.url(scheme.get, call_613912.host, call_613912.base,
                         call_613912.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613912, url, valid)

proc call*(call_613913: Call_GetDeleteTemplate_613899; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  var query_613914 = newJObject()
  add(query_613914, "Action", newJString(Action))
  add(query_613914, "Version", newJString(Version))
  add(query_613914, "TemplateName", newJString(TemplateName))
  result = call_613913.call(nil, query_613914, nil, nil, nil)

var getDeleteTemplate* = Call_GetDeleteTemplate_613899(name: "getDeleteTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteTemplate", validator: validate_GetDeleteTemplate_613900,
    base: "/", url: url_GetDeleteTemplate_613901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVerifiedEmailAddress_613948 = ref object of OpenApiRestCall_612658
proc url_PostDeleteVerifiedEmailAddress_613950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVerifiedEmailAddress_613949(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613951 = query.getOrDefault("Action")
  valid_613951 = validateParameter(valid_613951, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_613951 != nil:
    section.add "Action", valid_613951
  var valid_613952 = query.getOrDefault("Version")
  valid_613952 = validateParameter(valid_613952, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613952 != nil:
    section.add "Version", valid_613952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613953 = header.getOrDefault("X-Amz-Signature")
  valid_613953 = validateParameter(valid_613953, JString, required = false,
                                 default = nil)
  if valid_613953 != nil:
    section.add "X-Amz-Signature", valid_613953
  var valid_613954 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613954 = validateParameter(valid_613954, JString, required = false,
                                 default = nil)
  if valid_613954 != nil:
    section.add "X-Amz-Content-Sha256", valid_613954
  var valid_613955 = header.getOrDefault("X-Amz-Date")
  valid_613955 = validateParameter(valid_613955, JString, required = false,
                                 default = nil)
  if valid_613955 != nil:
    section.add "X-Amz-Date", valid_613955
  var valid_613956 = header.getOrDefault("X-Amz-Credential")
  valid_613956 = validateParameter(valid_613956, JString, required = false,
                                 default = nil)
  if valid_613956 != nil:
    section.add "X-Amz-Credential", valid_613956
  var valid_613957 = header.getOrDefault("X-Amz-Security-Token")
  valid_613957 = validateParameter(valid_613957, JString, required = false,
                                 default = nil)
  if valid_613957 != nil:
    section.add "X-Amz-Security-Token", valid_613957
  var valid_613958 = header.getOrDefault("X-Amz-Algorithm")
  valid_613958 = validateParameter(valid_613958, JString, required = false,
                                 default = nil)
  if valid_613958 != nil:
    section.add "X-Amz-Algorithm", valid_613958
  var valid_613959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613959 = validateParameter(valid_613959, JString, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "X-Amz-SignedHeaders", valid_613959
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_613960 = formData.getOrDefault("EmailAddress")
  valid_613960 = validateParameter(valid_613960, JString, required = true,
                                 default = nil)
  if valid_613960 != nil:
    section.add "EmailAddress", valid_613960
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613961: Call_PostDeleteVerifiedEmailAddress_613948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_613961.validator(path, query, header, formData, body)
  let scheme = call_613961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613961.url(scheme.get, call_613961.host, call_613961.base,
                         call_613961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613961, url, valid)

proc call*(call_613962: Call_PostDeleteVerifiedEmailAddress_613948;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  var query_613963 = newJObject()
  var formData_613964 = newJObject()
  add(query_613963, "Action", newJString(Action))
  add(query_613963, "Version", newJString(Version))
  add(formData_613964, "EmailAddress", newJString(EmailAddress))
  result = call_613962.call(nil, query_613963, nil, formData_613964, nil)

var postDeleteVerifiedEmailAddress* = Call_PostDeleteVerifiedEmailAddress_613948(
    name: "postDeleteVerifiedEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_PostDeleteVerifiedEmailAddress_613949, base: "/",
    url: url_PostDeleteVerifiedEmailAddress_613950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVerifiedEmailAddress_613932 = ref object of OpenApiRestCall_612658
proc url_GetDeleteVerifiedEmailAddress_613934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVerifiedEmailAddress_613933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613935 = query.getOrDefault("Action")
  valid_613935 = validateParameter(valid_613935, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_613935 != nil:
    section.add "Action", valid_613935
  var valid_613936 = query.getOrDefault("EmailAddress")
  valid_613936 = validateParameter(valid_613936, JString, required = true,
                                 default = nil)
  if valid_613936 != nil:
    section.add "EmailAddress", valid_613936
  var valid_613937 = query.getOrDefault("Version")
  valid_613937 = validateParameter(valid_613937, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613937 != nil:
    section.add "Version", valid_613937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613938 = header.getOrDefault("X-Amz-Signature")
  valid_613938 = validateParameter(valid_613938, JString, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "X-Amz-Signature", valid_613938
  var valid_613939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-Content-Sha256", valid_613939
  var valid_613940 = header.getOrDefault("X-Amz-Date")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "X-Amz-Date", valid_613940
  var valid_613941 = header.getOrDefault("X-Amz-Credential")
  valid_613941 = validateParameter(valid_613941, JString, required = false,
                                 default = nil)
  if valid_613941 != nil:
    section.add "X-Amz-Credential", valid_613941
  var valid_613942 = header.getOrDefault("X-Amz-Security-Token")
  valid_613942 = validateParameter(valid_613942, JString, required = false,
                                 default = nil)
  if valid_613942 != nil:
    section.add "X-Amz-Security-Token", valid_613942
  var valid_613943 = header.getOrDefault("X-Amz-Algorithm")
  valid_613943 = validateParameter(valid_613943, JString, required = false,
                                 default = nil)
  if valid_613943 != nil:
    section.add "X-Amz-Algorithm", valid_613943
  var valid_613944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613944 = validateParameter(valid_613944, JString, required = false,
                                 default = nil)
  if valid_613944 != nil:
    section.add "X-Amz-SignedHeaders", valid_613944
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613945: Call_GetDeleteVerifiedEmailAddress_613932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_613945.validator(path, query, header, formData, body)
  let scheme = call_613945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613945.url(scheme.get, call_613945.host, call_613945.base,
                         call_613945.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613945, url, valid)

proc call*(call_613946: Call_GetDeleteVerifiedEmailAddress_613932;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: string (required)
  var query_613947 = newJObject()
  add(query_613947, "Action", newJString(Action))
  add(query_613947, "EmailAddress", newJString(EmailAddress))
  add(query_613947, "Version", newJString(Version))
  result = call_613946.call(nil, query_613947, nil, nil, nil)

var getDeleteVerifiedEmailAddress* = Call_GetDeleteVerifiedEmailAddress_613932(
    name: "getDeleteVerifiedEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_GetDeleteVerifiedEmailAddress_613933, base: "/",
    url: url_GetDeleteVerifiedEmailAddress_613934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeActiveReceiptRuleSet_613980 = ref object of OpenApiRestCall_612658
proc url_PostDescribeActiveReceiptRuleSet_613982(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeActiveReceiptRuleSet_613981(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613983 = query.getOrDefault("Action")
  valid_613983 = validateParameter(valid_613983, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_613983 != nil:
    section.add "Action", valid_613983
  var valid_613984 = query.getOrDefault("Version")
  valid_613984 = validateParameter(valid_613984, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613984 != nil:
    section.add "Version", valid_613984
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613985 = header.getOrDefault("X-Amz-Signature")
  valid_613985 = validateParameter(valid_613985, JString, required = false,
                                 default = nil)
  if valid_613985 != nil:
    section.add "X-Amz-Signature", valid_613985
  var valid_613986 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613986 = validateParameter(valid_613986, JString, required = false,
                                 default = nil)
  if valid_613986 != nil:
    section.add "X-Amz-Content-Sha256", valid_613986
  var valid_613987 = header.getOrDefault("X-Amz-Date")
  valid_613987 = validateParameter(valid_613987, JString, required = false,
                                 default = nil)
  if valid_613987 != nil:
    section.add "X-Amz-Date", valid_613987
  var valid_613988 = header.getOrDefault("X-Amz-Credential")
  valid_613988 = validateParameter(valid_613988, JString, required = false,
                                 default = nil)
  if valid_613988 != nil:
    section.add "X-Amz-Credential", valid_613988
  var valid_613989 = header.getOrDefault("X-Amz-Security-Token")
  valid_613989 = validateParameter(valid_613989, JString, required = false,
                                 default = nil)
  if valid_613989 != nil:
    section.add "X-Amz-Security-Token", valid_613989
  var valid_613990 = header.getOrDefault("X-Amz-Algorithm")
  valid_613990 = validateParameter(valid_613990, JString, required = false,
                                 default = nil)
  if valid_613990 != nil:
    section.add "X-Amz-Algorithm", valid_613990
  var valid_613991 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613991 = validateParameter(valid_613991, JString, required = false,
                                 default = nil)
  if valid_613991 != nil:
    section.add "X-Amz-SignedHeaders", valid_613991
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613992: Call_PostDescribeActiveReceiptRuleSet_613980;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613992.validator(path, query, header, formData, body)
  let scheme = call_613992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613992.url(scheme.get, call_613992.host, call_613992.base,
                         call_613992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613992, url, valid)

proc call*(call_613993: Call_PostDescribeActiveReceiptRuleSet_613980;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613994 = newJObject()
  add(query_613994, "Action", newJString(Action))
  add(query_613994, "Version", newJString(Version))
  result = call_613993.call(nil, query_613994, nil, nil, nil)

var postDescribeActiveReceiptRuleSet* = Call_PostDescribeActiveReceiptRuleSet_613980(
    name: "postDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_PostDescribeActiveReceiptRuleSet_613981, base: "/",
    url: url_PostDescribeActiveReceiptRuleSet_613982,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeActiveReceiptRuleSet_613965 = ref object of OpenApiRestCall_612658
proc url_GetDescribeActiveReceiptRuleSet_613967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeActiveReceiptRuleSet_613966(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613968 = query.getOrDefault("Action")
  valid_613968 = validateParameter(valid_613968, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_613968 != nil:
    section.add "Action", valid_613968
  var valid_613969 = query.getOrDefault("Version")
  valid_613969 = validateParameter(valid_613969, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_613969 != nil:
    section.add "Version", valid_613969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613970 = header.getOrDefault("X-Amz-Signature")
  valid_613970 = validateParameter(valid_613970, JString, required = false,
                                 default = nil)
  if valid_613970 != nil:
    section.add "X-Amz-Signature", valid_613970
  var valid_613971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613971 = validateParameter(valid_613971, JString, required = false,
                                 default = nil)
  if valid_613971 != nil:
    section.add "X-Amz-Content-Sha256", valid_613971
  var valid_613972 = header.getOrDefault("X-Amz-Date")
  valid_613972 = validateParameter(valid_613972, JString, required = false,
                                 default = nil)
  if valid_613972 != nil:
    section.add "X-Amz-Date", valid_613972
  var valid_613973 = header.getOrDefault("X-Amz-Credential")
  valid_613973 = validateParameter(valid_613973, JString, required = false,
                                 default = nil)
  if valid_613973 != nil:
    section.add "X-Amz-Credential", valid_613973
  var valid_613974 = header.getOrDefault("X-Amz-Security-Token")
  valid_613974 = validateParameter(valid_613974, JString, required = false,
                                 default = nil)
  if valid_613974 != nil:
    section.add "X-Amz-Security-Token", valid_613974
  var valid_613975 = header.getOrDefault("X-Amz-Algorithm")
  valid_613975 = validateParameter(valid_613975, JString, required = false,
                                 default = nil)
  if valid_613975 != nil:
    section.add "X-Amz-Algorithm", valid_613975
  var valid_613976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613976 = validateParameter(valid_613976, JString, required = false,
                                 default = nil)
  if valid_613976 != nil:
    section.add "X-Amz-SignedHeaders", valid_613976
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613977: Call_GetDescribeActiveReceiptRuleSet_613965;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_613977.validator(path, query, header, formData, body)
  let scheme = call_613977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613977.url(scheme.get, call_613977.host, call_613977.base,
                         call_613977.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613977, url, valid)

proc call*(call_613978: Call_GetDescribeActiveReceiptRuleSet_613965;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613979 = newJObject()
  add(query_613979, "Action", newJString(Action))
  add(query_613979, "Version", newJString(Version))
  result = call_613978.call(nil, query_613979, nil, nil, nil)

var getDescribeActiveReceiptRuleSet* = Call_GetDescribeActiveReceiptRuleSet_613965(
    name: "getDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_GetDescribeActiveReceiptRuleSet_613966, base: "/",
    url: url_GetDescribeActiveReceiptRuleSet_613967,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeConfigurationSet_614012 = ref object of OpenApiRestCall_612658
proc url_PostDescribeConfigurationSet_614014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeConfigurationSet_614013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614015 = query.getOrDefault("Action")
  valid_614015 = validateParameter(valid_614015, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_614015 != nil:
    section.add "Action", valid_614015
  var valid_614016 = query.getOrDefault("Version")
  valid_614016 = validateParameter(valid_614016, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614016 != nil:
    section.add "Version", valid_614016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614017 = header.getOrDefault("X-Amz-Signature")
  valid_614017 = validateParameter(valid_614017, JString, required = false,
                                 default = nil)
  if valid_614017 != nil:
    section.add "X-Amz-Signature", valid_614017
  var valid_614018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614018 = validateParameter(valid_614018, JString, required = false,
                                 default = nil)
  if valid_614018 != nil:
    section.add "X-Amz-Content-Sha256", valid_614018
  var valid_614019 = header.getOrDefault("X-Amz-Date")
  valid_614019 = validateParameter(valid_614019, JString, required = false,
                                 default = nil)
  if valid_614019 != nil:
    section.add "X-Amz-Date", valid_614019
  var valid_614020 = header.getOrDefault("X-Amz-Credential")
  valid_614020 = validateParameter(valid_614020, JString, required = false,
                                 default = nil)
  if valid_614020 != nil:
    section.add "X-Amz-Credential", valid_614020
  var valid_614021 = header.getOrDefault("X-Amz-Security-Token")
  valid_614021 = validateParameter(valid_614021, JString, required = false,
                                 default = nil)
  if valid_614021 != nil:
    section.add "X-Amz-Security-Token", valid_614021
  var valid_614022 = header.getOrDefault("X-Amz-Algorithm")
  valid_614022 = validateParameter(valid_614022, JString, required = false,
                                 default = nil)
  if valid_614022 != nil:
    section.add "X-Amz-Algorithm", valid_614022
  var valid_614023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614023 = validateParameter(valid_614023, JString, required = false,
                                 default = nil)
  if valid_614023 != nil:
    section.add "X-Amz-SignedHeaders", valid_614023
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  section = newJObject()
  var valid_614024 = formData.getOrDefault("ConfigurationSetAttributeNames")
  valid_614024 = validateParameter(valid_614024, JArray, required = false,
                                 default = nil)
  if valid_614024 != nil:
    section.add "ConfigurationSetAttributeNames", valid_614024
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_614025 = formData.getOrDefault("ConfigurationSetName")
  valid_614025 = validateParameter(valid_614025, JString, required = true,
                                 default = nil)
  if valid_614025 != nil:
    section.add "ConfigurationSetName", valid_614025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614026: Call_PostDescribeConfigurationSet_614012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614026.validator(path, query, header, formData, body)
  let scheme = call_614026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614026.url(scheme.get, call_614026.host, call_614026.base,
                         call_614026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614026, url, valid)

proc call*(call_614027: Call_PostDescribeConfigurationSet_614012;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: string (required)
  var query_614028 = newJObject()
  var formData_614029 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    formData_614029.add "ConfigurationSetAttributeNames",
                       ConfigurationSetAttributeNames
  add(query_614028, "Action", newJString(Action))
  add(formData_614029, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614028, "Version", newJString(Version))
  result = call_614027.call(nil, query_614028, nil, formData_614029, nil)

var postDescribeConfigurationSet* = Call_PostDescribeConfigurationSet_614012(
    name: "postDescribeConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_PostDescribeConfigurationSet_614013, base: "/",
    url: url_PostDescribeConfigurationSet_614014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeConfigurationSet_613995 = ref object of OpenApiRestCall_612658
proc url_GetDescribeConfigurationSet_613997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeConfigurationSet_613996(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613998 = query.getOrDefault("ConfigurationSetAttributeNames")
  valid_613998 = validateParameter(valid_613998, JArray, required = false,
                                 default = nil)
  if valid_613998 != nil:
    section.add "ConfigurationSetAttributeNames", valid_613998
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_613999 = query.getOrDefault("ConfigurationSetName")
  valid_613999 = validateParameter(valid_613999, JString, required = true,
                                 default = nil)
  if valid_613999 != nil:
    section.add "ConfigurationSetName", valid_613999
  var valid_614000 = query.getOrDefault("Action")
  valid_614000 = validateParameter(valid_614000, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_614000 != nil:
    section.add "Action", valid_614000
  var valid_614001 = query.getOrDefault("Version")
  valid_614001 = validateParameter(valid_614001, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614001 != nil:
    section.add "Version", valid_614001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614002 = header.getOrDefault("X-Amz-Signature")
  valid_614002 = validateParameter(valid_614002, JString, required = false,
                                 default = nil)
  if valid_614002 != nil:
    section.add "X-Amz-Signature", valid_614002
  var valid_614003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614003 = validateParameter(valid_614003, JString, required = false,
                                 default = nil)
  if valid_614003 != nil:
    section.add "X-Amz-Content-Sha256", valid_614003
  var valid_614004 = header.getOrDefault("X-Amz-Date")
  valid_614004 = validateParameter(valid_614004, JString, required = false,
                                 default = nil)
  if valid_614004 != nil:
    section.add "X-Amz-Date", valid_614004
  var valid_614005 = header.getOrDefault("X-Amz-Credential")
  valid_614005 = validateParameter(valid_614005, JString, required = false,
                                 default = nil)
  if valid_614005 != nil:
    section.add "X-Amz-Credential", valid_614005
  var valid_614006 = header.getOrDefault("X-Amz-Security-Token")
  valid_614006 = validateParameter(valid_614006, JString, required = false,
                                 default = nil)
  if valid_614006 != nil:
    section.add "X-Amz-Security-Token", valid_614006
  var valid_614007 = header.getOrDefault("X-Amz-Algorithm")
  valid_614007 = validateParameter(valid_614007, JString, required = false,
                                 default = nil)
  if valid_614007 != nil:
    section.add "X-Amz-Algorithm", valid_614007
  var valid_614008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614008 = validateParameter(valid_614008, JString, required = false,
                                 default = nil)
  if valid_614008 != nil:
    section.add "X-Amz-SignedHeaders", valid_614008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614009: Call_GetDescribeConfigurationSet_613995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614009.validator(path, query, header, formData, body)
  let scheme = call_614009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614009.url(scheme.get, call_614009.host, call_614009.base,
                         call_614009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614009, url, valid)

proc call*(call_614010: Call_GetDescribeConfigurationSet_613995;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614011 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    query_614011.add "ConfigurationSetAttributeNames",
                    ConfigurationSetAttributeNames
  add(query_614011, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614011, "Action", newJString(Action))
  add(query_614011, "Version", newJString(Version))
  result = call_614010.call(nil, query_614011, nil, nil, nil)

var getDescribeConfigurationSet* = Call_GetDescribeConfigurationSet_613995(
    name: "getDescribeConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_GetDescribeConfigurationSet_613996, base: "/",
    url: url_GetDescribeConfigurationSet_613997,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRule_614047 = ref object of OpenApiRestCall_612658
proc url_PostDescribeReceiptRule_614049(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReceiptRule_614048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614050 = query.getOrDefault("Action")
  valid_614050 = validateParameter(valid_614050, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_614050 != nil:
    section.add "Action", valid_614050
  var valid_614051 = query.getOrDefault("Version")
  valid_614051 = validateParameter(valid_614051, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614051 != nil:
    section.add "Version", valid_614051
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614052 = header.getOrDefault("X-Amz-Signature")
  valid_614052 = validateParameter(valid_614052, JString, required = false,
                                 default = nil)
  if valid_614052 != nil:
    section.add "X-Amz-Signature", valid_614052
  var valid_614053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614053 = validateParameter(valid_614053, JString, required = false,
                                 default = nil)
  if valid_614053 != nil:
    section.add "X-Amz-Content-Sha256", valid_614053
  var valid_614054 = header.getOrDefault("X-Amz-Date")
  valid_614054 = validateParameter(valid_614054, JString, required = false,
                                 default = nil)
  if valid_614054 != nil:
    section.add "X-Amz-Date", valid_614054
  var valid_614055 = header.getOrDefault("X-Amz-Credential")
  valid_614055 = validateParameter(valid_614055, JString, required = false,
                                 default = nil)
  if valid_614055 != nil:
    section.add "X-Amz-Credential", valid_614055
  var valid_614056 = header.getOrDefault("X-Amz-Security-Token")
  valid_614056 = validateParameter(valid_614056, JString, required = false,
                                 default = nil)
  if valid_614056 != nil:
    section.add "X-Amz-Security-Token", valid_614056
  var valid_614057 = header.getOrDefault("X-Amz-Algorithm")
  valid_614057 = validateParameter(valid_614057, JString, required = false,
                                 default = nil)
  if valid_614057 != nil:
    section.add "X-Amz-Algorithm", valid_614057
  var valid_614058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614058 = validateParameter(valid_614058, JString, required = false,
                                 default = nil)
  if valid_614058 != nil:
    section.add "X-Amz-SignedHeaders", valid_614058
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_614059 = formData.getOrDefault("RuleName")
  valid_614059 = validateParameter(valid_614059, JString, required = true,
                                 default = nil)
  if valid_614059 != nil:
    section.add "RuleName", valid_614059
  var valid_614060 = formData.getOrDefault("RuleSetName")
  valid_614060 = validateParameter(valid_614060, JString, required = true,
                                 default = nil)
  if valid_614060 != nil:
    section.add "RuleSetName", valid_614060
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614061: Call_PostDescribeReceiptRule_614047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614061.validator(path, query, header, formData, body)
  let scheme = call_614061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614061.url(scheme.get, call_614061.host, call_614061.base,
                         call_614061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614061, url, valid)

proc call*(call_614062: Call_PostDescribeReceiptRule_614047; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614063 = newJObject()
  var formData_614064 = newJObject()
  add(formData_614064, "RuleName", newJString(RuleName))
  add(formData_614064, "RuleSetName", newJString(RuleSetName))
  add(query_614063, "Action", newJString(Action))
  add(query_614063, "Version", newJString(Version))
  result = call_614062.call(nil, query_614063, nil, formData_614064, nil)

var postDescribeReceiptRule* = Call_PostDescribeReceiptRule_614047(
    name: "postDescribeReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_PostDescribeReceiptRule_614048, base: "/",
    url: url_PostDescribeReceiptRule_614049, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRule_614030 = ref object of OpenApiRestCall_612658
proc url_GetDescribeReceiptRule_614032(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReceiptRule_614031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_614033 = query.getOrDefault("RuleName")
  valid_614033 = validateParameter(valid_614033, JString, required = true,
                                 default = nil)
  if valid_614033 != nil:
    section.add "RuleName", valid_614033
  var valid_614034 = query.getOrDefault("Action")
  valid_614034 = validateParameter(valid_614034, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_614034 != nil:
    section.add "Action", valid_614034
  var valid_614035 = query.getOrDefault("RuleSetName")
  valid_614035 = validateParameter(valid_614035, JString, required = true,
                                 default = nil)
  if valid_614035 != nil:
    section.add "RuleSetName", valid_614035
  var valid_614036 = query.getOrDefault("Version")
  valid_614036 = validateParameter(valid_614036, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614036 != nil:
    section.add "Version", valid_614036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614037 = header.getOrDefault("X-Amz-Signature")
  valid_614037 = validateParameter(valid_614037, JString, required = false,
                                 default = nil)
  if valid_614037 != nil:
    section.add "X-Amz-Signature", valid_614037
  var valid_614038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614038 = validateParameter(valid_614038, JString, required = false,
                                 default = nil)
  if valid_614038 != nil:
    section.add "X-Amz-Content-Sha256", valid_614038
  var valid_614039 = header.getOrDefault("X-Amz-Date")
  valid_614039 = validateParameter(valid_614039, JString, required = false,
                                 default = nil)
  if valid_614039 != nil:
    section.add "X-Amz-Date", valid_614039
  var valid_614040 = header.getOrDefault("X-Amz-Credential")
  valid_614040 = validateParameter(valid_614040, JString, required = false,
                                 default = nil)
  if valid_614040 != nil:
    section.add "X-Amz-Credential", valid_614040
  var valid_614041 = header.getOrDefault("X-Amz-Security-Token")
  valid_614041 = validateParameter(valid_614041, JString, required = false,
                                 default = nil)
  if valid_614041 != nil:
    section.add "X-Amz-Security-Token", valid_614041
  var valid_614042 = header.getOrDefault("X-Amz-Algorithm")
  valid_614042 = validateParameter(valid_614042, JString, required = false,
                                 default = nil)
  if valid_614042 != nil:
    section.add "X-Amz-Algorithm", valid_614042
  var valid_614043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614043 = validateParameter(valid_614043, JString, required = false,
                                 default = nil)
  if valid_614043 != nil:
    section.add "X-Amz-SignedHeaders", valid_614043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614044: Call_GetDescribeReceiptRule_614030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614044.validator(path, query, header, formData, body)
  let scheme = call_614044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614044.url(scheme.get, call_614044.host, call_614044.base,
                         call_614044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614044, url, valid)

proc call*(call_614045: Call_GetDescribeReceiptRule_614030; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Version: string (required)
  var query_614046 = newJObject()
  add(query_614046, "RuleName", newJString(RuleName))
  add(query_614046, "Action", newJString(Action))
  add(query_614046, "RuleSetName", newJString(RuleSetName))
  add(query_614046, "Version", newJString(Version))
  result = call_614045.call(nil, query_614046, nil, nil, nil)

var getDescribeReceiptRule* = Call_GetDescribeReceiptRule_614030(
    name: "getDescribeReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_GetDescribeReceiptRule_614031, base: "/",
    url: url_GetDescribeReceiptRule_614032, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRuleSet_614081 = ref object of OpenApiRestCall_612658
proc url_PostDescribeReceiptRuleSet_614083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReceiptRuleSet_614082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614084 = query.getOrDefault("Action")
  valid_614084 = validateParameter(valid_614084, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_614084 != nil:
    section.add "Action", valid_614084
  var valid_614085 = query.getOrDefault("Version")
  valid_614085 = validateParameter(valid_614085, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614085 != nil:
    section.add "Version", valid_614085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614086 = header.getOrDefault("X-Amz-Signature")
  valid_614086 = validateParameter(valid_614086, JString, required = false,
                                 default = nil)
  if valid_614086 != nil:
    section.add "X-Amz-Signature", valid_614086
  var valid_614087 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614087 = validateParameter(valid_614087, JString, required = false,
                                 default = nil)
  if valid_614087 != nil:
    section.add "X-Amz-Content-Sha256", valid_614087
  var valid_614088 = header.getOrDefault("X-Amz-Date")
  valid_614088 = validateParameter(valid_614088, JString, required = false,
                                 default = nil)
  if valid_614088 != nil:
    section.add "X-Amz-Date", valid_614088
  var valid_614089 = header.getOrDefault("X-Amz-Credential")
  valid_614089 = validateParameter(valid_614089, JString, required = false,
                                 default = nil)
  if valid_614089 != nil:
    section.add "X-Amz-Credential", valid_614089
  var valid_614090 = header.getOrDefault("X-Amz-Security-Token")
  valid_614090 = validateParameter(valid_614090, JString, required = false,
                                 default = nil)
  if valid_614090 != nil:
    section.add "X-Amz-Security-Token", valid_614090
  var valid_614091 = header.getOrDefault("X-Amz-Algorithm")
  valid_614091 = validateParameter(valid_614091, JString, required = false,
                                 default = nil)
  if valid_614091 != nil:
    section.add "X-Amz-Algorithm", valid_614091
  var valid_614092 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614092 = validateParameter(valid_614092, JString, required = false,
                                 default = nil)
  if valid_614092 != nil:
    section.add "X-Amz-SignedHeaders", valid_614092
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_614093 = formData.getOrDefault("RuleSetName")
  valid_614093 = validateParameter(valid_614093, JString, required = true,
                                 default = nil)
  if valid_614093 != nil:
    section.add "RuleSetName", valid_614093
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614094: Call_PostDescribeReceiptRuleSet_614081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614094.validator(path, query, header, formData, body)
  let scheme = call_614094.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614094.url(scheme.get, call_614094.host, call_614094.base,
                         call_614094.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614094, url, valid)

proc call*(call_614095: Call_PostDescribeReceiptRuleSet_614081;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614096 = newJObject()
  var formData_614097 = newJObject()
  add(formData_614097, "RuleSetName", newJString(RuleSetName))
  add(query_614096, "Action", newJString(Action))
  add(query_614096, "Version", newJString(Version))
  result = call_614095.call(nil, query_614096, nil, formData_614097, nil)

var postDescribeReceiptRuleSet* = Call_PostDescribeReceiptRuleSet_614081(
    name: "postDescribeReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_PostDescribeReceiptRuleSet_614082, base: "/",
    url: url_PostDescribeReceiptRuleSet_614083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRuleSet_614065 = ref object of OpenApiRestCall_612658
proc url_GetDescribeReceiptRuleSet_614067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReceiptRuleSet_614066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_614068 = query.getOrDefault("Action")
  valid_614068 = validateParameter(valid_614068, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_614068 != nil:
    section.add "Action", valid_614068
  var valid_614069 = query.getOrDefault("RuleSetName")
  valid_614069 = validateParameter(valid_614069, JString, required = true,
                                 default = nil)
  if valid_614069 != nil:
    section.add "RuleSetName", valid_614069
  var valid_614070 = query.getOrDefault("Version")
  valid_614070 = validateParameter(valid_614070, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614070 != nil:
    section.add "Version", valid_614070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614071 = header.getOrDefault("X-Amz-Signature")
  valid_614071 = validateParameter(valid_614071, JString, required = false,
                                 default = nil)
  if valid_614071 != nil:
    section.add "X-Amz-Signature", valid_614071
  var valid_614072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614072 = validateParameter(valid_614072, JString, required = false,
                                 default = nil)
  if valid_614072 != nil:
    section.add "X-Amz-Content-Sha256", valid_614072
  var valid_614073 = header.getOrDefault("X-Amz-Date")
  valid_614073 = validateParameter(valid_614073, JString, required = false,
                                 default = nil)
  if valid_614073 != nil:
    section.add "X-Amz-Date", valid_614073
  var valid_614074 = header.getOrDefault("X-Amz-Credential")
  valid_614074 = validateParameter(valid_614074, JString, required = false,
                                 default = nil)
  if valid_614074 != nil:
    section.add "X-Amz-Credential", valid_614074
  var valid_614075 = header.getOrDefault("X-Amz-Security-Token")
  valid_614075 = validateParameter(valid_614075, JString, required = false,
                                 default = nil)
  if valid_614075 != nil:
    section.add "X-Amz-Security-Token", valid_614075
  var valid_614076 = header.getOrDefault("X-Amz-Algorithm")
  valid_614076 = validateParameter(valid_614076, JString, required = false,
                                 default = nil)
  if valid_614076 != nil:
    section.add "X-Amz-Algorithm", valid_614076
  var valid_614077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614077 = validateParameter(valid_614077, JString, required = false,
                                 default = nil)
  if valid_614077 != nil:
    section.add "X-Amz-SignedHeaders", valid_614077
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614078: Call_GetDescribeReceiptRuleSet_614065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614078.validator(path, query, header, formData, body)
  let scheme = call_614078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614078.url(scheme.get, call_614078.host, call_614078.base,
                         call_614078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614078, url, valid)

proc call*(call_614079: Call_GetDescribeReceiptRuleSet_614065; RuleSetName: string;
          Action: string = "DescribeReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Version: string (required)
  var query_614080 = newJObject()
  add(query_614080, "Action", newJString(Action))
  add(query_614080, "RuleSetName", newJString(RuleSetName))
  add(query_614080, "Version", newJString(Version))
  result = call_614079.call(nil, query_614080, nil, nil, nil)

var getDescribeReceiptRuleSet* = Call_GetDescribeReceiptRuleSet_614065(
    name: "getDescribeReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_GetDescribeReceiptRuleSet_614066, base: "/",
    url: url_GetDescribeReceiptRuleSet_614067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSendingEnabled_614113 = ref object of OpenApiRestCall_612658
proc url_PostGetAccountSendingEnabled_614115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSendingEnabled_614114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614116 = query.getOrDefault("Action")
  valid_614116 = validateParameter(valid_614116, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_614116 != nil:
    section.add "Action", valid_614116
  var valid_614117 = query.getOrDefault("Version")
  valid_614117 = validateParameter(valid_614117, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614117 != nil:
    section.add "Version", valid_614117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614118 = header.getOrDefault("X-Amz-Signature")
  valid_614118 = validateParameter(valid_614118, JString, required = false,
                                 default = nil)
  if valid_614118 != nil:
    section.add "X-Amz-Signature", valid_614118
  var valid_614119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614119 = validateParameter(valid_614119, JString, required = false,
                                 default = nil)
  if valid_614119 != nil:
    section.add "X-Amz-Content-Sha256", valid_614119
  var valid_614120 = header.getOrDefault("X-Amz-Date")
  valid_614120 = validateParameter(valid_614120, JString, required = false,
                                 default = nil)
  if valid_614120 != nil:
    section.add "X-Amz-Date", valid_614120
  var valid_614121 = header.getOrDefault("X-Amz-Credential")
  valid_614121 = validateParameter(valid_614121, JString, required = false,
                                 default = nil)
  if valid_614121 != nil:
    section.add "X-Amz-Credential", valid_614121
  var valid_614122 = header.getOrDefault("X-Amz-Security-Token")
  valid_614122 = validateParameter(valid_614122, JString, required = false,
                                 default = nil)
  if valid_614122 != nil:
    section.add "X-Amz-Security-Token", valid_614122
  var valid_614123 = header.getOrDefault("X-Amz-Algorithm")
  valid_614123 = validateParameter(valid_614123, JString, required = false,
                                 default = nil)
  if valid_614123 != nil:
    section.add "X-Amz-Algorithm", valid_614123
  var valid_614124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614124 = validateParameter(valid_614124, JString, required = false,
                                 default = nil)
  if valid_614124 != nil:
    section.add "X-Amz-SignedHeaders", valid_614124
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614125: Call_PostGetAccountSendingEnabled_614113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614125.validator(path, query, header, formData, body)
  let scheme = call_614125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614125.url(scheme.get, call_614125.host, call_614125.base,
                         call_614125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614125, url, valid)

proc call*(call_614126: Call_PostGetAccountSendingEnabled_614113;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614127 = newJObject()
  add(query_614127, "Action", newJString(Action))
  add(query_614127, "Version", newJString(Version))
  result = call_614126.call(nil, query_614127, nil, nil, nil)

var postGetAccountSendingEnabled* = Call_PostGetAccountSendingEnabled_614113(
    name: "postGetAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_PostGetAccountSendingEnabled_614114, base: "/",
    url: url_PostGetAccountSendingEnabled_614115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSendingEnabled_614098 = ref object of OpenApiRestCall_612658
proc url_GetGetAccountSendingEnabled_614100(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSendingEnabled_614099(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614101 = query.getOrDefault("Action")
  valid_614101 = validateParameter(valid_614101, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_614101 != nil:
    section.add "Action", valid_614101
  var valid_614102 = query.getOrDefault("Version")
  valid_614102 = validateParameter(valid_614102, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614102 != nil:
    section.add "Version", valid_614102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614103 = header.getOrDefault("X-Amz-Signature")
  valid_614103 = validateParameter(valid_614103, JString, required = false,
                                 default = nil)
  if valid_614103 != nil:
    section.add "X-Amz-Signature", valid_614103
  var valid_614104 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614104 = validateParameter(valid_614104, JString, required = false,
                                 default = nil)
  if valid_614104 != nil:
    section.add "X-Amz-Content-Sha256", valid_614104
  var valid_614105 = header.getOrDefault("X-Amz-Date")
  valid_614105 = validateParameter(valid_614105, JString, required = false,
                                 default = nil)
  if valid_614105 != nil:
    section.add "X-Amz-Date", valid_614105
  var valid_614106 = header.getOrDefault("X-Amz-Credential")
  valid_614106 = validateParameter(valid_614106, JString, required = false,
                                 default = nil)
  if valid_614106 != nil:
    section.add "X-Amz-Credential", valid_614106
  var valid_614107 = header.getOrDefault("X-Amz-Security-Token")
  valid_614107 = validateParameter(valid_614107, JString, required = false,
                                 default = nil)
  if valid_614107 != nil:
    section.add "X-Amz-Security-Token", valid_614107
  var valid_614108 = header.getOrDefault("X-Amz-Algorithm")
  valid_614108 = validateParameter(valid_614108, JString, required = false,
                                 default = nil)
  if valid_614108 != nil:
    section.add "X-Amz-Algorithm", valid_614108
  var valid_614109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614109 = validateParameter(valid_614109, JString, required = false,
                                 default = nil)
  if valid_614109 != nil:
    section.add "X-Amz-SignedHeaders", valid_614109
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614110: Call_GetGetAccountSendingEnabled_614098; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614110.validator(path, query, header, formData, body)
  let scheme = call_614110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614110.url(scheme.get, call_614110.host, call_614110.base,
                         call_614110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614110, url, valid)

proc call*(call_614111: Call_GetGetAccountSendingEnabled_614098;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614112 = newJObject()
  add(query_614112, "Action", newJString(Action))
  add(query_614112, "Version", newJString(Version))
  result = call_614111.call(nil, query_614112, nil, nil, nil)

var getGetAccountSendingEnabled* = Call_GetGetAccountSendingEnabled_614098(
    name: "getGetAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_GetGetAccountSendingEnabled_614099, base: "/",
    url: url_GetGetAccountSendingEnabled_614100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCustomVerificationEmailTemplate_614144 = ref object of OpenApiRestCall_612658
proc url_PostGetCustomVerificationEmailTemplate_614146(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCustomVerificationEmailTemplate_614145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614147 = query.getOrDefault("Action")
  valid_614147 = validateParameter(valid_614147, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_614147 != nil:
    section.add "Action", valid_614147
  var valid_614148 = query.getOrDefault("Version")
  valid_614148 = validateParameter(valid_614148, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614148 != nil:
    section.add "Version", valid_614148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614149 = header.getOrDefault("X-Amz-Signature")
  valid_614149 = validateParameter(valid_614149, JString, required = false,
                                 default = nil)
  if valid_614149 != nil:
    section.add "X-Amz-Signature", valid_614149
  var valid_614150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614150 = validateParameter(valid_614150, JString, required = false,
                                 default = nil)
  if valid_614150 != nil:
    section.add "X-Amz-Content-Sha256", valid_614150
  var valid_614151 = header.getOrDefault("X-Amz-Date")
  valid_614151 = validateParameter(valid_614151, JString, required = false,
                                 default = nil)
  if valid_614151 != nil:
    section.add "X-Amz-Date", valid_614151
  var valid_614152 = header.getOrDefault("X-Amz-Credential")
  valid_614152 = validateParameter(valid_614152, JString, required = false,
                                 default = nil)
  if valid_614152 != nil:
    section.add "X-Amz-Credential", valid_614152
  var valid_614153 = header.getOrDefault("X-Amz-Security-Token")
  valid_614153 = validateParameter(valid_614153, JString, required = false,
                                 default = nil)
  if valid_614153 != nil:
    section.add "X-Amz-Security-Token", valid_614153
  var valid_614154 = header.getOrDefault("X-Amz-Algorithm")
  valid_614154 = validateParameter(valid_614154, JString, required = false,
                                 default = nil)
  if valid_614154 != nil:
    section.add "X-Amz-Algorithm", valid_614154
  var valid_614155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614155 = validateParameter(valid_614155, JString, required = false,
                                 default = nil)
  if valid_614155 != nil:
    section.add "X-Amz-SignedHeaders", valid_614155
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_614156 = formData.getOrDefault("TemplateName")
  valid_614156 = validateParameter(valid_614156, JString, required = true,
                                 default = nil)
  if valid_614156 != nil:
    section.add "TemplateName", valid_614156
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614157: Call_PostGetCustomVerificationEmailTemplate_614144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614157.validator(path, query, header, formData, body)
  let scheme = call_614157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614157.url(scheme.get, call_614157.host, call_614157.base,
                         call_614157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614157, url, valid)

proc call*(call_614158: Call_PostGetCustomVerificationEmailTemplate_614144;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614159 = newJObject()
  var formData_614160 = newJObject()
  add(formData_614160, "TemplateName", newJString(TemplateName))
  add(query_614159, "Action", newJString(Action))
  add(query_614159, "Version", newJString(Version))
  result = call_614158.call(nil, query_614159, nil, formData_614160, nil)

var postGetCustomVerificationEmailTemplate* = Call_PostGetCustomVerificationEmailTemplate_614144(
    name: "postGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_PostGetCustomVerificationEmailTemplate_614145, base: "/",
    url: url_PostGetCustomVerificationEmailTemplate_614146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCustomVerificationEmailTemplate_614128 = ref object of OpenApiRestCall_612658
proc url_GetGetCustomVerificationEmailTemplate_614130(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCustomVerificationEmailTemplate_614129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  var valid_614131 = query.getOrDefault("Action")
  valid_614131 = validateParameter(valid_614131, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_614131 != nil:
    section.add "Action", valid_614131
  var valid_614132 = query.getOrDefault("Version")
  valid_614132 = validateParameter(valid_614132, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614132 != nil:
    section.add "Version", valid_614132
  var valid_614133 = query.getOrDefault("TemplateName")
  valid_614133 = validateParameter(valid_614133, JString, required = true,
                                 default = nil)
  if valid_614133 != nil:
    section.add "TemplateName", valid_614133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614134 = header.getOrDefault("X-Amz-Signature")
  valid_614134 = validateParameter(valid_614134, JString, required = false,
                                 default = nil)
  if valid_614134 != nil:
    section.add "X-Amz-Signature", valid_614134
  var valid_614135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614135 = validateParameter(valid_614135, JString, required = false,
                                 default = nil)
  if valid_614135 != nil:
    section.add "X-Amz-Content-Sha256", valid_614135
  var valid_614136 = header.getOrDefault("X-Amz-Date")
  valid_614136 = validateParameter(valid_614136, JString, required = false,
                                 default = nil)
  if valid_614136 != nil:
    section.add "X-Amz-Date", valid_614136
  var valid_614137 = header.getOrDefault("X-Amz-Credential")
  valid_614137 = validateParameter(valid_614137, JString, required = false,
                                 default = nil)
  if valid_614137 != nil:
    section.add "X-Amz-Credential", valid_614137
  var valid_614138 = header.getOrDefault("X-Amz-Security-Token")
  valid_614138 = validateParameter(valid_614138, JString, required = false,
                                 default = nil)
  if valid_614138 != nil:
    section.add "X-Amz-Security-Token", valid_614138
  var valid_614139 = header.getOrDefault("X-Amz-Algorithm")
  valid_614139 = validateParameter(valid_614139, JString, required = false,
                                 default = nil)
  if valid_614139 != nil:
    section.add "X-Amz-Algorithm", valid_614139
  var valid_614140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614140 = validateParameter(valid_614140, JString, required = false,
                                 default = nil)
  if valid_614140 != nil:
    section.add "X-Amz-SignedHeaders", valid_614140
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614141: Call_GetGetCustomVerificationEmailTemplate_614128;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614141.validator(path, query, header, formData, body)
  let scheme = call_614141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614141.url(scheme.get, call_614141.host, call_614141.base,
                         call_614141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614141, url, valid)

proc call*(call_614142: Call_GetGetCustomVerificationEmailTemplate_614128;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  var query_614143 = newJObject()
  add(query_614143, "Action", newJString(Action))
  add(query_614143, "Version", newJString(Version))
  add(query_614143, "TemplateName", newJString(TemplateName))
  result = call_614142.call(nil, query_614143, nil, nil, nil)

var getGetCustomVerificationEmailTemplate* = Call_GetGetCustomVerificationEmailTemplate_614128(
    name: "getGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_GetGetCustomVerificationEmailTemplate_614129, base: "/",
    url: url_GetGetCustomVerificationEmailTemplate_614130,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityDkimAttributes_614177 = ref object of OpenApiRestCall_612658
proc url_PostGetIdentityDkimAttributes_614179(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityDkimAttributes_614178(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614180 = query.getOrDefault("Action")
  valid_614180 = validateParameter(valid_614180, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_614180 != nil:
    section.add "Action", valid_614180
  var valid_614181 = query.getOrDefault("Version")
  valid_614181 = validateParameter(valid_614181, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614181 != nil:
    section.add "Version", valid_614181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614182 = header.getOrDefault("X-Amz-Signature")
  valid_614182 = validateParameter(valid_614182, JString, required = false,
                                 default = nil)
  if valid_614182 != nil:
    section.add "X-Amz-Signature", valid_614182
  var valid_614183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614183 = validateParameter(valid_614183, JString, required = false,
                                 default = nil)
  if valid_614183 != nil:
    section.add "X-Amz-Content-Sha256", valid_614183
  var valid_614184 = header.getOrDefault("X-Amz-Date")
  valid_614184 = validateParameter(valid_614184, JString, required = false,
                                 default = nil)
  if valid_614184 != nil:
    section.add "X-Amz-Date", valid_614184
  var valid_614185 = header.getOrDefault("X-Amz-Credential")
  valid_614185 = validateParameter(valid_614185, JString, required = false,
                                 default = nil)
  if valid_614185 != nil:
    section.add "X-Amz-Credential", valid_614185
  var valid_614186 = header.getOrDefault("X-Amz-Security-Token")
  valid_614186 = validateParameter(valid_614186, JString, required = false,
                                 default = nil)
  if valid_614186 != nil:
    section.add "X-Amz-Security-Token", valid_614186
  var valid_614187 = header.getOrDefault("X-Amz-Algorithm")
  valid_614187 = validateParameter(valid_614187, JString, required = false,
                                 default = nil)
  if valid_614187 != nil:
    section.add "X-Amz-Algorithm", valid_614187
  var valid_614188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614188 = validateParameter(valid_614188, JString, required = false,
                                 default = nil)
  if valid_614188 != nil:
    section.add "X-Amz-SignedHeaders", valid_614188
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_614189 = formData.getOrDefault("Identities")
  valid_614189 = validateParameter(valid_614189, JArray, required = true, default = nil)
  if valid_614189 != nil:
    section.add "Identities", valid_614189
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614190: Call_PostGetIdentityDkimAttributes_614177; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_614190.validator(path, query, header, formData, body)
  let scheme = call_614190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614190.url(scheme.get, call_614190.host, call_614190.base,
                         call_614190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614190, url, valid)

proc call*(call_614191: Call_PostGetIdentityDkimAttributes_614177;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614192 = newJObject()
  var formData_614193 = newJObject()
  if Identities != nil:
    formData_614193.add "Identities", Identities
  add(query_614192, "Action", newJString(Action))
  add(query_614192, "Version", newJString(Version))
  result = call_614191.call(nil, query_614192, nil, formData_614193, nil)

var postGetIdentityDkimAttributes* = Call_PostGetIdentityDkimAttributes_614177(
    name: "postGetIdentityDkimAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_PostGetIdentityDkimAttributes_614178, base: "/",
    url: url_PostGetIdentityDkimAttributes_614179,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityDkimAttributes_614161 = ref object of OpenApiRestCall_612658
proc url_GetGetIdentityDkimAttributes_614163(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityDkimAttributes_614162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_614164 = query.getOrDefault("Identities")
  valid_614164 = validateParameter(valid_614164, JArray, required = true, default = nil)
  if valid_614164 != nil:
    section.add "Identities", valid_614164
  var valid_614165 = query.getOrDefault("Action")
  valid_614165 = validateParameter(valid_614165, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_614165 != nil:
    section.add "Action", valid_614165
  var valid_614166 = query.getOrDefault("Version")
  valid_614166 = validateParameter(valid_614166, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614166 != nil:
    section.add "Version", valid_614166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614167 = header.getOrDefault("X-Amz-Signature")
  valid_614167 = validateParameter(valid_614167, JString, required = false,
                                 default = nil)
  if valid_614167 != nil:
    section.add "X-Amz-Signature", valid_614167
  var valid_614168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614168 = validateParameter(valid_614168, JString, required = false,
                                 default = nil)
  if valid_614168 != nil:
    section.add "X-Amz-Content-Sha256", valid_614168
  var valid_614169 = header.getOrDefault("X-Amz-Date")
  valid_614169 = validateParameter(valid_614169, JString, required = false,
                                 default = nil)
  if valid_614169 != nil:
    section.add "X-Amz-Date", valid_614169
  var valid_614170 = header.getOrDefault("X-Amz-Credential")
  valid_614170 = validateParameter(valid_614170, JString, required = false,
                                 default = nil)
  if valid_614170 != nil:
    section.add "X-Amz-Credential", valid_614170
  var valid_614171 = header.getOrDefault("X-Amz-Security-Token")
  valid_614171 = validateParameter(valid_614171, JString, required = false,
                                 default = nil)
  if valid_614171 != nil:
    section.add "X-Amz-Security-Token", valid_614171
  var valid_614172 = header.getOrDefault("X-Amz-Algorithm")
  valid_614172 = validateParameter(valid_614172, JString, required = false,
                                 default = nil)
  if valid_614172 != nil:
    section.add "X-Amz-Algorithm", valid_614172
  var valid_614173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614173 = validateParameter(valid_614173, JString, required = false,
                                 default = nil)
  if valid_614173 != nil:
    section.add "X-Amz-SignedHeaders", valid_614173
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614174: Call_GetGetIdentityDkimAttributes_614161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_614174.validator(path, query, header, formData, body)
  let scheme = call_614174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614174.url(scheme.get, call_614174.host, call_614174.base,
                         call_614174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614174, url, valid)

proc call*(call_614175: Call_GetGetIdentityDkimAttributes_614161;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614176 = newJObject()
  if Identities != nil:
    query_614176.add "Identities", Identities
  add(query_614176, "Action", newJString(Action))
  add(query_614176, "Version", newJString(Version))
  result = call_614175.call(nil, query_614176, nil, nil, nil)

var getGetIdentityDkimAttributes* = Call_GetGetIdentityDkimAttributes_614161(
    name: "getGetIdentityDkimAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_GetGetIdentityDkimAttributes_614162, base: "/",
    url: url_GetGetIdentityDkimAttributes_614163,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityMailFromDomainAttributes_614210 = ref object of OpenApiRestCall_612658
proc url_PostGetIdentityMailFromDomainAttributes_614212(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityMailFromDomainAttributes_614211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614213 = query.getOrDefault("Action")
  valid_614213 = validateParameter(valid_614213, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_614213 != nil:
    section.add "Action", valid_614213
  var valid_614214 = query.getOrDefault("Version")
  valid_614214 = validateParameter(valid_614214, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614214 != nil:
    section.add "Version", valid_614214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614215 = header.getOrDefault("X-Amz-Signature")
  valid_614215 = validateParameter(valid_614215, JString, required = false,
                                 default = nil)
  if valid_614215 != nil:
    section.add "X-Amz-Signature", valid_614215
  var valid_614216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614216 = validateParameter(valid_614216, JString, required = false,
                                 default = nil)
  if valid_614216 != nil:
    section.add "X-Amz-Content-Sha256", valid_614216
  var valid_614217 = header.getOrDefault("X-Amz-Date")
  valid_614217 = validateParameter(valid_614217, JString, required = false,
                                 default = nil)
  if valid_614217 != nil:
    section.add "X-Amz-Date", valid_614217
  var valid_614218 = header.getOrDefault("X-Amz-Credential")
  valid_614218 = validateParameter(valid_614218, JString, required = false,
                                 default = nil)
  if valid_614218 != nil:
    section.add "X-Amz-Credential", valid_614218
  var valid_614219 = header.getOrDefault("X-Amz-Security-Token")
  valid_614219 = validateParameter(valid_614219, JString, required = false,
                                 default = nil)
  if valid_614219 != nil:
    section.add "X-Amz-Security-Token", valid_614219
  var valid_614220 = header.getOrDefault("X-Amz-Algorithm")
  valid_614220 = validateParameter(valid_614220, JString, required = false,
                                 default = nil)
  if valid_614220 != nil:
    section.add "X-Amz-Algorithm", valid_614220
  var valid_614221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614221 = validateParameter(valid_614221, JString, required = false,
                                 default = nil)
  if valid_614221 != nil:
    section.add "X-Amz-SignedHeaders", valid_614221
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_614222 = formData.getOrDefault("Identities")
  valid_614222 = validateParameter(valid_614222, JArray, required = true, default = nil)
  if valid_614222 != nil:
    section.add "Identities", valid_614222
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614223: Call_PostGetIdentityMailFromDomainAttributes_614210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_614223.validator(path, query, header, formData, body)
  let scheme = call_614223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614223.url(scheme.get, call_614223.host, call_614223.base,
                         call_614223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614223, url, valid)

proc call*(call_614224: Call_PostGetIdentityMailFromDomainAttributes_614210;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614225 = newJObject()
  var formData_614226 = newJObject()
  if Identities != nil:
    formData_614226.add "Identities", Identities
  add(query_614225, "Action", newJString(Action))
  add(query_614225, "Version", newJString(Version))
  result = call_614224.call(nil, query_614225, nil, formData_614226, nil)

var postGetIdentityMailFromDomainAttributes* = Call_PostGetIdentityMailFromDomainAttributes_614210(
    name: "postGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_PostGetIdentityMailFromDomainAttributes_614211, base: "/",
    url: url_PostGetIdentityMailFromDomainAttributes_614212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityMailFromDomainAttributes_614194 = ref object of OpenApiRestCall_612658
proc url_GetGetIdentityMailFromDomainAttributes_614196(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityMailFromDomainAttributes_614195(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_614197 = query.getOrDefault("Identities")
  valid_614197 = validateParameter(valid_614197, JArray, required = true, default = nil)
  if valid_614197 != nil:
    section.add "Identities", valid_614197
  var valid_614198 = query.getOrDefault("Action")
  valid_614198 = validateParameter(valid_614198, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_614198 != nil:
    section.add "Action", valid_614198
  var valid_614199 = query.getOrDefault("Version")
  valid_614199 = validateParameter(valid_614199, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614199 != nil:
    section.add "Version", valid_614199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614200 = header.getOrDefault("X-Amz-Signature")
  valid_614200 = validateParameter(valid_614200, JString, required = false,
                                 default = nil)
  if valid_614200 != nil:
    section.add "X-Amz-Signature", valid_614200
  var valid_614201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614201 = validateParameter(valid_614201, JString, required = false,
                                 default = nil)
  if valid_614201 != nil:
    section.add "X-Amz-Content-Sha256", valid_614201
  var valid_614202 = header.getOrDefault("X-Amz-Date")
  valid_614202 = validateParameter(valid_614202, JString, required = false,
                                 default = nil)
  if valid_614202 != nil:
    section.add "X-Amz-Date", valid_614202
  var valid_614203 = header.getOrDefault("X-Amz-Credential")
  valid_614203 = validateParameter(valid_614203, JString, required = false,
                                 default = nil)
  if valid_614203 != nil:
    section.add "X-Amz-Credential", valid_614203
  var valid_614204 = header.getOrDefault("X-Amz-Security-Token")
  valid_614204 = validateParameter(valid_614204, JString, required = false,
                                 default = nil)
  if valid_614204 != nil:
    section.add "X-Amz-Security-Token", valid_614204
  var valid_614205 = header.getOrDefault("X-Amz-Algorithm")
  valid_614205 = validateParameter(valid_614205, JString, required = false,
                                 default = nil)
  if valid_614205 != nil:
    section.add "X-Amz-Algorithm", valid_614205
  var valid_614206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614206 = validateParameter(valid_614206, JString, required = false,
                                 default = nil)
  if valid_614206 != nil:
    section.add "X-Amz-SignedHeaders", valid_614206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614207: Call_GetGetIdentityMailFromDomainAttributes_614194;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_614207.validator(path, query, header, formData, body)
  let scheme = call_614207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614207.url(scheme.get, call_614207.host, call_614207.base,
                         call_614207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614207, url, valid)

proc call*(call_614208: Call_GetGetIdentityMailFromDomainAttributes_614194;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614209 = newJObject()
  if Identities != nil:
    query_614209.add "Identities", Identities
  add(query_614209, "Action", newJString(Action))
  add(query_614209, "Version", newJString(Version))
  result = call_614208.call(nil, query_614209, nil, nil, nil)

var getGetIdentityMailFromDomainAttributes* = Call_GetGetIdentityMailFromDomainAttributes_614194(
    name: "getGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_GetGetIdentityMailFromDomainAttributes_614195, base: "/",
    url: url_GetGetIdentityMailFromDomainAttributes_614196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityNotificationAttributes_614243 = ref object of OpenApiRestCall_612658
proc url_PostGetIdentityNotificationAttributes_614245(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityNotificationAttributes_614244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614246 = query.getOrDefault("Action")
  valid_614246 = validateParameter(valid_614246, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_614246 != nil:
    section.add "Action", valid_614246
  var valid_614247 = query.getOrDefault("Version")
  valid_614247 = validateParameter(valid_614247, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614247 != nil:
    section.add "Version", valid_614247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614248 = header.getOrDefault("X-Amz-Signature")
  valid_614248 = validateParameter(valid_614248, JString, required = false,
                                 default = nil)
  if valid_614248 != nil:
    section.add "X-Amz-Signature", valid_614248
  var valid_614249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614249 = validateParameter(valid_614249, JString, required = false,
                                 default = nil)
  if valid_614249 != nil:
    section.add "X-Amz-Content-Sha256", valid_614249
  var valid_614250 = header.getOrDefault("X-Amz-Date")
  valid_614250 = validateParameter(valid_614250, JString, required = false,
                                 default = nil)
  if valid_614250 != nil:
    section.add "X-Amz-Date", valid_614250
  var valid_614251 = header.getOrDefault("X-Amz-Credential")
  valid_614251 = validateParameter(valid_614251, JString, required = false,
                                 default = nil)
  if valid_614251 != nil:
    section.add "X-Amz-Credential", valid_614251
  var valid_614252 = header.getOrDefault("X-Amz-Security-Token")
  valid_614252 = validateParameter(valid_614252, JString, required = false,
                                 default = nil)
  if valid_614252 != nil:
    section.add "X-Amz-Security-Token", valid_614252
  var valid_614253 = header.getOrDefault("X-Amz-Algorithm")
  valid_614253 = validateParameter(valid_614253, JString, required = false,
                                 default = nil)
  if valid_614253 != nil:
    section.add "X-Amz-Algorithm", valid_614253
  var valid_614254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614254 = validateParameter(valid_614254, JString, required = false,
                                 default = nil)
  if valid_614254 != nil:
    section.add "X-Amz-SignedHeaders", valid_614254
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_614255 = formData.getOrDefault("Identities")
  valid_614255 = validateParameter(valid_614255, JArray, required = true, default = nil)
  if valid_614255 != nil:
    section.add "Identities", valid_614255
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614256: Call_PostGetIdentityNotificationAttributes_614243;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_614256.validator(path, query, header, formData, body)
  let scheme = call_614256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614256.url(scheme.get, call_614256.host, call_614256.base,
                         call_614256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614256, url, valid)

proc call*(call_614257: Call_PostGetIdentityNotificationAttributes_614243;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614258 = newJObject()
  var formData_614259 = newJObject()
  if Identities != nil:
    formData_614259.add "Identities", Identities
  add(query_614258, "Action", newJString(Action))
  add(query_614258, "Version", newJString(Version))
  result = call_614257.call(nil, query_614258, nil, formData_614259, nil)

var postGetIdentityNotificationAttributes* = Call_PostGetIdentityNotificationAttributes_614243(
    name: "postGetIdentityNotificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_PostGetIdentityNotificationAttributes_614244, base: "/",
    url: url_PostGetIdentityNotificationAttributes_614245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityNotificationAttributes_614227 = ref object of OpenApiRestCall_612658
proc url_GetGetIdentityNotificationAttributes_614229(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityNotificationAttributes_614228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_614230 = query.getOrDefault("Identities")
  valid_614230 = validateParameter(valid_614230, JArray, required = true, default = nil)
  if valid_614230 != nil:
    section.add "Identities", valid_614230
  var valid_614231 = query.getOrDefault("Action")
  valid_614231 = validateParameter(valid_614231, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_614231 != nil:
    section.add "Action", valid_614231
  var valid_614232 = query.getOrDefault("Version")
  valid_614232 = validateParameter(valid_614232, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614232 != nil:
    section.add "Version", valid_614232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614233 = header.getOrDefault("X-Amz-Signature")
  valid_614233 = validateParameter(valid_614233, JString, required = false,
                                 default = nil)
  if valid_614233 != nil:
    section.add "X-Amz-Signature", valid_614233
  var valid_614234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614234 = validateParameter(valid_614234, JString, required = false,
                                 default = nil)
  if valid_614234 != nil:
    section.add "X-Amz-Content-Sha256", valid_614234
  var valid_614235 = header.getOrDefault("X-Amz-Date")
  valid_614235 = validateParameter(valid_614235, JString, required = false,
                                 default = nil)
  if valid_614235 != nil:
    section.add "X-Amz-Date", valid_614235
  var valid_614236 = header.getOrDefault("X-Amz-Credential")
  valid_614236 = validateParameter(valid_614236, JString, required = false,
                                 default = nil)
  if valid_614236 != nil:
    section.add "X-Amz-Credential", valid_614236
  var valid_614237 = header.getOrDefault("X-Amz-Security-Token")
  valid_614237 = validateParameter(valid_614237, JString, required = false,
                                 default = nil)
  if valid_614237 != nil:
    section.add "X-Amz-Security-Token", valid_614237
  var valid_614238 = header.getOrDefault("X-Amz-Algorithm")
  valid_614238 = validateParameter(valid_614238, JString, required = false,
                                 default = nil)
  if valid_614238 != nil:
    section.add "X-Amz-Algorithm", valid_614238
  var valid_614239 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614239 = validateParameter(valid_614239, JString, required = false,
                                 default = nil)
  if valid_614239 != nil:
    section.add "X-Amz-SignedHeaders", valid_614239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614240: Call_GetGetIdentityNotificationAttributes_614227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_614240.validator(path, query, header, formData, body)
  let scheme = call_614240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614240.url(scheme.get, call_614240.host, call_614240.base,
                         call_614240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614240, url, valid)

proc call*(call_614241: Call_GetGetIdentityNotificationAttributes_614227;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614242 = newJObject()
  if Identities != nil:
    query_614242.add "Identities", Identities
  add(query_614242, "Action", newJString(Action))
  add(query_614242, "Version", newJString(Version))
  result = call_614241.call(nil, query_614242, nil, nil, nil)

var getGetIdentityNotificationAttributes* = Call_GetGetIdentityNotificationAttributes_614227(
    name: "getGetIdentityNotificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_GetGetIdentityNotificationAttributes_614228, base: "/",
    url: url_GetGetIdentityNotificationAttributes_614229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityPolicies_614277 = ref object of OpenApiRestCall_612658
proc url_PostGetIdentityPolicies_614279(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityPolicies_614278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614280 = query.getOrDefault("Action")
  valid_614280 = validateParameter(valid_614280, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_614280 != nil:
    section.add "Action", valid_614280
  var valid_614281 = query.getOrDefault("Version")
  valid_614281 = validateParameter(valid_614281, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614281 != nil:
    section.add "Version", valid_614281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614282 = header.getOrDefault("X-Amz-Signature")
  valid_614282 = validateParameter(valid_614282, JString, required = false,
                                 default = nil)
  if valid_614282 != nil:
    section.add "X-Amz-Signature", valid_614282
  var valid_614283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614283 = validateParameter(valid_614283, JString, required = false,
                                 default = nil)
  if valid_614283 != nil:
    section.add "X-Amz-Content-Sha256", valid_614283
  var valid_614284 = header.getOrDefault("X-Amz-Date")
  valid_614284 = validateParameter(valid_614284, JString, required = false,
                                 default = nil)
  if valid_614284 != nil:
    section.add "X-Amz-Date", valid_614284
  var valid_614285 = header.getOrDefault("X-Amz-Credential")
  valid_614285 = validateParameter(valid_614285, JString, required = false,
                                 default = nil)
  if valid_614285 != nil:
    section.add "X-Amz-Credential", valid_614285
  var valid_614286 = header.getOrDefault("X-Amz-Security-Token")
  valid_614286 = validateParameter(valid_614286, JString, required = false,
                                 default = nil)
  if valid_614286 != nil:
    section.add "X-Amz-Security-Token", valid_614286
  var valid_614287 = header.getOrDefault("X-Amz-Algorithm")
  valid_614287 = validateParameter(valid_614287, JString, required = false,
                                 default = nil)
  if valid_614287 != nil:
    section.add "X-Amz-Algorithm", valid_614287
  var valid_614288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614288 = validateParameter(valid_614288, JString, required = false,
                                 default = nil)
  if valid_614288 != nil:
    section.add "X-Amz-SignedHeaders", valid_614288
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_614289 = formData.getOrDefault("Identity")
  valid_614289 = validateParameter(valid_614289, JString, required = true,
                                 default = nil)
  if valid_614289 != nil:
    section.add "Identity", valid_614289
  var valid_614290 = formData.getOrDefault("PolicyNames")
  valid_614290 = validateParameter(valid_614290, JArray, required = true, default = nil)
  if valid_614290 != nil:
    section.add "PolicyNames", valid_614290
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614291: Call_PostGetIdentityPolicies_614277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614291.validator(path, query, header, formData, body)
  let scheme = call_614291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614291.url(scheme.get, call_614291.host, call_614291.base,
                         call_614291.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614291, url, valid)

proc call*(call_614292: Call_PostGetIdentityPolicies_614277; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614293 = newJObject()
  var formData_614294 = newJObject()
  add(formData_614294, "Identity", newJString(Identity))
  if PolicyNames != nil:
    formData_614294.add "PolicyNames", PolicyNames
  add(query_614293, "Action", newJString(Action))
  add(query_614293, "Version", newJString(Version))
  result = call_614292.call(nil, query_614293, nil, formData_614294, nil)

var postGetIdentityPolicies* = Call_PostGetIdentityPolicies_614277(
    name: "postGetIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_PostGetIdentityPolicies_614278, base: "/",
    url: url_PostGetIdentityPolicies_614279, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityPolicies_614260 = ref object of OpenApiRestCall_612658
proc url_GetGetIdentityPolicies_614262(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityPolicies_614261(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_614263 = query.getOrDefault("Identity")
  valid_614263 = validateParameter(valid_614263, JString, required = true,
                                 default = nil)
  if valid_614263 != nil:
    section.add "Identity", valid_614263
  var valid_614264 = query.getOrDefault("Action")
  valid_614264 = validateParameter(valid_614264, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_614264 != nil:
    section.add "Action", valid_614264
  var valid_614265 = query.getOrDefault("Version")
  valid_614265 = validateParameter(valid_614265, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614265 != nil:
    section.add "Version", valid_614265
  var valid_614266 = query.getOrDefault("PolicyNames")
  valid_614266 = validateParameter(valid_614266, JArray, required = true, default = nil)
  if valid_614266 != nil:
    section.add "PolicyNames", valid_614266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614267 = header.getOrDefault("X-Amz-Signature")
  valid_614267 = validateParameter(valid_614267, JString, required = false,
                                 default = nil)
  if valid_614267 != nil:
    section.add "X-Amz-Signature", valid_614267
  var valid_614268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614268 = validateParameter(valid_614268, JString, required = false,
                                 default = nil)
  if valid_614268 != nil:
    section.add "X-Amz-Content-Sha256", valid_614268
  var valid_614269 = header.getOrDefault("X-Amz-Date")
  valid_614269 = validateParameter(valid_614269, JString, required = false,
                                 default = nil)
  if valid_614269 != nil:
    section.add "X-Amz-Date", valid_614269
  var valid_614270 = header.getOrDefault("X-Amz-Credential")
  valid_614270 = validateParameter(valid_614270, JString, required = false,
                                 default = nil)
  if valid_614270 != nil:
    section.add "X-Amz-Credential", valid_614270
  var valid_614271 = header.getOrDefault("X-Amz-Security-Token")
  valid_614271 = validateParameter(valid_614271, JString, required = false,
                                 default = nil)
  if valid_614271 != nil:
    section.add "X-Amz-Security-Token", valid_614271
  var valid_614272 = header.getOrDefault("X-Amz-Algorithm")
  valid_614272 = validateParameter(valid_614272, JString, required = false,
                                 default = nil)
  if valid_614272 != nil:
    section.add "X-Amz-Algorithm", valid_614272
  var valid_614273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614273 = validateParameter(valid_614273, JString, required = false,
                                 default = nil)
  if valid_614273 != nil:
    section.add "X-Amz-SignedHeaders", valid_614273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614274: Call_GetGetIdentityPolicies_614260; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614274.validator(path, query, header, formData, body)
  let scheme = call_614274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614274.url(scheme.get, call_614274.host, call_614274.base,
                         call_614274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614274, url, valid)

proc call*(call_614275: Call_GetGetIdentityPolicies_614260; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  var query_614276 = newJObject()
  add(query_614276, "Identity", newJString(Identity))
  add(query_614276, "Action", newJString(Action))
  add(query_614276, "Version", newJString(Version))
  if PolicyNames != nil:
    query_614276.add "PolicyNames", PolicyNames
  result = call_614275.call(nil, query_614276, nil, nil, nil)

var getGetIdentityPolicies* = Call_GetGetIdentityPolicies_614260(
    name: "getGetIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_GetGetIdentityPolicies_614261, base: "/",
    url: url_GetGetIdentityPolicies_614262, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityVerificationAttributes_614311 = ref object of OpenApiRestCall_612658
proc url_PostGetIdentityVerificationAttributes_614313(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityVerificationAttributes_614312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614314 = query.getOrDefault("Action")
  valid_614314 = validateParameter(valid_614314, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_614314 != nil:
    section.add "Action", valid_614314
  var valid_614315 = query.getOrDefault("Version")
  valid_614315 = validateParameter(valid_614315, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614315 != nil:
    section.add "Version", valid_614315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614316 = header.getOrDefault("X-Amz-Signature")
  valid_614316 = validateParameter(valid_614316, JString, required = false,
                                 default = nil)
  if valid_614316 != nil:
    section.add "X-Amz-Signature", valid_614316
  var valid_614317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614317 = validateParameter(valid_614317, JString, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "X-Amz-Content-Sha256", valid_614317
  var valid_614318 = header.getOrDefault("X-Amz-Date")
  valid_614318 = validateParameter(valid_614318, JString, required = false,
                                 default = nil)
  if valid_614318 != nil:
    section.add "X-Amz-Date", valid_614318
  var valid_614319 = header.getOrDefault("X-Amz-Credential")
  valid_614319 = validateParameter(valid_614319, JString, required = false,
                                 default = nil)
  if valid_614319 != nil:
    section.add "X-Amz-Credential", valid_614319
  var valid_614320 = header.getOrDefault("X-Amz-Security-Token")
  valid_614320 = validateParameter(valid_614320, JString, required = false,
                                 default = nil)
  if valid_614320 != nil:
    section.add "X-Amz-Security-Token", valid_614320
  var valid_614321 = header.getOrDefault("X-Amz-Algorithm")
  valid_614321 = validateParameter(valid_614321, JString, required = false,
                                 default = nil)
  if valid_614321 != nil:
    section.add "X-Amz-Algorithm", valid_614321
  var valid_614322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614322 = validateParameter(valid_614322, JString, required = false,
                                 default = nil)
  if valid_614322 != nil:
    section.add "X-Amz-SignedHeaders", valid_614322
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_614323 = formData.getOrDefault("Identities")
  valid_614323 = validateParameter(valid_614323, JArray, required = true, default = nil)
  if valid_614323 != nil:
    section.add "Identities", valid_614323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614324: Call_PostGetIdentityVerificationAttributes_614311;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_614324.validator(path, query, header, formData, body)
  let scheme = call_614324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614324.url(scheme.get, call_614324.host, call_614324.base,
                         call_614324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614324, url, valid)

proc call*(call_614325: Call_PostGetIdentityVerificationAttributes_614311;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614326 = newJObject()
  var formData_614327 = newJObject()
  if Identities != nil:
    formData_614327.add "Identities", Identities
  add(query_614326, "Action", newJString(Action))
  add(query_614326, "Version", newJString(Version))
  result = call_614325.call(nil, query_614326, nil, formData_614327, nil)

var postGetIdentityVerificationAttributes* = Call_PostGetIdentityVerificationAttributes_614311(
    name: "postGetIdentityVerificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_PostGetIdentityVerificationAttributes_614312, base: "/",
    url: url_PostGetIdentityVerificationAttributes_614313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityVerificationAttributes_614295 = ref object of OpenApiRestCall_612658
proc url_GetGetIdentityVerificationAttributes_614297(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityVerificationAttributes_614296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_614298 = query.getOrDefault("Identities")
  valid_614298 = validateParameter(valid_614298, JArray, required = true, default = nil)
  if valid_614298 != nil:
    section.add "Identities", valid_614298
  var valid_614299 = query.getOrDefault("Action")
  valid_614299 = validateParameter(valid_614299, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_614299 != nil:
    section.add "Action", valid_614299
  var valid_614300 = query.getOrDefault("Version")
  valid_614300 = validateParameter(valid_614300, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614300 != nil:
    section.add "Version", valid_614300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614301 = header.getOrDefault("X-Amz-Signature")
  valid_614301 = validateParameter(valid_614301, JString, required = false,
                                 default = nil)
  if valid_614301 != nil:
    section.add "X-Amz-Signature", valid_614301
  var valid_614302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614302 = validateParameter(valid_614302, JString, required = false,
                                 default = nil)
  if valid_614302 != nil:
    section.add "X-Amz-Content-Sha256", valid_614302
  var valid_614303 = header.getOrDefault("X-Amz-Date")
  valid_614303 = validateParameter(valid_614303, JString, required = false,
                                 default = nil)
  if valid_614303 != nil:
    section.add "X-Amz-Date", valid_614303
  var valid_614304 = header.getOrDefault("X-Amz-Credential")
  valid_614304 = validateParameter(valid_614304, JString, required = false,
                                 default = nil)
  if valid_614304 != nil:
    section.add "X-Amz-Credential", valid_614304
  var valid_614305 = header.getOrDefault("X-Amz-Security-Token")
  valid_614305 = validateParameter(valid_614305, JString, required = false,
                                 default = nil)
  if valid_614305 != nil:
    section.add "X-Amz-Security-Token", valid_614305
  var valid_614306 = header.getOrDefault("X-Amz-Algorithm")
  valid_614306 = validateParameter(valid_614306, JString, required = false,
                                 default = nil)
  if valid_614306 != nil:
    section.add "X-Amz-Algorithm", valid_614306
  var valid_614307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614307 = validateParameter(valid_614307, JString, required = false,
                                 default = nil)
  if valid_614307 != nil:
    section.add "X-Amz-SignedHeaders", valid_614307
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614308: Call_GetGetIdentityVerificationAttributes_614295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_614308.validator(path, query, header, formData, body)
  let scheme = call_614308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614308.url(scheme.get, call_614308.host, call_614308.base,
                         call_614308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614308, url, valid)

proc call*(call_614309: Call_GetGetIdentityVerificationAttributes_614295;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614310 = newJObject()
  if Identities != nil:
    query_614310.add "Identities", Identities
  add(query_614310, "Action", newJString(Action))
  add(query_614310, "Version", newJString(Version))
  result = call_614309.call(nil, query_614310, nil, nil, nil)

var getGetIdentityVerificationAttributes* = Call_GetGetIdentityVerificationAttributes_614295(
    name: "getGetIdentityVerificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_GetGetIdentityVerificationAttributes_614296, base: "/",
    url: url_GetGetIdentityVerificationAttributes_614297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendQuota_614343 = ref object of OpenApiRestCall_612658
proc url_PostGetSendQuota_614345(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSendQuota_614344(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614346 = query.getOrDefault("Action")
  valid_614346 = validateParameter(valid_614346, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_614346 != nil:
    section.add "Action", valid_614346
  var valid_614347 = query.getOrDefault("Version")
  valid_614347 = validateParameter(valid_614347, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614347 != nil:
    section.add "Version", valid_614347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614348 = header.getOrDefault("X-Amz-Signature")
  valid_614348 = validateParameter(valid_614348, JString, required = false,
                                 default = nil)
  if valid_614348 != nil:
    section.add "X-Amz-Signature", valid_614348
  var valid_614349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614349 = validateParameter(valid_614349, JString, required = false,
                                 default = nil)
  if valid_614349 != nil:
    section.add "X-Amz-Content-Sha256", valid_614349
  var valid_614350 = header.getOrDefault("X-Amz-Date")
  valid_614350 = validateParameter(valid_614350, JString, required = false,
                                 default = nil)
  if valid_614350 != nil:
    section.add "X-Amz-Date", valid_614350
  var valid_614351 = header.getOrDefault("X-Amz-Credential")
  valid_614351 = validateParameter(valid_614351, JString, required = false,
                                 default = nil)
  if valid_614351 != nil:
    section.add "X-Amz-Credential", valid_614351
  var valid_614352 = header.getOrDefault("X-Amz-Security-Token")
  valid_614352 = validateParameter(valid_614352, JString, required = false,
                                 default = nil)
  if valid_614352 != nil:
    section.add "X-Amz-Security-Token", valid_614352
  var valid_614353 = header.getOrDefault("X-Amz-Algorithm")
  valid_614353 = validateParameter(valid_614353, JString, required = false,
                                 default = nil)
  if valid_614353 != nil:
    section.add "X-Amz-Algorithm", valid_614353
  var valid_614354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614354 = validateParameter(valid_614354, JString, required = false,
                                 default = nil)
  if valid_614354 != nil:
    section.add "X-Amz-SignedHeaders", valid_614354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614355: Call_PostGetSendQuota_614343; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614355.validator(path, query, header, formData, body)
  let scheme = call_614355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614355.url(scheme.get, call_614355.host, call_614355.base,
                         call_614355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614355, url, valid)

proc call*(call_614356: Call_PostGetSendQuota_614343;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614357 = newJObject()
  add(query_614357, "Action", newJString(Action))
  add(query_614357, "Version", newJString(Version))
  result = call_614356.call(nil, query_614357, nil, nil, nil)

var postGetSendQuota* = Call_PostGetSendQuota_614343(name: "postGetSendQuota",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_PostGetSendQuota_614344,
    base: "/", url: url_PostGetSendQuota_614345,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendQuota_614328 = ref object of OpenApiRestCall_612658
proc url_GetGetSendQuota_614330(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSendQuota_614329(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614331 = query.getOrDefault("Action")
  valid_614331 = validateParameter(valid_614331, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_614331 != nil:
    section.add "Action", valid_614331
  var valid_614332 = query.getOrDefault("Version")
  valid_614332 = validateParameter(valid_614332, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614332 != nil:
    section.add "Version", valid_614332
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614333 = header.getOrDefault("X-Amz-Signature")
  valid_614333 = validateParameter(valid_614333, JString, required = false,
                                 default = nil)
  if valid_614333 != nil:
    section.add "X-Amz-Signature", valid_614333
  var valid_614334 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614334 = validateParameter(valid_614334, JString, required = false,
                                 default = nil)
  if valid_614334 != nil:
    section.add "X-Amz-Content-Sha256", valid_614334
  var valid_614335 = header.getOrDefault("X-Amz-Date")
  valid_614335 = validateParameter(valid_614335, JString, required = false,
                                 default = nil)
  if valid_614335 != nil:
    section.add "X-Amz-Date", valid_614335
  var valid_614336 = header.getOrDefault("X-Amz-Credential")
  valid_614336 = validateParameter(valid_614336, JString, required = false,
                                 default = nil)
  if valid_614336 != nil:
    section.add "X-Amz-Credential", valid_614336
  var valid_614337 = header.getOrDefault("X-Amz-Security-Token")
  valid_614337 = validateParameter(valid_614337, JString, required = false,
                                 default = nil)
  if valid_614337 != nil:
    section.add "X-Amz-Security-Token", valid_614337
  var valid_614338 = header.getOrDefault("X-Amz-Algorithm")
  valid_614338 = validateParameter(valid_614338, JString, required = false,
                                 default = nil)
  if valid_614338 != nil:
    section.add "X-Amz-Algorithm", valid_614338
  var valid_614339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614339 = validateParameter(valid_614339, JString, required = false,
                                 default = nil)
  if valid_614339 != nil:
    section.add "X-Amz-SignedHeaders", valid_614339
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614340: Call_GetGetSendQuota_614328; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614340.validator(path, query, header, formData, body)
  let scheme = call_614340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614340.url(scheme.get, call_614340.host, call_614340.base,
                         call_614340.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614340, url, valid)

proc call*(call_614341: Call_GetGetSendQuota_614328;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614342 = newJObject()
  add(query_614342, "Action", newJString(Action))
  add(query_614342, "Version", newJString(Version))
  result = call_614341.call(nil, query_614342, nil, nil, nil)

var getGetSendQuota* = Call_GetGetSendQuota_614328(name: "getGetSendQuota",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_GetGetSendQuota_614329,
    base: "/", url: url_GetGetSendQuota_614330, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendStatistics_614373 = ref object of OpenApiRestCall_612658
proc url_PostGetSendStatistics_614375(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSendStatistics_614374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614376 = query.getOrDefault("Action")
  valid_614376 = validateParameter(valid_614376, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_614376 != nil:
    section.add "Action", valid_614376
  var valid_614377 = query.getOrDefault("Version")
  valid_614377 = validateParameter(valid_614377, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614377 != nil:
    section.add "Version", valid_614377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614378 = header.getOrDefault("X-Amz-Signature")
  valid_614378 = validateParameter(valid_614378, JString, required = false,
                                 default = nil)
  if valid_614378 != nil:
    section.add "X-Amz-Signature", valid_614378
  var valid_614379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614379 = validateParameter(valid_614379, JString, required = false,
                                 default = nil)
  if valid_614379 != nil:
    section.add "X-Amz-Content-Sha256", valid_614379
  var valid_614380 = header.getOrDefault("X-Amz-Date")
  valid_614380 = validateParameter(valid_614380, JString, required = false,
                                 default = nil)
  if valid_614380 != nil:
    section.add "X-Amz-Date", valid_614380
  var valid_614381 = header.getOrDefault("X-Amz-Credential")
  valid_614381 = validateParameter(valid_614381, JString, required = false,
                                 default = nil)
  if valid_614381 != nil:
    section.add "X-Amz-Credential", valid_614381
  var valid_614382 = header.getOrDefault("X-Amz-Security-Token")
  valid_614382 = validateParameter(valid_614382, JString, required = false,
                                 default = nil)
  if valid_614382 != nil:
    section.add "X-Amz-Security-Token", valid_614382
  var valid_614383 = header.getOrDefault("X-Amz-Algorithm")
  valid_614383 = validateParameter(valid_614383, JString, required = false,
                                 default = nil)
  if valid_614383 != nil:
    section.add "X-Amz-Algorithm", valid_614383
  var valid_614384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614384 = validateParameter(valid_614384, JString, required = false,
                                 default = nil)
  if valid_614384 != nil:
    section.add "X-Amz-SignedHeaders", valid_614384
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614385: Call_PostGetSendStatistics_614373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614385.validator(path, query, header, formData, body)
  let scheme = call_614385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614385.url(scheme.get, call_614385.host, call_614385.base,
                         call_614385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614385, url, valid)

proc call*(call_614386: Call_PostGetSendStatistics_614373;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614387 = newJObject()
  add(query_614387, "Action", newJString(Action))
  add(query_614387, "Version", newJString(Version))
  result = call_614386.call(nil, query_614387, nil, nil, nil)

var postGetSendStatistics* = Call_PostGetSendStatistics_614373(
    name: "postGetSendStatistics", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_PostGetSendStatistics_614374, base: "/",
    url: url_PostGetSendStatistics_614375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendStatistics_614358 = ref object of OpenApiRestCall_612658
proc url_GetGetSendStatistics_614360(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSendStatistics_614359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614361 = query.getOrDefault("Action")
  valid_614361 = validateParameter(valid_614361, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_614361 != nil:
    section.add "Action", valid_614361
  var valid_614362 = query.getOrDefault("Version")
  valid_614362 = validateParameter(valid_614362, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614362 != nil:
    section.add "Version", valid_614362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614363 = header.getOrDefault("X-Amz-Signature")
  valid_614363 = validateParameter(valid_614363, JString, required = false,
                                 default = nil)
  if valid_614363 != nil:
    section.add "X-Amz-Signature", valid_614363
  var valid_614364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614364 = validateParameter(valid_614364, JString, required = false,
                                 default = nil)
  if valid_614364 != nil:
    section.add "X-Amz-Content-Sha256", valid_614364
  var valid_614365 = header.getOrDefault("X-Amz-Date")
  valid_614365 = validateParameter(valid_614365, JString, required = false,
                                 default = nil)
  if valid_614365 != nil:
    section.add "X-Amz-Date", valid_614365
  var valid_614366 = header.getOrDefault("X-Amz-Credential")
  valid_614366 = validateParameter(valid_614366, JString, required = false,
                                 default = nil)
  if valid_614366 != nil:
    section.add "X-Amz-Credential", valid_614366
  var valid_614367 = header.getOrDefault("X-Amz-Security-Token")
  valid_614367 = validateParameter(valid_614367, JString, required = false,
                                 default = nil)
  if valid_614367 != nil:
    section.add "X-Amz-Security-Token", valid_614367
  var valid_614368 = header.getOrDefault("X-Amz-Algorithm")
  valid_614368 = validateParameter(valid_614368, JString, required = false,
                                 default = nil)
  if valid_614368 != nil:
    section.add "X-Amz-Algorithm", valid_614368
  var valid_614369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614369 = validateParameter(valid_614369, JString, required = false,
                                 default = nil)
  if valid_614369 != nil:
    section.add "X-Amz-SignedHeaders", valid_614369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614370: Call_GetGetSendStatistics_614358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614370.validator(path, query, header, formData, body)
  let scheme = call_614370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614370.url(scheme.get, call_614370.host, call_614370.base,
                         call_614370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614370, url, valid)

proc call*(call_614371: Call_GetGetSendStatistics_614358;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614372 = newJObject()
  add(query_614372, "Action", newJString(Action))
  add(query_614372, "Version", newJString(Version))
  result = call_614371.call(nil, query_614372, nil, nil, nil)

var getGetSendStatistics* = Call_GetGetSendStatistics_614358(
    name: "getGetSendStatistics", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_GetGetSendStatistics_614359, base: "/",
    url: url_GetGetSendStatistics_614360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetTemplate_614404 = ref object of OpenApiRestCall_612658
proc url_PostGetTemplate_614406(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetTemplate_614405(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614407 = query.getOrDefault("Action")
  valid_614407 = validateParameter(valid_614407, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_614407 != nil:
    section.add "Action", valid_614407
  var valid_614408 = query.getOrDefault("Version")
  valid_614408 = validateParameter(valid_614408, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614408 != nil:
    section.add "Version", valid_614408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614409 = header.getOrDefault("X-Amz-Signature")
  valid_614409 = validateParameter(valid_614409, JString, required = false,
                                 default = nil)
  if valid_614409 != nil:
    section.add "X-Amz-Signature", valid_614409
  var valid_614410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614410 = validateParameter(valid_614410, JString, required = false,
                                 default = nil)
  if valid_614410 != nil:
    section.add "X-Amz-Content-Sha256", valid_614410
  var valid_614411 = header.getOrDefault("X-Amz-Date")
  valid_614411 = validateParameter(valid_614411, JString, required = false,
                                 default = nil)
  if valid_614411 != nil:
    section.add "X-Amz-Date", valid_614411
  var valid_614412 = header.getOrDefault("X-Amz-Credential")
  valid_614412 = validateParameter(valid_614412, JString, required = false,
                                 default = nil)
  if valid_614412 != nil:
    section.add "X-Amz-Credential", valid_614412
  var valid_614413 = header.getOrDefault("X-Amz-Security-Token")
  valid_614413 = validateParameter(valid_614413, JString, required = false,
                                 default = nil)
  if valid_614413 != nil:
    section.add "X-Amz-Security-Token", valid_614413
  var valid_614414 = header.getOrDefault("X-Amz-Algorithm")
  valid_614414 = validateParameter(valid_614414, JString, required = false,
                                 default = nil)
  if valid_614414 != nil:
    section.add "X-Amz-Algorithm", valid_614414
  var valid_614415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614415 = validateParameter(valid_614415, JString, required = false,
                                 default = nil)
  if valid_614415 != nil:
    section.add "X-Amz-SignedHeaders", valid_614415
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_614416 = formData.getOrDefault("TemplateName")
  valid_614416 = validateParameter(valid_614416, JString, required = true,
                                 default = nil)
  if valid_614416 != nil:
    section.add "TemplateName", valid_614416
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614417: Call_PostGetTemplate_614404; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614417.validator(path, query, header, formData, body)
  let scheme = call_614417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614417.url(scheme.get, call_614417.host, call_614417.base,
                         call_614417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614417, url, valid)

proc call*(call_614418: Call_PostGetTemplate_614404; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614419 = newJObject()
  var formData_614420 = newJObject()
  add(formData_614420, "TemplateName", newJString(TemplateName))
  add(query_614419, "Action", newJString(Action))
  add(query_614419, "Version", newJString(Version))
  result = call_614418.call(nil, query_614419, nil, formData_614420, nil)

var postGetTemplate* = Call_PostGetTemplate_614404(name: "postGetTemplate",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_PostGetTemplate_614405,
    base: "/", url: url_PostGetTemplate_614406, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetTemplate_614388 = ref object of OpenApiRestCall_612658
proc url_GetGetTemplate_614390(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetTemplate_614389(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  var valid_614391 = query.getOrDefault("Action")
  valid_614391 = validateParameter(valid_614391, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_614391 != nil:
    section.add "Action", valid_614391
  var valid_614392 = query.getOrDefault("Version")
  valid_614392 = validateParameter(valid_614392, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614392 != nil:
    section.add "Version", valid_614392
  var valid_614393 = query.getOrDefault("TemplateName")
  valid_614393 = validateParameter(valid_614393, JString, required = true,
                                 default = nil)
  if valid_614393 != nil:
    section.add "TemplateName", valid_614393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614394 = header.getOrDefault("X-Amz-Signature")
  valid_614394 = validateParameter(valid_614394, JString, required = false,
                                 default = nil)
  if valid_614394 != nil:
    section.add "X-Amz-Signature", valid_614394
  var valid_614395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614395 = validateParameter(valid_614395, JString, required = false,
                                 default = nil)
  if valid_614395 != nil:
    section.add "X-Amz-Content-Sha256", valid_614395
  var valid_614396 = header.getOrDefault("X-Amz-Date")
  valid_614396 = validateParameter(valid_614396, JString, required = false,
                                 default = nil)
  if valid_614396 != nil:
    section.add "X-Amz-Date", valid_614396
  var valid_614397 = header.getOrDefault("X-Amz-Credential")
  valid_614397 = validateParameter(valid_614397, JString, required = false,
                                 default = nil)
  if valid_614397 != nil:
    section.add "X-Amz-Credential", valid_614397
  var valid_614398 = header.getOrDefault("X-Amz-Security-Token")
  valid_614398 = validateParameter(valid_614398, JString, required = false,
                                 default = nil)
  if valid_614398 != nil:
    section.add "X-Amz-Security-Token", valid_614398
  var valid_614399 = header.getOrDefault("X-Amz-Algorithm")
  valid_614399 = validateParameter(valid_614399, JString, required = false,
                                 default = nil)
  if valid_614399 != nil:
    section.add "X-Amz-Algorithm", valid_614399
  var valid_614400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614400 = validateParameter(valid_614400, JString, required = false,
                                 default = nil)
  if valid_614400 != nil:
    section.add "X-Amz-SignedHeaders", valid_614400
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614401: Call_GetGetTemplate_614388; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614401.validator(path, query, header, formData, body)
  let scheme = call_614401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614401.url(scheme.get, call_614401.host, call_614401.base,
                         call_614401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614401, url, valid)

proc call*(call_614402: Call_GetGetTemplate_614388; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  var query_614403 = newJObject()
  add(query_614403, "Action", newJString(Action))
  add(query_614403, "Version", newJString(Version))
  add(query_614403, "TemplateName", newJString(TemplateName))
  result = call_614402.call(nil, query_614403, nil, nil, nil)

var getGetTemplate* = Call_GetGetTemplate_614388(name: "getGetTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_GetGetTemplate_614389,
    base: "/", url: url_GetGetTemplate_614390, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListConfigurationSets_614438 = ref object of OpenApiRestCall_612658
proc url_PostListConfigurationSets_614440(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListConfigurationSets_614439(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614441 = query.getOrDefault("Action")
  valid_614441 = validateParameter(valid_614441, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_614441 != nil:
    section.add "Action", valid_614441
  var valid_614442 = query.getOrDefault("Version")
  valid_614442 = validateParameter(valid_614442, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614442 != nil:
    section.add "Version", valid_614442
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614443 = header.getOrDefault("X-Amz-Signature")
  valid_614443 = validateParameter(valid_614443, JString, required = false,
                                 default = nil)
  if valid_614443 != nil:
    section.add "X-Amz-Signature", valid_614443
  var valid_614444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614444 = validateParameter(valid_614444, JString, required = false,
                                 default = nil)
  if valid_614444 != nil:
    section.add "X-Amz-Content-Sha256", valid_614444
  var valid_614445 = header.getOrDefault("X-Amz-Date")
  valid_614445 = validateParameter(valid_614445, JString, required = false,
                                 default = nil)
  if valid_614445 != nil:
    section.add "X-Amz-Date", valid_614445
  var valid_614446 = header.getOrDefault("X-Amz-Credential")
  valid_614446 = validateParameter(valid_614446, JString, required = false,
                                 default = nil)
  if valid_614446 != nil:
    section.add "X-Amz-Credential", valid_614446
  var valid_614447 = header.getOrDefault("X-Amz-Security-Token")
  valid_614447 = validateParameter(valid_614447, JString, required = false,
                                 default = nil)
  if valid_614447 != nil:
    section.add "X-Amz-Security-Token", valid_614447
  var valid_614448 = header.getOrDefault("X-Amz-Algorithm")
  valid_614448 = validateParameter(valid_614448, JString, required = false,
                                 default = nil)
  if valid_614448 != nil:
    section.add "X-Amz-Algorithm", valid_614448
  var valid_614449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614449 = validateParameter(valid_614449, JString, required = false,
                                 default = nil)
  if valid_614449 != nil:
    section.add "X-Amz-SignedHeaders", valid_614449
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  section = newJObject()
  var valid_614450 = formData.getOrDefault("NextToken")
  valid_614450 = validateParameter(valid_614450, JString, required = false,
                                 default = nil)
  if valid_614450 != nil:
    section.add "NextToken", valid_614450
  var valid_614451 = formData.getOrDefault("MaxItems")
  valid_614451 = validateParameter(valid_614451, JInt, required = false, default = nil)
  if valid_614451 != nil:
    section.add "MaxItems", valid_614451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614452: Call_PostListConfigurationSets_614438; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_614452.validator(path, query, header, formData, body)
  let scheme = call_614452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614452.url(scheme.get, call_614452.host, call_614452.base,
                         call_614452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614452, url, valid)

proc call*(call_614453: Call_PostListConfigurationSets_614438;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_614454 = newJObject()
  var formData_614455 = newJObject()
  add(formData_614455, "NextToken", newJString(NextToken))
  add(query_614454, "Action", newJString(Action))
  add(formData_614455, "MaxItems", newJInt(MaxItems))
  add(query_614454, "Version", newJString(Version))
  result = call_614453.call(nil, query_614454, nil, formData_614455, nil)

var postListConfigurationSets* = Call_PostListConfigurationSets_614438(
    name: "postListConfigurationSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_PostListConfigurationSets_614439, base: "/",
    url: url_PostListConfigurationSets_614440,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListConfigurationSets_614421 = ref object of OpenApiRestCall_612658
proc url_GetListConfigurationSets_614423(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListConfigurationSets_614422(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614424 = query.getOrDefault("MaxItems")
  valid_614424 = validateParameter(valid_614424, JInt, required = false, default = nil)
  if valid_614424 != nil:
    section.add "MaxItems", valid_614424
  var valid_614425 = query.getOrDefault("NextToken")
  valid_614425 = validateParameter(valid_614425, JString, required = false,
                                 default = nil)
  if valid_614425 != nil:
    section.add "NextToken", valid_614425
  var valid_614426 = query.getOrDefault("Action")
  valid_614426 = validateParameter(valid_614426, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_614426 != nil:
    section.add "Action", valid_614426
  var valid_614427 = query.getOrDefault("Version")
  valid_614427 = validateParameter(valid_614427, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614427 != nil:
    section.add "Version", valid_614427
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614428 = header.getOrDefault("X-Amz-Signature")
  valid_614428 = validateParameter(valid_614428, JString, required = false,
                                 default = nil)
  if valid_614428 != nil:
    section.add "X-Amz-Signature", valid_614428
  var valid_614429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614429 = validateParameter(valid_614429, JString, required = false,
                                 default = nil)
  if valid_614429 != nil:
    section.add "X-Amz-Content-Sha256", valid_614429
  var valid_614430 = header.getOrDefault("X-Amz-Date")
  valid_614430 = validateParameter(valid_614430, JString, required = false,
                                 default = nil)
  if valid_614430 != nil:
    section.add "X-Amz-Date", valid_614430
  var valid_614431 = header.getOrDefault("X-Amz-Credential")
  valid_614431 = validateParameter(valid_614431, JString, required = false,
                                 default = nil)
  if valid_614431 != nil:
    section.add "X-Amz-Credential", valid_614431
  var valid_614432 = header.getOrDefault("X-Amz-Security-Token")
  valid_614432 = validateParameter(valid_614432, JString, required = false,
                                 default = nil)
  if valid_614432 != nil:
    section.add "X-Amz-Security-Token", valid_614432
  var valid_614433 = header.getOrDefault("X-Amz-Algorithm")
  valid_614433 = validateParameter(valid_614433, JString, required = false,
                                 default = nil)
  if valid_614433 != nil:
    section.add "X-Amz-Algorithm", valid_614433
  var valid_614434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614434 = validateParameter(valid_614434, JString, required = false,
                                 default = nil)
  if valid_614434 != nil:
    section.add "X-Amz-SignedHeaders", valid_614434
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614435: Call_GetListConfigurationSets_614421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_614435.validator(path, query, header, formData, body)
  let scheme = call_614435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614435.url(scheme.get, call_614435.host, call_614435.base,
                         call_614435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614435, url, valid)

proc call*(call_614436: Call_GetListConfigurationSets_614421; MaxItems: int = 0;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          Version: string = "2010-12-01"): Recallable =
  ## getListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614437 = newJObject()
  add(query_614437, "MaxItems", newJInt(MaxItems))
  add(query_614437, "NextToken", newJString(NextToken))
  add(query_614437, "Action", newJString(Action))
  add(query_614437, "Version", newJString(Version))
  result = call_614436.call(nil, query_614437, nil, nil, nil)

var getListConfigurationSets* = Call_GetListConfigurationSets_614421(
    name: "getListConfigurationSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_GetListConfigurationSets_614422, base: "/",
    url: url_GetListConfigurationSets_614423, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListCustomVerificationEmailTemplates_614473 = ref object of OpenApiRestCall_612658
proc url_PostListCustomVerificationEmailTemplates_614475(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListCustomVerificationEmailTemplates_614474(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614476 = query.getOrDefault("Action")
  valid_614476 = validateParameter(valid_614476, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_614476 != nil:
    section.add "Action", valid_614476
  var valid_614477 = query.getOrDefault("Version")
  valid_614477 = validateParameter(valid_614477, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614477 != nil:
    section.add "Version", valid_614477
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614478 = header.getOrDefault("X-Amz-Signature")
  valid_614478 = validateParameter(valid_614478, JString, required = false,
                                 default = nil)
  if valid_614478 != nil:
    section.add "X-Amz-Signature", valid_614478
  var valid_614479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614479 = validateParameter(valid_614479, JString, required = false,
                                 default = nil)
  if valid_614479 != nil:
    section.add "X-Amz-Content-Sha256", valid_614479
  var valid_614480 = header.getOrDefault("X-Amz-Date")
  valid_614480 = validateParameter(valid_614480, JString, required = false,
                                 default = nil)
  if valid_614480 != nil:
    section.add "X-Amz-Date", valid_614480
  var valid_614481 = header.getOrDefault("X-Amz-Credential")
  valid_614481 = validateParameter(valid_614481, JString, required = false,
                                 default = nil)
  if valid_614481 != nil:
    section.add "X-Amz-Credential", valid_614481
  var valid_614482 = header.getOrDefault("X-Amz-Security-Token")
  valid_614482 = validateParameter(valid_614482, JString, required = false,
                                 default = nil)
  if valid_614482 != nil:
    section.add "X-Amz-Security-Token", valid_614482
  var valid_614483 = header.getOrDefault("X-Amz-Algorithm")
  valid_614483 = validateParameter(valid_614483, JString, required = false,
                                 default = nil)
  if valid_614483 != nil:
    section.add "X-Amz-Algorithm", valid_614483
  var valid_614484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614484 = validateParameter(valid_614484, JString, required = false,
                                 default = nil)
  if valid_614484 != nil:
    section.add "X-Amz-SignedHeaders", valid_614484
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_614485 = formData.getOrDefault("NextToken")
  valid_614485 = validateParameter(valid_614485, JString, required = false,
                                 default = nil)
  if valid_614485 != nil:
    section.add "NextToken", valid_614485
  var valid_614486 = formData.getOrDefault("MaxResults")
  valid_614486 = validateParameter(valid_614486, JInt, required = false, default = nil)
  if valid_614486 != nil:
    section.add "MaxResults", valid_614486
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614487: Call_PostListCustomVerificationEmailTemplates_614473;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614487.validator(path, query, header, formData, body)
  let scheme = call_614487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614487.url(scheme.get, call_614487.host, call_614487.base,
                         call_614487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614487, url, valid)

proc call*(call_614488: Call_PostListCustomVerificationEmailTemplates_614473;
          NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"; MaxResults: int = 0): Recallable =
  ## postListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  var query_614489 = newJObject()
  var formData_614490 = newJObject()
  add(formData_614490, "NextToken", newJString(NextToken))
  add(query_614489, "Action", newJString(Action))
  add(query_614489, "Version", newJString(Version))
  add(formData_614490, "MaxResults", newJInt(MaxResults))
  result = call_614488.call(nil, query_614489, nil, formData_614490, nil)

var postListCustomVerificationEmailTemplates* = Call_PostListCustomVerificationEmailTemplates_614473(
    name: "postListCustomVerificationEmailTemplates", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_PostListCustomVerificationEmailTemplates_614474,
    base: "/", url: url_PostListCustomVerificationEmailTemplates_614475,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListCustomVerificationEmailTemplates_614456 = ref object of OpenApiRestCall_612658
proc url_GetListCustomVerificationEmailTemplates_614458(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListCustomVerificationEmailTemplates_614457(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614459 = query.getOrDefault("MaxResults")
  valid_614459 = validateParameter(valid_614459, JInt, required = false, default = nil)
  if valid_614459 != nil:
    section.add "MaxResults", valid_614459
  var valid_614460 = query.getOrDefault("NextToken")
  valid_614460 = validateParameter(valid_614460, JString, required = false,
                                 default = nil)
  if valid_614460 != nil:
    section.add "NextToken", valid_614460
  var valid_614461 = query.getOrDefault("Action")
  valid_614461 = validateParameter(valid_614461, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_614461 != nil:
    section.add "Action", valid_614461
  var valid_614462 = query.getOrDefault("Version")
  valid_614462 = validateParameter(valid_614462, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614462 != nil:
    section.add "Version", valid_614462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614463 = header.getOrDefault("X-Amz-Signature")
  valid_614463 = validateParameter(valid_614463, JString, required = false,
                                 default = nil)
  if valid_614463 != nil:
    section.add "X-Amz-Signature", valid_614463
  var valid_614464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614464 = validateParameter(valid_614464, JString, required = false,
                                 default = nil)
  if valid_614464 != nil:
    section.add "X-Amz-Content-Sha256", valid_614464
  var valid_614465 = header.getOrDefault("X-Amz-Date")
  valid_614465 = validateParameter(valid_614465, JString, required = false,
                                 default = nil)
  if valid_614465 != nil:
    section.add "X-Amz-Date", valid_614465
  var valid_614466 = header.getOrDefault("X-Amz-Credential")
  valid_614466 = validateParameter(valid_614466, JString, required = false,
                                 default = nil)
  if valid_614466 != nil:
    section.add "X-Amz-Credential", valid_614466
  var valid_614467 = header.getOrDefault("X-Amz-Security-Token")
  valid_614467 = validateParameter(valid_614467, JString, required = false,
                                 default = nil)
  if valid_614467 != nil:
    section.add "X-Amz-Security-Token", valid_614467
  var valid_614468 = header.getOrDefault("X-Amz-Algorithm")
  valid_614468 = validateParameter(valid_614468, JString, required = false,
                                 default = nil)
  if valid_614468 != nil:
    section.add "X-Amz-Algorithm", valid_614468
  var valid_614469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614469 = validateParameter(valid_614469, JString, required = false,
                                 default = nil)
  if valid_614469 != nil:
    section.add "X-Amz-SignedHeaders", valid_614469
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614470: Call_GetListCustomVerificationEmailTemplates_614456;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614470.validator(path, query, header, formData, body)
  let scheme = call_614470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614470.url(scheme.get, call_614470.host, call_614470.base,
                         call_614470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614470, url, valid)

proc call*(call_614471: Call_GetListCustomVerificationEmailTemplates_614456;
          MaxResults: int = 0; NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## getListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614472 = newJObject()
  add(query_614472, "MaxResults", newJInt(MaxResults))
  add(query_614472, "NextToken", newJString(NextToken))
  add(query_614472, "Action", newJString(Action))
  add(query_614472, "Version", newJString(Version))
  result = call_614471.call(nil, query_614472, nil, nil, nil)

var getListCustomVerificationEmailTemplates* = Call_GetListCustomVerificationEmailTemplates_614456(
    name: "getListCustomVerificationEmailTemplates", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_GetListCustomVerificationEmailTemplates_614457, base: "/",
    url: url_GetListCustomVerificationEmailTemplates_614458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentities_614509 = ref object of OpenApiRestCall_612658
proc url_PostListIdentities_614511(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListIdentities_614510(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614512 = query.getOrDefault("Action")
  valid_614512 = validateParameter(valid_614512, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_614512 != nil:
    section.add "Action", valid_614512
  var valid_614513 = query.getOrDefault("Version")
  valid_614513 = validateParameter(valid_614513, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614513 != nil:
    section.add "Version", valid_614513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614514 = header.getOrDefault("X-Amz-Signature")
  valid_614514 = validateParameter(valid_614514, JString, required = false,
                                 default = nil)
  if valid_614514 != nil:
    section.add "X-Amz-Signature", valid_614514
  var valid_614515 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614515 = validateParameter(valid_614515, JString, required = false,
                                 default = nil)
  if valid_614515 != nil:
    section.add "X-Amz-Content-Sha256", valid_614515
  var valid_614516 = header.getOrDefault("X-Amz-Date")
  valid_614516 = validateParameter(valid_614516, JString, required = false,
                                 default = nil)
  if valid_614516 != nil:
    section.add "X-Amz-Date", valid_614516
  var valid_614517 = header.getOrDefault("X-Amz-Credential")
  valid_614517 = validateParameter(valid_614517, JString, required = false,
                                 default = nil)
  if valid_614517 != nil:
    section.add "X-Amz-Credential", valid_614517
  var valid_614518 = header.getOrDefault("X-Amz-Security-Token")
  valid_614518 = validateParameter(valid_614518, JString, required = false,
                                 default = nil)
  if valid_614518 != nil:
    section.add "X-Amz-Security-Token", valid_614518
  var valid_614519 = header.getOrDefault("X-Amz-Algorithm")
  valid_614519 = validateParameter(valid_614519, JString, required = false,
                                 default = nil)
  if valid_614519 != nil:
    section.add "X-Amz-Algorithm", valid_614519
  var valid_614520 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614520 = validateParameter(valid_614520, JString, required = false,
                                 default = nil)
  if valid_614520 != nil:
    section.add "X-Amz-SignedHeaders", valid_614520
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  section = newJObject()
  var valid_614521 = formData.getOrDefault("NextToken")
  valid_614521 = validateParameter(valid_614521, JString, required = false,
                                 default = nil)
  if valid_614521 != nil:
    section.add "NextToken", valid_614521
  var valid_614522 = formData.getOrDefault("IdentityType")
  valid_614522 = validateParameter(valid_614522, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_614522 != nil:
    section.add "IdentityType", valid_614522
  var valid_614523 = formData.getOrDefault("MaxItems")
  valid_614523 = validateParameter(valid_614523, JInt, required = false, default = nil)
  if valid_614523 != nil:
    section.add "MaxItems", valid_614523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614524: Call_PostListIdentities_614509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614524.validator(path, query, header, formData, body)
  let scheme = call_614524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614524.url(scheme.get, call_614524.host, call_614524.base,
                         call_614524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614524, url, valid)

proc call*(call_614525: Call_PostListIdentities_614509; NextToken: string = "";
          IdentityType: string = "EmailAddress"; Action: string = "ListIdentities";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_614526 = newJObject()
  var formData_614527 = newJObject()
  add(formData_614527, "NextToken", newJString(NextToken))
  add(formData_614527, "IdentityType", newJString(IdentityType))
  add(query_614526, "Action", newJString(Action))
  add(formData_614527, "MaxItems", newJInt(MaxItems))
  add(query_614526, "Version", newJString(Version))
  result = call_614525.call(nil, query_614526, nil, formData_614527, nil)

var postListIdentities* = Call_PostListIdentities_614509(
    name: "postListIdentities", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentities",
    validator: validate_PostListIdentities_614510, base: "/",
    url: url_PostListIdentities_614511, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentities_614491 = ref object of OpenApiRestCall_612658
proc url_GetListIdentities_614493(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListIdentities_614492(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614494 = query.getOrDefault("MaxItems")
  valid_614494 = validateParameter(valid_614494, JInt, required = false, default = nil)
  if valid_614494 != nil:
    section.add "MaxItems", valid_614494
  var valid_614495 = query.getOrDefault("NextToken")
  valid_614495 = validateParameter(valid_614495, JString, required = false,
                                 default = nil)
  if valid_614495 != nil:
    section.add "NextToken", valid_614495
  var valid_614496 = query.getOrDefault("IdentityType")
  valid_614496 = validateParameter(valid_614496, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_614496 != nil:
    section.add "IdentityType", valid_614496
  var valid_614497 = query.getOrDefault("Action")
  valid_614497 = validateParameter(valid_614497, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_614497 != nil:
    section.add "Action", valid_614497
  var valid_614498 = query.getOrDefault("Version")
  valid_614498 = validateParameter(valid_614498, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614498 != nil:
    section.add "Version", valid_614498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614499 = header.getOrDefault("X-Amz-Signature")
  valid_614499 = validateParameter(valid_614499, JString, required = false,
                                 default = nil)
  if valid_614499 != nil:
    section.add "X-Amz-Signature", valid_614499
  var valid_614500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614500 = validateParameter(valid_614500, JString, required = false,
                                 default = nil)
  if valid_614500 != nil:
    section.add "X-Amz-Content-Sha256", valid_614500
  var valid_614501 = header.getOrDefault("X-Amz-Date")
  valid_614501 = validateParameter(valid_614501, JString, required = false,
                                 default = nil)
  if valid_614501 != nil:
    section.add "X-Amz-Date", valid_614501
  var valid_614502 = header.getOrDefault("X-Amz-Credential")
  valid_614502 = validateParameter(valid_614502, JString, required = false,
                                 default = nil)
  if valid_614502 != nil:
    section.add "X-Amz-Credential", valid_614502
  var valid_614503 = header.getOrDefault("X-Amz-Security-Token")
  valid_614503 = validateParameter(valid_614503, JString, required = false,
                                 default = nil)
  if valid_614503 != nil:
    section.add "X-Amz-Security-Token", valid_614503
  var valid_614504 = header.getOrDefault("X-Amz-Algorithm")
  valid_614504 = validateParameter(valid_614504, JString, required = false,
                                 default = nil)
  if valid_614504 != nil:
    section.add "X-Amz-Algorithm", valid_614504
  var valid_614505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614505 = validateParameter(valid_614505, JString, required = false,
                                 default = nil)
  if valid_614505 != nil:
    section.add "X-Amz-SignedHeaders", valid_614505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614506: Call_GetListIdentities_614491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614506.validator(path, query, header, formData, body)
  let scheme = call_614506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614506.url(scheme.get, call_614506.host, call_614506.base,
                         call_614506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614506, url, valid)

proc call*(call_614507: Call_GetListIdentities_614491; MaxItems: int = 0;
          NextToken: string = ""; IdentityType: string = "EmailAddress";
          Action: string = "ListIdentities"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614508 = newJObject()
  add(query_614508, "MaxItems", newJInt(MaxItems))
  add(query_614508, "NextToken", newJString(NextToken))
  add(query_614508, "IdentityType", newJString(IdentityType))
  add(query_614508, "Action", newJString(Action))
  add(query_614508, "Version", newJString(Version))
  result = call_614507.call(nil, query_614508, nil, nil, nil)

var getListIdentities* = Call_GetListIdentities_614491(name: "getListIdentities",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListIdentities", validator: validate_GetListIdentities_614492,
    base: "/", url: url_GetListIdentities_614493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentityPolicies_614544 = ref object of OpenApiRestCall_612658
proc url_PostListIdentityPolicies_614546(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListIdentityPolicies_614545(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614547 = query.getOrDefault("Action")
  valid_614547 = validateParameter(valid_614547, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_614547 != nil:
    section.add "Action", valid_614547
  var valid_614548 = query.getOrDefault("Version")
  valid_614548 = validateParameter(valid_614548, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614548 != nil:
    section.add "Version", valid_614548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614549 = header.getOrDefault("X-Amz-Signature")
  valid_614549 = validateParameter(valid_614549, JString, required = false,
                                 default = nil)
  if valid_614549 != nil:
    section.add "X-Amz-Signature", valid_614549
  var valid_614550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614550 = validateParameter(valid_614550, JString, required = false,
                                 default = nil)
  if valid_614550 != nil:
    section.add "X-Amz-Content-Sha256", valid_614550
  var valid_614551 = header.getOrDefault("X-Amz-Date")
  valid_614551 = validateParameter(valid_614551, JString, required = false,
                                 default = nil)
  if valid_614551 != nil:
    section.add "X-Amz-Date", valid_614551
  var valid_614552 = header.getOrDefault("X-Amz-Credential")
  valid_614552 = validateParameter(valid_614552, JString, required = false,
                                 default = nil)
  if valid_614552 != nil:
    section.add "X-Amz-Credential", valid_614552
  var valid_614553 = header.getOrDefault("X-Amz-Security-Token")
  valid_614553 = validateParameter(valid_614553, JString, required = false,
                                 default = nil)
  if valid_614553 != nil:
    section.add "X-Amz-Security-Token", valid_614553
  var valid_614554 = header.getOrDefault("X-Amz-Algorithm")
  valid_614554 = validateParameter(valid_614554, JString, required = false,
                                 default = nil)
  if valid_614554 != nil:
    section.add "X-Amz-Algorithm", valid_614554
  var valid_614555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614555 = validateParameter(valid_614555, JString, required = false,
                                 default = nil)
  if valid_614555 != nil:
    section.add "X-Amz-SignedHeaders", valid_614555
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_614556 = formData.getOrDefault("Identity")
  valid_614556 = validateParameter(valid_614556, JString, required = true,
                                 default = nil)
  if valid_614556 != nil:
    section.add "Identity", valid_614556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614557: Call_PostListIdentityPolicies_614544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614557.validator(path, query, header, formData, body)
  let scheme = call_614557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614557.url(scheme.get, call_614557.host, call_614557.base,
                         call_614557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614557, url, valid)

proc call*(call_614558: Call_PostListIdentityPolicies_614544; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614559 = newJObject()
  var formData_614560 = newJObject()
  add(formData_614560, "Identity", newJString(Identity))
  add(query_614559, "Action", newJString(Action))
  add(query_614559, "Version", newJString(Version))
  result = call_614558.call(nil, query_614559, nil, formData_614560, nil)

var postListIdentityPolicies* = Call_PostListIdentityPolicies_614544(
    name: "postListIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_PostListIdentityPolicies_614545, base: "/",
    url: url_PostListIdentityPolicies_614546, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentityPolicies_614528 = ref object of OpenApiRestCall_612658
proc url_GetListIdentityPolicies_614530(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListIdentityPolicies_614529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_614531 = query.getOrDefault("Identity")
  valid_614531 = validateParameter(valid_614531, JString, required = true,
                                 default = nil)
  if valid_614531 != nil:
    section.add "Identity", valid_614531
  var valid_614532 = query.getOrDefault("Action")
  valid_614532 = validateParameter(valid_614532, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_614532 != nil:
    section.add "Action", valid_614532
  var valid_614533 = query.getOrDefault("Version")
  valid_614533 = validateParameter(valid_614533, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614533 != nil:
    section.add "Version", valid_614533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614534 = header.getOrDefault("X-Amz-Signature")
  valid_614534 = validateParameter(valid_614534, JString, required = false,
                                 default = nil)
  if valid_614534 != nil:
    section.add "X-Amz-Signature", valid_614534
  var valid_614535 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614535 = validateParameter(valid_614535, JString, required = false,
                                 default = nil)
  if valid_614535 != nil:
    section.add "X-Amz-Content-Sha256", valid_614535
  var valid_614536 = header.getOrDefault("X-Amz-Date")
  valid_614536 = validateParameter(valid_614536, JString, required = false,
                                 default = nil)
  if valid_614536 != nil:
    section.add "X-Amz-Date", valid_614536
  var valid_614537 = header.getOrDefault("X-Amz-Credential")
  valid_614537 = validateParameter(valid_614537, JString, required = false,
                                 default = nil)
  if valid_614537 != nil:
    section.add "X-Amz-Credential", valid_614537
  var valid_614538 = header.getOrDefault("X-Amz-Security-Token")
  valid_614538 = validateParameter(valid_614538, JString, required = false,
                                 default = nil)
  if valid_614538 != nil:
    section.add "X-Amz-Security-Token", valid_614538
  var valid_614539 = header.getOrDefault("X-Amz-Algorithm")
  valid_614539 = validateParameter(valid_614539, JString, required = false,
                                 default = nil)
  if valid_614539 != nil:
    section.add "X-Amz-Algorithm", valid_614539
  var valid_614540 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614540 = validateParameter(valid_614540, JString, required = false,
                                 default = nil)
  if valid_614540 != nil:
    section.add "X-Amz-SignedHeaders", valid_614540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614541: Call_GetListIdentityPolicies_614528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614541.validator(path, query, header, formData, body)
  let scheme = call_614541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614541.url(scheme.get, call_614541.host, call_614541.base,
                         call_614541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614541, url, valid)

proc call*(call_614542: Call_GetListIdentityPolicies_614528; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614543 = newJObject()
  add(query_614543, "Identity", newJString(Identity))
  add(query_614543, "Action", newJString(Action))
  add(query_614543, "Version", newJString(Version))
  result = call_614542.call(nil, query_614543, nil, nil, nil)

var getListIdentityPolicies* = Call_GetListIdentityPolicies_614528(
    name: "getListIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_GetListIdentityPolicies_614529, base: "/",
    url: url_GetListIdentityPolicies_614530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptFilters_614576 = ref object of OpenApiRestCall_612658
proc url_PostListReceiptFilters_614578(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListReceiptFilters_614577(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614579 = query.getOrDefault("Action")
  valid_614579 = validateParameter(valid_614579, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_614579 != nil:
    section.add "Action", valid_614579
  var valid_614580 = query.getOrDefault("Version")
  valid_614580 = validateParameter(valid_614580, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614580 != nil:
    section.add "Version", valid_614580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614581 = header.getOrDefault("X-Amz-Signature")
  valid_614581 = validateParameter(valid_614581, JString, required = false,
                                 default = nil)
  if valid_614581 != nil:
    section.add "X-Amz-Signature", valid_614581
  var valid_614582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614582 = validateParameter(valid_614582, JString, required = false,
                                 default = nil)
  if valid_614582 != nil:
    section.add "X-Amz-Content-Sha256", valid_614582
  var valid_614583 = header.getOrDefault("X-Amz-Date")
  valid_614583 = validateParameter(valid_614583, JString, required = false,
                                 default = nil)
  if valid_614583 != nil:
    section.add "X-Amz-Date", valid_614583
  var valid_614584 = header.getOrDefault("X-Amz-Credential")
  valid_614584 = validateParameter(valid_614584, JString, required = false,
                                 default = nil)
  if valid_614584 != nil:
    section.add "X-Amz-Credential", valid_614584
  var valid_614585 = header.getOrDefault("X-Amz-Security-Token")
  valid_614585 = validateParameter(valid_614585, JString, required = false,
                                 default = nil)
  if valid_614585 != nil:
    section.add "X-Amz-Security-Token", valid_614585
  var valid_614586 = header.getOrDefault("X-Amz-Algorithm")
  valid_614586 = validateParameter(valid_614586, JString, required = false,
                                 default = nil)
  if valid_614586 != nil:
    section.add "X-Amz-Algorithm", valid_614586
  var valid_614587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614587 = validateParameter(valid_614587, JString, required = false,
                                 default = nil)
  if valid_614587 != nil:
    section.add "X-Amz-SignedHeaders", valid_614587
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614588: Call_PostListReceiptFilters_614576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614588.validator(path, query, header, formData, body)
  let scheme = call_614588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614588.url(scheme.get, call_614588.host, call_614588.base,
                         call_614588.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614588, url, valid)

proc call*(call_614589: Call_PostListReceiptFilters_614576;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## postListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614590 = newJObject()
  add(query_614590, "Action", newJString(Action))
  add(query_614590, "Version", newJString(Version))
  result = call_614589.call(nil, query_614590, nil, nil, nil)

var postListReceiptFilters* = Call_PostListReceiptFilters_614576(
    name: "postListReceiptFilters", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_PostListReceiptFilters_614577, base: "/",
    url: url_PostListReceiptFilters_614578, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptFilters_614561 = ref object of OpenApiRestCall_612658
proc url_GetListReceiptFilters_614563(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListReceiptFilters_614562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614564 = query.getOrDefault("Action")
  valid_614564 = validateParameter(valid_614564, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_614564 != nil:
    section.add "Action", valid_614564
  var valid_614565 = query.getOrDefault("Version")
  valid_614565 = validateParameter(valid_614565, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614565 != nil:
    section.add "Version", valid_614565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614566 = header.getOrDefault("X-Amz-Signature")
  valid_614566 = validateParameter(valid_614566, JString, required = false,
                                 default = nil)
  if valid_614566 != nil:
    section.add "X-Amz-Signature", valid_614566
  var valid_614567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614567 = validateParameter(valid_614567, JString, required = false,
                                 default = nil)
  if valid_614567 != nil:
    section.add "X-Amz-Content-Sha256", valid_614567
  var valid_614568 = header.getOrDefault("X-Amz-Date")
  valid_614568 = validateParameter(valid_614568, JString, required = false,
                                 default = nil)
  if valid_614568 != nil:
    section.add "X-Amz-Date", valid_614568
  var valid_614569 = header.getOrDefault("X-Amz-Credential")
  valid_614569 = validateParameter(valid_614569, JString, required = false,
                                 default = nil)
  if valid_614569 != nil:
    section.add "X-Amz-Credential", valid_614569
  var valid_614570 = header.getOrDefault("X-Amz-Security-Token")
  valid_614570 = validateParameter(valid_614570, JString, required = false,
                                 default = nil)
  if valid_614570 != nil:
    section.add "X-Amz-Security-Token", valid_614570
  var valid_614571 = header.getOrDefault("X-Amz-Algorithm")
  valid_614571 = validateParameter(valid_614571, JString, required = false,
                                 default = nil)
  if valid_614571 != nil:
    section.add "X-Amz-Algorithm", valid_614571
  var valid_614572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614572 = validateParameter(valid_614572, JString, required = false,
                                 default = nil)
  if valid_614572 != nil:
    section.add "X-Amz-SignedHeaders", valid_614572
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614573: Call_GetListReceiptFilters_614561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614573.validator(path, query, header, formData, body)
  let scheme = call_614573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614573.url(scheme.get, call_614573.host, call_614573.base,
                         call_614573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614573, url, valid)

proc call*(call_614574: Call_GetListReceiptFilters_614561;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614575 = newJObject()
  add(query_614575, "Action", newJString(Action))
  add(query_614575, "Version", newJString(Version))
  result = call_614574.call(nil, query_614575, nil, nil, nil)

var getListReceiptFilters* = Call_GetListReceiptFilters_614561(
    name: "getListReceiptFilters", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_GetListReceiptFilters_614562, base: "/",
    url: url_GetListReceiptFilters_614563, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptRuleSets_614607 = ref object of OpenApiRestCall_612658
proc url_PostListReceiptRuleSets_614609(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListReceiptRuleSets_614608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614610 = query.getOrDefault("Action")
  valid_614610 = validateParameter(valid_614610, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_614610 != nil:
    section.add "Action", valid_614610
  var valid_614611 = query.getOrDefault("Version")
  valid_614611 = validateParameter(valid_614611, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614611 != nil:
    section.add "Version", valid_614611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614612 = header.getOrDefault("X-Amz-Signature")
  valid_614612 = validateParameter(valid_614612, JString, required = false,
                                 default = nil)
  if valid_614612 != nil:
    section.add "X-Amz-Signature", valid_614612
  var valid_614613 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614613 = validateParameter(valid_614613, JString, required = false,
                                 default = nil)
  if valid_614613 != nil:
    section.add "X-Amz-Content-Sha256", valid_614613
  var valid_614614 = header.getOrDefault("X-Amz-Date")
  valid_614614 = validateParameter(valid_614614, JString, required = false,
                                 default = nil)
  if valid_614614 != nil:
    section.add "X-Amz-Date", valid_614614
  var valid_614615 = header.getOrDefault("X-Amz-Credential")
  valid_614615 = validateParameter(valid_614615, JString, required = false,
                                 default = nil)
  if valid_614615 != nil:
    section.add "X-Amz-Credential", valid_614615
  var valid_614616 = header.getOrDefault("X-Amz-Security-Token")
  valid_614616 = validateParameter(valid_614616, JString, required = false,
                                 default = nil)
  if valid_614616 != nil:
    section.add "X-Amz-Security-Token", valid_614616
  var valid_614617 = header.getOrDefault("X-Amz-Algorithm")
  valid_614617 = validateParameter(valid_614617, JString, required = false,
                                 default = nil)
  if valid_614617 != nil:
    section.add "X-Amz-Algorithm", valid_614617
  var valid_614618 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614618 = validateParameter(valid_614618, JString, required = false,
                                 default = nil)
  if valid_614618 != nil:
    section.add "X-Amz-SignedHeaders", valid_614618
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  section = newJObject()
  var valid_614619 = formData.getOrDefault("NextToken")
  valid_614619 = validateParameter(valid_614619, JString, required = false,
                                 default = nil)
  if valid_614619 != nil:
    section.add "NextToken", valid_614619
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614620: Call_PostListReceiptRuleSets_614607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614620.validator(path, query, header, formData, body)
  let scheme = call_614620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614620.url(scheme.get, call_614620.host, call_614620.base,
                         call_614620.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614620, url, valid)

proc call*(call_614621: Call_PostListReceiptRuleSets_614607;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## postListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614622 = newJObject()
  var formData_614623 = newJObject()
  add(formData_614623, "NextToken", newJString(NextToken))
  add(query_614622, "Action", newJString(Action))
  add(query_614622, "Version", newJString(Version))
  result = call_614621.call(nil, query_614622, nil, formData_614623, nil)

var postListReceiptRuleSets* = Call_PostListReceiptRuleSets_614607(
    name: "postListReceiptRuleSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_PostListReceiptRuleSets_614608, base: "/",
    url: url_PostListReceiptRuleSets_614609, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptRuleSets_614591 = ref object of OpenApiRestCall_612658
proc url_GetListReceiptRuleSets_614593(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListReceiptRuleSets_614592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614594 = query.getOrDefault("NextToken")
  valid_614594 = validateParameter(valid_614594, JString, required = false,
                                 default = nil)
  if valid_614594 != nil:
    section.add "NextToken", valid_614594
  var valid_614595 = query.getOrDefault("Action")
  valid_614595 = validateParameter(valid_614595, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_614595 != nil:
    section.add "Action", valid_614595
  var valid_614596 = query.getOrDefault("Version")
  valid_614596 = validateParameter(valid_614596, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614596 != nil:
    section.add "Version", valid_614596
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614597 = header.getOrDefault("X-Amz-Signature")
  valid_614597 = validateParameter(valid_614597, JString, required = false,
                                 default = nil)
  if valid_614597 != nil:
    section.add "X-Amz-Signature", valid_614597
  var valid_614598 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614598 = validateParameter(valid_614598, JString, required = false,
                                 default = nil)
  if valid_614598 != nil:
    section.add "X-Amz-Content-Sha256", valid_614598
  var valid_614599 = header.getOrDefault("X-Amz-Date")
  valid_614599 = validateParameter(valid_614599, JString, required = false,
                                 default = nil)
  if valid_614599 != nil:
    section.add "X-Amz-Date", valid_614599
  var valid_614600 = header.getOrDefault("X-Amz-Credential")
  valid_614600 = validateParameter(valid_614600, JString, required = false,
                                 default = nil)
  if valid_614600 != nil:
    section.add "X-Amz-Credential", valid_614600
  var valid_614601 = header.getOrDefault("X-Amz-Security-Token")
  valid_614601 = validateParameter(valid_614601, JString, required = false,
                                 default = nil)
  if valid_614601 != nil:
    section.add "X-Amz-Security-Token", valid_614601
  var valid_614602 = header.getOrDefault("X-Amz-Algorithm")
  valid_614602 = validateParameter(valid_614602, JString, required = false,
                                 default = nil)
  if valid_614602 != nil:
    section.add "X-Amz-Algorithm", valid_614602
  var valid_614603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614603 = validateParameter(valid_614603, JString, required = false,
                                 default = nil)
  if valid_614603 != nil:
    section.add "X-Amz-SignedHeaders", valid_614603
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614604: Call_GetListReceiptRuleSets_614591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614604.validator(path, query, header, formData, body)
  let scheme = call_614604.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614604.url(scheme.get, call_614604.host, call_614604.base,
                         call_614604.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614604, url, valid)

proc call*(call_614605: Call_GetListReceiptRuleSets_614591; NextToken: string = "";
          Action: string = "ListReceiptRuleSets"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614606 = newJObject()
  add(query_614606, "NextToken", newJString(NextToken))
  add(query_614606, "Action", newJString(Action))
  add(query_614606, "Version", newJString(Version))
  result = call_614605.call(nil, query_614606, nil, nil, nil)

var getListReceiptRuleSets* = Call_GetListReceiptRuleSets_614591(
    name: "getListReceiptRuleSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_GetListReceiptRuleSets_614592, base: "/",
    url: url_GetListReceiptRuleSets_614593, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTemplates_614641 = ref object of OpenApiRestCall_612658
proc url_PostListTemplates_614643(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTemplates_614642(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614644 = query.getOrDefault("Action")
  valid_614644 = validateParameter(valid_614644, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_614644 != nil:
    section.add "Action", valid_614644
  var valid_614645 = query.getOrDefault("Version")
  valid_614645 = validateParameter(valid_614645, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614645 != nil:
    section.add "Version", valid_614645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614646 = header.getOrDefault("X-Amz-Signature")
  valid_614646 = validateParameter(valid_614646, JString, required = false,
                                 default = nil)
  if valid_614646 != nil:
    section.add "X-Amz-Signature", valid_614646
  var valid_614647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614647 = validateParameter(valid_614647, JString, required = false,
                                 default = nil)
  if valid_614647 != nil:
    section.add "X-Amz-Content-Sha256", valid_614647
  var valid_614648 = header.getOrDefault("X-Amz-Date")
  valid_614648 = validateParameter(valid_614648, JString, required = false,
                                 default = nil)
  if valid_614648 != nil:
    section.add "X-Amz-Date", valid_614648
  var valid_614649 = header.getOrDefault("X-Amz-Credential")
  valid_614649 = validateParameter(valid_614649, JString, required = false,
                                 default = nil)
  if valid_614649 != nil:
    section.add "X-Amz-Credential", valid_614649
  var valid_614650 = header.getOrDefault("X-Amz-Security-Token")
  valid_614650 = validateParameter(valid_614650, JString, required = false,
                                 default = nil)
  if valid_614650 != nil:
    section.add "X-Amz-Security-Token", valid_614650
  var valid_614651 = header.getOrDefault("X-Amz-Algorithm")
  valid_614651 = validateParameter(valid_614651, JString, required = false,
                                 default = nil)
  if valid_614651 != nil:
    section.add "X-Amz-Algorithm", valid_614651
  var valid_614652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614652 = validateParameter(valid_614652, JString, required = false,
                                 default = nil)
  if valid_614652 != nil:
    section.add "X-Amz-SignedHeaders", valid_614652
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  section = newJObject()
  var valid_614653 = formData.getOrDefault("NextToken")
  valid_614653 = validateParameter(valid_614653, JString, required = false,
                                 default = nil)
  if valid_614653 != nil:
    section.add "NextToken", valid_614653
  var valid_614654 = formData.getOrDefault("MaxItems")
  valid_614654 = validateParameter(valid_614654, JInt, required = false, default = nil)
  if valid_614654 != nil:
    section.add "MaxItems", valid_614654
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614655: Call_PostListTemplates_614641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614655.validator(path, query, header, formData, body)
  let scheme = call_614655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614655.url(scheme.get, call_614655.host, call_614655.base,
                         call_614655.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614655, url, valid)

proc call*(call_614656: Call_PostListTemplates_614641; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## postListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_614657 = newJObject()
  var formData_614658 = newJObject()
  add(formData_614658, "NextToken", newJString(NextToken))
  add(query_614657, "Action", newJString(Action))
  add(formData_614658, "MaxItems", newJInt(MaxItems))
  add(query_614657, "Version", newJString(Version))
  result = call_614656.call(nil, query_614657, nil, formData_614658, nil)

var postListTemplates* = Call_PostListTemplates_614641(name: "postListTemplates",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_PostListTemplates_614642,
    base: "/", url: url_PostListTemplates_614643,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTemplates_614624 = ref object of OpenApiRestCall_612658
proc url_GetListTemplates_614626(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTemplates_614625(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614627 = query.getOrDefault("MaxItems")
  valid_614627 = validateParameter(valid_614627, JInt, required = false, default = nil)
  if valid_614627 != nil:
    section.add "MaxItems", valid_614627
  var valid_614628 = query.getOrDefault("NextToken")
  valid_614628 = validateParameter(valid_614628, JString, required = false,
                                 default = nil)
  if valid_614628 != nil:
    section.add "NextToken", valid_614628
  var valid_614629 = query.getOrDefault("Action")
  valid_614629 = validateParameter(valid_614629, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_614629 != nil:
    section.add "Action", valid_614629
  var valid_614630 = query.getOrDefault("Version")
  valid_614630 = validateParameter(valid_614630, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614630 != nil:
    section.add "Version", valid_614630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614631 = header.getOrDefault("X-Amz-Signature")
  valid_614631 = validateParameter(valid_614631, JString, required = false,
                                 default = nil)
  if valid_614631 != nil:
    section.add "X-Amz-Signature", valid_614631
  var valid_614632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614632 = validateParameter(valid_614632, JString, required = false,
                                 default = nil)
  if valid_614632 != nil:
    section.add "X-Amz-Content-Sha256", valid_614632
  var valid_614633 = header.getOrDefault("X-Amz-Date")
  valid_614633 = validateParameter(valid_614633, JString, required = false,
                                 default = nil)
  if valid_614633 != nil:
    section.add "X-Amz-Date", valid_614633
  var valid_614634 = header.getOrDefault("X-Amz-Credential")
  valid_614634 = validateParameter(valid_614634, JString, required = false,
                                 default = nil)
  if valid_614634 != nil:
    section.add "X-Amz-Credential", valid_614634
  var valid_614635 = header.getOrDefault("X-Amz-Security-Token")
  valid_614635 = validateParameter(valid_614635, JString, required = false,
                                 default = nil)
  if valid_614635 != nil:
    section.add "X-Amz-Security-Token", valid_614635
  var valid_614636 = header.getOrDefault("X-Amz-Algorithm")
  valid_614636 = validateParameter(valid_614636, JString, required = false,
                                 default = nil)
  if valid_614636 != nil:
    section.add "X-Amz-Algorithm", valid_614636
  var valid_614637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614637 = validateParameter(valid_614637, JString, required = false,
                                 default = nil)
  if valid_614637 != nil:
    section.add "X-Amz-SignedHeaders", valid_614637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614638: Call_GetListTemplates_614624; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614638.validator(path, query, header, formData, body)
  let scheme = call_614638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614638.url(scheme.get, call_614638.host, call_614638.base,
                         call_614638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614638, url, valid)

proc call*(call_614639: Call_GetListTemplates_614624; MaxItems: int = 0;
          NextToken: string = ""; Action: string = "ListTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## getListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614640 = newJObject()
  add(query_614640, "MaxItems", newJInt(MaxItems))
  add(query_614640, "NextToken", newJString(NextToken))
  add(query_614640, "Action", newJString(Action))
  add(query_614640, "Version", newJString(Version))
  result = call_614639.call(nil, query_614640, nil, nil, nil)

var getListTemplates* = Call_GetListTemplates_614624(name: "getListTemplates",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_GetListTemplates_614625,
    base: "/", url: url_GetListTemplates_614626,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVerifiedEmailAddresses_614674 = ref object of OpenApiRestCall_612658
proc url_PostListVerifiedEmailAddresses_614676(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVerifiedEmailAddresses_614675(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614677 = query.getOrDefault("Action")
  valid_614677 = validateParameter(valid_614677, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_614677 != nil:
    section.add "Action", valid_614677
  var valid_614678 = query.getOrDefault("Version")
  valid_614678 = validateParameter(valid_614678, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614678 != nil:
    section.add "Version", valid_614678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614679 = header.getOrDefault("X-Amz-Signature")
  valid_614679 = validateParameter(valid_614679, JString, required = false,
                                 default = nil)
  if valid_614679 != nil:
    section.add "X-Amz-Signature", valid_614679
  var valid_614680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614680 = validateParameter(valid_614680, JString, required = false,
                                 default = nil)
  if valid_614680 != nil:
    section.add "X-Amz-Content-Sha256", valid_614680
  var valid_614681 = header.getOrDefault("X-Amz-Date")
  valid_614681 = validateParameter(valid_614681, JString, required = false,
                                 default = nil)
  if valid_614681 != nil:
    section.add "X-Amz-Date", valid_614681
  var valid_614682 = header.getOrDefault("X-Amz-Credential")
  valid_614682 = validateParameter(valid_614682, JString, required = false,
                                 default = nil)
  if valid_614682 != nil:
    section.add "X-Amz-Credential", valid_614682
  var valid_614683 = header.getOrDefault("X-Amz-Security-Token")
  valid_614683 = validateParameter(valid_614683, JString, required = false,
                                 default = nil)
  if valid_614683 != nil:
    section.add "X-Amz-Security-Token", valid_614683
  var valid_614684 = header.getOrDefault("X-Amz-Algorithm")
  valid_614684 = validateParameter(valid_614684, JString, required = false,
                                 default = nil)
  if valid_614684 != nil:
    section.add "X-Amz-Algorithm", valid_614684
  var valid_614685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614685 = validateParameter(valid_614685, JString, required = false,
                                 default = nil)
  if valid_614685 != nil:
    section.add "X-Amz-SignedHeaders", valid_614685
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614686: Call_PostListVerifiedEmailAddresses_614674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_614686.validator(path, query, header, formData, body)
  let scheme = call_614686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614686.url(scheme.get, call_614686.host, call_614686.base,
                         call_614686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614686, url, valid)

proc call*(call_614687: Call_PostListVerifiedEmailAddresses_614674;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## postListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614688 = newJObject()
  add(query_614688, "Action", newJString(Action))
  add(query_614688, "Version", newJString(Version))
  result = call_614687.call(nil, query_614688, nil, nil, nil)

var postListVerifiedEmailAddresses* = Call_PostListVerifiedEmailAddresses_614674(
    name: "postListVerifiedEmailAddresses", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_PostListVerifiedEmailAddresses_614675, base: "/",
    url: url_PostListVerifiedEmailAddresses_614676,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVerifiedEmailAddresses_614659 = ref object of OpenApiRestCall_612658
proc url_GetListVerifiedEmailAddresses_614661(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVerifiedEmailAddresses_614660(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614662 = query.getOrDefault("Action")
  valid_614662 = validateParameter(valid_614662, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_614662 != nil:
    section.add "Action", valid_614662
  var valid_614663 = query.getOrDefault("Version")
  valid_614663 = validateParameter(valid_614663, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614663 != nil:
    section.add "Version", valid_614663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614664 = header.getOrDefault("X-Amz-Signature")
  valid_614664 = validateParameter(valid_614664, JString, required = false,
                                 default = nil)
  if valid_614664 != nil:
    section.add "X-Amz-Signature", valid_614664
  var valid_614665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614665 = validateParameter(valid_614665, JString, required = false,
                                 default = nil)
  if valid_614665 != nil:
    section.add "X-Amz-Content-Sha256", valid_614665
  var valid_614666 = header.getOrDefault("X-Amz-Date")
  valid_614666 = validateParameter(valid_614666, JString, required = false,
                                 default = nil)
  if valid_614666 != nil:
    section.add "X-Amz-Date", valid_614666
  var valid_614667 = header.getOrDefault("X-Amz-Credential")
  valid_614667 = validateParameter(valid_614667, JString, required = false,
                                 default = nil)
  if valid_614667 != nil:
    section.add "X-Amz-Credential", valid_614667
  var valid_614668 = header.getOrDefault("X-Amz-Security-Token")
  valid_614668 = validateParameter(valid_614668, JString, required = false,
                                 default = nil)
  if valid_614668 != nil:
    section.add "X-Amz-Security-Token", valid_614668
  var valid_614669 = header.getOrDefault("X-Amz-Algorithm")
  valid_614669 = validateParameter(valid_614669, JString, required = false,
                                 default = nil)
  if valid_614669 != nil:
    section.add "X-Amz-Algorithm", valid_614669
  var valid_614670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614670 = validateParameter(valid_614670, JString, required = false,
                                 default = nil)
  if valid_614670 != nil:
    section.add "X-Amz-SignedHeaders", valid_614670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614671: Call_GetListVerifiedEmailAddresses_614659; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_614671.validator(path, query, header, formData, body)
  let scheme = call_614671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614671.url(scheme.get, call_614671.host, call_614671.base,
                         call_614671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614671, url, valid)

proc call*(call_614672: Call_GetListVerifiedEmailAddresses_614659;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## getListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614673 = newJObject()
  add(query_614673, "Action", newJString(Action))
  add(query_614673, "Version", newJString(Version))
  result = call_614672.call(nil, query_614673, nil, nil, nil)

var getListVerifiedEmailAddresses* = Call_GetListVerifiedEmailAddresses_614659(
    name: "getListVerifiedEmailAddresses", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_GetListVerifiedEmailAddresses_614660, base: "/",
    url: url_GetListVerifiedEmailAddresses_614661,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutConfigurationSetDeliveryOptions_614706 = ref object of OpenApiRestCall_612658
proc url_PostPutConfigurationSetDeliveryOptions_614708(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutConfigurationSetDeliveryOptions_614707(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614709 = query.getOrDefault("Action")
  valid_614709 = validateParameter(valid_614709, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_614709 != nil:
    section.add "Action", valid_614709
  var valid_614710 = query.getOrDefault("Version")
  valid_614710 = validateParameter(valid_614710, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614710 != nil:
    section.add "Version", valid_614710
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614711 = header.getOrDefault("X-Amz-Signature")
  valid_614711 = validateParameter(valid_614711, JString, required = false,
                                 default = nil)
  if valid_614711 != nil:
    section.add "X-Amz-Signature", valid_614711
  var valid_614712 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614712 = validateParameter(valid_614712, JString, required = false,
                                 default = nil)
  if valid_614712 != nil:
    section.add "X-Amz-Content-Sha256", valid_614712
  var valid_614713 = header.getOrDefault("X-Amz-Date")
  valid_614713 = validateParameter(valid_614713, JString, required = false,
                                 default = nil)
  if valid_614713 != nil:
    section.add "X-Amz-Date", valid_614713
  var valid_614714 = header.getOrDefault("X-Amz-Credential")
  valid_614714 = validateParameter(valid_614714, JString, required = false,
                                 default = nil)
  if valid_614714 != nil:
    section.add "X-Amz-Credential", valid_614714
  var valid_614715 = header.getOrDefault("X-Amz-Security-Token")
  valid_614715 = validateParameter(valid_614715, JString, required = false,
                                 default = nil)
  if valid_614715 != nil:
    section.add "X-Amz-Security-Token", valid_614715
  var valid_614716 = header.getOrDefault("X-Amz-Algorithm")
  valid_614716 = validateParameter(valid_614716, JString, required = false,
                                 default = nil)
  if valid_614716 != nil:
    section.add "X-Amz-Algorithm", valid_614716
  var valid_614717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614717 = validateParameter(valid_614717, JString, required = false,
                                 default = nil)
  if valid_614717 != nil:
    section.add "X-Amz-SignedHeaders", valid_614717
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  section = newJObject()
  var valid_614718 = formData.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_614718 = validateParameter(valid_614718, JString, required = false,
                                 default = nil)
  if valid_614718 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_614718
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_614719 = formData.getOrDefault("ConfigurationSetName")
  valid_614719 = validateParameter(valid_614719, JString, required = true,
                                 default = nil)
  if valid_614719 != nil:
    section.add "ConfigurationSetName", valid_614719
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614720: Call_PostPutConfigurationSetDeliveryOptions_614706;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_614720.validator(path, query, header, formData, body)
  let scheme = call_614720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614720.url(scheme.get, call_614720.host, call_614720.base,
                         call_614720.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614720, url, valid)

proc call*(call_614721: Call_PostPutConfigurationSetDeliveryOptions_614706;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: string (required)
  var query_614722 = newJObject()
  var formData_614723 = newJObject()
  add(formData_614723, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_614722, "Action", newJString(Action))
  add(formData_614723, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614722, "Version", newJString(Version))
  result = call_614721.call(nil, query_614722, nil, formData_614723, nil)

var postPutConfigurationSetDeliveryOptions* = Call_PostPutConfigurationSetDeliveryOptions_614706(
    name: "postPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_PostPutConfigurationSetDeliveryOptions_614707, base: "/",
    url: url_PostPutConfigurationSetDeliveryOptions_614708,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutConfigurationSetDeliveryOptions_614689 = ref object of OpenApiRestCall_612658
proc url_GetPutConfigurationSetDeliveryOptions_614691(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutConfigurationSetDeliveryOptions_614690(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_614692 = query.getOrDefault("ConfigurationSetName")
  valid_614692 = validateParameter(valid_614692, JString, required = true,
                                 default = nil)
  if valid_614692 != nil:
    section.add "ConfigurationSetName", valid_614692
  var valid_614693 = query.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_614693 = validateParameter(valid_614693, JString, required = false,
                                 default = nil)
  if valid_614693 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_614693
  var valid_614694 = query.getOrDefault("Action")
  valid_614694 = validateParameter(valid_614694, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_614694 != nil:
    section.add "Action", valid_614694
  var valid_614695 = query.getOrDefault("Version")
  valid_614695 = validateParameter(valid_614695, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614695 != nil:
    section.add "Version", valid_614695
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614696 = header.getOrDefault("X-Amz-Signature")
  valid_614696 = validateParameter(valid_614696, JString, required = false,
                                 default = nil)
  if valid_614696 != nil:
    section.add "X-Amz-Signature", valid_614696
  var valid_614697 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614697 = validateParameter(valid_614697, JString, required = false,
                                 default = nil)
  if valid_614697 != nil:
    section.add "X-Amz-Content-Sha256", valid_614697
  var valid_614698 = header.getOrDefault("X-Amz-Date")
  valid_614698 = validateParameter(valid_614698, JString, required = false,
                                 default = nil)
  if valid_614698 != nil:
    section.add "X-Amz-Date", valid_614698
  var valid_614699 = header.getOrDefault("X-Amz-Credential")
  valid_614699 = validateParameter(valid_614699, JString, required = false,
                                 default = nil)
  if valid_614699 != nil:
    section.add "X-Amz-Credential", valid_614699
  var valid_614700 = header.getOrDefault("X-Amz-Security-Token")
  valid_614700 = validateParameter(valid_614700, JString, required = false,
                                 default = nil)
  if valid_614700 != nil:
    section.add "X-Amz-Security-Token", valid_614700
  var valid_614701 = header.getOrDefault("X-Amz-Algorithm")
  valid_614701 = validateParameter(valid_614701, JString, required = false,
                                 default = nil)
  if valid_614701 != nil:
    section.add "X-Amz-Algorithm", valid_614701
  var valid_614702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614702 = validateParameter(valid_614702, JString, required = false,
                                 default = nil)
  if valid_614702 != nil:
    section.add "X-Amz-SignedHeaders", valid_614702
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614703: Call_GetPutConfigurationSetDeliveryOptions_614689;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_614703.validator(path, query, header, formData, body)
  let scheme = call_614703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614703.url(scheme.get, call_614703.host, call_614703.base,
                         call_614703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614703, url, valid)

proc call*(call_614704: Call_GetPutConfigurationSetDeliveryOptions_614689;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614705 = newJObject()
  add(query_614705, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614705, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_614705, "Action", newJString(Action))
  add(query_614705, "Version", newJString(Version))
  result = call_614704.call(nil, query_614705, nil, nil, nil)

var getPutConfigurationSetDeliveryOptions* = Call_GetPutConfigurationSetDeliveryOptions_614689(
    name: "getPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_GetPutConfigurationSetDeliveryOptions_614690, base: "/",
    url: url_GetPutConfigurationSetDeliveryOptions_614691,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutIdentityPolicy_614742 = ref object of OpenApiRestCall_612658
proc url_PostPutIdentityPolicy_614744(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutIdentityPolicy_614743(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614745 = query.getOrDefault("Action")
  valid_614745 = validateParameter(valid_614745, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_614745 != nil:
    section.add "Action", valid_614745
  var valid_614746 = query.getOrDefault("Version")
  valid_614746 = validateParameter(valid_614746, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614746 != nil:
    section.add "Version", valid_614746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614747 = header.getOrDefault("X-Amz-Signature")
  valid_614747 = validateParameter(valid_614747, JString, required = false,
                                 default = nil)
  if valid_614747 != nil:
    section.add "X-Amz-Signature", valid_614747
  var valid_614748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614748 = validateParameter(valid_614748, JString, required = false,
                                 default = nil)
  if valid_614748 != nil:
    section.add "X-Amz-Content-Sha256", valid_614748
  var valid_614749 = header.getOrDefault("X-Amz-Date")
  valid_614749 = validateParameter(valid_614749, JString, required = false,
                                 default = nil)
  if valid_614749 != nil:
    section.add "X-Amz-Date", valid_614749
  var valid_614750 = header.getOrDefault("X-Amz-Credential")
  valid_614750 = validateParameter(valid_614750, JString, required = false,
                                 default = nil)
  if valid_614750 != nil:
    section.add "X-Amz-Credential", valid_614750
  var valid_614751 = header.getOrDefault("X-Amz-Security-Token")
  valid_614751 = validateParameter(valid_614751, JString, required = false,
                                 default = nil)
  if valid_614751 != nil:
    section.add "X-Amz-Security-Token", valid_614751
  var valid_614752 = header.getOrDefault("X-Amz-Algorithm")
  valid_614752 = validateParameter(valid_614752, JString, required = false,
                                 default = nil)
  if valid_614752 != nil:
    section.add "X-Amz-Algorithm", valid_614752
  var valid_614753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614753 = validateParameter(valid_614753, JString, required = false,
                                 default = nil)
  if valid_614753 != nil:
    section.add "X-Amz-SignedHeaders", valid_614753
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_614754 = formData.getOrDefault("Identity")
  valid_614754 = validateParameter(valid_614754, JString, required = true,
                                 default = nil)
  if valid_614754 != nil:
    section.add "Identity", valid_614754
  var valid_614755 = formData.getOrDefault("Policy")
  valid_614755 = validateParameter(valid_614755, JString, required = true,
                                 default = nil)
  if valid_614755 != nil:
    section.add "Policy", valid_614755
  var valid_614756 = formData.getOrDefault("PolicyName")
  valid_614756 = validateParameter(valid_614756, JString, required = true,
                                 default = nil)
  if valid_614756 != nil:
    section.add "PolicyName", valid_614756
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614757: Call_PostPutIdentityPolicy_614742; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614757.validator(path, query, header, formData, body)
  let scheme = call_614757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614757.url(scheme.get, call_614757.host, call_614757.base,
                         call_614757.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614757, url, valid)

proc call*(call_614758: Call_PostPutIdentityPolicy_614742; Identity: string;
          Policy: string; PolicyName: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  var query_614759 = newJObject()
  var formData_614760 = newJObject()
  add(formData_614760, "Identity", newJString(Identity))
  add(formData_614760, "Policy", newJString(Policy))
  add(query_614759, "Action", newJString(Action))
  add(query_614759, "Version", newJString(Version))
  add(formData_614760, "PolicyName", newJString(PolicyName))
  result = call_614758.call(nil, query_614759, nil, formData_614760, nil)

var postPutIdentityPolicy* = Call_PostPutIdentityPolicy_614742(
    name: "postPutIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_PostPutIdentityPolicy_614743, base: "/",
    url: url_PostPutIdentityPolicy_614744, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutIdentityPolicy_614724 = ref object of OpenApiRestCall_612658
proc url_GetPutIdentityPolicy_614726(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutIdentityPolicy_614725(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_614727 = query.getOrDefault("PolicyName")
  valid_614727 = validateParameter(valid_614727, JString, required = true,
                                 default = nil)
  if valid_614727 != nil:
    section.add "PolicyName", valid_614727
  var valid_614728 = query.getOrDefault("Identity")
  valid_614728 = validateParameter(valid_614728, JString, required = true,
                                 default = nil)
  if valid_614728 != nil:
    section.add "Identity", valid_614728
  var valid_614729 = query.getOrDefault("Action")
  valid_614729 = validateParameter(valid_614729, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_614729 != nil:
    section.add "Action", valid_614729
  var valid_614730 = query.getOrDefault("Version")
  valid_614730 = validateParameter(valid_614730, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614730 != nil:
    section.add "Version", valid_614730
  var valid_614731 = query.getOrDefault("Policy")
  valid_614731 = validateParameter(valid_614731, JString, required = true,
                                 default = nil)
  if valid_614731 != nil:
    section.add "Policy", valid_614731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614732 = header.getOrDefault("X-Amz-Signature")
  valid_614732 = validateParameter(valid_614732, JString, required = false,
                                 default = nil)
  if valid_614732 != nil:
    section.add "X-Amz-Signature", valid_614732
  var valid_614733 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614733 = validateParameter(valid_614733, JString, required = false,
                                 default = nil)
  if valid_614733 != nil:
    section.add "X-Amz-Content-Sha256", valid_614733
  var valid_614734 = header.getOrDefault("X-Amz-Date")
  valid_614734 = validateParameter(valid_614734, JString, required = false,
                                 default = nil)
  if valid_614734 != nil:
    section.add "X-Amz-Date", valid_614734
  var valid_614735 = header.getOrDefault("X-Amz-Credential")
  valid_614735 = validateParameter(valid_614735, JString, required = false,
                                 default = nil)
  if valid_614735 != nil:
    section.add "X-Amz-Credential", valid_614735
  var valid_614736 = header.getOrDefault("X-Amz-Security-Token")
  valid_614736 = validateParameter(valid_614736, JString, required = false,
                                 default = nil)
  if valid_614736 != nil:
    section.add "X-Amz-Security-Token", valid_614736
  var valid_614737 = header.getOrDefault("X-Amz-Algorithm")
  valid_614737 = validateParameter(valid_614737, JString, required = false,
                                 default = nil)
  if valid_614737 != nil:
    section.add "X-Amz-Algorithm", valid_614737
  var valid_614738 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "X-Amz-SignedHeaders", valid_614738
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614739: Call_GetPutIdentityPolicy_614724; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614739.validator(path, query, header, formData, body)
  let scheme = call_614739.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614739.url(scheme.get, call_614739.host, call_614739.base,
                         call_614739.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614739, url, valid)

proc call*(call_614740: Call_GetPutIdentityPolicy_614724; PolicyName: string;
          Identity: string; Policy: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  var query_614741 = newJObject()
  add(query_614741, "PolicyName", newJString(PolicyName))
  add(query_614741, "Identity", newJString(Identity))
  add(query_614741, "Action", newJString(Action))
  add(query_614741, "Version", newJString(Version))
  add(query_614741, "Policy", newJString(Policy))
  result = call_614740.call(nil, query_614741, nil, nil, nil)

var getPutIdentityPolicy* = Call_GetPutIdentityPolicy_614724(
    name: "getPutIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_GetPutIdentityPolicy_614725, base: "/",
    url: url_GetPutIdentityPolicy_614726, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostReorderReceiptRuleSet_614778 = ref object of OpenApiRestCall_612658
proc url_PostReorderReceiptRuleSet_614780(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostReorderReceiptRuleSet_614779(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614781 = query.getOrDefault("Action")
  valid_614781 = validateParameter(valid_614781, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_614781 != nil:
    section.add "Action", valid_614781
  var valid_614782 = query.getOrDefault("Version")
  valid_614782 = validateParameter(valid_614782, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614782 != nil:
    section.add "Version", valid_614782
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614783 = header.getOrDefault("X-Amz-Signature")
  valid_614783 = validateParameter(valid_614783, JString, required = false,
                                 default = nil)
  if valid_614783 != nil:
    section.add "X-Amz-Signature", valid_614783
  var valid_614784 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614784 = validateParameter(valid_614784, JString, required = false,
                                 default = nil)
  if valid_614784 != nil:
    section.add "X-Amz-Content-Sha256", valid_614784
  var valid_614785 = header.getOrDefault("X-Amz-Date")
  valid_614785 = validateParameter(valid_614785, JString, required = false,
                                 default = nil)
  if valid_614785 != nil:
    section.add "X-Amz-Date", valid_614785
  var valid_614786 = header.getOrDefault("X-Amz-Credential")
  valid_614786 = validateParameter(valid_614786, JString, required = false,
                                 default = nil)
  if valid_614786 != nil:
    section.add "X-Amz-Credential", valid_614786
  var valid_614787 = header.getOrDefault("X-Amz-Security-Token")
  valid_614787 = validateParameter(valid_614787, JString, required = false,
                                 default = nil)
  if valid_614787 != nil:
    section.add "X-Amz-Security-Token", valid_614787
  var valid_614788 = header.getOrDefault("X-Amz-Algorithm")
  valid_614788 = validateParameter(valid_614788, JString, required = false,
                                 default = nil)
  if valid_614788 != nil:
    section.add "X-Amz-Algorithm", valid_614788
  var valid_614789 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614789 = validateParameter(valid_614789, JString, required = false,
                                 default = nil)
  if valid_614789 != nil:
    section.add "X-Amz-SignedHeaders", valid_614789
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleNames` field"
  var valid_614790 = formData.getOrDefault("RuleNames")
  valid_614790 = validateParameter(valid_614790, JArray, required = true, default = nil)
  if valid_614790 != nil:
    section.add "RuleNames", valid_614790
  var valid_614791 = formData.getOrDefault("RuleSetName")
  valid_614791 = validateParameter(valid_614791, JString, required = true,
                                 default = nil)
  if valid_614791 != nil:
    section.add "RuleSetName", valid_614791
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614792: Call_PostReorderReceiptRuleSet_614778; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614792.validator(path, query, header, formData, body)
  let scheme = call_614792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614792.url(scheme.get, call_614792.host, call_614792.base,
                         call_614792.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614792, url, valid)

proc call*(call_614793: Call_PostReorderReceiptRuleSet_614778; RuleNames: JsonNode;
          RuleSetName: string; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614794 = newJObject()
  var formData_614795 = newJObject()
  if RuleNames != nil:
    formData_614795.add "RuleNames", RuleNames
  add(formData_614795, "RuleSetName", newJString(RuleSetName))
  add(query_614794, "Action", newJString(Action))
  add(query_614794, "Version", newJString(Version))
  result = call_614793.call(nil, query_614794, nil, formData_614795, nil)

var postReorderReceiptRuleSet* = Call_PostReorderReceiptRuleSet_614778(
    name: "postReorderReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_PostReorderReceiptRuleSet_614779, base: "/",
    url: url_PostReorderReceiptRuleSet_614780,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReorderReceiptRuleSet_614761 = ref object of OpenApiRestCall_612658
proc url_GetReorderReceiptRuleSet_614763(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetReorderReceiptRuleSet_614762(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_614764 = query.getOrDefault("Action")
  valid_614764 = validateParameter(valid_614764, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_614764 != nil:
    section.add "Action", valid_614764
  var valid_614765 = query.getOrDefault("RuleSetName")
  valid_614765 = validateParameter(valid_614765, JString, required = true,
                                 default = nil)
  if valid_614765 != nil:
    section.add "RuleSetName", valid_614765
  var valid_614766 = query.getOrDefault("RuleNames")
  valid_614766 = validateParameter(valid_614766, JArray, required = true, default = nil)
  if valid_614766 != nil:
    section.add "RuleNames", valid_614766
  var valid_614767 = query.getOrDefault("Version")
  valid_614767 = validateParameter(valid_614767, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614767 != nil:
    section.add "Version", valid_614767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614768 = header.getOrDefault("X-Amz-Signature")
  valid_614768 = validateParameter(valid_614768, JString, required = false,
                                 default = nil)
  if valid_614768 != nil:
    section.add "X-Amz-Signature", valid_614768
  var valid_614769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614769 = validateParameter(valid_614769, JString, required = false,
                                 default = nil)
  if valid_614769 != nil:
    section.add "X-Amz-Content-Sha256", valid_614769
  var valid_614770 = header.getOrDefault("X-Amz-Date")
  valid_614770 = validateParameter(valid_614770, JString, required = false,
                                 default = nil)
  if valid_614770 != nil:
    section.add "X-Amz-Date", valid_614770
  var valid_614771 = header.getOrDefault("X-Amz-Credential")
  valid_614771 = validateParameter(valid_614771, JString, required = false,
                                 default = nil)
  if valid_614771 != nil:
    section.add "X-Amz-Credential", valid_614771
  var valid_614772 = header.getOrDefault("X-Amz-Security-Token")
  valid_614772 = validateParameter(valid_614772, JString, required = false,
                                 default = nil)
  if valid_614772 != nil:
    section.add "X-Amz-Security-Token", valid_614772
  var valid_614773 = header.getOrDefault("X-Amz-Algorithm")
  valid_614773 = validateParameter(valid_614773, JString, required = false,
                                 default = nil)
  if valid_614773 != nil:
    section.add "X-Amz-Algorithm", valid_614773
  var valid_614774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "X-Amz-SignedHeaders", valid_614774
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614775: Call_GetReorderReceiptRuleSet_614761; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614775.validator(path, query, header, formData, body)
  let scheme = call_614775.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614775.url(scheme.get, call_614775.host, call_614775.base,
                         call_614775.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614775, url, valid)

proc call*(call_614776: Call_GetReorderReceiptRuleSet_614761; RuleSetName: string;
          RuleNames: JsonNode; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: string (required)
  var query_614777 = newJObject()
  add(query_614777, "Action", newJString(Action))
  add(query_614777, "RuleSetName", newJString(RuleSetName))
  if RuleNames != nil:
    query_614777.add "RuleNames", RuleNames
  add(query_614777, "Version", newJString(Version))
  result = call_614776.call(nil, query_614777, nil, nil, nil)

var getReorderReceiptRuleSet* = Call_GetReorderReceiptRuleSet_614761(
    name: "getReorderReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_GetReorderReceiptRuleSet_614762, base: "/",
    url: url_GetReorderReceiptRuleSet_614763, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBounce_614819 = ref object of OpenApiRestCall_612658
proc url_PostSendBounce_614821(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendBounce_614820(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614822 = query.getOrDefault("Action")
  valid_614822 = validateParameter(valid_614822, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_614822 != nil:
    section.add "Action", valid_614822
  var valid_614823 = query.getOrDefault("Version")
  valid_614823 = validateParameter(valid_614823, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614823 != nil:
    section.add "Version", valid_614823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614824 = header.getOrDefault("X-Amz-Signature")
  valid_614824 = validateParameter(valid_614824, JString, required = false,
                                 default = nil)
  if valid_614824 != nil:
    section.add "X-Amz-Signature", valid_614824
  var valid_614825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614825 = validateParameter(valid_614825, JString, required = false,
                                 default = nil)
  if valid_614825 != nil:
    section.add "X-Amz-Content-Sha256", valid_614825
  var valid_614826 = header.getOrDefault("X-Amz-Date")
  valid_614826 = validateParameter(valid_614826, JString, required = false,
                                 default = nil)
  if valid_614826 != nil:
    section.add "X-Amz-Date", valid_614826
  var valid_614827 = header.getOrDefault("X-Amz-Credential")
  valid_614827 = validateParameter(valid_614827, JString, required = false,
                                 default = nil)
  if valid_614827 != nil:
    section.add "X-Amz-Credential", valid_614827
  var valid_614828 = header.getOrDefault("X-Amz-Security-Token")
  valid_614828 = validateParameter(valid_614828, JString, required = false,
                                 default = nil)
  if valid_614828 != nil:
    section.add "X-Amz-Security-Token", valid_614828
  var valid_614829 = header.getOrDefault("X-Amz-Algorithm")
  valid_614829 = validateParameter(valid_614829, JString, required = false,
                                 default = nil)
  if valid_614829 != nil:
    section.add "X-Amz-Algorithm", valid_614829
  var valid_614830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614830 = validateParameter(valid_614830, JString, required = false,
                                 default = nil)
  if valid_614830 != nil:
    section.add "X-Amz-SignedHeaders", valid_614830
  result.add "header", section
  ## parameters in `formData` object:
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  section = newJObject()
  var valid_614831 = formData.getOrDefault("MessageDsn.ExtensionFields")
  valid_614831 = validateParameter(valid_614831, JArray, required = false,
                                 default = nil)
  if valid_614831 != nil:
    section.add "MessageDsn.ExtensionFields", valid_614831
  assert formData != nil,
        "formData argument is necessary due to required `BounceSender` field"
  var valid_614832 = formData.getOrDefault("BounceSender")
  valid_614832 = validateParameter(valid_614832, JString, required = true,
                                 default = nil)
  if valid_614832 != nil:
    section.add "BounceSender", valid_614832
  var valid_614833 = formData.getOrDefault("MessageDsn.ReportingMta")
  valid_614833 = validateParameter(valid_614833, JString, required = false,
                                 default = nil)
  if valid_614833 != nil:
    section.add "MessageDsn.ReportingMta", valid_614833
  var valid_614834 = formData.getOrDefault("OriginalMessageId")
  valid_614834 = validateParameter(valid_614834, JString, required = true,
                                 default = nil)
  if valid_614834 != nil:
    section.add "OriginalMessageId", valid_614834
  var valid_614835 = formData.getOrDefault("BounceSenderArn")
  valid_614835 = validateParameter(valid_614835, JString, required = false,
                                 default = nil)
  if valid_614835 != nil:
    section.add "BounceSenderArn", valid_614835
  var valid_614836 = formData.getOrDefault("MessageDsn.ArrivalDate")
  valid_614836 = validateParameter(valid_614836, JString, required = false,
                                 default = nil)
  if valid_614836 != nil:
    section.add "MessageDsn.ArrivalDate", valid_614836
  var valid_614837 = formData.getOrDefault("BouncedRecipientInfoList")
  valid_614837 = validateParameter(valid_614837, JArray, required = true, default = nil)
  if valid_614837 != nil:
    section.add "BouncedRecipientInfoList", valid_614837
  var valid_614838 = formData.getOrDefault("Explanation")
  valid_614838 = validateParameter(valid_614838, JString, required = false,
                                 default = nil)
  if valid_614838 != nil:
    section.add "Explanation", valid_614838
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614839: Call_PostSendBounce_614819; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614839.validator(path, query, header, formData, body)
  let scheme = call_614839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614839.url(scheme.get, call_614839.host, call_614839.base,
                         call_614839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614839, url, valid)

proc call*(call_614840: Call_PostSendBounce_614819; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          MessageDsnExtensionFields: JsonNode = nil;
          MessageDsnReportingMta: string = ""; BounceSenderArn: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Explanation: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   Version: string (required)
  var query_614841 = newJObject()
  var formData_614842 = newJObject()
  if MessageDsnExtensionFields != nil:
    formData_614842.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  add(formData_614842, "BounceSender", newJString(BounceSender))
  add(formData_614842, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  add(formData_614842, "OriginalMessageId", newJString(OriginalMessageId))
  add(formData_614842, "BounceSenderArn", newJString(BounceSenderArn))
  add(query_614841, "Action", newJString(Action))
  add(formData_614842, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  if BouncedRecipientInfoList != nil:
    formData_614842.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(formData_614842, "Explanation", newJString(Explanation))
  add(query_614841, "Version", newJString(Version))
  result = call_614840.call(nil, query_614841, nil, formData_614842, nil)

var postSendBounce* = Call_PostSendBounce_614819(name: "postSendBounce",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_PostSendBounce_614820,
    base: "/", url: url_PostSendBounce_614821, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBounce_614796 = ref object of OpenApiRestCall_612658
proc url_GetSendBounce_614798(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendBounce_614797(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   Action: JString (required)
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   Version: JString (required)
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  section = newJObject()
  var valid_614799 = query.getOrDefault("Explanation")
  valid_614799 = validateParameter(valid_614799, JString, required = false,
                                 default = nil)
  if valid_614799 != nil:
    section.add "Explanation", valid_614799
  assert query != nil,
        "query argument is necessary due to required `BounceSender` field"
  var valid_614800 = query.getOrDefault("BounceSender")
  valid_614800 = validateParameter(valid_614800, JString, required = true,
                                 default = nil)
  if valid_614800 != nil:
    section.add "BounceSender", valid_614800
  var valid_614801 = query.getOrDefault("MessageDsn.ReportingMta")
  valid_614801 = validateParameter(valid_614801, JString, required = false,
                                 default = nil)
  if valid_614801 != nil:
    section.add "MessageDsn.ReportingMta", valid_614801
  var valid_614802 = query.getOrDefault("OriginalMessageId")
  valid_614802 = validateParameter(valid_614802, JString, required = true,
                                 default = nil)
  if valid_614802 != nil:
    section.add "OriginalMessageId", valid_614802
  var valid_614803 = query.getOrDefault("Action")
  valid_614803 = validateParameter(valid_614803, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_614803 != nil:
    section.add "Action", valid_614803
  var valid_614804 = query.getOrDefault("MessageDsn.ArrivalDate")
  valid_614804 = validateParameter(valid_614804, JString, required = false,
                                 default = nil)
  if valid_614804 != nil:
    section.add "MessageDsn.ArrivalDate", valid_614804
  var valid_614805 = query.getOrDefault("Version")
  valid_614805 = validateParameter(valid_614805, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614805 != nil:
    section.add "Version", valid_614805
  var valid_614806 = query.getOrDefault("BouncedRecipientInfoList")
  valid_614806 = validateParameter(valid_614806, JArray, required = true, default = nil)
  if valid_614806 != nil:
    section.add "BouncedRecipientInfoList", valid_614806
  var valid_614807 = query.getOrDefault("BounceSenderArn")
  valid_614807 = validateParameter(valid_614807, JString, required = false,
                                 default = nil)
  if valid_614807 != nil:
    section.add "BounceSenderArn", valid_614807
  var valid_614808 = query.getOrDefault("MessageDsn.ExtensionFields")
  valid_614808 = validateParameter(valid_614808, JArray, required = false,
                                 default = nil)
  if valid_614808 != nil:
    section.add "MessageDsn.ExtensionFields", valid_614808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614809 = header.getOrDefault("X-Amz-Signature")
  valid_614809 = validateParameter(valid_614809, JString, required = false,
                                 default = nil)
  if valid_614809 != nil:
    section.add "X-Amz-Signature", valid_614809
  var valid_614810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614810 = validateParameter(valid_614810, JString, required = false,
                                 default = nil)
  if valid_614810 != nil:
    section.add "X-Amz-Content-Sha256", valid_614810
  var valid_614811 = header.getOrDefault("X-Amz-Date")
  valid_614811 = validateParameter(valid_614811, JString, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "X-Amz-Date", valid_614811
  var valid_614812 = header.getOrDefault("X-Amz-Credential")
  valid_614812 = validateParameter(valid_614812, JString, required = false,
                                 default = nil)
  if valid_614812 != nil:
    section.add "X-Amz-Credential", valid_614812
  var valid_614813 = header.getOrDefault("X-Amz-Security-Token")
  valid_614813 = validateParameter(valid_614813, JString, required = false,
                                 default = nil)
  if valid_614813 != nil:
    section.add "X-Amz-Security-Token", valid_614813
  var valid_614814 = header.getOrDefault("X-Amz-Algorithm")
  valid_614814 = validateParameter(valid_614814, JString, required = false,
                                 default = nil)
  if valid_614814 != nil:
    section.add "X-Amz-Algorithm", valid_614814
  var valid_614815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614815 = validateParameter(valid_614815, JString, required = false,
                                 default = nil)
  if valid_614815 != nil:
    section.add "X-Amz-SignedHeaders", valid_614815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614816: Call_GetSendBounce_614796; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614816.validator(path, query, header, formData, body)
  let scheme = call_614816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614816.url(scheme.get, call_614816.host, call_614816.base,
                         call_614816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614816, url, valid)

proc call*(call_614817: Call_GetSendBounce_614796; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          Explanation: string = ""; MessageDsnReportingMta: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Version: string = "2010-12-01"; BounceSenderArn: string = "";
          MessageDsnExtensionFields: JsonNode = nil): Recallable =
  ## getSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   Version: string (required)
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  var query_614818 = newJObject()
  add(query_614818, "Explanation", newJString(Explanation))
  add(query_614818, "BounceSender", newJString(BounceSender))
  add(query_614818, "MessageDsn.ReportingMta", newJString(MessageDsnReportingMta))
  add(query_614818, "OriginalMessageId", newJString(OriginalMessageId))
  add(query_614818, "Action", newJString(Action))
  add(query_614818, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  add(query_614818, "Version", newJString(Version))
  if BouncedRecipientInfoList != nil:
    query_614818.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_614818, "BounceSenderArn", newJString(BounceSenderArn))
  if MessageDsnExtensionFields != nil:
    query_614818.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  result = call_614817.call(nil, query_614818, nil, nil, nil)

var getSendBounce* = Call_GetSendBounce_614796(name: "getSendBounce",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_GetSendBounce_614797,
    base: "/", url: url_GetSendBounce_614798, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBulkTemplatedEmail_614869 = ref object of OpenApiRestCall_612658
proc url_PostSendBulkTemplatedEmail_614871(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendBulkTemplatedEmail_614870(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614872 = query.getOrDefault("Action")
  valid_614872 = validateParameter(valid_614872, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_614872 != nil:
    section.add "Action", valid_614872
  var valid_614873 = query.getOrDefault("Version")
  valid_614873 = validateParameter(valid_614873, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614873 != nil:
    section.add "Version", valid_614873
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614874 = header.getOrDefault("X-Amz-Signature")
  valid_614874 = validateParameter(valid_614874, JString, required = false,
                                 default = nil)
  if valid_614874 != nil:
    section.add "X-Amz-Signature", valid_614874
  var valid_614875 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614875 = validateParameter(valid_614875, JString, required = false,
                                 default = nil)
  if valid_614875 != nil:
    section.add "X-Amz-Content-Sha256", valid_614875
  var valid_614876 = header.getOrDefault("X-Amz-Date")
  valid_614876 = validateParameter(valid_614876, JString, required = false,
                                 default = nil)
  if valid_614876 != nil:
    section.add "X-Amz-Date", valid_614876
  var valid_614877 = header.getOrDefault("X-Amz-Credential")
  valid_614877 = validateParameter(valid_614877, JString, required = false,
                                 default = nil)
  if valid_614877 != nil:
    section.add "X-Amz-Credential", valid_614877
  var valid_614878 = header.getOrDefault("X-Amz-Security-Token")
  valid_614878 = validateParameter(valid_614878, JString, required = false,
                                 default = nil)
  if valid_614878 != nil:
    section.add "X-Amz-Security-Token", valid_614878
  var valid_614879 = header.getOrDefault("X-Amz-Algorithm")
  valid_614879 = validateParameter(valid_614879, JString, required = false,
                                 default = nil)
  if valid_614879 != nil:
    section.add "X-Amz-Algorithm", valid_614879
  var valid_614880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614880 = validateParameter(valid_614880, JString, required = false,
                                 default = nil)
  if valid_614880 != nil:
    section.add "X-Amz-SignedHeaders", valid_614880
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  section = newJObject()
  var valid_614881 = formData.getOrDefault("ReturnPathArn")
  valid_614881 = validateParameter(valid_614881, JString, required = false,
                                 default = nil)
  if valid_614881 != nil:
    section.add "ReturnPathArn", valid_614881
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_614882 = formData.getOrDefault("Source")
  valid_614882 = validateParameter(valid_614882, JString, required = true,
                                 default = nil)
  if valid_614882 != nil:
    section.add "Source", valid_614882
  var valid_614883 = formData.getOrDefault("DefaultTemplateData")
  valid_614883 = validateParameter(valid_614883, JString, required = false,
                                 default = nil)
  if valid_614883 != nil:
    section.add "DefaultTemplateData", valid_614883
  var valid_614884 = formData.getOrDefault("TemplateArn")
  valid_614884 = validateParameter(valid_614884, JString, required = false,
                                 default = nil)
  if valid_614884 != nil:
    section.add "TemplateArn", valid_614884
  var valid_614885 = formData.getOrDefault("SourceArn")
  valid_614885 = validateParameter(valid_614885, JString, required = false,
                                 default = nil)
  if valid_614885 != nil:
    section.add "SourceArn", valid_614885
  var valid_614886 = formData.getOrDefault("ReplyToAddresses")
  valid_614886 = validateParameter(valid_614886, JArray, required = false,
                                 default = nil)
  if valid_614886 != nil:
    section.add "ReplyToAddresses", valid_614886
  var valid_614887 = formData.getOrDefault("Destinations")
  valid_614887 = validateParameter(valid_614887, JArray, required = true, default = nil)
  if valid_614887 != nil:
    section.add "Destinations", valid_614887
  var valid_614888 = formData.getOrDefault("ReturnPath")
  valid_614888 = validateParameter(valid_614888, JString, required = false,
                                 default = nil)
  if valid_614888 != nil:
    section.add "ReturnPath", valid_614888
  var valid_614889 = formData.getOrDefault("DefaultTags")
  valid_614889 = validateParameter(valid_614889, JArray, required = false,
                                 default = nil)
  if valid_614889 != nil:
    section.add "DefaultTags", valid_614889
  var valid_614890 = formData.getOrDefault("ConfigurationSetName")
  valid_614890 = validateParameter(valid_614890, JString, required = false,
                                 default = nil)
  if valid_614890 != nil:
    section.add "ConfigurationSetName", valid_614890
  var valid_614891 = formData.getOrDefault("Template")
  valid_614891 = validateParameter(valid_614891, JString, required = true,
                                 default = nil)
  if valid_614891 != nil:
    section.add "Template", valid_614891
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614892: Call_PostSendBulkTemplatedEmail_614869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_614892.validator(path, query, header, formData, body)
  let scheme = call_614892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614892.url(scheme.get, call_614892.host, call_614892.base,
                         call_614892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614892, url, valid)

proc call*(call_614893: Call_PostSendBulkTemplatedEmail_614869; Source: string;
          Destinations: JsonNode; Template: string; ReturnPathArn: string = "";
          DefaultTemplateData: string = ""; TemplateArn: string = "";
          SourceArn: string = ""; ReplyToAddresses: JsonNode = nil;
          Action: string = "SendBulkTemplatedEmail"; ReturnPath: string = "";
          DefaultTags: JsonNode = nil; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Action: string (required)
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Version: string (required)
  var query_614894 = newJObject()
  var formData_614895 = newJObject()
  add(formData_614895, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_614895, "Source", newJString(Source))
  add(formData_614895, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(formData_614895, "TemplateArn", newJString(TemplateArn))
  add(formData_614895, "SourceArn", newJString(SourceArn))
  if ReplyToAddresses != nil:
    formData_614895.add "ReplyToAddresses", ReplyToAddresses
  if Destinations != nil:
    formData_614895.add "Destinations", Destinations
  add(query_614894, "Action", newJString(Action))
  add(formData_614895, "ReturnPath", newJString(ReturnPath))
  if DefaultTags != nil:
    formData_614895.add "DefaultTags", DefaultTags
  add(formData_614895, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_614895, "Template", newJString(Template))
  add(query_614894, "Version", newJString(Version))
  result = call_614893.call(nil, query_614894, nil, formData_614895, nil)

var postSendBulkTemplatedEmail* = Call_PostSendBulkTemplatedEmail_614869(
    name: "postSendBulkTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_PostSendBulkTemplatedEmail_614870, base: "/",
    url: url_PostSendBulkTemplatedEmail_614871,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBulkTemplatedEmail_614843 = ref object of OpenApiRestCall_612658
proc url_GetSendBulkTemplatedEmail_614845(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendBulkTemplatedEmail_614844(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  section = newJObject()
  var valid_614846 = query.getOrDefault("SourceArn")
  valid_614846 = validateParameter(valid_614846, JString, required = false,
                                 default = nil)
  if valid_614846 != nil:
    section.add "SourceArn", valid_614846
  assert query != nil,
        "query argument is necessary due to required `Destinations` field"
  var valid_614847 = query.getOrDefault("Destinations")
  valid_614847 = validateParameter(valid_614847, JArray, required = true, default = nil)
  if valid_614847 != nil:
    section.add "Destinations", valid_614847
  var valid_614848 = query.getOrDefault("ReturnPath")
  valid_614848 = validateParameter(valid_614848, JString, required = false,
                                 default = nil)
  if valid_614848 != nil:
    section.add "ReturnPath", valid_614848
  var valid_614849 = query.getOrDefault("Source")
  valid_614849 = validateParameter(valid_614849, JString, required = true,
                                 default = nil)
  if valid_614849 != nil:
    section.add "Source", valid_614849
  var valid_614850 = query.getOrDefault("ConfigurationSetName")
  valid_614850 = validateParameter(valid_614850, JString, required = false,
                                 default = nil)
  if valid_614850 != nil:
    section.add "ConfigurationSetName", valid_614850
  var valid_614851 = query.getOrDefault("DefaultTemplateData")
  valid_614851 = validateParameter(valid_614851, JString, required = false,
                                 default = nil)
  if valid_614851 != nil:
    section.add "DefaultTemplateData", valid_614851
  var valid_614852 = query.getOrDefault("Template")
  valid_614852 = validateParameter(valid_614852, JString, required = true,
                                 default = nil)
  if valid_614852 != nil:
    section.add "Template", valid_614852
  var valid_614853 = query.getOrDefault("Action")
  valid_614853 = validateParameter(valid_614853, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_614853 != nil:
    section.add "Action", valid_614853
  var valid_614854 = query.getOrDefault("Version")
  valid_614854 = validateParameter(valid_614854, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614854 != nil:
    section.add "Version", valid_614854
  var valid_614855 = query.getOrDefault("ReturnPathArn")
  valid_614855 = validateParameter(valid_614855, JString, required = false,
                                 default = nil)
  if valid_614855 != nil:
    section.add "ReturnPathArn", valid_614855
  var valid_614856 = query.getOrDefault("DefaultTags")
  valid_614856 = validateParameter(valid_614856, JArray, required = false,
                                 default = nil)
  if valid_614856 != nil:
    section.add "DefaultTags", valid_614856
  var valid_614857 = query.getOrDefault("ReplyToAddresses")
  valid_614857 = validateParameter(valid_614857, JArray, required = false,
                                 default = nil)
  if valid_614857 != nil:
    section.add "ReplyToAddresses", valid_614857
  var valid_614858 = query.getOrDefault("TemplateArn")
  valid_614858 = validateParameter(valid_614858, JString, required = false,
                                 default = nil)
  if valid_614858 != nil:
    section.add "TemplateArn", valid_614858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614859 = header.getOrDefault("X-Amz-Signature")
  valid_614859 = validateParameter(valid_614859, JString, required = false,
                                 default = nil)
  if valid_614859 != nil:
    section.add "X-Amz-Signature", valid_614859
  var valid_614860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614860 = validateParameter(valid_614860, JString, required = false,
                                 default = nil)
  if valid_614860 != nil:
    section.add "X-Amz-Content-Sha256", valid_614860
  var valid_614861 = header.getOrDefault("X-Amz-Date")
  valid_614861 = validateParameter(valid_614861, JString, required = false,
                                 default = nil)
  if valid_614861 != nil:
    section.add "X-Amz-Date", valid_614861
  var valid_614862 = header.getOrDefault("X-Amz-Credential")
  valid_614862 = validateParameter(valid_614862, JString, required = false,
                                 default = nil)
  if valid_614862 != nil:
    section.add "X-Amz-Credential", valid_614862
  var valid_614863 = header.getOrDefault("X-Amz-Security-Token")
  valid_614863 = validateParameter(valid_614863, JString, required = false,
                                 default = nil)
  if valid_614863 != nil:
    section.add "X-Amz-Security-Token", valid_614863
  var valid_614864 = header.getOrDefault("X-Amz-Algorithm")
  valid_614864 = validateParameter(valid_614864, JString, required = false,
                                 default = nil)
  if valid_614864 != nil:
    section.add "X-Amz-Algorithm", valid_614864
  var valid_614865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614865 = validateParameter(valid_614865, JString, required = false,
                                 default = nil)
  if valid_614865 != nil:
    section.add "X-Amz-SignedHeaders", valid_614865
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614866: Call_GetSendBulkTemplatedEmail_614843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_614866.validator(path, query, header, formData, body)
  let scheme = call_614866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614866.url(scheme.get, call_614866.host, call_614866.base,
                         call_614866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614866, url, valid)

proc call*(call_614867: Call_GetSendBulkTemplatedEmail_614843;
          Destinations: JsonNode; Source: string; Template: string;
          SourceArn: string = ""; ReturnPath: string = "";
          ConfigurationSetName: string = ""; DefaultTemplateData: string = "";
          Action: string = "SendBulkTemplatedEmail"; Version: string = "2010-12-01";
          ReturnPathArn: string = ""; DefaultTags: JsonNode = nil;
          ReplyToAddresses: JsonNode = nil; TemplateArn: string = ""): Recallable =
  ## getSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  var query_614868 = newJObject()
  add(query_614868, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    query_614868.add "Destinations", Destinations
  add(query_614868, "ReturnPath", newJString(ReturnPath))
  add(query_614868, "Source", newJString(Source))
  add(query_614868, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614868, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(query_614868, "Template", newJString(Template))
  add(query_614868, "Action", newJString(Action))
  add(query_614868, "Version", newJString(Version))
  add(query_614868, "ReturnPathArn", newJString(ReturnPathArn))
  if DefaultTags != nil:
    query_614868.add "DefaultTags", DefaultTags
  if ReplyToAddresses != nil:
    query_614868.add "ReplyToAddresses", ReplyToAddresses
  add(query_614868, "TemplateArn", newJString(TemplateArn))
  result = call_614867.call(nil, query_614868, nil, nil, nil)

var getSendBulkTemplatedEmail* = Call_GetSendBulkTemplatedEmail_614843(
    name: "getSendBulkTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_GetSendBulkTemplatedEmail_614844, base: "/",
    url: url_GetSendBulkTemplatedEmail_614845,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendCustomVerificationEmail_614914 = ref object of OpenApiRestCall_612658
proc url_PostSendCustomVerificationEmail_614916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendCustomVerificationEmail_614915(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614917 = query.getOrDefault("Action")
  valid_614917 = validateParameter(valid_614917, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_614917 != nil:
    section.add "Action", valid_614917
  var valid_614918 = query.getOrDefault("Version")
  valid_614918 = validateParameter(valid_614918, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614918 != nil:
    section.add "Version", valid_614918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614919 = header.getOrDefault("X-Amz-Signature")
  valid_614919 = validateParameter(valid_614919, JString, required = false,
                                 default = nil)
  if valid_614919 != nil:
    section.add "X-Amz-Signature", valid_614919
  var valid_614920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614920 = validateParameter(valid_614920, JString, required = false,
                                 default = nil)
  if valid_614920 != nil:
    section.add "X-Amz-Content-Sha256", valid_614920
  var valid_614921 = header.getOrDefault("X-Amz-Date")
  valid_614921 = validateParameter(valid_614921, JString, required = false,
                                 default = nil)
  if valid_614921 != nil:
    section.add "X-Amz-Date", valid_614921
  var valid_614922 = header.getOrDefault("X-Amz-Credential")
  valid_614922 = validateParameter(valid_614922, JString, required = false,
                                 default = nil)
  if valid_614922 != nil:
    section.add "X-Amz-Credential", valid_614922
  var valid_614923 = header.getOrDefault("X-Amz-Security-Token")
  valid_614923 = validateParameter(valid_614923, JString, required = false,
                                 default = nil)
  if valid_614923 != nil:
    section.add "X-Amz-Security-Token", valid_614923
  var valid_614924 = header.getOrDefault("X-Amz-Algorithm")
  valid_614924 = validateParameter(valid_614924, JString, required = false,
                                 default = nil)
  if valid_614924 != nil:
    section.add "X-Amz-Algorithm", valid_614924
  var valid_614925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614925 = validateParameter(valid_614925, JString, required = false,
                                 default = nil)
  if valid_614925 != nil:
    section.add "X-Amz-SignedHeaders", valid_614925
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_614926 = formData.getOrDefault("TemplateName")
  valid_614926 = validateParameter(valid_614926, JString, required = true,
                                 default = nil)
  if valid_614926 != nil:
    section.add "TemplateName", valid_614926
  var valid_614927 = formData.getOrDefault("ConfigurationSetName")
  valid_614927 = validateParameter(valid_614927, JString, required = false,
                                 default = nil)
  if valid_614927 != nil:
    section.add "ConfigurationSetName", valid_614927
  var valid_614928 = formData.getOrDefault("EmailAddress")
  valid_614928 = validateParameter(valid_614928, JString, required = true,
                                 default = nil)
  if valid_614928 != nil:
    section.add "EmailAddress", valid_614928
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614929: Call_PostSendCustomVerificationEmail_614914;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614929.validator(path, query, header, formData, body)
  let scheme = call_614929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614929.url(scheme.get, call_614929.host, call_614929.base,
                         call_614929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614929, url, valid)

proc call*(call_614930: Call_PostSendCustomVerificationEmail_614914;
          TemplateName: string; EmailAddress: string;
          Action: string = "SendCustomVerificationEmail";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Action: string (required)
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  var query_614931 = newJObject()
  var formData_614932 = newJObject()
  add(formData_614932, "TemplateName", newJString(TemplateName))
  add(query_614931, "Action", newJString(Action))
  add(formData_614932, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614931, "Version", newJString(Version))
  add(formData_614932, "EmailAddress", newJString(EmailAddress))
  result = call_614930.call(nil, query_614931, nil, formData_614932, nil)

var postSendCustomVerificationEmail* = Call_PostSendCustomVerificationEmail_614914(
    name: "postSendCustomVerificationEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_PostSendCustomVerificationEmail_614915, base: "/",
    url: url_PostSendCustomVerificationEmail_614916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendCustomVerificationEmail_614896 = ref object of OpenApiRestCall_612658
proc url_GetSendCustomVerificationEmail_614898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendCustomVerificationEmail_614897(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: JString (required)
  section = newJObject()
  var valid_614899 = query.getOrDefault("ConfigurationSetName")
  valid_614899 = validateParameter(valid_614899, JString, required = false,
                                 default = nil)
  if valid_614899 != nil:
    section.add "ConfigurationSetName", valid_614899
  var valid_614900 = query.getOrDefault("Action")
  valid_614900 = validateParameter(valid_614900, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_614900 != nil:
    section.add "Action", valid_614900
  var valid_614901 = query.getOrDefault("EmailAddress")
  valid_614901 = validateParameter(valid_614901, JString, required = true,
                                 default = nil)
  if valid_614901 != nil:
    section.add "EmailAddress", valid_614901
  var valid_614902 = query.getOrDefault("TemplateName")
  valid_614902 = validateParameter(valid_614902, JString, required = true,
                                 default = nil)
  if valid_614902 != nil:
    section.add "TemplateName", valid_614902
  var valid_614903 = query.getOrDefault("Version")
  valid_614903 = validateParameter(valid_614903, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614903 != nil:
    section.add "Version", valid_614903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614904 = header.getOrDefault("X-Amz-Signature")
  valid_614904 = validateParameter(valid_614904, JString, required = false,
                                 default = nil)
  if valid_614904 != nil:
    section.add "X-Amz-Signature", valid_614904
  var valid_614905 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614905 = validateParameter(valid_614905, JString, required = false,
                                 default = nil)
  if valid_614905 != nil:
    section.add "X-Amz-Content-Sha256", valid_614905
  var valid_614906 = header.getOrDefault("X-Amz-Date")
  valid_614906 = validateParameter(valid_614906, JString, required = false,
                                 default = nil)
  if valid_614906 != nil:
    section.add "X-Amz-Date", valid_614906
  var valid_614907 = header.getOrDefault("X-Amz-Credential")
  valid_614907 = validateParameter(valid_614907, JString, required = false,
                                 default = nil)
  if valid_614907 != nil:
    section.add "X-Amz-Credential", valid_614907
  var valid_614908 = header.getOrDefault("X-Amz-Security-Token")
  valid_614908 = validateParameter(valid_614908, JString, required = false,
                                 default = nil)
  if valid_614908 != nil:
    section.add "X-Amz-Security-Token", valid_614908
  var valid_614909 = header.getOrDefault("X-Amz-Algorithm")
  valid_614909 = validateParameter(valid_614909, JString, required = false,
                                 default = nil)
  if valid_614909 != nil:
    section.add "X-Amz-Algorithm", valid_614909
  var valid_614910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614910 = validateParameter(valid_614910, JString, required = false,
                                 default = nil)
  if valid_614910 != nil:
    section.add "X-Amz-SignedHeaders", valid_614910
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614911: Call_GetSendCustomVerificationEmail_614896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_614911.validator(path, query, header, formData, body)
  let scheme = call_614911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614911.url(scheme.get, call_614911.host, call_614911.base,
                         call_614911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614911, url, valid)

proc call*(call_614912: Call_GetSendCustomVerificationEmail_614896;
          EmailAddress: string; TemplateName: string;
          ConfigurationSetName: string = "";
          Action: string = "SendCustomVerificationEmail";
          Version: string = "2010-12-01"): Recallable =
  ## getSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: string (required)
  var query_614913 = newJObject()
  add(query_614913, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614913, "Action", newJString(Action))
  add(query_614913, "EmailAddress", newJString(EmailAddress))
  add(query_614913, "TemplateName", newJString(TemplateName))
  add(query_614913, "Version", newJString(Version))
  result = call_614912.call(nil, query_614913, nil, nil, nil)

var getSendCustomVerificationEmail* = Call_GetSendCustomVerificationEmail_614896(
    name: "getSendCustomVerificationEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_GetSendCustomVerificationEmail_614897, base: "/",
    url: url_GetSendCustomVerificationEmail_614898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendEmail_614960 = ref object of OpenApiRestCall_612658
proc url_PostSendEmail_614962(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendEmail_614961(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614963 = query.getOrDefault("Action")
  valid_614963 = validateParameter(valid_614963, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_614963 != nil:
    section.add "Action", valid_614963
  var valid_614964 = query.getOrDefault("Version")
  valid_614964 = validateParameter(valid_614964, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614964 != nil:
    section.add "Version", valid_614964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614965 = header.getOrDefault("X-Amz-Signature")
  valid_614965 = validateParameter(valid_614965, JString, required = false,
                                 default = nil)
  if valid_614965 != nil:
    section.add "X-Amz-Signature", valid_614965
  var valid_614966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614966 = validateParameter(valid_614966, JString, required = false,
                                 default = nil)
  if valid_614966 != nil:
    section.add "X-Amz-Content-Sha256", valid_614966
  var valid_614967 = header.getOrDefault("X-Amz-Date")
  valid_614967 = validateParameter(valid_614967, JString, required = false,
                                 default = nil)
  if valid_614967 != nil:
    section.add "X-Amz-Date", valid_614967
  var valid_614968 = header.getOrDefault("X-Amz-Credential")
  valid_614968 = validateParameter(valid_614968, JString, required = false,
                                 default = nil)
  if valid_614968 != nil:
    section.add "X-Amz-Credential", valid_614968
  var valid_614969 = header.getOrDefault("X-Amz-Security-Token")
  valid_614969 = validateParameter(valid_614969, JString, required = false,
                                 default = nil)
  if valid_614969 != nil:
    section.add "X-Amz-Security-Token", valid_614969
  var valid_614970 = header.getOrDefault("X-Amz-Algorithm")
  valid_614970 = validateParameter(valid_614970, JString, required = false,
                                 default = nil)
  if valid_614970 != nil:
    section.add "X-Amz-Algorithm", valid_614970
  var valid_614971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614971 = validateParameter(valid_614971, JString, required = false,
                                 default = nil)
  if valid_614971 != nil:
    section.add "X-Amz-SignedHeaders", valid_614971
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  section = newJObject()
  var valid_614972 = formData.getOrDefault("ReturnPathArn")
  valid_614972 = validateParameter(valid_614972, JString, required = false,
                                 default = nil)
  if valid_614972 != nil:
    section.add "ReturnPathArn", valid_614972
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_614973 = formData.getOrDefault("Source")
  valid_614973 = validateParameter(valid_614973, JString, required = true,
                                 default = nil)
  if valid_614973 != nil:
    section.add "Source", valid_614973
  var valid_614974 = formData.getOrDefault("Destination.CcAddresses")
  valid_614974 = validateParameter(valid_614974, JArray, required = false,
                                 default = nil)
  if valid_614974 != nil:
    section.add "Destination.CcAddresses", valid_614974
  var valid_614975 = formData.getOrDefault("SourceArn")
  valid_614975 = validateParameter(valid_614975, JString, required = false,
                                 default = nil)
  if valid_614975 != nil:
    section.add "SourceArn", valid_614975
  var valid_614976 = formData.getOrDefault("ReplyToAddresses")
  valid_614976 = validateParameter(valid_614976, JArray, required = false,
                                 default = nil)
  if valid_614976 != nil:
    section.add "ReplyToAddresses", valid_614976
  var valid_614977 = formData.getOrDefault("Message.Body")
  valid_614977 = validateParameter(valid_614977, JString, required = false,
                                 default = nil)
  if valid_614977 != nil:
    section.add "Message.Body", valid_614977
  var valid_614978 = formData.getOrDefault("Destination.BccAddresses")
  valid_614978 = validateParameter(valid_614978, JArray, required = false,
                                 default = nil)
  if valid_614978 != nil:
    section.add "Destination.BccAddresses", valid_614978
  var valid_614979 = formData.getOrDefault("Message.Subject")
  valid_614979 = validateParameter(valid_614979, JString, required = false,
                                 default = nil)
  if valid_614979 != nil:
    section.add "Message.Subject", valid_614979
  var valid_614980 = formData.getOrDefault("ReturnPath")
  valid_614980 = validateParameter(valid_614980, JString, required = false,
                                 default = nil)
  if valid_614980 != nil:
    section.add "ReturnPath", valid_614980
  var valid_614981 = formData.getOrDefault("Tags")
  valid_614981 = validateParameter(valid_614981, JArray, required = false,
                                 default = nil)
  if valid_614981 != nil:
    section.add "Tags", valid_614981
  var valid_614982 = formData.getOrDefault("Destination.ToAddresses")
  valid_614982 = validateParameter(valid_614982, JArray, required = false,
                                 default = nil)
  if valid_614982 != nil:
    section.add "Destination.ToAddresses", valid_614982
  var valid_614983 = formData.getOrDefault("ConfigurationSetName")
  valid_614983 = validateParameter(valid_614983, JString, required = false,
                                 default = nil)
  if valid_614983 != nil:
    section.add "ConfigurationSetName", valid_614983
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614984: Call_PostSendEmail_614960; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_614984.validator(path, query, header, formData, body)
  let scheme = call_614984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614984.url(scheme.get, call_614984.host, call_614984.base,
                         call_614984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614984, url, valid)

proc call*(call_614985: Call_PostSendEmail_614960; Source: string;
          ReturnPathArn: string = ""; DestinationCcAddresses: JsonNode = nil;
          SourceArn: string = ""; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""; DestinationBccAddresses: JsonNode = nil;
          MessageSubject: string = ""; Action: string = "SendEmail";
          ReturnPath: string = ""; Tags: JsonNode = nil;
          DestinationToAddresses: JsonNode = nil; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Action: string (required)
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: string (required)
  var query_614986 = newJObject()
  var formData_614987 = newJObject()
  add(formData_614987, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_614987, "Source", newJString(Source))
  if DestinationCcAddresses != nil:
    formData_614987.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_614987, "SourceArn", newJString(SourceArn))
  if ReplyToAddresses != nil:
    formData_614987.add "ReplyToAddresses", ReplyToAddresses
  add(formData_614987, "Message.Body", newJString(MessageBody))
  if DestinationBccAddresses != nil:
    formData_614987.add "Destination.BccAddresses", DestinationBccAddresses
  add(formData_614987, "Message.Subject", newJString(MessageSubject))
  add(query_614986, "Action", newJString(Action))
  add(formData_614987, "ReturnPath", newJString(ReturnPath))
  if Tags != nil:
    formData_614987.add "Tags", Tags
  if DestinationToAddresses != nil:
    formData_614987.add "Destination.ToAddresses", DestinationToAddresses
  add(formData_614987, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_614986, "Version", newJString(Version))
  result = call_614985.call(nil, query_614986, nil, formData_614987, nil)

var postSendEmail* = Call_PostSendEmail_614960(name: "postSendEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_PostSendEmail_614961,
    base: "/", url: url_PostSendEmail_614962, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendEmail_614933 = ref object of OpenApiRestCall_612658
proc url_GetSendEmail_614935(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendEmail_614934(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Action: JString (required)
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  section = newJObject()
  var valid_614936 = query.getOrDefault("SourceArn")
  valid_614936 = validateParameter(valid_614936, JString, required = false,
                                 default = nil)
  if valid_614936 != nil:
    section.add "SourceArn", valid_614936
  var valid_614937 = query.getOrDefault("ReturnPath")
  valid_614937 = validateParameter(valid_614937, JString, required = false,
                                 default = nil)
  if valid_614937 != nil:
    section.add "ReturnPath", valid_614937
  assert query != nil, "query argument is necessary due to required `Source` field"
  var valid_614938 = query.getOrDefault("Source")
  valid_614938 = validateParameter(valid_614938, JString, required = true,
                                 default = nil)
  if valid_614938 != nil:
    section.add "Source", valid_614938
  var valid_614939 = query.getOrDefault("Tags")
  valid_614939 = validateParameter(valid_614939, JArray, required = false,
                                 default = nil)
  if valid_614939 != nil:
    section.add "Tags", valid_614939
  var valid_614940 = query.getOrDefault("ConfigurationSetName")
  valid_614940 = validateParameter(valid_614940, JString, required = false,
                                 default = nil)
  if valid_614940 != nil:
    section.add "ConfigurationSetName", valid_614940
  var valid_614941 = query.getOrDefault("Destination.CcAddresses")
  valid_614941 = validateParameter(valid_614941, JArray, required = false,
                                 default = nil)
  if valid_614941 != nil:
    section.add "Destination.CcAddresses", valid_614941
  var valid_614942 = query.getOrDefault("Action")
  valid_614942 = validateParameter(valid_614942, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_614942 != nil:
    section.add "Action", valid_614942
  var valid_614943 = query.getOrDefault("Message.Subject")
  valid_614943 = validateParameter(valid_614943, JString, required = false,
                                 default = nil)
  if valid_614943 != nil:
    section.add "Message.Subject", valid_614943
  var valid_614944 = query.getOrDefault("Destination.ToAddresses")
  valid_614944 = validateParameter(valid_614944, JArray, required = false,
                                 default = nil)
  if valid_614944 != nil:
    section.add "Destination.ToAddresses", valid_614944
  var valid_614945 = query.getOrDefault("Destination.BccAddresses")
  valid_614945 = validateParameter(valid_614945, JArray, required = false,
                                 default = nil)
  if valid_614945 != nil:
    section.add "Destination.BccAddresses", valid_614945
  var valid_614946 = query.getOrDefault("Version")
  valid_614946 = validateParameter(valid_614946, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614946 != nil:
    section.add "Version", valid_614946
  var valid_614947 = query.getOrDefault("ReturnPathArn")
  valid_614947 = validateParameter(valid_614947, JString, required = false,
                                 default = nil)
  if valid_614947 != nil:
    section.add "ReturnPathArn", valid_614947
  var valid_614948 = query.getOrDefault("ReplyToAddresses")
  valid_614948 = validateParameter(valid_614948, JArray, required = false,
                                 default = nil)
  if valid_614948 != nil:
    section.add "ReplyToAddresses", valid_614948
  var valid_614949 = query.getOrDefault("Message.Body")
  valid_614949 = validateParameter(valid_614949, JString, required = false,
                                 default = nil)
  if valid_614949 != nil:
    section.add "Message.Body", valid_614949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614950 = header.getOrDefault("X-Amz-Signature")
  valid_614950 = validateParameter(valid_614950, JString, required = false,
                                 default = nil)
  if valid_614950 != nil:
    section.add "X-Amz-Signature", valid_614950
  var valid_614951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614951 = validateParameter(valid_614951, JString, required = false,
                                 default = nil)
  if valid_614951 != nil:
    section.add "X-Amz-Content-Sha256", valid_614951
  var valid_614952 = header.getOrDefault("X-Amz-Date")
  valid_614952 = validateParameter(valid_614952, JString, required = false,
                                 default = nil)
  if valid_614952 != nil:
    section.add "X-Amz-Date", valid_614952
  var valid_614953 = header.getOrDefault("X-Amz-Credential")
  valid_614953 = validateParameter(valid_614953, JString, required = false,
                                 default = nil)
  if valid_614953 != nil:
    section.add "X-Amz-Credential", valid_614953
  var valid_614954 = header.getOrDefault("X-Amz-Security-Token")
  valid_614954 = validateParameter(valid_614954, JString, required = false,
                                 default = nil)
  if valid_614954 != nil:
    section.add "X-Amz-Security-Token", valid_614954
  var valid_614955 = header.getOrDefault("X-Amz-Algorithm")
  valid_614955 = validateParameter(valid_614955, JString, required = false,
                                 default = nil)
  if valid_614955 != nil:
    section.add "X-Amz-Algorithm", valid_614955
  var valid_614956 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614956 = validateParameter(valid_614956, JString, required = false,
                                 default = nil)
  if valid_614956 != nil:
    section.add "X-Amz-SignedHeaders", valid_614956
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614957: Call_GetSendEmail_614933; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_614957.validator(path, query, header, formData, body)
  let scheme = call_614957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614957.url(scheme.get, call_614957.host, call_614957.base,
                         call_614957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614957, url, valid)

proc call*(call_614958: Call_GetSendEmail_614933; Source: string;
          SourceArn: string = ""; ReturnPath: string = ""; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; DestinationCcAddresses: JsonNode = nil;
          Action: string = "SendEmail"; MessageSubject: string = "";
          DestinationToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; Version: string = "2010-12-01";
          ReturnPathArn: string = ""; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""): Recallable =
  ## getSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Action: string (required)
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  var query_614959 = newJObject()
  add(query_614959, "SourceArn", newJString(SourceArn))
  add(query_614959, "ReturnPath", newJString(ReturnPath))
  add(query_614959, "Source", newJString(Source))
  if Tags != nil:
    query_614959.add "Tags", Tags
  add(query_614959, "ConfigurationSetName", newJString(ConfigurationSetName))
  if DestinationCcAddresses != nil:
    query_614959.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_614959, "Action", newJString(Action))
  add(query_614959, "Message.Subject", newJString(MessageSubject))
  if DestinationToAddresses != nil:
    query_614959.add "Destination.ToAddresses", DestinationToAddresses
  if DestinationBccAddresses != nil:
    query_614959.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_614959, "Version", newJString(Version))
  add(query_614959, "ReturnPathArn", newJString(ReturnPathArn))
  if ReplyToAddresses != nil:
    query_614959.add "ReplyToAddresses", ReplyToAddresses
  add(query_614959, "Message.Body", newJString(MessageBody))
  result = call_614958.call(nil, query_614959, nil, nil, nil)

var getSendEmail* = Call_GetSendEmail_614933(name: "getSendEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_GetSendEmail_614934, base: "/",
    url: url_GetSendEmail_614935, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendRawEmail_615011 = ref object of OpenApiRestCall_612658
proc url_PostSendRawEmail_615013(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendRawEmail_615012(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615014 = query.getOrDefault("Action")
  valid_615014 = validateParameter(valid_615014, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_615014 != nil:
    section.add "Action", valid_615014
  var valid_615015 = query.getOrDefault("Version")
  valid_615015 = validateParameter(valid_615015, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615015 != nil:
    section.add "Version", valid_615015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615016 = header.getOrDefault("X-Amz-Signature")
  valid_615016 = validateParameter(valid_615016, JString, required = false,
                                 default = nil)
  if valid_615016 != nil:
    section.add "X-Amz-Signature", valid_615016
  var valid_615017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615017 = validateParameter(valid_615017, JString, required = false,
                                 default = nil)
  if valid_615017 != nil:
    section.add "X-Amz-Content-Sha256", valid_615017
  var valid_615018 = header.getOrDefault("X-Amz-Date")
  valid_615018 = validateParameter(valid_615018, JString, required = false,
                                 default = nil)
  if valid_615018 != nil:
    section.add "X-Amz-Date", valid_615018
  var valid_615019 = header.getOrDefault("X-Amz-Credential")
  valid_615019 = validateParameter(valid_615019, JString, required = false,
                                 default = nil)
  if valid_615019 != nil:
    section.add "X-Amz-Credential", valid_615019
  var valid_615020 = header.getOrDefault("X-Amz-Security-Token")
  valid_615020 = validateParameter(valid_615020, JString, required = false,
                                 default = nil)
  if valid_615020 != nil:
    section.add "X-Amz-Security-Token", valid_615020
  var valid_615021 = header.getOrDefault("X-Amz-Algorithm")
  valid_615021 = validateParameter(valid_615021, JString, required = false,
                                 default = nil)
  if valid_615021 != nil:
    section.add "X-Amz-Algorithm", valid_615021
  var valid_615022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615022 = validateParameter(valid_615022, JString, required = false,
                                 default = nil)
  if valid_615022 != nil:
    section.add "X-Amz-SignedHeaders", valid_615022
  result.add "header", section
  ## parameters in `formData` object:
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  section = newJObject()
  var valid_615023 = formData.getOrDefault("FromArn")
  valid_615023 = validateParameter(valid_615023, JString, required = false,
                                 default = nil)
  if valid_615023 != nil:
    section.add "FromArn", valid_615023
  var valid_615024 = formData.getOrDefault("ReturnPathArn")
  valid_615024 = validateParameter(valid_615024, JString, required = false,
                                 default = nil)
  if valid_615024 != nil:
    section.add "ReturnPathArn", valid_615024
  var valid_615025 = formData.getOrDefault("Source")
  valid_615025 = validateParameter(valid_615025, JString, required = false,
                                 default = nil)
  if valid_615025 != nil:
    section.add "Source", valid_615025
  var valid_615026 = formData.getOrDefault("RawMessage.Data")
  valid_615026 = validateParameter(valid_615026, JString, required = false,
                                 default = nil)
  if valid_615026 != nil:
    section.add "RawMessage.Data", valid_615026
  var valid_615027 = formData.getOrDefault("SourceArn")
  valid_615027 = validateParameter(valid_615027, JString, required = false,
                                 default = nil)
  if valid_615027 != nil:
    section.add "SourceArn", valid_615027
  var valid_615028 = formData.getOrDefault("Destinations")
  valid_615028 = validateParameter(valid_615028, JArray, required = false,
                                 default = nil)
  if valid_615028 != nil:
    section.add "Destinations", valid_615028
  var valid_615029 = formData.getOrDefault("Tags")
  valid_615029 = validateParameter(valid_615029, JArray, required = false,
                                 default = nil)
  if valid_615029 != nil:
    section.add "Tags", valid_615029
  var valid_615030 = formData.getOrDefault("ConfigurationSetName")
  valid_615030 = validateParameter(valid_615030, JString, required = false,
                                 default = nil)
  if valid_615030 != nil:
    section.add "ConfigurationSetName", valid_615030
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615031: Call_PostSendRawEmail_615011; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_615031.validator(path, query, header, formData, body)
  let scheme = call_615031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615031.url(scheme.get, call_615031.host, call_615031.base,
                         call_615031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615031, url, valid)

proc call*(call_615032: Call_PostSendRawEmail_615011; FromArn: string = "";
          ReturnPathArn: string = ""; Source: string = ""; RawMessageData: string = "";
          SourceArn: string = ""; Destinations: JsonNode = nil;
          Action: string = "SendRawEmail"; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: string (required)
  var query_615033 = newJObject()
  var formData_615034 = newJObject()
  add(formData_615034, "FromArn", newJString(FromArn))
  add(formData_615034, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_615034, "Source", newJString(Source))
  add(formData_615034, "RawMessage.Data", newJString(RawMessageData))
  add(formData_615034, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_615034.add "Destinations", Destinations
  add(query_615033, "Action", newJString(Action))
  if Tags != nil:
    formData_615034.add "Tags", Tags
  add(formData_615034, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615033, "Version", newJString(Version))
  result = call_615032.call(nil, query_615033, nil, formData_615034, nil)

var postSendRawEmail* = Call_PostSendRawEmail_615011(name: "postSendRawEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_PostSendRawEmail_615012,
    base: "/", url: url_PostSendRawEmail_615013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendRawEmail_614988 = ref object of OpenApiRestCall_612658
proc url_GetSendRawEmail_614990(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendRawEmail_614989(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Action: JString (required)
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  section = newJObject()
  var valid_614991 = query.getOrDefault("SourceArn")
  valid_614991 = validateParameter(valid_614991, JString, required = false,
                                 default = nil)
  if valid_614991 != nil:
    section.add "SourceArn", valid_614991
  var valid_614992 = query.getOrDefault("Destinations")
  valid_614992 = validateParameter(valid_614992, JArray, required = false,
                                 default = nil)
  if valid_614992 != nil:
    section.add "Destinations", valid_614992
  var valid_614993 = query.getOrDefault("Source")
  valid_614993 = validateParameter(valid_614993, JString, required = false,
                                 default = nil)
  if valid_614993 != nil:
    section.add "Source", valid_614993
  var valid_614994 = query.getOrDefault("RawMessage.Data")
  valid_614994 = validateParameter(valid_614994, JString, required = false,
                                 default = nil)
  if valid_614994 != nil:
    section.add "RawMessage.Data", valid_614994
  var valid_614995 = query.getOrDefault("Tags")
  valid_614995 = validateParameter(valid_614995, JArray, required = false,
                                 default = nil)
  if valid_614995 != nil:
    section.add "Tags", valid_614995
  var valid_614996 = query.getOrDefault("ConfigurationSetName")
  valid_614996 = validateParameter(valid_614996, JString, required = false,
                                 default = nil)
  if valid_614996 != nil:
    section.add "ConfigurationSetName", valid_614996
  var valid_614997 = query.getOrDefault("Action")
  valid_614997 = validateParameter(valid_614997, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_614997 != nil:
    section.add "Action", valid_614997
  var valid_614998 = query.getOrDefault("FromArn")
  valid_614998 = validateParameter(valid_614998, JString, required = false,
                                 default = nil)
  if valid_614998 != nil:
    section.add "FromArn", valid_614998
  var valid_614999 = query.getOrDefault("Version")
  valid_614999 = validateParameter(valid_614999, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_614999 != nil:
    section.add "Version", valid_614999
  var valid_615000 = query.getOrDefault("ReturnPathArn")
  valid_615000 = validateParameter(valid_615000, JString, required = false,
                                 default = nil)
  if valid_615000 != nil:
    section.add "ReturnPathArn", valid_615000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615001 = header.getOrDefault("X-Amz-Signature")
  valid_615001 = validateParameter(valid_615001, JString, required = false,
                                 default = nil)
  if valid_615001 != nil:
    section.add "X-Amz-Signature", valid_615001
  var valid_615002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615002 = validateParameter(valid_615002, JString, required = false,
                                 default = nil)
  if valid_615002 != nil:
    section.add "X-Amz-Content-Sha256", valid_615002
  var valid_615003 = header.getOrDefault("X-Amz-Date")
  valid_615003 = validateParameter(valid_615003, JString, required = false,
                                 default = nil)
  if valid_615003 != nil:
    section.add "X-Amz-Date", valid_615003
  var valid_615004 = header.getOrDefault("X-Amz-Credential")
  valid_615004 = validateParameter(valid_615004, JString, required = false,
                                 default = nil)
  if valid_615004 != nil:
    section.add "X-Amz-Credential", valid_615004
  var valid_615005 = header.getOrDefault("X-Amz-Security-Token")
  valid_615005 = validateParameter(valid_615005, JString, required = false,
                                 default = nil)
  if valid_615005 != nil:
    section.add "X-Amz-Security-Token", valid_615005
  var valid_615006 = header.getOrDefault("X-Amz-Algorithm")
  valid_615006 = validateParameter(valid_615006, JString, required = false,
                                 default = nil)
  if valid_615006 != nil:
    section.add "X-Amz-Algorithm", valid_615006
  var valid_615007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615007 = validateParameter(valid_615007, JString, required = false,
                                 default = nil)
  if valid_615007 != nil:
    section.add "X-Amz-SignedHeaders", valid_615007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615008: Call_GetSendRawEmail_614988; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_615008.validator(path, query, header, formData, body)
  let scheme = call_615008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615008.url(scheme.get, call_615008.host, call_615008.base,
                         call_615008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615008, url, valid)

proc call*(call_615009: Call_GetSendRawEmail_614988; SourceArn: string = "";
          Destinations: JsonNode = nil; Source: string = "";
          RawMessageData: string = ""; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; Action: string = "SendRawEmail";
          FromArn: string = ""; Version: string = "2010-12-01";
          ReturnPathArn: string = ""): Recallable =
  ## getSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Action: string (required)
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  var query_615010 = newJObject()
  add(query_615010, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    query_615010.add "Destinations", Destinations
  add(query_615010, "Source", newJString(Source))
  add(query_615010, "RawMessage.Data", newJString(RawMessageData))
  if Tags != nil:
    query_615010.add "Tags", Tags
  add(query_615010, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615010, "Action", newJString(Action))
  add(query_615010, "FromArn", newJString(FromArn))
  add(query_615010, "Version", newJString(Version))
  add(query_615010, "ReturnPathArn", newJString(ReturnPathArn))
  result = call_615009.call(nil, query_615010, nil, nil, nil)

var getSendRawEmail* = Call_GetSendRawEmail_614988(name: "getSendRawEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_GetSendRawEmail_614989,
    base: "/", url: url_GetSendRawEmail_614990, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendTemplatedEmail_615063 = ref object of OpenApiRestCall_612658
proc url_PostSendTemplatedEmail_615065(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendTemplatedEmail_615064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615066 = query.getOrDefault("Action")
  valid_615066 = validateParameter(valid_615066, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_615066 != nil:
    section.add "Action", valid_615066
  var valid_615067 = query.getOrDefault("Version")
  valid_615067 = validateParameter(valid_615067, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615067 != nil:
    section.add "Version", valid_615067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615068 = header.getOrDefault("X-Amz-Signature")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-Signature", valid_615068
  var valid_615069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "X-Amz-Content-Sha256", valid_615069
  var valid_615070 = header.getOrDefault("X-Amz-Date")
  valid_615070 = validateParameter(valid_615070, JString, required = false,
                                 default = nil)
  if valid_615070 != nil:
    section.add "X-Amz-Date", valid_615070
  var valid_615071 = header.getOrDefault("X-Amz-Credential")
  valid_615071 = validateParameter(valid_615071, JString, required = false,
                                 default = nil)
  if valid_615071 != nil:
    section.add "X-Amz-Credential", valid_615071
  var valid_615072 = header.getOrDefault("X-Amz-Security-Token")
  valid_615072 = validateParameter(valid_615072, JString, required = false,
                                 default = nil)
  if valid_615072 != nil:
    section.add "X-Amz-Security-Token", valid_615072
  var valid_615073 = header.getOrDefault("X-Amz-Algorithm")
  valid_615073 = validateParameter(valid_615073, JString, required = false,
                                 default = nil)
  if valid_615073 != nil:
    section.add "X-Amz-Algorithm", valid_615073
  var valid_615074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615074 = validateParameter(valid_615074, JString, required = false,
                                 default = nil)
  if valid_615074 != nil:
    section.add "X-Amz-SignedHeaders", valid_615074
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  section = newJObject()
  var valid_615075 = formData.getOrDefault("ReturnPathArn")
  valid_615075 = validateParameter(valid_615075, JString, required = false,
                                 default = nil)
  if valid_615075 != nil:
    section.add "ReturnPathArn", valid_615075
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_615076 = formData.getOrDefault("Source")
  valid_615076 = validateParameter(valid_615076, JString, required = true,
                                 default = nil)
  if valid_615076 != nil:
    section.add "Source", valid_615076
  var valid_615077 = formData.getOrDefault("Destination.CcAddresses")
  valid_615077 = validateParameter(valid_615077, JArray, required = false,
                                 default = nil)
  if valid_615077 != nil:
    section.add "Destination.CcAddresses", valid_615077
  var valid_615078 = formData.getOrDefault("TemplateData")
  valid_615078 = validateParameter(valid_615078, JString, required = true,
                                 default = nil)
  if valid_615078 != nil:
    section.add "TemplateData", valid_615078
  var valid_615079 = formData.getOrDefault("TemplateArn")
  valid_615079 = validateParameter(valid_615079, JString, required = false,
                                 default = nil)
  if valid_615079 != nil:
    section.add "TemplateArn", valid_615079
  var valid_615080 = formData.getOrDefault("SourceArn")
  valid_615080 = validateParameter(valid_615080, JString, required = false,
                                 default = nil)
  if valid_615080 != nil:
    section.add "SourceArn", valid_615080
  var valid_615081 = formData.getOrDefault("ReplyToAddresses")
  valid_615081 = validateParameter(valid_615081, JArray, required = false,
                                 default = nil)
  if valid_615081 != nil:
    section.add "ReplyToAddresses", valid_615081
  var valid_615082 = formData.getOrDefault("Destination.BccAddresses")
  valid_615082 = validateParameter(valid_615082, JArray, required = false,
                                 default = nil)
  if valid_615082 != nil:
    section.add "Destination.BccAddresses", valid_615082
  var valid_615083 = formData.getOrDefault("ReturnPath")
  valid_615083 = validateParameter(valid_615083, JString, required = false,
                                 default = nil)
  if valid_615083 != nil:
    section.add "ReturnPath", valid_615083
  var valid_615084 = formData.getOrDefault("Tags")
  valid_615084 = validateParameter(valid_615084, JArray, required = false,
                                 default = nil)
  if valid_615084 != nil:
    section.add "Tags", valid_615084
  var valid_615085 = formData.getOrDefault("Destination.ToAddresses")
  valid_615085 = validateParameter(valid_615085, JArray, required = false,
                                 default = nil)
  if valid_615085 != nil:
    section.add "Destination.ToAddresses", valid_615085
  var valid_615086 = formData.getOrDefault("ConfigurationSetName")
  valid_615086 = validateParameter(valid_615086, JString, required = false,
                                 default = nil)
  if valid_615086 != nil:
    section.add "ConfigurationSetName", valid_615086
  var valid_615087 = formData.getOrDefault("Template")
  valid_615087 = validateParameter(valid_615087, JString, required = true,
                                 default = nil)
  if valid_615087 != nil:
    section.add "Template", valid_615087
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615088: Call_PostSendTemplatedEmail_615063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_615088.validator(path, query, header, formData, body)
  let scheme = call_615088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615088.url(scheme.get, call_615088.host, call_615088.base,
                         call_615088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615088, url, valid)

proc call*(call_615089: Call_PostSendTemplatedEmail_615063; Source: string;
          TemplateData: string; Template: string; ReturnPathArn: string = "";
          DestinationCcAddresses: JsonNode = nil; TemplateArn: string = "";
          SourceArn: string = ""; ReplyToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil;
          Action: string = "SendTemplatedEmail"; ReturnPath: string = "";
          Tags: JsonNode = nil; DestinationToAddresses: JsonNode = nil;
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Action: string (required)
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Version: string (required)
  var query_615090 = newJObject()
  var formData_615091 = newJObject()
  add(formData_615091, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_615091, "Source", newJString(Source))
  if DestinationCcAddresses != nil:
    formData_615091.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_615091, "TemplateData", newJString(TemplateData))
  add(formData_615091, "TemplateArn", newJString(TemplateArn))
  add(formData_615091, "SourceArn", newJString(SourceArn))
  if ReplyToAddresses != nil:
    formData_615091.add "ReplyToAddresses", ReplyToAddresses
  if DestinationBccAddresses != nil:
    formData_615091.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_615090, "Action", newJString(Action))
  add(formData_615091, "ReturnPath", newJString(ReturnPath))
  if Tags != nil:
    formData_615091.add "Tags", Tags
  if DestinationToAddresses != nil:
    formData_615091.add "Destination.ToAddresses", DestinationToAddresses
  add(formData_615091, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_615091, "Template", newJString(Template))
  add(query_615090, "Version", newJString(Version))
  result = call_615089.call(nil, query_615090, nil, formData_615091, nil)

var postSendTemplatedEmail* = Call_PostSendTemplatedEmail_615063(
    name: "postSendTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_PostSendTemplatedEmail_615064, base: "/",
    url: url_PostSendTemplatedEmail_615065, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendTemplatedEmail_615035 = ref object of OpenApiRestCall_612658
proc url_GetSendTemplatedEmail_615037(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendTemplatedEmail_615036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Action: JString (required)
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  section = newJObject()
  var valid_615038 = query.getOrDefault("SourceArn")
  valid_615038 = validateParameter(valid_615038, JString, required = false,
                                 default = nil)
  if valid_615038 != nil:
    section.add "SourceArn", valid_615038
  var valid_615039 = query.getOrDefault("ReturnPath")
  valid_615039 = validateParameter(valid_615039, JString, required = false,
                                 default = nil)
  if valid_615039 != nil:
    section.add "ReturnPath", valid_615039
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_615040 = query.getOrDefault("TemplateData")
  valid_615040 = validateParameter(valid_615040, JString, required = true,
                                 default = nil)
  if valid_615040 != nil:
    section.add "TemplateData", valid_615040
  var valid_615041 = query.getOrDefault("Source")
  valid_615041 = validateParameter(valid_615041, JString, required = true,
                                 default = nil)
  if valid_615041 != nil:
    section.add "Source", valid_615041
  var valid_615042 = query.getOrDefault("Tags")
  valid_615042 = validateParameter(valid_615042, JArray, required = false,
                                 default = nil)
  if valid_615042 != nil:
    section.add "Tags", valid_615042
  var valid_615043 = query.getOrDefault("ConfigurationSetName")
  valid_615043 = validateParameter(valid_615043, JString, required = false,
                                 default = nil)
  if valid_615043 != nil:
    section.add "ConfigurationSetName", valid_615043
  var valid_615044 = query.getOrDefault("Destination.CcAddresses")
  valid_615044 = validateParameter(valid_615044, JArray, required = false,
                                 default = nil)
  if valid_615044 != nil:
    section.add "Destination.CcAddresses", valid_615044
  var valid_615045 = query.getOrDefault("Template")
  valid_615045 = validateParameter(valid_615045, JString, required = true,
                                 default = nil)
  if valid_615045 != nil:
    section.add "Template", valid_615045
  var valid_615046 = query.getOrDefault("Action")
  valid_615046 = validateParameter(valid_615046, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_615046 != nil:
    section.add "Action", valid_615046
  var valid_615047 = query.getOrDefault("Destination.ToAddresses")
  valid_615047 = validateParameter(valid_615047, JArray, required = false,
                                 default = nil)
  if valid_615047 != nil:
    section.add "Destination.ToAddresses", valid_615047
  var valid_615048 = query.getOrDefault("Destination.BccAddresses")
  valid_615048 = validateParameter(valid_615048, JArray, required = false,
                                 default = nil)
  if valid_615048 != nil:
    section.add "Destination.BccAddresses", valid_615048
  var valid_615049 = query.getOrDefault("Version")
  valid_615049 = validateParameter(valid_615049, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615049 != nil:
    section.add "Version", valid_615049
  var valid_615050 = query.getOrDefault("ReturnPathArn")
  valid_615050 = validateParameter(valid_615050, JString, required = false,
                                 default = nil)
  if valid_615050 != nil:
    section.add "ReturnPathArn", valid_615050
  var valid_615051 = query.getOrDefault("ReplyToAddresses")
  valid_615051 = validateParameter(valid_615051, JArray, required = false,
                                 default = nil)
  if valid_615051 != nil:
    section.add "ReplyToAddresses", valid_615051
  var valid_615052 = query.getOrDefault("TemplateArn")
  valid_615052 = validateParameter(valid_615052, JString, required = false,
                                 default = nil)
  if valid_615052 != nil:
    section.add "TemplateArn", valid_615052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615053 = header.getOrDefault("X-Amz-Signature")
  valid_615053 = validateParameter(valid_615053, JString, required = false,
                                 default = nil)
  if valid_615053 != nil:
    section.add "X-Amz-Signature", valid_615053
  var valid_615054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615054 = validateParameter(valid_615054, JString, required = false,
                                 default = nil)
  if valid_615054 != nil:
    section.add "X-Amz-Content-Sha256", valid_615054
  var valid_615055 = header.getOrDefault("X-Amz-Date")
  valid_615055 = validateParameter(valid_615055, JString, required = false,
                                 default = nil)
  if valid_615055 != nil:
    section.add "X-Amz-Date", valid_615055
  var valid_615056 = header.getOrDefault("X-Amz-Credential")
  valid_615056 = validateParameter(valid_615056, JString, required = false,
                                 default = nil)
  if valid_615056 != nil:
    section.add "X-Amz-Credential", valid_615056
  var valid_615057 = header.getOrDefault("X-Amz-Security-Token")
  valid_615057 = validateParameter(valid_615057, JString, required = false,
                                 default = nil)
  if valid_615057 != nil:
    section.add "X-Amz-Security-Token", valid_615057
  var valid_615058 = header.getOrDefault("X-Amz-Algorithm")
  valid_615058 = validateParameter(valid_615058, JString, required = false,
                                 default = nil)
  if valid_615058 != nil:
    section.add "X-Amz-Algorithm", valid_615058
  var valid_615059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615059 = validateParameter(valid_615059, JString, required = false,
                                 default = nil)
  if valid_615059 != nil:
    section.add "X-Amz-SignedHeaders", valid_615059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615060: Call_GetSendTemplatedEmail_615035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_615060.validator(path, query, header, formData, body)
  let scheme = call_615060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615060.url(scheme.get, call_615060.host, call_615060.base,
                         call_615060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615060, url, valid)

proc call*(call_615061: Call_GetSendTemplatedEmail_615035; TemplateData: string;
          Source: string; Template: string; SourceArn: string = "";
          ReturnPath: string = ""; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; DestinationCcAddresses: JsonNode = nil;
          Action: string = "SendTemplatedEmail";
          DestinationToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; Version: string = "2010-12-01";
          ReturnPathArn: string = ""; ReplyToAddresses: JsonNode = nil;
          TemplateArn: string = ""): Recallable =
  ## getSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Action: string (required)
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  var query_615062 = newJObject()
  add(query_615062, "SourceArn", newJString(SourceArn))
  add(query_615062, "ReturnPath", newJString(ReturnPath))
  add(query_615062, "TemplateData", newJString(TemplateData))
  add(query_615062, "Source", newJString(Source))
  if Tags != nil:
    query_615062.add "Tags", Tags
  add(query_615062, "ConfigurationSetName", newJString(ConfigurationSetName))
  if DestinationCcAddresses != nil:
    query_615062.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_615062, "Template", newJString(Template))
  add(query_615062, "Action", newJString(Action))
  if DestinationToAddresses != nil:
    query_615062.add "Destination.ToAddresses", DestinationToAddresses
  if DestinationBccAddresses != nil:
    query_615062.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_615062, "Version", newJString(Version))
  add(query_615062, "ReturnPathArn", newJString(ReturnPathArn))
  if ReplyToAddresses != nil:
    query_615062.add "ReplyToAddresses", ReplyToAddresses
  add(query_615062, "TemplateArn", newJString(TemplateArn))
  result = call_615061.call(nil, query_615062, nil, nil, nil)

var getSendTemplatedEmail* = Call_GetSendTemplatedEmail_615035(
    name: "getSendTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_GetSendTemplatedEmail_615036, base: "/",
    url: url_GetSendTemplatedEmail_615037, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetActiveReceiptRuleSet_615108 = ref object of OpenApiRestCall_612658
proc url_PostSetActiveReceiptRuleSet_615110(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetActiveReceiptRuleSet_615109(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615111 = query.getOrDefault("Action")
  valid_615111 = validateParameter(valid_615111, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_615111 != nil:
    section.add "Action", valid_615111
  var valid_615112 = query.getOrDefault("Version")
  valid_615112 = validateParameter(valid_615112, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615112 != nil:
    section.add "Version", valid_615112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615113 = header.getOrDefault("X-Amz-Signature")
  valid_615113 = validateParameter(valid_615113, JString, required = false,
                                 default = nil)
  if valid_615113 != nil:
    section.add "X-Amz-Signature", valid_615113
  var valid_615114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615114 = validateParameter(valid_615114, JString, required = false,
                                 default = nil)
  if valid_615114 != nil:
    section.add "X-Amz-Content-Sha256", valid_615114
  var valid_615115 = header.getOrDefault("X-Amz-Date")
  valid_615115 = validateParameter(valid_615115, JString, required = false,
                                 default = nil)
  if valid_615115 != nil:
    section.add "X-Amz-Date", valid_615115
  var valid_615116 = header.getOrDefault("X-Amz-Credential")
  valid_615116 = validateParameter(valid_615116, JString, required = false,
                                 default = nil)
  if valid_615116 != nil:
    section.add "X-Amz-Credential", valid_615116
  var valid_615117 = header.getOrDefault("X-Amz-Security-Token")
  valid_615117 = validateParameter(valid_615117, JString, required = false,
                                 default = nil)
  if valid_615117 != nil:
    section.add "X-Amz-Security-Token", valid_615117
  var valid_615118 = header.getOrDefault("X-Amz-Algorithm")
  valid_615118 = validateParameter(valid_615118, JString, required = false,
                                 default = nil)
  if valid_615118 != nil:
    section.add "X-Amz-Algorithm", valid_615118
  var valid_615119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615119 = validateParameter(valid_615119, JString, required = false,
                                 default = nil)
  if valid_615119 != nil:
    section.add "X-Amz-SignedHeaders", valid_615119
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  section = newJObject()
  var valid_615120 = formData.getOrDefault("RuleSetName")
  valid_615120 = validateParameter(valid_615120, JString, required = false,
                                 default = nil)
  if valid_615120 != nil:
    section.add "RuleSetName", valid_615120
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615121: Call_PostSetActiveReceiptRuleSet_615108; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615121.validator(path, query, header, formData, body)
  let scheme = call_615121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615121.url(scheme.get, call_615121.host, call_615121.base,
                         call_615121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615121, url, valid)

proc call*(call_615122: Call_PostSetActiveReceiptRuleSet_615108;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615123 = newJObject()
  var formData_615124 = newJObject()
  add(formData_615124, "RuleSetName", newJString(RuleSetName))
  add(query_615123, "Action", newJString(Action))
  add(query_615123, "Version", newJString(Version))
  result = call_615122.call(nil, query_615123, nil, formData_615124, nil)

var postSetActiveReceiptRuleSet* = Call_PostSetActiveReceiptRuleSet_615108(
    name: "postSetActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_PostSetActiveReceiptRuleSet_615109, base: "/",
    url: url_PostSetActiveReceiptRuleSet_615110,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetActiveReceiptRuleSet_615092 = ref object of OpenApiRestCall_612658
proc url_GetSetActiveReceiptRuleSet_615094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetActiveReceiptRuleSet_615093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615095 = query.getOrDefault("Action")
  valid_615095 = validateParameter(valid_615095, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_615095 != nil:
    section.add "Action", valid_615095
  var valid_615096 = query.getOrDefault("RuleSetName")
  valid_615096 = validateParameter(valid_615096, JString, required = false,
                                 default = nil)
  if valid_615096 != nil:
    section.add "RuleSetName", valid_615096
  var valid_615097 = query.getOrDefault("Version")
  valid_615097 = validateParameter(valid_615097, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615097 != nil:
    section.add "Version", valid_615097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615098 = header.getOrDefault("X-Amz-Signature")
  valid_615098 = validateParameter(valid_615098, JString, required = false,
                                 default = nil)
  if valid_615098 != nil:
    section.add "X-Amz-Signature", valid_615098
  var valid_615099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615099 = validateParameter(valid_615099, JString, required = false,
                                 default = nil)
  if valid_615099 != nil:
    section.add "X-Amz-Content-Sha256", valid_615099
  var valid_615100 = header.getOrDefault("X-Amz-Date")
  valid_615100 = validateParameter(valid_615100, JString, required = false,
                                 default = nil)
  if valid_615100 != nil:
    section.add "X-Amz-Date", valid_615100
  var valid_615101 = header.getOrDefault("X-Amz-Credential")
  valid_615101 = validateParameter(valid_615101, JString, required = false,
                                 default = nil)
  if valid_615101 != nil:
    section.add "X-Amz-Credential", valid_615101
  var valid_615102 = header.getOrDefault("X-Amz-Security-Token")
  valid_615102 = validateParameter(valid_615102, JString, required = false,
                                 default = nil)
  if valid_615102 != nil:
    section.add "X-Amz-Security-Token", valid_615102
  var valid_615103 = header.getOrDefault("X-Amz-Algorithm")
  valid_615103 = validateParameter(valid_615103, JString, required = false,
                                 default = nil)
  if valid_615103 != nil:
    section.add "X-Amz-Algorithm", valid_615103
  var valid_615104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "X-Amz-SignedHeaders", valid_615104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615105: Call_GetSetActiveReceiptRuleSet_615092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615105.validator(path, query, header, formData, body)
  let scheme = call_615105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615105.url(scheme.get, call_615105.host, call_615105.base,
                         call_615105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615105, url, valid)

proc call*(call_615106: Call_GetSetActiveReceiptRuleSet_615092;
          Action: string = "SetActiveReceiptRuleSet"; RuleSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Version: string (required)
  var query_615107 = newJObject()
  add(query_615107, "Action", newJString(Action))
  add(query_615107, "RuleSetName", newJString(RuleSetName))
  add(query_615107, "Version", newJString(Version))
  result = call_615106.call(nil, query_615107, nil, nil, nil)

var getSetActiveReceiptRuleSet* = Call_GetSetActiveReceiptRuleSet_615092(
    name: "getSetActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_GetSetActiveReceiptRuleSet_615093, base: "/",
    url: url_GetSetActiveReceiptRuleSet_615094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityDkimEnabled_615142 = ref object of OpenApiRestCall_612658
proc url_PostSetIdentityDkimEnabled_615144(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityDkimEnabled_615143(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615145 = query.getOrDefault("Action")
  valid_615145 = validateParameter(valid_615145, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_615145 != nil:
    section.add "Action", valid_615145
  var valid_615146 = query.getOrDefault("Version")
  valid_615146 = validateParameter(valid_615146, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615146 != nil:
    section.add "Version", valid_615146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615147 = header.getOrDefault("X-Amz-Signature")
  valid_615147 = validateParameter(valid_615147, JString, required = false,
                                 default = nil)
  if valid_615147 != nil:
    section.add "X-Amz-Signature", valid_615147
  var valid_615148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615148 = validateParameter(valid_615148, JString, required = false,
                                 default = nil)
  if valid_615148 != nil:
    section.add "X-Amz-Content-Sha256", valid_615148
  var valid_615149 = header.getOrDefault("X-Amz-Date")
  valid_615149 = validateParameter(valid_615149, JString, required = false,
                                 default = nil)
  if valid_615149 != nil:
    section.add "X-Amz-Date", valid_615149
  var valid_615150 = header.getOrDefault("X-Amz-Credential")
  valid_615150 = validateParameter(valid_615150, JString, required = false,
                                 default = nil)
  if valid_615150 != nil:
    section.add "X-Amz-Credential", valid_615150
  var valid_615151 = header.getOrDefault("X-Amz-Security-Token")
  valid_615151 = validateParameter(valid_615151, JString, required = false,
                                 default = nil)
  if valid_615151 != nil:
    section.add "X-Amz-Security-Token", valid_615151
  var valid_615152 = header.getOrDefault("X-Amz-Algorithm")
  valid_615152 = validateParameter(valid_615152, JString, required = false,
                                 default = nil)
  if valid_615152 != nil:
    section.add "X-Amz-Algorithm", valid_615152
  var valid_615153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615153 = validateParameter(valid_615153, JString, required = false,
                                 default = nil)
  if valid_615153 != nil:
    section.add "X-Amz-SignedHeaders", valid_615153
  result.add "header", section
  ## parameters in `formData` object:
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DkimEnabled` field"
  var valid_615154 = formData.getOrDefault("DkimEnabled")
  valid_615154 = validateParameter(valid_615154, JBool, required = true, default = nil)
  if valid_615154 != nil:
    section.add "DkimEnabled", valid_615154
  var valid_615155 = formData.getOrDefault("Identity")
  valid_615155 = validateParameter(valid_615155, JString, required = true,
                                 default = nil)
  if valid_615155 != nil:
    section.add "Identity", valid_615155
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615156: Call_PostSetIdentityDkimEnabled_615142; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615156.validator(path, query, header, formData, body)
  let scheme = call_615156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615156.url(scheme.get, call_615156.host, call_615156.base,
                         call_615156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615156, url, valid)

proc call*(call_615157: Call_PostSetIdentityDkimEnabled_615142; DkimEnabled: bool;
          Identity: string; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615158 = newJObject()
  var formData_615159 = newJObject()
  add(formData_615159, "DkimEnabled", newJBool(DkimEnabled))
  add(formData_615159, "Identity", newJString(Identity))
  add(query_615158, "Action", newJString(Action))
  add(query_615158, "Version", newJString(Version))
  result = call_615157.call(nil, query_615158, nil, formData_615159, nil)

var postSetIdentityDkimEnabled* = Call_PostSetIdentityDkimEnabled_615142(
    name: "postSetIdentityDkimEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_PostSetIdentityDkimEnabled_615143, base: "/",
    url: url_PostSetIdentityDkimEnabled_615144,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityDkimEnabled_615125 = ref object of OpenApiRestCall_612658
proc url_GetSetIdentityDkimEnabled_615127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityDkimEnabled_615126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: JString (required)
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_615128 = query.getOrDefault("Identity")
  valid_615128 = validateParameter(valid_615128, JString, required = true,
                                 default = nil)
  if valid_615128 != nil:
    section.add "Identity", valid_615128
  var valid_615129 = query.getOrDefault("Action")
  valid_615129 = validateParameter(valid_615129, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_615129 != nil:
    section.add "Action", valid_615129
  var valid_615130 = query.getOrDefault("DkimEnabled")
  valid_615130 = validateParameter(valid_615130, JBool, required = true, default = nil)
  if valid_615130 != nil:
    section.add "DkimEnabled", valid_615130
  var valid_615131 = query.getOrDefault("Version")
  valid_615131 = validateParameter(valid_615131, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615131 != nil:
    section.add "Version", valid_615131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615132 = header.getOrDefault("X-Amz-Signature")
  valid_615132 = validateParameter(valid_615132, JString, required = false,
                                 default = nil)
  if valid_615132 != nil:
    section.add "X-Amz-Signature", valid_615132
  var valid_615133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615133 = validateParameter(valid_615133, JString, required = false,
                                 default = nil)
  if valid_615133 != nil:
    section.add "X-Amz-Content-Sha256", valid_615133
  var valid_615134 = header.getOrDefault("X-Amz-Date")
  valid_615134 = validateParameter(valid_615134, JString, required = false,
                                 default = nil)
  if valid_615134 != nil:
    section.add "X-Amz-Date", valid_615134
  var valid_615135 = header.getOrDefault("X-Amz-Credential")
  valid_615135 = validateParameter(valid_615135, JString, required = false,
                                 default = nil)
  if valid_615135 != nil:
    section.add "X-Amz-Credential", valid_615135
  var valid_615136 = header.getOrDefault("X-Amz-Security-Token")
  valid_615136 = validateParameter(valid_615136, JString, required = false,
                                 default = nil)
  if valid_615136 != nil:
    section.add "X-Amz-Security-Token", valid_615136
  var valid_615137 = header.getOrDefault("X-Amz-Algorithm")
  valid_615137 = validateParameter(valid_615137, JString, required = false,
                                 default = nil)
  if valid_615137 != nil:
    section.add "X-Amz-Algorithm", valid_615137
  var valid_615138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615138 = validateParameter(valid_615138, JString, required = false,
                                 default = nil)
  if valid_615138 != nil:
    section.add "X-Amz-SignedHeaders", valid_615138
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615139: Call_GetSetIdentityDkimEnabled_615125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615139.validator(path, query, header, formData, body)
  let scheme = call_615139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615139.url(scheme.get, call_615139.host, call_615139.base,
                         call_615139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615139, url, valid)

proc call*(call_615140: Call_GetSetIdentityDkimEnabled_615125; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: string (required)
  var query_615141 = newJObject()
  add(query_615141, "Identity", newJString(Identity))
  add(query_615141, "Action", newJString(Action))
  add(query_615141, "DkimEnabled", newJBool(DkimEnabled))
  add(query_615141, "Version", newJString(Version))
  result = call_615140.call(nil, query_615141, nil, nil, nil)

var getSetIdentityDkimEnabled* = Call_GetSetIdentityDkimEnabled_615125(
    name: "getSetIdentityDkimEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_GetSetIdentityDkimEnabled_615126, base: "/",
    url: url_GetSetIdentityDkimEnabled_615127,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityFeedbackForwardingEnabled_615177 = ref object of OpenApiRestCall_612658
proc url_PostSetIdentityFeedbackForwardingEnabled_615179(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityFeedbackForwardingEnabled_615178(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615180 = query.getOrDefault("Action")
  valid_615180 = validateParameter(valid_615180, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_615180 != nil:
    section.add "Action", valid_615180
  var valid_615181 = query.getOrDefault("Version")
  valid_615181 = validateParameter(valid_615181, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615181 != nil:
    section.add "Version", valid_615181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615182 = header.getOrDefault("X-Amz-Signature")
  valid_615182 = validateParameter(valid_615182, JString, required = false,
                                 default = nil)
  if valid_615182 != nil:
    section.add "X-Amz-Signature", valid_615182
  var valid_615183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615183 = validateParameter(valid_615183, JString, required = false,
                                 default = nil)
  if valid_615183 != nil:
    section.add "X-Amz-Content-Sha256", valid_615183
  var valid_615184 = header.getOrDefault("X-Amz-Date")
  valid_615184 = validateParameter(valid_615184, JString, required = false,
                                 default = nil)
  if valid_615184 != nil:
    section.add "X-Amz-Date", valid_615184
  var valid_615185 = header.getOrDefault("X-Amz-Credential")
  valid_615185 = validateParameter(valid_615185, JString, required = false,
                                 default = nil)
  if valid_615185 != nil:
    section.add "X-Amz-Credential", valid_615185
  var valid_615186 = header.getOrDefault("X-Amz-Security-Token")
  valid_615186 = validateParameter(valid_615186, JString, required = false,
                                 default = nil)
  if valid_615186 != nil:
    section.add "X-Amz-Security-Token", valid_615186
  var valid_615187 = header.getOrDefault("X-Amz-Algorithm")
  valid_615187 = validateParameter(valid_615187, JString, required = false,
                                 default = nil)
  if valid_615187 != nil:
    section.add "X-Amz-Algorithm", valid_615187
  var valid_615188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615188 = validateParameter(valid_615188, JString, required = false,
                                 default = nil)
  if valid_615188 != nil:
    section.add "X-Amz-SignedHeaders", valid_615188
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_615189 = formData.getOrDefault("Identity")
  valid_615189 = validateParameter(valid_615189, JString, required = true,
                                 default = nil)
  if valid_615189 != nil:
    section.add "Identity", valid_615189
  var valid_615190 = formData.getOrDefault("ForwardingEnabled")
  valid_615190 = validateParameter(valid_615190, JBool, required = true, default = nil)
  if valid_615190 != nil:
    section.add "ForwardingEnabled", valid_615190
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615191: Call_PostSetIdentityFeedbackForwardingEnabled_615177;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615191.validator(path, query, header, formData, body)
  let scheme = call_615191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615191.url(scheme.get, call_615191.host, call_615191.base,
                         call_615191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615191, url, valid)

proc call*(call_615192: Call_PostSetIdentityFeedbackForwardingEnabled_615177;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Version: string (required)
  var query_615193 = newJObject()
  var formData_615194 = newJObject()
  add(formData_615194, "Identity", newJString(Identity))
  add(query_615193, "Action", newJString(Action))
  add(formData_615194, "ForwardingEnabled", newJBool(ForwardingEnabled))
  add(query_615193, "Version", newJString(Version))
  result = call_615192.call(nil, query_615193, nil, formData_615194, nil)

var postSetIdentityFeedbackForwardingEnabled* = Call_PostSetIdentityFeedbackForwardingEnabled_615177(
    name: "postSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_PostSetIdentityFeedbackForwardingEnabled_615178,
    base: "/", url: url_PostSetIdentityFeedbackForwardingEnabled_615179,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityFeedbackForwardingEnabled_615160 = ref object of OpenApiRestCall_612658
proc url_GetSetIdentityFeedbackForwardingEnabled_615162(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityFeedbackForwardingEnabled_615161(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_615163 = query.getOrDefault("Identity")
  valid_615163 = validateParameter(valid_615163, JString, required = true,
                                 default = nil)
  if valid_615163 != nil:
    section.add "Identity", valid_615163
  var valid_615164 = query.getOrDefault("Action")
  valid_615164 = validateParameter(valid_615164, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_615164 != nil:
    section.add "Action", valid_615164
  var valid_615165 = query.getOrDefault("Version")
  valid_615165 = validateParameter(valid_615165, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615165 != nil:
    section.add "Version", valid_615165
  var valid_615166 = query.getOrDefault("ForwardingEnabled")
  valid_615166 = validateParameter(valid_615166, JBool, required = true, default = nil)
  if valid_615166 != nil:
    section.add "ForwardingEnabled", valid_615166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615167 = header.getOrDefault("X-Amz-Signature")
  valid_615167 = validateParameter(valid_615167, JString, required = false,
                                 default = nil)
  if valid_615167 != nil:
    section.add "X-Amz-Signature", valid_615167
  var valid_615168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615168 = validateParameter(valid_615168, JString, required = false,
                                 default = nil)
  if valid_615168 != nil:
    section.add "X-Amz-Content-Sha256", valid_615168
  var valid_615169 = header.getOrDefault("X-Amz-Date")
  valid_615169 = validateParameter(valid_615169, JString, required = false,
                                 default = nil)
  if valid_615169 != nil:
    section.add "X-Amz-Date", valid_615169
  var valid_615170 = header.getOrDefault("X-Amz-Credential")
  valid_615170 = validateParameter(valid_615170, JString, required = false,
                                 default = nil)
  if valid_615170 != nil:
    section.add "X-Amz-Credential", valid_615170
  var valid_615171 = header.getOrDefault("X-Amz-Security-Token")
  valid_615171 = validateParameter(valid_615171, JString, required = false,
                                 default = nil)
  if valid_615171 != nil:
    section.add "X-Amz-Security-Token", valid_615171
  var valid_615172 = header.getOrDefault("X-Amz-Algorithm")
  valid_615172 = validateParameter(valid_615172, JString, required = false,
                                 default = nil)
  if valid_615172 != nil:
    section.add "X-Amz-Algorithm", valid_615172
  var valid_615173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615173 = validateParameter(valid_615173, JString, required = false,
                                 default = nil)
  if valid_615173 != nil:
    section.add "X-Amz-SignedHeaders", valid_615173
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615174: Call_GetSetIdentityFeedbackForwardingEnabled_615160;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615174.validator(path, query, header, formData, body)
  let scheme = call_615174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615174.url(scheme.get, call_615174.host, call_615174.base,
                         call_615174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615174, url, valid)

proc call*(call_615175: Call_GetSetIdentityFeedbackForwardingEnabled_615160;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  var query_615176 = newJObject()
  add(query_615176, "Identity", newJString(Identity))
  add(query_615176, "Action", newJString(Action))
  add(query_615176, "Version", newJString(Version))
  add(query_615176, "ForwardingEnabled", newJBool(ForwardingEnabled))
  result = call_615175.call(nil, query_615176, nil, nil, nil)

var getSetIdentityFeedbackForwardingEnabled* = Call_GetSetIdentityFeedbackForwardingEnabled_615160(
    name: "getSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_GetSetIdentityFeedbackForwardingEnabled_615161, base: "/",
    url: url_GetSetIdentityFeedbackForwardingEnabled_615162,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityHeadersInNotificationsEnabled_615213 = ref object of OpenApiRestCall_612658
proc url_PostSetIdentityHeadersInNotificationsEnabled_615215(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityHeadersInNotificationsEnabled_615214(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615216 = query.getOrDefault("Action")
  valid_615216 = validateParameter(valid_615216, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_615216 != nil:
    section.add "Action", valid_615216
  var valid_615217 = query.getOrDefault("Version")
  valid_615217 = validateParameter(valid_615217, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615217 != nil:
    section.add "Version", valid_615217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615218 = header.getOrDefault("X-Amz-Signature")
  valid_615218 = validateParameter(valid_615218, JString, required = false,
                                 default = nil)
  if valid_615218 != nil:
    section.add "X-Amz-Signature", valid_615218
  var valid_615219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615219 = validateParameter(valid_615219, JString, required = false,
                                 default = nil)
  if valid_615219 != nil:
    section.add "X-Amz-Content-Sha256", valid_615219
  var valid_615220 = header.getOrDefault("X-Amz-Date")
  valid_615220 = validateParameter(valid_615220, JString, required = false,
                                 default = nil)
  if valid_615220 != nil:
    section.add "X-Amz-Date", valid_615220
  var valid_615221 = header.getOrDefault("X-Amz-Credential")
  valid_615221 = validateParameter(valid_615221, JString, required = false,
                                 default = nil)
  if valid_615221 != nil:
    section.add "X-Amz-Credential", valid_615221
  var valid_615222 = header.getOrDefault("X-Amz-Security-Token")
  valid_615222 = validateParameter(valid_615222, JString, required = false,
                                 default = nil)
  if valid_615222 != nil:
    section.add "X-Amz-Security-Token", valid_615222
  var valid_615223 = header.getOrDefault("X-Amz-Algorithm")
  valid_615223 = validateParameter(valid_615223, JString, required = false,
                                 default = nil)
  if valid_615223 != nil:
    section.add "X-Amz-Algorithm", valid_615223
  var valid_615224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615224 = validateParameter(valid_615224, JString, required = false,
                                 default = nil)
  if valid_615224 != nil:
    section.add "X-Amz-SignedHeaders", valid_615224
  result.add "header", section
  ## parameters in `formData` object:
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  section = newJObject()
  var valid_615225 = formData.getOrDefault("NotificationType")
  valid_615225 = validateParameter(valid_615225, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_615225 != nil:
    section.add "NotificationType", valid_615225
  var valid_615226 = formData.getOrDefault("Enabled")
  valid_615226 = validateParameter(valid_615226, JBool, required = true, default = nil)
  if valid_615226 != nil:
    section.add "Enabled", valid_615226
  var valid_615227 = formData.getOrDefault("Identity")
  valid_615227 = validateParameter(valid_615227, JString, required = true,
                                 default = nil)
  if valid_615227 != nil:
    section.add "Identity", valid_615227
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615228: Call_PostSetIdentityHeadersInNotificationsEnabled_615213;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615228.validator(path, query, header, formData, body)
  let scheme = call_615228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615228.url(scheme.get, call_615228.host, call_615228.base,
                         call_615228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615228, url, valid)

proc call*(call_615229: Call_PostSetIdentityHeadersInNotificationsEnabled_615213;
          Enabled: bool; Identity: string; NotificationType: string = "Bounce";
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615230 = newJObject()
  var formData_615231 = newJObject()
  add(formData_615231, "NotificationType", newJString(NotificationType))
  add(formData_615231, "Enabled", newJBool(Enabled))
  add(formData_615231, "Identity", newJString(Identity))
  add(query_615230, "Action", newJString(Action))
  add(query_615230, "Version", newJString(Version))
  result = call_615229.call(nil, query_615230, nil, formData_615231, nil)

var postSetIdentityHeadersInNotificationsEnabled* = Call_PostSetIdentityHeadersInNotificationsEnabled_615213(
    name: "postSetIdentityHeadersInNotificationsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_PostSetIdentityHeadersInNotificationsEnabled_615214,
    base: "/", url: url_PostSetIdentityHeadersInNotificationsEnabled_615215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityHeadersInNotificationsEnabled_615195 = ref object of OpenApiRestCall_612658
proc url_GetSetIdentityHeadersInNotificationsEnabled_615197(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityHeadersInNotificationsEnabled_615196(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615198 = query.getOrDefault("NotificationType")
  valid_615198 = validateParameter(valid_615198, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_615198 != nil:
    section.add "NotificationType", valid_615198
  var valid_615199 = query.getOrDefault("Enabled")
  valid_615199 = validateParameter(valid_615199, JBool, required = true, default = nil)
  if valid_615199 != nil:
    section.add "Enabled", valid_615199
  var valid_615200 = query.getOrDefault("Identity")
  valid_615200 = validateParameter(valid_615200, JString, required = true,
                                 default = nil)
  if valid_615200 != nil:
    section.add "Identity", valid_615200
  var valid_615201 = query.getOrDefault("Action")
  valid_615201 = validateParameter(valid_615201, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_615201 != nil:
    section.add "Action", valid_615201
  var valid_615202 = query.getOrDefault("Version")
  valid_615202 = validateParameter(valid_615202, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615202 != nil:
    section.add "Version", valid_615202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615203 = header.getOrDefault("X-Amz-Signature")
  valid_615203 = validateParameter(valid_615203, JString, required = false,
                                 default = nil)
  if valid_615203 != nil:
    section.add "X-Amz-Signature", valid_615203
  var valid_615204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615204 = validateParameter(valid_615204, JString, required = false,
                                 default = nil)
  if valid_615204 != nil:
    section.add "X-Amz-Content-Sha256", valid_615204
  var valid_615205 = header.getOrDefault("X-Amz-Date")
  valid_615205 = validateParameter(valid_615205, JString, required = false,
                                 default = nil)
  if valid_615205 != nil:
    section.add "X-Amz-Date", valid_615205
  var valid_615206 = header.getOrDefault("X-Amz-Credential")
  valid_615206 = validateParameter(valid_615206, JString, required = false,
                                 default = nil)
  if valid_615206 != nil:
    section.add "X-Amz-Credential", valid_615206
  var valid_615207 = header.getOrDefault("X-Amz-Security-Token")
  valid_615207 = validateParameter(valid_615207, JString, required = false,
                                 default = nil)
  if valid_615207 != nil:
    section.add "X-Amz-Security-Token", valid_615207
  var valid_615208 = header.getOrDefault("X-Amz-Algorithm")
  valid_615208 = validateParameter(valid_615208, JString, required = false,
                                 default = nil)
  if valid_615208 != nil:
    section.add "X-Amz-Algorithm", valid_615208
  var valid_615209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615209 = validateParameter(valid_615209, JString, required = false,
                                 default = nil)
  if valid_615209 != nil:
    section.add "X-Amz-SignedHeaders", valid_615209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615210: Call_GetSetIdentityHeadersInNotificationsEnabled_615195;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615210.validator(path, query, header, formData, body)
  let scheme = call_615210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615210.url(scheme.get, call_615210.host, call_615210.base,
                         call_615210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615210, url, valid)

proc call*(call_615211: Call_GetSetIdentityHeadersInNotificationsEnabled_615195;
          Enabled: bool; Identity: string; NotificationType: string = "Bounce";
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615212 = newJObject()
  add(query_615212, "NotificationType", newJString(NotificationType))
  add(query_615212, "Enabled", newJBool(Enabled))
  add(query_615212, "Identity", newJString(Identity))
  add(query_615212, "Action", newJString(Action))
  add(query_615212, "Version", newJString(Version))
  result = call_615211.call(nil, query_615212, nil, nil, nil)

var getSetIdentityHeadersInNotificationsEnabled* = Call_GetSetIdentityHeadersInNotificationsEnabled_615195(
    name: "getSetIdentityHeadersInNotificationsEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_GetSetIdentityHeadersInNotificationsEnabled_615196,
    base: "/", url: url_GetSetIdentityHeadersInNotificationsEnabled_615197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityMailFromDomain_615250 = ref object of OpenApiRestCall_612658
proc url_PostSetIdentityMailFromDomain_615252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityMailFromDomain_615251(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615253 = query.getOrDefault("Action")
  valid_615253 = validateParameter(valid_615253, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_615253 != nil:
    section.add "Action", valid_615253
  var valid_615254 = query.getOrDefault("Version")
  valid_615254 = validateParameter(valid_615254, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615254 != nil:
    section.add "Version", valid_615254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615255 = header.getOrDefault("X-Amz-Signature")
  valid_615255 = validateParameter(valid_615255, JString, required = false,
                                 default = nil)
  if valid_615255 != nil:
    section.add "X-Amz-Signature", valid_615255
  var valid_615256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615256 = validateParameter(valid_615256, JString, required = false,
                                 default = nil)
  if valid_615256 != nil:
    section.add "X-Amz-Content-Sha256", valid_615256
  var valid_615257 = header.getOrDefault("X-Amz-Date")
  valid_615257 = validateParameter(valid_615257, JString, required = false,
                                 default = nil)
  if valid_615257 != nil:
    section.add "X-Amz-Date", valid_615257
  var valid_615258 = header.getOrDefault("X-Amz-Credential")
  valid_615258 = validateParameter(valid_615258, JString, required = false,
                                 default = nil)
  if valid_615258 != nil:
    section.add "X-Amz-Credential", valid_615258
  var valid_615259 = header.getOrDefault("X-Amz-Security-Token")
  valid_615259 = validateParameter(valid_615259, JString, required = false,
                                 default = nil)
  if valid_615259 != nil:
    section.add "X-Amz-Security-Token", valid_615259
  var valid_615260 = header.getOrDefault("X-Amz-Algorithm")
  valid_615260 = validateParameter(valid_615260, JString, required = false,
                                 default = nil)
  if valid_615260 != nil:
    section.add "X-Amz-Algorithm", valid_615260
  var valid_615261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615261 = validateParameter(valid_615261, JString, required = false,
                                 default = nil)
  if valid_615261 != nil:
    section.add "X-Amz-SignedHeaders", valid_615261
  result.add "header", section
  ## parameters in `formData` object:
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  section = newJObject()
  var valid_615262 = formData.getOrDefault("BehaviorOnMXFailure")
  valid_615262 = validateParameter(valid_615262, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_615262 != nil:
    section.add "BehaviorOnMXFailure", valid_615262
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_615263 = formData.getOrDefault("Identity")
  valid_615263 = validateParameter(valid_615263, JString, required = true,
                                 default = nil)
  if valid_615263 != nil:
    section.add "Identity", valid_615263
  var valid_615264 = formData.getOrDefault("MailFromDomain")
  valid_615264 = validateParameter(valid_615264, JString, required = false,
                                 default = nil)
  if valid_615264 != nil:
    section.add "MailFromDomain", valid_615264
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615265: Call_PostSetIdentityMailFromDomain_615250; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615265.validator(path, query, header, formData, body)
  let scheme = call_615265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615265.url(scheme.get, call_615265.host, call_615265.base,
                         call_615265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615265, url, valid)

proc call*(call_615266: Call_PostSetIdentityMailFromDomain_615250;
          Identity: string; BehaviorOnMXFailure: string = "UseDefaultValue";
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615267 = newJObject()
  var formData_615268 = newJObject()
  add(formData_615268, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(formData_615268, "Identity", newJString(Identity))
  add(formData_615268, "MailFromDomain", newJString(MailFromDomain))
  add(query_615267, "Action", newJString(Action))
  add(query_615267, "Version", newJString(Version))
  result = call_615266.call(nil, query_615267, nil, formData_615268, nil)

var postSetIdentityMailFromDomain* = Call_PostSetIdentityMailFromDomain_615250(
    name: "postSetIdentityMailFromDomain", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_PostSetIdentityMailFromDomain_615251, base: "/",
    url: url_PostSetIdentityMailFromDomain_615252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityMailFromDomain_615232 = ref object of OpenApiRestCall_612658
proc url_GetSetIdentityMailFromDomain_615234(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityMailFromDomain_615233(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  section = newJObject()
  var valid_615235 = query.getOrDefault("MailFromDomain")
  valid_615235 = validateParameter(valid_615235, JString, required = false,
                                 default = nil)
  if valid_615235 != nil:
    section.add "MailFromDomain", valid_615235
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_615236 = query.getOrDefault("Identity")
  valid_615236 = validateParameter(valid_615236, JString, required = true,
                                 default = nil)
  if valid_615236 != nil:
    section.add "Identity", valid_615236
  var valid_615237 = query.getOrDefault("Action")
  valid_615237 = validateParameter(valid_615237, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_615237 != nil:
    section.add "Action", valid_615237
  var valid_615238 = query.getOrDefault("Version")
  valid_615238 = validateParameter(valid_615238, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615238 != nil:
    section.add "Version", valid_615238
  var valid_615239 = query.getOrDefault("BehaviorOnMXFailure")
  valid_615239 = validateParameter(valid_615239, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_615239 != nil:
    section.add "BehaviorOnMXFailure", valid_615239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615240 = header.getOrDefault("X-Amz-Signature")
  valid_615240 = validateParameter(valid_615240, JString, required = false,
                                 default = nil)
  if valid_615240 != nil:
    section.add "X-Amz-Signature", valid_615240
  var valid_615241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615241 = validateParameter(valid_615241, JString, required = false,
                                 default = nil)
  if valid_615241 != nil:
    section.add "X-Amz-Content-Sha256", valid_615241
  var valid_615242 = header.getOrDefault("X-Amz-Date")
  valid_615242 = validateParameter(valid_615242, JString, required = false,
                                 default = nil)
  if valid_615242 != nil:
    section.add "X-Amz-Date", valid_615242
  var valid_615243 = header.getOrDefault("X-Amz-Credential")
  valid_615243 = validateParameter(valid_615243, JString, required = false,
                                 default = nil)
  if valid_615243 != nil:
    section.add "X-Amz-Credential", valid_615243
  var valid_615244 = header.getOrDefault("X-Amz-Security-Token")
  valid_615244 = validateParameter(valid_615244, JString, required = false,
                                 default = nil)
  if valid_615244 != nil:
    section.add "X-Amz-Security-Token", valid_615244
  var valid_615245 = header.getOrDefault("X-Amz-Algorithm")
  valid_615245 = validateParameter(valid_615245, JString, required = false,
                                 default = nil)
  if valid_615245 != nil:
    section.add "X-Amz-Algorithm", valid_615245
  var valid_615246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615246 = validateParameter(valid_615246, JString, required = false,
                                 default = nil)
  if valid_615246 != nil:
    section.add "X-Amz-SignedHeaders", valid_615246
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615247: Call_GetSetIdentityMailFromDomain_615232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615247.validator(path, query, header, formData, body)
  let scheme = call_615247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615247.url(scheme.get, call_615247.host, call_615247.base,
                         call_615247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615247, url, valid)

proc call*(call_615248: Call_GetSetIdentityMailFromDomain_615232; Identity: string;
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01";
          BehaviorOnMXFailure: string = "UseDefaultValue"): Recallable =
  ## getSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  var query_615249 = newJObject()
  add(query_615249, "MailFromDomain", newJString(MailFromDomain))
  add(query_615249, "Identity", newJString(Identity))
  add(query_615249, "Action", newJString(Action))
  add(query_615249, "Version", newJString(Version))
  add(query_615249, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  result = call_615248.call(nil, query_615249, nil, nil, nil)

var getSetIdentityMailFromDomain* = Call_GetSetIdentityMailFromDomain_615232(
    name: "getSetIdentityMailFromDomain", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_GetSetIdentityMailFromDomain_615233, base: "/",
    url: url_GetSetIdentityMailFromDomain_615234,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityNotificationTopic_615287 = ref object of OpenApiRestCall_612658
proc url_PostSetIdentityNotificationTopic_615289(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityNotificationTopic_615288(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615290 = query.getOrDefault("Action")
  valid_615290 = validateParameter(valid_615290, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_615290 != nil:
    section.add "Action", valid_615290
  var valid_615291 = query.getOrDefault("Version")
  valid_615291 = validateParameter(valid_615291, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615291 != nil:
    section.add "Version", valid_615291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615292 = header.getOrDefault("X-Amz-Signature")
  valid_615292 = validateParameter(valid_615292, JString, required = false,
                                 default = nil)
  if valid_615292 != nil:
    section.add "X-Amz-Signature", valid_615292
  var valid_615293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615293 = validateParameter(valid_615293, JString, required = false,
                                 default = nil)
  if valid_615293 != nil:
    section.add "X-Amz-Content-Sha256", valid_615293
  var valid_615294 = header.getOrDefault("X-Amz-Date")
  valid_615294 = validateParameter(valid_615294, JString, required = false,
                                 default = nil)
  if valid_615294 != nil:
    section.add "X-Amz-Date", valid_615294
  var valid_615295 = header.getOrDefault("X-Amz-Credential")
  valid_615295 = validateParameter(valid_615295, JString, required = false,
                                 default = nil)
  if valid_615295 != nil:
    section.add "X-Amz-Credential", valid_615295
  var valid_615296 = header.getOrDefault("X-Amz-Security-Token")
  valid_615296 = validateParameter(valid_615296, JString, required = false,
                                 default = nil)
  if valid_615296 != nil:
    section.add "X-Amz-Security-Token", valid_615296
  var valid_615297 = header.getOrDefault("X-Amz-Algorithm")
  valid_615297 = validateParameter(valid_615297, JString, required = false,
                                 default = nil)
  if valid_615297 != nil:
    section.add "X-Amz-Algorithm", valid_615297
  var valid_615298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615298 = validateParameter(valid_615298, JString, required = false,
                                 default = nil)
  if valid_615298 != nil:
    section.add "X-Amz-SignedHeaders", valid_615298
  result.add "header", section
  ## parameters in `formData` object:
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  section = newJObject()
  var valid_615299 = formData.getOrDefault("NotificationType")
  valid_615299 = validateParameter(valid_615299, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_615299 != nil:
    section.add "NotificationType", valid_615299
  var valid_615300 = formData.getOrDefault("Identity")
  valid_615300 = validateParameter(valid_615300, JString, required = true,
                                 default = nil)
  if valid_615300 != nil:
    section.add "Identity", valid_615300
  var valid_615301 = formData.getOrDefault("SnsTopic")
  valid_615301 = validateParameter(valid_615301, JString, required = false,
                                 default = nil)
  if valid_615301 != nil:
    section.add "SnsTopic", valid_615301
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615302: Call_PostSetIdentityNotificationTopic_615287;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615302.validator(path, query, header, formData, body)
  let scheme = call_615302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615302.url(scheme.get, call_615302.host, call_615302.base,
                         call_615302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615302, url, valid)

proc call*(call_615303: Call_PostSetIdentityNotificationTopic_615287;
          Identity: string; NotificationType: string = "Bounce";
          SnsTopic: string = ""; Action: string = "SetIdentityNotificationTopic";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615304 = newJObject()
  var formData_615305 = newJObject()
  add(formData_615305, "NotificationType", newJString(NotificationType))
  add(formData_615305, "Identity", newJString(Identity))
  add(formData_615305, "SnsTopic", newJString(SnsTopic))
  add(query_615304, "Action", newJString(Action))
  add(query_615304, "Version", newJString(Version))
  result = call_615303.call(nil, query_615304, nil, formData_615305, nil)

var postSetIdentityNotificationTopic* = Call_PostSetIdentityNotificationTopic_615287(
    name: "postSetIdentityNotificationTopic", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_PostSetIdentityNotificationTopic_615288, base: "/",
    url: url_PostSetIdentityNotificationTopic_615289,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityNotificationTopic_615269 = ref object of OpenApiRestCall_612658
proc url_GetSetIdentityNotificationTopic_615271(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityNotificationTopic_615270(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615272 = query.getOrDefault("NotificationType")
  valid_615272 = validateParameter(valid_615272, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_615272 != nil:
    section.add "NotificationType", valid_615272
  var valid_615273 = query.getOrDefault("SnsTopic")
  valid_615273 = validateParameter(valid_615273, JString, required = false,
                                 default = nil)
  if valid_615273 != nil:
    section.add "SnsTopic", valid_615273
  var valid_615274 = query.getOrDefault("Identity")
  valid_615274 = validateParameter(valid_615274, JString, required = true,
                                 default = nil)
  if valid_615274 != nil:
    section.add "Identity", valid_615274
  var valid_615275 = query.getOrDefault("Action")
  valid_615275 = validateParameter(valid_615275, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_615275 != nil:
    section.add "Action", valid_615275
  var valid_615276 = query.getOrDefault("Version")
  valid_615276 = validateParameter(valid_615276, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615276 != nil:
    section.add "Version", valid_615276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615277 = header.getOrDefault("X-Amz-Signature")
  valid_615277 = validateParameter(valid_615277, JString, required = false,
                                 default = nil)
  if valid_615277 != nil:
    section.add "X-Amz-Signature", valid_615277
  var valid_615278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615278 = validateParameter(valid_615278, JString, required = false,
                                 default = nil)
  if valid_615278 != nil:
    section.add "X-Amz-Content-Sha256", valid_615278
  var valid_615279 = header.getOrDefault("X-Amz-Date")
  valid_615279 = validateParameter(valid_615279, JString, required = false,
                                 default = nil)
  if valid_615279 != nil:
    section.add "X-Amz-Date", valid_615279
  var valid_615280 = header.getOrDefault("X-Amz-Credential")
  valid_615280 = validateParameter(valid_615280, JString, required = false,
                                 default = nil)
  if valid_615280 != nil:
    section.add "X-Amz-Credential", valid_615280
  var valid_615281 = header.getOrDefault("X-Amz-Security-Token")
  valid_615281 = validateParameter(valid_615281, JString, required = false,
                                 default = nil)
  if valid_615281 != nil:
    section.add "X-Amz-Security-Token", valid_615281
  var valid_615282 = header.getOrDefault("X-Amz-Algorithm")
  valid_615282 = validateParameter(valid_615282, JString, required = false,
                                 default = nil)
  if valid_615282 != nil:
    section.add "X-Amz-Algorithm", valid_615282
  var valid_615283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615283 = validateParameter(valid_615283, JString, required = false,
                                 default = nil)
  if valid_615283 != nil:
    section.add "X-Amz-SignedHeaders", valid_615283
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615284: Call_GetSetIdentityNotificationTopic_615269;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615284.validator(path, query, header, formData, body)
  let scheme = call_615284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615284.url(scheme.get, call_615284.host, call_615284.base,
                         call_615284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615284, url, valid)

proc call*(call_615285: Call_GetSetIdentityNotificationTopic_615269;
          Identity: string; NotificationType: string = "Bounce";
          SnsTopic: string = ""; Action: string = "SetIdentityNotificationTopic";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615286 = newJObject()
  add(query_615286, "NotificationType", newJString(NotificationType))
  add(query_615286, "SnsTopic", newJString(SnsTopic))
  add(query_615286, "Identity", newJString(Identity))
  add(query_615286, "Action", newJString(Action))
  add(query_615286, "Version", newJString(Version))
  result = call_615285.call(nil, query_615286, nil, nil, nil)

var getSetIdentityNotificationTopic* = Call_GetSetIdentityNotificationTopic_615269(
    name: "getSetIdentityNotificationTopic", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_GetSetIdentityNotificationTopic_615270, base: "/",
    url: url_GetSetIdentityNotificationTopic_615271,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetReceiptRulePosition_615324 = ref object of OpenApiRestCall_612658
proc url_PostSetReceiptRulePosition_615326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetReceiptRulePosition_615325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615327 = query.getOrDefault("Action")
  valid_615327 = validateParameter(valid_615327, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_615327 != nil:
    section.add "Action", valid_615327
  var valid_615328 = query.getOrDefault("Version")
  valid_615328 = validateParameter(valid_615328, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615328 != nil:
    section.add "Version", valid_615328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615329 = header.getOrDefault("X-Amz-Signature")
  valid_615329 = validateParameter(valid_615329, JString, required = false,
                                 default = nil)
  if valid_615329 != nil:
    section.add "X-Amz-Signature", valid_615329
  var valid_615330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615330 = validateParameter(valid_615330, JString, required = false,
                                 default = nil)
  if valid_615330 != nil:
    section.add "X-Amz-Content-Sha256", valid_615330
  var valid_615331 = header.getOrDefault("X-Amz-Date")
  valid_615331 = validateParameter(valid_615331, JString, required = false,
                                 default = nil)
  if valid_615331 != nil:
    section.add "X-Amz-Date", valid_615331
  var valid_615332 = header.getOrDefault("X-Amz-Credential")
  valid_615332 = validateParameter(valid_615332, JString, required = false,
                                 default = nil)
  if valid_615332 != nil:
    section.add "X-Amz-Credential", valid_615332
  var valid_615333 = header.getOrDefault("X-Amz-Security-Token")
  valid_615333 = validateParameter(valid_615333, JString, required = false,
                                 default = nil)
  if valid_615333 != nil:
    section.add "X-Amz-Security-Token", valid_615333
  var valid_615334 = header.getOrDefault("X-Amz-Algorithm")
  valid_615334 = validateParameter(valid_615334, JString, required = false,
                                 default = nil)
  if valid_615334 != nil:
    section.add "X-Amz-Algorithm", valid_615334
  var valid_615335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615335 = validateParameter(valid_615335, JString, required = false,
                                 default = nil)
  if valid_615335 != nil:
    section.add "X-Amz-SignedHeaders", valid_615335
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_615336 = formData.getOrDefault("RuleName")
  valid_615336 = validateParameter(valid_615336, JString, required = true,
                                 default = nil)
  if valid_615336 != nil:
    section.add "RuleName", valid_615336
  var valid_615337 = formData.getOrDefault("RuleSetName")
  valid_615337 = validateParameter(valid_615337, JString, required = true,
                                 default = nil)
  if valid_615337 != nil:
    section.add "RuleSetName", valid_615337
  var valid_615338 = formData.getOrDefault("After")
  valid_615338 = validateParameter(valid_615338, JString, required = false,
                                 default = nil)
  if valid_615338 != nil:
    section.add "After", valid_615338
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615339: Call_PostSetReceiptRulePosition_615324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615339.validator(path, query, header, formData, body)
  let scheme = call_615339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615339.url(scheme.get, call_615339.host, call_615339.base,
                         call_615339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615339, url, valid)

proc call*(call_615340: Call_PostSetReceiptRulePosition_615324; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## postSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615341 = newJObject()
  var formData_615342 = newJObject()
  add(formData_615342, "RuleName", newJString(RuleName))
  add(formData_615342, "RuleSetName", newJString(RuleSetName))
  add(formData_615342, "After", newJString(After))
  add(query_615341, "Action", newJString(Action))
  add(query_615341, "Version", newJString(Version))
  result = call_615340.call(nil, query_615341, nil, formData_615342, nil)

var postSetReceiptRulePosition* = Call_PostSetReceiptRulePosition_615324(
    name: "postSetReceiptRulePosition", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_PostSetReceiptRulePosition_615325, base: "/",
    url: url_PostSetReceiptRulePosition_615326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetReceiptRulePosition_615306 = ref object of OpenApiRestCall_612658
proc url_GetSetReceiptRulePosition_615308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetReceiptRulePosition_615307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_615309 = query.getOrDefault("RuleName")
  valid_615309 = validateParameter(valid_615309, JString, required = true,
                                 default = nil)
  if valid_615309 != nil:
    section.add "RuleName", valid_615309
  var valid_615310 = query.getOrDefault("After")
  valid_615310 = validateParameter(valid_615310, JString, required = false,
                                 default = nil)
  if valid_615310 != nil:
    section.add "After", valid_615310
  var valid_615311 = query.getOrDefault("Action")
  valid_615311 = validateParameter(valid_615311, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_615311 != nil:
    section.add "Action", valid_615311
  var valid_615312 = query.getOrDefault("RuleSetName")
  valid_615312 = validateParameter(valid_615312, JString, required = true,
                                 default = nil)
  if valid_615312 != nil:
    section.add "RuleSetName", valid_615312
  var valid_615313 = query.getOrDefault("Version")
  valid_615313 = validateParameter(valid_615313, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615313 != nil:
    section.add "Version", valid_615313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615314 = header.getOrDefault("X-Amz-Signature")
  valid_615314 = validateParameter(valid_615314, JString, required = false,
                                 default = nil)
  if valid_615314 != nil:
    section.add "X-Amz-Signature", valid_615314
  var valid_615315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615315 = validateParameter(valid_615315, JString, required = false,
                                 default = nil)
  if valid_615315 != nil:
    section.add "X-Amz-Content-Sha256", valid_615315
  var valid_615316 = header.getOrDefault("X-Amz-Date")
  valid_615316 = validateParameter(valid_615316, JString, required = false,
                                 default = nil)
  if valid_615316 != nil:
    section.add "X-Amz-Date", valid_615316
  var valid_615317 = header.getOrDefault("X-Amz-Credential")
  valid_615317 = validateParameter(valid_615317, JString, required = false,
                                 default = nil)
  if valid_615317 != nil:
    section.add "X-Amz-Credential", valid_615317
  var valid_615318 = header.getOrDefault("X-Amz-Security-Token")
  valid_615318 = validateParameter(valid_615318, JString, required = false,
                                 default = nil)
  if valid_615318 != nil:
    section.add "X-Amz-Security-Token", valid_615318
  var valid_615319 = header.getOrDefault("X-Amz-Algorithm")
  valid_615319 = validateParameter(valid_615319, JString, required = false,
                                 default = nil)
  if valid_615319 != nil:
    section.add "X-Amz-Algorithm", valid_615319
  var valid_615320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615320 = validateParameter(valid_615320, JString, required = false,
                                 default = nil)
  if valid_615320 != nil:
    section.add "X-Amz-SignedHeaders", valid_615320
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615321: Call_GetSetReceiptRulePosition_615306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615321.validator(path, query, header, formData, body)
  let scheme = call_615321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615321.url(scheme.get, call_615321.host, call_615321.base,
                         call_615321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615321, url, valid)

proc call*(call_615322: Call_GetSetReceiptRulePosition_615306; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## getSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Version: string (required)
  var query_615323 = newJObject()
  add(query_615323, "RuleName", newJString(RuleName))
  add(query_615323, "After", newJString(After))
  add(query_615323, "Action", newJString(Action))
  add(query_615323, "RuleSetName", newJString(RuleSetName))
  add(query_615323, "Version", newJString(Version))
  result = call_615322.call(nil, query_615323, nil, nil, nil)

var getSetReceiptRulePosition* = Call_GetSetReceiptRulePosition_615306(
    name: "getSetReceiptRulePosition", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_GetSetReceiptRulePosition_615307, base: "/",
    url: url_GetSetReceiptRulePosition_615308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestRenderTemplate_615360 = ref object of OpenApiRestCall_612658
proc url_PostTestRenderTemplate_615362(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTestRenderTemplate_615361(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615363 = query.getOrDefault("Action")
  valid_615363 = validateParameter(valid_615363, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_615363 != nil:
    section.add "Action", valid_615363
  var valid_615364 = query.getOrDefault("Version")
  valid_615364 = validateParameter(valid_615364, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615364 != nil:
    section.add "Version", valid_615364
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615365 = header.getOrDefault("X-Amz-Signature")
  valid_615365 = validateParameter(valid_615365, JString, required = false,
                                 default = nil)
  if valid_615365 != nil:
    section.add "X-Amz-Signature", valid_615365
  var valid_615366 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615366 = validateParameter(valid_615366, JString, required = false,
                                 default = nil)
  if valid_615366 != nil:
    section.add "X-Amz-Content-Sha256", valid_615366
  var valid_615367 = header.getOrDefault("X-Amz-Date")
  valid_615367 = validateParameter(valid_615367, JString, required = false,
                                 default = nil)
  if valid_615367 != nil:
    section.add "X-Amz-Date", valid_615367
  var valid_615368 = header.getOrDefault("X-Amz-Credential")
  valid_615368 = validateParameter(valid_615368, JString, required = false,
                                 default = nil)
  if valid_615368 != nil:
    section.add "X-Amz-Credential", valid_615368
  var valid_615369 = header.getOrDefault("X-Amz-Security-Token")
  valid_615369 = validateParameter(valid_615369, JString, required = false,
                                 default = nil)
  if valid_615369 != nil:
    section.add "X-Amz-Security-Token", valid_615369
  var valid_615370 = header.getOrDefault("X-Amz-Algorithm")
  valid_615370 = validateParameter(valid_615370, JString, required = false,
                                 default = nil)
  if valid_615370 != nil:
    section.add "X-Amz-Algorithm", valid_615370
  var valid_615371 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615371 = validateParameter(valid_615371, JString, required = false,
                                 default = nil)
  if valid_615371 != nil:
    section.add "X-Amz-SignedHeaders", valid_615371
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_615372 = formData.getOrDefault("TemplateName")
  valid_615372 = validateParameter(valid_615372, JString, required = true,
                                 default = nil)
  if valid_615372 != nil:
    section.add "TemplateName", valid_615372
  var valid_615373 = formData.getOrDefault("TemplateData")
  valid_615373 = validateParameter(valid_615373, JString, required = true,
                                 default = nil)
  if valid_615373 != nil:
    section.add "TemplateData", valid_615373
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615374: Call_PostTestRenderTemplate_615360; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615374.validator(path, query, header, formData, body)
  let scheme = call_615374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615374.url(scheme.get, call_615374.host, call_615374.base,
                         call_615374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615374, url, valid)

proc call*(call_615375: Call_PostTestRenderTemplate_615360; TemplateName: string;
          TemplateData: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615376 = newJObject()
  var formData_615377 = newJObject()
  add(formData_615377, "TemplateName", newJString(TemplateName))
  add(formData_615377, "TemplateData", newJString(TemplateData))
  add(query_615376, "Action", newJString(Action))
  add(query_615376, "Version", newJString(Version))
  result = call_615375.call(nil, query_615376, nil, formData_615377, nil)

var postTestRenderTemplate* = Call_PostTestRenderTemplate_615360(
    name: "postTestRenderTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_PostTestRenderTemplate_615361, base: "/",
    url: url_PostTestRenderTemplate_615362, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestRenderTemplate_615343 = ref object of OpenApiRestCall_612658
proc url_GetTestRenderTemplate_615345(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTestRenderTemplate_615344(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_615346 = query.getOrDefault("TemplateData")
  valid_615346 = validateParameter(valid_615346, JString, required = true,
                                 default = nil)
  if valid_615346 != nil:
    section.add "TemplateData", valid_615346
  var valid_615347 = query.getOrDefault("Action")
  valid_615347 = validateParameter(valid_615347, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_615347 != nil:
    section.add "Action", valid_615347
  var valid_615348 = query.getOrDefault("Version")
  valid_615348 = validateParameter(valid_615348, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615348 != nil:
    section.add "Version", valid_615348
  var valid_615349 = query.getOrDefault("TemplateName")
  valid_615349 = validateParameter(valid_615349, JString, required = true,
                                 default = nil)
  if valid_615349 != nil:
    section.add "TemplateName", valid_615349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615350 = header.getOrDefault("X-Amz-Signature")
  valid_615350 = validateParameter(valid_615350, JString, required = false,
                                 default = nil)
  if valid_615350 != nil:
    section.add "X-Amz-Signature", valid_615350
  var valid_615351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615351 = validateParameter(valid_615351, JString, required = false,
                                 default = nil)
  if valid_615351 != nil:
    section.add "X-Amz-Content-Sha256", valid_615351
  var valid_615352 = header.getOrDefault("X-Amz-Date")
  valid_615352 = validateParameter(valid_615352, JString, required = false,
                                 default = nil)
  if valid_615352 != nil:
    section.add "X-Amz-Date", valid_615352
  var valid_615353 = header.getOrDefault("X-Amz-Credential")
  valid_615353 = validateParameter(valid_615353, JString, required = false,
                                 default = nil)
  if valid_615353 != nil:
    section.add "X-Amz-Credential", valid_615353
  var valid_615354 = header.getOrDefault("X-Amz-Security-Token")
  valid_615354 = validateParameter(valid_615354, JString, required = false,
                                 default = nil)
  if valid_615354 != nil:
    section.add "X-Amz-Security-Token", valid_615354
  var valid_615355 = header.getOrDefault("X-Amz-Algorithm")
  valid_615355 = validateParameter(valid_615355, JString, required = false,
                                 default = nil)
  if valid_615355 != nil:
    section.add "X-Amz-Algorithm", valid_615355
  var valid_615356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615356 = validateParameter(valid_615356, JString, required = false,
                                 default = nil)
  if valid_615356 != nil:
    section.add "X-Amz-SignedHeaders", valid_615356
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615357: Call_GetTestRenderTemplate_615343; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615357.validator(path, query, header, formData, body)
  let scheme = call_615357.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615357.url(scheme.get, call_615357.host, call_615357.base,
                         call_615357.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615357, url, valid)

proc call*(call_615358: Call_GetTestRenderTemplate_615343; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  var query_615359 = newJObject()
  add(query_615359, "TemplateData", newJString(TemplateData))
  add(query_615359, "Action", newJString(Action))
  add(query_615359, "Version", newJString(Version))
  add(query_615359, "TemplateName", newJString(TemplateName))
  result = call_615358.call(nil, query_615359, nil, nil, nil)

var getTestRenderTemplate* = Call_GetTestRenderTemplate_615343(
    name: "getTestRenderTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_GetTestRenderTemplate_615344, base: "/",
    url: url_GetTestRenderTemplate_615345, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountSendingEnabled_615394 = ref object of OpenApiRestCall_612658
proc url_PostUpdateAccountSendingEnabled_615396(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountSendingEnabled_615395(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615397 = query.getOrDefault("Action")
  valid_615397 = validateParameter(valid_615397, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_615397 != nil:
    section.add "Action", valid_615397
  var valid_615398 = query.getOrDefault("Version")
  valid_615398 = validateParameter(valid_615398, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615398 != nil:
    section.add "Version", valid_615398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615399 = header.getOrDefault("X-Amz-Signature")
  valid_615399 = validateParameter(valid_615399, JString, required = false,
                                 default = nil)
  if valid_615399 != nil:
    section.add "X-Amz-Signature", valid_615399
  var valid_615400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615400 = validateParameter(valid_615400, JString, required = false,
                                 default = nil)
  if valid_615400 != nil:
    section.add "X-Amz-Content-Sha256", valid_615400
  var valid_615401 = header.getOrDefault("X-Amz-Date")
  valid_615401 = validateParameter(valid_615401, JString, required = false,
                                 default = nil)
  if valid_615401 != nil:
    section.add "X-Amz-Date", valid_615401
  var valid_615402 = header.getOrDefault("X-Amz-Credential")
  valid_615402 = validateParameter(valid_615402, JString, required = false,
                                 default = nil)
  if valid_615402 != nil:
    section.add "X-Amz-Credential", valid_615402
  var valid_615403 = header.getOrDefault("X-Amz-Security-Token")
  valid_615403 = validateParameter(valid_615403, JString, required = false,
                                 default = nil)
  if valid_615403 != nil:
    section.add "X-Amz-Security-Token", valid_615403
  var valid_615404 = header.getOrDefault("X-Amz-Algorithm")
  valid_615404 = validateParameter(valid_615404, JString, required = false,
                                 default = nil)
  if valid_615404 != nil:
    section.add "X-Amz-Algorithm", valid_615404
  var valid_615405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615405 = validateParameter(valid_615405, JString, required = false,
                                 default = nil)
  if valid_615405 != nil:
    section.add "X-Amz-SignedHeaders", valid_615405
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  section = newJObject()
  var valid_615406 = formData.getOrDefault("Enabled")
  valid_615406 = validateParameter(valid_615406, JBool, required = false, default = nil)
  if valid_615406 != nil:
    section.add "Enabled", valid_615406
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615407: Call_PostUpdateAccountSendingEnabled_615394;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615407.validator(path, query, header, formData, body)
  let scheme = call_615407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615407.url(scheme.get, call_615407.host, call_615407.base,
                         call_615407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615407, url, valid)

proc call*(call_615408: Call_PostUpdateAccountSendingEnabled_615394;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615409 = newJObject()
  var formData_615410 = newJObject()
  add(formData_615410, "Enabled", newJBool(Enabled))
  add(query_615409, "Action", newJString(Action))
  add(query_615409, "Version", newJString(Version))
  result = call_615408.call(nil, query_615409, nil, formData_615410, nil)

var postUpdateAccountSendingEnabled* = Call_PostUpdateAccountSendingEnabled_615394(
    name: "postUpdateAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_PostUpdateAccountSendingEnabled_615395, base: "/",
    url: url_PostUpdateAccountSendingEnabled_615396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountSendingEnabled_615378 = ref object of OpenApiRestCall_612658
proc url_GetUpdateAccountSendingEnabled_615380(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountSendingEnabled_615379(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615381 = query.getOrDefault("Enabled")
  valid_615381 = validateParameter(valid_615381, JBool, required = false, default = nil)
  if valid_615381 != nil:
    section.add "Enabled", valid_615381
  var valid_615382 = query.getOrDefault("Action")
  valid_615382 = validateParameter(valid_615382, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_615382 != nil:
    section.add "Action", valid_615382
  var valid_615383 = query.getOrDefault("Version")
  valid_615383 = validateParameter(valid_615383, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615383 != nil:
    section.add "Version", valid_615383
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615384 = header.getOrDefault("X-Amz-Signature")
  valid_615384 = validateParameter(valid_615384, JString, required = false,
                                 default = nil)
  if valid_615384 != nil:
    section.add "X-Amz-Signature", valid_615384
  var valid_615385 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615385 = validateParameter(valid_615385, JString, required = false,
                                 default = nil)
  if valid_615385 != nil:
    section.add "X-Amz-Content-Sha256", valid_615385
  var valid_615386 = header.getOrDefault("X-Amz-Date")
  valid_615386 = validateParameter(valid_615386, JString, required = false,
                                 default = nil)
  if valid_615386 != nil:
    section.add "X-Amz-Date", valid_615386
  var valid_615387 = header.getOrDefault("X-Amz-Credential")
  valid_615387 = validateParameter(valid_615387, JString, required = false,
                                 default = nil)
  if valid_615387 != nil:
    section.add "X-Amz-Credential", valid_615387
  var valid_615388 = header.getOrDefault("X-Amz-Security-Token")
  valid_615388 = validateParameter(valid_615388, JString, required = false,
                                 default = nil)
  if valid_615388 != nil:
    section.add "X-Amz-Security-Token", valid_615388
  var valid_615389 = header.getOrDefault("X-Amz-Algorithm")
  valid_615389 = validateParameter(valid_615389, JString, required = false,
                                 default = nil)
  if valid_615389 != nil:
    section.add "X-Amz-Algorithm", valid_615389
  var valid_615390 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615390 = validateParameter(valid_615390, JString, required = false,
                                 default = nil)
  if valid_615390 != nil:
    section.add "X-Amz-SignedHeaders", valid_615390
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615391: Call_GetUpdateAccountSendingEnabled_615378; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615391.validator(path, query, header, formData, body)
  let scheme = call_615391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615391.url(scheme.get, call_615391.host, call_615391.base,
                         call_615391.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615391, url, valid)

proc call*(call_615392: Call_GetUpdateAccountSendingEnabled_615378;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615393 = newJObject()
  add(query_615393, "Enabled", newJBool(Enabled))
  add(query_615393, "Action", newJString(Action))
  add(query_615393, "Version", newJString(Version))
  result = call_615392.call(nil, query_615393, nil, nil, nil)

var getUpdateAccountSendingEnabled* = Call_GetUpdateAccountSendingEnabled_615378(
    name: "getUpdateAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_GetUpdateAccountSendingEnabled_615379, base: "/",
    url: url_GetUpdateAccountSendingEnabled_615380,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetEventDestination_615433 = ref object of OpenApiRestCall_612658
proc url_PostUpdateConfigurationSetEventDestination_615435(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetEventDestination_615434(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615436 = query.getOrDefault("Action")
  valid_615436 = validateParameter(valid_615436, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_615436 != nil:
    section.add "Action", valid_615436
  var valid_615437 = query.getOrDefault("Version")
  valid_615437 = validateParameter(valid_615437, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615437 != nil:
    section.add "Version", valid_615437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615438 = header.getOrDefault("X-Amz-Signature")
  valid_615438 = validateParameter(valid_615438, JString, required = false,
                                 default = nil)
  if valid_615438 != nil:
    section.add "X-Amz-Signature", valid_615438
  var valid_615439 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615439 = validateParameter(valid_615439, JString, required = false,
                                 default = nil)
  if valid_615439 != nil:
    section.add "X-Amz-Content-Sha256", valid_615439
  var valid_615440 = header.getOrDefault("X-Amz-Date")
  valid_615440 = validateParameter(valid_615440, JString, required = false,
                                 default = nil)
  if valid_615440 != nil:
    section.add "X-Amz-Date", valid_615440
  var valid_615441 = header.getOrDefault("X-Amz-Credential")
  valid_615441 = validateParameter(valid_615441, JString, required = false,
                                 default = nil)
  if valid_615441 != nil:
    section.add "X-Amz-Credential", valid_615441
  var valid_615442 = header.getOrDefault("X-Amz-Security-Token")
  valid_615442 = validateParameter(valid_615442, JString, required = false,
                                 default = nil)
  if valid_615442 != nil:
    section.add "X-Amz-Security-Token", valid_615442
  var valid_615443 = header.getOrDefault("X-Amz-Algorithm")
  valid_615443 = validateParameter(valid_615443, JString, required = false,
                                 default = nil)
  if valid_615443 != nil:
    section.add "X-Amz-Algorithm", valid_615443
  var valid_615444 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615444 = validateParameter(valid_615444, JString, required = false,
                                 default = nil)
  if valid_615444 != nil:
    section.add "X-Amz-SignedHeaders", valid_615444
  result.add "header", section
  ## parameters in `formData` object:
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  var valid_615445 = formData.getOrDefault("EventDestination.Name")
  valid_615445 = validateParameter(valid_615445, JString, required = false,
                                 default = nil)
  if valid_615445 != nil:
    section.add "EventDestination.Name", valid_615445
  var valid_615446 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_615446 = validateParameter(valid_615446, JArray, required = false,
                                 default = nil)
  if valid_615446 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_615446
  var valid_615447 = formData.getOrDefault("EventDestination.Enabled")
  valid_615447 = validateParameter(valid_615447, JString, required = false,
                                 default = nil)
  if valid_615447 != nil:
    section.add "EventDestination.Enabled", valid_615447
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_615448 = formData.getOrDefault("ConfigurationSetName")
  valid_615448 = validateParameter(valid_615448, JString, required = true,
                                 default = nil)
  if valid_615448 != nil:
    section.add "ConfigurationSetName", valid_615448
  var valid_615449 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_615449 = validateParameter(valid_615449, JString, required = false,
                                 default = nil)
  if valid_615449 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_615449
  var valid_615450 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_615450 = validateParameter(valid_615450, JString, required = false,
                                 default = nil)
  if valid_615450 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_615450
  var valid_615451 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_615451 = validateParameter(valid_615451, JString, required = false,
                                 default = nil)
  if valid_615451 != nil:
    section.add "EventDestination.SNSDestination", valid_615451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615452: Call_PostUpdateConfigurationSetEventDestination_615433;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615452.validator(path, query, header, formData, body)
  let scheme = call_615452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615452.url(scheme.get, call_615452.host, call_615452.base,
                         call_615452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615452, url, valid)

proc call*(call_615453: Call_PostUpdateConfigurationSetEventDestination_615433;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationEnabled: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          Version: string = "2010-12-01";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationSNSDestination: string = ""): Recallable =
  ## postUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: string (required)
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  var query_615454 = newJObject()
  var formData_615455 = newJObject()
  add(formData_615455, "EventDestination.Name", newJString(EventDestinationName))
  if EventDestinationMatchingEventTypes != nil:
    formData_615455.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_615455, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_615454, "Action", newJString(Action))
  add(formData_615455, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615454, "Version", newJString(Version))
  add(formData_615455, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(formData_615455, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_615455, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  result = call_615453.call(nil, query_615454, nil, formData_615455, nil)

var postUpdateConfigurationSetEventDestination* = Call_PostUpdateConfigurationSetEventDestination_615433(
    name: "postUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_PostUpdateConfigurationSetEventDestination_615434,
    base: "/", url: url_PostUpdateConfigurationSetEventDestination_615435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetEventDestination_615411 = ref object of OpenApiRestCall_612658
proc url_GetUpdateConfigurationSetEventDestination_615413(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetEventDestination_615412(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: JString (required)
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  section = newJObject()
  var valid_615414 = query.getOrDefault("EventDestination.Enabled")
  valid_615414 = validateParameter(valid_615414, JString, required = false,
                                 default = nil)
  if valid_615414 != nil:
    section.add "EventDestination.Enabled", valid_615414
  var valid_615415 = query.getOrDefault("EventDestination.SNSDestination")
  valid_615415 = validateParameter(valid_615415, JString, required = false,
                                 default = nil)
  if valid_615415 != nil:
    section.add "EventDestination.SNSDestination", valid_615415
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_615416 = query.getOrDefault("ConfigurationSetName")
  valid_615416 = validateParameter(valid_615416, JString, required = true,
                                 default = nil)
  if valid_615416 != nil:
    section.add "ConfigurationSetName", valid_615416
  var valid_615417 = query.getOrDefault("Action")
  valid_615417 = validateParameter(valid_615417, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_615417 != nil:
    section.add "Action", valid_615417
  var valid_615418 = query.getOrDefault("EventDestination.Name")
  valid_615418 = validateParameter(valid_615418, JString, required = false,
                                 default = nil)
  if valid_615418 != nil:
    section.add "EventDestination.Name", valid_615418
  var valid_615419 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_615419 = validateParameter(valid_615419, JString, required = false,
                                 default = nil)
  if valid_615419 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_615419
  var valid_615420 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_615420 = validateParameter(valid_615420, JString, required = false,
                                 default = nil)
  if valid_615420 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_615420
  var valid_615421 = query.getOrDefault("Version")
  valid_615421 = validateParameter(valid_615421, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615421 != nil:
    section.add "Version", valid_615421
  var valid_615422 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_615422 = validateParameter(valid_615422, JArray, required = false,
                                 default = nil)
  if valid_615422 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_615422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615423 = header.getOrDefault("X-Amz-Signature")
  valid_615423 = validateParameter(valid_615423, JString, required = false,
                                 default = nil)
  if valid_615423 != nil:
    section.add "X-Amz-Signature", valid_615423
  var valid_615424 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615424 = validateParameter(valid_615424, JString, required = false,
                                 default = nil)
  if valid_615424 != nil:
    section.add "X-Amz-Content-Sha256", valid_615424
  var valid_615425 = header.getOrDefault("X-Amz-Date")
  valid_615425 = validateParameter(valid_615425, JString, required = false,
                                 default = nil)
  if valid_615425 != nil:
    section.add "X-Amz-Date", valid_615425
  var valid_615426 = header.getOrDefault("X-Amz-Credential")
  valid_615426 = validateParameter(valid_615426, JString, required = false,
                                 default = nil)
  if valid_615426 != nil:
    section.add "X-Amz-Credential", valid_615426
  var valid_615427 = header.getOrDefault("X-Amz-Security-Token")
  valid_615427 = validateParameter(valid_615427, JString, required = false,
                                 default = nil)
  if valid_615427 != nil:
    section.add "X-Amz-Security-Token", valid_615427
  var valid_615428 = header.getOrDefault("X-Amz-Algorithm")
  valid_615428 = validateParameter(valid_615428, JString, required = false,
                                 default = nil)
  if valid_615428 != nil:
    section.add "X-Amz-Algorithm", valid_615428
  var valid_615429 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615429 = validateParameter(valid_615429, JString, required = false,
                                 default = nil)
  if valid_615429 != nil:
    section.add "X-Amz-SignedHeaders", valid_615429
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615430: Call_GetUpdateConfigurationSetEventDestination_615411;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615430.validator(path, query, header, formData, body)
  let scheme = call_615430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615430.url(scheme.get, call_615430.host, call_615430.base,
                         call_615430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615430, url, valid)

proc call*(call_615431: Call_GetUpdateConfigurationSetEventDestination_615411;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Version: string = "2010-12-01";
          EventDestinationMatchingEventTypes: JsonNode = nil): Recallable =
  ## getUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  var query_615432 = newJObject()
  add(query_615432, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_615432, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_615432, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615432, "Action", newJString(Action))
  add(query_615432, "EventDestination.Name", newJString(EventDestinationName))
  add(query_615432, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_615432, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_615432, "Version", newJString(Version))
  if EventDestinationMatchingEventTypes != nil:
    query_615432.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  result = call_615431.call(nil, query_615432, nil, nil, nil)

var getUpdateConfigurationSetEventDestination* = Call_GetUpdateConfigurationSetEventDestination_615411(
    name: "getUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_GetUpdateConfigurationSetEventDestination_615412,
    base: "/", url: url_GetUpdateConfigurationSetEventDestination_615413,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetReputationMetricsEnabled_615473 = ref object of OpenApiRestCall_612658
proc url_PostUpdateConfigurationSetReputationMetricsEnabled_615475(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetReputationMetricsEnabled_615474(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615476 = query.getOrDefault("Action")
  valid_615476 = validateParameter(valid_615476, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_615476 != nil:
    section.add "Action", valid_615476
  var valid_615477 = query.getOrDefault("Version")
  valid_615477 = validateParameter(valid_615477, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615477 != nil:
    section.add "Version", valid_615477
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615478 = header.getOrDefault("X-Amz-Signature")
  valid_615478 = validateParameter(valid_615478, JString, required = false,
                                 default = nil)
  if valid_615478 != nil:
    section.add "X-Amz-Signature", valid_615478
  var valid_615479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615479 = validateParameter(valid_615479, JString, required = false,
                                 default = nil)
  if valid_615479 != nil:
    section.add "X-Amz-Content-Sha256", valid_615479
  var valid_615480 = header.getOrDefault("X-Amz-Date")
  valid_615480 = validateParameter(valid_615480, JString, required = false,
                                 default = nil)
  if valid_615480 != nil:
    section.add "X-Amz-Date", valid_615480
  var valid_615481 = header.getOrDefault("X-Amz-Credential")
  valid_615481 = validateParameter(valid_615481, JString, required = false,
                                 default = nil)
  if valid_615481 != nil:
    section.add "X-Amz-Credential", valid_615481
  var valid_615482 = header.getOrDefault("X-Amz-Security-Token")
  valid_615482 = validateParameter(valid_615482, JString, required = false,
                                 default = nil)
  if valid_615482 != nil:
    section.add "X-Amz-Security-Token", valid_615482
  var valid_615483 = header.getOrDefault("X-Amz-Algorithm")
  valid_615483 = validateParameter(valid_615483, JString, required = false,
                                 default = nil)
  if valid_615483 != nil:
    section.add "X-Amz-Algorithm", valid_615483
  var valid_615484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615484 = validateParameter(valid_615484, JString, required = false,
                                 default = nil)
  if valid_615484 != nil:
    section.add "X-Amz-SignedHeaders", valid_615484
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_615485 = formData.getOrDefault("Enabled")
  valid_615485 = validateParameter(valid_615485, JBool, required = true, default = nil)
  if valid_615485 != nil:
    section.add "Enabled", valid_615485
  var valid_615486 = formData.getOrDefault("ConfigurationSetName")
  valid_615486 = validateParameter(valid_615486, JString, required = true,
                                 default = nil)
  if valid_615486 != nil:
    section.add "ConfigurationSetName", valid_615486
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615487: Call_PostUpdateConfigurationSetReputationMetricsEnabled_615473;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615487.validator(path, query, header, formData, body)
  let scheme = call_615487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615487.url(scheme.get, call_615487.host, call_615487.base,
                         call_615487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615487, url, valid)

proc call*(call_615488: Call_PostUpdateConfigurationSetReputationMetricsEnabled_615473;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_615489 = newJObject()
  var formData_615490 = newJObject()
  add(formData_615490, "Enabled", newJBool(Enabled))
  add(query_615489, "Action", newJString(Action))
  add(formData_615490, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615489, "Version", newJString(Version))
  result = call_615488.call(nil, query_615489, nil, formData_615490, nil)

var postUpdateConfigurationSetReputationMetricsEnabled* = Call_PostUpdateConfigurationSetReputationMetricsEnabled_615473(
    name: "postUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_PostUpdateConfigurationSetReputationMetricsEnabled_615474,
    base: "/", url: url_PostUpdateConfigurationSetReputationMetricsEnabled_615475,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetReputationMetricsEnabled_615456 = ref object of OpenApiRestCall_612658
proc url_GetUpdateConfigurationSetReputationMetricsEnabled_615458(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetReputationMetricsEnabled_615457(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_615459 = query.getOrDefault("ConfigurationSetName")
  valid_615459 = validateParameter(valid_615459, JString, required = true,
                                 default = nil)
  if valid_615459 != nil:
    section.add "ConfigurationSetName", valid_615459
  var valid_615460 = query.getOrDefault("Enabled")
  valid_615460 = validateParameter(valid_615460, JBool, required = true, default = nil)
  if valid_615460 != nil:
    section.add "Enabled", valid_615460
  var valid_615461 = query.getOrDefault("Action")
  valid_615461 = validateParameter(valid_615461, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_615461 != nil:
    section.add "Action", valid_615461
  var valid_615462 = query.getOrDefault("Version")
  valid_615462 = validateParameter(valid_615462, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615462 != nil:
    section.add "Version", valid_615462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615463 = header.getOrDefault("X-Amz-Signature")
  valid_615463 = validateParameter(valid_615463, JString, required = false,
                                 default = nil)
  if valid_615463 != nil:
    section.add "X-Amz-Signature", valid_615463
  var valid_615464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615464 = validateParameter(valid_615464, JString, required = false,
                                 default = nil)
  if valid_615464 != nil:
    section.add "X-Amz-Content-Sha256", valid_615464
  var valid_615465 = header.getOrDefault("X-Amz-Date")
  valid_615465 = validateParameter(valid_615465, JString, required = false,
                                 default = nil)
  if valid_615465 != nil:
    section.add "X-Amz-Date", valid_615465
  var valid_615466 = header.getOrDefault("X-Amz-Credential")
  valid_615466 = validateParameter(valid_615466, JString, required = false,
                                 default = nil)
  if valid_615466 != nil:
    section.add "X-Amz-Credential", valid_615466
  var valid_615467 = header.getOrDefault("X-Amz-Security-Token")
  valid_615467 = validateParameter(valid_615467, JString, required = false,
                                 default = nil)
  if valid_615467 != nil:
    section.add "X-Amz-Security-Token", valid_615467
  var valid_615468 = header.getOrDefault("X-Amz-Algorithm")
  valid_615468 = validateParameter(valid_615468, JString, required = false,
                                 default = nil)
  if valid_615468 != nil:
    section.add "X-Amz-Algorithm", valid_615468
  var valid_615469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615469 = validateParameter(valid_615469, JString, required = false,
                                 default = nil)
  if valid_615469 != nil:
    section.add "X-Amz-SignedHeaders", valid_615469
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615470: Call_GetUpdateConfigurationSetReputationMetricsEnabled_615456;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615470.validator(path, query, header, formData, body)
  let scheme = call_615470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615470.url(scheme.get, call_615470.host, call_615470.base,
                         call_615470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615470, url, valid)

proc call*(call_615471: Call_GetUpdateConfigurationSetReputationMetricsEnabled_615456;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615472 = newJObject()
  add(query_615472, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615472, "Enabled", newJBool(Enabled))
  add(query_615472, "Action", newJString(Action))
  add(query_615472, "Version", newJString(Version))
  result = call_615471.call(nil, query_615472, nil, nil, nil)

var getUpdateConfigurationSetReputationMetricsEnabled* = Call_GetUpdateConfigurationSetReputationMetricsEnabled_615456(
    name: "getUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_GetUpdateConfigurationSetReputationMetricsEnabled_615457,
    base: "/", url: url_GetUpdateConfigurationSetReputationMetricsEnabled_615458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetSendingEnabled_615508 = ref object of OpenApiRestCall_612658
proc url_PostUpdateConfigurationSetSendingEnabled_615510(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetSendingEnabled_615509(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615511 = query.getOrDefault("Action")
  valid_615511 = validateParameter(valid_615511, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_615511 != nil:
    section.add "Action", valid_615511
  var valid_615512 = query.getOrDefault("Version")
  valid_615512 = validateParameter(valid_615512, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615512 != nil:
    section.add "Version", valid_615512
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615513 = header.getOrDefault("X-Amz-Signature")
  valid_615513 = validateParameter(valid_615513, JString, required = false,
                                 default = nil)
  if valid_615513 != nil:
    section.add "X-Amz-Signature", valid_615513
  var valid_615514 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615514 = validateParameter(valid_615514, JString, required = false,
                                 default = nil)
  if valid_615514 != nil:
    section.add "X-Amz-Content-Sha256", valid_615514
  var valid_615515 = header.getOrDefault("X-Amz-Date")
  valid_615515 = validateParameter(valid_615515, JString, required = false,
                                 default = nil)
  if valid_615515 != nil:
    section.add "X-Amz-Date", valid_615515
  var valid_615516 = header.getOrDefault("X-Amz-Credential")
  valid_615516 = validateParameter(valid_615516, JString, required = false,
                                 default = nil)
  if valid_615516 != nil:
    section.add "X-Amz-Credential", valid_615516
  var valid_615517 = header.getOrDefault("X-Amz-Security-Token")
  valid_615517 = validateParameter(valid_615517, JString, required = false,
                                 default = nil)
  if valid_615517 != nil:
    section.add "X-Amz-Security-Token", valid_615517
  var valid_615518 = header.getOrDefault("X-Amz-Algorithm")
  valid_615518 = validateParameter(valid_615518, JString, required = false,
                                 default = nil)
  if valid_615518 != nil:
    section.add "X-Amz-Algorithm", valid_615518
  var valid_615519 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615519 = validateParameter(valid_615519, JString, required = false,
                                 default = nil)
  if valid_615519 != nil:
    section.add "X-Amz-SignedHeaders", valid_615519
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_615520 = formData.getOrDefault("Enabled")
  valid_615520 = validateParameter(valid_615520, JBool, required = true, default = nil)
  if valid_615520 != nil:
    section.add "Enabled", valid_615520
  var valid_615521 = formData.getOrDefault("ConfigurationSetName")
  valid_615521 = validateParameter(valid_615521, JString, required = true,
                                 default = nil)
  if valid_615521 != nil:
    section.add "ConfigurationSetName", valid_615521
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615522: Call_PostUpdateConfigurationSetSendingEnabled_615508;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615522.validator(path, query, header, formData, body)
  let scheme = call_615522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615522.url(scheme.get, call_615522.host, call_615522.base,
                         call_615522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615522, url, valid)

proc call*(call_615523: Call_PostUpdateConfigurationSetSendingEnabled_615508;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_615524 = newJObject()
  var formData_615525 = newJObject()
  add(formData_615525, "Enabled", newJBool(Enabled))
  add(query_615524, "Action", newJString(Action))
  add(formData_615525, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615524, "Version", newJString(Version))
  result = call_615523.call(nil, query_615524, nil, formData_615525, nil)

var postUpdateConfigurationSetSendingEnabled* = Call_PostUpdateConfigurationSetSendingEnabled_615508(
    name: "postUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_PostUpdateConfigurationSetSendingEnabled_615509,
    base: "/", url: url_PostUpdateConfigurationSetSendingEnabled_615510,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetSendingEnabled_615491 = ref object of OpenApiRestCall_612658
proc url_GetUpdateConfigurationSetSendingEnabled_615493(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetSendingEnabled_615492(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_615494 = query.getOrDefault("ConfigurationSetName")
  valid_615494 = validateParameter(valid_615494, JString, required = true,
                                 default = nil)
  if valid_615494 != nil:
    section.add "ConfigurationSetName", valid_615494
  var valid_615495 = query.getOrDefault("Enabled")
  valid_615495 = validateParameter(valid_615495, JBool, required = true, default = nil)
  if valid_615495 != nil:
    section.add "Enabled", valid_615495
  var valid_615496 = query.getOrDefault("Action")
  valid_615496 = validateParameter(valid_615496, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_615496 != nil:
    section.add "Action", valid_615496
  var valid_615497 = query.getOrDefault("Version")
  valid_615497 = validateParameter(valid_615497, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615497 != nil:
    section.add "Version", valid_615497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615498 = header.getOrDefault("X-Amz-Signature")
  valid_615498 = validateParameter(valid_615498, JString, required = false,
                                 default = nil)
  if valid_615498 != nil:
    section.add "X-Amz-Signature", valid_615498
  var valid_615499 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615499 = validateParameter(valid_615499, JString, required = false,
                                 default = nil)
  if valid_615499 != nil:
    section.add "X-Amz-Content-Sha256", valid_615499
  var valid_615500 = header.getOrDefault("X-Amz-Date")
  valid_615500 = validateParameter(valid_615500, JString, required = false,
                                 default = nil)
  if valid_615500 != nil:
    section.add "X-Amz-Date", valid_615500
  var valid_615501 = header.getOrDefault("X-Amz-Credential")
  valid_615501 = validateParameter(valid_615501, JString, required = false,
                                 default = nil)
  if valid_615501 != nil:
    section.add "X-Amz-Credential", valid_615501
  var valid_615502 = header.getOrDefault("X-Amz-Security-Token")
  valid_615502 = validateParameter(valid_615502, JString, required = false,
                                 default = nil)
  if valid_615502 != nil:
    section.add "X-Amz-Security-Token", valid_615502
  var valid_615503 = header.getOrDefault("X-Amz-Algorithm")
  valid_615503 = validateParameter(valid_615503, JString, required = false,
                                 default = nil)
  if valid_615503 != nil:
    section.add "X-Amz-Algorithm", valid_615503
  var valid_615504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615504 = validateParameter(valid_615504, JString, required = false,
                                 default = nil)
  if valid_615504 != nil:
    section.add "X-Amz-SignedHeaders", valid_615504
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615505: Call_GetUpdateConfigurationSetSendingEnabled_615491;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615505.validator(path, query, header, formData, body)
  let scheme = call_615505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615505.url(scheme.get, call_615505.host, call_615505.base,
                         call_615505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615505, url, valid)

proc call*(call_615506: Call_GetUpdateConfigurationSetSendingEnabled_615491;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615507 = newJObject()
  add(query_615507, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615507, "Enabled", newJBool(Enabled))
  add(query_615507, "Action", newJString(Action))
  add(query_615507, "Version", newJString(Version))
  result = call_615506.call(nil, query_615507, nil, nil, nil)

var getUpdateConfigurationSetSendingEnabled* = Call_GetUpdateConfigurationSetSendingEnabled_615491(
    name: "getUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_GetUpdateConfigurationSetSendingEnabled_615492, base: "/",
    url: url_GetUpdateConfigurationSetSendingEnabled_615493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetTrackingOptions_615543 = ref object of OpenApiRestCall_612658
proc url_PostUpdateConfigurationSetTrackingOptions_615545(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetTrackingOptions_615544(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615546 = query.getOrDefault("Action")
  valid_615546 = validateParameter(valid_615546, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_615546 != nil:
    section.add "Action", valid_615546
  var valid_615547 = query.getOrDefault("Version")
  valid_615547 = validateParameter(valid_615547, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615547 != nil:
    section.add "Version", valid_615547
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615548 = header.getOrDefault("X-Amz-Signature")
  valid_615548 = validateParameter(valid_615548, JString, required = false,
                                 default = nil)
  if valid_615548 != nil:
    section.add "X-Amz-Signature", valid_615548
  var valid_615549 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615549 = validateParameter(valid_615549, JString, required = false,
                                 default = nil)
  if valid_615549 != nil:
    section.add "X-Amz-Content-Sha256", valid_615549
  var valid_615550 = header.getOrDefault("X-Amz-Date")
  valid_615550 = validateParameter(valid_615550, JString, required = false,
                                 default = nil)
  if valid_615550 != nil:
    section.add "X-Amz-Date", valid_615550
  var valid_615551 = header.getOrDefault("X-Amz-Credential")
  valid_615551 = validateParameter(valid_615551, JString, required = false,
                                 default = nil)
  if valid_615551 != nil:
    section.add "X-Amz-Credential", valid_615551
  var valid_615552 = header.getOrDefault("X-Amz-Security-Token")
  valid_615552 = validateParameter(valid_615552, JString, required = false,
                                 default = nil)
  if valid_615552 != nil:
    section.add "X-Amz-Security-Token", valid_615552
  var valid_615553 = header.getOrDefault("X-Amz-Algorithm")
  valid_615553 = validateParameter(valid_615553, JString, required = false,
                                 default = nil)
  if valid_615553 != nil:
    section.add "X-Amz-Algorithm", valid_615553
  var valid_615554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615554 = validateParameter(valid_615554, JString, required = false,
                                 default = nil)
  if valid_615554 != nil:
    section.add "X-Amz-SignedHeaders", valid_615554
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_615555 = formData.getOrDefault("ConfigurationSetName")
  valid_615555 = validateParameter(valid_615555, JString, required = true,
                                 default = nil)
  if valid_615555 != nil:
    section.add "ConfigurationSetName", valid_615555
  var valid_615556 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_615556 = validateParameter(valid_615556, JString, required = false,
                                 default = nil)
  if valid_615556 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_615556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615557: Call_PostUpdateConfigurationSetTrackingOptions_615543;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615557.validator(path, query, header, formData, body)
  let scheme = call_615557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615557.url(scheme.get, call_615557.host, call_615557.base,
                         call_615557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615557, url, valid)

proc call*(call_615558: Call_PostUpdateConfigurationSetTrackingOptions_615543;
          ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01";
          TrackingOptionsCustomRedirectDomain: string = ""): Recallable =
  ## postUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  var query_615559 = newJObject()
  var formData_615560 = newJObject()
  add(query_615559, "Action", newJString(Action))
  add(formData_615560, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615559, "Version", newJString(Version))
  add(formData_615560, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  result = call_615558.call(nil, query_615559, nil, formData_615560, nil)

var postUpdateConfigurationSetTrackingOptions* = Call_PostUpdateConfigurationSetTrackingOptions_615543(
    name: "postUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_PostUpdateConfigurationSetTrackingOptions_615544,
    base: "/", url: url_PostUpdateConfigurationSetTrackingOptions_615545,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetTrackingOptions_615526 = ref object of OpenApiRestCall_612658
proc url_GetUpdateConfigurationSetTrackingOptions_615528(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetTrackingOptions_615527(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615529 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_615529 = validateParameter(valid_615529, JString, required = false,
                                 default = nil)
  if valid_615529 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_615529
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_615530 = query.getOrDefault("ConfigurationSetName")
  valid_615530 = validateParameter(valid_615530, JString, required = true,
                                 default = nil)
  if valid_615530 != nil:
    section.add "ConfigurationSetName", valid_615530
  var valid_615531 = query.getOrDefault("Action")
  valid_615531 = validateParameter(valid_615531, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_615531 != nil:
    section.add "Action", valid_615531
  var valid_615532 = query.getOrDefault("Version")
  valid_615532 = validateParameter(valid_615532, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615532 != nil:
    section.add "Version", valid_615532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615533 = header.getOrDefault("X-Amz-Signature")
  valid_615533 = validateParameter(valid_615533, JString, required = false,
                                 default = nil)
  if valid_615533 != nil:
    section.add "X-Amz-Signature", valid_615533
  var valid_615534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615534 = validateParameter(valid_615534, JString, required = false,
                                 default = nil)
  if valid_615534 != nil:
    section.add "X-Amz-Content-Sha256", valid_615534
  var valid_615535 = header.getOrDefault("X-Amz-Date")
  valid_615535 = validateParameter(valid_615535, JString, required = false,
                                 default = nil)
  if valid_615535 != nil:
    section.add "X-Amz-Date", valid_615535
  var valid_615536 = header.getOrDefault("X-Amz-Credential")
  valid_615536 = validateParameter(valid_615536, JString, required = false,
                                 default = nil)
  if valid_615536 != nil:
    section.add "X-Amz-Credential", valid_615536
  var valid_615537 = header.getOrDefault("X-Amz-Security-Token")
  valid_615537 = validateParameter(valid_615537, JString, required = false,
                                 default = nil)
  if valid_615537 != nil:
    section.add "X-Amz-Security-Token", valid_615537
  var valid_615538 = header.getOrDefault("X-Amz-Algorithm")
  valid_615538 = validateParameter(valid_615538, JString, required = false,
                                 default = nil)
  if valid_615538 != nil:
    section.add "X-Amz-Algorithm", valid_615538
  var valid_615539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615539 = validateParameter(valid_615539, JString, required = false,
                                 default = nil)
  if valid_615539 != nil:
    section.add "X-Amz-SignedHeaders", valid_615539
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615540: Call_GetUpdateConfigurationSetTrackingOptions_615526;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_615540.validator(path, query, header, formData, body)
  let scheme = call_615540.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615540.url(scheme.get, call_615540.host, call_615540.base,
                         call_615540.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615540, url, valid)

proc call*(call_615541: Call_GetUpdateConfigurationSetTrackingOptions_615526;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615542 = newJObject()
  add(query_615542, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_615542, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_615542, "Action", newJString(Action))
  add(query_615542, "Version", newJString(Version))
  result = call_615541.call(nil, query_615542, nil, nil, nil)

var getUpdateConfigurationSetTrackingOptions* = Call_GetUpdateConfigurationSetTrackingOptions_615526(
    name: "getUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_GetUpdateConfigurationSetTrackingOptions_615527,
    base: "/", url: url_GetUpdateConfigurationSetTrackingOptions_615528,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateCustomVerificationEmailTemplate_615582 = ref object of OpenApiRestCall_612658
proc url_PostUpdateCustomVerificationEmailTemplate_615584(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateCustomVerificationEmailTemplate_615583(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615585 = query.getOrDefault("Action")
  valid_615585 = validateParameter(valid_615585, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_615585 != nil:
    section.add "Action", valid_615585
  var valid_615586 = query.getOrDefault("Version")
  valid_615586 = validateParameter(valid_615586, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615586 != nil:
    section.add "Version", valid_615586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615587 = header.getOrDefault("X-Amz-Signature")
  valid_615587 = validateParameter(valid_615587, JString, required = false,
                                 default = nil)
  if valid_615587 != nil:
    section.add "X-Amz-Signature", valid_615587
  var valid_615588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615588 = validateParameter(valid_615588, JString, required = false,
                                 default = nil)
  if valid_615588 != nil:
    section.add "X-Amz-Content-Sha256", valid_615588
  var valid_615589 = header.getOrDefault("X-Amz-Date")
  valid_615589 = validateParameter(valid_615589, JString, required = false,
                                 default = nil)
  if valid_615589 != nil:
    section.add "X-Amz-Date", valid_615589
  var valid_615590 = header.getOrDefault("X-Amz-Credential")
  valid_615590 = validateParameter(valid_615590, JString, required = false,
                                 default = nil)
  if valid_615590 != nil:
    section.add "X-Amz-Credential", valid_615590
  var valid_615591 = header.getOrDefault("X-Amz-Security-Token")
  valid_615591 = validateParameter(valid_615591, JString, required = false,
                                 default = nil)
  if valid_615591 != nil:
    section.add "X-Amz-Security-Token", valid_615591
  var valid_615592 = header.getOrDefault("X-Amz-Algorithm")
  valid_615592 = validateParameter(valid_615592, JString, required = false,
                                 default = nil)
  if valid_615592 != nil:
    section.add "X-Amz-Algorithm", valid_615592
  var valid_615593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615593 = validateParameter(valid_615593, JString, required = false,
                                 default = nil)
  if valid_615593 != nil:
    section.add "X-Amz-SignedHeaders", valid_615593
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  section = newJObject()
  var valid_615594 = formData.getOrDefault("TemplateSubject")
  valid_615594 = validateParameter(valid_615594, JString, required = false,
                                 default = nil)
  if valid_615594 != nil:
    section.add "TemplateSubject", valid_615594
  var valid_615595 = formData.getOrDefault("FromEmailAddress")
  valid_615595 = validateParameter(valid_615595, JString, required = false,
                                 default = nil)
  if valid_615595 != nil:
    section.add "FromEmailAddress", valid_615595
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_615596 = formData.getOrDefault("TemplateName")
  valid_615596 = validateParameter(valid_615596, JString, required = true,
                                 default = nil)
  if valid_615596 != nil:
    section.add "TemplateName", valid_615596
  var valid_615597 = formData.getOrDefault("SuccessRedirectionURL")
  valid_615597 = validateParameter(valid_615597, JString, required = false,
                                 default = nil)
  if valid_615597 != nil:
    section.add "SuccessRedirectionURL", valid_615597
  var valid_615598 = formData.getOrDefault("TemplateContent")
  valid_615598 = validateParameter(valid_615598, JString, required = false,
                                 default = nil)
  if valid_615598 != nil:
    section.add "TemplateContent", valid_615598
  var valid_615599 = formData.getOrDefault("FailureRedirectionURL")
  valid_615599 = validateParameter(valid_615599, JString, required = false,
                                 default = nil)
  if valid_615599 != nil:
    section.add "FailureRedirectionURL", valid_615599
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615600: Call_PostUpdateCustomVerificationEmailTemplate_615582;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615600.validator(path, query, header, formData, body)
  let scheme = call_615600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615600.url(scheme.get, call_615600.host, call_615600.base,
                         call_615600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615600, url, valid)

proc call*(call_615601: Call_PostUpdateCustomVerificationEmailTemplate_615582;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; SuccessRedirectionURL: string = "";
          TemplateContent: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          FailureRedirectionURL: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_615602 = newJObject()
  var formData_615603 = newJObject()
  add(formData_615603, "TemplateSubject", newJString(TemplateSubject))
  add(formData_615603, "FromEmailAddress", newJString(FromEmailAddress))
  add(formData_615603, "TemplateName", newJString(TemplateName))
  add(formData_615603, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_615603, "TemplateContent", newJString(TemplateContent))
  add(query_615602, "Action", newJString(Action))
  add(formData_615603, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_615602, "Version", newJString(Version))
  result = call_615601.call(nil, query_615602, nil, formData_615603, nil)

var postUpdateCustomVerificationEmailTemplate* = Call_PostUpdateCustomVerificationEmailTemplate_615582(
    name: "postUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_PostUpdateCustomVerificationEmailTemplate_615583,
    base: "/", url: url_PostUpdateCustomVerificationEmailTemplate_615584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateCustomVerificationEmailTemplate_615561 = ref object of OpenApiRestCall_612658
proc url_GetUpdateCustomVerificationEmailTemplate_615563(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateCustomVerificationEmailTemplate_615562(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: JString (required)
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  section = newJObject()
  var valid_615564 = query.getOrDefault("TemplateSubject")
  valid_615564 = validateParameter(valid_615564, JString, required = false,
                                 default = nil)
  if valid_615564 != nil:
    section.add "TemplateSubject", valid_615564
  var valid_615565 = query.getOrDefault("FromEmailAddress")
  valid_615565 = validateParameter(valid_615565, JString, required = false,
                                 default = nil)
  if valid_615565 != nil:
    section.add "FromEmailAddress", valid_615565
  var valid_615566 = query.getOrDefault("TemplateContent")
  valid_615566 = validateParameter(valid_615566, JString, required = false,
                                 default = nil)
  if valid_615566 != nil:
    section.add "TemplateContent", valid_615566
  var valid_615567 = query.getOrDefault("SuccessRedirectionURL")
  valid_615567 = validateParameter(valid_615567, JString, required = false,
                                 default = nil)
  if valid_615567 != nil:
    section.add "SuccessRedirectionURL", valid_615567
  var valid_615568 = query.getOrDefault("Action")
  valid_615568 = validateParameter(valid_615568, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_615568 != nil:
    section.add "Action", valid_615568
  var valid_615569 = query.getOrDefault("FailureRedirectionURL")
  valid_615569 = validateParameter(valid_615569, JString, required = false,
                                 default = nil)
  if valid_615569 != nil:
    section.add "FailureRedirectionURL", valid_615569
  var valid_615570 = query.getOrDefault("Version")
  valid_615570 = validateParameter(valid_615570, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615570 != nil:
    section.add "Version", valid_615570
  var valid_615571 = query.getOrDefault("TemplateName")
  valid_615571 = validateParameter(valid_615571, JString, required = true,
                                 default = nil)
  if valid_615571 != nil:
    section.add "TemplateName", valid_615571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615572 = header.getOrDefault("X-Amz-Signature")
  valid_615572 = validateParameter(valid_615572, JString, required = false,
                                 default = nil)
  if valid_615572 != nil:
    section.add "X-Amz-Signature", valid_615572
  var valid_615573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615573 = validateParameter(valid_615573, JString, required = false,
                                 default = nil)
  if valid_615573 != nil:
    section.add "X-Amz-Content-Sha256", valid_615573
  var valid_615574 = header.getOrDefault("X-Amz-Date")
  valid_615574 = validateParameter(valid_615574, JString, required = false,
                                 default = nil)
  if valid_615574 != nil:
    section.add "X-Amz-Date", valid_615574
  var valid_615575 = header.getOrDefault("X-Amz-Credential")
  valid_615575 = validateParameter(valid_615575, JString, required = false,
                                 default = nil)
  if valid_615575 != nil:
    section.add "X-Amz-Credential", valid_615575
  var valid_615576 = header.getOrDefault("X-Amz-Security-Token")
  valid_615576 = validateParameter(valid_615576, JString, required = false,
                                 default = nil)
  if valid_615576 != nil:
    section.add "X-Amz-Security-Token", valid_615576
  var valid_615577 = header.getOrDefault("X-Amz-Algorithm")
  valid_615577 = validateParameter(valid_615577, JString, required = false,
                                 default = nil)
  if valid_615577 != nil:
    section.add "X-Amz-Algorithm", valid_615577
  var valid_615578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615578 = validateParameter(valid_615578, JString, required = false,
                                 default = nil)
  if valid_615578 != nil:
    section.add "X-Amz-SignedHeaders", valid_615578
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615579: Call_GetUpdateCustomVerificationEmailTemplate_615561;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615579.validator(path, query, header, formData, body)
  let scheme = call_615579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615579.url(scheme.get, call_615579.host, call_615579.base,
                         call_615579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615579, url, valid)

proc call*(call_615580: Call_GetUpdateCustomVerificationEmailTemplate_615561;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; TemplateContent: string = "";
          SuccessRedirectionURL: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          FailureRedirectionURL: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  var query_615581 = newJObject()
  add(query_615581, "TemplateSubject", newJString(TemplateSubject))
  add(query_615581, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_615581, "TemplateContent", newJString(TemplateContent))
  add(query_615581, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_615581, "Action", newJString(Action))
  add(query_615581, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_615581, "Version", newJString(Version))
  add(query_615581, "TemplateName", newJString(TemplateName))
  result = call_615580.call(nil, query_615581, nil, nil, nil)

var getUpdateCustomVerificationEmailTemplate* = Call_GetUpdateCustomVerificationEmailTemplate_615561(
    name: "getUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_GetUpdateCustomVerificationEmailTemplate_615562,
    base: "/", url: url_GetUpdateCustomVerificationEmailTemplate_615563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateReceiptRule_615626 = ref object of OpenApiRestCall_612658
proc url_PostUpdateReceiptRule_615628(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateReceiptRule_615627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615629 = query.getOrDefault("Action")
  valid_615629 = validateParameter(valid_615629, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_615629 != nil:
    section.add "Action", valid_615629
  var valid_615630 = query.getOrDefault("Version")
  valid_615630 = validateParameter(valid_615630, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615630 != nil:
    section.add "Version", valid_615630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615631 = header.getOrDefault("X-Amz-Signature")
  valid_615631 = validateParameter(valid_615631, JString, required = false,
                                 default = nil)
  if valid_615631 != nil:
    section.add "X-Amz-Signature", valid_615631
  var valid_615632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615632 = validateParameter(valid_615632, JString, required = false,
                                 default = nil)
  if valid_615632 != nil:
    section.add "X-Amz-Content-Sha256", valid_615632
  var valid_615633 = header.getOrDefault("X-Amz-Date")
  valid_615633 = validateParameter(valid_615633, JString, required = false,
                                 default = nil)
  if valid_615633 != nil:
    section.add "X-Amz-Date", valid_615633
  var valid_615634 = header.getOrDefault("X-Amz-Credential")
  valid_615634 = validateParameter(valid_615634, JString, required = false,
                                 default = nil)
  if valid_615634 != nil:
    section.add "X-Amz-Credential", valid_615634
  var valid_615635 = header.getOrDefault("X-Amz-Security-Token")
  valid_615635 = validateParameter(valid_615635, JString, required = false,
                                 default = nil)
  if valid_615635 != nil:
    section.add "X-Amz-Security-Token", valid_615635
  var valid_615636 = header.getOrDefault("X-Amz-Algorithm")
  valid_615636 = validateParameter(valid_615636, JString, required = false,
                                 default = nil)
  if valid_615636 != nil:
    section.add "X-Amz-Algorithm", valid_615636
  var valid_615637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615637 = validateParameter(valid_615637, JString, required = false,
                                 default = nil)
  if valid_615637 != nil:
    section.add "X-Amz-SignedHeaders", valid_615637
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_615638 = formData.getOrDefault("RuleSetName")
  valid_615638 = validateParameter(valid_615638, JString, required = true,
                                 default = nil)
  if valid_615638 != nil:
    section.add "RuleSetName", valid_615638
  var valid_615639 = formData.getOrDefault("Rule.Recipients")
  valid_615639 = validateParameter(valid_615639, JArray, required = false,
                                 default = nil)
  if valid_615639 != nil:
    section.add "Rule.Recipients", valid_615639
  var valid_615640 = formData.getOrDefault("Rule.Enabled")
  valid_615640 = validateParameter(valid_615640, JString, required = false,
                                 default = nil)
  if valid_615640 != nil:
    section.add "Rule.Enabled", valid_615640
  var valid_615641 = formData.getOrDefault("Rule.Actions")
  valid_615641 = validateParameter(valid_615641, JArray, required = false,
                                 default = nil)
  if valid_615641 != nil:
    section.add "Rule.Actions", valid_615641
  var valid_615642 = formData.getOrDefault("Rule.TlsPolicy")
  valid_615642 = validateParameter(valid_615642, JString, required = false,
                                 default = nil)
  if valid_615642 != nil:
    section.add "Rule.TlsPolicy", valid_615642
  var valid_615643 = formData.getOrDefault("Rule.ScanEnabled")
  valid_615643 = validateParameter(valid_615643, JString, required = false,
                                 default = nil)
  if valid_615643 != nil:
    section.add "Rule.ScanEnabled", valid_615643
  var valid_615644 = formData.getOrDefault("Rule.Name")
  valid_615644 = validateParameter(valid_615644, JString, required = false,
                                 default = nil)
  if valid_615644 != nil:
    section.add "Rule.Name", valid_615644
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615645: Call_PostUpdateReceiptRule_615626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615645.validator(path, query, header, formData, body)
  let scheme = call_615645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615645.url(scheme.get, call_615645.host, call_615645.base,
                         call_615645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615645, url, valid)

proc call*(call_615646: Call_PostUpdateReceiptRule_615626; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = "";
          RuleActions: JsonNode = nil; RuleTlsPolicy: string = "";
          Action: string = "UpdateReceiptRule"; Version: string = "2010-12-01";
          RuleScanEnabled: string = ""; RuleName: string = ""): Recallable =
  ## postUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_615647 = newJObject()
  var formData_615648 = newJObject()
  add(formData_615648, "RuleSetName", newJString(RuleSetName))
  if RuleRecipients != nil:
    formData_615648.add "Rule.Recipients", RuleRecipients
  add(formData_615648, "Rule.Enabled", newJString(RuleEnabled))
  if RuleActions != nil:
    formData_615648.add "Rule.Actions", RuleActions
  add(formData_615648, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_615647, "Action", newJString(Action))
  add(query_615647, "Version", newJString(Version))
  add(formData_615648, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_615648, "Rule.Name", newJString(RuleName))
  result = call_615646.call(nil, query_615647, nil, formData_615648, nil)

var postUpdateReceiptRule* = Call_PostUpdateReceiptRule_615626(
    name: "postUpdateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_PostUpdateReceiptRule_615627, base: "/",
    url: url_PostUpdateReceiptRule_615628, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateReceiptRule_615604 = ref object of OpenApiRestCall_612658
proc url_GetUpdateReceiptRule_615606(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateReceiptRule_615605(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615607 = query.getOrDefault("Rule.Enabled")
  valid_615607 = validateParameter(valid_615607, JString, required = false,
                                 default = nil)
  if valid_615607 != nil:
    section.add "Rule.Enabled", valid_615607
  var valid_615608 = query.getOrDefault("Rule.Name")
  valid_615608 = validateParameter(valid_615608, JString, required = false,
                                 default = nil)
  if valid_615608 != nil:
    section.add "Rule.Name", valid_615608
  var valid_615609 = query.getOrDefault("Rule.ScanEnabled")
  valid_615609 = validateParameter(valid_615609, JString, required = false,
                                 default = nil)
  if valid_615609 != nil:
    section.add "Rule.ScanEnabled", valid_615609
  var valid_615610 = query.getOrDefault("Rule.Recipients")
  valid_615610 = validateParameter(valid_615610, JArray, required = false,
                                 default = nil)
  if valid_615610 != nil:
    section.add "Rule.Recipients", valid_615610
  var valid_615611 = query.getOrDefault("Action")
  valid_615611 = validateParameter(valid_615611, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_615611 != nil:
    section.add "Action", valid_615611
  var valid_615612 = query.getOrDefault("RuleSetName")
  valid_615612 = validateParameter(valid_615612, JString, required = true,
                                 default = nil)
  if valid_615612 != nil:
    section.add "RuleSetName", valid_615612
  var valid_615613 = query.getOrDefault("Rule.TlsPolicy")
  valid_615613 = validateParameter(valid_615613, JString, required = false,
                                 default = nil)
  if valid_615613 != nil:
    section.add "Rule.TlsPolicy", valid_615613
  var valid_615614 = query.getOrDefault("Rule.Actions")
  valid_615614 = validateParameter(valid_615614, JArray, required = false,
                                 default = nil)
  if valid_615614 != nil:
    section.add "Rule.Actions", valid_615614
  var valid_615615 = query.getOrDefault("Version")
  valid_615615 = validateParameter(valid_615615, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615615 != nil:
    section.add "Version", valid_615615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615616 = header.getOrDefault("X-Amz-Signature")
  valid_615616 = validateParameter(valid_615616, JString, required = false,
                                 default = nil)
  if valid_615616 != nil:
    section.add "X-Amz-Signature", valid_615616
  var valid_615617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615617 = validateParameter(valid_615617, JString, required = false,
                                 default = nil)
  if valid_615617 != nil:
    section.add "X-Amz-Content-Sha256", valid_615617
  var valid_615618 = header.getOrDefault("X-Amz-Date")
  valid_615618 = validateParameter(valid_615618, JString, required = false,
                                 default = nil)
  if valid_615618 != nil:
    section.add "X-Amz-Date", valid_615618
  var valid_615619 = header.getOrDefault("X-Amz-Credential")
  valid_615619 = validateParameter(valid_615619, JString, required = false,
                                 default = nil)
  if valid_615619 != nil:
    section.add "X-Amz-Credential", valid_615619
  var valid_615620 = header.getOrDefault("X-Amz-Security-Token")
  valid_615620 = validateParameter(valid_615620, JString, required = false,
                                 default = nil)
  if valid_615620 != nil:
    section.add "X-Amz-Security-Token", valid_615620
  var valid_615621 = header.getOrDefault("X-Amz-Algorithm")
  valid_615621 = validateParameter(valid_615621, JString, required = false,
                                 default = nil)
  if valid_615621 != nil:
    section.add "X-Amz-Algorithm", valid_615621
  var valid_615622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615622 = validateParameter(valid_615622, JString, required = false,
                                 default = nil)
  if valid_615622 != nil:
    section.add "X-Amz-SignedHeaders", valid_615622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615623: Call_GetUpdateReceiptRule_615604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615623.validator(path, query, header, formData, body)
  let scheme = call_615623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615623.url(scheme.get, call_615623.host, call_615623.base,
                         call_615623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615623, url, valid)

proc call*(call_615624: Call_GetUpdateReceiptRule_615604; RuleSetName: string;
          RuleEnabled: string = ""; RuleName: string = ""; RuleScanEnabled: string = "";
          RuleRecipients: JsonNode = nil; Action: string = "UpdateReceiptRule";
          RuleTlsPolicy: string = ""; RuleActions: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: string (required)
  var query_615625 = newJObject()
  add(query_615625, "Rule.Enabled", newJString(RuleEnabled))
  add(query_615625, "Rule.Name", newJString(RuleName))
  add(query_615625, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  if RuleRecipients != nil:
    query_615625.add "Rule.Recipients", RuleRecipients
  add(query_615625, "Action", newJString(Action))
  add(query_615625, "RuleSetName", newJString(RuleSetName))
  add(query_615625, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  if RuleActions != nil:
    query_615625.add "Rule.Actions", RuleActions
  add(query_615625, "Version", newJString(Version))
  result = call_615624.call(nil, query_615625, nil, nil, nil)

var getUpdateReceiptRule* = Call_GetUpdateReceiptRule_615604(
    name: "getUpdateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_GetUpdateReceiptRule_615605, base: "/",
    url: url_GetUpdateReceiptRule_615606, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateTemplate_615668 = ref object of OpenApiRestCall_612658
proc url_PostUpdateTemplate_615670(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateTemplate_615669(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615671 = query.getOrDefault("Action")
  valid_615671 = validateParameter(valid_615671, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_615671 != nil:
    section.add "Action", valid_615671
  var valid_615672 = query.getOrDefault("Version")
  valid_615672 = validateParameter(valid_615672, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615672 != nil:
    section.add "Version", valid_615672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615673 = header.getOrDefault("X-Amz-Signature")
  valid_615673 = validateParameter(valid_615673, JString, required = false,
                                 default = nil)
  if valid_615673 != nil:
    section.add "X-Amz-Signature", valid_615673
  var valid_615674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615674 = validateParameter(valid_615674, JString, required = false,
                                 default = nil)
  if valid_615674 != nil:
    section.add "X-Amz-Content-Sha256", valid_615674
  var valid_615675 = header.getOrDefault("X-Amz-Date")
  valid_615675 = validateParameter(valid_615675, JString, required = false,
                                 default = nil)
  if valid_615675 != nil:
    section.add "X-Amz-Date", valid_615675
  var valid_615676 = header.getOrDefault("X-Amz-Credential")
  valid_615676 = validateParameter(valid_615676, JString, required = false,
                                 default = nil)
  if valid_615676 != nil:
    section.add "X-Amz-Credential", valid_615676
  var valid_615677 = header.getOrDefault("X-Amz-Security-Token")
  valid_615677 = validateParameter(valid_615677, JString, required = false,
                                 default = nil)
  if valid_615677 != nil:
    section.add "X-Amz-Security-Token", valid_615677
  var valid_615678 = header.getOrDefault("X-Amz-Algorithm")
  valid_615678 = validateParameter(valid_615678, JString, required = false,
                                 default = nil)
  if valid_615678 != nil:
    section.add "X-Amz-Algorithm", valid_615678
  var valid_615679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615679 = validateParameter(valid_615679, JString, required = false,
                                 default = nil)
  if valid_615679 != nil:
    section.add "X-Amz-SignedHeaders", valid_615679
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  section = newJObject()
  var valid_615680 = formData.getOrDefault("Template.TextPart")
  valid_615680 = validateParameter(valid_615680, JString, required = false,
                                 default = nil)
  if valid_615680 != nil:
    section.add "Template.TextPart", valid_615680
  var valid_615681 = formData.getOrDefault("Template.TemplateName")
  valid_615681 = validateParameter(valid_615681, JString, required = false,
                                 default = nil)
  if valid_615681 != nil:
    section.add "Template.TemplateName", valid_615681
  var valid_615682 = formData.getOrDefault("Template.SubjectPart")
  valid_615682 = validateParameter(valid_615682, JString, required = false,
                                 default = nil)
  if valid_615682 != nil:
    section.add "Template.SubjectPart", valid_615682
  var valid_615683 = formData.getOrDefault("Template.HtmlPart")
  valid_615683 = validateParameter(valid_615683, JString, required = false,
                                 default = nil)
  if valid_615683 != nil:
    section.add "Template.HtmlPart", valid_615683
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615684: Call_PostUpdateTemplate_615668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615684.validator(path, query, header, formData, body)
  let scheme = call_615684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615684.url(scheme.get, call_615684.host, call_615684.base,
                         call_615684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615684, url, valid)

proc call*(call_615685: Call_PostUpdateTemplate_615668;
          TemplateTextPart: string = ""; TemplateTemplateName: string = "";
          TemplateSubjectPart: string = ""; Action: string = "UpdateTemplate";
          Version: string = "2010-12-01"; TemplateHtmlPart: string = ""): Recallable =
  ## postUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  var query_615686 = newJObject()
  var formData_615687 = newJObject()
  add(formData_615687, "Template.TextPart", newJString(TemplateTextPart))
  add(formData_615687, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_615687, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_615686, "Action", newJString(Action))
  add(query_615686, "Version", newJString(Version))
  add(formData_615687, "Template.HtmlPart", newJString(TemplateHtmlPart))
  result = call_615685.call(nil, query_615686, nil, formData_615687, nil)

var postUpdateTemplate* = Call_PostUpdateTemplate_615668(
    name: "postUpdateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateTemplate",
    validator: validate_PostUpdateTemplate_615669, base: "/",
    url: url_PostUpdateTemplate_615670, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateTemplate_615649 = ref object of OpenApiRestCall_612658
proc url_GetUpdateTemplate_615651(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateTemplate_615650(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615652 = query.getOrDefault("Template.HtmlPart")
  valid_615652 = validateParameter(valid_615652, JString, required = false,
                                 default = nil)
  if valid_615652 != nil:
    section.add "Template.HtmlPart", valid_615652
  var valid_615653 = query.getOrDefault("Template.TemplateName")
  valid_615653 = validateParameter(valid_615653, JString, required = false,
                                 default = nil)
  if valid_615653 != nil:
    section.add "Template.TemplateName", valid_615653
  var valid_615654 = query.getOrDefault("Template.TextPart")
  valid_615654 = validateParameter(valid_615654, JString, required = false,
                                 default = nil)
  if valid_615654 != nil:
    section.add "Template.TextPart", valid_615654
  var valid_615655 = query.getOrDefault("Action")
  valid_615655 = validateParameter(valid_615655, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_615655 != nil:
    section.add "Action", valid_615655
  var valid_615656 = query.getOrDefault("Template.SubjectPart")
  valid_615656 = validateParameter(valid_615656, JString, required = false,
                                 default = nil)
  if valid_615656 != nil:
    section.add "Template.SubjectPart", valid_615656
  var valid_615657 = query.getOrDefault("Version")
  valid_615657 = validateParameter(valid_615657, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615657 != nil:
    section.add "Version", valid_615657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615658 = header.getOrDefault("X-Amz-Signature")
  valid_615658 = validateParameter(valid_615658, JString, required = false,
                                 default = nil)
  if valid_615658 != nil:
    section.add "X-Amz-Signature", valid_615658
  var valid_615659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615659 = validateParameter(valid_615659, JString, required = false,
                                 default = nil)
  if valid_615659 != nil:
    section.add "X-Amz-Content-Sha256", valid_615659
  var valid_615660 = header.getOrDefault("X-Amz-Date")
  valid_615660 = validateParameter(valid_615660, JString, required = false,
                                 default = nil)
  if valid_615660 != nil:
    section.add "X-Amz-Date", valid_615660
  var valid_615661 = header.getOrDefault("X-Amz-Credential")
  valid_615661 = validateParameter(valid_615661, JString, required = false,
                                 default = nil)
  if valid_615661 != nil:
    section.add "X-Amz-Credential", valid_615661
  var valid_615662 = header.getOrDefault("X-Amz-Security-Token")
  valid_615662 = validateParameter(valid_615662, JString, required = false,
                                 default = nil)
  if valid_615662 != nil:
    section.add "X-Amz-Security-Token", valid_615662
  var valid_615663 = header.getOrDefault("X-Amz-Algorithm")
  valid_615663 = validateParameter(valid_615663, JString, required = false,
                                 default = nil)
  if valid_615663 != nil:
    section.add "X-Amz-Algorithm", valid_615663
  var valid_615664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615664 = validateParameter(valid_615664, JString, required = false,
                                 default = nil)
  if valid_615664 != nil:
    section.add "X-Amz-SignedHeaders", valid_615664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615665: Call_GetUpdateTemplate_615649; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615665.validator(path, query, header, formData, body)
  let scheme = call_615665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615665.url(scheme.get, call_615665.host, call_615665.base,
                         call_615665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615665, url, valid)

proc call*(call_615666: Call_GetUpdateTemplate_615649;
          TemplateHtmlPart: string = ""; TemplateTemplateName: string = "";
          TemplateTextPart: string = ""; Action: string = "UpdateTemplate";
          TemplateSubjectPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: string (required)
  var query_615667 = newJObject()
  add(query_615667, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_615667, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_615667, "Template.TextPart", newJString(TemplateTextPart))
  add(query_615667, "Action", newJString(Action))
  add(query_615667, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_615667, "Version", newJString(Version))
  result = call_615666.call(nil, query_615667, nil, nil, nil)

var getUpdateTemplate* = Call_GetUpdateTemplate_615649(name: "getUpdateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateTemplate", validator: validate_GetUpdateTemplate_615650,
    base: "/", url: url_GetUpdateTemplate_615651,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainDkim_615704 = ref object of OpenApiRestCall_612658
proc url_PostVerifyDomainDkim_615706(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyDomainDkim_615705(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615707 = query.getOrDefault("Action")
  valid_615707 = validateParameter(valid_615707, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_615707 != nil:
    section.add "Action", valid_615707
  var valid_615708 = query.getOrDefault("Version")
  valid_615708 = validateParameter(valid_615708, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615708 != nil:
    section.add "Version", valid_615708
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615709 = header.getOrDefault("X-Amz-Signature")
  valid_615709 = validateParameter(valid_615709, JString, required = false,
                                 default = nil)
  if valid_615709 != nil:
    section.add "X-Amz-Signature", valid_615709
  var valid_615710 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615710 = validateParameter(valid_615710, JString, required = false,
                                 default = nil)
  if valid_615710 != nil:
    section.add "X-Amz-Content-Sha256", valid_615710
  var valid_615711 = header.getOrDefault("X-Amz-Date")
  valid_615711 = validateParameter(valid_615711, JString, required = false,
                                 default = nil)
  if valid_615711 != nil:
    section.add "X-Amz-Date", valid_615711
  var valid_615712 = header.getOrDefault("X-Amz-Credential")
  valid_615712 = validateParameter(valid_615712, JString, required = false,
                                 default = nil)
  if valid_615712 != nil:
    section.add "X-Amz-Credential", valid_615712
  var valid_615713 = header.getOrDefault("X-Amz-Security-Token")
  valid_615713 = validateParameter(valid_615713, JString, required = false,
                                 default = nil)
  if valid_615713 != nil:
    section.add "X-Amz-Security-Token", valid_615713
  var valid_615714 = header.getOrDefault("X-Amz-Algorithm")
  valid_615714 = validateParameter(valid_615714, JString, required = false,
                                 default = nil)
  if valid_615714 != nil:
    section.add "X-Amz-Algorithm", valid_615714
  var valid_615715 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615715 = validateParameter(valid_615715, JString, required = false,
                                 default = nil)
  if valid_615715 != nil:
    section.add "X-Amz-SignedHeaders", valid_615715
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_615716 = formData.getOrDefault("Domain")
  valid_615716 = validateParameter(valid_615716, JString, required = true,
                                 default = nil)
  if valid_615716 != nil:
    section.add "Domain", valid_615716
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615717: Call_PostVerifyDomainDkim_615704; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615717.validator(path, query, header, formData, body)
  let scheme = call_615717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615717.url(scheme.get, call_615717.host, call_615717.base,
                         call_615717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615717, url, valid)

proc call*(call_615718: Call_PostVerifyDomainDkim_615704; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615719 = newJObject()
  var formData_615720 = newJObject()
  add(formData_615720, "Domain", newJString(Domain))
  add(query_615719, "Action", newJString(Action))
  add(query_615719, "Version", newJString(Version))
  result = call_615718.call(nil, query_615719, nil, formData_615720, nil)

var postVerifyDomainDkim* = Call_PostVerifyDomainDkim_615704(
    name: "postVerifyDomainDkim", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_PostVerifyDomainDkim_615705, base: "/",
    url: url_PostVerifyDomainDkim_615706, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainDkim_615688 = ref object of OpenApiRestCall_612658
proc url_GetVerifyDomainDkim_615690(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyDomainDkim_615689(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615691 = query.getOrDefault("Action")
  valid_615691 = validateParameter(valid_615691, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_615691 != nil:
    section.add "Action", valid_615691
  var valid_615692 = query.getOrDefault("Domain")
  valid_615692 = validateParameter(valid_615692, JString, required = true,
                                 default = nil)
  if valid_615692 != nil:
    section.add "Domain", valid_615692
  var valid_615693 = query.getOrDefault("Version")
  valid_615693 = validateParameter(valid_615693, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615693 != nil:
    section.add "Version", valid_615693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615694 = header.getOrDefault("X-Amz-Signature")
  valid_615694 = validateParameter(valid_615694, JString, required = false,
                                 default = nil)
  if valid_615694 != nil:
    section.add "X-Amz-Signature", valid_615694
  var valid_615695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615695 = validateParameter(valid_615695, JString, required = false,
                                 default = nil)
  if valid_615695 != nil:
    section.add "X-Amz-Content-Sha256", valid_615695
  var valid_615696 = header.getOrDefault("X-Amz-Date")
  valid_615696 = validateParameter(valid_615696, JString, required = false,
                                 default = nil)
  if valid_615696 != nil:
    section.add "X-Amz-Date", valid_615696
  var valid_615697 = header.getOrDefault("X-Amz-Credential")
  valid_615697 = validateParameter(valid_615697, JString, required = false,
                                 default = nil)
  if valid_615697 != nil:
    section.add "X-Amz-Credential", valid_615697
  var valid_615698 = header.getOrDefault("X-Amz-Security-Token")
  valid_615698 = validateParameter(valid_615698, JString, required = false,
                                 default = nil)
  if valid_615698 != nil:
    section.add "X-Amz-Security-Token", valid_615698
  var valid_615699 = header.getOrDefault("X-Amz-Algorithm")
  valid_615699 = validateParameter(valid_615699, JString, required = false,
                                 default = nil)
  if valid_615699 != nil:
    section.add "X-Amz-Algorithm", valid_615699
  var valid_615700 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615700 = validateParameter(valid_615700, JString, required = false,
                                 default = nil)
  if valid_615700 != nil:
    section.add "X-Amz-SignedHeaders", valid_615700
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615701: Call_GetVerifyDomainDkim_615688; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615701.validator(path, query, header, formData, body)
  let scheme = call_615701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615701.url(scheme.get, call_615701.host, call_615701.base,
                         call_615701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615701, url, valid)

proc call*(call_615702: Call_GetVerifyDomainDkim_615688; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_615703 = newJObject()
  add(query_615703, "Action", newJString(Action))
  add(query_615703, "Domain", newJString(Domain))
  add(query_615703, "Version", newJString(Version))
  result = call_615702.call(nil, query_615703, nil, nil, nil)

var getVerifyDomainDkim* = Call_GetVerifyDomainDkim_615688(
    name: "getVerifyDomainDkim", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_GetVerifyDomainDkim_615689, base: "/",
    url: url_GetVerifyDomainDkim_615690, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainIdentity_615737 = ref object of OpenApiRestCall_612658
proc url_PostVerifyDomainIdentity_615739(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyDomainIdentity_615738(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615740 = query.getOrDefault("Action")
  valid_615740 = validateParameter(valid_615740, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_615740 != nil:
    section.add "Action", valid_615740
  var valid_615741 = query.getOrDefault("Version")
  valid_615741 = validateParameter(valid_615741, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615741 != nil:
    section.add "Version", valid_615741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615742 = header.getOrDefault("X-Amz-Signature")
  valid_615742 = validateParameter(valid_615742, JString, required = false,
                                 default = nil)
  if valid_615742 != nil:
    section.add "X-Amz-Signature", valid_615742
  var valid_615743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615743 = validateParameter(valid_615743, JString, required = false,
                                 default = nil)
  if valid_615743 != nil:
    section.add "X-Amz-Content-Sha256", valid_615743
  var valid_615744 = header.getOrDefault("X-Amz-Date")
  valid_615744 = validateParameter(valid_615744, JString, required = false,
                                 default = nil)
  if valid_615744 != nil:
    section.add "X-Amz-Date", valid_615744
  var valid_615745 = header.getOrDefault("X-Amz-Credential")
  valid_615745 = validateParameter(valid_615745, JString, required = false,
                                 default = nil)
  if valid_615745 != nil:
    section.add "X-Amz-Credential", valid_615745
  var valid_615746 = header.getOrDefault("X-Amz-Security-Token")
  valid_615746 = validateParameter(valid_615746, JString, required = false,
                                 default = nil)
  if valid_615746 != nil:
    section.add "X-Amz-Security-Token", valid_615746
  var valid_615747 = header.getOrDefault("X-Amz-Algorithm")
  valid_615747 = validateParameter(valid_615747, JString, required = false,
                                 default = nil)
  if valid_615747 != nil:
    section.add "X-Amz-Algorithm", valid_615747
  var valid_615748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615748 = validateParameter(valid_615748, JString, required = false,
                                 default = nil)
  if valid_615748 != nil:
    section.add "X-Amz-SignedHeaders", valid_615748
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_615749 = formData.getOrDefault("Domain")
  valid_615749 = validateParameter(valid_615749, JString, required = true,
                                 default = nil)
  if valid_615749 != nil:
    section.add "Domain", valid_615749
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615750: Call_PostVerifyDomainIdentity_615737; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615750.validator(path, query, header, formData, body)
  let scheme = call_615750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615750.url(scheme.get, call_615750.host, call_615750.base,
                         call_615750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615750, url, valid)

proc call*(call_615751: Call_PostVerifyDomainIdentity_615737; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615752 = newJObject()
  var formData_615753 = newJObject()
  add(formData_615753, "Domain", newJString(Domain))
  add(query_615752, "Action", newJString(Action))
  add(query_615752, "Version", newJString(Version))
  result = call_615751.call(nil, query_615752, nil, formData_615753, nil)

var postVerifyDomainIdentity* = Call_PostVerifyDomainIdentity_615737(
    name: "postVerifyDomainIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_PostVerifyDomainIdentity_615738, base: "/",
    url: url_PostVerifyDomainIdentity_615739, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainIdentity_615721 = ref object of OpenApiRestCall_612658
proc url_GetVerifyDomainIdentity_615723(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyDomainIdentity_615722(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615724 = query.getOrDefault("Action")
  valid_615724 = validateParameter(valid_615724, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_615724 != nil:
    section.add "Action", valid_615724
  var valid_615725 = query.getOrDefault("Domain")
  valid_615725 = validateParameter(valid_615725, JString, required = true,
                                 default = nil)
  if valid_615725 != nil:
    section.add "Domain", valid_615725
  var valid_615726 = query.getOrDefault("Version")
  valid_615726 = validateParameter(valid_615726, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615726 != nil:
    section.add "Version", valid_615726
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615727 = header.getOrDefault("X-Amz-Signature")
  valid_615727 = validateParameter(valid_615727, JString, required = false,
                                 default = nil)
  if valid_615727 != nil:
    section.add "X-Amz-Signature", valid_615727
  var valid_615728 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615728 = validateParameter(valid_615728, JString, required = false,
                                 default = nil)
  if valid_615728 != nil:
    section.add "X-Amz-Content-Sha256", valid_615728
  var valid_615729 = header.getOrDefault("X-Amz-Date")
  valid_615729 = validateParameter(valid_615729, JString, required = false,
                                 default = nil)
  if valid_615729 != nil:
    section.add "X-Amz-Date", valid_615729
  var valid_615730 = header.getOrDefault("X-Amz-Credential")
  valid_615730 = validateParameter(valid_615730, JString, required = false,
                                 default = nil)
  if valid_615730 != nil:
    section.add "X-Amz-Credential", valid_615730
  var valid_615731 = header.getOrDefault("X-Amz-Security-Token")
  valid_615731 = validateParameter(valid_615731, JString, required = false,
                                 default = nil)
  if valid_615731 != nil:
    section.add "X-Amz-Security-Token", valid_615731
  var valid_615732 = header.getOrDefault("X-Amz-Algorithm")
  valid_615732 = validateParameter(valid_615732, JString, required = false,
                                 default = nil)
  if valid_615732 != nil:
    section.add "X-Amz-Algorithm", valid_615732
  var valid_615733 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615733 = validateParameter(valid_615733, JString, required = false,
                                 default = nil)
  if valid_615733 != nil:
    section.add "X-Amz-SignedHeaders", valid_615733
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615734: Call_GetVerifyDomainIdentity_615721; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615734.validator(path, query, header, formData, body)
  let scheme = call_615734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615734.url(scheme.get, call_615734.host, call_615734.base,
                         call_615734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615734, url, valid)

proc call*(call_615735: Call_GetVerifyDomainIdentity_615721; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_615736 = newJObject()
  add(query_615736, "Action", newJString(Action))
  add(query_615736, "Domain", newJString(Domain))
  add(query_615736, "Version", newJString(Version))
  result = call_615735.call(nil, query_615736, nil, nil, nil)

var getVerifyDomainIdentity* = Call_GetVerifyDomainIdentity_615721(
    name: "getVerifyDomainIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_GetVerifyDomainIdentity_615722, base: "/",
    url: url_GetVerifyDomainIdentity_615723, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailAddress_615770 = ref object of OpenApiRestCall_612658
proc url_PostVerifyEmailAddress_615772(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyEmailAddress_615771(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615773 = query.getOrDefault("Action")
  valid_615773 = validateParameter(valid_615773, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_615773 != nil:
    section.add "Action", valid_615773
  var valid_615774 = query.getOrDefault("Version")
  valid_615774 = validateParameter(valid_615774, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615774 != nil:
    section.add "Version", valid_615774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615775 = header.getOrDefault("X-Amz-Signature")
  valid_615775 = validateParameter(valid_615775, JString, required = false,
                                 default = nil)
  if valid_615775 != nil:
    section.add "X-Amz-Signature", valid_615775
  var valid_615776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615776 = validateParameter(valid_615776, JString, required = false,
                                 default = nil)
  if valid_615776 != nil:
    section.add "X-Amz-Content-Sha256", valid_615776
  var valid_615777 = header.getOrDefault("X-Amz-Date")
  valid_615777 = validateParameter(valid_615777, JString, required = false,
                                 default = nil)
  if valid_615777 != nil:
    section.add "X-Amz-Date", valid_615777
  var valid_615778 = header.getOrDefault("X-Amz-Credential")
  valid_615778 = validateParameter(valid_615778, JString, required = false,
                                 default = nil)
  if valid_615778 != nil:
    section.add "X-Amz-Credential", valid_615778
  var valid_615779 = header.getOrDefault("X-Amz-Security-Token")
  valid_615779 = validateParameter(valid_615779, JString, required = false,
                                 default = nil)
  if valid_615779 != nil:
    section.add "X-Amz-Security-Token", valid_615779
  var valid_615780 = header.getOrDefault("X-Amz-Algorithm")
  valid_615780 = validateParameter(valid_615780, JString, required = false,
                                 default = nil)
  if valid_615780 != nil:
    section.add "X-Amz-Algorithm", valid_615780
  var valid_615781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615781 = validateParameter(valid_615781, JString, required = false,
                                 default = nil)
  if valid_615781 != nil:
    section.add "X-Amz-SignedHeaders", valid_615781
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_615782 = formData.getOrDefault("EmailAddress")
  valid_615782 = validateParameter(valid_615782, JString, required = true,
                                 default = nil)
  if valid_615782 != nil:
    section.add "EmailAddress", valid_615782
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615783: Call_PostVerifyEmailAddress_615770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_615783.validator(path, query, header, formData, body)
  let scheme = call_615783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615783.url(scheme.get, call_615783.host, call_615783.base,
                         call_615783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615783, url, valid)

proc call*(call_615784: Call_PostVerifyEmailAddress_615770; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  var query_615785 = newJObject()
  var formData_615786 = newJObject()
  add(query_615785, "Action", newJString(Action))
  add(query_615785, "Version", newJString(Version))
  add(formData_615786, "EmailAddress", newJString(EmailAddress))
  result = call_615784.call(nil, query_615785, nil, formData_615786, nil)

var postVerifyEmailAddress* = Call_PostVerifyEmailAddress_615770(
    name: "postVerifyEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_PostVerifyEmailAddress_615771, base: "/",
    url: url_PostVerifyEmailAddress_615772, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailAddress_615754 = ref object of OpenApiRestCall_612658
proc url_GetVerifyEmailAddress_615756(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyEmailAddress_615755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615757 = query.getOrDefault("Action")
  valid_615757 = validateParameter(valid_615757, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_615757 != nil:
    section.add "Action", valid_615757
  var valid_615758 = query.getOrDefault("EmailAddress")
  valid_615758 = validateParameter(valid_615758, JString, required = true,
                                 default = nil)
  if valid_615758 != nil:
    section.add "EmailAddress", valid_615758
  var valid_615759 = query.getOrDefault("Version")
  valid_615759 = validateParameter(valid_615759, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615759 != nil:
    section.add "Version", valid_615759
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615760 = header.getOrDefault("X-Amz-Signature")
  valid_615760 = validateParameter(valid_615760, JString, required = false,
                                 default = nil)
  if valid_615760 != nil:
    section.add "X-Amz-Signature", valid_615760
  var valid_615761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615761 = validateParameter(valid_615761, JString, required = false,
                                 default = nil)
  if valid_615761 != nil:
    section.add "X-Amz-Content-Sha256", valid_615761
  var valid_615762 = header.getOrDefault("X-Amz-Date")
  valid_615762 = validateParameter(valid_615762, JString, required = false,
                                 default = nil)
  if valid_615762 != nil:
    section.add "X-Amz-Date", valid_615762
  var valid_615763 = header.getOrDefault("X-Amz-Credential")
  valid_615763 = validateParameter(valid_615763, JString, required = false,
                                 default = nil)
  if valid_615763 != nil:
    section.add "X-Amz-Credential", valid_615763
  var valid_615764 = header.getOrDefault("X-Amz-Security-Token")
  valid_615764 = validateParameter(valid_615764, JString, required = false,
                                 default = nil)
  if valid_615764 != nil:
    section.add "X-Amz-Security-Token", valid_615764
  var valid_615765 = header.getOrDefault("X-Amz-Algorithm")
  valid_615765 = validateParameter(valid_615765, JString, required = false,
                                 default = nil)
  if valid_615765 != nil:
    section.add "X-Amz-Algorithm", valid_615765
  var valid_615766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615766 = validateParameter(valid_615766, JString, required = false,
                                 default = nil)
  if valid_615766 != nil:
    section.add "X-Amz-SignedHeaders", valid_615766
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615767: Call_GetVerifyEmailAddress_615754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_615767.validator(path, query, header, formData, body)
  let scheme = call_615767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615767.url(scheme.get, call_615767.host, call_615767.base,
                         call_615767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615767, url, valid)

proc call*(call_615768: Call_GetVerifyEmailAddress_615754; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_615769 = newJObject()
  add(query_615769, "Action", newJString(Action))
  add(query_615769, "EmailAddress", newJString(EmailAddress))
  add(query_615769, "Version", newJString(Version))
  result = call_615768.call(nil, query_615769, nil, nil, nil)

var getVerifyEmailAddress* = Call_GetVerifyEmailAddress_615754(
    name: "getVerifyEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_GetVerifyEmailAddress_615755, base: "/",
    url: url_GetVerifyEmailAddress_615756, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailIdentity_615803 = ref object of OpenApiRestCall_612658
proc url_PostVerifyEmailIdentity_615805(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyEmailIdentity_615804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615806 = query.getOrDefault("Action")
  valid_615806 = validateParameter(valid_615806, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_615806 != nil:
    section.add "Action", valid_615806
  var valid_615807 = query.getOrDefault("Version")
  valid_615807 = validateParameter(valid_615807, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615807 != nil:
    section.add "Version", valid_615807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615808 = header.getOrDefault("X-Amz-Signature")
  valid_615808 = validateParameter(valid_615808, JString, required = false,
                                 default = nil)
  if valid_615808 != nil:
    section.add "X-Amz-Signature", valid_615808
  var valid_615809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615809 = validateParameter(valid_615809, JString, required = false,
                                 default = nil)
  if valid_615809 != nil:
    section.add "X-Amz-Content-Sha256", valid_615809
  var valid_615810 = header.getOrDefault("X-Amz-Date")
  valid_615810 = validateParameter(valid_615810, JString, required = false,
                                 default = nil)
  if valid_615810 != nil:
    section.add "X-Amz-Date", valid_615810
  var valid_615811 = header.getOrDefault("X-Amz-Credential")
  valid_615811 = validateParameter(valid_615811, JString, required = false,
                                 default = nil)
  if valid_615811 != nil:
    section.add "X-Amz-Credential", valid_615811
  var valid_615812 = header.getOrDefault("X-Amz-Security-Token")
  valid_615812 = validateParameter(valid_615812, JString, required = false,
                                 default = nil)
  if valid_615812 != nil:
    section.add "X-Amz-Security-Token", valid_615812
  var valid_615813 = header.getOrDefault("X-Amz-Algorithm")
  valid_615813 = validateParameter(valid_615813, JString, required = false,
                                 default = nil)
  if valid_615813 != nil:
    section.add "X-Amz-Algorithm", valid_615813
  var valid_615814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615814 = validateParameter(valid_615814, JString, required = false,
                                 default = nil)
  if valid_615814 != nil:
    section.add "X-Amz-SignedHeaders", valid_615814
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_615815 = formData.getOrDefault("EmailAddress")
  valid_615815 = validateParameter(valid_615815, JString, required = true,
                                 default = nil)
  if valid_615815 != nil:
    section.add "EmailAddress", valid_615815
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615816: Call_PostVerifyEmailIdentity_615803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615816.validator(path, query, header, formData, body)
  let scheme = call_615816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615816.url(scheme.get, call_615816.host, call_615816.base,
                         call_615816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615816, url, valid)

proc call*(call_615817: Call_PostVerifyEmailIdentity_615803; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  var query_615818 = newJObject()
  var formData_615819 = newJObject()
  add(query_615818, "Action", newJString(Action))
  add(query_615818, "Version", newJString(Version))
  add(formData_615819, "EmailAddress", newJString(EmailAddress))
  result = call_615817.call(nil, query_615818, nil, formData_615819, nil)

var postVerifyEmailIdentity* = Call_PostVerifyEmailIdentity_615803(
    name: "postVerifyEmailIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_PostVerifyEmailIdentity_615804, base: "/",
    url: url_PostVerifyEmailIdentity_615805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailIdentity_615787 = ref object of OpenApiRestCall_612658
proc url_GetVerifyEmailIdentity_615789(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyEmailIdentity_615788(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_615790 = query.getOrDefault("Action")
  valid_615790 = validateParameter(valid_615790, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_615790 != nil:
    section.add "Action", valid_615790
  var valid_615791 = query.getOrDefault("EmailAddress")
  valid_615791 = validateParameter(valid_615791, JString, required = true,
                                 default = nil)
  if valid_615791 != nil:
    section.add "EmailAddress", valid_615791
  var valid_615792 = query.getOrDefault("Version")
  valid_615792 = validateParameter(valid_615792, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_615792 != nil:
    section.add "Version", valid_615792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615793 = header.getOrDefault("X-Amz-Signature")
  valid_615793 = validateParameter(valid_615793, JString, required = false,
                                 default = nil)
  if valid_615793 != nil:
    section.add "X-Amz-Signature", valid_615793
  var valid_615794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615794 = validateParameter(valid_615794, JString, required = false,
                                 default = nil)
  if valid_615794 != nil:
    section.add "X-Amz-Content-Sha256", valid_615794
  var valid_615795 = header.getOrDefault("X-Amz-Date")
  valid_615795 = validateParameter(valid_615795, JString, required = false,
                                 default = nil)
  if valid_615795 != nil:
    section.add "X-Amz-Date", valid_615795
  var valid_615796 = header.getOrDefault("X-Amz-Credential")
  valid_615796 = validateParameter(valid_615796, JString, required = false,
                                 default = nil)
  if valid_615796 != nil:
    section.add "X-Amz-Credential", valid_615796
  var valid_615797 = header.getOrDefault("X-Amz-Security-Token")
  valid_615797 = validateParameter(valid_615797, JString, required = false,
                                 default = nil)
  if valid_615797 != nil:
    section.add "X-Amz-Security-Token", valid_615797
  var valid_615798 = header.getOrDefault("X-Amz-Algorithm")
  valid_615798 = validateParameter(valid_615798, JString, required = false,
                                 default = nil)
  if valid_615798 != nil:
    section.add "X-Amz-Algorithm", valid_615798
  var valid_615799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615799 = validateParameter(valid_615799, JString, required = false,
                                 default = nil)
  if valid_615799 != nil:
    section.add "X-Amz-SignedHeaders", valid_615799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615800: Call_GetVerifyEmailIdentity_615787; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_615800.validator(path, query, header, formData, body)
  let scheme = call_615800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615800.url(scheme.get, call_615800.host, call_615800.base,
                         call_615800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615800, url, valid)

proc call*(call_615801: Call_GetVerifyEmailIdentity_615787; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_615802 = newJObject()
  add(query_615802, "Action", newJString(Action))
  add(query_615802, "EmailAddress", newJString(EmailAddress))
  add(query_615802, "Version", newJString(Version))
  result = call_615801.call(nil, query_615802, nil, nil, nil)

var getVerifyEmailIdentity* = Call_GetVerifyEmailIdentity_615787(
    name: "getVerifyEmailIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_GetVerifyEmailIdentity_615788, base: "/",
    url: url_GetVerifyEmailIdentity_615789, schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
